
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00040000 <_vector_table>:
   40000:	80 27 02 20 b1 65 04 00 97 5f 05 00 85 65 04 00     .'. .e..._...e..
   40010:	85 65 04 00 85 65 04 00 85 65 04 00 85 65 04 00     .e...e...e...e..
	...
   4002c:	09 5f 04 00 85 65 04 00 00 00 00 00 75 5e 04 00     ._...e......u^..
   4003c:	85 65 04 00                                         .e..

00040040 <_irq_vector_table>:
   40040:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   40050:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   40060:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   40070:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   40080:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   40090:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   400a0:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   400b0:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   400c0:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   400d0:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   400e0:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   400f0:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   40100:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   40110:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   40120:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   40130:	ad 5f 04 00 ad 5f 04 00 ad 5f 04 00 ad 5f 04 00     ._..._..._..._..
   40140:	ad 5f 04 00                                         ._..

Disassembly of section text:

00040148 <__aeabi_drsub>:
   40148:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   4014c:	e002      	b.n	40154 <__adddf3>
   4014e:	bf00      	nop

00040150 <__aeabi_dsub>:
   40150:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00040154 <__adddf3>:
   40154:	b530      	push	{r4, r5, lr}
   40156:	ea4f 0441 	mov.w	r4, r1, lsl #1
   4015a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   4015e:	ea94 0f05 	teq	r4, r5
   40162:	bf08      	it	eq
   40164:	ea90 0f02 	teqeq	r0, r2
   40168:	bf1f      	itttt	ne
   4016a:	ea54 0c00 	orrsne.w	ip, r4, r0
   4016e:	ea55 0c02 	orrsne.w	ip, r5, r2
   40172:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   40176:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   4017a:	f000 80e2 	beq.w	40342 <__adddf3+0x1ee>
   4017e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   40182:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   40186:	bfb8      	it	lt
   40188:	426d      	neglt	r5, r5
   4018a:	dd0c      	ble.n	401a6 <__adddf3+0x52>
   4018c:	442c      	add	r4, r5
   4018e:	ea80 0202 	eor.w	r2, r0, r2
   40192:	ea81 0303 	eor.w	r3, r1, r3
   40196:	ea82 0000 	eor.w	r0, r2, r0
   4019a:	ea83 0101 	eor.w	r1, r3, r1
   4019e:	ea80 0202 	eor.w	r2, r0, r2
   401a2:	ea81 0303 	eor.w	r3, r1, r3
   401a6:	2d36      	cmp	r5, #54	; 0x36
   401a8:	bf88      	it	hi
   401aa:	bd30      	pophi	{r4, r5, pc}
   401ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   401b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   401b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   401b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   401bc:	d002      	beq.n	401c4 <__adddf3+0x70>
   401be:	4240      	negs	r0, r0
   401c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   401c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   401c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   401cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   401d0:	d002      	beq.n	401d8 <__adddf3+0x84>
   401d2:	4252      	negs	r2, r2
   401d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   401d8:	ea94 0f05 	teq	r4, r5
   401dc:	f000 80a7 	beq.w	4032e <__adddf3+0x1da>
   401e0:	f1a4 0401 	sub.w	r4, r4, #1
   401e4:	f1d5 0e20 	rsbs	lr, r5, #32
   401e8:	db0d      	blt.n	40206 <__adddf3+0xb2>
   401ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   401ee:	fa22 f205 	lsr.w	r2, r2, r5
   401f2:	1880      	adds	r0, r0, r2
   401f4:	f141 0100 	adc.w	r1, r1, #0
   401f8:	fa03 f20e 	lsl.w	r2, r3, lr
   401fc:	1880      	adds	r0, r0, r2
   401fe:	fa43 f305 	asr.w	r3, r3, r5
   40202:	4159      	adcs	r1, r3
   40204:	e00e      	b.n	40224 <__adddf3+0xd0>
   40206:	f1a5 0520 	sub.w	r5, r5, #32
   4020a:	f10e 0e20 	add.w	lr, lr, #32
   4020e:	2a01      	cmp	r2, #1
   40210:	fa03 fc0e 	lsl.w	ip, r3, lr
   40214:	bf28      	it	cs
   40216:	f04c 0c02 	orrcs.w	ip, ip, #2
   4021a:	fa43 f305 	asr.w	r3, r3, r5
   4021e:	18c0      	adds	r0, r0, r3
   40220:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   40224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   40228:	d507      	bpl.n	4023a <__adddf3+0xe6>
   4022a:	f04f 0e00 	mov.w	lr, #0
   4022e:	f1dc 0c00 	rsbs	ip, ip, #0
   40232:	eb7e 0000 	sbcs.w	r0, lr, r0
   40236:	eb6e 0101 	sbc.w	r1, lr, r1
   4023a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   4023e:	d31b      	bcc.n	40278 <__adddf3+0x124>
   40240:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   40244:	d30c      	bcc.n	40260 <__adddf3+0x10c>
   40246:	0849      	lsrs	r1, r1, #1
   40248:	ea5f 0030 	movs.w	r0, r0, rrx
   4024c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   40250:	f104 0401 	add.w	r4, r4, #1
   40254:	ea4f 5244 	mov.w	r2, r4, lsl #21
   40258:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   4025c:	f080 809a 	bcs.w	40394 <__adddf3+0x240>
   40260:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   40264:	bf08      	it	eq
   40266:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   4026a:	f150 0000 	adcs.w	r0, r0, #0
   4026e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   40272:	ea41 0105 	orr.w	r1, r1, r5
   40276:	bd30      	pop	{r4, r5, pc}
   40278:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   4027c:	4140      	adcs	r0, r0
   4027e:	eb41 0101 	adc.w	r1, r1, r1
   40282:	3c01      	subs	r4, #1
   40284:	bf28      	it	cs
   40286:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   4028a:	d2e9      	bcs.n	40260 <__adddf3+0x10c>
   4028c:	f091 0f00 	teq	r1, #0
   40290:	bf04      	itt	eq
   40292:	4601      	moveq	r1, r0
   40294:	2000      	moveq	r0, #0
   40296:	fab1 f381 	clz	r3, r1
   4029a:	bf08      	it	eq
   4029c:	3320      	addeq	r3, #32
   4029e:	f1a3 030b 	sub.w	r3, r3, #11
   402a2:	f1b3 0220 	subs.w	r2, r3, #32
   402a6:	da0c      	bge.n	402c2 <__adddf3+0x16e>
   402a8:	320c      	adds	r2, #12
   402aa:	dd08      	ble.n	402be <__adddf3+0x16a>
   402ac:	f102 0c14 	add.w	ip, r2, #20
   402b0:	f1c2 020c 	rsb	r2, r2, #12
   402b4:	fa01 f00c 	lsl.w	r0, r1, ip
   402b8:	fa21 f102 	lsr.w	r1, r1, r2
   402bc:	e00c      	b.n	402d8 <__adddf3+0x184>
   402be:	f102 0214 	add.w	r2, r2, #20
   402c2:	bfd8      	it	le
   402c4:	f1c2 0c20 	rsble	ip, r2, #32
   402c8:	fa01 f102 	lsl.w	r1, r1, r2
   402cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   402d0:	bfdc      	itt	le
   402d2:	ea41 010c 	orrle.w	r1, r1, ip
   402d6:	4090      	lslle	r0, r2
   402d8:	1ae4      	subs	r4, r4, r3
   402da:	bfa2      	ittt	ge
   402dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   402e0:	4329      	orrge	r1, r5
   402e2:	bd30      	popge	{r4, r5, pc}
   402e4:	ea6f 0404 	mvn.w	r4, r4
   402e8:	3c1f      	subs	r4, #31
   402ea:	da1c      	bge.n	40326 <__adddf3+0x1d2>
   402ec:	340c      	adds	r4, #12
   402ee:	dc0e      	bgt.n	4030e <__adddf3+0x1ba>
   402f0:	f104 0414 	add.w	r4, r4, #20
   402f4:	f1c4 0220 	rsb	r2, r4, #32
   402f8:	fa20 f004 	lsr.w	r0, r0, r4
   402fc:	fa01 f302 	lsl.w	r3, r1, r2
   40300:	ea40 0003 	orr.w	r0, r0, r3
   40304:	fa21 f304 	lsr.w	r3, r1, r4
   40308:	ea45 0103 	orr.w	r1, r5, r3
   4030c:	bd30      	pop	{r4, r5, pc}
   4030e:	f1c4 040c 	rsb	r4, r4, #12
   40312:	f1c4 0220 	rsb	r2, r4, #32
   40316:	fa20 f002 	lsr.w	r0, r0, r2
   4031a:	fa01 f304 	lsl.w	r3, r1, r4
   4031e:	ea40 0003 	orr.w	r0, r0, r3
   40322:	4629      	mov	r1, r5
   40324:	bd30      	pop	{r4, r5, pc}
   40326:	fa21 f004 	lsr.w	r0, r1, r4
   4032a:	4629      	mov	r1, r5
   4032c:	bd30      	pop	{r4, r5, pc}
   4032e:	f094 0f00 	teq	r4, #0
   40332:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   40336:	bf06      	itte	eq
   40338:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   4033c:	3401      	addeq	r4, #1
   4033e:	3d01      	subne	r5, #1
   40340:	e74e      	b.n	401e0 <__adddf3+0x8c>
   40342:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   40346:	bf18      	it	ne
   40348:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   4034c:	d029      	beq.n	403a2 <__adddf3+0x24e>
   4034e:	ea94 0f05 	teq	r4, r5
   40352:	bf08      	it	eq
   40354:	ea90 0f02 	teqeq	r0, r2
   40358:	d005      	beq.n	40366 <__adddf3+0x212>
   4035a:	ea54 0c00 	orrs.w	ip, r4, r0
   4035e:	bf04      	itt	eq
   40360:	4619      	moveq	r1, r3
   40362:	4610      	moveq	r0, r2
   40364:	bd30      	pop	{r4, r5, pc}
   40366:	ea91 0f03 	teq	r1, r3
   4036a:	bf1e      	ittt	ne
   4036c:	2100      	movne	r1, #0
   4036e:	2000      	movne	r0, #0
   40370:	bd30      	popne	{r4, r5, pc}
   40372:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   40376:	d105      	bne.n	40384 <__adddf3+0x230>
   40378:	0040      	lsls	r0, r0, #1
   4037a:	4149      	adcs	r1, r1
   4037c:	bf28      	it	cs
   4037e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   40382:	bd30      	pop	{r4, r5, pc}
   40384:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   40388:	bf3c      	itt	cc
   4038a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   4038e:	bd30      	popcc	{r4, r5, pc}
   40390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   40394:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   40398:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   4039c:	f04f 0000 	mov.w	r0, #0
   403a0:	bd30      	pop	{r4, r5, pc}
   403a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   403a6:	bf1a      	itte	ne
   403a8:	4619      	movne	r1, r3
   403aa:	4610      	movne	r0, r2
   403ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   403b0:	bf1c      	itt	ne
   403b2:	460b      	movne	r3, r1
   403b4:	4602      	movne	r2, r0
   403b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   403ba:	bf06      	itte	eq
   403bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   403c0:	ea91 0f03 	teqeq	r1, r3
   403c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   403c8:	bd30      	pop	{r4, r5, pc}
   403ca:	bf00      	nop

000403cc <__aeabi_ui2d>:
   403cc:	f090 0f00 	teq	r0, #0
   403d0:	bf04      	itt	eq
   403d2:	2100      	moveq	r1, #0
   403d4:	4770      	bxeq	lr
   403d6:	b530      	push	{r4, r5, lr}
   403d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   403dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   403e0:	f04f 0500 	mov.w	r5, #0
   403e4:	f04f 0100 	mov.w	r1, #0
   403e8:	e750      	b.n	4028c <__adddf3+0x138>
   403ea:	bf00      	nop

000403ec <__aeabi_i2d>:
   403ec:	f090 0f00 	teq	r0, #0
   403f0:	bf04      	itt	eq
   403f2:	2100      	moveq	r1, #0
   403f4:	4770      	bxeq	lr
   403f6:	b530      	push	{r4, r5, lr}
   403f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   403fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   40400:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   40404:	bf48      	it	mi
   40406:	4240      	negmi	r0, r0
   40408:	f04f 0100 	mov.w	r1, #0
   4040c:	e73e      	b.n	4028c <__adddf3+0x138>
   4040e:	bf00      	nop

00040410 <__aeabi_f2d>:
   40410:	0042      	lsls	r2, r0, #1
   40412:	ea4f 01e2 	mov.w	r1, r2, asr #3
   40416:	ea4f 0131 	mov.w	r1, r1, rrx
   4041a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   4041e:	bf1f      	itttt	ne
   40420:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   40424:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   40428:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   4042c:	4770      	bxne	lr
   4042e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   40432:	bf08      	it	eq
   40434:	4770      	bxeq	lr
   40436:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   4043a:	bf04      	itt	eq
   4043c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   40440:	4770      	bxeq	lr
   40442:	b530      	push	{r4, r5, lr}
   40444:	f44f 7460 	mov.w	r4, #896	; 0x380
   40448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   4044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   40450:	e71c      	b.n	4028c <__adddf3+0x138>
   40452:	bf00      	nop

00040454 <__aeabi_ul2d>:
   40454:	ea50 0201 	orrs.w	r2, r0, r1
   40458:	bf08      	it	eq
   4045a:	4770      	bxeq	lr
   4045c:	b530      	push	{r4, r5, lr}
   4045e:	f04f 0500 	mov.w	r5, #0
   40462:	e00a      	b.n	4047a <__aeabi_l2d+0x16>

00040464 <__aeabi_l2d>:
   40464:	ea50 0201 	orrs.w	r2, r0, r1
   40468:	bf08      	it	eq
   4046a:	4770      	bxeq	lr
   4046c:	b530      	push	{r4, r5, lr}
   4046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   40472:	d502      	bpl.n	4047a <__aeabi_l2d+0x16>
   40474:	4240      	negs	r0, r0
   40476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   4047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   4047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   40482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   40486:	f43f aed8 	beq.w	4023a <__adddf3+0xe6>
   4048a:	f04f 0203 	mov.w	r2, #3
   4048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   40492:	bf18      	it	ne
   40494:	3203      	addne	r2, #3
   40496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   4049a:	bf18      	it	ne
   4049c:	3203      	addne	r2, #3
   4049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   404a2:	f1c2 0320 	rsb	r3, r2, #32
   404a6:	fa00 fc03 	lsl.w	ip, r0, r3
   404aa:	fa20 f002 	lsr.w	r0, r0, r2
   404ae:	fa01 fe03 	lsl.w	lr, r1, r3
   404b2:	ea40 000e 	orr.w	r0, r0, lr
   404b6:	fa21 f102 	lsr.w	r1, r1, r2
   404ba:	4414      	add	r4, r2
   404bc:	e6bd      	b.n	4023a <__adddf3+0xe6>
   404be:	bf00      	nop

000404c0 <__aeabi_dmul>:
   404c0:	b570      	push	{r4, r5, r6, lr}
   404c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   404c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   404ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   404ce:	bf1d      	ittte	ne
   404d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   404d4:	ea94 0f0c 	teqne	r4, ip
   404d8:	ea95 0f0c 	teqne	r5, ip
   404dc:	f000 f8de 	bleq	4069c <__aeabi_dmul+0x1dc>
   404e0:	442c      	add	r4, r5
   404e2:	ea81 0603 	eor.w	r6, r1, r3
   404e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   404ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   404ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   404f2:	bf18      	it	ne
   404f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   404f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   404fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   40500:	d038      	beq.n	40574 <__aeabi_dmul+0xb4>
   40502:	fba0 ce02 	umull	ip, lr, r0, r2
   40506:	f04f 0500 	mov.w	r5, #0
   4050a:	fbe1 e502 	umlal	lr, r5, r1, r2
   4050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   40512:	fbe0 e503 	umlal	lr, r5, r0, r3
   40516:	f04f 0600 	mov.w	r6, #0
   4051a:	fbe1 5603 	umlal	r5, r6, r1, r3
   4051e:	f09c 0f00 	teq	ip, #0
   40522:	bf18      	it	ne
   40524:	f04e 0e01 	orrne.w	lr, lr, #1
   40528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   4052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   40530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   40534:	d204      	bcs.n	40540 <__aeabi_dmul+0x80>
   40536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   4053a:	416d      	adcs	r5, r5
   4053c:	eb46 0606 	adc.w	r6, r6, r6
   40540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   40544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   40548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   4054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   40550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   40554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   40558:	bf88      	it	hi
   4055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   4055e:	d81e      	bhi.n	4059e <__aeabi_dmul+0xde>
   40560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   40564:	bf08      	it	eq
   40566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   4056a:	f150 0000 	adcs.w	r0, r0, #0
   4056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   40572:	bd70      	pop	{r4, r5, r6, pc}
   40574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   40578:	ea46 0101 	orr.w	r1, r6, r1
   4057c:	ea40 0002 	orr.w	r0, r0, r2
   40580:	ea81 0103 	eor.w	r1, r1, r3
   40584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   40588:	bfc2      	ittt	gt
   4058a:	ebd4 050c 	rsbsgt	r5, r4, ip
   4058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   40592:	bd70      	popgt	{r4, r5, r6, pc}
   40594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   40598:	f04f 0e00 	mov.w	lr, #0
   4059c:	3c01      	subs	r4, #1
   4059e:	f300 80ab 	bgt.w	406f8 <__aeabi_dmul+0x238>
   405a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   405a6:	bfde      	ittt	le
   405a8:	2000      	movle	r0, #0
   405aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   405ae:	bd70      	pople	{r4, r5, r6, pc}
   405b0:	f1c4 0400 	rsb	r4, r4, #0
   405b4:	3c20      	subs	r4, #32
   405b6:	da35      	bge.n	40624 <__aeabi_dmul+0x164>
   405b8:	340c      	adds	r4, #12
   405ba:	dc1b      	bgt.n	405f4 <__aeabi_dmul+0x134>
   405bc:	f104 0414 	add.w	r4, r4, #20
   405c0:	f1c4 0520 	rsb	r5, r4, #32
   405c4:	fa00 f305 	lsl.w	r3, r0, r5
   405c8:	fa20 f004 	lsr.w	r0, r0, r4
   405cc:	fa01 f205 	lsl.w	r2, r1, r5
   405d0:	ea40 0002 	orr.w	r0, r0, r2
   405d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   405d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   405dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   405e0:	fa21 f604 	lsr.w	r6, r1, r4
   405e4:	eb42 0106 	adc.w	r1, r2, r6
   405e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   405ec:	bf08      	it	eq
   405ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   405f2:	bd70      	pop	{r4, r5, r6, pc}
   405f4:	f1c4 040c 	rsb	r4, r4, #12
   405f8:	f1c4 0520 	rsb	r5, r4, #32
   405fc:	fa00 f304 	lsl.w	r3, r0, r4
   40600:	fa20 f005 	lsr.w	r0, r0, r5
   40604:	fa01 f204 	lsl.w	r2, r1, r4
   40608:	ea40 0002 	orr.w	r0, r0, r2
   4060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   40610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   40614:	f141 0100 	adc.w	r1, r1, #0
   40618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   4061c:	bf08      	it	eq
   4061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   40622:	bd70      	pop	{r4, r5, r6, pc}
   40624:	f1c4 0520 	rsb	r5, r4, #32
   40628:	fa00 f205 	lsl.w	r2, r0, r5
   4062c:	ea4e 0e02 	orr.w	lr, lr, r2
   40630:	fa20 f304 	lsr.w	r3, r0, r4
   40634:	fa01 f205 	lsl.w	r2, r1, r5
   40638:	ea43 0302 	orr.w	r3, r3, r2
   4063c:	fa21 f004 	lsr.w	r0, r1, r4
   40640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   40644:	fa21 f204 	lsr.w	r2, r1, r4
   40648:	ea20 0002 	bic.w	r0, r0, r2
   4064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   40650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   40654:	bf08      	it	eq
   40656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   4065a:	bd70      	pop	{r4, r5, r6, pc}
   4065c:	f094 0f00 	teq	r4, #0
   40660:	d10f      	bne.n	40682 <__aeabi_dmul+0x1c2>
   40662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   40666:	0040      	lsls	r0, r0, #1
   40668:	eb41 0101 	adc.w	r1, r1, r1
   4066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   40670:	bf08      	it	eq
   40672:	3c01      	subeq	r4, #1
   40674:	d0f7      	beq.n	40666 <__aeabi_dmul+0x1a6>
   40676:	ea41 0106 	orr.w	r1, r1, r6
   4067a:	f095 0f00 	teq	r5, #0
   4067e:	bf18      	it	ne
   40680:	4770      	bxne	lr
   40682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   40686:	0052      	lsls	r2, r2, #1
   40688:	eb43 0303 	adc.w	r3, r3, r3
   4068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   40690:	bf08      	it	eq
   40692:	3d01      	subeq	r5, #1
   40694:	d0f7      	beq.n	40686 <__aeabi_dmul+0x1c6>
   40696:	ea43 0306 	orr.w	r3, r3, r6
   4069a:	4770      	bx	lr
   4069c:	ea94 0f0c 	teq	r4, ip
   406a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   406a4:	bf18      	it	ne
   406a6:	ea95 0f0c 	teqne	r5, ip
   406aa:	d00c      	beq.n	406c6 <__aeabi_dmul+0x206>
   406ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   406b0:	bf18      	it	ne
   406b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   406b6:	d1d1      	bne.n	4065c <__aeabi_dmul+0x19c>
   406b8:	ea81 0103 	eor.w	r1, r1, r3
   406bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   406c0:	f04f 0000 	mov.w	r0, #0
   406c4:	bd70      	pop	{r4, r5, r6, pc}
   406c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   406ca:	bf06      	itte	eq
   406cc:	4610      	moveq	r0, r2
   406ce:	4619      	moveq	r1, r3
   406d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   406d4:	d019      	beq.n	4070a <__aeabi_dmul+0x24a>
   406d6:	ea94 0f0c 	teq	r4, ip
   406da:	d102      	bne.n	406e2 <__aeabi_dmul+0x222>
   406dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   406e0:	d113      	bne.n	4070a <__aeabi_dmul+0x24a>
   406e2:	ea95 0f0c 	teq	r5, ip
   406e6:	d105      	bne.n	406f4 <__aeabi_dmul+0x234>
   406e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   406ec:	bf1c      	itt	ne
   406ee:	4610      	movne	r0, r2
   406f0:	4619      	movne	r1, r3
   406f2:	d10a      	bne.n	4070a <__aeabi_dmul+0x24a>
   406f4:	ea81 0103 	eor.w	r1, r1, r3
   406f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   406fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   40700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   40704:	f04f 0000 	mov.w	r0, #0
   40708:	bd70      	pop	{r4, r5, r6, pc}
   4070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   4070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   40712:	bd70      	pop	{r4, r5, r6, pc}

00040714 <__aeabi_ddiv>:
   40714:	b570      	push	{r4, r5, r6, lr}
   40716:	f04f 0cff 	mov.w	ip, #255	; 0xff
   4071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   4071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   40722:	bf1d      	ittte	ne
   40724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   40728:	ea94 0f0c 	teqne	r4, ip
   4072c:	ea95 0f0c 	teqne	r5, ip
   40730:	f000 f8a7 	bleq	40882 <__aeabi_ddiv+0x16e>
   40734:	eba4 0405 	sub.w	r4, r4, r5
   40738:	ea81 0e03 	eor.w	lr, r1, r3
   4073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   40740:	ea4f 3101 	mov.w	r1, r1, lsl #12
   40744:	f000 8088 	beq.w	40858 <__aeabi_ddiv+0x144>
   40748:	ea4f 3303 	mov.w	r3, r3, lsl #12
   4074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   40750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   40754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   40758:	ea4f 2202 	mov.w	r2, r2, lsl #8
   4075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   40760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   40764:	ea4f 2600 	mov.w	r6, r0, lsl #8
   40768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   4076c:	429d      	cmp	r5, r3
   4076e:	bf08      	it	eq
   40770:	4296      	cmpeq	r6, r2
   40772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   40776:	f504 7440 	add.w	r4, r4, #768	; 0x300
   4077a:	d202      	bcs.n	40782 <__aeabi_ddiv+0x6e>
   4077c:	085b      	lsrs	r3, r3, #1
   4077e:	ea4f 0232 	mov.w	r2, r2, rrx
   40782:	1ab6      	subs	r6, r6, r2
   40784:	eb65 0503 	sbc.w	r5, r5, r3
   40788:	085b      	lsrs	r3, r3, #1
   4078a:	ea4f 0232 	mov.w	r2, r2, rrx
   4078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   40792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   40796:	ebb6 0e02 	subs.w	lr, r6, r2
   4079a:	eb75 0e03 	sbcs.w	lr, r5, r3
   4079e:	bf22      	ittt	cs
   407a0:	1ab6      	subcs	r6, r6, r2
   407a2:	4675      	movcs	r5, lr
   407a4:	ea40 000c 	orrcs.w	r0, r0, ip
   407a8:	085b      	lsrs	r3, r3, #1
   407aa:	ea4f 0232 	mov.w	r2, r2, rrx
   407ae:	ebb6 0e02 	subs.w	lr, r6, r2
   407b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   407b6:	bf22      	ittt	cs
   407b8:	1ab6      	subcs	r6, r6, r2
   407ba:	4675      	movcs	r5, lr
   407bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   407c0:	085b      	lsrs	r3, r3, #1
   407c2:	ea4f 0232 	mov.w	r2, r2, rrx
   407c6:	ebb6 0e02 	subs.w	lr, r6, r2
   407ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   407ce:	bf22      	ittt	cs
   407d0:	1ab6      	subcs	r6, r6, r2
   407d2:	4675      	movcs	r5, lr
   407d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   407d8:	085b      	lsrs	r3, r3, #1
   407da:	ea4f 0232 	mov.w	r2, r2, rrx
   407de:	ebb6 0e02 	subs.w	lr, r6, r2
   407e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   407e6:	bf22      	ittt	cs
   407e8:	1ab6      	subcs	r6, r6, r2
   407ea:	4675      	movcs	r5, lr
   407ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   407f0:	ea55 0e06 	orrs.w	lr, r5, r6
   407f4:	d018      	beq.n	40828 <__aeabi_ddiv+0x114>
   407f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   407fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   407fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   40802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   40806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   4080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   4080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   40812:	d1c0      	bne.n	40796 <__aeabi_ddiv+0x82>
   40814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   40818:	d10b      	bne.n	40832 <__aeabi_ddiv+0x11e>
   4081a:	ea41 0100 	orr.w	r1, r1, r0
   4081e:	f04f 0000 	mov.w	r0, #0
   40822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   40826:	e7b6      	b.n	40796 <__aeabi_ddiv+0x82>
   40828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   4082c:	bf04      	itt	eq
   4082e:	4301      	orreq	r1, r0
   40830:	2000      	moveq	r0, #0
   40832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   40836:	bf88      	it	hi
   40838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   4083c:	f63f aeaf 	bhi.w	4059e <__aeabi_dmul+0xde>
   40840:	ebb5 0c03 	subs.w	ip, r5, r3
   40844:	bf04      	itt	eq
   40846:	ebb6 0c02 	subseq.w	ip, r6, r2
   4084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   4084e:	f150 0000 	adcs.w	r0, r0, #0
   40852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   40856:	bd70      	pop	{r4, r5, r6, pc}
   40858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   4085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   40860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   40864:	bfc2      	ittt	gt
   40866:	ebd4 050c 	rsbsgt	r5, r4, ip
   4086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   4086e:	bd70      	popgt	{r4, r5, r6, pc}
   40870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   40874:	f04f 0e00 	mov.w	lr, #0
   40878:	3c01      	subs	r4, #1
   4087a:	e690      	b.n	4059e <__aeabi_dmul+0xde>
   4087c:	ea45 0e06 	orr.w	lr, r5, r6
   40880:	e68d      	b.n	4059e <__aeabi_dmul+0xde>
   40882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   40886:	ea94 0f0c 	teq	r4, ip
   4088a:	bf08      	it	eq
   4088c:	ea95 0f0c 	teqeq	r5, ip
   40890:	f43f af3b 	beq.w	4070a <__aeabi_dmul+0x24a>
   40894:	ea94 0f0c 	teq	r4, ip
   40898:	d10a      	bne.n	408b0 <__aeabi_ddiv+0x19c>
   4089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   4089e:	f47f af34 	bne.w	4070a <__aeabi_dmul+0x24a>
   408a2:	ea95 0f0c 	teq	r5, ip
   408a6:	f47f af25 	bne.w	406f4 <__aeabi_dmul+0x234>
   408aa:	4610      	mov	r0, r2
   408ac:	4619      	mov	r1, r3
   408ae:	e72c      	b.n	4070a <__aeabi_dmul+0x24a>
   408b0:	ea95 0f0c 	teq	r5, ip
   408b4:	d106      	bne.n	408c4 <__aeabi_ddiv+0x1b0>
   408b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   408ba:	f43f aefd 	beq.w	406b8 <__aeabi_dmul+0x1f8>
   408be:	4610      	mov	r0, r2
   408c0:	4619      	mov	r1, r3
   408c2:	e722      	b.n	4070a <__aeabi_dmul+0x24a>
   408c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   408c8:	bf18      	it	ne
   408ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   408ce:	f47f aec5 	bne.w	4065c <__aeabi_dmul+0x19c>
   408d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   408d6:	f47f af0d 	bne.w	406f4 <__aeabi_dmul+0x234>
   408da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   408de:	f47f aeeb 	bne.w	406b8 <__aeabi_dmul+0x1f8>
   408e2:	e712      	b.n	4070a <__aeabi_dmul+0x24a>

000408e4 <__gedf2>:
   408e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   408e8:	e006      	b.n	408f8 <__cmpdf2+0x4>
   408ea:	bf00      	nop

000408ec <__ledf2>:
   408ec:	f04f 0c01 	mov.w	ip, #1
   408f0:	e002      	b.n	408f8 <__cmpdf2+0x4>
   408f2:	bf00      	nop

000408f4 <__cmpdf2>:
   408f4:	f04f 0c01 	mov.w	ip, #1
   408f8:	f84d cd04 	str.w	ip, [sp, #-4]!
   408fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   40900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   40904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   40908:	bf18      	it	ne
   4090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   4090e:	d01b      	beq.n	40948 <__cmpdf2+0x54>
   40910:	b001      	add	sp, #4
   40912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   40916:	bf0c      	ite	eq
   40918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   4091c:	ea91 0f03 	teqne	r1, r3
   40920:	bf02      	ittt	eq
   40922:	ea90 0f02 	teqeq	r0, r2
   40926:	2000      	moveq	r0, #0
   40928:	4770      	bxeq	lr
   4092a:	f110 0f00 	cmn.w	r0, #0
   4092e:	ea91 0f03 	teq	r1, r3
   40932:	bf58      	it	pl
   40934:	4299      	cmppl	r1, r3
   40936:	bf08      	it	eq
   40938:	4290      	cmpeq	r0, r2
   4093a:	bf2c      	ite	cs
   4093c:	17d8      	asrcs	r0, r3, #31
   4093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   40942:	f040 0001 	orr.w	r0, r0, #1
   40946:	4770      	bx	lr
   40948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   4094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   40950:	d102      	bne.n	40958 <__cmpdf2+0x64>
   40952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   40956:	d107      	bne.n	40968 <__cmpdf2+0x74>
   40958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   4095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   40960:	d1d6      	bne.n	40910 <__cmpdf2+0x1c>
   40962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   40966:	d0d3      	beq.n	40910 <__cmpdf2+0x1c>
   40968:	f85d 0b04 	ldr.w	r0, [sp], #4
   4096c:	4770      	bx	lr
   4096e:	bf00      	nop

00040970 <__aeabi_cdrcmple>:
   40970:	4684      	mov	ip, r0
   40972:	4610      	mov	r0, r2
   40974:	4662      	mov	r2, ip
   40976:	468c      	mov	ip, r1
   40978:	4619      	mov	r1, r3
   4097a:	4663      	mov	r3, ip
   4097c:	e000      	b.n	40980 <__aeabi_cdcmpeq>
   4097e:	bf00      	nop

00040980 <__aeabi_cdcmpeq>:
   40980:	b501      	push	{r0, lr}
   40982:	f7ff ffb7 	bl	408f4 <__cmpdf2>
   40986:	2800      	cmp	r0, #0
   40988:	bf48      	it	mi
   4098a:	f110 0f00 	cmnmi.w	r0, #0
   4098e:	bd01      	pop	{r0, pc}

00040990 <__aeabi_dcmpeq>:
   40990:	f84d ed08 	str.w	lr, [sp, #-8]!
   40994:	f7ff fff4 	bl	40980 <__aeabi_cdcmpeq>
   40998:	bf0c      	ite	eq
   4099a:	2001      	moveq	r0, #1
   4099c:	2000      	movne	r0, #0
   4099e:	f85d fb08 	ldr.w	pc, [sp], #8
   409a2:	bf00      	nop

000409a4 <__aeabi_dcmplt>:
   409a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   409a8:	f7ff ffea 	bl	40980 <__aeabi_cdcmpeq>
   409ac:	bf34      	ite	cc
   409ae:	2001      	movcc	r0, #1
   409b0:	2000      	movcs	r0, #0
   409b2:	f85d fb08 	ldr.w	pc, [sp], #8
   409b6:	bf00      	nop

000409b8 <__aeabi_dcmple>:
   409b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   409bc:	f7ff ffe0 	bl	40980 <__aeabi_cdcmpeq>
   409c0:	bf94      	ite	ls
   409c2:	2001      	movls	r0, #1
   409c4:	2000      	movhi	r0, #0
   409c6:	f85d fb08 	ldr.w	pc, [sp], #8
   409ca:	bf00      	nop

000409cc <__aeabi_dcmpge>:
   409cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   409d0:	f7ff ffce 	bl	40970 <__aeabi_cdrcmple>
   409d4:	bf94      	ite	ls
   409d6:	2001      	movls	r0, #1
   409d8:	2000      	movhi	r0, #0
   409da:	f85d fb08 	ldr.w	pc, [sp], #8
   409de:	bf00      	nop

000409e0 <__aeabi_dcmpgt>:
   409e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   409e4:	f7ff ffc4 	bl	40970 <__aeabi_cdrcmple>
   409e8:	bf34      	ite	cc
   409ea:	2001      	movcc	r0, #1
   409ec:	2000      	movcs	r0, #0
   409ee:	f85d fb08 	ldr.w	pc, [sp], #8
   409f2:	bf00      	nop

000409f4 <__aeabi_dcmpun>:
   409f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   409f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   409fc:	d102      	bne.n	40a04 <__aeabi_dcmpun+0x10>
   409fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   40a02:	d10a      	bne.n	40a1a <__aeabi_dcmpun+0x26>
   40a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   40a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   40a0c:	d102      	bne.n	40a14 <__aeabi_dcmpun+0x20>
   40a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   40a12:	d102      	bne.n	40a1a <__aeabi_dcmpun+0x26>
   40a14:	f04f 0000 	mov.w	r0, #0
   40a18:	4770      	bx	lr
   40a1a:	f04f 0001 	mov.w	r0, #1
   40a1e:	4770      	bx	lr

00040a20 <__aeabi_d2iz>:
   40a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
   40a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   40a28:	d215      	bcs.n	40a56 <__aeabi_d2iz+0x36>
   40a2a:	d511      	bpl.n	40a50 <__aeabi_d2iz+0x30>
   40a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   40a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   40a34:	d912      	bls.n	40a5c <__aeabi_d2iz+0x3c>
   40a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   40a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   40a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   40a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   40a46:	fa23 f002 	lsr.w	r0, r3, r2
   40a4a:	bf18      	it	ne
   40a4c:	4240      	negne	r0, r0
   40a4e:	4770      	bx	lr
   40a50:	f04f 0000 	mov.w	r0, #0
   40a54:	4770      	bx	lr
   40a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   40a5a:	d105      	bne.n	40a68 <__aeabi_d2iz+0x48>
   40a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   40a60:	bf08      	it	eq
   40a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   40a66:	4770      	bx	lr
   40a68:	f04f 0000 	mov.w	r0, #0
   40a6c:	4770      	bx	lr
   40a6e:	bf00      	nop

00040a70 <__aeabi_d2f>:
   40a70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   40a74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   40a78:	bf24      	itt	cs
   40a7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   40a7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   40a82:	d90d      	bls.n	40aa0 <__aeabi_d2f+0x30>
   40a84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   40a88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   40a8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   40a90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   40a94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   40a98:	bf08      	it	eq
   40a9a:	f020 0001 	biceq.w	r0, r0, #1
   40a9e:	4770      	bx	lr
   40aa0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   40aa4:	d121      	bne.n	40aea <__aeabi_d2f+0x7a>
   40aa6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   40aaa:	bfbc      	itt	lt
   40aac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   40ab0:	4770      	bxlt	lr
   40ab2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   40ab6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   40aba:	f1c2 0218 	rsb	r2, r2, #24
   40abe:	f1c2 0c20 	rsb	ip, r2, #32
   40ac2:	fa10 f30c 	lsls.w	r3, r0, ip
   40ac6:	fa20 f002 	lsr.w	r0, r0, r2
   40aca:	bf18      	it	ne
   40acc:	f040 0001 	orrne.w	r0, r0, #1
   40ad0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   40ad4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   40ad8:	fa03 fc0c 	lsl.w	ip, r3, ip
   40adc:	ea40 000c 	orr.w	r0, r0, ip
   40ae0:	fa23 f302 	lsr.w	r3, r3, r2
   40ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   40ae8:	e7cc      	b.n	40a84 <__aeabi_d2f+0x14>
   40aea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   40aee:	d107      	bne.n	40b00 <__aeabi_d2f+0x90>
   40af0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   40af4:	bf1e      	ittt	ne
   40af6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   40afa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   40afe:	4770      	bxne	lr
   40b00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   40b04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   40b08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   40b0c:	4770      	bx	lr
   40b0e:	bf00      	nop

00040b10 <__aeabi_uldivmod>:
   40b10:	b953      	cbnz	r3, 40b28 <__aeabi_uldivmod+0x18>
   40b12:	b94a      	cbnz	r2, 40b28 <__aeabi_uldivmod+0x18>
   40b14:	2900      	cmp	r1, #0
   40b16:	bf08      	it	eq
   40b18:	2800      	cmpeq	r0, #0
   40b1a:	bf1c      	itt	ne
   40b1c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   40b20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   40b24:	f000 b80c 	b.w	40b40 <__aeabi_idiv0>
   40b28:	f1ad 0c08 	sub.w	ip, sp, #8
   40b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   40b30:	f000 f808 	bl	40b44 <__udivmoddi4>
   40b34:	f8dd e004 	ldr.w	lr, [sp, #4]
   40b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   40b3c:	b004      	add	sp, #16
   40b3e:	4770      	bx	lr

00040b40 <__aeabi_idiv0>:
   40b40:	4770      	bx	lr
   40b42:	bf00      	nop

00040b44 <__udivmoddi4>:
   40b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40b48:	4686      	mov	lr, r0
   40b4a:	468c      	mov	ip, r1
   40b4c:	4608      	mov	r0, r1
   40b4e:	9e08      	ldr	r6, [sp, #32]
   40b50:	4615      	mov	r5, r2
   40b52:	4674      	mov	r4, lr
   40b54:	4619      	mov	r1, r3
   40b56:	2b00      	cmp	r3, #0
   40b58:	f040 80c1 	bne.w	40cde <__udivmoddi4+0x19a>
   40b5c:	4285      	cmp	r5, r0
   40b5e:	fab2 f282 	clz	r2, r2
   40b62:	d945      	bls.n	40bf0 <__udivmoddi4+0xac>
   40b64:	b14a      	cbz	r2, 40b7a <__udivmoddi4+0x36>
   40b66:	f1c2 0320 	rsb	r3, r2, #32
   40b6a:	fa00 fc02 	lsl.w	ip, r0, r2
   40b6e:	4095      	lsls	r5, r2
   40b70:	4094      	lsls	r4, r2
   40b72:	fa2e f303 	lsr.w	r3, lr, r3
   40b76:	ea43 0c0c 	orr.w	ip, r3, ip
   40b7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   40b7e:	b2a8      	uxth	r0, r5
   40b80:	0c23      	lsrs	r3, r4, #16
   40b82:	fbbc f8fe 	udiv	r8, ip, lr
   40b86:	fb0e cc18 	mls	ip, lr, r8, ip
   40b8a:	fb08 f900 	mul.w	r9, r8, r0
   40b8e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   40b92:	4599      	cmp	r9, r3
   40b94:	d928      	bls.n	40be8 <__udivmoddi4+0xa4>
   40b96:	18eb      	adds	r3, r5, r3
   40b98:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   40b9c:	d204      	bcs.n	40ba8 <__udivmoddi4+0x64>
   40b9e:	4599      	cmp	r9, r3
   40ba0:	d902      	bls.n	40ba8 <__udivmoddi4+0x64>
   40ba2:	f1a8 0702 	sub.w	r7, r8, #2
   40ba6:	442b      	add	r3, r5
   40ba8:	eba3 0309 	sub.w	r3, r3, r9
   40bac:	b2a4      	uxth	r4, r4
   40bae:	fbb3 fcfe 	udiv	ip, r3, lr
   40bb2:	fb0e 331c 	mls	r3, lr, ip, r3
   40bb6:	fb0c f000 	mul.w	r0, ip, r0
   40bba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   40bbe:	42a0      	cmp	r0, r4
   40bc0:	d914      	bls.n	40bec <__udivmoddi4+0xa8>
   40bc2:	192c      	adds	r4, r5, r4
   40bc4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   40bc8:	d204      	bcs.n	40bd4 <__udivmoddi4+0x90>
   40bca:	42a0      	cmp	r0, r4
   40bcc:	d902      	bls.n	40bd4 <__udivmoddi4+0x90>
   40bce:	f1ac 0302 	sub.w	r3, ip, #2
   40bd2:	442c      	add	r4, r5
   40bd4:	1a24      	subs	r4, r4, r0
   40bd6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   40bda:	b11e      	cbz	r6, 40be4 <__udivmoddi4+0xa0>
   40bdc:	40d4      	lsrs	r4, r2
   40bde:	2300      	movs	r3, #0
   40be0:	6034      	str	r4, [r6, #0]
   40be2:	6073      	str	r3, [r6, #4]
   40be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40be8:	4647      	mov	r7, r8
   40bea:	e7dd      	b.n	40ba8 <__udivmoddi4+0x64>
   40bec:	4663      	mov	r3, ip
   40bee:	e7f1      	b.n	40bd4 <__udivmoddi4+0x90>
   40bf0:	bb92      	cbnz	r2, 40c58 <__udivmoddi4+0x114>
   40bf2:	1b43      	subs	r3, r0, r5
   40bf4:	2101      	movs	r1, #1
   40bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   40bfa:	b2af      	uxth	r7, r5
   40bfc:	0c20      	lsrs	r0, r4, #16
   40bfe:	fbb3 fcfe 	udiv	ip, r3, lr
   40c02:	fb0e 331c 	mls	r3, lr, ip, r3
   40c06:	fb0c f807 	mul.w	r8, ip, r7
   40c0a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   40c0e:	4598      	cmp	r8, r3
   40c10:	d961      	bls.n	40cd6 <__udivmoddi4+0x192>
   40c12:	18eb      	adds	r3, r5, r3
   40c14:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   40c18:	d204      	bcs.n	40c24 <__udivmoddi4+0xe0>
   40c1a:	4598      	cmp	r8, r3
   40c1c:	d902      	bls.n	40c24 <__udivmoddi4+0xe0>
   40c1e:	f1ac 0002 	sub.w	r0, ip, #2
   40c22:	442b      	add	r3, r5
   40c24:	eba3 0308 	sub.w	r3, r3, r8
   40c28:	b2a4      	uxth	r4, r4
   40c2a:	fbb3 fcfe 	udiv	ip, r3, lr
   40c2e:	fb0e 331c 	mls	r3, lr, ip, r3
   40c32:	fb0c f707 	mul.w	r7, ip, r7
   40c36:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   40c3a:	42a7      	cmp	r7, r4
   40c3c:	d94d      	bls.n	40cda <__udivmoddi4+0x196>
   40c3e:	192c      	adds	r4, r5, r4
   40c40:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   40c44:	d204      	bcs.n	40c50 <__udivmoddi4+0x10c>
   40c46:	42a7      	cmp	r7, r4
   40c48:	d902      	bls.n	40c50 <__udivmoddi4+0x10c>
   40c4a:	f1ac 0302 	sub.w	r3, ip, #2
   40c4e:	442c      	add	r4, r5
   40c50:	1be4      	subs	r4, r4, r7
   40c52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   40c56:	e7c0      	b.n	40bda <__udivmoddi4+0x96>
   40c58:	f1c2 0320 	rsb	r3, r2, #32
   40c5c:	4095      	lsls	r5, r2
   40c5e:	4094      	lsls	r4, r2
   40c60:	fa20 f103 	lsr.w	r1, r0, r3
   40c64:	fa2e f303 	lsr.w	r3, lr, r3
   40c68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   40c6c:	4090      	lsls	r0, r2
   40c6e:	b2af      	uxth	r7, r5
   40c70:	4303      	orrs	r3, r0
   40c72:	fbb1 fcfe 	udiv	ip, r1, lr
   40c76:	fb0e 101c 	mls	r0, lr, ip, r1
   40c7a:	0c19      	lsrs	r1, r3, #16
   40c7c:	fb0c f807 	mul.w	r8, ip, r7
   40c80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   40c84:	4588      	cmp	r8, r1
   40c86:	d922      	bls.n	40cce <__udivmoddi4+0x18a>
   40c88:	1869      	adds	r1, r5, r1
   40c8a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   40c8e:	d204      	bcs.n	40c9a <__udivmoddi4+0x156>
   40c90:	4588      	cmp	r8, r1
   40c92:	d902      	bls.n	40c9a <__udivmoddi4+0x156>
   40c94:	f1ac 0002 	sub.w	r0, ip, #2
   40c98:	4429      	add	r1, r5
   40c9a:	eba1 0108 	sub.w	r1, r1, r8
   40c9e:	b29b      	uxth	r3, r3
   40ca0:	fbb1 fcfe 	udiv	ip, r1, lr
   40ca4:	fb0e 111c 	mls	r1, lr, ip, r1
   40ca8:	fb0c f707 	mul.w	r7, ip, r7
   40cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   40cb0:	429f      	cmp	r7, r3
   40cb2:	d90e      	bls.n	40cd2 <__udivmoddi4+0x18e>
   40cb4:	18eb      	adds	r3, r5, r3
   40cb6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   40cba:	d204      	bcs.n	40cc6 <__udivmoddi4+0x182>
   40cbc:	429f      	cmp	r7, r3
   40cbe:	d902      	bls.n	40cc6 <__udivmoddi4+0x182>
   40cc0:	f1ac 0102 	sub.w	r1, ip, #2
   40cc4:	442b      	add	r3, r5
   40cc6:	1bdb      	subs	r3, r3, r7
   40cc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   40ccc:	e793      	b.n	40bf6 <__udivmoddi4+0xb2>
   40cce:	4660      	mov	r0, ip
   40cd0:	e7e3      	b.n	40c9a <__udivmoddi4+0x156>
   40cd2:	4661      	mov	r1, ip
   40cd4:	e7f7      	b.n	40cc6 <__udivmoddi4+0x182>
   40cd6:	4660      	mov	r0, ip
   40cd8:	e7a4      	b.n	40c24 <__udivmoddi4+0xe0>
   40cda:	4663      	mov	r3, ip
   40cdc:	e7b8      	b.n	40c50 <__udivmoddi4+0x10c>
   40cde:	4283      	cmp	r3, r0
   40ce0:	d906      	bls.n	40cf0 <__udivmoddi4+0x1ac>
   40ce2:	b916      	cbnz	r6, 40cea <__udivmoddi4+0x1a6>
   40ce4:	2100      	movs	r1, #0
   40ce6:	4608      	mov	r0, r1
   40ce8:	e77c      	b.n	40be4 <__udivmoddi4+0xa0>
   40cea:	e9c6 e000 	strd	lr, r0, [r6]
   40cee:	e7f9      	b.n	40ce4 <__udivmoddi4+0x1a0>
   40cf0:	fab3 f783 	clz	r7, r3
   40cf4:	b98f      	cbnz	r7, 40d1a <__udivmoddi4+0x1d6>
   40cf6:	4283      	cmp	r3, r0
   40cf8:	d301      	bcc.n	40cfe <__udivmoddi4+0x1ba>
   40cfa:	4572      	cmp	r2, lr
   40cfc:	d808      	bhi.n	40d10 <__udivmoddi4+0x1cc>
   40cfe:	ebbe 0402 	subs.w	r4, lr, r2
   40d02:	eb60 0303 	sbc.w	r3, r0, r3
   40d06:	2001      	movs	r0, #1
   40d08:	469c      	mov	ip, r3
   40d0a:	b91e      	cbnz	r6, 40d14 <__udivmoddi4+0x1d0>
   40d0c:	2100      	movs	r1, #0
   40d0e:	e769      	b.n	40be4 <__udivmoddi4+0xa0>
   40d10:	4638      	mov	r0, r7
   40d12:	e7fa      	b.n	40d0a <__udivmoddi4+0x1c6>
   40d14:	e9c6 4c00 	strd	r4, ip, [r6]
   40d18:	e7f8      	b.n	40d0c <__udivmoddi4+0x1c8>
   40d1a:	f1c7 0c20 	rsb	ip, r7, #32
   40d1e:	40bb      	lsls	r3, r7
   40d20:	fa0e f507 	lsl.w	r5, lr, r7
   40d24:	fa22 f40c 	lsr.w	r4, r2, ip
   40d28:	fa2e f10c 	lsr.w	r1, lr, ip
   40d2c:	40ba      	lsls	r2, r7
   40d2e:	431c      	orrs	r4, r3
   40d30:	fa20 f30c 	lsr.w	r3, r0, ip
   40d34:	40b8      	lsls	r0, r7
   40d36:	ea4f 4914 	mov.w	r9, r4, lsr #16
   40d3a:	4301      	orrs	r1, r0
   40d3c:	fa1f fe84 	uxth.w	lr, r4
   40d40:	fbb3 f8f9 	udiv	r8, r3, r9
   40d44:	fb09 3018 	mls	r0, r9, r8, r3
   40d48:	0c0b      	lsrs	r3, r1, #16
   40d4a:	fb08 fa0e 	mul.w	sl, r8, lr
   40d4e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   40d52:	459a      	cmp	sl, r3
   40d54:	d940      	bls.n	40dd8 <__udivmoddi4+0x294>
   40d56:	18e3      	adds	r3, r4, r3
   40d58:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   40d5c:	d204      	bcs.n	40d68 <__udivmoddi4+0x224>
   40d5e:	459a      	cmp	sl, r3
   40d60:	d902      	bls.n	40d68 <__udivmoddi4+0x224>
   40d62:	f1a8 0002 	sub.w	r0, r8, #2
   40d66:	4423      	add	r3, r4
   40d68:	eba3 030a 	sub.w	r3, r3, sl
   40d6c:	b289      	uxth	r1, r1
   40d6e:	fbb3 f8f9 	udiv	r8, r3, r9
   40d72:	fb09 3318 	mls	r3, r9, r8, r3
   40d76:	fb08 fe0e 	mul.w	lr, r8, lr
   40d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   40d7e:	458e      	cmp	lr, r1
   40d80:	d92c      	bls.n	40ddc <__udivmoddi4+0x298>
   40d82:	1861      	adds	r1, r4, r1
   40d84:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   40d88:	d204      	bcs.n	40d94 <__udivmoddi4+0x250>
   40d8a:	458e      	cmp	lr, r1
   40d8c:	d902      	bls.n	40d94 <__udivmoddi4+0x250>
   40d8e:	f1a8 0302 	sub.w	r3, r8, #2
   40d92:	4421      	add	r1, r4
   40d94:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   40d98:	eba1 010e 	sub.w	r1, r1, lr
   40d9c:	fba0 9802 	umull	r9, r8, r0, r2
   40da0:	4541      	cmp	r1, r8
   40da2:	46ce      	mov	lr, r9
   40da4:	4643      	mov	r3, r8
   40da6:	d302      	bcc.n	40dae <__udivmoddi4+0x26a>
   40da8:	d106      	bne.n	40db8 <__udivmoddi4+0x274>
   40daa:	454d      	cmp	r5, r9
   40dac:	d204      	bcs.n	40db8 <__udivmoddi4+0x274>
   40dae:	3801      	subs	r0, #1
   40db0:	ebb9 0e02 	subs.w	lr, r9, r2
   40db4:	eb68 0304 	sbc.w	r3, r8, r4
   40db8:	2e00      	cmp	r6, #0
   40dba:	d0a7      	beq.n	40d0c <__udivmoddi4+0x1c8>
   40dbc:	ebb5 020e 	subs.w	r2, r5, lr
   40dc0:	eb61 0103 	sbc.w	r1, r1, r3
   40dc4:	fa01 fc0c 	lsl.w	ip, r1, ip
   40dc8:	fa22 f307 	lsr.w	r3, r2, r7
   40dcc:	40f9      	lsrs	r1, r7
   40dce:	ea4c 0303 	orr.w	r3, ip, r3
   40dd2:	e9c6 3100 	strd	r3, r1, [r6]
   40dd6:	e799      	b.n	40d0c <__udivmoddi4+0x1c8>
   40dd8:	4640      	mov	r0, r8
   40dda:	e7c5      	b.n	40d68 <__udivmoddi4+0x224>
   40ddc:	4643      	mov	r3, r8
   40dde:	e7d9      	b.n	40d94 <__udivmoddi4+0x250>

00040de0 <strcmp>:
   40de0:	f810 2b01 	ldrb.w	r2, [r0], #1
   40de4:	f811 3b01 	ldrb.w	r3, [r1], #1
   40de8:	2a01      	cmp	r2, #1
   40dea:	bf28      	it	cs
   40dec:	429a      	cmpcs	r2, r3
   40dee:	d0f7      	beq.n	40de0 <strcmp>
   40df0:	1ad0      	subs	r0, r2, r3
   40df2:	4770      	bx	lr

00040df4 <strlen>:
   40df4:	4603      	mov	r3, r0
   40df6:	f813 2b01 	ldrb.w	r2, [r3], #1
   40dfa:	2a00      	cmp	r2, #0
   40dfc:	d1fb      	bne.n	40df6 <strlen+0x2>
   40dfe:	1a18      	subs	r0, r3, r0
   40e00:	3801      	subs	r0, #1
   40e02:	4770      	bx	lr
   40e04:	0000      	movs	r0, r0
	...

00040e08 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   40e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40e0c:	4682      	mov	sl, r0
   40e0e:	4616      	mov	r6, r2
   40e10:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   40e12:	2500      	movs	r5, #0
{
   40e14:	b09f      	sub	sp, #124	; 0x7c
   40e16:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   40e18:	7830      	ldrb	r0, [r6, #0]
   40e1a:	b910      	cbnz	r0, 40e22 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   40e1c:	4628      	mov	r0, r5
   40e1e:	f000 bd85 	b.w	4192c <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
   40e22:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
   40e24:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   40e26:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
   40e28:	d006      	beq.n	40e38 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   40e2a:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
   40e2c:	47d0      	blx	sl
   40e2e:	2800      	cmp	r0, #0
   40e30:	f2c0 857c 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   40e34:	3501      	adds	r5, #1
		if (bps == NULL) {
   40e36:	e21b      	b.n	41270 <z_cbvprintf_impl+0x468>
		} state = {
   40e38:	2218      	movs	r2, #24
   40e3a:	2100      	movs	r1, #0
   40e3c:	a810      	add	r0, sp, #64	; 0x40
   40e3e:	f01a f846 	bl	5aece <memset>
	if (*sp == '%') {
   40e42:	7873      	ldrb	r3, [r6, #1]
   40e44:	2b25      	cmp	r3, #37	; 0x25
   40e46:	f000 80ba 	beq.w	40fbe <z_cbvprintf_impl+0x1b6>
   40e4a:	2300      	movs	r3, #0
   40e4c:	4698      	mov	r8, r3
   40e4e:	469e      	mov	lr, r3
   40e50:	469c      	mov	ip, r3
   40e52:	4618      	mov	r0, r3
   40e54:	1c71      	adds	r1, r6, #1
   40e56:	460f      	mov	r7, r1
		switch (*sp) {
   40e58:	f811 2b01 	ldrb.w	r2, [r1], #1
   40e5c:	2a2b      	cmp	r2, #43	; 0x2b
   40e5e:	f000 80dd 	beq.w	4101c <z_cbvprintf_impl+0x214>
   40e62:	f200 80d4 	bhi.w	4100e <z_cbvprintf_impl+0x206>
   40e66:	2a20      	cmp	r2, #32
   40e68:	f000 80db 	beq.w	41022 <z_cbvprintf_impl+0x21a>
   40e6c:	2a23      	cmp	r2, #35	; 0x23
   40e6e:	f000 80db 	beq.w	41028 <z_cbvprintf_impl+0x220>
   40e72:	b12b      	cbz	r3, 40e80 <z_cbvprintf_impl+0x78>
   40e74:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   40e7c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   40e80:	f1b8 0f00 	cmp.w	r8, #0
   40e84:	d005      	beq.n	40e92 <z_cbvprintf_impl+0x8a>
   40e86:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40e8a:	f043 0320 	orr.w	r3, r3, #32
   40e8e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   40e92:	f1be 0f00 	cmp.w	lr, #0
   40e96:	d005      	beq.n	40ea4 <z_cbvprintf_impl+0x9c>
   40e98:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40e9c:	f043 0310 	orr.w	r3, r3, #16
   40ea0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   40ea4:	f1bc 0f00 	cmp.w	ip, #0
   40ea8:	d005      	beq.n	40eb6 <z_cbvprintf_impl+0xae>
   40eaa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40eae:	f043 0308 	orr.w	r3, r3, #8
   40eb2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   40eb6:	b128      	cbz	r0, 40ec4 <z_cbvprintf_impl+0xbc>
   40eb8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40ebc:	f043 0304 	orr.w	r3, r3, #4
   40ec0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   40ec4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40ec8:	f003 0144 	and.w	r1, r3, #68	; 0x44
   40ecc:	2944      	cmp	r1, #68	; 0x44
   40ece:	d103      	bne.n	40ed8 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
   40ed0:	f36f 1386 	bfc	r3, #6, #1
   40ed4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   40ed8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   40edc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   40ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   40ee2:	970e      	str	r7, [sp, #56]	; 0x38
   40ee4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   40ee8:	f040 80a3 	bne.w	41032 <z_cbvprintf_impl+0x22a>
		conv->width_star = true;
   40eec:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   40ef0:	f043 0301 	orr.w	r3, r3, #1
   40ef4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
   40ef8:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
   40efa:	781a      	ldrb	r2, [r3, #0]
   40efc:	2a2e      	cmp	r2, #46	; 0x2e
   40efe:	bf0c      	ite	eq
   40f00:	2101      	moveq	r1, #1
   40f02:	2100      	movne	r1, #0
   40f04:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   40f08:	f361 0241 	bfi	r2, r1, #1, #1
   40f0c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   40f10:	d10c      	bne.n	40f2c <z_cbvprintf_impl+0x124>
	++sp;
   40f12:	1c5a      	adds	r2, r3, #1
   40f14:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
   40f16:	785a      	ldrb	r2, [r3, #1]
   40f18:	2a2a      	cmp	r2, #42	; 0x2a
   40f1a:	f040 809a 	bne.w	41052 <z_cbvprintf_impl+0x24a>
		conv->prec_star = true;
   40f1e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   40f22:	3302      	adds	r3, #2
		conv->prec_star = true;
   40f24:	f042 0204 	orr.w	r2, r2, #4
   40f28:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
   40f2c:	781a      	ldrb	r2, [r3, #0]
   40f2e:	2a6c      	cmp	r2, #108	; 0x6c
   40f30:	f000 80bb 	beq.w	410aa <z_cbvprintf_impl+0x2a2>
   40f34:	f200 809d 	bhi.w	41072 <z_cbvprintf_impl+0x26a>
   40f38:	2a68      	cmp	r2, #104	; 0x68
   40f3a:	f000 80a3 	beq.w	41084 <z_cbvprintf_impl+0x27c>
   40f3e:	2a6a      	cmp	r2, #106	; 0x6a
   40f40:	f000 80bc 	beq.w	410bc <z_cbvprintf_impl+0x2b4>
   40f44:	2a4c      	cmp	r2, #76	; 0x4c
   40f46:	f000 80c1 	beq.w	410cc <z_cbvprintf_impl+0x2c4>
	conv->specifier = *sp++;
   40f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   40f4e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   40f50:	9306      	str	r3, [sp, #24]
   40f52:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
   40f56:	f200 8101 	bhi.w	4115c <z_cbvprintf_impl+0x354>
   40f5a:	2a6d      	cmp	r2, #109	; 0x6d
   40f5c:	f200 80c3 	bhi.w	410e6 <z_cbvprintf_impl+0x2de>
   40f60:	2a69      	cmp	r2, #105	; 0x69
   40f62:	f200 80fb 	bhi.w	4115c <z_cbvprintf_impl+0x354>
   40f66:	2a57      	cmp	r2, #87	; 0x57
   40f68:	f200 80da 	bhi.w	41120 <z_cbvprintf_impl+0x318>
   40f6c:	2a41      	cmp	r2, #65	; 0x41
   40f6e:	d004      	beq.n	40f7a <z_cbvprintf_impl+0x172>
   40f70:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   40f74:	2b02      	cmp	r3, #2
   40f76:	f200 80f1 	bhi.w	4115c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_FP;
   40f7a:	2104      	movs	r1, #4
   40f7c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   40f80:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   40f84:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   40f88:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   40f8c:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   40f8e:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
			|| (conv->specifier == 'A');
   40f92:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   40f94:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   40f98:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
   40f9a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		conv->specifier_a = (conv->specifier == 'a')
   40f9e:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
   40fa2:	b2cb      	uxtb	r3, r1
   40fa4:	f100 8119 	bmi.w	411da <z_cbvprintf_impl+0x3d2>
		if (conv->length_mod == LENGTH_L) {
   40fa8:	f003 0278 	and.w	r2, r3, #120	; 0x78
   40fac:	2a18      	cmp	r2, #24
   40fae:	f040 8103 	bne.w	411b8 <z_cbvprintf_impl+0x3b0>
			conv->length_mod = LENGTH_NONE;
   40fb2:	f36f 03c6 	bfc	r3, #3, #4
   40fb6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
   40fba:	2300      	movs	r3, #0
   40fbc:	e0f2      	b.n	411a4 <z_cbvprintf_impl+0x39c>
		conv->specifier = *sp++;
   40fbe:	1cb2      	adds	r2, r6, #2
   40fc0:	9206      	str	r2, [sp, #24]
   40fc2:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   40fc6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   40fca:	07d9      	lsls	r1, r3, #31
   40fcc:	f140 8107 	bpl.w	411de <z_cbvprintf_impl+0x3d6>
			width = va_arg(ap, int);
   40fd0:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
   40fd4:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
   40fd6:	9204      	str	r2, [sp, #16]
			if (width < 0) {
   40fd8:	da08      	bge.n	40fec <z_cbvprintf_impl+0x1e4>
				conv->flag_dash = true;
   40fda:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   40fde:	f042 0204 	orr.w	r2, r2, #4
   40fe2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
   40fe6:	9a04      	ldr	r2, [sp, #16]
   40fe8:	4252      	negs	r2, r2
		int width = -1;
   40fea:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
   40fec:	075a      	lsls	r2, r3, #29
   40fee:	f140 80fe 	bpl.w	411ee <z_cbvprintf_impl+0x3e6>
			int arg = va_arg(ap, int);
   40ff2:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   40ff6:	2f00      	cmp	r7, #0
   40ff8:	f280 80fd 	bge.w	411f6 <z_cbvprintf_impl+0x3ee>
				conv->prec_present = false;
   40ffc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   41000:	f36f 0341 	bfc	r3, #1, #1
   41004:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   41008:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   4100c:	e0f3      	b.n	411f6 <z_cbvprintf_impl+0x3ee>
		switch (*sp) {
   4100e:	2a2d      	cmp	r2, #45	; 0x2d
   41010:	d00d      	beq.n	4102e <z_cbvprintf_impl+0x226>
   41012:	2a30      	cmp	r2, #48	; 0x30
   41014:	f47f af2d 	bne.w	40e72 <z_cbvprintf_impl+0x6a>
   41018:	2301      	movs	r3, #1
	} while (loop);
   4101a:	e71c      	b.n	40e56 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
   4101c:	f04f 0c01 	mov.w	ip, #1
   41020:	e719      	b.n	40e56 <z_cbvprintf_impl+0x4e>
   41022:	f04f 0e01 	mov.w	lr, #1
   41026:	e716      	b.n	40e56 <z_cbvprintf_impl+0x4e>
   41028:	f04f 0801 	mov.w	r8, #1
   4102c:	e713      	b.n	40e56 <z_cbvprintf_impl+0x4e>
   4102e:	2001      	movs	r0, #1
   41030:	e711      	b.n	40e56 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
   41032:	a80e      	add	r0, sp, #56	; 0x38
   41034:	f003 ff38 	bl	44ea8 <extract_decimal>
	if (sp != wp) {
   41038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4103a:	42bb      	cmp	r3, r7
   4103c:	f43f af5d 	beq.w	40efa <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
   41040:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
   41044:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   41046:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
   41048:	f360 0241 	bfi	r2, r0, #1, #1
   4104c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   41050:	e753      	b.n	40efa <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
   41052:	a80e      	add	r0, sp, #56	; 0x38
   41054:	f003 ff28 	bl	44ea8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   41058:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
   4105c:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   4105e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   41062:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   41066:	f362 0341 	bfi	r3, r2, #1, #1
   4106a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
   4106e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   41070:	e75c      	b.n	40f2c <z_cbvprintf_impl+0x124>
	switch (*sp) {
   41072:	2a74      	cmp	r2, #116	; 0x74
   41074:	d026      	beq.n	410c4 <z_cbvprintf_impl+0x2bc>
   41076:	2a7a      	cmp	r2, #122	; 0x7a
   41078:	f47f af67 	bne.w	40f4a <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
   4107c:	2106      	movs	r1, #6
   4107e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   41082:	e00c      	b.n	4109e <z_cbvprintf_impl+0x296>
		if (*++sp == 'h') {
   41084:	785a      	ldrb	r2, [r3, #1]
   41086:	2a68      	cmp	r2, #104	; 0x68
   41088:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   4108c:	d106      	bne.n	4109c <z_cbvprintf_impl+0x294>
			conv->length_mod = LENGTH_HH;
   4108e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   41090:	f361 02c6 	bfi	r2, r1, #3, #4
   41094:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   41098:	3302      	adds	r3, #2
   4109a:	e756      	b.n	40f4a <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
   4109c:	2102      	movs	r1, #2
   4109e:	f361 02c6 	bfi	r2, r1, #3, #4
   410a2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   410a6:	3301      	adds	r3, #1
   410a8:	e74f      	b.n	40f4a <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
   410aa:	785a      	ldrb	r2, [r3, #1]
   410ac:	2a6c      	cmp	r2, #108	; 0x6c
   410ae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   410b2:	d101      	bne.n	410b8 <z_cbvprintf_impl+0x2b0>
			conv->length_mod = LENGTH_LL;
   410b4:	2104      	movs	r1, #4
   410b6:	e7eb      	b.n	41090 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_L;
   410b8:	2103      	movs	r1, #3
   410ba:	e7f0      	b.n	4109e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_J;
   410bc:	2105      	movs	r1, #5
   410be:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   410c2:	e7ec      	b.n	4109e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_T;
   410c4:	2107      	movs	r1, #7
   410c6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   410ca:	e7e8      	b.n	4109e <z_cbvprintf_impl+0x296>
		conv->unsupported = true;
   410cc:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   410d0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   410d4:	f022 0202 	bic.w	r2, r2, #2
   410d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   410dc:	f042 0202 	orr.w	r2, r2, #2
   410e0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   410e4:	e7df      	b.n	410a6 <z_cbvprintf_impl+0x29e>
	switch (conv->specifier) {
   410e6:	3a6e      	subs	r2, #110	; 0x6e
   410e8:	b2d3      	uxtb	r3, r2
   410ea:	2201      	movs	r2, #1
   410ec:	409a      	lsls	r2, r3
   410ee:	f240 4382 	movw	r3, #1154	; 0x482
   410f2:	421a      	tst	r2, r3
   410f4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   410f8:	d137      	bne.n	4116a <z_cbvprintf_impl+0x362>
   410fa:	f012 0f24 	tst.w	r2, #36	; 0x24
   410fe:	d15f      	bne.n	411c0 <z_cbvprintf_impl+0x3b8>
   41100:	07d1      	lsls	r1, r2, #31
   41102:	d52b      	bpl.n	4115c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
   41104:	2103      	movs	r1, #3
   41106:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   4110a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   4110e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   41112:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   41116:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   41118:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   4111c:	4143      	adcs	r3, r0
   4111e:	e041      	b.n	411a4 <z_cbvprintf_impl+0x39c>
   41120:	2001      	movs	r0, #1
	switch (conv->specifier) {
   41122:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   41126:	b2c9      	uxtb	r1, r1
   41128:	fa00 f101 	lsl.w	r1, r0, r1
   4112c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   41130:	f47f af23 	bne.w	40f7a <z_cbvprintf_impl+0x172>
   41134:	f640 0301 	movw	r3, #2049	; 0x801
   41138:	4219      	tst	r1, r3
   4113a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   4113e:	d11a      	bne.n	41176 <z_cbvprintf_impl+0x36e>
   41140:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   41144:	d00a      	beq.n	4115c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_SINT;
   41146:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   4114a:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   4114e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   41152:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   41154:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   41158:	f47f af2f 	bne.w	40fba <z_cbvprintf_impl+0x1b2>
		conv->invalid = true;
   4115c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   41160:	f043 0301 	orr.w	r3, r3, #1
   41164:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   41168:	e727      	b.n	40fba <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_UINT;
   4116a:	2102      	movs	r1, #2
   4116c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   41170:	f361 0202 	bfi	r2, r1, #0, #3
   41174:	e7eb      	b.n	4114e <z_cbvprintf_impl+0x346>
   41176:	2002      	movs	r0, #2
   41178:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   4117c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   41180:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   41184:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   41186:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   4118a:	bf02      	ittt	eq
   4118c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   41190:	f041 0101 	orreq.w	r1, r1, #1
   41194:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   41198:	2a63      	cmp	r2, #99	; 0x63
   4119a:	f47f af0e 	bne.w	40fba <z_cbvprintf_impl+0x1b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
   4119e:	3b00      	subs	r3, #0
   411a0:	bf18      	it	ne
   411a2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   411a4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   411a8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   411ac:	430b      	orrs	r3, r1
   411ae:	f363 0241 	bfi	r2, r3, #1, #1
   411b2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   411b6:	e706      	b.n	40fc6 <z_cbvprintf_impl+0x1be>
		} else if ((conv->length_mod != LENGTH_NONE)
   411b8:	f013 0f38 	tst.w	r3, #56	; 0x38
   411bc:	d1ce      	bne.n	4115c <z_cbvprintf_impl+0x354>
   411be:	e6fc      	b.n	40fba <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_PTR;
   411c0:	2103      	movs	r1, #3
   411c2:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   411c6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   411ca:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   411ce:	bf14      	ite	ne
   411d0:	2301      	movne	r3, #1
   411d2:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   411d4:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   411d8:	e7e4      	b.n	411a4 <z_cbvprintf_impl+0x39c>
			unsupported = true;
   411da:	2301      	movs	r3, #1
   411dc:	e7e2      	b.n	411a4 <z_cbvprintf_impl+0x39c>
		} else if (conv->width_present) {
   411de:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   411e2:	2a00      	cmp	r2, #0
		int width = -1;
   411e4:	bfac      	ite	ge
   411e6:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
			width = conv->width_value;
   411ea:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
   411ec:	e6fd      	b.n	40fea <z_cbvprintf_impl+0x1e2>
		} else if (conv->prec_present) {
   411ee:	079f      	lsls	r7, r3, #30
   411f0:	f57f af0a 	bpl.w	41008 <z_cbvprintf_impl+0x200>
			precision = conv->prec_value;
   411f4:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   411f6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   411f8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
   411fc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   41200:	f003 0207 	and.w	r2, r3, #7
   41204:	2a04      	cmp	r2, #4
   41206:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   4120a:	d107      	bne.n	4121c <z_cbvprintf_impl+0x414>
		    && !conv->prec_present) {
   4120c:	0790      	lsls	r0, r2, #30
   4120e:	d405      	bmi.n	4121c <z_cbvprintf_impl+0x414>
			if (conv->specifier_a) {
   41210:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
   41214:	2900      	cmp	r1, #0
   41216:	bfac      	ite	ge
   41218:	2706      	movge	r7, #6
   4121a:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
   4121c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   41220:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   41222:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   41226:	d133      	bne.n	41290 <z_cbvprintf_impl+0x488>
			switch (length_mod) {
   41228:	1ed3      	subs	r3, r2, #3
   4122a:	2b04      	cmp	r3, #4
   4122c:	d804      	bhi.n	41238 <z_cbvprintf_impl+0x430>
   4122e:	e8df f003 	tbb	[pc, r3]
   41232:	4621      	.short	0x4621
   41234:	2146      	.short	0x2146
   41236:	21          	.byte	0x21
   41237:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   41238:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   4123a:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
   4123c:	ea4f 71e3 	mov.w	r1, r3, asr #31
   41240:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   41244:	d11c      	bne.n	41280 <z_cbvprintf_impl+0x478>
				value->sint = (signed char)value->sint;
   41246:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   4124a:	17d9      	asrs	r1, r3, #31
   4124c:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   41250:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   41252:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   41256:	0799      	lsls	r1, r3, #30
   41258:	9307      	str	r3, [sp, #28]
   4125a:	d050      	beq.n	412fe <z_cbvprintf_impl+0x4f6>
			OUTS(sp, fp);
   4125c:	4632      	mov	r2, r6
   4125e:	4650      	mov	r0, sl
   41260:	9b06      	ldr	r3, [sp, #24]
   41262:	9903      	ldr	r1, [sp, #12]
   41264:	f014 fd58 	bl	55d18 <outs>
   41268:	2800      	cmp	r0, #0
   4126a:	f2c0 835f 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   4126e:	4405      	add	r5, r0
			continue;
   41270:	9e06      	ldr	r6, [sp, #24]
   41272:	e5d1      	b.n	40e18 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   41274:	f854 3b04 	ldr.w	r3, [r4], #4
   41278:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
   4127a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   4127e:	e7e8      	b.n	41252 <z_cbvprintf_impl+0x44a>
			} else if (length_mod == LENGTH_H) {
   41280:	2a02      	cmp	r2, #2
   41282:	d1e5      	bne.n	41250 <z_cbvprintf_impl+0x448>
				value->sint = (short)value->sint;
   41284:	b219      	sxth	r1, r3
   41286:	f343 33c0 	sbfx	r3, r3, #15, #1
   4128a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
   4128e:	e7df      	b.n	41250 <z_cbvprintf_impl+0x448>
		} else if (specifier_cat == SPECIFIER_UINT) {
   41290:	2b02      	cmp	r3, #2
   41292:	d124      	bne.n	412de <z_cbvprintf_impl+0x4d6>
			switch (length_mod) {
   41294:	1ed3      	subs	r3, r2, #3
   41296:	2b04      	cmp	r3, #4
   41298:	d804      	bhi.n	412a4 <z_cbvprintf_impl+0x49c>
   4129a:	e8df f003 	tbb	[pc, r3]
   4129e:	1018      	.short	0x1018
   412a0:	1810      	.short	0x1810
   412a2:	18          	.byte	0x18
   412a3:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   412a4:	2a01      	cmp	r2, #1
   412a6:	f04f 0100 	mov.w	r1, #0
				value->uint = va_arg(ap, unsigned int);
   412aa:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   412ae:	d014      	beq.n	412da <z_cbvprintf_impl+0x4d2>
			} else if (length_mod == LENGTH_H) {
   412b0:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
   412b2:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   412b6:	d1cc      	bne.n	41252 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned short)value->uint;
   412b8:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   412ba:	9310      	str	r3, [sp, #64]	; 0x40
   412bc:	e7c9      	b.n	41252 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap,
   412be:	3407      	adds	r4, #7
   412c0:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   412c4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   412c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   412cc:	e7c1      	b.n	41252 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap, size_t);
   412ce:	f854 3b04 	ldr.w	r3, [r4], #4
   412d2:	9310      	str	r3, [sp, #64]	; 0x40
   412d4:	2300      	movs	r3, #0
   412d6:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   412d8:	e7bb      	b.n	41252 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned char)value->uint;
   412da:	b2db      	uxtb	r3, r3
   412dc:	e7cd      	b.n	4127a <z_cbvprintf_impl+0x472>
		} else if (specifier_cat == SPECIFIER_FP) {
   412de:	2b04      	cmp	r3, #4
   412e0:	d108      	bne.n	412f4 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
   412e2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   412e4:	f024 0407 	bic.w	r4, r4, #7
   412e8:	e9d4 0100 	ldrd	r0, r1, [r4]
   412ec:	3408      	adds	r4, #8
   412ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   412f2:	e7ae      	b.n	41252 <z_cbvprintf_impl+0x44a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   412f4:	2b03      	cmp	r3, #3
   412f6:	d1ac      	bne.n	41252 <z_cbvprintf_impl+0x44a>
			value->ptr = va_arg(ap, void *);
   412f8:	f854 3b04 	ldr.w	r3, [r4], #4
   412fc:	e7dd      	b.n	412ba <z_cbvprintf_impl+0x4b2>
		switch (conv->specifier) {
   412fe:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
   41302:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
   41306:	d8b3      	bhi.n	41270 <z_cbvprintf_impl+0x468>
   41308:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
   4130c:	d849      	bhi.n	413a2 <z_cbvprintf_impl+0x59a>
   4130e:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
   41312:	f000 8091 	beq.w	41438 <z_cbvprintf_impl+0x630>
   41316:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
   4131a:	d9a9      	bls.n	41270 <z_cbvprintf_impl+0x468>
   4131c:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
   41320:	d003      	beq.n	4132a <z_cbvprintf_impl+0x522>
   41322:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
   41326:	2a02      	cmp	r2, #2
   41328:	d8a2      	bhi.n	41270 <z_cbvprintf_impl+0x468>
	} u = {
   4132a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
   4132e:	2a00      	cmp	r2, #0
   41330:	f2c0 8136 	blt.w	415a0 <z_cbvprintf_impl+0x798>
	} else if (conv->flag_plus) {
   41334:	9b07      	ldr	r3, [sp, #28]
   41336:	071e      	lsls	r6, r3, #28
   41338:	f100 8135 	bmi.w	415a6 <z_cbvprintf_impl+0x79e>
	} else if (conv->flag_space) {
   4133c:	f3c3 1900 	ubfx	r9, r3, #4, #1
   41340:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   41344:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   41348:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   4134c:	2800      	cmp	r0, #0
   4134e:	f040 812d 	bne.w	415ac <z_cbvprintf_impl+0x7a4>
   41352:	ea51 0602 	orrs.w	r6, r1, r2
   41356:	bf14      	ite	ne
   41358:	2601      	movne	r6, #1
   4135a:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
   4135c:	02d2      	lsls	r2, r2, #11
   4135e:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
   41362:	02c9      	lsls	r1, r1, #11
		c = 'f';
   41364:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
   41368:	ea40 0e01 	orr.w	lr, r0, r1
   4136c:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
   41370:	bf08      	it	eq
   41372:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
   41376:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   4137a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
   4137e:	f000 819b 	beq.w	416b8 <z_cbvprintf_impl+0x8b0>
		if (is_subnormal) {
   41382:	2e00      	cmp	r6, #0
   41384:	f040 8149 	bne.w	4161a <z_cbvprintf_impl+0x812>
		fract |= BIT_63;
   41388:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   4138a:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
   4138e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   41392:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   41394:	2000      	movs	r0, #0
   41396:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   4139a:	4606      	mov	r6, r0
		fract *= 5U;
   4139c:	f04f 0c05 	mov.w	ip, #5
   413a0:	e155      	b.n	4164e <z_cbvprintf_impl+0x846>
		switch (conv->specifier) {
   413a2:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
   413a6:	2920      	cmp	r1, #32
   413a8:	f63f af62 	bhi.w	41270 <z_cbvprintf_impl+0x468>
   413ac:	a001      	add	r0, pc, #4	; (adr r0, 413b4 <z_cbvprintf_impl+0x5ac>)
   413ae:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   413b2:	bf00      	nop
   413b4:	0004153f 	.word	0x0004153f
   413b8:	00041271 	.word	0x00041271
   413bc:	00041271 	.word	0x00041271
   413c0:	00041271 	.word	0x00041271
   413c4:	00041271 	.word	0x00041271
   413c8:	00041271 	.word	0x00041271
   413cc:	00041271 	.word	0x00041271
   413d0:	00041271 	.word	0x00041271
   413d4:	00041271 	.word	0x00041271
   413d8:	0004132b 	.word	0x0004132b
   413dc:	00041271 	.word	0x00041271
   413e0:	000414c3 	.word	0x000414c3
   413e4:	000414d7 	.word	0x000414d7
   413e8:	0004132b 	.word	0x0004132b
   413ec:	0004132b 	.word	0x0004132b
   413f0:	0004132b 	.word	0x0004132b
   413f4:	00041271 	.word	0x00041271
   413f8:	000414d7 	.word	0x000414d7
   413fc:	00041271 	.word	0x00041271
   41400:	00041271 	.word	0x00041271
   41404:	00041271 	.word	0x00041271
   41408:	00041271 	.word	0x00041271
   4140c:	00041579 	.word	0x00041579
   41410:	0004153f 	.word	0x0004153f
   41414:	00041545 	.word	0x00041545
   41418:	00041271 	.word	0x00041271
   4141c:	00041271 	.word	0x00041271
   41420:	0004143f 	.word	0x0004143f
   41424:	00041271 	.word	0x00041271
   41428:	0004153f 	.word	0x0004153f
   4142c:	00041271 	.word	0x00041271
   41430:	00041271 	.word	0x00041271
   41434:	0004153f 	.word	0x0004153f
			OUTC('%');
   41438:	4658      	mov	r0, fp
   4143a:	9903      	ldr	r1, [sp, #12]
   4143c:	e4f6      	b.n	40e2c <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
   4143e:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   41440:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
   41442:	db3a      	blt.n	414ba <z_cbvprintf_impl+0x6b2>
				len = strnlen(bps, precision);
   41444:	4639      	mov	r1, r7
   41446:	4630      	mov	r0, r6
   41448:	f019 ff37 	bl	5b2ba <strnlen>
			bpe = bps + len;
   4144c:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
   4144e:	2e00      	cmp	r6, #0
   41450:	f43f af0e 	beq.w	41270 <z_cbvprintf_impl+0x468>
		char sign = 0;
   41454:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
   41458:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   4145c:	f013 0210 	ands.w	r2, r3, #16
   41460:	9205      	str	r2, [sp, #20]
   41462:	f000 8258 	beq.w	41916 <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
   41466:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   41468:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
   4146c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
   41470:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
   41472:	bf18      	it	ne
   41474:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   41476:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
   41478:	bf18      	it	ne
   4147a:	18c0      	addne	r0, r0, r3
		if (width > 0) {
   4147c:	9b04      	ldr	r3, [sp, #16]
		nj_len += conv->pad0_value;
   4147e:	f8cd 801c 	str.w	r8, [sp, #28]
		if (width > 0) {
   41482:	2b00      	cmp	r3, #0
   41484:	f340 8262 	ble.w	4194c <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
   41488:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   4148c:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
   4148e:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
   41490:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
   41492:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   41496:	f100 8259 	bmi.w	4194c <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
   4149a:	0651      	lsls	r1, r2, #25
   4149c:	f140 8249 	bpl.w	41932 <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
   414a0:	f1b9 0f00 	cmp.w	r9, #0
   414a4:	d007      	beq.n	414b6 <z_cbvprintf_impl+0x6ae>
						OUTC(sign);
   414a6:	4648      	mov	r0, r9
   414a8:	9903      	ldr	r1, [sp, #12]
   414aa:	47d0      	blx	sl
   414ac:	2800      	cmp	r0, #0
   414ae:	f2c0 823d 	blt.w	4192c <z_cbvprintf_impl+0xb24>
						sign = 0;
   414b2:	46d9      	mov	r9, fp
						OUTC(sign);
   414b4:	3501      	adds	r5, #1
					pad = '0';
   414b6:	2230      	movs	r2, #48	; 0x30
   414b8:	e23c      	b.n	41934 <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
   414ba:	4630      	mov	r0, r6
   414bc:	f7ff fc9a 	bl	40df4 <strlen>
   414c0:	e7c4      	b.n	4144c <z_cbvprintf_impl+0x644>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   414c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
   414c4:	f04f 0900 	mov.w	r9, #0
		size_t nj_len = (bpe - bps);
   414c8:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   414ca:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			bpe = buf + 1;
   414ce:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
   414d2:	ae17      	add	r6, sp, #92	; 0x5c
   414d4:	e7c0      	b.n	41458 <z_cbvprintf_impl+0x650>
			if (conv->flag_plus) {
   414d6:	9b07      	ldr	r3, [sp, #28]
   414d8:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
   414da:	bf54      	ite	pl
   414dc:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
				sign = '+';
   414e0:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			sint = value->sint;
   414e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
   414e8:	bf58      	it	pl
   414ea:	ea4f 1949 	movpl.w	r9, r9, lsl #5
			if (sint < 0) {
   414ee:	2b00      	cmp	r3, #0
   414f0:	da06      	bge.n	41500 <z_cbvprintf_impl+0x6f8>
				sign = '-';
   414f2:	f04f 092d 	mov.w	r9, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   414f6:	4252      	negs	r2, r2
   414f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   414fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			bps = encode_uint(value->uint, conv, buf, bpe);
   41500:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   41504:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   41508:	9300      	str	r3, [sp, #0]
   4150a:	aa12      	add	r2, sp, #72	; 0x48
   4150c:	ab17      	add	r3, sp, #92	; 0x5c
   4150e:	f003 fce1 	bl	44ed4 <encode_uint>
   41512:	4606      	mov	r6, r0
			if (precision >= 0) {
   41514:	2f00      	cmp	r7, #0
   41516:	db0c      	blt.n	41532 <z_cbvprintf_impl+0x72a>
				conv->flag_zero = false;
   41518:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   4151c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   41520:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
   41522:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   41526:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   41528:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   4152c:	d901      	bls.n	41532 <z_cbvprintf_impl+0x72a>
					conv->pad0_value = precision - (int)len;
   4152e:	1afb      	subs	r3, r7, r3
   41530:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
   41532:	2e00      	cmp	r6, #0
   41534:	f43f ae9c 	beq.w	41270 <z_cbvprintf_impl+0x468>
   41538:	f10d 0775 	add.w	r7, sp, #117	; 0x75
   4153c:	e05b      	b.n	415f6 <z_cbvprintf_impl+0x7ee>
		switch (conv->specifier) {
   4153e:	f04f 0900 	mov.w	r9, #0
   41542:	e7dd      	b.n	41500 <z_cbvprintf_impl+0x6f8>
			if (value->ptr != NULL) {
   41544:	9810      	ldr	r0, [sp, #64]	; 0x40
   41546:	2800      	cmp	r0, #0
   41548:	f000 81e0 	beq.w	4190c <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   4154c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   41550:	9300      	str	r3, [sp, #0]
   41552:	2100      	movs	r1, #0
   41554:	ab17      	add	r3, sp, #92	; 0x5c
   41556:	aa12      	add	r2, sp, #72	; 0x48
   41558:	f003 fcbc 	bl	44ed4 <encode_uint>
				conv->altform_0c = true;
   4155c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   41560:	4606      	mov	r6, r0
				conv->altform_0c = true;
   41562:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   41566:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   4156a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   4156e:	f04f 0900 	mov.w	r9, #0
				conv->altform_0c = true;
   41572:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
				goto prec_int_pad0;
   41576:	e7cd      	b.n	41514 <z_cbvprintf_impl+0x70c>
				store_count(conv, value->ptr, count);
   41578:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   4157a:	2a07      	cmp	r2, #7
   4157c:	f63f ae78 	bhi.w	41270 <z_cbvprintf_impl+0x468>
   41580:	e8df f002 	tbb	[pc, r2]
   41584:	0c06040c 	.word	0x0c06040c
   41588:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   4158c:	701d      	strb	r5, [r3, #0]
		break;
   4158e:	e66f      	b.n	41270 <z_cbvprintf_impl+0x468>
		*(short *)dp = (short)count;
   41590:	801d      	strh	r5, [r3, #0]
		break;
   41592:	e66d      	b.n	41270 <z_cbvprintf_impl+0x468>
		*(intmax_t *)dp = (intmax_t)count;
   41594:	17ea      	asrs	r2, r5, #31
   41596:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   4159a:	e669      	b.n	41270 <z_cbvprintf_impl+0x468>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   4159c:	601d      	str	r5, [r3, #0]
		break;
   4159e:	e667      	b.n	41270 <z_cbvprintf_impl+0x468>
		*sign = '-';
   415a0:	f04f 092d 	mov.w	r9, #45	; 0x2d
   415a4:	e6ce      	b.n	41344 <z_cbvprintf_impl+0x53c>
		*sign = '+';
   415a6:	f04f 092b 	mov.w	r9, #43	; 0x2b
   415aa:	e6cb      	b.n	41344 <z_cbvprintf_impl+0x53c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   415ac:	f240 76ff 	movw	r6, #2047	; 0x7ff
   415b0:	42b0      	cmp	r0, r6
   415b2:	d12f      	bne.n	41614 <z_cbvprintf_impl+0x80c>
			if (isupper((unsigned char)c)) {
   415b4:	48a0      	ldr	r0, [pc, #640]	; (41838 <z_cbvprintf_impl+0xa30>)
   415b6:	f10b 0301 	add.w	r3, fp, #1
   415ba:	b2db      	uxtb	r3, r3
   415bc:	5cc3      	ldrb	r3, [r0, r3]
		if (fract == 0) {
   415be:	430a      	orrs	r2, r1
   415c0:	f003 0303 	and.w	r3, r3, #3
   415c4:	d11e      	bne.n	41604 <z_cbvprintf_impl+0x7fc>
			if (isupper((unsigned char)c)) {
   415c6:	2b01      	cmp	r3, #1
   415c8:	bf0b      	itete	eq
   415ca:	2349      	moveq	r3, #73	; 0x49
   415cc:	2369      	movne	r3, #105	; 0x69
   415ce:	214e      	moveq	r1, #78	; 0x4e
   415d0:	216e      	movne	r1, #110	; 0x6e
   415d2:	bf0c      	ite	eq
   415d4:	2246      	moveq	r2, #70	; 0x46
   415d6:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
   415d8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
   415dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
   415e0:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
   415e4:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
   415e8:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
   415ec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
   415f0:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
   415f4:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   415f6:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
   415f8:	f1b9 0f00 	cmp.w	r9, #0
   415fc:	f43f af2c 	beq.w	41458 <z_cbvprintf_impl+0x650>
			nj_len += 1U;
   41600:	3001      	adds	r0, #1
   41602:	e729      	b.n	41458 <z_cbvprintf_impl+0x650>
			if (isupper((unsigned char)c)) {
   41604:	2b01      	cmp	r3, #1
   41606:	bf15      	itete	ne
   41608:	236e      	movne	r3, #110	; 0x6e
   4160a:	234e      	moveq	r3, #78	; 0x4e
   4160c:	2161      	movne	r1, #97	; 0x61
   4160e:	2141      	moveq	r1, #65	; 0x41
   41610:	461a      	mov	r2, r3
   41612:	e7e1      	b.n	415d8 <z_cbvprintf_impl+0x7d0>
	bool is_subnormal = (expo == 0) && (fract != 0);
   41614:	2600      	movs	r6, #0
   41616:	e6a1      	b.n	4135c <z_cbvprintf_impl+0x554>
				expo--;
   41618:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   4161a:	1849      	adds	r1, r1, r1
   4161c:	4152      	adcs	r2, r2
   4161e:	2a00      	cmp	r2, #0
   41620:	dafa      	bge.n	41618 <z_cbvprintf_impl+0x810>
   41622:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
   41626:	e6af      	b.n	41388 <z_cbvprintf_impl+0x580>
			fract >>= 1;
   41628:	0849      	lsrs	r1, r1, #1
   4162a:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   4162e:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   41630:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   41634:	4640      	mov	r0, r8
			expo++;
   41636:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   4163a:	d2f5      	bcs.n	41628 <z_cbvprintf_impl+0x820>
		expo++;
   4163c:	f100 0802 	add.w	r8, r0, #2
		decexp--;
   41640:	2001      	movs	r0, #1
		fract *= 5U;
   41642:	fb0c fe02 	mul.w	lr, ip, r2
   41646:	fba1 120c 	umull	r1, r2, r1, ip
		decexp--;
   4164a:	3e01      	subs	r6, #1
		fract *= 5U;
   4164c:	4472      	add	r2, lr
	while (expo < -2) {
   4164e:	f118 0f02 	cmn.w	r8, #2
   41652:	dbe9      	blt.n	41628 <z_cbvprintf_impl+0x820>
   41654:	b108      	cbz	r0, 4165a <z_cbvprintf_impl+0x852>
   41656:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
		fract += 2;
   4165a:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
   4165e:	f1b8 0f00 	cmp.w	r8, #0
   41662:	dc2c      	bgt.n	416be <z_cbvprintf_impl+0x8b6>
	fract >>= (4 - expo);
   41664:	f1c8 0004 	rsb	r0, r8, #4
   41668:	f1a0 0c20 	sub.w	ip, r0, #32
   4166c:	f108 081c 	add.w	r8, r8, #28
   41670:	40c2      	lsrs	r2, r0
   41672:	fa01 f808 	lsl.w	r8, r1, r8
   41676:	fa21 fc0c 	lsr.w	ip, r1, ip
   4167a:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
   4167c:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
   41680:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
   41684:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
   41686:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
   4168a:	d138      	bne.n	416fe <z_cbvprintf_impl+0x8f6>
		if (decexp < (-4 + 1) || decexp > precision) {
   4168c:	1cf0      	adds	r0, r6, #3
   4168e:	db01      	blt.n	41694 <z_cbvprintf_impl+0x88c>
   41690:	42b7      	cmp	r7, r6
   41692:	da2a      	bge.n	416ea <z_cbvprintf_impl+0x8e2>
			c += 'e' - 'g';  /* e or E */
   41694:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
   41698:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   4169a:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
   4169e:	dd7b      	ble.n	41798 <z_cbvprintf_impl+0x990>
		if (!conv->flag_hash && (precision > 0)) {
   416a0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
				precision--;
   416a4:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
   416a6:	0683      	lsls	r3, r0, #26
   416a8:	d476      	bmi.n	41798 <z_cbvprintf_impl+0x990>
   416aa:	1e3b      	subs	r3, r7, #0
   416ac:	bf18      	it	ne
   416ae:	2301      	movne	r3, #1
	bool prune_zero = false;
   416b0:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
   416b2:	f107 0801 	add.w	r8, r7, #1
   416b6:	e02c      	b.n	41712 <z_cbvprintf_impl+0x90a>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   416b8:	f04f 0800 	mov.w	r8, #0
   416bc:	e66a      	b.n	41394 <z_cbvprintf_impl+0x58c>
		fract += 2;
   416be:	3202      	adds	r2, #2
   416c0:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   416c4:	a80c      	add	r0, sp, #48	; 0x30
		expo--;
   416c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   416ca:	3601      	adds	r6, #1
		fract += 2;
   416cc:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
   416d0:	f014 faf3 	bl	55cba <_ldiv5>
		decexp++;
   416d4:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
			fract <<= 1;
   416d8:	1892      	adds	r2, r2, r2
   416da:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   416dc:	2900      	cmp	r1, #0
			expo--;
   416de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
   416e2:	daf9      	bge.n	416d8 <z_cbvprintf_impl+0x8d0>
   416e4:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
   416e8:	e7b7      	b.n	4165a <z_cbvprintf_impl+0x852>
		if (!conv->flag_hash && (precision > 0)) {
   416ea:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
			precision -= decexp;
   416ee:	1bbf      	subs	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
   416f0:	0698      	lsls	r0, r3, #26
   416f2:	d44f      	bmi.n	41794 <z_cbvprintf_impl+0x98c>
   416f4:	1e3b      	subs	r3, r7, #0
   416f6:	bf18      	it	ne
   416f8:	2301      	movne	r3, #1
	bool prune_zero = false;
   416fa:	9305      	str	r3, [sp, #20]
   416fc:	e004      	b.n	41708 <z_cbvprintf_impl+0x900>
   416fe:	2300      	movs	r3, #0
	if (c == 'f') {
   41700:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
   41704:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
   41706:	d1d4      	bne.n	416b2 <z_cbvprintf_impl+0x8aa>
		if (decimals < 0) {
   41708:	eb17 0806 	adds.w	r8, r7, r6
   4170c:	f04f 0b66 	mov.w	fp, #102	; 0x66
   41710:	d444      	bmi.n	4179c <z_cbvprintf_impl+0x994>
	if (decimals > 16) {
   41712:	f1b8 0f10 	cmp.w	r8, #16
   41716:	bfa8      	it	ge
   41718:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
   4171c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 41830 <z_cbvprintf_impl+0xa28>
   41720:	2010      	movs	r0, #16
   41722:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   41726:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
   41728:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
   4172c:	f1b8 0f00 	cmp.w	r8, #0
   41730:	d137      	bne.n	417a2 <z_cbvprintf_impl+0x99a>
	fract += round;
   41732:	1812      	adds	r2, r2, r0
   41734:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
   41738:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   4173c:	d241      	bcs.n	417c2 <z_cbvprintf_impl+0x9ba>
	fract += round;
   4173e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
   41742:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
   41744:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
   41748:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
   4174c:	f040 80bd 	bne.w	418ca <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
   41750:	2e00      	cmp	r6, #0
   41752:	dc41      	bgt.n	417d8 <z_cbvprintf_impl+0x9d0>
			*buf++ = '0';
   41754:	2130      	movs	r1, #48	; 0x30
   41756:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
   4175a:	2a00      	cmp	r2, #0
   4175c:	d16e      	bne.n	4183c <z_cbvprintf_impl+0xa34>
   4175e:	2f00      	cmp	r7, #0
   41760:	f340 81b5 	ble.w	41ace <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
   41764:	222e      	movs	r2, #46	; 0x2e
   41766:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   4176a:	b186      	cbz	r6, 4178e <z_cbvprintf_impl+0x986>
			conv->pad0_value = -decexp;
   4176c:	4272      	negs	r2, r6
   4176e:	42ba      	cmp	r2, r7
   41770:	bfa8      	it	ge
   41772:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   41774:	2a00      	cmp	r2, #0
   41776:	9213      	str	r2, [sp, #76]	; 0x4c
			precision -= conv->pad0_value;
   41778:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   4177c:	bfd4      	ite	le
   4177e:	2200      	movle	r2, #0
   41780:	2201      	movgt	r2, #1
   41782:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   41786:	f362 1145 	bfi	r1, r2, #5, #1
   4178a:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
   4178e:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
   41792:	e039      	b.n	41808 <z_cbvprintf_impl+0xa00>
	bool prune_zero = false;
   41794:	2300      	movs	r3, #0
   41796:	e7b0      	b.n	416fa <z_cbvprintf_impl+0x8f2>
   41798:	2300      	movs	r3, #0
   4179a:	e789      	b.n	416b0 <z_cbvprintf_impl+0x8a8>
			decimals = 0;
   4179c:	f04f 0800 	mov.w	r8, #0
   417a0:	e7bc      	b.n	4171c <z_cbvprintf_impl+0x914>
	*v >>= 1;
   417a2:	0840      	lsrs	r0, r0, #1
   417a4:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
   417a8:	085b      	lsrs	r3, r3, #1
   417aa:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
   417ae:	a80e      	add	r0, sp, #56	; 0x38
   417b0:	e9cd 2108 	strd	r2, r1, [sp, #32]
   417b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   417b8:	f014 fa7f 	bl	55cba <_ldiv5>
   417bc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
   417c0:	e7b2      	b.n	41728 <z_cbvprintf_impl+0x920>
	*v >>= 1;
   417c2:	0852      	lsrs	r2, r2, #1
   417c4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
   417c8:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
   417ca:	0849      	lsrs	r1, r1, #1
   417cc:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
   417d0:	3601      	adds	r6, #1
	_ldiv5(v);
   417d2:	f014 fa72 	bl	55cba <_ldiv5>
		decexp++;
   417d6:	e7b4      	b.n	41742 <z_cbvprintf_impl+0x93a>
	char *buf = bps;
   417d8:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
   417dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   417de:	2900      	cmp	r1, #0
   417e0:	dd09      	ble.n	417f6 <z_cbvprintf_impl+0x9ee>
				*buf++ = _get_digit(&fract, &digit_count);
   417e2:	a90b      	add	r1, sp, #44	; 0x2c
   417e4:	a80c      	add	r0, sp, #48	; 0x30
   417e6:	9207      	str	r2, [sp, #28]
   417e8:	f014 fa7f 	bl	55cea <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   417ec:	3e01      	subs	r6, #1
   417ee:	9a07      	ldr	r2, [sp, #28]
				*buf++ = _get_digit(&fract, &digit_count);
   417f0:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   417f4:	d1f2      	bne.n	417dc <z_cbvprintf_impl+0x9d4>
			conv->pad0_value = decexp;
   417f6:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
   417f8:	b99a      	cbnz	r2, 41822 <z_cbvprintf_impl+0xa1a>
   417fa:	2f00      	cmp	r7, #0
   417fc:	f340 8165 	ble.w	41aca <z_cbvprintf_impl+0xcc2>
			*buf++ = '.';
   41800:	212e      	movs	r1, #46	; 0x2e
   41802:	f808 1b01 	strb.w	r1, [r8], #1
   41806:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
   41808:	2f00      	cmp	r7, #0
   4180a:	dd20      	ble.n	4184e <z_cbvprintf_impl+0xa46>
   4180c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   4180e:	2a00      	cmp	r2, #0
   41810:	dd1d      	ble.n	4184e <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
   41812:	a90b      	add	r1, sp, #44	; 0x2c
   41814:	a80c      	add	r0, sp, #48	; 0x30
   41816:	f014 fa68 	bl	55cea <_get_digit>
		precision--;
   4181a:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
   4181c:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   41820:	e7f2      	b.n	41808 <z_cbvprintf_impl+0xa00>
			*buf++ = '.';
   41822:	222e      	movs	r2, #46	; 0x2e
   41824:	f808 2b01 	strb.w	r2, [r8], #1
   41828:	e7ed      	b.n	41806 <z_cbvprintf_impl+0x9fe>
   4182a:	bf00      	nop
   4182c:	f3af 8000 	nop.w
   41830:	00000000 	.word	0x00000000
   41834:	08000000 	.word	0x08000000
   41838:	000608c2 	.word	0x000608c2
   4183c:	222e      	movs	r2, #46	; 0x2e
   4183e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   41842:	2e00      	cmp	r6, #0
   41844:	d0a3      	beq.n	4178e <z_cbvprintf_impl+0x986>
   41846:	2f00      	cmp	r7, #0
   41848:	dc90      	bgt.n	4176c <z_cbvprintf_impl+0x964>
			*buf++ = '.';
   4184a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
   4184e:	9b05      	ldr	r3, [sp, #20]
   41850:	2b00      	cmp	r3, #0
   41852:	d14e      	bne.n	418f2 <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
   41854:	9714      	str	r7, [sp, #80]	; 0x50
   41856:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
   41858:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   4185c:	2a45      	cmp	r2, #69	; 0x45
   4185e:	d123      	bne.n	418a8 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
   41860:	2e00      	cmp	r6, #0
			decexp = -decexp;
   41862:	bfba      	itte	lt
   41864:	4276      	neglt	r6, r6
			*buf++ = '-';
   41866:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   41868:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
   4186a:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
   4186c:	bfc8      	it	gt
   4186e:	2164      	movgt	r1, #100	; 0x64
   41870:	707b      	strb	r3, [r7, #1]
   41872:	bfc4      	itt	gt
   41874:	fbb6 f3f1 	udivgt	r3, r6, r1
			decexp %= 100;
   41878:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
   4187c:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
   41880:	bfc8      	it	gt
   41882:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   41886:	fbb6 f3f1 	udiv	r3, r6, r1
			*buf++ = '-';
   4188a:	bfd2      	itee	le
   4188c:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
   4188e:	1cfa      	addgt	r2, r7, #3
   41890:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
   41892:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
   41896:	4617      	mov	r7, r2
   41898:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   4189c:	fb01 6313 	mls	r3, r1, r3, r6
   418a0:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   418a2:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
   418a6:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
   418a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   418aa:	2b00      	cmp	r3, #0
   418ac:	dc2c      	bgt.n	41908 <z_cbvprintf_impl+0xb00>
   418ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
   418b0:	2b00      	cmp	r3, #0
   418b2:	bfd4      	ite	le
   418b4:	2300      	movle	r3, #0
   418b6:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   418b8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   418bc:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   418c0:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   418c2:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
   418c6:	703b      	strb	r3, [r7, #0]
	return bps;
   418c8:	e694      	b.n	415f4 <z_cbvprintf_impl+0x7ec>
		*buf = _get_digit(&fract, &digit_count);
   418ca:	a90b      	add	r1, sp, #44	; 0x2c
   418cc:	a80c      	add	r0, sp, #48	; 0x30
   418ce:	9207      	str	r2, [sp, #28]
   418d0:	f014 fa0b 	bl	55cea <_get_digit>
		if (*buf++ != '0') {
   418d4:	9a07      	ldr	r2, [sp, #28]
   418d6:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   418d8:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
			decexp--;
   418dc:	bf18      	it	ne
   418de:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
   418e2:	b912      	cbnz	r2, 418ea <z_cbvprintf_impl+0xae2>
   418e4:	2f00      	cmp	r7, #0
   418e6:	f340 80f2 	ble.w	41ace <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
   418ea:	222e      	movs	r2, #46	; 0x2e
   418ec:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   418f0:	e74d      	b.n	4178e <z_cbvprintf_impl+0x986>
		while (*--buf == '0') {
   418f2:	4647      	mov	r7, r8
   418f4:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   418f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   418fc:	2a30      	cmp	r2, #48	; 0x30
   418fe:	d0f8      	beq.n	418f2 <z_cbvprintf_impl+0xaea>
   41900:	2a2e      	cmp	r2, #46	; 0x2e
   41902:	bf08      	it	eq
   41904:	4647      	moveq	r7, r8
   41906:	e7a7      	b.n	41858 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
   41908:	2301      	movs	r3, #1
   4190a:	e7d5      	b.n	418b8 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
   4190c:	4f71      	ldr	r7, [pc, #452]	; (41ad4 <z_cbvprintf_impl+0xccc>)
		char sign = 0;
   4190e:	4681      	mov	r9, r0
			bps = "(nil)";
   41910:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
   41912:	2005      	movs	r0, #5
   41914:	e5a0      	b.n	41458 <z_cbvprintf_impl+0x650>
		} else if (conv->altform_0) {
   41916:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   41918:	bf48      	it	mi
   4191a:	3001      	addmi	r0, #1
   4191c:	e5a4      	b.n	41468 <z_cbvprintf_impl+0x660>
					OUTC(pad);
   4191e:	4610      	mov	r0, r2
   41920:	9209      	str	r2, [sp, #36]	; 0x24
   41922:	9903      	ldr	r1, [sp, #12]
   41924:	47d0      	blx	sl
   41926:	2800      	cmp	r0, #0
   41928:	9a09      	ldr	r2, [sp, #36]	; 0x24
   4192a:	da05      	bge.n	41938 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
   4192c:	b01f      	add	sp, #124	; 0x7c
   4192e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   41932:	2220      	movs	r2, #32
					pad = '0';
   41934:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
   41938:	4659      	mov	r1, fp
   4193a:	2900      	cmp	r1, #0
   4193c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   41940:	dced      	bgt.n	4191e <z_cbvprintf_impl+0xb16>
   41942:	9b04      	ldr	r3, [sp, #16]
   41944:	f8cd b010 	str.w	fp, [sp, #16]
   41948:	442b      	add	r3, r5
   4194a:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
   4194c:	f1b9 0f00 	cmp.w	r9, #0
   41950:	d005      	beq.n	4195e <z_cbvprintf_impl+0xb56>
			OUTC(sign);
   41952:	4648      	mov	r0, r9
   41954:	9903      	ldr	r1, [sp, #12]
   41956:	47d0      	blx	sl
   41958:	2800      	cmp	r0, #0
   4195a:	dbe7      	blt.n	4192c <z_cbvprintf_impl+0xb24>
   4195c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   4195e:	9b08      	ldr	r3, [sp, #32]
   41960:	2b00      	cmp	r3, #0
   41962:	d077      	beq.n	41a54 <z_cbvprintf_impl+0xc4c>
			if (conv->specifier_a) {
   41964:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
   41968:	2b00      	cmp	r3, #0
   4196a:	db28      	blt.n	419be <z_cbvprintf_impl+0xbb6>
   4196c:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
   4196e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 41ad8 <z_cbvprintf_impl+0xcd0>
   41972:	7818      	ldrb	r0, [r3, #0]
   41974:	469b      	mov	fp, r3
   41976:	f819 2000 	ldrb.w	r2, [r9, r0]
   4197a:	3301      	adds	r3, #1
   4197c:	0752      	lsls	r2, r2, #29
   4197e:	d43f      	bmi.n	41a00 <z_cbvprintf_impl+0xbf8>
				if (!conv->pad_postdp) {
   41980:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   41984:	1bae      	subs	r6, r5, r6
   41986:	0698      	lsls	r0, r3, #26
   41988:	445e      	add	r6, fp
   4198a:	d407      	bmi.n	4199c <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
   4198c:	4642      	mov	r2, r8
   4198e:	2a00      	cmp	r2, #0
   41990:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   41994:	dc3b      	bgt.n	41a0e <z_cbvprintf_impl+0xc06>
   41996:	9b07      	ldr	r3, [sp, #28]
   41998:	4433      	add	r3, r6
   4199a:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
   4199c:	f89b 0000 	ldrb.w	r0, [fp]
   419a0:	282e      	cmp	r0, #46	; 0x2e
   419a2:	d10a      	bne.n	419ba <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
   419a4:	9903      	ldr	r1, [sp, #12]
   419a6:	47d0      	blx	sl
						OUTC('0');
   419a8:	2800      	cmp	r0, #0
   419aa:	dbbf      	blt.n	4192c <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
   419ac:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
   419b0:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   419b4:	dc31      	bgt.n	41a1a <z_cbvprintf_impl+0xc12>
					OUTC(*cp++);
   419b6:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
   419ba:	465d      	mov	r5, fp
   419bc:	e038      	b.n	41a30 <z_cbvprintf_impl+0xc28>
   419be:	46b1      	mov	r9, r6
				while (*cp != 'p') {
   419c0:	f899 0000 	ldrb.w	r0, [r9]
   419c4:	46c8      	mov	r8, r9
   419c6:	2870      	cmp	r0, #112	; 0x70
   419c8:	f109 0901 	add.w	r9, r9, #1
   419cc:	d113      	bne.n	419f6 <z_cbvprintf_impl+0xbee>
   419ce:	1bae      	subs	r6, r5, r6
   419d0:	9d14      	ldr	r5, [sp, #80]	; 0x50
   419d2:	4446      	add	r6, r8
			while (pad_len-- > 0) {
   419d4:	4435      	add	r5, r6
   419d6:	1bab      	subs	r3, r5, r6
   419d8:	2b00      	cmp	r3, #0
   419da:	dc33      	bgt.n	41a44 <z_cbvprintf_impl+0xc3c>
			OUTS(cp, bpe);
   419dc:	463b      	mov	r3, r7
   419de:	4642      	mov	r2, r8
   419e0:	4650      	mov	r0, sl
   419e2:	9903      	ldr	r1, [sp, #12]
   419e4:	f014 f998 	bl	55d18 <outs>
   419e8:	2800      	cmp	r0, #0
   419ea:	db9f      	blt.n	4192c <z_cbvprintf_impl+0xb24>
   419ec:	4430      	add	r0, r6
   419ee:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
   419f0:	4605      	mov	r5, r0
   419f2:	4406      	add	r6, r0
   419f4:	e064      	b.n	41ac0 <z_cbvprintf_impl+0xcb8>
					OUTC(*cp++);
   419f6:	9903      	ldr	r1, [sp, #12]
   419f8:	47d0      	blx	sl
   419fa:	2800      	cmp	r0, #0
   419fc:	dae0      	bge.n	419c0 <z_cbvprintf_impl+0xbb8>
   419fe:	e795      	b.n	4192c <z_cbvprintf_impl+0xb24>
   41a00:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
   41a02:	9903      	ldr	r1, [sp, #12]
   41a04:	47d0      	blx	sl
   41a06:	2800      	cmp	r0, #0
   41a08:	9b05      	ldr	r3, [sp, #20]
   41a0a:	dab2      	bge.n	41972 <z_cbvprintf_impl+0xb6a>
   41a0c:	e78e      	b.n	4192c <z_cbvprintf_impl+0xb24>
						OUTC('0');
   41a0e:	2030      	movs	r0, #48	; 0x30
   41a10:	9903      	ldr	r1, [sp, #12]
   41a12:	47d0      	blx	sl
   41a14:	2800      	cmp	r0, #0
   41a16:	dab9      	bge.n	4198c <z_cbvprintf_impl+0xb84>
   41a18:	e788      	b.n	4192c <z_cbvprintf_impl+0xb24>
						OUTC('0');
   41a1a:	2030      	movs	r0, #48	; 0x30
   41a1c:	9903      	ldr	r1, [sp, #12]
   41a1e:	47d0      	blx	sl
   41a20:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   41a24:	e7c0      	b.n	419a8 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
   41a26:	9903      	ldr	r1, [sp, #12]
   41a28:	47d0      	blx	sl
   41a2a:	2800      	cmp	r0, #0
   41a2c:	f6ff af7e 	blt.w	4192c <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
   41a30:	7828      	ldrb	r0, [r5, #0]
   41a32:	46a8      	mov	r8, r5
   41a34:	f819 3000 	ldrb.w	r3, [r9, r0]
   41a38:	3501      	adds	r5, #1
   41a3a:	0759      	lsls	r1, r3, #29
   41a3c:	d4f3      	bmi.n	41a26 <z_cbvprintf_impl+0xc1e>
   41a3e:	eba6 060b 	sub.w	r6, r6, fp
   41a42:	e7c5      	b.n	419d0 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
   41a44:	2030      	movs	r0, #48	; 0x30
   41a46:	9903      	ldr	r1, [sp, #12]
   41a48:	47d0      	blx	sl
   41a4a:	2800      	cmp	r0, #0
   41a4c:	f6ff af6e 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41a50:	3601      	adds	r6, #1
   41a52:	e7c0      	b.n	419d6 <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
   41a54:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   41a58:	06da      	lsls	r2, r3, #27
   41a5a:	d401      	bmi.n	41a60 <z_cbvprintf_impl+0xc58>
   41a5c:	071b      	lsls	r3, r3, #28
   41a5e:	d506      	bpl.n	41a6e <z_cbvprintf_impl+0xc66>
				OUTC('0');
   41a60:	2030      	movs	r0, #48	; 0x30
   41a62:	9903      	ldr	r1, [sp, #12]
   41a64:	47d0      	blx	sl
   41a66:	2800      	cmp	r0, #0
   41a68:	f6ff af60 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41a6c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   41a6e:	9b05      	ldr	r3, [sp, #20]
   41a70:	b13b      	cbz	r3, 41a82 <z_cbvprintf_impl+0xc7a>
				OUTC(conv->specifier);
   41a72:	9903      	ldr	r1, [sp, #12]
   41a74:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   41a78:	47d0      	blx	sl
   41a7a:	2800      	cmp	r0, #0
   41a7c:	f6ff af56 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41a80:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   41a82:	44a8      	add	r8, r5
   41a84:	e006      	b.n	41a94 <z_cbvprintf_impl+0xc8c>
				OUTC('0');
   41a86:	2030      	movs	r0, #48	; 0x30
   41a88:	9903      	ldr	r1, [sp, #12]
   41a8a:	47d0      	blx	sl
   41a8c:	2800      	cmp	r0, #0
   41a8e:	f6ff af4d 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41a92:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   41a94:	eba8 0305 	sub.w	r3, r8, r5
   41a98:	2b00      	cmp	r3, #0
   41a9a:	dcf4      	bgt.n	41a86 <z_cbvprintf_impl+0xc7e>
			OUTS(bps, bpe);
   41a9c:	463b      	mov	r3, r7
   41a9e:	4632      	mov	r2, r6
   41aa0:	4650      	mov	r0, sl
   41aa2:	9903      	ldr	r1, [sp, #12]
   41aa4:	f014 f938 	bl	55d18 <outs>
   41aa8:	2800      	cmp	r0, #0
   41aaa:	f6ff af3f 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41aae:	4428      	add	r0, r5
   41ab0:	e79d      	b.n	419ee <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
   41ab2:	2020      	movs	r0, #32
   41ab4:	9903      	ldr	r1, [sp, #12]
   41ab6:	47d0      	blx	sl
   41ab8:	2800      	cmp	r0, #0
   41aba:	f6ff af37 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41abe:	3501      	adds	r5, #1
		while (width > 0) {
   41ac0:	1b73      	subs	r3, r6, r5
   41ac2:	2b00      	cmp	r3, #0
   41ac4:	dcf5      	bgt.n	41ab2 <z_cbvprintf_impl+0xcaa>
   41ac6:	f7ff bbd3 	b.w	41270 <z_cbvprintf_impl+0x468>
			decexp = 0;
   41aca:	4616      	mov	r6, r2
   41acc:	e6bf      	b.n	4184e <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
   41ace:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
   41ad2:	e6bc      	b.n	4184e <z_cbvprintf_impl+0xa46>
   41ad4:	0005d721 	.word	0x0005d721
   41ad8:	000608c3 	.word	0x000608c3
   41adc:	00000000 	.word	0x00000000

00041ae0 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
   41ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   41ae2:	ed2d 8b02 	vpush	{d8}
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   41ae6:	2500      	movs	r5, #0
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   41ae8:	2304      	movs	r3, #4
{
   41aea:	b08b      	sub	sp, #44	; 0x2c
   41aec:	460e      	mov	r6, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   41aee:	4607      	mov	r7, r0
	struct at_param_list resp_list = {0};
   41af0:	e9cd 5508 	strd	r5, r5, [sp, #32]
	size_t len = sizeof(tmp_buf) - 1;
   41af4:	9305      	str	r3, [sp, #20]
	if ((at_response == NULL) || (cfg == NULL)) {
   41af6:	2800      	cmp	r0, #0
   41af8:	f000 80c0 	beq.w	41c7c <parse_edrx+0x19c>
   41afc:	2900      	cmp	r1, #0
   41afe:	f000 80bd 	beq.w	41c7c <parse_edrx+0x19c>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   41b02:	2106      	movs	r1, #6
   41b04:	a808      	add	r0, sp, #32
   41b06:	f015 fe15 	bl	57734 <at_params_list_init>
	if (err) {
   41b0a:	4604      	mov	r4, r0
   41b0c:	b178      	cbz	r0, 41b2e <parse_edrx+0x4e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   41b0e:	4b60      	ldr	r3, [pc, #384]	; (41c90 <parse_edrx+0x1b0>)
   41b10:	9003      	str	r0, [sp, #12]
   41b12:	e9cd 5301 	strd	r5, r3, [sp, #4]
   41b16:	2201      	movs	r2, #1
   41b18:	462b      	mov	r3, r5
   41b1a:	4628      	mov	r0, r5
   41b1c:	495d      	ldr	r1, [pc, #372]	; (41c94 <parse_edrx+0x1b4>)
   41b1e:	9500      	str	r5, [sp, #0]
   41b20:	f015 ff61 	bl	579e6 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   41b24:	4620      	mov	r0, r4
   41b26:	b00b      	add	sp, #44	; 0x2c
   41b28:	ecbd 8b02 	vpop	{d8}
   41b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   41b2e:	4601      	mov	r1, r0
   41b30:	aa08      	add	r2, sp, #32
   41b32:	4638      	mov	r0, r7
   41b34:	f015 fde5 	bl	57702 <at_parser_params_from_str>
	if (err) {
   41b38:	4604      	mov	r4, r0
   41b3a:	b170      	cbz	r0, 41b5a <parse_edrx+0x7a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   41b3c:	4b56      	ldr	r3, [pc, #344]	; (41c98 <parse_edrx+0x1b8>)
   41b3e:	9003      	str	r0, [sp, #12]
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   41b40:	e9cd 5301 	strd	r5, r3, [sp, #4]
   41b44:	462b      	mov	r3, r5
   41b46:	9500      	str	r5, [sp, #0]
   41b48:	2201      	movs	r2, #1
   41b4a:	4618      	mov	r0, r3
   41b4c:	4951      	ldr	r1, [pc, #324]	; (41c94 <parse_edrx+0x1b4>)
   41b4e:	f015 ff4a 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   41b52:	a808      	add	r0, sp, #32
   41b54:	f015 fe18 	bl	57788 <at_params_list_free>
	return err;
   41b58:	e7e4      	b.n	41b24 <parse_edrx+0x44>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   41b5a:	2103      	movs	r1, #3
   41b5c:	ab05      	add	r3, sp, #20
   41b5e:	aa06      	add	r2, sp, #24
   41b60:	a808      	add	r0, sp, #32
   41b62:	f015 feef 	bl	57944 <at_params_string_get>
	if (err) {
   41b66:	4604      	mov	r4, r0
   41b68:	b110      	cbz	r0, 41b70 <parse_edrx+0x90>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   41b6a:	4b4c      	ldr	r3, [pc, #304]	; (41c9c <parse_edrx+0x1bc>)
   41b6c:	9003      	str	r0, [sp, #12]
   41b6e:	e7e7      	b.n	41b40 <parse_edrx+0x60>
	tmp_buf[len] = '\0';
   41b70:	9b05      	ldr	r3, [sp, #20]
	idx = strtoul(tmp_buf, NULL, 2);
   41b72:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   41b74:	3328      	adds	r3, #40	; 0x28
   41b76:	446b      	add	r3, sp
   41b78:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   41b7c:	2202      	movs	r2, #2
   41b7e:	a806      	add	r0, sp, #24
   41b80:	f012 f9b6 	bl	53ef0 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   41b84:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   41b86:	b2c7      	uxtb	r7, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   41b88:	aa04      	add	r2, sp, #16
   41b8a:	a808      	add	r0, sp, #32
   41b8c:	f015 feae 	bl	578ec <at_params_int_get>
	if (err) {
   41b90:	4604      	mov	r4, r0
   41b92:	b110      	cbz	r0, 41b9a <parse_edrx+0xba>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   41b94:	4b42      	ldr	r3, [pc, #264]	; (41ca0 <parse_edrx+0x1c0>)
   41b96:	9003      	str	r0, [sp, #12]
   41b98:	e7d2      	b.n	41b40 <parse_edrx+0x60>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41b9a:	9b04      	ldr	r3, [sp, #16]
   41b9c:	2b04      	cmp	r3, #4
   41b9e:	d022      	beq.n	41be6 <parse_edrx+0x106>
   41ba0:	2b05      	cmp	r3, #5
   41ba2:	d00c      	beq.n	41bbe <parse_edrx+0xde>
		LOG_WRN("Active LTE mode could not be determined");
   41ba4:	4b3f      	ldr	r3, [pc, #252]	; (41ca4 <parse_edrx+0x1c4>)
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41ba6:	7030      	strb	r0, [r6, #0]
		LOG_WRN("Active LTE mode could not be determined");
   41ba8:	2202      	movs	r2, #2
   41baa:	e9cd 0301 	strd	r0, r3, [sp, #4]
   41bae:	4939      	ldr	r1, [pc, #228]	; (41c94 <parse_edrx+0x1b4>)
   41bb0:	4603      	mov	r3, r0
   41bb2:	9000      	str	r0, [sp, #0]
   41bb4:	f015 ff17 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   41bb8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   41bbc:	e7c9      	b.n	41b52 <parse_edrx+0x72>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41bbe:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   41bc0:	2f0f      	cmp	r7, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41bc2:	7033      	strb	r3, [r6, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   41bc4:	d933      	bls.n	41c2e <parse_edrx+0x14e>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   41bc6:	f06f 0315 	mvn.w	r3, #21
   41bca:	9303      	str	r3, [sp, #12]
   41bcc:	4b36      	ldr	r3, [pc, #216]	; (41ca8 <parse_edrx+0x1c8>)
   41bce:	9302      	str	r3, [sp, #8]
   41bd0:	2300      	movs	r3, #0
   41bd2:	e9cd 3300 	strd	r3, r3, [sp]
   41bd6:	2201      	movs	r2, #1
   41bd8:	4618      	mov	r0, r3
   41bda:	492e      	ldr	r1, [pc, #184]	; (41c94 <parse_edrx+0x1b4>)
   41bdc:	f015 ff03 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   41be0:	f06f 0415 	mvn.w	r4, #21
   41be4:	e7b5      	b.n	41b52 <parse_edrx+0x72>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41be6:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   41be8:	2f0f      	cmp	r7, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41bea:	7033      	strb	r3, [r6, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   41bec:	d8eb      	bhi.n	41bc6 <parse_edrx+0xe6>
		*ptw_multiplier = 1.28;
   41bee:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 41cac <parse_edrx+0x1cc>
		multiplier = edrx_lookup_ltem[idx];
   41bf2:	4b2f      	ldr	r3, [pc, #188]	; (41cb0 <parse_edrx+0x1d0>)
   41bf4:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   41bf8:	b1f8      	cbz	r0, 41c3a <parse_edrx+0x15a>
   41bfa:	f7fe fbf7 	bl	403ec <__aeabi_i2d>
   41bfe:	a322      	add	r3, pc, #136	; (adr r3, 41c88 <parse_edrx+0x1a8>)
   41c00:	e9d3 2300 	ldrd	r2, r3, [r3]
   41c04:	f7fe fc5c 	bl	404c0 <__aeabi_dmul>
   41c08:	f7fe ff32 	bl	40a70 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   41c0c:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   41c0e:	6070      	str	r0, [r6, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   41c10:	ab05      	add	r3, sp, #20
   41c12:	aa06      	add	r2, sp, #24
   41c14:	a808      	add	r0, sp, #32
	len = sizeof(tmp_buf) - 1;
   41c16:	9105      	str	r1, [sp, #20]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   41c18:	f015 fe94 	bl	57944 <at_params_string_get>
	if (err) {
   41c1c:	4604      	mov	r4, r0
   41c1e:	b170      	cbz	r0, 41c3e <parse_edrx+0x15e>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   41c20:	4b24      	ldr	r3, [pc, #144]	; (41cb4 <parse_edrx+0x1d4>)
   41c22:	9003      	str	r0, [sp, #12]
   41c24:	9302      	str	r3, [sp, #8]
   41c26:	2300      	movs	r3, #0
   41c28:	e9cd 3300 	strd	r3, r3, [sp]
   41c2c:	e78c      	b.n	41b48 <parse_edrx+0x68>
		multiplier = edrx_lookup_nbiot[idx];
   41c2e:	4b22      	ldr	r3, [pc, #136]	; (41cb8 <parse_edrx+0x1d8>)
		*ptw_multiplier = 2.56;
   41c30:	ed9f 8a22 	vldr	s16, [pc, #136]	; 41cbc <parse_edrx+0x1dc>
		multiplier = edrx_lookup_nbiot[idx];
   41c34:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
		break;
   41c38:	e7de      	b.n	41bf8 <parse_edrx+0x118>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   41c3a:	4821      	ldr	r0, [pc, #132]	; (41cc0 <parse_edrx+0x1e0>)
   41c3c:	e7e6      	b.n	41c0c <parse_edrx+0x12c>
	tmp_buf[len] = '\0';
   41c3e:	9b05      	ldr	r3, [sp, #20]
	idx = strtoul(tmp_buf, NULL, 2);
   41c40:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   41c42:	3328      	adds	r3, #40	; 0x28
   41c44:	446b      	add	r3, sp
   41c46:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   41c4a:	2202      	movs	r2, #2
   41c4c:	a806      	add	r0, sp, #24
   41c4e:	f012 f94f 	bl	53ef0 <strtoul>
   41c52:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
   41c54:	280f      	cmp	r0, #15
   41c56:	d906      	bls.n	41c66 <parse_edrx+0x186>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   41c58:	4b1a      	ldr	r3, [pc, #104]	; (41cc4 <parse_edrx+0x1e4>)
   41c5a:	9003      	str	r0, [sp, #12]
   41c5c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   41c60:	9400      	str	r4, [sp, #0]
   41c62:	4623      	mov	r3, r4
   41c64:	e7b7      	b.n	41bd6 <parse_edrx+0xf6>
	idx += 1;
   41c66:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   41c68:	b2c0      	uxtb	r0, r0
   41c6a:	ee07 0a90 	vmov	s15, r0
   41c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   41c72:	ee67 7a88 	vmul.f32	s15, s15, s16
   41c76:	edc6 7a02 	vstr	s15, [r6, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   41c7a:	e76a      	b.n	41b52 <parse_edrx+0x72>
		return -EINVAL;
   41c7c:	f06f 0415 	mvn.w	r4, #21
   41c80:	e750      	b.n	41b24 <parse_edrx+0x44>
   41c82:	bf00      	nop
   41c84:	f3af 8000 	nop.w
   41c88:	47ae147b 	.word	0x47ae147b
   41c8c:	40247ae1 	.word	0x40247ae1
   41c90:	0005f399 	.word	0x0005f399
   41c94:	0005bf0c 	.word	0x0005bf0c
   41c98:	0005f3c2 	.word	0x0005f3c2
   41c9c:	0005f3ee 	.word	0x0005f3ee
   41ca0:	0005f41a 	.word	0x0005f41a
   41ca4:	0005f43c 	.word	0x0005f43c
   41ca8:	0005f464 	.word	0x0005f464
   41cac:	3fa3d70a 	.word	0x3fa3d70a
   41cb0:	0005c8c0 	.word	0x0005c8c0
   41cb4:	0005f488 	.word	0x0005f488
   41cb8:	0005c8a0 	.word	0x0005c8a0
   41cbc:	4023d70a 	.word	0x4023d70a
   41cc0:	40a3d70a 	.word	0x40a3d70a
   41cc4:	0005f4b3 	.word	0x0005f4b3

00041cc8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   41cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41ccc:	ed2d 8b02 	vpush	{d8}
   41cd0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   41cd2:	ed9f 8b49 	vldr	d8, [pc, #292]	; 41df8 <work_queue_main+0x130>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   41cd6:	4e4a      	ldr	r6, [pc, #296]	; (41e00 <work_queue_main+0x138>)
{
   41cd8:	b084      	sub	sp, #16
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   41cda:	f04f 0320 	mov.w	r3, #32
   41cde:	f3ef 8711 	mrs	r7, BASEPRI
   41ce2:	f383 8812 	msr	BASEPRI_MAX, r3
   41ce6:	f3bf 8f6f 	isb	sy
   41cea:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   41cee:	b98d      	cbnz	r5, 41d14 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   41cf0:	2102      	movs	r1, #2
   41cf2:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   41cf6:	f018 fe2a 	bl	5a94e <flag_test_and_clear>
   41cfa:	2800      	cmp	r0, #0
   41cfc:	d143      	bne.n	41d86 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   41cfe:	2300      	movs	r3, #0
   41d00:	ed8d 8b00 	vstr	d8, [sp]
   41d04:	4639      	mov	r1, r7
   41d06:	9302      	str	r3, [sp, #8]
   41d08:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   41d0c:	483d      	ldr	r0, [pc, #244]	; (41e04 <work_queue_main+0x13c>)
   41d0e:	f011 f939 	bl	52f84 <z_sched_wait>
			continue;
   41d12:	e7e2      	b.n	41cda <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   41d14:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
   41d18:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   41d1a:	4295      	cmp	r5, r2
	list->head = node;
   41d1c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	list->tail = node;
   41d20:	bf08      	it	eq
   41d22:	f8c4 30cc 	streq.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
   41d26:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   41d2a:	f043 0302 	orr.w	r3, r3, #2
   41d2e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
   41d32:	68eb      	ldr	r3, [r5, #12]
   41d34:	f023 0304 	bic.w	r3, r3, #4
   41d38:	f043 0301 	orr.w	r3, r3, #1
   41d3c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   41d3e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   41d40:	f387 8811 	msr	BASEPRI, r7
   41d44:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   41d48:	4628      	mov	r0, r5
   41d4a:	4798      	blx	r3
	__asm__ volatile(
   41d4c:	f04f 0320 	mov.w	r3, #32
   41d50:	f3ef 8911 	mrs	r9, BASEPRI
   41d54:	f383 8812 	msr	BASEPRI_MAX, r3
   41d58:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   41d5c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41d5e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   41d60:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41d64:	d419      	bmi.n	41d9a <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   41d66:	60ea      	str	r2, [r5, #12]
   41d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   41d6c:	f023 0302 	bic.w	r3, r3, #2
   41d70:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
   41d74:	f389 8811 	msr	BASEPRI, r9
   41d78:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   41d7c:	05db      	lsls	r3, r3, #23
   41d7e:	d4ac      	bmi.n	41cda <work_queue_main+0x12>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
   41d80:	f010 fffe 	bl	52d80 <z_impl_k_yield>
}
   41d84:	e7a9      	b.n	41cda <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   41d86:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   41d8a:	2200      	movs	r2, #0
   41d8c:	2101      	movs	r1, #1
   41d8e:	4628      	mov	r0, r5
   41d90:	f018 ff18 	bl	5abc4 <z_sched_wake>
   41d94:	2800      	cmp	r0, #0
   41d96:	d1f8      	bne.n	41d8a <work_queue_main+0xc2>
   41d98:	e7b1      	b.n	41cfe <work_queue_main+0x36>
	return list->head;
   41d9a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   41d9c:	f023 0303 	bic.w	r3, r3, #3
   41da0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   41da2:	2800      	cmp	r0, #0
   41da4:	d0e0      	beq.n	41d68 <work_queue_main+0xa0>
	return node->next;
   41da6:	2700      	movs	r7, #0
	parent->next = child;
   41da8:	46ba      	mov	sl, r7
	return node->next;
   41daa:	f8d0 8000 	ldr.w	r8, [r0]
   41dae:	2800      	cmp	r0, #0
   41db0:	d0da      	beq.n	41d68 <work_queue_main+0xa0>
		if (wc->work == work) {
   41db2:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   41db4:	4601      	mov	r1, r0
		if (wc->work == work) {
   41db6:	4295      	cmp	r5, r2
   41db8:	d10b      	bne.n	41dd2 <work_queue_main+0x10a>
   41dba:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   41dbc:	b997      	cbnz	r7, 41de4 <work_queue_main+0x11c>
   41dbe:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   41dc0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   41dc2:	4282      	cmp	r2, r0
   41dc4:	d100      	bne.n	41dc8 <work_queue_main+0x100>
	list->tail = node;
   41dc6:	6071      	str	r1, [r6, #4]
	parent->next = child;
   41dc8:	f840 ab08 	str.w	sl, [r0], #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   41dcc:	f010 fc48 	bl	52660 <z_impl_k_sem_give>
}
   41dd0:	4639      	mov	r1, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   41dd2:	f1b8 0f00 	cmp.w	r8, #0
   41dd6:	d00b      	beq.n	41df0 <work_queue_main+0x128>
	return node->next;
   41dd8:	f8d8 2000 	ldr.w	r2, [r8]
   41ddc:	4640      	mov	r0, r8
   41dde:	460f      	mov	r7, r1
   41de0:	4690      	mov	r8, r2
   41de2:	e7e4      	b.n	41dae <work_queue_main+0xe6>
	parent->next = child;
   41de4:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   41de6:	6872      	ldr	r2, [r6, #4]
   41de8:	4282      	cmp	r2, r0
	list->tail = node;
   41dea:	bf08      	it	eq
   41dec:	6077      	streq	r7, [r6, #4]
}
   41dee:	e7eb      	b.n	41dc8 <work_queue_main+0x100>
   41df0:	4642      	mov	r2, r8
   41df2:	e7f3      	b.n	41ddc <work_queue_main+0x114>
   41df4:	f3af 8000 	nop.w
   41df8:	ffffffff 	.word	0xffffffff
   41dfc:	ffffffff 	.word	0xffffffff
   41e00:	2001bca8 	.word	0x2001bca8
   41e04:	2002083e 	.word	0x2002083e

00041e08 <_dtoa_r>:
   41e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41e0c:	6a47      	ldr	r7, [r0, #36]	; 0x24
   41e0e:	b097      	sub	sp, #92	; 0x5c
   41e10:	4683      	mov	fp, r0
   41e12:	9e20      	ldr	r6, [sp, #128]	; 0x80
   41e14:	9108      	str	r1, [sp, #32]
   41e16:	920c      	str	r2, [sp, #48]	; 0x30
   41e18:	9312      	str	r3, [sp, #72]	; 0x48
   41e1a:	ec55 4b10 	vmov	r4, r5, d0
   41e1e:	ed8d 0b00 	vstr	d0, [sp]
   41e22:	b97f      	cbnz	r7, 41e44 <_dtoa_r+0x3c>
   41e24:	2010      	movs	r0, #16
   41e26:	f011 faa5 	bl	53374 <malloc>
   41e2a:	4602      	mov	r2, r0
   41e2c:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   41e30:	b920      	cbnz	r0, 41e3c <_dtoa_r+0x34>
   41e32:	4ba7      	ldr	r3, [pc, #668]	; (420d0 <_dtoa_r+0x2c8>)
   41e34:	21ea      	movs	r1, #234	; 0xea
   41e36:	48a7      	ldr	r0, [pc, #668]	; (420d4 <_dtoa_r+0x2cc>)
   41e38:	f013 f802 	bl	54e40 <__assert_func>
   41e3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
   41e40:	6007      	str	r7, [r0, #0]
   41e42:	60c7      	str	r7, [r0, #12]
   41e44:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   41e48:	6819      	ldr	r1, [r3, #0]
   41e4a:	b159      	cbz	r1, 41e64 <_dtoa_r+0x5c>
   41e4c:	685a      	ldr	r2, [r3, #4]
   41e4e:	2301      	movs	r3, #1
   41e50:	4658      	mov	r0, fp
   41e52:	4093      	lsls	r3, r2
   41e54:	604a      	str	r2, [r1, #4]
   41e56:	608b      	str	r3, [r1, #8]
   41e58:	f012 f934 	bl	540c4 <_Bfree>
   41e5c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   41e60:	2200      	movs	r2, #0
   41e62:	601a      	str	r2, [r3, #0]
   41e64:	1e2b      	subs	r3, r5, #0
   41e66:	bfb7      	itett	lt
   41e68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   41e6c:	2300      	movge	r3, #0
   41e6e:	2201      	movlt	r2, #1
   41e70:	9301      	strlt	r3, [sp, #4]
   41e72:	bfa8      	it	ge
   41e74:	6033      	strge	r3, [r6, #0]
   41e76:	9f01      	ldr	r7, [sp, #4]
   41e78:	4b97      	ldr	r3, [pc, #604]	; (420d8 <_dtoa_r+0x2d0>)
   41e7a:	bfb8      	it	lt
   41e7c:	6032      	strlt	r2, [r6, #0]
   41e7e:	43bb      	bics	r3, r7
   41e80:	d119      	bne.n	41eb6 <_dtoa_r+0xae>
   41e82:	f242 730f 	movw	r3, #9999	; 0x270f
   41e86:	9a12      	ldr	r2, [sp, #72]	; 0x48
   41e88:	6013      	str	r3, [r2, #0]
   41e8a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   41e8e:	4323      	orrs	r3, r4
   41e90:	f000 85db 	beq.w	42a4a <_dtoa_r+0xc42>
   41e94:	9b21      	ldr	r3, [sp, #132]	; 0x84
   41e96:	b953      	cbnz	r3, 41eae <_dtoa_r+0xa6>
   41e98:	4b90      	ldr	r3, [pc, #576]	; (420dc <_dtoa_r+0x2d4>)
   41e9a:	e021      	b.n	41ee0 <_dtoa_r+0xd8>
   41e9c:	4b90      	ldr	r3, [pc, #576]	; (420e0 <_dtoa_r+0x2d8>)
   41e9e:	9303      	str	r3, [sp, #12]
   41ea0:	3308      	adds	r3, #8
   41ea2:	9a21      	ldr	r2, [sp, #132]	; 0x84
   41ea4:	6013      	str	r3, [r2, #0]
   41ea6:	9803      	ldr	r0, [sp, #12]
   41ea8:	b017      	add	sp, #92	; 0x5c
   41eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41eae:	4b8b      	ldr	r3, [pc, #556]	; (420dc <_dtoa_r+0x2d4>)
   41eb0:	9303      	str	r3, [sp, #12]
   41eb2:	3303      	adds	r3, #3
   41eb4:	e7f5      	b.n	41ea2 <_dtoa_r+0x9a>
   41eb6:	ed9d 7b00 	vldr	d7, [sp]
   41eba:	2200      	movs	r2, #0
   41ebc:	2300      	movs	r3, #0
   41ebe:	ec51 0b17 	vmov	r0, r1, d7
   41ec2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   41ec6:	f7fe fd63 	bl	40990 <__aeabi_dcmpeq>
   41eca:	4680      	mov	r8, r0
   41ecc:	b150      	cbz	r0, 41ee4 <_dtoa_r+0xdc>
   41ece:	2301      	movs	r3, #1
   41ed0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   41ed2:	6013      	str	r3, [r2, #0]
   41ed4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   41ed6:	b113      	cbz	r3, 41ede <_dtoa_r+0xd6>
   41ed8:	4b82      	ldr	r3, [pc, #520]	; (420e4 <_dtoa_r+0x2dc>)
   41eda:	9a21      	ldr	r2, [sp, #132]	; 0x84
   41edc:	6013      	str	r3, [r2, #0]
   41ede:	4b82      	ldr	r3, [pc, #520]	; (420e8 <_dtoa_r+0x2e0>)
   41ee0:	9303      	str	r3, [sp, #12]
   41ee2:	e7e0      	b.n	41ea6 <_dtoa_r+0x9e>
   41ee4:	f3c7 560a 	ubfx	r6, r7, #20, #11
   41ee8:	aa14      	add	r2, sp, #80	; 0x50
   41eea:	a915      	add	r1, sp, #84	; 0x54
   41eec:	4658      	mov	r0, fp
   41eee:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   41ef2:	f012 fb6f 	bl	545d4 <__d2b>
   41ef6:	9002      	str	r0, [sp, #8]
   41ef8:	2e00      	cmp	r6, #0
   41efa:	d076      	beq.n	41fea <_dtoa_r+0x1e2>
   41efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   41efe:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   41f02:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   41f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
   41f0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   41f0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   41f12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   41f16:	4619      	mov	r1, r3
   41f18:	2200      	movs	r2, #0
   41f1a:	4b74      	ldr	r3, [pc, #464]	; (420ec <_dtoa_r+0x2e4>)
   41f1c:	f7fe f918 	bl	40150 <__aeabi_dsub>
   41f20:	a365      	add	r3, pc, #404	; (adr r3, 420b8 <_dtoa_r+0x2b0>)
   41f22:	e9d3 2300 	ldrd	r2, r3, [r3]
   41f26:	f7fe facb 	bl	404c0 <__aeabi_dmul>
   41f2a:	a365      	add	r3, pc, #404	; (adr r3, 420c0 <_dtoa_r+0x2b8>)
   41f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   41f30:	f7fe f910 	bl	40154 <__adddf3>
   41f34:	4604      	mov	r4, r0
   41f36:	460d      	mov	r5, r1
   41f38:	4630      	mov	r0, r6
   41f3a:	f7fe fa57 	bl	403ec <__aeabi_i2d>
   41f3e:	a362      	add	r3, pc, #392	; (adr r3, 420c8 <_dtoa_r+0x2c0>)
   41f40:	e9d3 2300 	ldrd	r2, r3, [r3]
   41f44:	f7fe fabc 	bl	404c0 <__aeabi_dmul>
   41f48:	4602      	mov	r2, r0
   41f4a:	460b      	mov	r3, r1
   41f4c:	4620      	mov	r0, r4
   41f4e:	4629      	mov	r1, r5
   41f50:	f7fe f900 	bl	40154 <__adddf3>
   41f54:	4604      	mov	r4, r0
   41f56:	460d      	mov	r5, r1
   41f58:	f7fe fd62 	bl	40a20 <__aeabi_d2iz>
   41f5c:	2200      	movs	r2, #0
   41f5e:	4607      	mov	r7, r0
   41f60:	2300      	movs	r3, #0
   41f62:	4620      	mov	r0, r4
   41f64:	4629      	mov	r1, r5
   41f66:	f7fe fd1d 	bl	409a4 <__aeabi_dcmplt>
   41f6a:	b140      	cbz	r0, 41f7e <_dtoa_r+0x176>
   41f6c:	4638      	mov	r0, r7
   41f6e:	f7fe fa3d 	bl	403ec <__aeabi_i2d>
   41f72:	4622      	mov	r2, r4
   41f74:	462b      	mov	r3, r5
   41f76:	f7fe fd0b 	bl	40990 <__aeabi_dcmpeq>
   41f7a:	b900      	cbnz	r0, 41f7e <_dtoa_r+0x176>
   41f7c:	3f01      	subs	r7, #1
   41f7e:	2f16      	cmp	r7, #22
   41f80:	d852      	bhi.n	42028 <_dtoa_r+0x220>
   41f82:	4b5b      	ldr	r3, [pc, #364]	; (420f0 <_dtoa_r+0x2e8>)
   41f84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   41f88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   41f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   41f90:	f7fe fd08 	bl	409a4 <__aeabi_dcmplt>
   41f94:	2800      	cmp	r0, #0
   41f96:	d049      	beq.n	4202c <_dtoa_r+0x224>
   41f98:	3f01      	subs	r7, #1
   41f9a:	2300      	movs	r3, #0
   41f9c:	9311      	str	r3, [sp, #68]	; 0x44
   41f9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   41fa0:	1b9b      	subs	r3, r3, r6
   41fa2:	1e5a      	subs	r2, r3, #1
   41fa4:	bf4c      	ite	mi
   41fa6:	f1c3 0301 	rsbmi	r3, r3, #1
   41faa:	2300      	movpl	r3, #0
   41fac:	9207      	str	r2, [sp, #28]
   41fae:	bf45      	ittet	mi
   41fb0:	9306      	strmi	r3, [sp, #24]
   41fb2:	2300      	movmi	r3, #0
   41fb4:	9306      	strpl	r3, [sp, #24]
   41fb6:	9307      	strmi	r3, [sp, #28]
   41fb8:	2f00      	cmp	r7, #0
   41fba:	db39      	blt.n	42030 <_dtoa_r+0x228>
   41fbc:	9b07      	ldr	r3, [sp, #28]
   41fbe:	9710      	str	r7, [sp, #64]	; 0x40
   41fc0:	443b      	add	r3, r7
   41fc2:	9307      	str	r3, [sp, #28]
   41fc4:	2300      	movs	r3, #0
   41fc6:	9309      	str	r3, [sp, #36]	; 0x24
   41fc8:	9b08      	ldr	r3, [sp, #32]
   41fca:	2b09      	cmp	r3, #9
   41fcc:	d866      	bhi.n	4209c <_dtoa_r+0x294>
   41fce:	2b05      	cmp	r3, #5
   41fd0:	bfc5      	ittet	gt
   41fd2:	3b04      	subgt	r3, #4
   41fd4:	2400      	movgt	r4, #0
   41fd6:	2401      	movle	r4, #1
   41fd8:	9308      	strgt	r3, [sp, #32]
   41fda:	9b08      	ldr	r3, [sp, #32]
   41fdc:	3b02      	subs	r3, #2
   41fde:	2b03      	cmp	r3, #3
   41fe0:	d867      	bhi.n	420b2 <_dtoa_r+0x2aa>
   41fe2:	e8df f003 	tbb	[pc, r3]
   41fe6:	3a2d      	.short	0x3a2d
   41fe8:	5938      	.short	0x5938
   41fea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
   41fee:	441e      	add	r6, r3
   41ff0:	f206 4332 	addw	r3, r6, #1074	; 0x432
   41ff4:	2b20      	cmp	r3, #32
   41ff6:	bfc9      	itett	gt
   41ff8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   41ffc:	f1c3 0320 	rsble	r3, r3, #32
   42000:	409f      	lslgt	r7, r3
   42002:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
   42006:	bfd8      	it	le
   42008:	fa04 f003 	lslle.w	r0, r4, r3
   4200c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   42010:	bfc4      	itt	gt
   42012:	fa24 f303 	lsrgt.w	r3, r4, r3
   42016:	ea47 0003 	orrgt.w	r0, r7, r3
   4201a:	f7fe f9d7 	bl	403cc <__aeabi_ui2d>
   4201e:	2201      	movs	r2, #1
   42020:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
   42024:	9213      	str	r2, [sp, #76]	; 0x4c
   42026:	e776      	b.n	41f16 <_dtoa_r+0x10e>
   42028:	2301      	movs	r3, #1
   4202a:	e7b7      	b.n	41f9c <_dtoa_r+0x194>
   4202c:	9011      	str	r0, [sp, #68]	; 0x44
   4202e:	e7b6      	b.n	41f9e <_dtoa_r+0x196>
   42030:	9b06      	ldr	r3, [sp, #24]
   42032:	1bdb      	subs	r3, r3, r7
   42034:	9306      	str	r3, [sp, #24]
   42036:	427b      	negs	r3, r7
   42038:	9309      	str	r3, [sp, #36]	; 0x24
   4203a:	2300      	movs	r3, #0
   4203c:	9310      	str	r3, [sp, #64]	; 0x40
   4203e:	e7c3      	b.n	41fc8 <_dtoa_r+0x1c0>
   42040:	2300      	movs	r3, #0
   42042:	930d      	str	r3, [sp, #52]	; 0x34
   42044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   42046:	2b00      	cmp	r3, #0
   42048:	dc56      	bgt.n	420f8 <_dtoa_r+0x2f0>
   4204a:	2301      	movs	r3, #1
   4204c:	4699      	mov	r9, r3
   4204e:	461a      	mov	r2, r3
   42050:	9304      	str	r3, [sp, #16]
   42052:	920c      	str	r2, [sp, #48]	; 0x30
   42054:	e00c      	b.n	42070 <_dtoa_r+0x268>
   42056:	2301      	movs	r3, #1
   42058:	e7f3      	b.n	42042 <_dtoa_r+0x23a>
   4205a:	2300      	movs	r3, #0
   4205c:	930d      	str	r3, [sp, #52]	; 0x34
   4205e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   42060:	18fb      	adds	r3, r7, r3
   42062:	f103 0901 	add.w	r9, r3, #1
   42066:	9304      	str	r3, [sp, #16]
   42068:	464b      	mov	r3, r9
   4206a:	2b01      	cmp	r3, #1
   4206c:	bfb8      	it	lt
   4206e:	2301      	movlt	r3, #1
   42070:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
   42074:	2100      	movs	r1, #0
   42076:	2204      	movs	r2, #4
   42078:	f102 0514 	add.w	r5, r2, #20
   4207c:	429d      	cmp	r5, r3
   4207e:	d93f      	bls.n	42100 <_dtoa_r+0x2f8>
   42080:	6041      	str	r1, [r0, #4]
   42082:	4658      	mov	r0, fp
   42084:	f011 ffde 	bl	54044 <_Balloc>
   42088:	9003      	str	r0, [sp, #12]
   4208a:	2800      	cmp	r0, #0
   4208c:	d13b      	bne.n	42106 <_dtoa_r+0x2fe>
   4208e:	4b19      	ldr	r3, [pc, #100]	; (420f4 <_dtoa_r+0x2ec>)
   42090:	4602      	mov	r2, r0
   42092:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   42096:	e6ce      	b.n	41e36 <_dtoa_r+0x2e>
   42098:	2301      	movs	r3, #1
   4209a:	e7df      	b.n	4205c <_dtoa_r+0x254>
   4209c:	2401      	movs	r4, #1
   4209e:	2300      	movs	r3, #0
   420a0:	940d      	str	r4, [sp, #52]	; 0x34
   420a2:	9308      	str	r3, [sp, #32]
   420a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   420a8:	2200      	movs	r2, #0
   420aa:	4699      	mov	r9, r3
   420ac:	9304      	str	r3, [sp, #16]
   420ae:	2312      	movs	r3, #18
   420b0:	e7cf      	b.n	42052 <_dtoa_r+0x24a>
   420b2:	2301      	movs	r3, #1
   420b4:	930d      	str	r3, [sp, #52]	; 0x34
   420b6:	e7f5      	b.n	420a4 <_dtoa_r+0x29c>
   420b8:	636f4361 	.word	0x636f4361
   420bc:	3fd287a7 	.word	0x3fd287a7
   420c0:	8b60c8b3 	.word	0x8b60c8b3
   420c4:	3fc68a28 	.word	0x3fc68a28
   420c8:	509f79fb 	.word	0x509f79fb
   420cc:	3fd34413 	.word	0x3fd34413
   420d0:	000609fe 	.word	0x000609fe
   420d4:	00060a15 	.word	0x00060a15
   420d8:	7ff00000 	.word	0x7ff00000
   420dc:	000609fa 	.word	0x000609fa
   420e0:	000609f1 	.word	0x000609f1
   420e4:	0005f328 	.word	0x0005f328
   420e8:	0005f327 	.word	0x0005f327
   420ec:	3ff80000 	.word	0x3ff80000
   420f0:	0005c050 	.word	0x0005c050
   420f4:	00060a71 	.word	0x00060a71
   420f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   420fa:	4699      	mov	r9, r3
   420fc:	9304      	str	r3, [sp, #16]
   420fe:	e7b7      	b.n	42070 <_dtoa_r+0x268>
   42100:	3101      	adds	r1, #1
   42102:	0052      	lsls	r2, r2, #1
   42104:	e7b8      	b.n	42078 <_dtoa_r+0x270>
   42106:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   4210a:	f1b9 0f0e 	cmp.w	r9, #14
   4210e:	9a03      	ldr	r2, [sp, #12]
   42110:	601a      	str	r2, [r3, #0]
   42112:	d86f      	bhi.n	421f4 <_dtoa_r+0x3ec>
   42114:	2c00      	cmp	r4, #0
   42116:	d06d      	beq.n	421f4 <_dtoa_r+0x3ec>
   42118:	2f00      	cmp	r7, #0
   4211a:	dd36      	ble.n	4218a <_dtoa_r+0x382>
   4211c:	f007 020f 	and.w	r2, r7, #15
   42120:	4ba0      	ldr	r3, [pc, #640]	; (423a4 <_dtoa_r+0x59c>)
   42122:	05f8      	lsls	r0, r7, #23
   42124:	ea4f 1427 	mov.w	r4, r7, asr #4
   42128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   4212c:	ed93 7b00 	vldr	d7, [r3]
   42130:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   42134:	d517      	bpl.n	42166 <_dtoa_r+0x35e>
   42136:	4b9c      	ldr	r3, [pc, #624]	; (423a8 <_dtoa_r+0x5a0>)
   42138:	f004 040f 	and.w	r4, r4, #15
   4213c:	f04f 0803 	mov.w	r8, #3
   42140:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   42144:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   42148:	f7fe fae4 	bl	40714 <__aeabi_ddiv>
   4214c:	e9cd 0100 	strd	r0, r1, [sp]
   42150:	4d95      	ldr	r5, [pc, #596]	; (423a8 <_dtoa_r+0x5a0>)
   42152:	b95c      	cbnz	r4, 4216c <_dtoa_r+0x364>
   42154:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   42158:	e9dd 0100 	ldrd	r0, r1, [sp]
   4215c:	f7fe fada 	bl	40714 <__aeabi_ddiv>
   42160:	e9cd 0100 	strd	r0, r1, [sp]
   42164:	e02b      	b.n	421be <_dtoa_r+0x3b6>
   42166:	f04f 0802 	mov.w	r8, #2
   4216a:	e7f1      	b.n	42150 <_dtoa_r+0x348>
   4216c:	07e1      	lsls	r1, r4, #31
   4216e:	d509      	bpl.n	42184 <_dtoa_r+0x37c>
   42170:	f108 0801 	add.w	r8, r8, #1
   42174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   42178:	e9d5 2300 	ldrd	r2, r3, [r5]
   4217c:	f7fe f9a0 	bl	404c0 <__aeabi_dmul>
   42180:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   42184:	1064      	asrs	r4, r4, #1
   42186:	3508      	adds	r5, #8
   42188:	e7e3      	b.n	42152 <_dtoa_r+0x34a>
   4218a:	f000 8107 	beq.w	4239c <_dtoa_r+0x594>
   4218e:	427c      	negs	r4, r7
   42190:	4b84      	ldr	r3, [pc, #528]	; (423a4 <_dtoa_r+0x59c>)
   42192:	4d85      	ldr	r5, [pc, #532]	; (423a8 <_dtoa_r+0x5a0>)
   42194:	f04f 0802 	mov.w	r8, #2
   42198:	f004 020f 	and.w	r2, r4, #15
   4219c:	1124      	asrs	r4, r4, #4
   4219e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   421a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   421a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   421aa:	f7fe f989 	bl	404c0 <__aeabi_dmul>
   421ae:	2300      	movs	r3, #0
   421b0:	e9cd 0100 	strd	r0, r1, [sp]
   421b4:	2c00      	cmp	r4, #0
   421b6:	f040 80e5 	bne.w	42384 <_dtoa_r+0x57c>
   421ba:	2b00      	cmp	r3, #0
   421bc:	d1d0      	bne.n	42160 <_dtoa_r+0x358>
   421be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   421c0:	e9dd 4500 	ldrd	r4, r5, [sp]
   421c4:	2b00      	cmp	r3, #0
   421c6:	f000 814c 	beq.w	42462 <_dtoa_r+0x65a>
   421ca:	2200      	movs	r2, #0
   421cc:	4b77      	ldr	r3, [pc, #476]	; (423ac <_dtoa_r+0x5a4>)
   421ce:	4620      	mov	r0, r4
   421d0:	4629      	mov	r1, r5
   421d2:	f7fe fbe7 	bl	409a4 <__aeabi_dcmplt>
   421d6:	2800      	cmp	r0, #0
   421d8:	f000 8143 	beq.w	42462 <_dtoa_r+0x65a>
   421dc:	f1b9 0f00 	cmp.w	r9, #0
   421e0:	f000 813f 	beq.w	42462 <_dtoa_r+0x65a>
   421e4:	9b04      	ldr	r3, [sp, #16]
   421e6:	2b00      	cmp	r3, #0
   421e8:	f300 80e4 	bgt.w	423b4 <_dtoa_r+0x5ac>
   421ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   421f0:	e9cd 3400 	strd	r3, r4, [sp]
   421f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   421f6:	2b00      	cmp	r3, #0
   421f8:	db02      	blt.n	42200 <_dtoa_r+0x3f8>
   421fa:	2f0e      	cmp	r7, #14
   421fc:	f340 8242 	ble.w	42684 <_dtoa_r+0x87c>
   42200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   42202:	2a00      	cmp	r2, #0
   42204:	f040 8267 	bne.w	426d6 <_dtoa_r+0x8ce>
   42208:	9c09      	ldr	r4, [sp, #36]	; 0x24
   4220a:	2500      	movs	r5, #0
   4220c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   42210:	f1b8 0f00 	cmp.w	r8, #0
   42214:	d00d      	beq.n	42232 <_dtoa_r+0x42a>
   42216:	9b07      	ldr	r3, [sp, #28]
   42218:	2b00      	cmp	r3, #0
   4221a:	dd0a      	ble.n	42232 <_dtoa_r+0x42a>
   4221c:	4543      	cmp	r3, r8
   4221e:	9a06      	ldr	r2, [sp, #24]
   42220:	bfa8      	it	ge
   42222:	4643      	movge	r3, r8
   42224:	1ad2      	subs	r2, r2, r3
   42226:	eba8 0803 	sub.w	r8, r8, r3
   4222a:	9206      	str	r2, [sp, #24]
   4222c:	9a07      	ldr	r2, [sp, #28]
   4222e:	1ad3      	subs	r3, r2, r3
   42230:	9307      	str	r3, [sp, #28]
   42232:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42234:	b30b      	cbz	r3, 4227a <_dtoa_r+0x472>
   42236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   42238:	2b00      	cmp	r3, #0
   4223a:	f000 82a6 	beq.w	4278a <_dtoa_r+0x982>
   4223e:	2c00      	cmp	r4, #0
   42240:	f000 82a1 	beq.w	42786 <_dtoa_r+0x97e>
   42244:	4629      	mov	r1, r5
   42246:	4622      	mov	r2, r4
   42248:	4658      	mov	r0, fp
   4224a:	f012 f865 	bl	54318 <__pow5mult>
   4224e:	9a02      	ldr	r2, [sp, #8]
   42250:	4601      	mov	r1, r0
   42252:	4605      	mov	r5, r0
   42254:	4658      	mov	r0, fp
   42256:	f011 ffb5 	bl	541c4 <__multiply>
   4225a:	9902      	ldr	r1, [sp, #8]
   4225c:	4606      	mov	r6, r0
   4225e:	4658      	mov	r0, fp
   42260:	f011 ff30 	bl	540c4 <_Bfree>
   42264:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42266:	1b1b      	subs	r3, r3, r4
   42268:	9309      	str	r3, [sp, #36]	; 0x24
   4226a:	f000 8291 	beq.w	42790 <_dtoa_r+0x988>
   4226e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   42270:	4631      	mov	r1, r6
   42272:	4658      	mov	r0, fp
   42274:	f012 f850 	bl	54318 <__pow5mult>
   42278:	9002      	str	r0, [sp, #8]
   4227a:	2101      	movs	r1, #1
   4227c:	4658      	mov	r0, fp
   4227e:	f011 ff8b 	bl	54198 <__i2b>
   42282:	9b10      	ldr	r3, [sp, #64]	; 0x40
   42284:	4604      	mov	r4, r0
   42286:	2b00      	cmp	r3, #0
   42288:	f000 8284 	beq.w	42794 <_dtoa_r+0x98c>
   4228c:	461a      	mov	r2, r3
   4228e:	4601      	mov	r1, r0
   42290:	4658      	mov	r0, fp
   42292:	f012 f841 	bl	54318 <__pow5mult>
   42296:	9b08      	ldr	r3, [sp, #32]
   42298:	4604      	mov	r4, r0
   4229a:	2b01      	cmp	r3, #1
   4229c:	dc03      	bgt.n	422a6 <_dtoa_r+0x49e>
   4229e:	9b00      	ldr	r3, [sp, #0]
   422a0:	2b00      	cmp	r3, #0
   422a2:	f000 827c 	beq.w	4279e <_dtoa_r+0x996>
   422a6:	2600      	movs	r6, #0
   422a8:	6923      	ldr	r3, [r4, #16]
   422aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   422ae:	6918      	ldr	r0, [r3, #16]
   422b0:	f019 f8f3 	bl	5b49a <__hi0bits>
   422b4:	f1c0 0020 	rsb	r0, r0, #32
   422b8:	9610      	str	r6, [sp, #64]	; 0x40
   422ba:	9b07      	ldr	r3, [sp, #28]
   422bc:	4418      	add	r0, r3
   422be:	f010 001f 	ands.w	r0, r0, #31
   422c2:	f000 8291 	beq.w	427e8 <_dtoa_r+0x9e0>
   422c6:	f1c0 0320 	rsb	r3, r0, #32
   422ca:	2b04      	cmp	r3, #4
   422cc:	f340 8281 	ble.w	427d2 <_dtoa_r+0x9ca>
   422d0:	f1c0 001c 	rsb	r0, r0, #28
   422d4:	9b06      	ldr	r3, [sp, #24]
   422d6:	4403      	add	r3, r0
   422d8:	4480      	add	r8, r0
   422da:	9306      	str	r3, [sp, #24]
   422dc:	9b07      	ldr	r3, [sp, #28]
   422de:	4403      	add	r3, r0
   422e0:	9307      	str	r3, [sp, #28]
   422e2:	9b06      	ldr	r3, [sp, #24]
   422e4:	2b00      	cmp	r3, #0
   422e6:	dd05      	ble.n	422f4 <_dtoa_r+0x4ec>
   422e8:	461a      	mov	r2, r3
   422ea:	9902      	ldr	r1, [sp, #8]
   422ec:	4658      	mov	r0, fp
   422ee:	f012 f86d 	bl	543cc <__lshift>
   422f2:	9002      	str	r0, [sp, #8]
   422f4:	9b07      	ldr	r3, [sp, #28]
   422f6:	2b00      	cmp	r3, #0
   422f8:	dd05      	ble.n	42306 <_dtoa_r+0x4fe>
   422fa:	4621      	mov	r1, r4
   422fc:	461a      	mov	r2, r3
   422fe:	4658      	mov	r0, fp
   42300:	f012 f864 	bl	543cc <__lshift>
   42304:	4604      	mov	r4, r0
   42306:	9b11      	ldr	r3, [sp, #68]	; 0x44
   42308:	2b00      	cmp	r3, #0
   4230a:	f000 8276 	beq.w	427fa <_dtoa_r+0x9f2>
   4230e:	4621      	mov	r1, r4
   42310:	9802      	ldr	r0, [sp, #8]
   42312:	f019 f911 	bl	5b538 <__mcmp>
   42316:	2800      	cmp	r0, #0
   42318:	f280 826f 	bge.w	427fa <_dtoa_r+0x9f2>
   4231c:	2300      	movs	r3, #0
   4231e:	220a      	movs	r2, #10
   42320:	9902      	ldr	r1, [sp, #8]
   42322:	4658      	mov	r0, fp
   42324:	f011 fef0 	bl	54108 <__multadd>
   42328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   4232a:	1e7e      	subs	r6, r7, #1
   4232c:	9002      	str	r0, [sp, #8]
   4232e:	2b00      	cmp	r3, #0
   42330:	f000 825c 	beq.w	427ec <_dtoa_r+0x9e4>
   42334:	2300      	movs	r3, #0
   42336:	4629      	mov	r1, r5
   42338:	220a      	movs	r2, #10
   4233a:	4658      	mov	r0, fp
   4233c:	f011 fee4 	bl	54108 <__multadd>
   42340:	9b04      	ldr	r3, [sp, #16]
   42342:	4605      	mov	r5, r0
   42344:	2b00      	cmp	r3, #0
   42346:	dc03      	bgt.n	42350 <_dtoa_r+0x548>
   42348:	9b08      	ldr	r3, [sp, #32]
   4234a:	2b02      	cmp	r3, #2
   4234c:	f300 825e 	bgt.w	4280c <_dtoa_r+0xa04>
   42350:	f1b8 0f00 	cmp.w	r8, #0
   42354:	dd05      	ble.n	42362 <_dtoa_r+0x55a>
   42356:	4629      	mov	r1, r5
   42358:	4642      	mov	r2, r8
   4235a:	4658      	mov	r0, fp
   4235c:	f012 f836 	bl	543cc <__lshift>
   42360:	4605      	mov	r5, r0
   42362:	9b10      	ldr	r3, [sp, #64]	; 0x40
   42364:	2b00      	cmp	r3, #0
   42366:	f000 82d0 	beq.w	4290a <_dtoa_r+0xb02>
   4236a:	6869      	ldr	r1, [r5, #4]
   4236c:	4658      	mov	r0, fp
   4236e:	f011 fe69 	bl	54044 <_Balloc>
   42372:	4607      	mov	r7, r0
   42374:	2800      	cmp	r0, #0
   42376:	f040 827f 	bne.w	42878 <_dtoa_r+0xa70>
   4237a:	4b0d      	ldr	r3, [pc, #52]	; (423b0 <_dtoa_r+0x5a8>)
   4237c:	4602      	mov	r2, r0
   4237e:	f240 21ea 	movw	r1, #746	; 0x2ea
   42382:	e558      	b.n	41e36 <_dtoa_r+0x2e>
   42384:	07e2      	lsls	r2, r4, #31
   42386:	d506      	bpl.n	42396 <_dtoa_r+0x58e>
   42388:	f108 0801 	add.w	r8, r8, #1
   4238c:	e9d5 2300 	ldrd	r2, r3, [r5]
   42390:	f7fe f896 	bl	404c0 <__aeabi_dmul>
   42394:	2301      	movs	r3, #1
   42396:	1064      	asrs	r4, r4, #1
   42398:	3508      	adds	r5, #8
   4239a:	e70b      	b.n	421b4 <_dtoa_r+0x3ac>
   4239c:	f04f 0802 	mov.w	r8, #2
   423a0:	e70d      	b.n	421be <_dtoa_r+0x3b6>
   423a2:	bf00      	nop
   423a4:	0005c050 	.word	0x0005c050
   423a8:	0005c028 	.word	0x0005c028
   423ac:	3ff00000 	.word	0x3ff00000
   423b0:	00060a71 	.word	0x00060a71
   423b4:	4620      	mov	r0, r4
   423b6:	2200      	movs	r2, #0
   423b8:	4bac      	ldr	r3, [pc, #688]	; (4266c <_dtoa_r+0x864>)
   423ba:	4629      	mov	r1, r5
   423bc:	f7fe f880 	bl	404c0 <__aeabi_dmul>
   423c0:	1e7e      	subs	r6, r7, #1
   423c2:	f108 0801 	add.w	r8, r8, #1
   423c6:	9c04      	ldr	r4, [sp, #16]
   423c8:	e9cd 0100 	strd	r0, r1, [sp]
   423cc:	4640      	mov	r0, r8
   423ce:	f7fe f80d 	bl	403ec <__aeabi_i2d>
   423d2:	e9dd 2300 	ldrd	r2, r3, [sp]
   423d6:	f7fe f873 	bl	404c0 <__aeabi_dmul>
   423da:	4ba5      	ldr	r3, [pc, #660]	; (42670 <_dtoa_r+0x868>)
   423dc:	2200      	movs	r2, #0
   423de:	f7fd feb9 	bl	40154 <__adddf3>
   423e2:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   423e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   423ea:	930f      	str	r3, [sp, #60]	; 0x3c
   423ec:	2c00      	cmp	r4, #0
   423ee:	d13b      	bne.n	42468 <_dtoa_r+0x660>
   423f0:	2200      	movs	r2, #0
   423f2:	4ba0      	ldr	r3, [pc, #640]	; (42674 <_dtoa_r+0x86c>)
   423f4:	e9dd 0100 	ldrd	r0, r1, [sp]
   423f8:	f7fd feaa 	bl	40150 <__aeabi_dsub>
   423fc:	4602      	mov	r2, r0
   423fe:	460b      	mov	r3, r1
   42400:	e9cd 2300 	strd	r2, r3, [sp]
   42404:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   42408:	f7fe faea 	bl	409e0 <__aeabi_dcmpgt>
   4240c:	2800      	cmp	r0, #0
   4240e:	f040 8157 	bne.w	426c0 <_dtoa_r+0x8b8>
   42412:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
   42416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   4241a:	e9dd 0100 	ldrd	r0, r1, [sp]
   4241e:	f7fe fac1 	bl	409a4 <__aeabi_dcmplt>
   42422:	2800      	cmp	r0, #0
   42424:	f43f aee2 	beq.w	421ec <_dtoa_r+0x3e4>
   42428:	2400      	movs	r4, #0
   4242a:	4625      	mov	r5, r4
   4242c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   4242e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   42432:	43de      	mvns	r6, r3
   42434:	f04f 0800 	mov.w	r8, #0
   42438:	4621      	mov	r1, r4
   4243a:	4658      	mov	r0, fp
   4243c:	f011 fe42 	bl	540c4 <_Bfree>
   42440:	2d00      	cmp	r5, #0
   42442:	f000 80a9 	beq.w	42598 <_dtoa_r+0x790>
   42446:	f1b8 0f00 	cmp.w	r8, #0
   4244a:	d005      	beq.n	42458 <_dtoa_r+0x650>
   4244c:	45a8      	cmp	r8, r5
   4244e:	d003      	beq.n	42458 <_dtoa_r+0x650>
   42450:	4641      	mov	r1, r8
   42452:	4658      	mov	r0, fp
   42454:	f011 fe36 	bl	540c4 <_Bfree>
   42458:	4629      	mov	r1, r5
   4245a:	4658      	mov	r0, fp
   4245c:	f011 fe32 	bl	540c4 <_Bfree>
   42460:	e09a      	b.n	42598 <_dtoa_r+0x790>
   42462:	463e      	mov	r6, r7
   42464:	464c      	mov	r4, r9
   42466:	e7b1      	b.n	423cc <_dtoa_r+0x5c4>
   42468:	4b83      	ldr	r3, [pc, #524]	; (42678 <_dtoa_r+0x870>)
   4246a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   4246e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   42472:	9b03      	ldr	r3, [sp, #12]
   42474:	441c      	add	r4, r3
   42476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   42478:	2b00      	cmp	r3, #0
   4247a:	d04a      	beq.n	42512 <_dtoa_r+0x70a>
   4247c:	4602      	mov	r2, r0
   4247e:	460b      	mov	r3, r1
   42480:	2000      	movs	r0, #0
   42482:	497e      	ldr	r1, [pc, #504]	; (4267c <_dtoa_r+0x874>)
   42484:	f7fe f946 	bl	40714 <__aeabi_ddiv>
   42488:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   4248c:	f7fd fe60 	bl	40150 <__aeabi_dsub>
   42490:	f8dd a00c 	ldr.w	sl, [sp, #12]
   42494:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   42498:	e9dd 0100 	ldrd	r0, r1, [sp]
   4249c:	f7fe fac0 	bl	40a20 <__aeabi_d2iz>
   424a0:	4605      	mov	r5, r0
   424a2:	f7fd ffa3 	bl	403ec <__aeabi_i2d>
   424a6:	4602      	mov	r2, r0
   424a8:	3530      	adds	r5, #48	; 0x30
   424aa:	460b      	mov	r3, r1
   424ac:	e9dd 0100 	ldrd	r0, r1, [sp]
   424b0:	f7fd fe4e 	bl	40150 <__aeabi_dsub>
   424b4:	f80a 5b01 	strb.w	r5, [sl], #1
   424b8:	4602      	mov	r2, r0
   424ba:	460b      	mov	r3, r1
   424bc:	e9cd 0100 	strd	r0, r1, [sp]
   424c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   424c4:	f7fe fa8c 	bl	409e0 <__aeabi_dcmpgt>
   424c8:	2800      	cmp	r0, #0
   424ca:	d165      	bne.n	42598 <_dtoa_r+0x790>
   424cc:	2000      	movs	r0, #0
   424ce:	496c      	ldr	r1, [pc, #432]	; (42680 <_dtoa_r+0x878>)
   424d0:	e9dd 2300 	ldrd	r2, r3, [sp]
   424d4:	f7fd fe3c 	bl	40150 <__aeabi_dsub>
   424d8:	4602      	mov	r2, r0
   424da:	460b      	mov	r3, r1
   424dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   424e0:	f7fe fa7e 	bl	409e0 <__aeabi_dcmpgt>
   424e4:	2800      	cmp	r0, #0
   424e6:	f040 810d 	bne.w	42704 <_dtoa_r+0x8fc>
   424ea:	45a2      	cmp	sl, r4
   424ec:	f000 80ea 	beq.w	426c4 <_dtoa_r+0x8bc>
   424f0:	2200      	movs	r2, #0
   424f2:	4b5e      	ldr	r3, [pc, #376]	; (4266c <_dtoa_r+0x864>)
   424f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   424f8:	f7fd ffe2 	bl	404c0 <__aeabi_dmul>
   424fc:	2200      	movs	r2, #0
   424fe:	4b5b      	ldr	r3, [pc, #364]	; (4266c <_dtoa_r+0x864>)
   42500:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   42504:	e9dd 0100 	ldrd	r0, r1, [sp]
   42508:	f7fd ffda 	bl	404c0 <__aeabi_dmul>
   4250c:	e9cd 0100 	strd	r0, r1, [sp]
   42510:	e7c2      	b.n	42498 <_dtoa_r+0x690>
   42512:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   42516:	f7fd ffd3 	bl	404c0 <__aeabi_dmul>
   4251a:	46a0      	mov	r8, r4
   4251c:	f8dd a00c 	ldr.w	sl, [sp, #12]
   42520:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   42524:	e9dd 0100 	ldrd	r0, r1, [sp]
   42528:	f7fe fa7a 	bl	40a20 <__aeabi_d2iz>
   4252c:	4605      	mov	r5, r0
   4252e:	f7fd ff5d 	bl	403ec <__aeabi_i2d>
   42532:	4602      	mov	r2, r0
   42534:	3530      	adds	r5, #48	; 0x30
   42536:	460b      	mov	r3, r1
   42538:	e9dd 0100 	ldrd	r0, r1, [sp]
   4253c:	f7fd fe08 	bl	40150 <__aeabi_dsub>
   42540:	f80a 5b01 	strb.w	r5, [sl], #1
   42544:	4602      	mov	r2, r0
   42546:	460b      	mov	r3, r1
   42548:	45a2      	cmp	sl, r4
   4254a:	e9cd 2300 	strd	r2, r3, [sp]
   4254e:	f04f 0200 	mov.w	r2, #0
   42552:	d123      	bne.n	4259c <_dtoa_r+0x794>
   42554:	4b49      	ldr	r3, [pc, #292]	; (4267c <_dtoa_r+0x874>)
   42556:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   4255a:	f7fd fdfb 	bl	40154 <__adddf3>
   4255e:	4602      	mov	r2, r0
   42560:	460b      	mov	r3, r1
   42562:	e9dd 0100 	ldrd	r0, r1, [sp]
   42566:	f7fe fa3b 	bl	409e0 <__aeabi_dcmpgt>
   4256a:	2800      	cmp	r0, #0
   4256c:	f040 80ca 	bne.w	42704 <_dtoa_r+0x8fc>
   42570:	2000      	movs	r0, #0
   42572:	4942      	ldr	r1, [pc, #264]	; (4267c <_dtoa_r+0x874>)
   42574:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   42578:	f7fd fdea 	bl	40150 <__aeabi_dsub>
   4257c:	4602      	mov	r2, r0
   4257e:	460b      	mov	r3, r1
   42580:	e9dd 0100 	ldrd	r0, r1, [sp]
   42584:	f7fe fa0e 	bl	409a4 <__aeabi_dcmplt>
   42588:	b170      	cbz	r0, 425a8 <_dtoa_r+0x7a0>
   4258a:	46c2      	mov	sl, r8
   4258c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   42590:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   42594:	2b30      	cmp	r3, #48	; 0x30
   42596:	d0f8      	beq.n	4258a <_dtoa_r+0x782>
   42598:	4637      	mov	r7, r6
   4259a:	e055      	b.n	42648 <_dtoa_r+0x840>
   4259c:	4b33      	ldr	r3, [pc, #204]	; (4266c <_dtoa_r+0x864>)
   4259e:	f7fd ff8f 	bl	404c0 <__aeabi_dmul>
   425a2:	e9cd 0100 	strd	r0, r1, [sp]
   425a6:	e7bd      	b.n	42524 <_dtoa_r+0x71c>
   425a8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   425ac:	e9cd 3400 	strd	r3, r4, [sp]
   425b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   425b2:	2b00      	cmp	r3, #0
   425b4:	f6ff ae28 	blt.w	42208 <_dtoa_r+0x400>
   425b8:	2f0e      	cmp	r7, #14
   425ba:	f73f ae25 	bgt.w	42208 <_dtoa_r+0x400>
   425be:	4b2e      	ldr	r3, [pc, #184]	; (42678 <_dtoa_r+0x870>)
   425c0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   425c4:	ed93 7b00 	vldr	d7, [r3]
   425c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   425ca:	2b00      	cmp	r3, #0
   425cc:	ed8d 7b04 	vstr	d7, [sp, #16]
   425d0:	da02      	bge.n	425d8 <_dtoa_r+0x7d0>
   425d2:	f1b9 0f00 	cmp.w	r9, #0
   425d6:	d064      	beq.n	426a2 <_dtoa_r+0x89a>
   425d8:	f8dd a00c 	ldr.w	sl, [sp, #12]
   425dc:	e9dd 4500 	ldrd	r4, r5, [sp]
   425e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   425e4:	4620      	mov	r0, r4
   425e6:	4629      	mov	r1, r5
   425e8:	f7fe f894 	bl	40714 <__aeabi_ddiv>
   425ec:	f7fe fa18 	bl	40a20 <__aeabi_d2iz>
   425f0:	4606      	mov	r6, r0
   425f2:	f7fd fefb 	bl	403ec <__aeabi_i2d>
   425f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   425fa:	f7fd ff61 	bl	404c0 <__aeabi_dmul>
   425fe:	4602      	mov	r2, r0
   42600:	4620      	mov	r0, r4
   42602:	f106 0430 	add.w	r4, r6, #48	; 0x30
   42606:	460b      	mov	r3, r1
   42608:	4629      	mov	r1, r5
   4260a:	f7fd fda1 	bl	40150 <__aeabi_dsub>
   4260e:	f80a 4b01 	strb.w	r4, [sl], #1
   42612:	9c03      	ldr	r4, [sp, #12]
   42614:	4602      	mov	r2, r0
   42616:	460b      	mov	r3, r1
   42618:	ebaa 0404 	sub.w	r4, sl, r4
   4261c:	45a1      	cmp	r9, r4
   4261e:	f040 8082 	bne.w	42726 <_dtoa_r+0x91e>
   42622:	f7fd fd97 	bl	40154 <__adddf3>
   42626:	4604      	mov	r4, r0
   42628:	460d      	mov	r5, r1
   4262a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   4262e:	f7fe f9d7 	bl	409e0 <__aeabi_dcmpgt>
   42632:	2800      	cmp	r0, #0
   42634:	d165      	bne.n	42702 <_dtoa_r+0x8fa>
   42636:	4620      	mov	r0, r4
   42638:	4629      	mov	r1, r5
   4263a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   4263e:	f7fe f9a7 	bl	40990 <__aeabi_dcmpeq>
   42642:	b108      	cbz	r0, 42648 <_dtoa_r+0x840>
   42644:	07f3      	lsls	r3, r6, #31
   42646:	d45c      	bmi.n	42702 <_dtoa_r+0x8fa>
   42648:	9902      	ldr	r1, [sp, #8]
   4264a:	4658      	mov	r0, fp
   4264c:	f011 fd3a 	bl	540c4 <_Bfree>
   42650:	2300      	movs	r3, #0
   42652:	3701      	adds	r7, #1
   42654:	f88a 3000 	strb.w	r3, [sl]
   42658:	9b12      	ldr	r3, [sp, #72]	; 0x48
   4265a:	601f      	str	r7, [r3, #0]
   4265c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   4265e:	2b00      	cmp	r3, #0
   42660:	f43f ac21 	beq.w	41ea6 <_dtoa_r+0x9e>
   42664:	f8c3 a000 	str.w	sl, [r3]
   42668:	e41d      	b.n	41ea6 <_dtoa_r+0x9e>
   4266a:	bf00      	nop
   4266c:	40240000 	.word	0x40240000
   42670:	401c0000 	.word	0x401c0000
   42674:	40140000 	.word	0x40140000
   42678:	0005c050 	.word	0x0005c050
   4267c:	3fe00000 	.word	0x3fe00000
   42680:	3ff00000 	.word	0x3ff00000
   42684:	4ba2      	ldr	r3, [pc, #648]	; (42910 <_dtoa_r+0xb08>)
   42686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   4268a:	ed93 7b00 	vldr	d7, [r3]
   4268e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   42690:	2b00      	cmp	r3, #0
   42692:	ed8d 7b04 	vstr	d7, [sp, #16]
   42696:	da9f      	bge.n	425d8 <_dtoa_r+0x7d0>
   42698:	f1b9 0f00 	cmp.w	r9, #0
   4269c:	dc9c      	bgt.n	425d8 <_dtoa_r+0x7d0>
   4269e:	f47f aec3 	bne.w	42428 <_dtoa_r+0x620>
   426a2:	2200      	movs	r2, #0
   426a4:	4b9b      	ldr	r3, [pc, #620]	; (42914 <_dtoa_r+0xb0c>)
   426a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   426aa:	f7fd ff09 	bl	404c0 <__aeabi_dmul>
   426ae:	e9dd 2300 	ldrd	r2, r3, [sp]
   426b2:	f7fe f98b 	bl	409cc <__aeabi_dcmpge>
   426b6:	4604      	mov	r4, r0
   426b8:	2800      	cmp	r0, #0
   426ba:	f47f aeb5 	bne.w	42428 <_dtoa_r+0x620>
   426be:	463e      	mov	r6, r7
   426c0:	4625      	mov	r5, r4
   426c2:	e0b4      	b.n	4282e <_dtoa_r+0xa26>
   426c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   426c8:	e9cd 3400 	strd	r3, r4, [sp]
   426cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   426ce:	2b00      	cmp	r3, #0
   426d0:	db01      	blt.n	426d6 <_dtoa_r+0x8ce>
   426d2:	2f0e      	cmp	r7, #14
   426d4:	ddd6      	ble.n	42684 <_dtoa_r+0x87c>
   426d6:	9a08      	ldr	r2, [sp, #32]
   426d8:	2a01      	cmp	r2, #1
   426da:	dc36      	bgt.n	4274a <_dtoa_r+0x942>
   426dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   426de:	b382      	cbz	r2, 42742 <_dtoa_r+0x93a>
   426e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
   426e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   426e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   426ea:	9a06      	ldr	r2, [sp, #24]
   426ec:	2101      	movs	r1, #1
   426ee:	4658      	mov	r0, fp
   426f0:	441a      	add	r2, r3
   426f2:	9206      	str	r2, [sp, #24]
   426f4:	9a07      	ldr	r2, [sp, #28]
   426f6:	441a      	add	r2, r3
   426f8:	9207      	str	r2, [sp, #28]
   426fa:	f011 fd4d 	bl	54198 <__i2b>
   426fe:	4605      	mov	r5, r0
   42700:	e586      	b.n	42210 <_dtoa_r+0x408>
   42702:	463e      	mov	r6, r7
   42704:	4653      	mov	r3, sl
   42706:	469a      	mov	sl, r3
   42708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   4270c:	2a39      	cmp	r2, #57	; 0x39
   4270e:	d106      	bne.n	4271e <_dtoa_r+0x916>
   42710:	9a03      	ldr	r2, [sp, #12]
   42712:	429a      	cmp	r2, r3
   42714:	d1f7      	bne.n	42706 <_dtoa_r+0x8fe>
   42716:	2230      	movs	r2, #48	; 0x30
   42718:	9903      	ldr	r1, [sp, #12]
   4271a:	3601      	adds	r6, #1
   4271c:	700a      	strb	r2, [r1, #0]
   4271e:	781a      	ldrb	r2, [r3, #0]
   42720:	3201      	adds	r2, #1
   42722:	701a      	strb	r2, [r3, #0]
   42724:	e738      	b.n	42598 <_dtoa_r+0x790>
   42726:	2200      	movs	r2, #0
   42728:	4b7b      	ldr	r3, [pc, #492]	; (42918 <_dtoa_r+0xb10>)
   4272a:	f7fd fec9 	bl	404c0 <__aeabi_dmul>
   4272e:	2200      	movs	r2, #0
   42730:	2300      	movs	r3, #0
   42732:	4604      	mov	r4, r0
   42734:	460d      	mov	r5, r1
   42736:	f7fe f92b 	bl	40990 <__aeabi_dcmpeq>
   4273a:	2800      	cmp	r0, #0
   4273c:	f43f af50 	beq.w	425e0 <_dtoa_r+0x7d8>
   42740:	e782      	b.n	42648 <_dtoa_r+0x840>
   42742:	9b14      	ldr	r3, [sp, #80]	; 0x50
   42744:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   42748:	e7cc      	b.n	426e4 <_dtoa_r+0x8dc>
   4274a:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   4274e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42750:	42a3      	cmp	r3, r4
   42752:	db08      	blt.n	42766 <_dtoa_r+0x95e>
   42754:	f1b9 0f00 	cmp.w	r9, #0
   42758:	eba3 0404 	sub.w	r4, r3, r4
   4275c:	db0e      	blt.n	4277c <_dtoa_r+0x974>
   4275e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   42762:	464b      	mov	r3, r9
   42764:	e7c1      	b.n	426ea <_dtoa_r+0x8e2>
   42766:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42768:	9a10      	ldr	r2, [sp, #64]	; 0x40
   4276a:	1ae3      	subs	r3, r4, r3
   4276c:	9409      	str	r4, [sp, #36]	; 0x24
   4276e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   42772:	2400      	movs	r4, #0
   42774:	441a      	add	r2, r3
   42776:	464b      	mov	r3, r9
   42778:	9210      	str	r2, [sp, #64]	; 0x40
   4277a:	e7b6      	b.n	426ea <_dtoa_r+0x8e2>
   4277c:	9b06      	ldr	r3, [sp, #24]
   4277e:	eba3 0809 	sub.w	r8, r3, r9
   42782:	2300      	movs	r3, #0
   42784:	e7b1      	b.n	426ea <_dtoa_r+0x8e2>
   42786:	9e02      	ldr	r6, [sp, #8]
   42788:	e571      	b.n	4226e <_dtoa_r+0x466>
   4278a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   4278c:	9902      	ldr	r1, [sp, #8]
   4278e:	e570      	b.n	42272 <_dtoa_r+0x46a>
   42790:	9602      	str	r6, [sp, #8]
   42792:	e572      	b.n	4227a <_dtoa_r+0x472>
   42794:	9b08      	ldr	r3, [sp, #32]
   42796:	2b01      	cmp	r3, #1
   42798:	dc17      	bgt.n	427ca <_dtoa_r+0x9c2>
   4279a:	9b00      	ldr	r3, [sp, #0]
   4279c:	b9ab      	cbnz	r3, 427ca <_dtoa_r+0x9c2>
   4279e:	9b01      	ldr	r3, [sp, #4]
   427a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
   427a4:	b99b      	cbnz	r3, 427ce <_dtoa_r+0x9c6>
   427a6:	9b01      	ldr	r3, [sp, #4]
   427a8:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
   427ac:	0d36      	lsrs	r6, r6, #20
   427ae:	0536      	lsls	r6, r6, #20
   427b0:	b136      	cbz	r6, 427c0 <_dtoa_r+0x9b8>
   427b2:	9b06      	ldr	r3, [sp, #24]
   427b4:	2601      	movs	r6, #1
   427b6:	3301      	adds	r3, #1
   427b8:	9306      	str	r3, [sp, #24]
   427ba:	9b07      	ldr	r3, [sp, #28]
   427bc:	3301      	adds	r3, #1
   427be:	9307      	str	r3, [sp, #28]
   427c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   427c2:	2b00      	cmp	r3, #0
   427c4:	f47f ad70 	bne.w	422a8 <_dtoa_r+0x4a0>
   427c8:	9610      	str	r6, [sp, #64]	; 0x40
   427ca:	2001      	movs	r0, #1
   427cc:	e575      	b.n	422ba <_dtoa_r+0x4b2>
   427ce:	2600      	movs	r6, #0
   427d0:	e7f6      	b.n	427c0 <_dtoa_r+0x9b8>
   427d2:	f43f ad86 	beq.w	422e2 <_dtoa_r+0x4da>
   427d6:	331c      	adds	r3, #28
   427d8:	9a06      	ldr	r2, [sp, #24]
   427da:	441a      	add	r2, r3
   427dc:	4498      	add	r8, r3
   427de:	9206      	str	r2, [sp, #24]
   427e0:	9a07      	ldr	r2, [sp, #28]
   427e2:	441a      	add	r2, r3
   427e4:	9207      	str	r2, [sp, #28]
   427e6:	e57c      	b.n	422e2 <_dtoa_r+0x4da>
   427e8:	4603      	mov	r3, r0
   427ea:	e7f4      	b.n	427d6 <_dtoa_r+0x9ce>
   427ec:	9b04      	ldr	r3, [sp, #16]
   427ee:	2b00      	cmp	r3, #0
   427f0:	dc2b      	bgt.n	4284a <_dtoa_r+0xa42>
   427f2:	9b08      	ldr	r3, [sp, #32]
   427f4:	2b02      	cmp	r3, #2
   427f6:	dc09      	bgt.n	4280c <_dtoa_r+0xa04>
   427f8:	e027      	b.n	4284a <_dtoa_r+0xa42>
   427fa:	f1b9 0f00 	cmp.w	r9, #0
   427fe:	dc1d      	bgt.n	4283c <_dtoa_r+0xa34>
   42800:	9b08      	ldr	r3, [sp, #32]
   42802:	2b02      	cmp	r3, #2
   42804:	dd1a      	ble.n	4283c <_dtoa_r+0xa34>
   42806:	463e      	mov	r6, r7
   42808:	f8cd 9010 	str.w	r9, [sp, #16]
   4280c:	9b04      	ldr	r3, [sp, #16]
   4280e:	2b00      	cmp	r3, #0
   42810:	f47f ae0c 	bne.w	4242c <_dtoa_r+0x624>
   42814:	4621      	mov	r1, r4
   42816:	2205      	movs	r2, #5
   42818:	4658      	mov	r0, fp
   4281a:	f011 fc75 	bl	54108 <__multadd>
   4281e:	4601      	mov	r1, r0
   42820:	4604      	mov	r4, r0
   42822:	9802      	ldr	r0, [sp, #8]
   42824:	f018 fe88 	bl	5b538 <__mcmp>
   42828:	2800      	cmp	r0, #0
   4282a:	f77f adff 	ble.w	4242c <_dtoa_r+0x624>
   4282e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   42832:	2331      	movs	r3, #49	; 0x31
   42834:	3601      	adds	r6, #1
   42836:	f80a 3b01 	strb.w	r3, [sl], #1
   4283a:	e5fb      	b.n	42434 <_dtoa_r+0x62c>
   4283c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   4283e:	463e      	mov	r6, r7
   42840:	f8cd 9010 	str.w	r9, [sp, #16]
   42844:	2b00      	cmp	r3, #0
   42846:	f47f ad83 	bne.w	42350 <_dtoa_r+0x548>
   4284a:	9f03      	ldr	r7, [sp, #12]
   4284c:	4621      	mov	r1, r4
   4284e:	9802      	ldr	r0, [sp, #8]
   42850:	f018 fd84 	bl	5b35c <quorem>
   42854:	9b03      	ldr	r3, [sp, #12]
   42856:	f100 0930 	add.w	r9, r0, #48	; 0x30
   4285a:	9a04      	ldr	r2, [sp, #16]
   4285c:	f807 9b01 	strb.w	r9, [r7], #1
   42860:	1afb      	subs	r3, r7, r3
   42862:	429a      	cmp	r2, r3
   42864:	f340 80cb 	ble.w	429fe <_dtoa_r+0xbf6>
   42868:	2300      	movs	r3, #0
   4286a:	220a      	movs	r2, #10
   4286c:	9902      	ldr	r1, [sp, #8]
   4286e:	4658      	mov	r0, fp
   42870:	f011 fc4a 	bl	54108 <__multadd>
   42874:	9002      	str	r0, [sp, #8]
   42876:	e7e9      	b.n	4284c <_dtoa_r+0xa44>
   42878:	692a      	ldr	r2, [r5, #16]
   4287a:	f105 010c 	add.w	r1, r5, #12
   4287e:	300c      	adds	r0, #12
   42880:	3202      	adds	r2, #2
   42882:	0092      	lsls	r2, r2, #2
   42884:	f018 fae9 	bl	5ae5a <memcpy>
   42888:	2201      	movs	r2, #1
   4288a:	4639      	mov	r1, r7
   4288c:	4658      	mov	r0, fp
   4288e:	f011 fd9d 	bl	543cc <__lshift>
   42892:	9b03      	ldr	r3, [sp, #12]
   42894:	46a8      	mov	r8, r5
   42896:	4605      	mov	r5, r0
   42898:	f103 0a01 	add.w	sl, r3, #1
   4289c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   428a0:	4413      	add	r3, r2
   428a2:	9307      	str	r3, [sp, #28]
   428a4:	9b00      	ldr	r3, [sp, #0]
   428a6:	f003 0301 	and.w	r3, r3, #1
   428aa:	9309      	str	r3, [sp, #36]	; 0x24
   428ac:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   428b0:	4621      	mov	r1, r4
   428b2:	9802      	ldr	r0, [sp, #8]
   428b4:	9304      	str	r3, [sp, #16]
   428b6:	f018 fd51 	bl	5b35c <quorem>
   428ba:	4641      	mov	r1, r8
   428bc:	9006      	str	r0, [sp, #24]
   428be:	f100 0930 	add.w	r9, r0, #48	; 0x30
   428c2:	9802      	ldr	r0, [sp, #8]
   428c4:	f018 fe38 	bl	5b538 <__mcmp>
   428c8:	462a      	mov	r2, r5
   428ca:	4621      	mov	r1, r4
   428cc:	4607      	mov	r7, r0
   428ce:	4658      	mov	r0, fp
   428d0:	f011 fde8 	bl	544a4 <__mdiff>
   428d4:	68c2      	ldr	r2, [r0, #12]
   428d6:	4601      	mov	r1, r0
   428d8:	b302      	cbz	r2, 4291c <_dtoa_r+0xb14>
   428da:	4658      	mov	r0, fp
   428dc:	f011 fbf2 	bl	540c4 <_Bfree>
   428e0:	2f00      	cmp	r7, #0
   428e2:	da3a      	bge.n	4295a <_dtoa_r+0xb52>
   428e4:	2201      	movs	r2, #1
   428e6:	9902      	ldr	r1, [sp, #8]
   428e8:	4658      	mov	r0, fp
   428ea:	f011 fd6f 	bl	543cc <__lshift>
   428ee:	4621      	mov	r1, r4
   428f0:	9002      	str	r0, [sp, #8]
   428f2:	f018 fe21 	bl	5b538 <__mcmp>
   428f6:	2800      	cmp	r0, #0
   428f8:	dc03      	bgt.n	42902 <_dtoa_r+0xafa>
   428fa:	d129      	bne.n	42950 <_dtoa_r+0xb48>
   428fc:	f019 0f01 	tst.w	r9, #1
   42900:	d026      	beq.n	42950 <_dtoa_r+0xb48>
   42902:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   42906:	d11d      	bne.n	42944 <_dtoa_r+0xb3c>
   42908:	e032      	b.n	42970 <_dtoa_r+0xb68>
   4290a:	4628      	mov	r0, r5
   4290c:	e7c1      	b.n	42892 <_dtoa_r+0xa8a>
   4290e:	bf00      	nop
   42910:	0005c050 	.word	0x0005c050
   42914:	40140000 	.word	0x40140000
   42918:	40240000 	.word	0x40240000
   4291c:	900a      	str	r0, [sp, #40]	; 0x28
   4291e:	9802      	ldr	r0, [sp, #8]
   42920:	f018 fe0a 	bl	5b538 <__mcmp>
   42924:	990a      	ldr	r1, [sp, #40]	; 0x28
   42926:	900c      	str	r0, [sp, #48]	; 0x30
   42928:	4658      	mov	r0, fp
   4292a:	f011 fbcb 	bl	540c4 <_Bfree>
   4292e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   42930:	bb5a      	cbnz	r2, 4298a <_dtoa_r+0xb82>
   42932:	9b08      	ldr	r3, [sp, #32]
   42934:	b953      	cbnz	r3, 4294c <_dtoa_r+0xb44>
   42936:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42938:	b943      	cbnz	r3, 4294c <_dtoa_r+0xb44>
   4293a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   4293e:	d017      	beq.n	42970 <_dtoa_r+0xb68>
   42940:	2f00      	cmp	r7, #0
   42942:	dd05      	ble.n	42950 <_dtoa_r+0xb48>
   42944:	9b06      	ldr	r3, [sp, #24]
   42946:	f103 0931 	add.w	r9, r3, #49	; 0x31
   4294a:	e001      	b.n	42950 <_dtoa_r+0xb48>
   4294c:	2f00      	cmp	r7, #0
   4294e:	da2a      	bge.n	429a6 <_dtoa_r+0xb9e>
   42950:	f8dd a010 	ldr.w	sl, [sp, #16]
   42954:	f80a 9b01 	strb.w	r9, [sl], #1
   42958:	e56e      	b.n	42438 <_dtoa_r+0x630>
   4295a:	9b08      	ldr	r3, [sp, #32]
   4295c:	433b      	orrs	r3, r7
   4295e:	d104      	bne.n	4296a <_dtoa_r+0xb62>
   42960:	9b00      	ldr	r3, [sp, #0]
   42962:	f003 0301 	and.w	r3, r3, #1
   42966:	2b00      	cmp	r3, #0
   42968:	d0bc      	beq.n	428e4 <_dtoa_r+0xadc>
   4296a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   4296e:	d136      	bne.n	429de <_dtoa_r+0xbd6>
   42970:	9f04      	ldr	r7, [sp, #16]
   42972:	2339      	movs	r3, #57	; 0x39
   42974:	f807 3b01 	strb.w	r3, [r7], #1
   42978:	46ba      	mov	sl, r7
   4297a:	3f01      	subs	r7, #1
   4297c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   42980:	2b39      	cmp	r3, #57	; 0x39
   42982:	d05a      	beq.n	42a3a <_dtoa_r+0xc32>
   42984:	3301      	adds	r3, #1
   42986:	703b      	strb	r3, [r7, #0]
   42988:	e556      	b.n	42438 <_dtoa_r+0x630>
   4298a:	2f00      	cmp	r7, #0
   4298c:	db06      	blt.n	4299c <_dtoa_r+0xb94>
   4298e:	9b08      	ldr	r3, [sp, #32]
   42990:	433b      	orrs	r3, r7
   42992:	d106      	bne.n	429a2 <_dtoa_r+0xb9a>
   42994:	9b00      	ldr	r3, [sp, #0]
   42996:	f003 0301 	and.w	r3, r3, #1
   4299a:	b913      	cbnz	r3, 429a2 <_dtoa_r+0xb9a>
   4299c:	2a00      	cmp	r2, #0
   4299e:	dca1      	bgt.n	428e4 <_dtoa_r+0xadc>
   429a0:	e7d6      	b.n	42950 <_dtoa_r+0xb48>
   429a2:	2a00      	cmp	r2, #0
   429a4:	dce1      	bgt.n	4296a <_dtoa_r+0xb62>
   429a6:	9b07      	ldr	r3, [sp, #28]
   429a8:	4657      	mov	r7, sl
   429aa:	f80a 9c01 	strb.w	r9, [sl, #-1]
   429ae:	4553      	cmp	r3, sl
   429b0:	d02e      	beq.n	42a10 <_dtoa_r+0xc08>
   429b2:	2300      	movs	r3, #0
   429b4:	220a      	movs	r2, #10
   429b6:	9902      	ldr	r1, [sp, #8]
   429b8:	4658      	mov	r0, fp
   429ba:	f011 fba5 	bl	54108 <__multadd>
   429be:	45a8      	cmp	r8, r5
   429c0:	9002      	str	r0, [sp, #8]
   429c2:	f04f 0300 	mov.w	r3, #0
   429c6:	f04f 020a 	mov.w	r2, #10
   429ca:	4641      	mov	r1, r8
   429cc:	4658      	mov	r0, fp
   429ce:	d10b      	bne.n	429e8 <_dtoa_r+0xbe0>
   429d0:	f011 fb9a 	bl	54108 <__multadd>
   429d4:	4680      	mov	r8, r0
   429d6:	4605      	mov	r5, r0
   429d8:	f10a 0a01 	add.w	sl, sl, #1
   429dc:	e766      	b.n	428ac <_dtoa_r+0xaa4>
   429de:	f8dd a010 	ldr.w	sl, [sp, #16]
   429e2:	f109 0901 	add.w	r9, r9, #1
   429e6:	e7b5      	b.n	42954 <_dtoa_r+0xb4c>
   429e8:	f011 fb8e 	bl	54108 <__multadd>
   429ec:	4629      	mov	r1, r5
   429ee:	4680      	mov	r8, r0
   429f0:	2300      	movs	r3, #0
   429f2:	220a      	movs	r2, #10
   429f4:	4658      	mov	r0, fp
   429f6:	f011 fb87 	bl	54108 <__multadd>
   429fa:	4605      	mov	r5, r0
   429fc:	e7ec      	b.n	429d8 <_dtoa_r+0xbd0>
   429fe:	9b04      	ldr	r3, [sp, #16]
   42a00:	f04f 0800 	mov.w	r8, #0
   42a04:	2b00      	cmp	r3, #0
   42a06:	bfcc      	ite	gt
   42a08:	461f      	movgt	r7, r3
   42a0a:	2701      	movle	r7, #1
   42a0c:	9b03      	ldr	r3, [sp, #12]
   42a0e:	441f      	add	r7, r3
   42a10:	2201      	movs	r2, #1
   42a12:	9902      	ldr	r1, [sp, #8]
   42a14:	4658      	mov	r0, fp
   42a16:	f011 fcd9 	bl	543cc <__lshift>
   42a1a:	4621      	mov	r1, r4
   42a1c:	9002      	str	r0, [sp, #8]
   42a1e:	f018 fd8b 	bl	5b538 <__mcmp>
   42a22:	2800      	cmp	r0, #0
   42a24:	dca8      	bgt.n	42978 <_dtoa_r+0xb70>
   42a26:	d102      	bne.n	42a2e <_dtoa_r+0xc26>
   42a28:	f019 0f01 	tst.w	r9, #1
   42a2c:	d1a4      	bne.n	42978 <_dtoa_r+0xb70>
   42a2e:	46ba      	mov	sl, r7
   42a30:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
   42a34:	2b30      	cmp	r3, #48	; 0x30
   42a36:	d0fa      	beq.n	42a2e <_dtoa_r+0xc26>
   42a38:	e4fe      	b.n	42438 <_dtoa_r+0x630>
   42a3a:	9b03      	ldr	r3, [sp, #12]
   42a3c:	42bb      	cmp	r3, r7
   42a3e:	d19b      	bne.n	42978 <_dtoa_r+0xb70>
   42a40:	2331      	movs	r3, #49	; 0x31
   42a42:	9a03      	ldr	r2, [sp, #12]
   42a44:	3601      	adds	r6, #1
   42a46:	7013      	strb	r3, [r2, #0]
   42a48:	e4f6      	b.n	42438 <_dtoa_r+0x630>
   42a4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   42a4c:	2b00      	cmp	r3, #0
   42a4e:	f47f aa25 	bne.w	41e9c <_dtoa_r+0x94>
   42a52:	4b01      	ldr	r3, [pc, #4]	; (42a58 <_dtoa_r+0xc50>)
   42a54:	f7ff ba44 	b.w	41ee0 <_dtoa_r+0xd8>
   42a58:	000609f1 	.word	0x000609f1

00042a5c <AppendCharacter.isra.0>:
 * @param zfp Pointer to file object
 *
 */
static inline void fs_file_t_init(struct fs_file_t *zfp)
{
	*zfp = (struct fs_file_t){ 0 };
   42a5c:	2300      	movs	r3, #0

	return res;
}

//append a single character to a file
static int AppendCharacter(const char *fname, char c)
   42a5e:	b530      	push	{r4, r5, lr}
   42a60:	b085      	sub	sp, #20
   42a62:	4604      	mov	r4, r0
   42a64:	460d      	mov	r5, r1

	//set variable to hold status of file
	int fileStatus;

	//open file in append and write mode
	fileStatus = fs_open(&firp,fname,FS_O_APPEND | FS_O_WRITE);
   42a66:	2222      	movs	r2, #34	; 0x22
   42a68:	4601      	mov	r1, r0
   42a6a:	a801      	add	r0, sp, #4
   42a6c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   42a70:	9303      	str	r3, [sp, #12]
   42a72:	f004 f8af 	bl	46bd4 <fs_open>
	if(fileStatus)
   42a76:	b118      	cbz	r0, 42a80 <AppendCharacter.isra.0+0x24>
    {
        printk("error open %s\n", fname);
   42a78:	4621      	mov	r1, r4
   42a7a:	4819      	ldr	r0, [pc, #100]	; (42ae0 <AppendCharacter.isra.0+0x84>)
   42a7c:	f012 fe4b 	bl	55716 <printk>
    }

	//convert characters to valid characters
	char cc;
	if( (c >= 'a' && c <= 'z') 
   42a80:	f025 0320 	bic.w	r3, r5, #32
   42a84:	3b41      	subs	r3, #65	; 0x41
   42a86:	2b19      	cmp	r3, #25
   42a88:	d907      	bls.n	42a9a <AppendCharacter.isra.0+0x3e>
		||  (c >= 'A' && c <= 'Z') 
		||  (c >= '0' && c <= '9')
   42a8a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   42a8e:	2b09      	cmp	r3, #9
   42a90:	d903      	bls.n	42a9a <AppendCharacter.isra.0+0x3e>
		||  (c == '\n') ||  (c == '_'))
   42a92:	2d0a      	cmp	r5, #10
   42a94:	bf0c      	ite	eq
   42a96:	250a      	moveq	r5, #10
   42a98:	255f      	movne	r5, #95	; 0x5f
	}
	
	

	//write the character to the file
	fileStatus = fs_write(&firp,&cc,1);
   42a9a:	2201      	movs	r2, #1
   42a9c:	f10d 0103 	add.w	r1, sp, #3
   42aa0:	a801      	add	r0, sp, #4
   42aa2:	f88d 5003 	strb.w	r5, [sp, #3]
   42aa6:	f004 f925 	bl	46cf4 <fs_write>
    if(fileStatus < 0)
   42aaa:	2800      	cmp	r0, #0
   42aac:	da0d      	bge.n	42aca <AppendCharacter.isra.0+0x6e>
    {
        printk("other error write %s\n", fname);
   42aae:	4621      	mov	r1, r4
   42ab0:	480c      	ldr	r0, [pc, #48]	; (42ae4 <AppendCharacter.isra.0+0x88>)
	{
		printk("file not opened or closed %s\n", fname);
	}
	else if(fileStatus == ENOTSUP)
	{
		printk("not implemented by underlying FS %s\n", fname);
   42ab2:	f012 fe30 	bl	55716 <printk>
	}

	//close the file
	fileStatus = fs_close(&firp);
   42ab6:	a801      	add	r0, sp, #4
   42ab8:	f004 f8f8 	bl	46cac <fs_close>
    if(fileStatus)
   42abc:	b118      	cbz	r0, 42ac6 <AppendCharacter.isra.0+0x6a>
    {
        printk("error close%s!\n", fname);
   42abe:	4621      	mov	r1, r4
   42ac0:	4809      	ldr	r0, [pc, #36]	; (42ae8 <AppendCharacter.isra.0+0x8c>)
   42ac2:	f012 fe28 	bl	55716 <printk>
    }

return 0;
	//end
}
   42ac6:	b005      	add	sp, #20
   42ac8:	bd30      	pop	{r4, r5, pc}
	else if(fileStatus == EBADF)
   42aca:	2809      	cmp	r0, #9
   42acc:	d102      	bne.n	42ad4 <AppendCharacter.isra.0+0x78>
		printk("file not opened or closed %s\n", fname);
   42ace:	4621      	mov	r1, r4
   42ad0:	4806      	ldr	r0, [pc, #24]	; (42aec <AppendCharacter.isra.0+0x90>)
   42ad2:	e7ee      	b.n	42ab2 <AppendCharacter.isra.0+0x56>
	else if(fileStatus == ENOTSUP)
   42ad4:	2886      	cmp	r0, #134	; 0x86
   42ad6:	d1ee      	bne.n	42ab6 <AppendCharacter.isra.0+0x5a>
		printk("not implemented by underlying FS %s\n", fname);
   42ad8:	4621      	mov	r1, r4
   42ada:	4805      	ldr	r0, [pc, #20]	; (42af0 <AppendCharacter.isra.0+0x94>)
   42adc:	e7e9      	b.n	42ab2 <AppendCharacter.isra.0+0x56>
   42ade:	bf00      	nop
   42ae0:	0005ccaa 	.word	0x0005ccaa
   42ae4:	0005ccb9 	.word	0x0005ccb9
   42ae8:	0005cd12 	.word	0x0005cd12
   42aec:	0005cccf 	.word	0x0005cccf
   42af0:	0005cced 	.word	0x0005cced

00042af4 <start_cell_measurements>:
    }
    printk("Modem response:\n%s", response);
}

static void start_cell_measurements(void)
{
   42af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   42af6:	4b0b      	ldr	r3, [pc, #44]	; (42b24 <start_cell_measurements+0x30>)
   42af8:	e8d3 3faf 	lda	r3, [r3]
	int err;

	if (!atomic_get(&connected)) {
   42afc:	b173      	cbz	r3, 42b1c <start_cell_measurements+0x28>
		return;
	}

	err = lte_lc_neighbor_cell_measurement(NULL);
   42afe:	2000      	movs	r0, #0
   42b00:	f009 f9c4 	bl	4be8c <lte_lc_neighbor_cell_measurement>
	if (err) {
   42b04:	b150      	cbz	r0, 42b1c <start_cell_measurements+0x28>
		LOG_ERR("Failed to initiate neighbor cell measurements, error: %d",
   42b06:	4b08      	ldr	r3, [pc, #32]	; (42b28 <start_cell_measurements+0x34>)
   42b08:	9003      	str	r0, [sp, #12]
   42b0a:	9302      	str	r3, [sp, #8]
   42b0c:	2300      	movs	r3, #0
   42b0e:	2201      	movs	r2, #1
   42b10:	4618      	mov	r0, r3
   42b12:	e9cd 3300 	strd	r3, r3, [sp]
   42b16:	4905      	ldr	r1, [pc, #20]	; (42b2c <start_cell_measurements+0x38>)
   42b18:	f012 fd45 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
			err);
	}
}
   42b1c:	b005      	add	sp, #20
   42b1e:	f85d fb04 	ldr.w	pc, [sp], #4
   42b22:	bf00      	nop
   42b24:	2001b28c 	.word	0x2001b28c
   42b28:	0005cd22 	.word	0x0005cd22
   42b2c:	0005bf14 	.word	0x0005bf14

00042b30 <lte_handler>:
{
   42b30:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (evt->type) {
   42b32:	7803      	ldrb	r3, [r0, #0]
{
   42b34:	4604      	mov	r4, r0
   42b36:	b097      	sub	sp, #92	; 0x5c
	switch (evt->type) {
   42b38:	2b07      	cmp	r3, #7
   42b3a:	d82c      	bhi.n	42b96 <lte_handler+0x66>
   42b3c:	e8df f003 	tbb	[pc, r3]
   42b40:	4b2d1d04 	.word	0x4b2d1d04
   42b44:	7e2b6e68 	.word	0x7e2b6e68
		if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   42b48:	7a03      	ldrb	r3, [r0, #8]
   42b4a:	2b01      	cmp	r3, #1
   42b4c:	d003      	beq.n	42b56 <lte_handler+0x26>
   42b4e:	2b05      	cmp	r3, #5
   42b50:	d121      	bne.n	42b96 <lte_handler+0x66>
		LOG_INF("Network registration status: %s",
   42b52:	4b57      	ldr	r3, [pc, #348]	; (42cb0 <lte_handler+0x180>)
   42b54:	e000      	b.n	42b58 <lte_handler+0x28>
   42b56:	4b57      	ldr	r3, [pc, #348]	; (42cb4 <lte_handler+0x184>)
   42b58:	9303      	str	r3, [sp, #12]
   42b5a:	4b57      	ldr	r3, [pc, #348]	; (42cb8 <lte_handler+0x188>)
   42b5c:	2203      	movs	r2, #3
   42b5e:	9302      	str	r3, [sp, #8]
   42b60:	2300      	movs	r3, #0
   42b62:	4956      	ldr	r1, [pc, #344]	; (42cbc <lte_handler+0x18c>)
   42b64:	4618      	mov	r0, r3
   42b66:	e9cd 3300 	strd	r3, r3, [sp]
   42b6a:	f012 fd1c 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   42b6e:	4854      	ldr	r0, [pc, #336]	; (42cc0 <lte_handler+0x190>)
}
   42b70:	b017      	add	sp, #92	; 0x5c
   42b72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   42b76:	f00f bd73 	b.w	52660 <z_impl_k_sem_give>
		LOG_INF("PSM parameter update: TAU: %d, Active time: %d",
   42b7a:	68c3      	ldr	r3, [r0, #12]
   42b7c:	9304      	str	r3, [sp, #16]
   42b7e:	6883      	ldr	r3, [r0, #8]
   42b80:	9303      	str	r3, [sp, #12]
   42b82:	4b50      	ldr	r3, [pc, #320]	; (42cc4 <lte_handler+0x194>)
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   42b84:	9302      	str	r3, [sp, #8]
   42b86:	2300      	movs	r3, #0
   42b88:	2203      	movs	r2, #3
   42b8a:	4618      	mov	r0, r3
   42b8c:	e9cd 3300 	strd	r3, r3, [sp]
   42b90:	494a      	ldr	r1, [pc, #296]	; (42cbc <lte_handler+0x18c>)
   42b92:	f012 fd08 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
}
   42b96:	b017      	add	sp, #92	; 0x5c
   42b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = snprintk(log_buf, sizeof(log_buf),
   42b9a:	6900      	ldr	r0, [r0, #16]
   42b9c:	f7fd fc38 	bl	40410 <__aeabi_f2d>
   42ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   42ba4:	68e0      	ldr	r0, [r4, #12]
   42ba6:	f7fd fc33 	bl	40410 <__aeabi_f2d>
   42baa:	ad07      	add	r5, sp, #28
   42bac:	e9cd 0100 	strd	r0, r1, [sp]
   42bb0:	4a45      	ldr	r2, [pc, #276]	; (42cc8 <lte_handler+0x198>)
   42bb2:	213c      	movs	r1, #60	; 0x3c
   42bb4:	4628      	mov	r0, r5
   42bb6:	f012 fdbb 	bl	55730 <snprintk>
		if (len > 0) {
   42bba:	2800      	cmp	r0, #0
   42bbc:	ddeb      	ble.n	42b96 <lte_handler+0x66>
			LOG_INF("%s", log_buf);
   42bbe:	4b43      	ldr	r3, [pc, #268]	; (42ccc <lte_handler+0x19c>)
   42bc0:	9503      	str	r5, [sp, #12]
		LOG_INF("Active LTE mode changed: %s",
   42bc2:	9302      	str	r3, [sp, #8]
   42bc4:	2300      	movs	r3, #0
   42bc6:	2203      	movs	r2, #3
   42bc8:	4618      	mov	r0, r3
   42bca:	e9cd 3300 	strd	r3, r3, [sp]
   42bce:	493b      	ldr	r1, [pc, #236]	; (42cbc <lte_handler+0x18c>)
   42bd0:	f012 fce9 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   42bd4:	e7df      	b.n	42b96 <lte_handler+0x66>
		LOG_INF("RRC mode: %s",
   42bd6:	7a01      	ldrb	r1, [r0, #8]
   42bd8:	4a3d      	ldr	r2, [pc, #244]	; (42cd0 <lte_handler+0x1a0>)
   42bda:	4b3e      	ldr	r3, [pc, #248]	; (42cd4 <lte_handler+0x1a4>)
   42bdc:	2901      	cmp	r1, #1
   42bde:	bf08      	it	eq
   42be0:	4613      	moveq	r3, r2
   42be2:	9303      	str	r3, [sp, #12]
   42be4:	4b3c      	ldr	r3, [pc, #240]	; (42cd8 <lte_handler+0x1a8>)
   42be6:	2203      	movs	r2, #3
   42be8:	9302      	str	r3, [sp, #8]
   42bea:	2300      	movs	r3, #0
   42bec:	4933      	ldr	r1, [pc, #204]	; (42cbc <lte_handler+0x18c>)
   42bee:	4618      	mov	r0, r3
   42bf0:	e9cd 3300 	strd	r3, r3, [sp]
   42bf4:	f012 fcd7 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
		if (evt->rrc_mode == LTE_LC_RRC_MODE_IDLE) {
   42bf8:	7a23      	ldrb	r3, [r4, #8]
   42bfa:	b90b      	cbnz	r3, 42c00 <lte_handler+0xd0>
   42bfc:	4837      	ldr	r0, [pc, #220]	; (42cdc <lte_handler+0x1ac>)
   42bfe:	e7b7      	b.n	42b70 <lte_handler+0x40>
	return z_impl_k_sem_take(sem, timeout);
   42c00:	2200      	movs	r2, #0
   42c02:	2300      	movs	r3, #0
   42c04:	4835      	ldr	r0, [pc, #212]	; (42cdc <lte_handler+0x1ac>)
}
   42c06:	b017      	add	sp, #92	; 0x5c
   42c08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   42c0c:	f00f bd4e 	b.w	526ac <z_impl_k_sem_take>
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   42c10:	6943      	ldr	r3, [r0, #20]
   42c12:	9304      	str	r3, [sp, #16]
   42c14:	6903      	ldr	r3, [r0, #16]
   42c16:	9303      	str	r3, [sp, #12]
   42c18:	4b31      	ldr	r3, [pc, #196]	; (42ce0 <lte_handler+0x1b0>)
   42c1a:	e7b3      	b.n	42b84 <lte_handler+0x54>
		LOG_INF("Active LTE mode changed: %s",
   42c1c:	7a02      	ldrb	r2, [r0, #8]
   42c1e:	b14a      	cbz	r2, 42c34 <lte_handler+0x104>
   42c20:	2a07      	cmp	r2, #7
   42c22:	d009      	beq.n	42c38 <lte_handler+0x108>
   42c24:	4b2f      	ldr	r3, [pc, #188]	; (42ce4 <lte_handler+0x1b4>)
   42c26:	4930      	ldr	r1, [pc, #192]	; (42ce8 <lte_handler+0x1b8>)
   42c28:	2a09      	cmp	r2, #9
   42c2a:	bf08      	it	eq
   42c2c:	460b      	moveq	r3, r1
   42c2e:	9303      	str	r3, [sp, #12]
   42c30:	4b2e      	ldr	r3, [pc, #184]	; (42cec <lte_handler+0x1bc>)
   42c32:	e7c6      	b.n	42bc2 <lte_handler+0x92>
   42c34:	4b2e      	ldr	r3, [pc, #184]	; (42cf0 <lte_handler+0x1c0>)
   42c36:	e7fa      	b.n	42c2e <lte_handler+0xfe>
   42c38:	4b2e      	ldr	r3, [pc, #184]	; (42cf4 <lte_handler+0x1c4>)
   42c3a:	e7f8      	b.n	42c2e <lte_handler+0xfe>
		LOG_INF("Neighbor cell measurements received");
   42c3c:	4b2e      	ldr	r3, [pc, #184]	; (42cf8 <lte_handler+0x1c8>)
   42c3e:	2203      	movs	r2, #3
   42c40:	9302      	str	r3, [sp, #8]
   42c42:	2300      	movs	r3, #0
   42c44:	491d      	ldr	r1, [pc, #116]	; (42cbc <lte_handler+0x18c>)
   42c46:	4618      	mov	r0, r3
   42c48:	e9cd 3300 	strd	r3, r3, [sp]
   42c4c:	f012 fcab 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
		if (evt->cells_info.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   42c50:	6923      	ldr	r3, [r4, #16]
   42c52:	3301      	adds	r3, #1
   42c54:	d09f      	beq.n	42b96 <lte_handler+0x66>
		memcpy(&cell_data.current_cell,
   42c56:	4a29      	ldr	r2, [pc, #164]	; (42cfc <lte_handler+0x1cc>)
   42c58:	f104 0308 	add.w	r3, r4, #8
   42c5c:	4616      	mov	r6, r2
   42c5e:	f104 0738 	add.w	r7, r4, #56	; 0x38
   42c62:	4615      	mov	r5, r2
   42c64:	6818      	ldr	r0, [r3, #0]
   42c66:	6859      	ldr	r1, [r3, #4]
   42c68:	3308      	adds	r3, #8
   42c6a:	c503      	stmia	r5!, {r0, r1}
   42c6c:	42bb      	cmp	r3, r7
   42c6e:	462a      	mov	r2, r5
   42c70:	d1f7      	bne.n	42c62 <lte_handler+0x132>
		if (evt->cells_info.ncells_count > 0 && evt->cells_info.neighbor_cells) {
   42c72:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   42c76:	b14a      	cbz	r2, 42c8c <lte_handler+0x15c>
   42c78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   42c7a:	b1b1      	cbz	r1, 42caa <lte_handler+0x17a>
			memcpy(neighbor_cells,
   42c7c:	0112      	lsls	r2, r2, #4
   42c7e:	f44f 7388 	mov.w	r3, #272	; 0x110
   42c82:	481f      	ldr	r0, [pc, #124]	; (42d00 <lte_handler+0x1d0>)
   42c84:	f018 f8f6 	bl	5ae74 <__memcpy_chk>
			cell_data.ncells_count = evt->cells_info.ncells_count;
   42c88:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		LOG_INF("Neighbor cells found: %d", cell_data.ncells_count);
   42c8c:	4b1d      	ldr	r3, [pc, #116]	; (42d04 <lte_handler+0x1d4>)
			cell_data.ncells_count = 0;
   42c8e:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
		LOG_INF("Neighbor cells found: %d", cell_data.ncells_count);
   42c92:	9302      	str	r3, [sp, #8]
   42c94:	2300      	movs	r3, #0
   42c96:	9203      	str	r2, [sp, #12]
   42c98:	4618      	mov	r0, r3
   42c9a:	2203      	movs	r2, #3
   42c9c:	e9cd 3300 	strd	r3, r3, [sp]
   42ca0:	4906      	ldr	r1, [pc, #24]	; (42cbc <lte_handler+0x18c>)
   42ca2:	f012 fc80 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   42ca6:	4818      	ldr	r0, [pc, #96]	; (42d08 <lte_handler+0x1d8>)
   42ca8:	e762      	b.n	42b70 <lte_handler+0x40>
   42caa:	460a      	mov	r2, r1
   42cac:	e7ee      	b.n	42c8c <lte_handler+0x15c>
   42cae:	bf00      	nop
   42cb0:	0005cd74 	.word	0x0005cd74
   42cb4:	0005cd5b 	.word	0x0005cd5b
   42cb8:	0005cdb1 	.word	0x0005cdb1
   42cbc:	0005bf14 	.word	0x0005bf14
   42cc0:	2001ac00 	.word	0x2001ac00
   42cc4:	0005cdd1 	.word	0x0005cdd1
   42cc8:	0005ce00 	.word	0x0005ce00
   42ccc:	0005d298 	.word	0x0005d298
   42cd0:	0005cd88 	.word	0x0005cd88
   42cd4:	0005cd92 	.word	0x0005cd92
   42cd8:	0005ce29 	.word	0x0005ce29
   42cdc:	2001ac18 	.word	0x2001ac18
   42ce0:	0005ce36 	.word	0x0005ce36
   42ce4:	0005cda2 	.word	0x0005cda2
   42ce8:	0005cdaa 	.word	0x0005cdaa
   42cec:	0005ce67 	.word	0x0005ce67
   42cf0:	0005cd9d 	.word	0x0005cd9d
   42cf4:	0005cd97 	.word	0x0005cd97
   42cf8:	0005ce83 	.word	0x0005ce83
   42cfc:	2001a500 	.word	0x2001a500
   42d00:	2001b17c 	.word	0x2001b17c
   42d04:	0005cea7 	.word	0x0005cea7
   42d08:	2001abe8 	.word	0x2001abe8

00042d0c <Tower_Read_Fail_Change>:
{
   42d0c:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   42d0e:	480e      	ldr	r0, [pc, #56]	; (42d48 <Tower_Read_Fail_Change+0x3c>)
   42d10:	f017 fc92 	bl	5a638 <z_device_is_ready>
	if (!device_is_ready(Tower_Read_Fail.port)) 
   42d14:	b920      	cbnz	r0, 42d20 <Tower_Read_Fail_Change+0x14>
		printk("Tower Read Fail Button not ready!\n");
   42d16:	480d      	ldr	r0, [pc, #52]	; (42d4c <Tower_Read_Fail_Change+0x40>)
}
   42d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Tower Read Fail Button not configured!\n");
   42d1c:	f012 bcfb 	b.w	55716 <printk>
	ret = gpio_pin_configure_dt(&Tower_Read_Fail, GPIO_OUTPUT_ACTIVE);
   42d20:	480b      	ldr	r0, [pc, #44]	; (42d50 <Tower_Read_Fail_Change+0x44>)
   42d22:	f012 fc26 	bl	55572 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) 
   42d26:	2800      	cmp	r0, #0
   42d28:	da01      	bge.n	42d2e <Tower_Read_Fail_Change+0x22>
		printk("Tower Read Fail Button not configured!\n");
   42d2a:	480a      	ldr	r0, [pc, #40]	; (42d54 <Tower_Read_Fail_Change+0x48>)
   42d2c:	e7f4      	b.n	42d18 <Tower_Read_Fail_Change+0xc>
	ret  = gpio_pin_set_dt(&Tower_Read_Fail, HIGH);
   42d2e:	2101      	movs	r1, #1
   42d30:	4807      	ldr	r0, [pc, #28]	; (42d50 <Tower_Read_Fail_Change+0x44>)
   42d32:	f012 fc47 	bl	555c4 <gpio_pin_set_dt.isra.0>
	k_msleep(TOGGLE_TIME);
   42d36:	f012 fc59 	bl	555ec <k_msleep.constprop.0.isra.0>
}
   42d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret  = gpio_pin_set_dt(&Tower_Read_Fail, LOW);
   42d3e:	2100      	movs	r1, #0
   42d40:	4803      	ldr	r0, [pc, #12]	; (42d50 <Tower_Read_Fail_Change+0x44>)
   42d42:	f012 bc3f 	b.w	555c4 <gpio_pin_set_dt.isra.0>
   42d46:	bf00      	nop
   42d48:	0005bb94 	.word	0x0005bb94
   42d4c:	0005cec0 	.word	0x0005cec0
   42d50:	0005c128 	.word	0x0005c128
   42d54:	0005cee3 	.word	0x0005cee3

00042d58 <Tower_Buffer_Full_Change>:
{
   42d58:	b508      	push	{r3, lr}
   42d5a:	480e      	ldr	r0, [pc, #56]	; (42d94 <Tower_Buffer_Full_Change+0x3c>)
   42d5c:	f017 fc6c 	bl	5a638 <z_device_is_ready>
	if (!device_is_ready(Tower_Buffer_Full.port)) 
   42d60:	b920      	cbnz	r0, 42d6c <Tower_Buffer_Full_Change+0x14>
		printk("Tower Buffer Button not ready!\n");
   42d62:	480d      	ldr	r0, [pc, #52]	; (42d98 <Tower_Buffer_Full_Change+0x40>)
}
   42d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Tower Buffer Button not configured!\n");
   42d68:	f012 bcd5 	b.w	55716 <printk>
	ret = gpio_pin_configure_dt(&Tower_Buffer_Full, GPIO_OUTPUT_ACTIVE);
   42d6c:	480b      	ldr	r0, [pc, #44]	; (42d9c <Tower_Buffer_Full_Change+0x44>)
   42d6e:	f012 fc00 	bl	55572 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) 
   42d72:	2800      	cmp	r0, #0
   42d74:	da01      	bge.n	42d7a <Tower_Buffer_Full_Change+0x22>
		printk("Tower Buffer Button not configured!\n");
   42d76:	480a      	ldr	r0, [pc, #40]	; (42da0 <Tower_Buffer_Full_Change+0x48>)
   42d78:	e7f4      	b.n	42d64 <Tower_Buffer_Full_Change+0xc>
	ret  = gpio_pin_set_dt(&Tower_Buffer_Full, HIGH);
   42d7a:	2101      	movs	r1, #1
   42d7c:	4807      	ldr	r0, [pc, #28]	; (42d9c <Tower_Buffer_Full_Change+0x44>)
   42d7e:	f012 fc21 	bl	555c4 <gpio_pin_set_dt.isra.0>
	k_msleep(TOGGLE_TIME);
   42d82:	f012 fc33 	bl	555ec <k_msleep.constprop.0.isra.0>
}
   42d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret  = gpio_pin_set_dt(&Tower_Buffer_Full, LOW);
   42d8a:	2100      	movs	r1, #0
   42d8c:	4803      	ldr	r0, [pc, #12]	; (42d9c <Tower_Buffer_Full_Change+0x44>)
   42d8e:	f012 bc19 	b.w	555c4 <gpio_pin_set_dt.isra.0>
   42d92:	bf00      	nop
   42d94:	0005bb94 	.word	0x0005bb94
   42d98:	0005cf0b 	.word	0x0005cf0b
   42d9c:	0005c120 	.word	0x0005c120
   42da0:	0005cf2b 	.word	0x0005cf2b

00042da4 <power>:
{
   42da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   42da6:	4c17      	ldr	r4, [pc, #92]	; (42e04 <power+0x60>)
   42da8:	4620      	mov	r0, r4
   42daa:	f017 fc45 	bl	5a638 <z_device_is_ready>
	if (!device_is_ready(cons)) {
   42dae:	b930      	cbnz	r0, 42dbe <power+0x1a>
		printk("%s: device not ready.\n", cons->name);
   42db0:	6821      	ldr	r1, [r4, #0]
   42db2:	4815      	ldr	r0, [pc, #84]	; (42e08 <power+0x64>)
}
   42db4:	b004      	add	sp, #16
   42db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("%s: device not ready.\n", cons->name);
   42dba:	f012 bcac 	b.w	55716 <printk>
		printk("Retained data not supported\n");
   42dbe:	4813      	ldr	r0, [pc, #76]	; (42e0c <power+0x68>)
   42dc0:	f012 fca9 	bl	55716 <printk>
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
   42dc4:	220c      	movs	r2, #12
   42dc6:	4b12      	ldr	r3, [pc, #72]	; (42e10 <power+0x6c>)
	printk("Entering system off!\nPress Power Button to reboot\n");
   42dc8:	4812      	ldr	r0, [pc, #72]	; (42e14 <power+0x70>)
   42dca:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
                                            const nrf_gpio_pin_pull_t *  p_pull,
                                            const nrf_gpio_pin_drive_t * p_drive,
                                            const nrf_gpio_pin_sense_t * p_sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number];
   42dce:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);

    /* Clear fields that will be updated. */
    cnf &= ~to_update;
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   42dd2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
   42dd6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
   42dda:	f012 fc9c 	bl	55716 <printk>
	pm_state_force(0u, &(struct pm_state_info){PM_STATE_SOFT_OFF, 0, 0});
   42dde:	2000      	movs	r0, #0
   42de0:	2306      	movs	r3, #6
   42de2:	a901      	add	r1, sp, #4
   42de4:	e9cd 0001 	strd	r0, r0, [sp, #4]
   42de8:	9003      	str	r0, [sp, #12]
   42dea:	f88d 3004 	strb.w	r3, [sp, #4]
   42dee:	f002 fd49 	bl	45884 <pm_state_force>
	return z_impl_k_sleep(timeout);
   42df2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   42df6:	2100      	movs	r1, #0
   42df8:	f010 f844 	bl	52e84 <z_impl_k_sleep>
	printk("ERROR: System off failed\n");
   42dfc:	4806      	ldr	r0, [pc, #24]	; (42e18 <power+0x74>)
   42dfe:	f012 fc8a 	bl	55716 <printk>
	while (true) {
   42e02:	e7fe      	b.n	42e02 <power+0x5e>
   42e04:	0005bbcc 	.word	0x0005bbcc
   42e08:	0005cf50 	.word	0x0005cf50
   42e0c:	0005cf67 	.word	0x0005cf67
   42e10:	40842500 	.word	0x40842500
   42e14:	0005cf84 	.word	0x0005cf84
   42e18:	0005cfb7 	.word	0x0005cfb7

00042e1c <storage>:
{
   42e1c:	b507      	push	{r0, r1, r2, lr}
		if (disk_access_init(disk_pdrv) != 0) {
   42e1e:	481c      	ldr	r0, [pc, #112]	; (42e90 <storage+0x74>)
   42e20:	f013 f823 	bl	55e6a <disk_access_init>
   42e24:	b170      	cbz	r0, 42e44 <storage+0x28>
			printk("Storage init ERROR!");
   42e26:	481b      	ldr	r0, [pc, #108]	; (42e94 <storage+0x78>)
			printk("Unable to get sector size");
   42e28:	f012 fc75 	bl	55716 <printk>
	mp.mnt_point = disk_mount_pt;
   42e2c:	481a      	ldr	r0, [pc, #104]	; (42e98 <storage+0x7c>)
   42e2e:	4b1b      	ldr	r3, [pc, #108]	; (42e9c <storage+0x80>)
   42e30:	60c3      	str	r3, [r0, #12]
	int res = fs_mount(&mp);
   42e32:	f004 f89b 	bl	46f6c <fs_mount>
	if (res == FR_OK) {
   42e36:	bb40      	cbnz	r0, 42e8a <storage+0x6e>
		printk("Disk mounted.\n");
   42e38:	4819      	ldr	r0, [pc, #100]	; (42ea0 <storage+0x84>)
}
   42e3a:	b003      	add	sp, #12
   42e3c:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Error mounting disk.\n");
   42e40:	f012 bc69 	b.w	55716 <printk>
		if (disk_access_ioctl(disk_pdrv,
   42e44:	466a      	mov	r2, sp
   42e46:	2101      	movs	r1, #1
   42e48:	4811      	ldr	r0, [pc, #68]	; (42e90 <storage+0x74>)
   42e4a:	f013 f858 	bl	55efe <disk_access_ioctl>
   42e4e:	b108      	cbz	r0, 42e54 <storage+0x38>
			printk("Unable to get sector count");
   42e50:	4814      	ldr	r0, [pc, #80]	; (42ea4 <storage+0x88>)
   42e52:	e7e9      	b.n	42e28 <storage+0xc>
		printk("Block count %u\n", block_count);
   42e54:	9900      	ldr	r1, [sp, #0]
   42e56:	4814      	ldr	r0, [pc, #80]	; (42ea8 <storage+0x8c>)
   42e58:	f012 fc5d 	bl	55716 <printk>
		if (disk_access_ioctl(disk_pdrv,
   42e5c:	2102      	movs	r1, #2
   42e5e:	480c      	ldr	r0, [pc, #48]	; (42e90 <storage+0x74>)
   42e60:	aa01      	add	r2, sp, #4
   42e62:	f013 f84c 	bl	55efe <disk_access_ioctl>
   42e66:	b108      	cbz	r0, 42e6c <storage+0x50>
			printk("Unable to get sector size");
   42e68:	4810      	ldr	r0, [pc, #64]	; (42eac <storage+0x90>)
   42e6a:	e7dd      	b.n	42e28 <storage+0xc>
		printk("Sector size %u\n", block_size);
   42e6c:	9901      	ldr	r1, [sp, #4]
   42e6e:	4810      	ldr	r0, [pc, #64]	; (42eb0 <storage+0x94>)
   42e70:	f012 fc51 	bl	55716 <printk>
		memory_size_mb = (uint64_t)block_count * block_size;
   42e74:	e9dd 3100 	ldrd	r3, r1, [sp]
   42e78:	fba3 3101 	umull	r3, r1, r3, r1
		printk("Memory Size(MB) %u\n", (uint32_t)(memory_size_mb >> 20));
   42e7c:	0d1b      	lsrs	r3, r3, #20
   42e7e:	480d      	ldr	r0, [pc, #52]	; (42eb4 <storage+0x98>)
   42e80:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
   42e84:	f012 fc47 	bl	55716 <printk>
   42e88:	e7d0      	b.n	42e2c <storage+0x10>
		printk("Error mounting disk.\n");
   42e8a:	480b      	ldr	r0, [pc, #44]	; (42eb8 <storage+0x9c>)
   42e8c:	e7d5      	b.n	42e3a <storage+0x1e>
   42e8e:	bf00      	nop
   42e90:	0005cfd1 	.word	0x0005cfd1
   42e94:	0005cfd4 	.word	0x0005cfd4
   42e98:	2001a540 	.word	0x2001a540
   42e9c:	0005d051 	.word	0x0005d051
   42ea0:	0005d056 	.word	0x0005d056
   42ea4:	0005cfe8 	.word	0x0005cfe8
   42ea8:	0005d003 	.word	0x0005d003
   42eac:	0005d013 	.word	0x0005d013
   42eb0:	0005d02d 	.word	0x0005d02d
   42eb4:	0005d03d 	.word	0x0005d03d
   42eb8:	0005d065 	.word	0x0005d065

00042ebc <AppendString>:
{
   42ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   42ec0:	4616      	mov	r6, r2
   42ec2:	2200      	movs	r2, #0
   42ec4:	b084      	sub	sp, #16
   42ec6:	af00      	add	r7, sp, #0
   42ec8:	4604      	mov	r4, r0
   42eca:	4689      	mov	r9, r1
	if(debug == true)
   42ecc:	461d      	mov	r5, r3
   42ece:	e9c7 2201 	strd	r2, r2, [r7, #4]
   42ed2:	60fa      	str	r2, [r7, #12]
   42ed4:	f106 0807 	add.w	r8, r6, #7
   42ed8:	b99b      	cbnz	r3, 42f02 <AppendString+0x46>
	fileStatus = fs_open(&firp,fname, FS_O_APPEND | FS_O_WRITE);
   42eda:	4601      	mov	r1, r0
   42edc:	2222      	movs	r2, #34	; 0x22
   42ede:	1d38      	adds	r0, r7, #4
   42ee0:	f003 fe78 	bl	46bd4 <fs_open>
	if(fileStatus)
   42ee4:	b118      	cbz	r0, 42eee <AppendString+0x32>
        printk("error open %s\n", fname);
   42ee6:	4621      	mov	r1, r4
   42ee8:	483f      	ldr	r0, [pc, #252]	; (42fe8 <AppendString+0x12c>)
   42eea:	f012 fc14 	bl	55716 <printk>
	char conStr[length];
   42eee:	f028 0807 	bic.w	r8, r8, #7
   42ef2:	ebad 0d08 	sub.w	sp, sp, r8
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   42ef6:	4649      	mov	r1, r9
   42ef8:	4668      	mov	r0, sp
   42efa:	46e8      	mov	r8, sp
   42efc:	f018 f994 	bl	5b228 <strcpy>
	if(debug == true)
   42f00:	e026      	b.n	42f50 <AppendString+0x94>
		printk("file object created!\n");
   42f02:	483a      	ldr	r0, [pc, #232]	; (42fec <AppendString+0x130>)
   42f04:	f012 fc07 	bl	55716 <printk>
	fileStatus = fs_open(&firp,fname, FS_O_APPEND | FS_O_WRITE);
   42f08:	2222      	movs	r2, #34	; 0x22
   42f0a:	4621      	mov	r1, r4
   42f0c:	1d38      	adds	r0, r7, #4
   42f0e:	f003 fe61 	bl	46bd4 <fs_open>
	if(fileStatus)
   42f12:	b118      	cbz	r0, 42f1c <AppendString+0x60>
        printk("error open %s\n", fname);
   42f14:	4621      	mov	r1, r4
   42f16:	4834      	ldr	r0, [pc, #208]	; (42fe8 <AppendString+0x12c>)
   42f18:	f012 fbfd 	bl	55716 <printk>
		printk("file opened!\n ");
   42f1c:	4834      	ldr	r0, [pc, #208]	; (42ff0 <AppendString+0x134>)
   42f1e:	f012 fbfa 	bl	55716 <printk>
		printk("length: %d\n", length);
   42f22:	4631      	mov	r1, r6
   42f24:	4833      	ldr	r0, [pc, #204]	; (42ff4 <AppendString+0x138>)
   42f26:	f012 fbf6 	bl	55716 <printk>
	char conStr[length];
   42f2a:	f028 0807 	bic.w	r8, r8, #7
		printk("copied to write string\n");
   42f2e:	4832      	ldr	r0, [pc, #200]	; (42ff8 <AppendString+0x13c>)
   42f30:	f012 fbf1 	bl	55716 <printk>
	char conStr[length];
   42f34:	ebad 0d08 	sub.w	sp, sp, r8
   42f38:	4649      	mov	r1, r9
   42f3a:	4668      	mov	r0, sp
   42f3c:	f018 f974 	bl	5b228 <strcpy>
		printk("Printing string %s\n", conStr);
   42f40:	482e      	ldr	r0, [pc, #184]	; (42ffc <AppendString+0x140>)
   42f42:	4669      	mov	r1, sp
   42f44:	f012 fbe7 	bl	55716 <printk>
			printk("Printing characters\n");
   42f48:	482d      	ldr	r0, [pc, #180]	; (43000 <AppendString+0x144>)
	char conStr[length];
   42f4a:	46e8      	mov	r8, sp
			printk("Printing characters\n");
   42f4c:	f012 fbe3 	bl	55716 <printk>
{
   42f50:	f04f 0900 	mov.w	r9, #0
				printk("%c ", conStr[loop]);
   42f54:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 43018 <AppendString+0x15c>
	for(loop = 0; loop < length; loop++)
   42f58:	45b1      	cmp	r9, r6
   42f5a:	db1f      	blt.n	42f9c <AppendString+0xe0>
	if(debug == true)
   42f5c:	b11d      	cbz	r5, 42f66 <AppendString+0xaa>
		printk("Printing string %s\n", conStr);
   42f5e:	4641      	mov	r1, r8
   42f60:	4826      	ldr	r0, [pc, #152]	; (42ffc <AppendString+0x140>)
   42f62:	f012 fbd8 	bl	55716 <printk>
	fileStatus = fs_write(&firp,&conStr,length+1);
   42f66:	4641      	mov	r1, r8
   42f68:	1c72      	adds	r2, r6, #1
   42f6a:	1d38      	adds	r0, r7, #4
   42f6c:	f003 fec2 	bl	46cf4 <fs_write>
	if(fileStatus < 0)
   42f70:	2800      	cmp	r0, #0
   42f72:	da2f      	bge.n	42fd4 <AppendString+0x118>
        printk("other error write %s\n", fname);
   42f74:	4621      	mov	r1, r4
   42f76:	4823      	ldr	r0, [pc, #140]	; (43004 <AppendString+0x148>)
		printk("not implemented by underlying FS %s\n", fname);
   42f78:	f012 fbcd 	bl	55716 <printk>
	fileStatus = fs_close(&firp);
   42f7c:	1d38      	adds	r0, r7, #4
   42f7e:	f003 fe95 	bl	46cac <fs_close>
    if(fileStatus)
   42f82:	b118      	cbz	r0, 42f8c <AppendString+0xd0>
        printk("error close%s!\n", fname);
   42f84:	4621      	mov	r1, r4
   42f86:	4820      	ldr	r0, [pc, #128]	; (43008 <AppendString+0x14c>)
   42f88:	f012 fbc5 	bl	55716 <printk>
	if(debug == true)
   42f8c:	b115      	cbz	r5, 42f94 <AppendString+0xd8>
		printk("Done with Append String!\n");
   42f8e:	481f      	ldr	r0, [pc, #124]	; (4300c <AppendString+0x150>)
   42f90:	f012 fbc1 	bl	55716 <printk>
}
   42f94:	3710      	adds	r7, #16
   42f96:	46bd      	mov	sp, r7
   42f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if( (conStr[loop] >= 'a' && conStr[loop] <= 'z') 
   42f9c:	f818 1009 	ldrb.w	r1, [r8, r9]
   42fa0:	f021 0320 	bic.w	r3, r1, #32
   42fa4:	3b41      	subs	r3, #65	; 0x41
   42fa6:	2b19      	cmp	r3, #25
   42fa8:	d909      	bls.n	42fbe <AppendString+0x102>
			||  (conStr[loop] >= '0' && conStr[loop] <= '9')
   42faa:	f1a1 032f 	sub.w	r3, r1, #47	; 0x2f
   42fae:	2b0b      	cmp	r3, #11
   42fb0:	d905      	bls.n	42fbe <AppendString+0x102>
			||  (conStr[loop] == '\n') ||  (conStr[loop] == '/') 
   42fb2:	290a      	cmp	r1, #10
   42fb4:	d003      	beq.n	42fbe <AppendString+0x102>
			||  (conStr[loop] == ':') || (conStr[loop] == '+') 
   42fb6:	f1a1 032a 	sub.w	r3, r1, #42	; 0x2a
   42fba:	2b01      	cmp	r3, #1
   42fbc:	d806      	bhi.n	42fcc <AppendString+0x110>
			if(debug == true)
   42fbe:	b115      	cbz	r5, 42fc6 <AppendString+0x10a>
				printk("%c ", conStr[loop]);
   42fc0:	4650      	mov	r0, sl
   42fc2:	f012 fba8 	bl	55716 <printk>
	for(loop = 0; loop < length; loop++)
   42fc6:	f109 0901 	add.w	r9, r9, #1
   42fca:	e7c5      	b.n	42f58 <AppendString+0x9c>
			conStr[loop] = '_';
   42fcc:	235f      	movs	r3, #95	; 0x5f
   42fce:	f808 3009 	strb.w	r3, [r8, r9]
   42fd2:	e7f8      	b.n	42fc6 <AppendString+0x10a>
	else if(fileStatus == EBADF)
   42fd4:	2809      	cmp	r0, #9
   42fd6:	d102      	bne.n	42fde <AppendString+0x122>
		printk("file not opened or closed %s\n", fname);
   42fd8:	4621      	mov	r1, r4
   42fda:	480d      	ldr	r0, [pc, #52]	; (43010 <AppendString+0x154>)
   42fdc:	e7cc      	b.n	42f78 <AppendString+0xbc>
	else if(fileStatus == ENOTSUP)
   42fde:	2886      	cmp	r0, #134	; 0x86
   42fe0:	d1cc      	bne.n	42f7c <AppendString+0xc0>
		printk("not implemented by underlying FS %s\n", fname);
   42fe2:	4621      	mov	r1, r4
   42fe4:	480b      	ldr	r0, [pc, #44]	; (43014 <AppendString+0x158>)
   42fe6:	e7c7      	b.n	42f78 <AppendString+0xbc>
   42fe8:	0005ccaa 	.word	0x0005ccaa
   42fec:	0005d07b 	.word	0x0005d07b
   42ff0:	0005d091 	.word	0x0005d091
   42ff4:	0005d0a0 	.word	0x0005d0a0
   42ff8:	0005d0ac 	.word	0x0005d0ac
   42ffc:	0005d0c4 	.word	0x0005d0c4
   43000:	0005d0d8 	.word	0x0005d0d8
   43004:	0005ccb9 	.word	0x0005ccb9
   43008:	0005cd12 	.word	0x0005cd12
   4300c:	0005d0f1 	.word	0x0005d0f1
   43010:	0005cccf 	.word	0x0005cccf
   43014:	0005cced 	.word	0x0005cced
   43018:	0005d0ed 	.word	0x0005d0ed

0004301c <empty>:
{
   4301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(t1ID, 0, sizeof(t1ID));
   4301e:	240f      	movs	r4, #15
   43020:	4f23      	ldr	r7, [pc, #140]	; (430b0 <empty+0x94>)
	memset(t2ID, 0, sizeof(t2ID));
   43022:	4e24      	ldr	r6, [pc, #144]	; (430b4 <empty+0x98>)
	memset(t1ID, 0, sizeof(t1ID));
   43024:	4622      	mov	r2, r4
   43026:	2100      	movs	r1, #0
   43028:	4638      	mov	r0, r7
   4302a:	f017 ff50 	bl	5aece <memset>
	memset(t3ID, 0, sizeof(t3ID));
   4302e:	4d22      	ldr	r5, [pc, #136]	; (430b8 <empty+0x9c>)
	memset(t2ID, 0, sizeof(t2ID));
   43030:	4622      	mov	r2, r4
   43032:	2100      	movs	r1, #0
   43034:	4630      	mov	r0, r6
   43036:	f017 ff4a 	bl	5aece <memset>
	memset(t3ID, 0, sizeof(t3ID));
   4303a:	4622      	mov	r2, r4
	strcpy(t1ID, "empty");
   4303c:	4c1f      	ldr	r4, [pc, #124]	; (430bc <empty+0xa0>)
	memset(t3ID, 0, sizeof(t3ID));
   4303e:	2100      	movs	r1, #0
   43040:	4628      	mov	r0, r5
   43042:	f017 ff44 	bl	5aece <memset>
	strcpy(t1ID, "empty");
   43046:	4621      	mov	r1, r4
   43048:	4638      	mov	r0, r7
   4304a:	f018 f8ed 	bl	5b228 <strcpy>
	strcpy(t2ID, "empty");
   4304e:	4621      	mov	r1, r4
   43050:	4630      	mov	r0, r6
   43052:	f018 f8e9 	bl	5b228 <strcpy>
	strcpy(t3ID, "empty");
   43056:	4621      	mov	r1, r4
   43058:	4628      	mov	r0, r5
   4305a:	f018 f8e5 	bl	5b228 <strcpy>
	strcpy(t1COPS, "noCOPS1");
   4305e:	4918      	ldr	r1, [pc, #96]	; (430c0 <empty+0xa4>)
   43060:	4818      	ldr	r0, [pc, #96]	; (430c4 <empty+0xa8>)
   43062:	f018 f8e1 	bl	5b228 <strcpy>
	strcpy(t2COPS, "noCOPS2");
   43066:	4918      	ldr	r1, [pc, #96]	; (430c8 <empty+0xac>)
   43068:	4818      	ldr	r0, [pc, #96]	; (430cc <empty+0xb0>)
   4306a:	f018 f8dd 	bl	5b228 <strcpy>
	strcpy(t3COPS, "noCOPS3");
   4306e:	4918      	ldr	r1, [pc, #96]	; (430d0 <empty+0xb4>)
   43070:	4818      	ldr	r0, [pc, #96]	; (430d4 <empty+0xb8>)
   43072:	f018 f8d9 	bl	5b228 <strcpy>
	strcpy(t1SNR,"noSNR1");
   43076:	4918      	ldr	r1, [pc, #96]	; (430d8 <empty+0xbc>)
   43078:	4818      	ldr	r0, [pc, #96]	; (430dc <empty+0xc0>)
   4307a:	f018 f8d5 	bl	5b228 <strcpy>
	strcpy(t2SNR,"noSNR2");
   4307e:	4918      	ldr	r1, [pc, #96]	; (430e0 <empty+0xc4>)
   43080:	4818      	ldr	r0, [pc, #96]	; (430e4 <empty+0xc8>)
   43082:	f018 f8d1 	bl	5b228 <strcpy>
	strcpy(t3SNR,"noSNR3");
   43086:	4918      	ldr	r1, [pc, #96]	; (430e8 <empty+0xcc>)
   43088:	4818      	ldr	r0, [pc, #96]	; (430ec <empty+0xd0>)
   4308a:	f018 f8cd 	bl	5b228 <strcpy>
	strcpy(t1Band,"noBand1");
   4308e:	4918      	ldr	r1, [pc, #96]	; (430f0 <empty+0xd4>)
   43090:	4818      	ldr	r0, [pc, #96]	; (430f4 <empty+0xd8>)
   43092:	f018 f8c9 	bl	5b228 <strcpy>
	strcpy(t2Band,"noBand2");
   43096:	4918      	ldr	r1, [pc, #96]	; (430f8 <empty+0xdc>)
   43098:	4818      	ldr	r0, [pc, #96]	; (430fc <empty+0xe0>)
   4309a:	f018 f8c5 	bl	5b228 <strcpy>
	strcpy(t3Band,"noBand3");
   4309e:	4918      	ldr	r1, [pc, #96]	; (43100 <empty+0xe4>)
   430a0:	4818      	ldr	r0, [pc, #96]	; (43104 <empty+0xe8>)
   430a2:	f018 f8c1 	bl	5b228 <strcpy>
}
   430a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Towers emptied!\n");
   430aa:	4817      	ldr	r0, [pc, #92]	; (43108 <empty+0xec>)
   430ac:	f012 bb33 	b.w	55716 <printk>
   430b0:	2001dce9 	.word	0x2001dce9
   430b4:	2001dab7 	.word	0x2001dab7
   430b8:	2001d885 	.word	0x2001d885
   430bc:	0005d10b 	.word	0x0005d10b
   430c0:	0005d111 	.word	0x0005d111
   430c4:	2001dca0 	.word	0x2001dca0
   430c8:	0005d119 	.word	0x0005d119
   430cc:	2001da6e 	.word	0x2001da6e
   430d0:	0005d121 	.word	0x0005d121
   430d4:	2001d83c 	.word	0x2001d83c
   430d8:	0005d129 	.word	0x0005d129
   430dc:	2001daf8 	.word	0x2001daf8
   430e0:	0005d130 	.word	0x0005d130
   430e4:	2001d8c6 	.word	0x2001d8c6
   430e8:	0005d137 	.word	0x0005d137
   430ec:	2001d694 	.word	0x2001d694
   430f0:	0005d13e 	.word	0x0005d13e
   430f4:	2001dac6 	.word	0x2001dac6
   430f8:	0005d146 	.word	0x0005d146
   430fc:	2001d894 	.word	0x2001d894
   43100:	0005d14e 	.word	0x0005d14e
   43104:	2001d662 	.word	0x2001d662
   43108:	0005d156 	.word	0x0005d156

0004310c <crypto_finish>:
{
   4310c:	b508      	push	{r3, lr}
	status = psa_destroy_key(key_handle);
   4310e:	4b04      	ldr	r3, [pc, #16]	; (43120 <crypto_finish+0x14>)
   43110:	6818      	ldr	r0, [r3, #0]
   43112:	f00a f899 	bl	4d248 <psa_destroy_key>
	if (status != PSA_SUCCESS) {
   43116:	3800      	subs	r0, #0
   43118:	bf18      	it	ne
   4311a:	2001      	movne	r0, #1
}
   4311c:	4240      	negs	r0, r0
   4311e:	bd08      	pop	{r3, pc}
   43120:	2001b178 	.word	0x2001b178

00043124 <generate_key>:
	psa_key_attributes_t key_attributes = PSA_KEY_ATTRIBUTES_INIT;
   43124:	2300      	movs	r3, #0
}

static inline void psa_set_key_algorithm(psa_key_attributes_t *attributes,
                                         psa_algorithm_t alg)
{
    attributes->alg = alg;
   43126:	f240 3101 	movw	r1, #769	; 0x301
{
   4312a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	psa_key_attributes_t key_attributes = PSA_KEY_ATTRIBUTES_INIT;
   4312e:	4a3d      	ldr	r2, [pc, #244]	; (43224 <generate_key+0x100>)
{
   43130:	b0ae      	sub	sp, #184	; 0xb8
	psa_key_attributes_t key_attributes = PSA_KEY_ATTRIBUTES_INIT;
   43132:	e9cd 2308 	strd	r2, r3, [sp, #32]
   43136:	930a      	str	r3, [sp, #40]	; 0x28
	status = psa_generate_key(&key_attributes, &key_handle);
   43138:	4c3b      	ldr	r4, [pc, #236]	; (43228 <generate_key+0x104>)
   4313a:	4b3c      	ldr	r3, [pc, #240]	; (4322c <generate_key+0x108>)
   4313c:	a808      	add	r0, sp, #32
   4313e:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
   43142:	4621      	mov	r1, r4
   43144:	f00a f99c 	bl	4d480 <psa_generate_key>
	if (status != PSA_SUCCESS) {
   43148:	4605      	mov	r5, r0
   4314a:	2800      	cmp	r0, #0
   4314c:	d167      	bne.n	4321e <generate_key+0xfa>
	psa_reset_key_attributes(&key_attributes);
   4314e:	a808      	add	r0, sp, #32
   43150:	f00a f896 	bl	4d280 <psa_reset_key_attributes>
	uint32_t out_len = 128;
   43154:	2380      	movs	r3, #128	; 0x80
	status = psa_export_key(key_handle, out, sizeof(out), &out_len);
   43156:	2282      	movs	r2, #130	; 0x82
	uint32_t out_len = 128;
   43158:	9303      	str	r3, [sp, #12]
	status = psa_export_key(key_handle, out, sizeof(out), &out_len);
   4315a:	6820      	ldr	r0, [r4, #0]
   4315c:	ab03      	add	r3, sp, #12
   4315e:	a90d      	add	r1, sp, #52	; 0x34
   43160:	f00a f8ac 	bl	4d2bc <psa_export_key>
	if(status != APP_SUCCESS)
   43164:	b110      	cbz	r0, 4316c <generate_key+0x48>
		printk("Problem with export!\n");
   43166:	4832      	ldr	r0, [pc, #200]	; (43230 <generate_key+0x10c>)
   43168:	f012 fad5 	bl	55716 <printk>
	printk("Key in decimal: ");
   4316c:	4831      	ldr	r0, [pc, #196]	; (43234 <generate_key+0x110>)
   4316e:	ac0d      	add	r4, sp, #52	; 0x34
   43170:	f012 fad1 	bl	55716 <printk>
	for(loop = 0; loop < out_len; loop++)
   43174:	4627      	mov	r7, r4
   43176:	2600      	movs	r6, #0
		printk("%d ", out[loop]);
   43178:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 43248 <generate_key+0x124>
		sprintf(conD,"%d", out[loop]);
   4317c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 4324c <generate_key+0x128>
			strcat(keyDeci, conD);
   43180:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 43250 <generate_key+0x12c>
	for(loop = 0; loop < out_len; loop++)
   43184:	9b03      	ldr	r3, [sp, #12]
   43186:	42b3      	cmp	r3, r6
   43188:	d819      	bhi.n	431be <generate_key+0x9a>
	printk("\n");
   4318a:	482b      	ldr	r0, [pc, #172]	; (43238 <generate_key+0x114>)
   4318c:	f012 fac3 	bl	55716 <printk>
	printk("Key in hex: ");
   43190:	482a      	ldr	r0, [pc, #168]	; (4323c <generate_key+0x118>)
   43192:	f012 fac0 	bl	55716 <printk>
	for(loop = 0; loop < out_len; loop++)
   43196:	2600      	movs	r6, #0
		printk("%02x ", out[loop]);
   43198:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 43254 <generate_key+0x130>
		sprintf(conH,"%02x", out[loop]);
   4319c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 43258 <generate_key+0x134>
			strcat(keyHex, conH);
   431a0:	4f27      	ldr	r7, [pc, #156]	; (43240 <generate_key+0x11c>)
	for(loop = 0; loop < out_len; loop++)
   431a2:	9b03      	ldr	r3, [sp, #12]
   431a4:	42b3      	cmp	r3, r6
   431a6:	d822      	bhi.n	431ee <generate_key+0xca>
	printk("\n");
   431a8:	4823      	ldr	r0, [pc, #140]	; (43238 <generate_key+0x114>)
   431aa:	f012 fab4 	bl	55716 <printk>
	printk("Key in hex: %s\n", keyHex);
   431ae:	4924      	ldr	r1, [pc, #144]	; (43240 <generate_key+0x11c>)
   431b0:	4824      	ldr	r0, [pc, #144]	; (43244 <generate_key+0x120>)
   431b2:	f012 fab0 	bl	55716 <printk>
}
   431b6:	4628      	mov	r0, r5
   431b8:	b02e      	add	sp, #184	; 0xb8
   431ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printk("%d ", out[loop]);
   431be:	7839      	ldrb	r1, [r7, #0]
   431c0:	4648      	mov	r0, r9
   431c2:	f012 faa8 	bl	55716 <printk>
		sprintf(conD,"%d", out[loop]);
   431c6:	f817 3b01 	ldrb.w	r3, [r7], #1
   431ca:	2205      	movs	r2, #5
   431cc:	2100      	movs	r1, #0
   431ce:	9300      	str	r3, [sp, #0]
   431d0:	a804      	add	r0, sp, #16
   431d2:	4653      	mov	r3, sl
   431d4:	f017 ffa4 	bl	5b120 <__sprintf_chk>
			strcpy(keyDeci, conD);
   431d8:	2280      	movs	r2, #128	; 0x80
   431da:	4640      	mov	r0, r8
   431dc:	a904      	add	r1, sp, #16
		if(loop == 0)
   431de:	b91e      	cbnz	r6, 431e8 <generate_key+0xc4>
			strcpy(keyDeci, conD);
   431e0:	f018 f82a 	bl	5b238 <__strcpy_chk>
	for(loop = 0; loop < out_len; loop++)
   431e4:	3601      	adds	r6, #1
   431e6:	e7cd      	b.n	43184 <generate_key+0x60>
			strcat(keyDeci, conD);
   431e8:	f017 fff9 	bl	5b1de <__strcat_chk>
   431ec:	e7fa      	b.n	431e4 <generate_key+0xc0>
		printk("%02x ", out[loop]);
   431ee:	7821      	ldrb	r1, [r4, #0]
   431f0:	4640      	mov	r0, r8
   431f2:	f012 fa90 	bl	55716 <printk>
		sprintf(conH,"%02x", out[loop]);
   431f6:	f814 3b01 	ldrb.w	r3, [r4], #1
   431fa:	2205      	movs	r2, #5
   431fc:	2100      	movs	r1, #0
   431fe:	9300      	str	r3, [sp, #0]
   43200:	a806      	add	r0, sp, #24
   43202:	464b      	mov	r3, r9
   43204:	f017 ff8c 	bl	5b120 <__sprintf_chk>
			strcpy(keyHex, conH);
   43208:	2280      	movs	r2, #128	; 0x80
   4320a:	4638      	mov	r0, r7
   4320c:	a906      	add	r1, sp, #24
		if(loop == 0)
   4320e:	b91e      	cbnz	r6, 43218 <generate_key+0xf4>
			strcpy(keyHex, conH);
   43210:	f018 f812 	bl	5b238 <__strcpy_chk>
	for(loop = 0; loop < out_len; loop++)
   43214:	3601      	adds	r6, #1
   43216:	e7c4      	b.n	431a2 <generate_key+0x7e>
			strcat(keyHex, conH);
   43218:	f017 ffe1 	bl	5b1de <__strcat_chk>
   4321c:	e7fa      	b.n	43214 <generate_key+0xf0>
		return APP_ERROR;
   4321e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   43222:	e7c8      	b.n	431b6 <generate_key+0x92>
   43224:	00802400 	.word	0x00802400
   43228:	2001b178 	.word	0x2001b178
   4322c:	05500200 	.word	0x05500200
   43230:	0005d167 	.word	0x0005d167
   43234:	0005d17d 	.word	0x0005d17d
   43238:	0005fc03 	.word	0x0005fc03
   4323c:	0005d192 	.word	0x0005d192
   43240:	2001dcf8 	.word	0x2001dcf8
   43244:	0005d1aa 	.word	0x0005d1aa
   43248:	0005d18e 	.word	0x0005d18e
   4324c:	0005fd35 	.word	0x0005fd35
   43250:	2001dd78 	.word	0x2001dd78
   43254:	0005d19f 	.word	0x0005d19f
   43258:	0005d1a5 	.word	0x0005d1a5

0004325c <encrypt_aes_gcm>:
{
   4325c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	status = psa_generate_random(m_iv, NRF_CRYPTO_EXAMPLE_AES_IV_SIZE);
   43260:	210c      	movs	r1, #12
{
   43262:	b08b      	sub	sp, #44	; 0x2c
	status = psa_generate_random(m_iv, NRF_CRYPTO_EXAMPLE_AES_IV_SIZE);
   43264:	485c      	ldr	r0, [pc, #368]	; (433d8 <encrypt_aes_gcm+0x17c>)
   43266:	f00a f8e9 	bl	4d43c <psa_generate_random>
	if (status != PSA_SUCCESS) {
   4326a:	b128      	cbz	r0, 43278 <encrypt_aes_gcm+0x1c>
		return APP_ERROR;
   4326c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   43270:	4620      	mov	r0, r4
   43272:	b00b      	add	sp, #44	; 0x2c
   43274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	status = psa_aead_encrypt(key_handle,
   43278:	ab09      	add	r3, sp, #36	; 0x24
   4327a:	9306      	str	r3, [sp, #24]
   4327c:	4b57      	ldr	r3, [pc, #348]	; (433dc <encrypt_aes_gcm+0x180>)
   4327e:	f44f 6bfc 	mov.w	fp, #2016	; 0x7e0
   43282:	9304      	str	r3, [sp, #16]
   43284:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   43288:	f04f 0923 	mov.w	r9, #35	; 0x23
   4328c:	9303      	str	r3, [sp, #12]
   4328e:	4b54      	ldr	r3, [pc, #336]	; (433e0 <encrypt_aes_gcm+0x184>)
   43290:	4854      	ldr	r0, [pc, #336]	; (433e4 <encrypt_aes_gcm+0x188>)
   43292:	9302      	str	r3, [sp, #8]
   43294:	4b54      	ldr	r3, [pc, #336]	; (433e8 <encrypt_aes_gcm+0x18c>)
   43296:	f8cd b014 	str.w	fp, [sp, #20]
   4329a:	9300      	str	r3, [sp, #0]
   4329c:	f8cd 9004 	str.w	r9, [sp, #4]
   432a0:	230c      	movs	r3, #12
   432a2:	4a4d      	ldr	r2, [pc, #308]	; (433d8 <encrypt_aes_gcm+0x17c>)
   432a4:	4951      	ldr	r1, [pc, #324]	; (433ec <encrypt_aes_gcm+0x190>)
   432a6:	6800      	ldr	r0, [r0, #0]
   432a8:	f00a f82c 	bl	4d304 <psa_aead_encrypt>
	if (status != PSA_SUCCESS) {
   432ac:	4604      	mov	r4, r0
   432ae:	2800      	cmp	r0, #0
   432b0:	d1dc      	bne.n	4326c <encrypt_aes_gcm+0x10>
	PRINT_HEX("IV", m_iv, sizeof(m_iv));
   432b2:	f04f 0a0c 	mov.w	sl, #12
   432b6:	f8df 814c 	ldr.w	r8, [pc, #332]	; 43404 <encrypt_aes_gcm+0x1a8>
   432ba:	4d4d      	ldr	r5, [pc, #308]	; (433f0 <encrypt_aes_gcm+0x194>)
   432bc:	4f4d      	ldr	r7, [pc, #308]	; (433f4 <encrypt_aes_gcm+0x198>)
   432be:	4e4e      	ldr	r6, [pc, #312]	; (433f8 <encrypt_aes_gcm+0x19c>)
   432c0:	4603      	mov	r3, r0
   432c2:	e9cd 0801 	strd	r0, r8, [sp, #4]
   432c6:	f8cd a010 	str.w	sl, [sp, #16]
   432ca:	9503      	str	r5, [sp, #12]
   432cc:	9000      	str	r0, [sp, #0]
   432ce:	2203      	movs	r2, #3
   432d0:	494a      	ldr	r1, [pc, #296]	; (433fc <encrypt_aes_gcm+0x1a0>)
   432d2:	f012 f968 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   432d6:	4620      	mov	r0, r4
   432d8:	f8cd a000 	str.w	sl, [sp]
   432dc:	2203      	movs	r2, #3
   432de:	e9cd 4601 	strd	r4, r6, [sp, #4]
   432e2:	4b3d      	ldr	r3, [pc, #244]	; (433d8 <encrypt_aes_gcm+0x17c>)
   432e4:	4945      	ldr	r1, [pc, #276]	; (433fc <encrypt_aes_gcm+0x1a0>)
   432e6:	9703      	str	r7, [sp, #12]
   432e8:	f012 f95d 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   432ec:	9503      	str	r5, [sp, #12]
   432ee:	4d44      	ldr	r5, [pc, #272]	; (43400 <encrypt_aes_gcm+0x1a4>)
	PRINT_HEX("Additional data", m_additional_data, sizeof(m_additional_data));
   432f0:	f8df a114 	ldr.w	sl, [pc, #276]	; 43408 <encrypt_aes_gcm+0x1ac>
	PRINT_HEX("IV", m_iv, sizeof(m_iv));
   432f4:	4623      	mov	r3, r4
   432f6:	4620      	mov	r0, r4
   432f8:	2203      	movs	r2, #3
   432fa:	e9cd 4501 	strd	r4, r5, [sp, #4]
   432fe:	493f      	ldr	r1, [pc, #252]	; (433fc <encrypt_aes_gcm+0x1a0>)
   43300:	9400      	str	r4, [sp, #0]
   43302:	f012 f950 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
	PRINT_HEX("Additional data", m_additional_data, sizeof(m_additional_data));
   43306:	4623      	mov	r3, r4
   43308:	4620      	mov	r0, r4
   4330a:	f8cd 9010 	str.w	r9, [sp, #16]
   4330e:	2203      	movs	r2, #3
   43310:	e9cd 8a02 	strd	r8, sl, [sp, #8]
   43314:	e9cd 4400 	strd	r4, r4, [sp]
   43318:	4938      	ldr	r1, [pc, #224]	; (433fc <encrypt_aes_gcm+0x1a0>)
   4331a:	f012 f944 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   4331e:	4620      	mov	r0, r4
   43320:	e9cd 9400 	strd	r9, r4, [sp]
   43324:	2203      	movs	r2, #3
   43326:	e9cd 6702 	strd	r6, r7, [sp, #8]
   4332a:	4b2f      	ldr	r3, [pc, #188]	; (433e8 <encrypt_aes_gcm+0x18c>)
   4332c:	4933      	ldr	r1, [pc, #204]	; (433fc <encrypt_aes_gcm+0x1a0>)
   4332e:	f012 f93a 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   43332:	4623      	mov	r3, r4
   43334:	4620      	mov	r0, r4
   43336:	2203      	movs	r2, #3
   43338:	e9cd 5a02 	strd	r5, sl, [sp, #8]
   4333c:	e9cd 4400 	strd	r4, r4, [sp]
   43340:	492e      	ldr	r1, [pc, #184]	; (433fc <encrypt_aes_gcm+0x1a0>)
   43342:	f012 f930 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
	PRINT_HEX("Plaintext", m_plain_text, sizeof(m_plain_text));
   43346:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   4334a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4340c <encrypt_aes_gcm+0x1b0>
   4334e:	4620      	mov	r0, r4
   43350:	e9cd 8902 	strd	r8, r9, [sp, #8]
   43354:	9304      	str	r3, [sp, #16]
   43356:	2203      	movs	r2, #3
   43358:	4623      	mov	r3, r4
   4335a:	e9cd 4400 	strd	r4, r4, [sp]
   4335e:	4927      	ldr	r1, [pc, #156]	; (433fc <encrypt_aes_gcm+0x1a0>)
   43360:	f012 f921 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   43364:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   43368:	4620      	mov	r0, r4
   4336a:	9300      	str	r3, [sp, #0]
   4336c:	2203      	movs	r2, #3
   4336e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   43372:	4b1b      	ldr	r3, [pc, #108]	; (433e0 <encrypt_aes_gcm+0x184>)
   43374:	4921      	ldr	r1, [pc, #132]	; (433fc <encrypt_aes_gcm+0x1a0>)
   43376:	9401      	str	r4, [sp, #4]
   43378:	f012 f915 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   4337c:	e9cd 5902 	strd	r5, r9, [sp, #8]
	PRINT_HEX("Encrypted text", m_encrypted_text, sizeof(m_encrypted_text));
   43380:	f8df 908c 	ldr.w	r9, [pc, #140]	; 43410 <encrypt_aes_gcm+0x1b4>
	PRINT_HEX("Plaintext", m_plain_text, sizeof(m_plain_text));
   43384:	4623      	mov	r3, r4
   43386:	4620      	mov	r0, r4
   43388:	2203      	movs	r2, #3
   4338a:	e9cd 4400 	strd	r4, r4, [sp]
   4338e:	491b      	ldr	r1, [pc, #108]	; (433fc <encrypt_aes_gcm+0x1a0>)
   43390:	f012 f909 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
	PRINT_HEX("Encrypted text", m_encrypted_text, sizeof(m_encrypted_text));
   43394:	4623      	mov	r3, r4
   43396:	4620      	mov	r0, r4
   43398:	2203      	movs	r2, #3
   4339a:	e9cd 8902 	strd	r8, r9, [sp, #8]
   4339e:	e9cd 4400 	strd	r4, r4, [sp]
   433a2:	4916      	ldr	r1, [pc, #88]	; (433fc <encrypt_aes_gcm+0x1a0>)
   433a4:	f8cd b010 	str.w	fp, [sp, #16]
   433a8:	f012 f8fd 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   433ac:	4620      	mov	r0, r4
   433ae:	2203      	movs	r2, #3
   433b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   433b4:	e9cd b400 	strd	fp, r4, [sp]
   433b8:	4b08      	ldr	r3, [pc, #32]	; (433dc <encrypt_aes_gcm+0x180>)
   433ba:	4910      	ldr	r1, [pc, #64]	; (433fc <encrypt_aes_gcm+0x1a0>)
   433bc:	f012 f8f3 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   433c0:	4623      	mov	r3, r4
   433c2:	2203      	movs	r2, #3
   433c4:	4620      	mov	r0, r4
   433c6:	e9cd 5902 	strd	r5, r9, [sp, #8]
   433ca:	e9cd 4400 	strd	r4, r4, [sp]
   433ce:	490b      	ldr	r1, [pc, #44]	; (433fc <encrypt_aes_gcm+0x1a0>)
   433d0:	f012 f8e9 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
	return APP_SUCCESS;
   433d4:	e74c      	b.n	43270 <encrypt_aes_gcm+0x14>
   433d6:	bf00      	nop
   433d8:	2001d656 	.word	0x2001d656
   433dc:	2001c6a6 	.word	0x2001c6a6
   433e0:	2001ce86 	.word	0x2001ce86
   433e4:	2001b178 	.word	0x2001b178
   433e8:	2001aa00 	.word	0x2001aa00
   433ec:	05500200 	.word	0x05500200
   433f0:	0005d1ba 	.word	0x0005d1ba
   433f4:	0005d1d5 	.word	0x0005d1d5
   433f8:	0005d298 	.word	0x0005d298
   433fc:	0005bf14 	.word	0x0005bf14
   43400:	0005d1de 	.word	0x0005d1de
   43404:	0005d1bd 	.word	0x0005d1bd
   43408:	0005d1f0 	.word	0x0005d1f0
   4340c:	0005d200 	.word	0x0005d200
   43410:	0005d20a 	.word	0x0005d20a

00043414 <decrypt_aes_gcm>:
{
   43414:	b5f0      	push	{r4, r5, r6, r7, lr}
   43416:	b08b      	sub	sp, #44	; 0x2c
	status = psa_aead_decrypt(key_handle,
   43418:	ab09      	add	r3, sp, #36	; 0x24
   4341a:	9306      	str	r3, [sp, #24]
   4341c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
   43420:	9303      	str	r3, [sp, #12]
   43422:	4b23      	ldr	r3, [pc, #140]	; (434b0 <decrypt_aes_gcm+0x9c>)
   43424:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   43428:	9302      	str	r3, [sp, #8]
   4342a:	2323      	movs	r3, #35	; 0x23
   4342c:	4e21      	ldr	r6, [pc, #132]	; (434b4 <decrypt_aes_gcm+0xa0>)
   4342e:	9301      	str	r3, [sp, #4]
   43430:	4b21      	ldr	r3, [pc, #132]	; (434b8 <decrypt_aes_gcm+0xa4>)
   43432:	4822      	ldr	r0, [pc, #136]	; (434bc <decrypt_aes_gcm+0xa8>)
   43434:	9300      	str	r3, [sp, #0]
   43436:	9505      	str	r5, [sp, #20]
   43438:	9604      	str	r6, [sp, #16]
   4343a:	230c      	movs	r3, #12
   4343c:	4a20      	ldr	r2, [pc, #128]	; (434c0 <decrypt_aes_gcm+0xac>)
   4343e:	4921      	ldr	r1, [pc, #132]	; (434c4 <decrypt_aes_gcm+0xb0>)
   43440:	6800      	ldr	r0, [r0, #0]
   43442:	f009 ffad 	bl	4d3a0 <psa_aead_decrypt>
	if (status != PSA_SUCCESS) {
   43446:	4604      	mov	r4, r0
   43448:	2800      	cmp	r0, #0
   4344a:	d12d      	bne.n	434a8 <decrypt_aes_gcm+0x94>
	PRINT_HEX("Decrypted text", m_decrypted_text, sizeof(m_decrypted_text));
   4344c:	4f1e      	ldr	r7, [pc, #120]	; (434c8 <decrypt_aes_gcm+0xb4>)
   4344e:	4b1f      	ldr	r3, [pc, #124]	; (434cc <decrypt_aes_gcm+0xb8>)
   43450:	2203      	movs	r2, #3
   43452:	e9cd 0301 	strd	r0, r3, [sp, #4]
   43456:	491e      	ldr	r1, [pc, #120]	; (434d0 <decrypt_aes_gcm+0xbc>)
   43458:	4603      	mov	r3, r0
   4345a:	9000      	str	r0, [sp, #0]
   4345c:	9504      	str	r5, [sp, #16]
   4345e:	9703      	str	r7, [sp, #12]
   43460:	f012 f8a1 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   43464:	4b1b      	ldr	r3, [pc, #108]	; (434d4 <decrypt_aes_gcm+0xc0>)
   43466:	2203      	movs	r2, #3
   43468:	9303      	str	r3, [sp, #12]
   4346a:	4b1b      	ldr	r3, [pc, #108]	; (434d8 <decrypt_aes_gcm+0xc4>)
   4346c:	4620      	mov	r0, r4
   4346e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   43472:	4917      	ldr	r1, [pc, #92]	; (434d0 <decrypt_aes_gcm+0xbc>)
   43474:	4633      	mov	r3, r6
   43476:	9500      	str	r5, [sp, #0]
   43478:	f012 f895 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   4347c:	4b17      	ldr	r3, [pc, #92]	; (434dc <decrypt_aes_gcm+0xc8>)
   4347e:	2203      	movs	r2, #3
   43480:	4620      	mov	r0, r4
   43482:	e9cd 4301 	strd	r4, r3, [sp, #4]
   43486:	4912      	ldr	r1, [pc, #72]	; (434d0 <decrypt_aes_gcm+0xbc>)
   43488:	4623      	mov	r3, r4
   4348a:	9703      	str	r7, [sp, #12]
   4348c:	9400      	str	r4, [sp, #0]
   4348e:	f012 f88a 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
	if (memcmp(m_decrypted_text, m_plain_text, NRF_CRYPTO_EXAMPLE_AES_MAX_TEXT_SIZE) != 0) {
   43492:	462a      	mov	r2, r5
   43494:	4630      	mov	r0, r6
   43496:	4912      	ldr	r1, [pc, #72]	; (434e0 <decrypt_aes_gcm+0xcc>)
   43498:	f017 fccf 	bl	5ae3a <memcmp>
   4349c:	3800      	subs	r0, #0
   4349e:	bf18      	it	ne
   434a0:	2001      	movne	r0, #1
   434a2:	4240      	negs	r0, r0
}
   434a4:	b00b      	add	sp, #44	; 0x2c
   434a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return APP_ERROR;
   434a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   434ac:	e7fa      	b.n	434a4 <decrypt_aes_gcm+0x90>
   434ae:	bf00      	nop
   434b0:	2001c6a6 	.word	0x2001c6a6
   434b4:	2001bed6 	.word	0x2001bed6
   434b8:	2001aa00 	.word	0x2001aa00
   434bc:	2001b178 	.word	0x2001b178
   434c0:	2001d656 	.word	0x2001d656
   434c4:	05500200 	.word	0x05500200
   434c8:	0005d219 	.word	0x0005d219
   434cc:	0005d1bd 	.word	0x0005d1bd
   434d0:	0005bf14 	.word	0x0005bf14
   434d4:	0005d1d5 	.word	0x0005d1d5
   434d8:	0005d298 	.word	0x0005d298
   434dc:	0005d1de 	.word	0x0005d1de
   434e0:	2001ce86 	.word	0x2001ce86

000434e4 <encryptData>:
	for(loop = 0; loop < strLength; loop++)
   434e4:	2300      	movs	r3, #0
{
   434e6:	b510      	push	{r4, lr}
   434e8:	4a08      	ldr	r2, [pc, #32]	; (4350c <encryptData+0x28>)
	for(loop = 0; loop < strLength; loop++)
   434ea:	428b      	cmp	r3, r1
   434ec:	db09      	blt.n	43502 <encryptData+0x1e>
	printk("Finished converting!\n");
   434ee:	4808      	ldr	r0, [pc, #32]	; (43510 <encryptData+0x2c>)
   434f0:	f012 f911 	bl	55716 <printk>
	status = encrypt_aes_gcm();
   434f4:	f7ff feb2 	bl	4325c <encrypt_aes_gcm>
	if (status != 0) {
   434f8:	3800      	subs	r0, #0
   434fa:	bf18      	it	ne
   434fc:	2001      	movne	r0, #1
}
   434fe:	4240      	negs	r0, r0
   43500:	bd10      	pop	{r4, pc}
		m_plain_text[loop] = (uint8_t *)(str[loop]);
   43502:	5cc4      	ldrb	r4, [r0, r3]
	for(loop = 0; loop < strLength; loop++)
   43504:	3301      	adds	r3, #1
		m_plain_text[loop] = (uint8_t *)(str[loop]);
   43506:	f802 4b01 	strb.w	r4, [r2], #1
	for(loop = 0; loop < strLength; loop++)
   4350a:	e7ee      	b.n	434ea <encryptData+0x6>
   4350c:	2001ce86 	.word	0x2001ce86
   43510:	0005d228 	.word	0x0005d228

00043514 <decryptData>:
{
   43514:	b510      	push	{r4, lr}
	status = decrypt_aes_gcm();
   43516:	f7ff ff7d 	bl	43414 <decrypt_aes_gcm>
	if (status != 0) {
   4351a:	4604      	mov	r4, r0
   4351c:	b978      	cbnz	r0, 4353e <decryptData+0x2a>
	printk("%d", m_plain_text);
   4351e:	4909      	ldr	r1, [pc, #36]	; (43544 <decryptData+0x30>)
   43520:	4809      	ldr	r0, [pc, #36]	; (43548 <decryptData+0x34>)
   43522:	f012 f8f8 	bl	55716 <printk>
	printk("\n");
   43526:	4809      	ldr	r0, [pc, #36]	; (4354c <decryptData+0x38>)
   43528:	f012 f8f5 	bl	55716 <printk>
	printk("%d", m_decrypted_text);
   4352c:	4806      	ldr	r0, [pc, #24]	; (43548 <decryptData+0x34>)
   4352e:	4908      	ldr	r1, [pc, #32]	; (43550 <decryptData+0x3c>)
   43530:	f012 f8f1 	bl	55716 <printk>
	printk("\n");
   43534:	4805      	ldr	r0, [pc, #20]	; (4354c <decryptData+0x38>)
   43536:	f012 f8ee 	bl	55716 <printk>
}
   4353a:	4620      	mov	r0, r4
   4353c:	bd10      	pop	{r4, pc}
		return -1;
   4353e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   43542:	e7fa      	b.n	4353a <decryptData+0x26>
   43544:	2001ce86 	.word	0x2001ce86
   43548:	0005fd35 	.word	0x0005fd35
   4354c:	0005fc03 	.word	0x0005fc03
   43550:	2001bed6 	.word	0x2001bed6

00043554 <secure>:
{
   43554:	b530      	push	{r4, r5, lr}
	strcpy(all, "\n");
   43556:	4cd2      	ldr	r4, [pc, #840]	; (438a0 <secure+0x34c>)
{
   43558:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
	strcat(all, separator);
   4355c:	4dd1      	ldr	r5, [pc, #836]	; (438a4 <secure+0x350>)
	strcpy(all, "\n");
   4355e:	4621      	mov	r1, r4
   43560:	4668      	mov	r0, sp
   43562:	f017 fe61 	bl	5b228 <strcpy>
	strcat(all, separator);
   43566:	4629      	mov	r1, r5
   43568:	f44f 7216 	mov.w	r2, #600	; 0x258
   4356c:	4668      	mov	r0, sp
   4356e:	f017 fe36 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   43572:	4621      	mov	r1, r4
   43574:	f44f 7216 	mov.w	r2, #600	; 0x258
   43578:	4668      	mov	r0, sp
   4357a:	f017 fe30 	bl	5b1de <__strcat_chk>
	strcat(all, t1ID);
   4357e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43582:	4668      	mov	r0, sp
   43584:	49c8      	ldr	r1, [pc, #800]	; (438a8 <secure+0x354>)
   43586:	f017 fe2a 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   4358a:	4621      	mov	r1, r4
   4358c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43590:	4668      	mov	r0, sp
   43592:	f017 fe24 	bl	5b1de <__strcat_chk>
	strcat(all, t1MCC);
   43596:	f44f 7216 	mov.w	r2, #600	; 0x258
   4359a:	4668      	mov	r0, sp
   4359c:	49c3      	ldr	r1, [pc, #780]	; (438ac <secure+0x358>)
   4359e:	f017 fe1e 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   435a2:	4621      	mov	r1, r4
   435a4:	f44f 7216 	mov.w	r2, #600	; 0x258
   435a8:	4668      	mov	r0, sp
   435aa:	f017 fe18 	bl	5b1de <__strcat_chk>
	strcat(all, t1MNC);
   435ae:	f44f 7216 	mov.w	r2, #600	; 0x258
   435b2:	4668      	mov	r0, sp
   435b4:	49be      	ldr	r1, [pc, #760]	; (438b0 <secure+0x35c>)
   435b6:	f017 fe12 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   435ba:	4621      	mov	r1, r4
   435bc:	f44f 7216 	mov.w	r2, #600	; 0x258
   435c0:	4668      	mov	r0, sp
   435c2:	f017 fe0c 	bl	5b1de <__strcat_chk>
	strcat(all, t1TAC);
   435c6:	f44f 7216 	mov.w	r2, #600	; 0x258
   435ca:	4668      	mov	r0, sp
   435cc:	49b9      	ldr	r1, [pc, #740]	; (438b4 <secure+0x360>)
   435ce:	f017 fe06 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   435d2:	4621      	mov	r1, r4
   435d4:	f44f 7216 	mov.w	r2, #600	; 0x258
   435d8:	4668      	mov	r0, sp
   435da:	f017 fe00 	bl	5b1de <__strcat_chk>
	strcat(all, t1TA);
   435de:	f44f 7216 	mov.w	r2, #600	; 0x258
   435e2:	4668      	mov	r0, sp
   435e4:	49b4      	ldr	r1, [pc, #720]	; (438b8 <secure+0x364>)
   435e6:	f017 fdfa 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   435ea:	4621      	mov	r1, r4
   435ec:	f44f 7216 	mov.w	r2, #600	; 0x258
   435f0:	4668      	mov	r0, sp
   435f2:	f017 fdf4 	bl	5b1de <__strcat_chk>
	strcat(all, t1COPS);
   435f6:	f44f 7216 	mov.w	r2, #600	; 0x258
   435fa:	4668      	mov	r0, sp
   435fc:	49af      	ldr	r1, [pc, #700]	; (438bc <secure+0x368>)
   435fe:	f017 fdee 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   43602:	4621      	mov	r1, r4
   43604:	f44f 7216 	mov.w	r2, #600	; 0x258
   43608:	4668      	mov	r0, sp
   4360a:	f017 fde8 	bl	5b1de <__strcat_chk>
	strcat(all, t1RSRP);
   4360e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43612:	4668      	mov	r0, sp
   43614:	49aa      	ldr	r1, [pc, #680]	; (438c0 <secure+0x36c>)
   43616:	f017 fde2 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   4361a:	4621      	mov	r1, r4
   4361c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43620:	4668      	mov	r0, sp
   43622:	f017 fddc 	bl	5b1de <__strcat_chk>
	strcat(all, t1RSRQ);
   43626:	f44f 7216 	mov.w	r2, #600	; 0x258
   4362a:	4668      	mov	r0, sp
   4362c:	49a5      	ldr	r1, [pc, #660]	; (438c4 <secure+0x370>)
   4362e:	f017 fdd6 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   43632:	4621      	mov	r1, r4
   43634:	f44f 7216 	mov.w	r2, #600	; 0x258
   43638:	4668      	mov	r0, sp
   4363a:	f017 fdd0 	bl	5b1de <__strcat_chk>
	strcat(all, t1SNR);
   4363e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43642:	4668      	mov	r0, sp
   43644:	49a0      	ldr	r1, [pc, #640]	; (438c8 <secure+0x374>)
   43646:	f017 fdca 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   4364a:	4621      	mov	r1, r4
   4364c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43650:	4668      	mov	r0, sp
   43652:	f017 fdc4 	bl	5b1de <__strcat_chk>
	strcat(all, t1Band);
   43656:	f44f 7216 	mov.w	r2, #600	; 0x258
   4365a:	4668      	mov	r0, sp
   4365c:	499b      	ldr	r1, [pc, #620]	; (438cc <secure+0x378>)
   4365e:	f017 fdbe 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   43662:	4621      	mov	r1, r4
   43664:	f44f 7216 	mov.w	r2, #600	; 0x258
   43668:	4668      	mov	r0, sp
   4366a:	f017 fdb8 	bl	5b1de <__strcat_chk>
	strcat(all, t2ID);
   4366e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43672:	4668      	mov	r0, sp
   43674:	4996      	ldr	r1, [pc, #600]	; (438d0 <secure+0x37c>)
   43676:	f017 fdb2 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   4367a:	4621      	mov	r1, r4
   4367c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43680:	4668      	mov	r0, sp
   43682:	f017 fdac 	bl	5b1de <__strcat_chk>
	strcat(all, t2MCC);
   43686:	f44f 7216 	mov.w	r2, #600	; 0x258
   4368a:	4668      	mov	r0, sp
   4368c:	4991      	ldr	r1, [pc, #580]	; (438d4 <secure+0x380>)
   4368e:	f017 fda6 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   43692:	4621      	mov	r1, r4
   43694:	f44f 7216 	mov.w	r2, #600	; 0x258
   43698:	4668      	mov	r0, sp
   4369a:	f017 fda0 	bl	5b1de <__strcat_chk>
	strcat(all, t2MNC);
   4369e:	f44f 7216 	mov.w	r2, #600	; 0x258
   436a2:	4668      	mov	r0, sp
   436a4:	498c      	ldr	r1, [pc, #560]	; (438d8 <secure+0x384>)
   436a6:	f017 fd9a 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   436aa:	4621      	mov	r1, r4
   436ac:	f44f 7216 	mov.w	r2, #600	; 0x258
   436b0:	4668      	mov	r0, sp
   436b2:	f017 fd94 	bl	5b1de <__strcat_chk>
	strcat(all, t2TAC);
   436b6:	f44f 7216 	mov.w	r2, #600	; 0x258
   436ba:	4668      	mov	r0, sp
   436bc:	4987      	ldr	r1, [pc, #540]	; (438dc <secure+0x388>)
   436be:	f017 fd8e 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   436c2:	4621      	mov	r1, r4
   436c4:	f44f 7216 	mov.w	r2, #600	; 0x258
   436c8:	4668      	mov	r0, sp
   436ca:	f017 fd88 	bl	5b1de <__strcat_chk>
	strcat(all, t2TA);
   436ce:	f44f 7216 	mov.w	r2, #600	; 0x258
   436d2:	4668      	mov	r0, sp
   436d4:	4982      	ldr	r1, [pc, #520]	; (438e0 <secure+0x38c>)
   436d6:	f017 fd82 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   436da:	4621      	mov	r1, r4
   436dc:	f44f 7216 	mov.w	r2, #600	; 0x258
   436e0:	4668      	mov	r0, sp
   436e2:	f017 fd7c 	bl	5b1de <__strcat_chk>
	strcat(all, t2COPS);
   436e6:	f44f 7216 	mov.w	r2, #600	; 0x258
   436ea:	4668      	mov	r0, sp
   436ec:	497d      	ldr	r1, [pc, #500]	; (438e4 <secure+0x390>)
   436ee:	f017 fd76 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   436f2:	4621      	mov	r1, r4
   436f4:	f44f 7216 	mov.w	r2, #600	; 0x258
   436f8:	4668      	mov	r0, sp
   436fa:	f017 fd70 	bl	5b1de <__strcat_chk>
	strcat(all, t2RSRP);
   436fe:	f44f 7216 	mov.w	r2, #600	; 0x258
   43702:	4668      	mov	r0, sp
   43704:	4978      	ldr	r1, [pc, #480]	; (438e8 <secure+0x394>)
   43706:	f017 fd6a 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   4370a:	4621      	mov	r1, r4
   4370c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43710:	4668      	mov	r0, sp
   43712:	f017 fd64 	bl	5b1de <__strcat_chk>
	strcat(all, t2RSRQ);
   43716:	f44f 7216 	mov.w	r2, #600	; 0x258
   4371a:	4668      	mov	r0, sp
   4371c:	4973      	ldr	r1, [pc, #460]	; (438ec <secure+0x398>)
   4371e:	f017 fd5e 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   43722:	4621      	mov	r1, r4
   43724:	f44f 7216 	mov.w	r2, #600	; 0x258
   43728:	4668      	mov	r0, sp
   4372a:	f017 fd58 	bl	5b1de <__strcat_chk>
	strcat(all, t2SNR);
   4372e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43732:	4668      	mov	r0, sp
   43734:	496e      	ldr	r1, [pc, #440]	; (438f0 <secure+0x39c>)
   43736:	f017 fd52 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   4373a:	4621      	mov	r1, r4
   4373c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43740:	4668      	mov	r0, sp
   43742:	f017 fd4c 	bl	5b1de <__strcat_chk>
	strcat(all, t2Band);
   43746:	f44f 7216 	mov.w	r2, #600	; 0x258
   4374a:	4668      	mov	r0, sp
   4374c:	4969      	ldr	r1, [pc, #420]	; (438f4 <secure+0x3a0>)
   4374e:	f017 fd46 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   43752:	4621      	mov	r1, r4
   43754:	f44f 7216 	mov.w	r2, #600	; 0x258
   43758:	4668      	mov	r0, sp
   4375a:	f017 fd40 	bl	5b1de <__strcat_chk>
	strcat(all, t3ID);
   4375e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43762:	4668      	mov	r0, sp
   43764:	4964      	ldr	r1, [pc, #400]	; (438f8 <secure+0x3a4>)
   43766:	f017 fd3a 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   4376a:	4621      	mov	r1, r4
   4376c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43770:	4668      	mov	r0, sp
   43772:	f017 fd34 	bl	5b1de <__strcat_chk>
	strcat(all, t3MCC);
   43776:	f44f 7216 	mov.w	r2, #600	; 0x258
   4377a:	4668      	mov	r0, sp
   4377c:	495f      	ldr	r1, [pc, #380]	; (438fc <secure+0x3a8>)
   4377e:	f017 fd2e 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   43782:	4621      	mov	r1, r4
   43784:	f44f 7216 	mov.w	r2, #600	; 0x258
   43788:	4668      	mov	r0, sp
   4378a:	f017 fd28 	bl	5b1de <__strcat_chk>
	strcat(all, t3MNC);
   4378e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43792:	4668      	mov	r0, sp
   43794:	495a      	ldr	r1, [pc, #360]	; (43900 <secure+0x3ac>)
   43796:	f017 fd22 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   4379a:	4621      	mov	r1, r4
   4379c:	f44f 7216 	mov.w	r2, #600	; 0x258
   437a0:	4668      	mov	r0, sp
   437a2:	f017 fd1c 	bl	5b1de <__strcat_chk>
	strcat(all, t3TAC);
   437a6:	f44f 7216 	mov.w	r2, #600	; 0x258
   437aa:	4668      	mov	r0, sp
   437ac:	4955      	ldr	r1, [pc, #340]	; (43904 <secure+0x3b0>)
   437ae:	f017 fd16 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   437b2:	4621      	mov	r1, r4
   437b4:	f44f 7216 	mov.w	r2, #600	; 0x258
   437b8:	4668      	mov	r0, sp
   437ba:	f017 fd10 	bl	5b1de <__strcat_chk>
	strcat(all, t3TA);
   437be:	f44f 7216 	mov.w	r2, #600	; 0x258
   437c2:	4668      	mov	r0, sp
   437c4:	4950      	ldr	r1, [pc, #320]	; (43908 <secure+0x3b4>)
   437c6:	f017 fd0a 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   437ca:	4621      	mov	r1, r4
   437cc:	f44f 7216 	mov.w	r2, #600	; 0x258
   437d0:	4668      	mov	r0, sp
   437d2:	f017 fd04 	bl	5b1de <__strcat_chk>
	strcat(all, t3COPS);
   437d6:	f44f 7216 	mov.w	r2, #600	; 0x258
   437da:	4668      	mov	r0, sp
   437dc:	494b      	ldr	r1, [pc, #300]	; (4390c <secure+0x3b8>)
   437de:	f017 fcfe 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   437e2:	4621      	mov	r1, r4
   437e4:	f44f 7216 	mov.w	r2, #600	; 0x258
   437e8:	4668      	mov	r0, sp
   437ea:	f017 fcf8 	bl	5b1de <__strcat_chk>
	strcat(all, t3RSRP);
   437ee:	f44f 7216 	mov.w	r2, #600	; 0x258
   437f2:	4668      	mov	r0, sp
   437f4:	4946      	ldr	r1, [pc, #280]	; (43910 <secure+0x3bc>)
   437f6:	f017 fcf2 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   437fa:	4621      	mov	r1, r4
   437fc:	f44f 7216 	mov.w	r2, #600	; 0x258
   43800:	4668      	mov	r0, sp
   43802:	f017 fcec 	bl	5b1de <__strcat_chk>
	strcat(all, t3RSRQ);
   43806:	f44f 7216 	mov.w	r2, #600	; 0x258
   4380a:	4668      	mov	r0, sp
   4380c:	4941      	ldr	r1, [pc, #260]	; (43914 <secure+0x3c0>)
   4380e:	f017 fce6 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   43812:	4621      	mov	r1, r4
   43814:	f44f 7216 	mov.w	r2, #600	; 0x258
   43818:	4668      	mov	r0, sp
   4381a:	f017 fce0 	bl	5b1de <__strcat_chk>
	strcat(all, t3SNR);
   4381e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43822:	4668      	mov	r0, sp
   43824:	493c      	ldr	r1, [pc, #240]	; (43918 <secure+0x3c4>)
   43826:	f017 fcda 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   4382a:	4621      	mov	r1, r4
   4382c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43830:	4668      	mov	r0, sp
   43832:	f017 fcd4 	bl	5b1de <__strcat_chk>
	strcat(all, t3Band);
   43836:	f44f 7216 	mov.w	r2, #600	; 0x258
   4383a:	4668      	mov	r0, sp
   4383c:	4937      	ldr	r1, [pc, #220]	; (4391c <secure+0x3c8>)
   4383e:	f017 fcce 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   43842:	4621      	mov	r1, r4
   43844:	f44f 7216 	mov.w	r2, #600	; 0x258
   43848:	4668      	mov	r0, sp
   4384a:	f017 fcc8 	bl	5b1de <__strcat_chk>
	strcat(all, time);
   4384e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43852:	4668      	mov	r0, sp
   43854:	4932      	ldr	r1, [pc, #200]	; (43920 <secure+0x3cc>)
   43856:	f017 fcc2 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   4385a:	4621      	mov	r1, r4
   4385c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43860:	4668      	mov	r0, sp
   43862:	f017 fcbc 	bl	5b1de <__strcat_chk>
	strcat(all, separator);
   43866:	4629      	mov	r1, r5
   43868:	f44f 7216 	mov.w	r2, #600	; 0x258
   4386c:	4668      	mov	r0, sp
   4386e:	f017 fcb6 	bl	5b1de <__strcat_chk>
	strcat(all, "\n");
   43872:	f44f 7216 	mov.w	r2, #600	; 0x258
   43876:	4621      	mov	r1, r4
   43878:	4668      	mov	r0, sp
   4387a:	f017 fcb0 	bl	5b1de <__strcat_chk>
	printk("End copying to all!\n");
   4387e:	4829      	ldr	r0, [pc, #164]	; (43924 <secure+0x3d0>)
   43880:	f011 ff49 	bl	55716 <printk>
	printk("all: %s", all);
   43884:	4669      	mov	r1, sp
   43886:	4828      	ldr	r0, [pc, #160]	; (43928 <secure+0x3d4>)
   43888:	f011 ff45 	bl	55716 <printk>
	encryptData(all, strlen(all));
   4388c:	4668      	mov	r0, sp
   4388e:	f7fd fab1 	bl	40df4 <strlen>
   43892:	4601      	mov	r1, r0
   43894:	4668      	mov	r0, sp
   43896:	f7ff fe25 	bl	434e4 <encryptData>
}
   4389a:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   4389e:	bd30      	pop	{r4, r5, pc}
   438a0:	0005fc03 	.word	0x0005fc03
   438a4:	0005d23e 	.word	0x0005d23e
   438a8:	2001dce9 	.word	0x2001dce9
   438ac:	2001dcdd 	.word	0x2001dcdd
   438b0:	2001dcd1 	.word	0x2001dcd1
   438b4:	2001dcc5 	.word	0x2001dcc5
   438b8:	2001dcb9 	.word	0x2001dcb9
   438bc:	2001dca0 	.word	0x2001dca0
   438c0:	2001dc94 	.word	0x2001dc94
   438c4:	2001dc88 	.word	0x2001dc88
   438c8:	2001daf8 	.word	0x2001daf8
   438cc:	2001dac6 	.word	0x2001dac6
   438d0:	2001dab7 	.word	0x2001dab7
   438d4:	2001daab 	.word	0x2001daab
   438d8:	2001da9f 	.word	0x2001da9f
   438dc:	2001da93 	.word	0x2001da93
   438e0:	2001da87 	.word	0x2001da87
   438e4:	2001da6e 	.word	0x2001da6e
   438e8:	2001da62 	.word	0x2001da62
   438ec:	2001da56 	.word	0x2001da56
   438f0:	2001d8c6 	.word	0x2001d8c6
   438f4:	2001d894 	.word	0x2001d894
   438f8:	2001d885 	.word	0x2001d885
   438fc:	2001d879 	.word	0x2001d879
   43900:	2001d86d 	.word	0x2001d86d
   43904:	2001d861 	.word	0x2001d861
   43908:	2001d855 	.word	0x2001d855
   4390c:	2001d83c 	.word	0x2001d83c
   43910:	2001d830 	.word	0x2001d830
   43914:	2001d824 	.word	0x2001d824
   43918:	2001d694 	.word	0x2001d694
   4391c:	2001d662 	.word	0x2001d662
   43920:	2001ddf8 	.word	0x2001ddf8
   43924:	0005d26b 	.word	0x0005d26b
   43928:	0005d280 	.word	0x0005d280

0004392c <changeCOPS>:
{
   4392c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4392e:	b099      	sub	sp, #100	; 0x64
	char cmd[25] = "AT+COPS=1,2,\"";
   43930:	aa01      	add	r2, sp, #4
{
   43932:	4606      	mov	r6, r0
   43934:	4615      	mov	r5, r2
	char cmd[25] = "AT+COPS=1,2,\"";
   43936:	4b15      	ldr	r3, [pc, #84]	; (4398c <changeCOPS+0x60>)
   43938:	f103 0708 	add.w	r7, r3, #8
   4393c:	4614      	mov	r4, r2
   4393e:	6818      	ldr	r0, [r3, #0]
   43940:	6859      	ldr	r1, [r3, #4]
   43942:	3308      	adds	r3, #8
   43944:	c403      	stmia	r4!, {r0, r1}
   43946:	42bb      	cmp	r3, r7
   43948:	4622      	mov	r2, r4
   4394a:	d1f7      	bne.n	4393c <changeCOPS+0x10>
   4394c:	6818      	ldr	r0, [r3, #0]
   4394e:	889b      	ldrh	r3, [r3, #4]
   43950:	6020      	str	r0, [r4, #0]
   43952:	80a3      	strh	r3, [r4, #4]
   43954:	2300      	movs	r3, #0
	strcat(cmd,opName);
   43956:	4631      	mov	r1, r6
   43958:	2219      	movs	r2, #25
   4395a:	4628      	mov	r0, r5
	char cmd[25] = "AT+COPS=1,2,\"";
   4395c:	f8cd 3016 	str.w	r3, [sp, #22]
   43960:	f8cd 3012 	str.w	r3, [sp, #18]
   43964:	f8cd 3019 	str.w	r3, [sp, #25]
	strcat(cmd,opName);
   43968:	f017 fc39 	bl	5b1de <__strcat_chk>
	strcat(cmd,"\"");
   4396c:	2219      	movs	r2, #25
   4396e:	4628      	mov	r0, r5
   43970:	4907      	ldr	r1, [pc, #28]	; (43990 <changeCOPS+0x64>)
   43972:	f017 fc34 	bl	5b1de <__strcat_chk>
    err = nrf_modem_at_cmd(response, sizeof(response), cmd);
   43976:	462a      	mov	r2, r5
   43978:	2140      	movs	r1, #64	; 0x40
   4397a:	a808      	add	r0, sp, #32
   4397c:	f00d fe0e 	bl	5159c <nrf_modem_at_cmd>
    printk("Modem response:\n%s", response);
   43980:	4804      	ldr	r0, [pc, #16]	; (43994 <changeCOPS+0x68>)
   43982:	a908      	add	r1, sp, #32
   43984:	f011 fec7 	bl	55716 <printk>
}
   43988:	b019      	add	sp, #100	; 0x64
   4398a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4398c:	0005bffc 	.word	0x0005bffc
   43990:	0005ed54 	.word	0x0005ed54
   43994:	0005d288 	.word	0x0005d288

00043998 <getTime>:
}

//get the time from the towers
//if this is not collected, the board
void getTime(void)
{
   43998:	b530      	push	{r4, r5, lr}
   4399a:	b0a1      	sub	sp, #132	; 0x84
	int err;
    char response[64];

	//clock command
	err = nrf_modem_at_cmd(response, sizeof(response), "AT+CCLK?");
   4399c:	2140      	movs	r1, #64	; 0x40
   4399e:	4a19      	ldr	r2, [pc, #100]	; (43a04 <getTime+0x6c>)
   439a0:	4668      	mov	r0, sp
   439a2:	f00d fdfb 	bl	5159c <nrf_modem_at_cmd>
        //error
    }

	int dataSize = 64;
	char data[dataSize];
	strcpy(data,response);
   439a6:	2240      	movs	r2, #64	; 0x40
   439a8:	4669      	mov	r1, sp
   439aa:	eb0d 0002 	add.w	r0, sp, r2
   439ae:	f017 fc43 	bl	5b238 <__strcpy_chk>
	int data_length = strlen(data);
   439b2:	a810      	add	r0, sp, #64	; 0x40
   439b4:	f7fd fa1e 	bl	40df4 <strlen>
				//printk("%c", data[loop]);
			}
			//set all other characters to underscore
			else
			{
				data[loop] = '_';
   439b8:	245f      	movs	r4, #95	; 0x5f
		for(loop = 0; loop < data_length; loop++)
   439ba:	2100      	movs	r1, #0
   439bc:	aa10      	add	r2, sp, #64	; 0x40
   439be:	4281      	cmp	r1, r0
   439c0:	db0a      	blt.n	439d8 <getTime+0x40>
			}
		}

		strcpy(time,data);	
   439c2:	2232      	movs	r2, #50	; 0x32
   439c4:	a910      	add	r1, sp, #64	; 0x40
   439c6:	4810      	ldr	r0, [pc, #64]	; (43a08 <getTime+0x70>)
   439c8:	f017 fc36 	bl	5b238 <__strcpy_chk>
		printk("Time: %s", time);
   439cc:	490e      	ldr	r1, [pc, #56]	; (43a08 <getTime+0x70>)
   439ce:	480f      	ldr	r0, [pc, #60]	; (43a0c <getTime+0x74>)
   439d0:	f011 fea1 	bl	55716 <printk>

    //printk("Modem response:\n%s", response);
}
   439d4:	b021      	add	sp, #132	; 0x84
   439d6:	bd30      	pop	{r4, r5, pc}
			if( (data[loop] >= 'a' && data[loop] <= 'z') 
   439d8:	7813      	ldrb	r3, [r2, #0]
   439da:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
   439de:	2d19      	cmp	r5, #25
   439e0:	d90c      	bls.n	439fc <getTime+0x64>
   439e2:	2b3a      	cmp	r3, #58	; 0x3a
   439e4:	d807      	bhi.n	439f6 <getTime+0x5e>
   439e6:	2b2e      	cmp	r3, #46	; 0x2e
   439e8:	d808      	bhi.n	439fc <getTime+0x64>
   439ea:	2b0a      	cmp	r3, #10
   439ec:	d006      	beq.n	439fc <getTime+0x64>
   439ee:	2b2b      	cmp	r3, #43	; 0x2b
   439f0:	d004      	beq.n	439fc <getTime+0x64>
				data[loop] = '_';
   439f2:	7014      	strb	r4, [r2, #0]
   439f4:	e002      	b.n	439fc <getTime+0x64>
   439f6:	3b41      	subs	r3, #65	; 0x41
   439f8:	2b19      	cmp	r3, #25
   439fa:	d8fa      	bhi.n	439f2 <getTime+0x5a>
		for(loop = 0; loop < data_length; loop++)
   439fc:	3101      	adds	r1, #1
   439fe:	3201      	adds	r2, #1
   43a00:	e7dd      	b.n	439be <getTime+0x26>
   43a02:	bf00      	nop
   43a04:	0005d29b 	.word	0x0005d29b
   43a08:	2001ddf8 	.word	0x2001ddf8
   43a0c:	0005d2a4 	.word	0x0005d2a4

00043a10 <getBand>:

//get the band info
//hopefully it works
void getBand(void)
{
   43a10:	b530      	push	{r4, r5, lr}
   43a12:	b0a1      	sub	sp, #132	; 0x84
	int err;
    char response[64];

	//clock command
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XCBAND");
   43a14:	2140      	movs	r1, #64	; 0x40
   43a16:	4a2a      	ldr	r2, [pc, #168]	; (43ac0 <getBand+0xb0>)
   43a18:	4668      	mov	r0, sp
   43a1a:	f00d fdbf 	bl	5159c <nrf_modem_at_cmd>
        //error
    }

	int dataSize = 64;
	char data[dataSize];
	strcpy(data,response);
   43a1e:	2240      	movs	r2, #64	; 0x40
   43a20:	4669      	mov	r1, sp
   43a22:	eb0d 0002 	add.w	r0, sp, r2
   43a26:	f017 fc07 	bl	5b238 <__strcpy_chk>
	int data_length = strlen(data);
   43a2a:	a810      	add	r0, sp, #64	; 0x40
   43a2c:	f7fd f9e2 	bl	40df4 <strlen>
				//printk("%c", data[loop]);
			}
			//set all other characters to underscore
			else
			{
				data[loop] = '_';
   43a30:	245f      	movs	r4, #95	; 0x5f
		for(loop = 0; loop < data_length; loop++)
   43a32:	2100      	movs	r1, #0
   43a34:	aa10      	add	r2, sp, #64	; 0x40
   43a36:	4281      	cmp	r1, r0
   43a38:	db17      	blt.n	43a6a <getBand+0x5a>
			}
		}

		//strcpy(time,data);	
		//printk("Time: %s", time);
		if(strcmp(t1Band, "noBand1") == 0)
   43a3a:	4922      	ldr	r1, [pc, #136]	; (43ac4 <getBand+0xb4>)
   43a3c:	4822      	ldr	r0, [pc, #136]	; (43ac8 <getBand+0xb8>)
   43a3e:	f7fd f9cf 	bl	40de0 <strcmp>
   43a42:	bb38      	cbnz	r0, 43a94 <getBand+0x84>
		{
			strcpy(t1Band, data);
   43a44:	2232      	movs	r2, #50	; 0x32
   43a46:	4820      	ldr	r0, [pc, #128]	; (43ac8 <getBand+0xb8>)
   43a48:	a910      	add	r1, sp, #64	; 0x40
		}

		else if(strcmp(t2Band, "noBand2") == 0)
		{
			strcpy(t2Band, data);
   43a4a:	f017 fbf5 	bl	5b238 <__strcpy_chk>
		else
		{
			printk("Band not stored");
		}

		printk("tower 1 band: %s\n", t1Band);
   43a4e:	491e      	ldr	r1, [pc, #120]	; (43ac8 <getBand+0xb8>)
   43a50:	481e      	ldr	r0, [pc, #120]	; (43acc <getBand+0xbc>)
   43a52:	f011 fe60 	bl	55716 <printk>
		printk("tower 2 band: %s\n", t2Band);
   43a56:	491e      	ldr	r1, [pc, #120]	; (43ad0 <getBand+0xc0>)
   43a58:	481e      	ldr	r0, [pc, #120]	; (43ad4 <getBand+0xc4>)
   43a5a:	f011 fe5c 	bl	55716 <printk>
		printk("tower 3 band: %s\n", t3Band);
   43a5e:	491e      	ldr	r1, [pc, #120]	; (43ad8 <getBand+0xc8>)
   43a60:	481e      	ldr	r0, [pc, #120]	; (43adc <getBand+0xcc>)
   43a62:	f011 fe58 	bl	55716 <printk>


    //printk("Modem response:\n%s", response);
}
   43a66:	b021      	add	sp, #132	; 0x84
   43a68:	bd30      	pop	{r4, r5, pc}
			if( (data[loop] >= 'a' && data[loop] <= 'z') 
   43a6a:	7813      	ldrb	r3, [r2, #0]
   43a6c:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
   43a70:	2d19      	cmp	r5, #25
   43a72:	d90c      	bls.n	43a8e <getBand+0x7e>
   43a74:	2b3a      	cmp	r3, #58	; 0x3a
   43a76:	d807      	bhi.n	43a88 <getBand+0x78>
   43a78:	2b2e      	cmp	r3, #46	; 0x2e
   43a7a:	d808      	bhi.n	43a8e <getBand+0x7e>
   43a7c:	2b0a      	cmp	r3, #10
   43a7e:	d006      	beq.n	43a8e <getBand+0x7e>
   43a80:	2b2b      	cmp	r3, #43	; 0x2b
   43a82:	d004      	beq.n	43a8e <getBand+0x7e>
				data[loop] = '_';
   43a84:	7014      	strb	r4, [r2, #0]
   43a86:	e002      	b.n	43a8e <getBand+0x7e>
   43a88:	3b41      	subs	r3, #65	; 0x41
   43a8a:	2b19      	cmp	r3, #25
   43a8c:	d8fa      	bhi.n	43a84 <getBand+0x74>
		for(loop = 0; loop < data_length; loop++)
   43a8e:	3101      	adds	r1, #1
   43a90:	3201      	adds	r2, #1
   43a92:	e7d0      	b.n	43a36 <getBand+0x26>
		else if(strcmp(t2Band, "noBand2") == 0)
   43a94:	4912      	ldr	r1, [pc, #72]	; (43ae0 <getBand+0xd0>)
   43a96:	480e      	ldr	r0, [pc, #56]	; (43ad0 <getBand+0xc0>)
   43a98:	f7fd f9a2 	bl	40de0 <strcmp>
   43a9c:	b918      	cbnz	r0, 43aa6 <getBand+0x96>
			strcpy(t2Band, data);
   43a9e:	2232      	movs	r2, #50	; 0x32
   43aa0:	480b      	ldr	r0, [pc, #44]	; (43ad0 <getBand+0xc0>)
   43aa2:	a910      	add	r1, sp, #64	; 0x40
   43aa4:	e7d1      	b.n	43a4a <getBand+0x3a>
		else if(strcmp(t3Band, "noBand3") == 0)
   43aa6:	490f      	ldr	r1, [pc, #60]	; (43ae4 <getBand+0xd4>)
   43aa8:	480b      	ldr	r0, [pc, #44]	; (43ad8 <getBand+0xc8>)
   43aaa:	f7fd f999 	bl	40de0 <strcmp>
   43aae:	b918      	cbnz	r0, 43ab8 <getBand+0xa8>
			strcpy(t3Band, data);
   43ab0:	2232      	movs	r2, #50	; 0x32
   43ab2:	4809      	ldr	r0, [pc, #36]	; (43ad8 <getBand+0xc8>)
   43ab4:	a910      	add	r1, sp, #64	; 0x40
   43ab6:	e7c8      	b.n	43a4a <getBand+0x3a>
			printk("Band not stored");
   43ab8:	480b      	ldr	r0, [pc, #44]	; (43ae8 <getBand+0xd8>)
   43aba:	f011 fe2c 	bl	55716 <printk>
   43abe:	e7c6      	b.n	43a4e <getBand+0x3e>
   43ac0:	0005d2ad 	.word	0x0005d2ad
   43ac4:	0005d13e 	.word	0x0005d13e
   43ac8:	2001dac6 	.word	0x2001dac6
   43acc:	0005d2c8 	.word	0x0005d2c8
   43ad0:	2001d894 	.word	0x2001d894
   43ad4:	0005d2da 	.word	0x0005d2da
   43ad8:	2001d662 	.word	0x2001d662
   43adc:	0005d2ec 	.word	0x0005d2ec
   43ae0:	0005d146 	.word	0x0005d146
   43ae4:	0005d14e 	.word	0x0005d14e
   43ae8:	0005d2b8 	.word	0x0005d2b8

00043aec <button1>:
 * button 3 does nothing
 * button 4 wakes the board up
*/

void button1(void)
{
   43aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	printk("button 1 \n");
   43aee:	4814      	ldr	r0, [pc, #80]	; (43b40 <button1+0x54>)
   43af0:	f011 fe11 	bl	55716 <printk>
   43af4:	4b13      	ldr	r3, [pc, #76]	; (43b44 <button1+0x58>)
   43af6:	e8d3 3faf 	lda	r3, [r3]
	//blinkTimes(5);
	//lsdir(disk_mount_pt);
	//cfun_q();
	
	if (!atomic_get(&connected)) 
   43afa:	b96b      	cbnz	r3, 43b18 <button1+0x2c>
	{
		LOG_INF("Ignoring button press, not connected to network");
   43afc:	4a12      	ldr	r2, [pc, #72]	; (43b48 <button1+0x5c>)
   43afe:	4618      	mov	r0, r3
   43b00:	e9cd 3201 	strd	r3, r2, [sp, #4]
   43b04:	4911      	ldr	r1, [pc, #68]	; (43b4c <button1+0x60>)
   43b06:	2203      	movs	r2, #3
   43b08:	9300      	str	r3, [sp, #0]
   43b0a:	f011 fd4c 	bl	555a6 <z_log_msg_runtime_create.constprop.0>

	getBand();

	//readCOPS();
	//testCOPS();
}
   43b0e:	b005      	add	sp, #20
   43b10:	f85d eb04 	ldr.w	lr, [sp], #4
		Tower_Read_Fail_Change();
   43b14:	f7ff b8fa 	b.w	42d0c <Tower_Read_Fail_Change>
	LOG_INF("Button 1 pressed, starting cell measurements");
   43b18:	4b0d      	ldr	r3, [pc, #52]	; (43b50 <button1+0x64>)
   43b1a:	2203      	movs	r2, #3
   43b1c:	9302      	str	r3, [sp, #8]
   43b1e:	2300      	movs	r3, #0
   43b20:	490a      	ldr	r1, [pc, #40]	; (43b4c <button1+0x60>)
   43b22:	4618      	mov	r0, r3
   43b24:	e9cd 3300 	strd	r3, r3, [sp]
   43b28:	f011 fd3d 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
	start_cell_measurements();
   43b2c:	f7fe ffe2 	bl	42af4 <start_cell_measurements>
	getTime();
   43b30:	f7ff ff32 	bl	43998 <getTime>
}
   43b34:	b005      	add	sp, #20
   43b36:	f85d eb04 	ldr.w	lr, [sp], #4
	getBand();
   43b3a:	f7ff bf69 	b.w	43a10 <getBand>
   43b3e:	bf00      	nop
   43b40:	0005d2fe 	.word	0x0005d2fe
   43b44:	2001b28c 	.word	0x2001b28c
   43b48:	0005d309 	.word	0x0005d309
   43b4c:	0005bf14 	.word	0x0005bf14
   43b50:	0005d339 	.word	0x0005d339

00043b54 <button2>:

void button2(void)
{
   43b54:	b510      	push	{r4, lr}
	printk("button 2 \n");
   43b56:	48bc      	ldr	r0, [pc, #752]	; (43e48 <button2+0x2f4>)
   43b58:	f011 fddd 	bl	55716 <printk>
	//print_cell_data();
	//blinkTimes(5);

	//print the collected towers
	printk("Tower 1: %s\n", t1ID);
   43b5c:	49bb      	ldr	r1, [pc, #748]	; (43e4c <button2+0x2f8>)
   43b5e:	48bc      	ldr	r0, [pc, #752]	; (43e50 <button2+0x2fc>)
   43b60:	f011 fdd9 	bl	55716 <printk>
	printk("Tower 2: %s\n", t2ID);
   43b64:	49bb      	ldr	r1, [pc, #748]	; (43e54 <button2+0x300>)
   43b66:	48bc      	ldr	r0, [pc, #752]	; (43e58 <button2+0x304>)
   43b68:	f011 fdd5 	bl	55716 <printk>
	printk("Tower 3: %s\n", t3ID);
   43b6c:	49bb      	ldr	r1, [pc, #748]	; (43e5c <button2+0x308>)
   43b6e:	48bc      	ldr	r0, [pc, #752]	; (43e60 <button2+0x30c>)
   43b70:	f011 fdd1 	bl	55716 <printk>
	
	//fix the strings so they print right
	if((strcmp(t1ID, "empty") == 0))
   43b74:	49bb      	ldr	r1, [pc, #748]	; (43e64 <button2+0x310>)
   43b76:	48b5      	ldr	r0, [pc, #724]	; (43e4c <button2+0x2f8>)
   43b78:	f7fd f932 	bl	40de0 <strcmp>
   43b7c:	b918      	cbnz	r0, 43b86 <button2+0x32>
	{
		strcpy(t1ID, "empty\n");
   43b7e:	49ba      	ldr	r1, [pc, #744]	; (43e68 <button2+0x314>)
   43b80:	48b2      	ldr	r0, [pc, #712]	; (43e4c <button2+0x2f8>)
   43b82:	f017 fb51 	bl	5b228 <strcpy>
	}

	if((strcmp(t2ID, "empty") == 0))
   43b86:	49b7      	ldr	r1, [pc, #732]	; (43e64 <button2+0x310>)
   43b88:	48b2      	ldr	r0, [pc, #712]	; (43e54 <button2+0x300>)
   43b8a:	f7fd f929 	bl	40de0 <strcmp>
   43b8e:	b918      	cbnz	r0, 43b98 <button2+0x44>
	{
		strcpy(t2ID, "empty\n");
   43b90:	49b5      	ldr	r1, [pc, #724]	; (43e68 <button2+0x314>)
   43b92:	48b0      	ldr	r0, [pc, #704]	; (43e54 <button2+0x300>)
   43b94:	f017 fb48 	bl	5b228 <strcpy>
	}

	if((strcmp(t3ID, "empty") == 0))
   43b98:	49b2      	ldr	r1, [pc, #712]	; (43e64 <button2+0x310>)
   43b9a:	48b0      	ldr	r0, [pc, #704]	; (43e5c <button2+0x308>)
   43b9c:	f7fd f920 	bl	40de0 <strcmp>
   43ba0:	b918      	cbnz	r0, 43baa <button2+0x56>
	{
		strcpy(t3ID, "empty\n");
   43ba2:	49b1      	ldr	r1, [pc, #708]	; (43e68 <button2+0x314>)
   43ba4:	48ad      	ldr	r0, [pc, #692]	; (43e5c <button2+0x308>)
   43ba6:	f017 fb3f 	bl	5b228 <strcpy>
	}

	//get the current time
	getTime();
   43baa:	f7ff fef5 	bl	43998 <getTime>

	//put all the strings into a text file
	AppendString(testTxt, separator, strlen(separator), false);
   43bae:	48af      	ldr	r0, [pc, #700]	; (43e6c <button2+0x318>)
   43bb0:	f7fd f920 	bl	40df4 <strlen>
   43bb4:	2300      	movs	r3, #0
   43bb6:	4602      	mov	r2, r0
   43bb8:	49ac      	ldr	r1, [pc, #688]	; (43e6c <button2+0x318>)
   43bba:	48ad      	ldr	r0, [pc, #692]	; (43e70 <button2+0x31c>)
   43bbc:	f7ff f97e 	bl	42ebc <AppendString>
	//tower 1
	AppendString(testTxt, t1ID, strlen(t1ID), false);
   43bc0:	48a2      	ldr	r0, [pc, #648]	; (43e4c <button2+0x2f8>)
   43bc2:	f7fd f917 	bl	40df4 <strlen>
   43bc6:	2300      	movs	r3, #0
   43bc8:	4602      	mov	r2, r0
   43bca:	49a0      	ldr	r1, [pc, #640]	; (43e4c <button2+0x2f8>)
   43bcc:	48a8      	ldr	r0, [pc, #672]	; (43e70 <button2+0x31c>)
   43bce:	f7ff f975 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43bd2:	210a      	movs	r1, #10
   43bd4:	48a6      	ldr	r0, [pc, #664]	; (43e70 <button2+0x31c>)
   43bd6:	f7fe ff41 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1MCC, strlen(t1MCC), false);
   43bda:	48a6      	ldr	r0, [pc, #664]	; (43e74 <button2+0x320>)
   43bdc:	f7fd f90a 	bl	40df4 <strlen>
   43be0:	2300      	movs	r3, #0
   43be2:	4602      	mov	r2, r0
   43be4:	49a3      	ldr	r1, [pc, #652]	; (43e74 <button2+0x320>)
   43be6:	48a2      	ldr	r0, [pc, #648]	; (43e70 <button2+0x31c>)
   43be8:	f7ff f968 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43bec:	210a      	movs	r1, #10
   43bee:	48a0      	ldr	r0, [pc, #640]	; (43e70 <button2+0x31c>)
   43bf0:	f7fe ff34 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1MNC, strlen(t1MNC), false);
   43bf4:	48a0      	ldr	r0, [pc, #640]	; (43e78 <button2+0x324>)
   43bf6:	f7fd f8fd 	bl	40df4 <strlen>
   43bfa:	2300      	movs	r3, #0
   43bfc:	4602      	mov	r2, r0
   43bfe:	499e      	ldr	r1, [pc, #632]	; (43e78 <button2+0x324>)
   43c00:	489b      	ldr	r0, [pc, #620]	; (43e70 <button2+0x31c>)
   43c02:	f7ff f95b 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43c06:	210a      	movs	r1, #10
   43c08:	4899      	ldr	r0, [pc, #612]	; (43e70 <button2+0x31c>)
   43c0a:	f7fe ff27 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1TAC, strlen(t1TAC), false);
   43c0e:	489b      	ldr	r0, [pc, #620]	; (43e7c <button2+0x328>)
   43c10:	f7fd f8f0 	bl	40df4 <strlen>
   43c14:	2300      	movs	r3, #0
   43c16:	4602      	mov	r2, r0
   43c18:	4998      	ldr	r1, [pc, #608]	; (43e7c <button2+0x328>)
   43c1a:	4895      	ldr	r0, [pc, #596]	; (43e70 <button2+0x31c>)
   43c1c:	f7ff f94e 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43c20:	210a      	movs	r1, #10
   43c22:	4893      	ldr	r0, [pc, #588]	; (43e70 <button2+0x31c>)
   43c24:	f7fe ff1a 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1TA, strlen(t1TA), false);
   43c28:	4895      	ldr	r0, [pc, #596]	; (43e80 <button2+0x32c>)
   43c2a:	f7fd f8e3 	bl	40df4 <strlen>
   43c2e:	2300      	movs	r3, #0
   43c30:	4602      	mov	r2, r0
   43c32:	4993      	ldr	r1, [pc, #588]	; (43e80 <button2+0x32c>)
   43c34:	488e      	ldr	r0, [pc, #568]	; (43e70 <button2+0x31c>)
   43c36:	f7ff f941 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43c3a:	210a      	movs	r1, #10
   43c3c:	488c      	ldr	r0, [pc, #560]	; (43e70 <button2+0x31c>)
   43c3e:	f7fe ff0d 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1RSRP, strlen(t1RSRP), false);
   43c42:	4890      	ldr	r0, [pc, #576]	; (43e84 <button2+0x330>)
   43c44:	f7fd f8d6 	bl	40df4 <strlen>
   43c48:	2300      	movs	r3, #0
   43c4a:	4602      	mov	r2, r0
   43c4c:	498d      	ldr	r1, [pc, #564]	; (43e84 <button2+0x330>)
   43c4e:	4888      	ldr	r0, [pc, #544]	; (43e70 <button2+0x31c>)
   43c50:	f7ff f934 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43c54:	210a      	movs	r1, #10
   43c56:	4886      	ldr	r0, [pc, #536]	; (43e70 <button2+0x31c>)
   43c58:	f7fe ff00 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1RSRQ, strlen(t1RSRQ), false);
   43c5c:	488a      	ldr	r0, [pc, #552]	; (43e88 <button2+0x334>)
   43c5e:	f7fd f8c9 	bl	40df4 <strlen>
   43c62:	2300      	movs	r3, #0
   43c64:	4602      	mov	r2, r0
   43c66:	4988      	ldr	r1, [pc, #544]	; (43e88 <button2+0x334>)
   43c68:	4881      	ldr	r0, [pc, #516]	; (43e70 <button2+0x31c>)
   43c6a:	f7ff f927 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43c6e:	210a      	movs	r1, #10
   43c70:	487f      	ldr	r0, [pc, #508]	; (43e70 <button2+0x31c>)
   43c72:	f7fe fef3 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1SNR, strlen(t1SNR), false);
   43c76:	4885      	ldr	r0, [pc, #532]	; (43e8c <button2+0x338>)
   43c78:	f7fd f8bc 	bl	40df4 <strlen>
   43c7c:	2300      	movs	r3, #0
   43c7e:	4602      	mov	r2, r0
   43c80:	4982      	ldr	r1, [pc, #520]	; (43e8c <button2+0x338>)
   43c82:	487b      	ldr	r0, [pc, #492]	; (43e70 <button2+0x31c>)
   43c84:	f7ff f91a 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43c88:	210a      	movs	r1, #10
   43c8a:	4879      	ldr	r0, [pc, #484]	; (43e70 <button2+0x31c>)
   43c8c:	f7fe fee6 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1Band, strlen(t1Band), false);
   43c90:	487f      	ldr	r0, [pc, #508]	; (43e90 <button2+0x33c>)
   43c92:	f7fd f8af 	bl	40df4 <strlen>
   43c96:	2300      	movs	r3, #0
   43c98:	4602      	mov	r2, r0
   43c9a:	497d      	ldr	r1, [pc, #500]	; (43e90 <button2+0x33c>)
   43c9c:	4874      	ldr	r0, [pc, #464]	; (43e70 <button2+0x31c>)
   43c9e:	f7ff f90d 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43ca2:	210a      	movs	r1, #10
   43ca4:	4872      	ldr	r0, [pc, #456]	; (43e70 <button2+0x31c>)
   43ca6:	f7fe fed9 	bl	42a5c <AppendCharacter.isra.0>

	//tower 2
	AppendString(testTxt, t2ID, strlen(t2ID), false);
   43caa:	486a      	ldr	r0, [pc, #424]	; (43e54 <button2+0x300>)
   43cac:	f7fd f8a2 	bl	40df4 <strlen>
   43cb0:	2300      	movs	r3, #0
   43cb2:	4602      	mov	r2, r0
   43cb4:	4967      	ldr	r1, [pc, #412]	; (43e54 <button2+0x300>)
   43cb6:	486e      	ldr	r0, [pc, #440]	; (43e70 <button2+0x31c>)
   43cb8:	f7ff f900 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43cbc:	210a      	movs	r1, #10
   43cbe:	486c      	ldr	r0, [pc, #432]	; (43e70 <button2+0x31c>)
   43cc0:	f7fe fecc 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2MCC, strlen(t2MCC), false);
   43cc4:	4873      	ldr	r0, [pc, #460]	; (43e94 <button2+0x340>)
   43cc6:	f7fd f895 	bl	40df4 <strlen>
   43cca:	2300      	movs	r3, #0
   43ccc:	4602      	mov	r2, r0
   43cce:	4971      	ldr	r1, [pc, #452]	; (43e94 <button2+0x340>)
   43cd0:	4867      	ldr	r0, [pc, #412]	; (43e70 <button2+0x31c>)
   43cd2:	f7ff f8f3 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43cd6:	210a      	movs	r1, #10
   43cd8:	4865      	ldr	r0, [pc, #404]	; (43e70 <button2+0x31c>)
   43cda:	f7fe febf 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2MNC, strlen(t2MNC), false);
   43cde:	486e      	ldr	r0, [pc, #440]	; (43e98 <button2+0x344>)
   43ce0:	f7fd f888 	bl	40df4 <strlen>
   43ce4:	2300      	movs	r3, #0
   43ce6:	4602      	mov	r2, r0
   43ce8:	496b      	ldr	r1, [pc, #428]	; (43e98 <button2+0x344>)
   43cea:	4861      	ldr	r0, [pc, #388]	; (43e70 <button2+0x31c>)
   43cec:	f7ff f8e6 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43cf0:	210a      	movs	r1, #10
   43cf2:	485f      	ldr	r0, [pc, #380]	; (43e70 <button2+0x31c>)
   43cf4:	f7fe feb2 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2TAC, strlen(t2TAC), false);
   43cf8:	4868      	ldr	r0, [pc, #416]	; (43e9c <button2+0x348>)
   43cfa:	f7fd f87b 	bl	40df4 <strlen>
   43cfe:	2300      	movs	r3, #0
   43d00:	4602      	mov	r2, r0
   43d02:	4966      	ldr	r1, [pc, #408]	; (43e9c <button2+0x348>)
   43d04:	485a      	ldr	r0, [pc, #360]	; (43e70 <button2+0x31c>)
   43d06:	f7ff f8d9 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d0a:	210a      	movs	r1, #10
   43d0c:	4858      	ldr	r0, [pc, #352]	; (43e70 <button2+0x31c>)
   43d0e:	f7fe fea5 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2TA, strlen(t2TA), false);
   43d12:	4863      	ldr	r0, [pc, #396]	; (43ea0 <button2+0x34c>)
   43d14:	f7fd f86e 	bl	40df4 <strlen>
   43d18:	2300      	movs	r3, #0
   43d1a:	4602      	mov	r2, r0
   43d1c:	4960      	ldr	r1, [pc, #384]	; (43ea0 <button2+0x34c>)
   43d1e:	4854      	ldr	r0, [pc, #336]	; (43e70 <button2+0x31c>)
   43d20:	f7ff f8cc 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d24:	210a      	movs	r1, #10
   43d26:	4852      	ldr	r0, [pc, #328]	; (43e70 <button2+0x31c>)
   43d28:	f7fe fe98 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2RSRP, strlen(t2RSRP), false);
   43d2c:	485d      	ldr	r0, [pc, #372]	; (43ea4 <button2+0x350>)
   43d2e:	f7fd f861 	bl	40df4 <strlen>
   43d32:	2300      	movs	r3, #0
   43d34:	4602      	mov	r2, r0
   43d36:	495b      	ldr	r1, [pc, #364]	; (43ea4 <button2+0x350>)
   43d38:	484d      	ldr	r0, [pc, #308]	; (43e70 <button2+0x31c>)
   43d3a:	f7ff f8bf 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d3e:	210a      	movs	r1, #10
   43d40:	484b      	ldr	r0, [pc, #300]	; (43e70 <button2+0x31c>)
   43d42:	f7fe fe8b 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2RSRQ, strlen(t2RSRQ), false);
   43d46:	4858      	ldr	r0, [pc, #352]	; (43ea8 <button2+0x354>)
   43d48:	f7fd f854 	bl	40df4 <strlen>
   43d4c:	2300      	movs	r3, #0
   43d4e:	4602      	mov	r2, r0
   43d50:	4955      	ldr	r1, [pc, #340]	; (43ea8 <button2+0x354>)
   43d52:	4847      	ldr	r0, [pc, #284]	; (43e70 <button2+0x31c>)
   43d54:	f7ff f8b2 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d58:	210a      	movs	r1, #10
   43d5a:	4845      	ldr	r0, [pc, #276]	; (43e70 <button2+0x31c>)
   43d5c:	f7fe fe7e 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2SNR, strlen(t2SNR), false);
   43d60:	4852      	ldr	r0, [pc, #328]	; (43eac <button2+0x358>)
   43d62:	f7fd f847 	bl	40df4 <strlen>
   43d66:	2300      	movs	r3, #0
   43d68:	4602      	mov	r2, r0
   43d6a:	4950      	ldr	r1, [pc, #320]	; (43eac <button2+0x358>)
   43d6c:	4840      	ldr	r0, [pc, #256]	; (43e70 <button2+0x31c>)
   43d6e:	f7ff f8a5 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d72:	210a      	movs	r1, #10
   43d74:	483e      	ldr	r0, [pc, #248]	; (43e70 <button2+0x31c>)
   43d76:	f7fe fe71 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2Band, strlen(t2Band), false);
   43d7a:	484d      	ldr	r0, [pc, #308]	; (43eb0 <button2+0x35c>)
   43d7c:	f7fd f83a 	bl	40df4 <strlen>
   43d80:	2300      	movs	r3, #0
   43d82:	4602      	mov	r2, r0
   43d84:	494a      	ldr	r1, [pc, #296]	; (43eb0 <button2+0x35c>)
   43d86:	483a      	ldr	r0, [pc, #232]	; (43e70 <button2+0x31c>)
   43d88:	f7ff f898 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d8c:	210a      	movs	r1, #10
   43d8e:	4838      	ldr	r0, [pc, #224]	; (43e70 <button2+0x31c>)
   43d90:	f7fe fe64 	bl	42a5c <AppendCharacter.isra.0>

	//tower 3
	AppendString(testTxt, t3ID, strlen(t3ID), false);
   43d94:	4831      	ldr	r0, [pc, #196]	; (43e5c <button2+0x308>)
   43d96:	f7fd f82d 	bl	40df4 <strlen>
   43d9a:	2300      	movs	r3, #0
   43d9c:	4602      	mov	r2, r0
   43d9e:	492f      	ldr	r1, [pc, #188]	; (43e5c <button2+0x308>)
   43da0:	4833      	ldr	r0, [pc, #204]	; (43e70 <button2+0x31c>)
   43da2:	f7ff f88b 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43da6:	210a      	movs	r1, #10
   43da8:	4831      	ldr	r0, [pc, #196]	; (43e70 <button2+0x31c>)
   43daa:	f7fe fe57 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3MCC, strlen(t3MCC), false);
   43dae:	4841      	ldr	r0, [pc, #260]	; (43eb4 <button2+0x360>)
   43db0:	f7fd f820 	bl	40df4 <strlen>
   43db4:	2300      	movs	r3, #0
   43db6:	4602      	mov	r2, r0
   43db8:	493e      	ldr	r1, [pc, #248]	; (43eb4 <button2+0x360>)
   43dba:	482d      	ldr	r0, [pc, #180]	; (43e70 <button2+0x31c>)
   43dbc:	f7ff f87e 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43dc0:	210a      	movs	r1, #10
   43dc2:	482b      	ldr	r0, [pc, #172]	; (43e70 <button2+0x31c>)
   43dc4:	f7fe fe4a 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3MNC, strlen(t3MNC), false);
   43dc8:	483b      	ldr	r0, [pc, #236]	; (43eb8 <button2+0x364>)
   43dca:	f7fd f813 	bl	40df4 <strlen>
   43dce:	2300      	movs	r3, #0
   43dd0:	4602      	mov	r2, r0
   43dd2:	4939      	ldr	r1, [pc, #228]	; (43eb8 <button2+0x364>)
   43dd4:	4826      	ldr	r0, [pc, #152]	; (43e70 <button2+0x31c>)
   43dd6:	f7ff f871 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43dda:	210a      	movs	r1, #10
   43ddc:	4824      	ldr	r0, [pc, #144]	; (43e70 <button2+0x31c>)
   43dde:	f7fe fe3d 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3TAC, strlen(t3TAC), false);
   43de2:	4836      	ldr	r0, [pc, #216]	; (43ebc <button2+0x368>)
   43de4:	f7fd f806 	bl	40df4 <strlen>
   43de8:	2300      	movs	r3, #0
   43dea:	4602      	mov	r2, r0
   43dec:	4933      	ldr	r1, [pc, #204]	; (43ebc <button2+0x368>)
   43dee:	4820      	ldr	r0, [pc, #128]	; (43e70 <button2+0x31c>)
   43df0:	f7ff f864 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43df4:	210a      	movs	r1, #10
   43df6:	481e      	ldr	r0, [pc, #120]	; (43e70 <button2+0x31c>)
   43df8:	f7fe fe30 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3TA, strlen(t3TA), false);
   43dfc:	4830      	ldr	r0, [pc, #192]	; (43ec0 <button2+0x36c>)
   43dfe:	f7fc fff9 	bl	40df4 <strlen>
   43e02:	2300      	movs	r3, #0
   43e04:	4602      	mov	r2, r0
   43e06:	492e      	ldr	r1, [pc, #184]	; (43ec0 <button2+0x36c>)
   43e08:	4819      	ldr	r0, [pc, #100]	; (43e70 <button2+0x31c>)
   43e0a:	f7ff f857 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43e0e:	210a      	movs	r1, #10
   43e10:	4817      	ldr	r0, [pc, #92]	; (43e70 <button2+0x31c>)
   43e12:	f7fe fe23 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3RSRP, strlen(t3RSRP), false);
   43e16:	482b      	ldr	r0, [pc, #172]	; (43ec4 <button2+0x370>)
   43e18:	f7fc ffec 	bl	40df4 <strlen>
   43e1c:	2300      	movs	r3, #0
   43e1e:	4602      	mov	r2, r0
   43e20:	4928      	ldr	r1, [pc, #160]	; (43ec4 <button2+0x370>)
   43e22:	4813      	ldr	r0, [pc, #76]	; (43e70 <button2+0x31c>)
   43e24:	f7ff f84a 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43e28:	210a      	movs	r1, #10
   43e2a:	4811      	ldr	r0, [pc, #68]	; (43e70 <button2+0x31c>)
   43e2c:	f7fe fe16 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3RSRQ, strlen(t3RSRQ), false);
   43e30:	4825      	ldr	r0, [pc, #148]	; (43ec8 <button2+0x374>)
   43e32:	f7fc ffdf 	bl	40df4 <strlen>
   43e36:	2300      	movs	r3, #0
   43e38:	4602      	mov	r2, r0
   43e3a:	4923      	ldr	r1, [pc, #140]	; (43ec8 <button2+0x374>)
   43e3c:	480c      	ldr	r0, [pc, #48]	; (43e70 <button2+0x31c>)
   43e3e:	f7ff f83d 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43e42:	210a      	movs	r1, #10
   43e44:	e042      	b.n	43ecc <button2+0x378>
   43e46:	bf00      	nop
   43e48:	0005d366 	.word	0x0005d366
   43e4c:	2001dce9 	.word	0x2001dce9
   43e50:	0005d371 	.word	0x0005d371
   43e54:	2001dab7 	.word	0x2001dab7
   43e58:	0005d37e 	.word	0x0005d37e
   43e5c:	2001d885 	.word	0x2001d885
   43e60:	0005d38b 	.word	0x0005d38b
   43e64:	0005d10b 	.word	0x0005d10b
   43e68:	0005d398 	.word	0x0005d398
   43e6c:	0005d23e 	.word	0x0005d23e
   43e70:	0005d39f 	.word	0x0005d39f
   43e74:	2001dcdd 	.word	0x2001dcdd
   43e78:	2001dcd1 	.word	0x2001dcd1
   43e7c:	2001dcc5 	.word	0x2001dcc5
   43e80:	2001dcb9 	.word	0x2001dcb9
   43e84:	2001dc94 	.word	0x2001dc94
   43e88:	2001dc88 	.word	0x2001dc88
   43e8c:	2001daf8 	.word	0x2001daf8
   43e90:	2001dac6 	.word	0x2001dac6
   43e94:	2001daab 	.word	0x2001daab
   43e98:	2001da9f 	.word	0x2001da9f
   43e9c:	2001da93 	.word	0x2001da93
   43ea0:	2001da87 	.word	0x2001da87
   43ea4:	2001da62 	.word	0x2001da62
   43ea8:	2001da56 	.word	0x2001da56
   43eac:	2001d8c6 	.word	0x2001d8c6
   43eb0:	2001d894 	.word	0x2001d894
   43eb4:	2001d879 	.word	0x2001d879
   43eb8:	2001d86d 	.word	0x2001d86d
   43ebc:	2001d861 	.word	0x2001d861
   43ec0:	2001d855 	.word	0x2001d855
   43ec4:	2001d830 	.word	0x2001d830
   43ec8:	2001d824 	.word	0x2001d824
   43ecc:	4818      	ldr	r0, [pc, #96]	; (43f30 <button2+0x3dc>)
   43ece:	f7fe fdc5 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3SNR, strlen(t3SNR), false);
   43ed2:	4818      	ldr	r0, [pc, #96]	; (43f34 <button2+0x3e0>)
   43ed4:	f7fc ff8e 	bl	40df4 <strlen>
   43ed8:	2300      	movs	r3, #0
   43eda:	4602      	mov	r2, r0
   43edc:	4915      	ldr	r1, [pc, #84]	; (43f34 <button2+0x3e0>)
   43ede:	4814      	ldr	r0, [pc, #80]	; (43f30 <button2+0x3dc>)
   43ee0:	f7fe ffec 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43ee4:	210a      	movs	r1, #10
   43ee6:	4812      	ldr	r0, [pc, #72]	; (43f30 <button2+0x3dc>)
   43ee8:	f7fe fdb8 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3Band, strlen(t3Band), false);
   43eec:	4812      	ldr	r0, [pc, #72]	; (43f38 <button2+0x3e4>)
   43eee:	f7fc ff81 	bl	40df4 <strlen>
   43ef2:	2300      	movs	r3, #0
   43ef4:	4602      	mov	r2, r0
   43ef6:	4910      	ldr	r1, [pc, #64]	; (43f38 <button2+0x3e4>)
   43ef8:	480d      	ldr	r0, [pc, #52]	; (43f30 <button2+0x3dc>)
   43efa:	f7fe ffdf 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43efe:	210a      	movs	r1, #10
   43f00:	480b      	ldr	r0, [pc, #44]	; (43f30 <button2+0x3dc>)
   43f02:	f7fe fdab 	bl	42a5c <AppendCharacter.isra.0>
	
	AppendString(testTxt, time, strlen(time), false);
   43f06:	480d      	ldr	r0, [pc, #52]	; (43f3c <button2+0x3e8>)
   43f08:	f7fc ff74 	bl	40df4 <strlen>
   43f0c:	2300      	movs	r3, #0
   43f0e:	4602      	mov	r2, r0
   43f10:	490a      	ldr	r1, [pc, #40]	; (43f3c <button2+0x3e8>)
   43f12:	4807      	ldr	r0, [pc, #28]	; (43f30 <button2+0x3dc>)
   43f14:	f7fe ffd2 	bl	42ebc <AppendString>
	AppendString(testTxt, separator, strlen(separator), false);
   43f18:	4809      	ldr	r0, [pc, #36]	; (43f40 <button2+0x3ec>)
   43f1a:	f7fc ff6b 	bl	40df4 <strlen>
}
   43f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	AppendString(testTxt, separator, strlen(separator), false);
   43f22:	4602      	mov	r2, r0
   43f24:	2300      	movs	r3, #0
   43f26:	4906      	ldr	r1, [pc, #24]	; (43f40 <button2+0x3ec>)
   43f28:	4801      	ldr	r0, [pc, #4]	; (43f30 <button2+0x3dc>)
   43f2a:	f7fe bfc7 	b.w	42ebc <AppendString>
   43f2e:	bf00      	nop
   43f30:	0005d39f 	.word	0x0005d39f
   43f34:	2001d694 	.word	0x2001d694
   43f38:	2001d662 	.word	0x2001d662
   43f3c:	2001ddf8 	.word	0x2001ddf8
   43f40:	0005d23e 	.word	0x0005d23e

00043f44 <storeAES>:

void storeAES(void)
{
   43f44:	b570      	push	{r4, r5, r6, lr}
	
	AppendString(secureTxt, time, strlen(time), false);
	AppendString(secureTxt, separator, strlen(separator), false);
	*/
	//AppendString(testTxt, keyDeci, sizeof(keyDeci), false);
	AppendCharacter(secureTxt, "\n");
   43f46:	4d12      	ldr	r5, [pc, #72]	; (43f90 <storeAES+0x4c>)
   43f48:	4c12      	ldr	r4, [pc, #72]	; (43f94 <storeAES+0x50>)
   43f4a:	b2ed      	uxtb	r5, r5
	AppendString(secureTxt, keyHex, strlen(keyHex), false);
   43f4c:	4e12      	ldr	r6, [pc, #72]	; (43f98 <storeAES+0x54>)
	AppendCharacter(secureTxt, "\n");
   43f4e:	4629      	mov	r1, r5
   43f50:	4620      	mov	r0, r4
   43f52:	f7fe fd83 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(secureTxt, keyHex, strlen(keyHex), false);
   43f56:	4630      	mov	r0, r6
   43f58:	f7fc ff4c 	bl	40df4 <strlen>
   43f5c:	2300      	movs	r3, #0
   43f5e:	4602      	mov	r2, r0
   43f60:	4631      	mov	r1, r6
   43f62:	4620      	mov	r0, r4
	AppendCharacter(secureTxt, "\n");
	AppendString(secureTxt, m_encrypted_text, strlen(m_encrypted_text), false);
   43f64:	4e0d      	ldr	r6, [pc, #52]	; (43f9c <storeAES+0x58>)
	AppendString(secureTxt, keyHex, strlen(keyHex), false);
   43f66:	f7fe ffa9 	bl	42ebc <AppendString>
	AppendCharacter(secureTxt, "\n");
   43f6a:	4629      	mov	r1, r5
   43f6c:	4620      	mov	r0, r4
   43f6e:	f7fe fd75 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(secureTxt, m_encrypted_text, strlen(m_encrypted_text), false);
   43f72:	4630      	mov	r0, r6
   43f74:	f7fc ff3e 	bl	40df4 <strlen>
   43f78:	4631      	mov	r1, r6
   43f7a:	4602      	mov	r2, r0
   43f7c:	2300      	movs	r3, #0
   43f7e:	4620      	mov	r0, r4
   43f80:	f7fe ff9c 	bl	42ebc <AppendString>
	AppendCharacter(secureTxt, "\n");
   43f84:	4629      	mov	r1, r5
   43f86:	4620      	mov	r0, r4
}
   43f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	AppendCharacter(secureTxt, "\n");
   43f8c:	f7fe bd66 	b.w	42a5c <AppendCharacter.isra.0>
   43f90:	0005fc03 	.word	0x0005fc03
   43f94:	0005d3ad 	.word	0x0005d3ad
   43f98:	2001dcf8 	.word	0x2001dcf8
   43f9c:	2001c6a6 	.word	0x2001c6a6

00043fa0 <button_handler>:


//custom button handler
static void button_handler(uint32_t button_states, uint32_t has_changed)
{
   43fa0:	b510      	push	{r4, lr}
	//this runs if the first button on the dev kit is pressed
	//typically used for querying and printing values
	//if (has_changed & button_states & DK_BTN1_MSK) 
	if (has_changed & button_states & Collect_Towers) 
   43fa2:	ea01 0400 	and.w	r4, r1, r0
   43fa6:	07e1      	lsls	r1, r4, #31
   43fa8:	d501      	bpl.n	43fae <button_handler+0xe>
	{
		button1();
   43faa:	f7ff fd9f 	bl	43aec <button1>
	}

	//this runs if the second button on the dev kit is pressed
	//stores collected towers to disk
	if (has_changed & button_states & DK_BTN2_MSK) 
   43fae:	07a2      	lsls	r2, r4, #30
   43fb0:	d50f      	bpl.n	43fd2 <button_handler+0x32>
	//if (has_changed & button_states & Store_Towers)
	{
		button2();
   43fb2:	f7ff fdcf 	bl	43b54 <button2>
		
		secure();
   43fb6:	f7ff facd 	bl	43554 <secure>

		startCrypto();
   43fba:	f011 fb24 	bl	55606 <startCrypto>

		//printk("")

		decryptData();
   43fbe:	f7ff faa9 	bl	43514 <decryptData>

		cryptoEnd();
   43fc2:	f011 fb27 	bl	55614 <cryptoEnd>
		}
		printk("\n");
		*/

		//store the encrypted data to disk
		storeAES();
   43fc6:	f7ff ffbd 	bl	43f44 <storeAES>

		//clear the strings
		empty();
   43fca:	f7ff f827 	bl	4301c <empty>

		//turn the board off
		power();
   43fce:	f7fe fee9 	bl	42da4 <power>
	}

	//if the useless button is pressed
	if (has_changed & button_states & Output_Other) 
   43fd2:	0763      	lsls	r3, r4, #29
   43fd4:	d504      	bpl.n	43fe0 <button_handler+0x40>
	{
		printk("button 3 \n");
	}
	
}
   43fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("button 3 \n");
   43fda:	4802      	ldr	r0, [pc, #8]	; (43fe4 <button_handler+0x44>)
   43fdc:	f011 bb9b 	b.w	55716 <printk>
}
   43fe0:	bd10      	pop	{r4, pc}
   43fe2:	bf00      	nop
   43fe4:	0005d3bd 	.word	0x0005d3bd

00043fe8 <main>:


void main(void)
{
   43fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   43fea:	b09f      	sub	sp, #124	; 0x7c
	//initialize storage	
	storage();
   43fec:	f7fe ff16 	bl	42e1c <storage>

	//uses the leds as signals to the pico
	//not implemented
	int startFakeLEDs;
	startFakeLEDs = gpio_pin_set_dt(&Tower_Read_Success, LOW);
   43ff0:	2100      	movs	r1, #0
   43ff2:	487e      	ldr	r0, [pc, #504]	; (441ec <main+0x204>)
   43ff4:	f011 fae6 	bl	555c4 <gpio_pin_set_dt.isra.0>
	startFakeLEDs = gpio_pin_set_dt(&Tower_Read_Fail, LOW);
   43ff8:	2100      	movs	r1, #0
   43ffa:	487d      	ldr	r0, [pc, #500]	; (441f0 <main+0x208>)
   43ffc:	f011 fae2 	bl	555c4 <gpio_pin_set_dt.isra.0>
	startFakeLEDs = gpio_pin_set_dt(&Tower_Buffer_Full, LOW);
   44000:	2100      	movs	r1, #0
   44002:	487c      	ldr	r0, [pc, #496]	; (441f4 <main+0x20c>)
   44004:	f011 fade 	bl	555c4 <gpio_pin_set_dt.isra.0>
	startFakeLEDs = gpio_pin_set_dt(&Tower_Connected, LOW);
   44008:	2100      	movs	r1, #0
   4400a:	487b      	ldr	r0, [pc, #492]	; (441f8 <main+0x210>)
   4400c:	f011 fada 	bl	555c4 <gpio_pin_set_dt.isra.0>
 * @param zdp Pointer to file object
 *
 */
static inline void fs_dir_t_init(struct fs_dir_t *zdp)
{
	*zdp = (struct fs_dir_t){ 0 };
   44010:	2300      	movs	r3, #0
	res = fs_opendir(&dirp, path);
   44012:	497a      	ldr	r1, [pc, #488]	; (441fc <main+0x214>)
   44014:	a817      	add	r0, sp, #92	; 0x5c
   44016:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
   4401a:	f002 fe8d 	bl	46d38 <fs_opendir>
		printk("Error opening dir %s [%d]\n", path, res);
   4401e:	4977      	ldr	r1, [pc, #476]	; (441fc <main+0x214>)
	if (res) {
   44020:	4602      	mov	r2, r0
   44022:	b360      	cbz	r0, 4407e <main+0x96>
		printk("Error opening dir %s [%d]\n", path, res);
   44024:	4876      	ldr	r0, [pc, #472]	; (44200 <main+0x218>)
   44026:	f011 fb76 	bl	55716 <printk>
	strcpy(t2COPS, "noCOPS2");
	strcpy(t3COPS, "noCOPS3");
	
	int err;

	LOG_INF("Program has started!");
   4402a:	2400      	movs	r4, #0
	empty();
   4402c:	f7fe fff6 	bl	4301c <empty>
	strcpy(t1COPS, "noCOPS1");
   44030:	4974      	ldr	r1, [pc, #464]	; (44204 <main+0x21c>)
   44032:	4875      	ldr	r0, [pc, #468]	; (44208 <main+0x220>)
   44034:	f017 f8f8 	bl	5b228 <strcpy>
	strcpy(t2COPS, "noCOPS2");
   44038:	4974      	ldr	r1, [pc, #464]	; (4420c <main+0x224>)
   4403a:	4875      	ldr	r0, [pc, #468]	; (44210 <main+0x228>)
   4403c:	f017 f8f4 	bl	5b228 <strcpy>
	strcpy(t3COPS, "noCOPS3");
   44040:	4974      	ldr	r1, [pc, #464]	; (44214 <main+0x22c>)
   44042:	4875      	ldr	r0, [pc, #468]	; (44218 <main+0x230>)
   44044:	f017 f8f0 	bl	5b228 <strcpy>
	LOG_INF("Program has started!");
   44048:	4b74      	ldr	r3, [pc, #464]	; (4421c <main+0x234>)
   4404a:	2203      	movs	r2, #3
   4404c:	4620      	mov	r0, r4
   4404e:	4974      	ldr	r1, [pc, #464]	; (44220 <main+0x238>)
   44050:	9302      	str	r3, [sp, #8]
   44052:	e9cd 4400 	strd	r4, r4, [sp]
   44056:	4623      	mov	r3, r4
   44058:	f011 faa5 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
#endif
#if defined(CONFIG_MULTICELL_LOCATION_SAMPLE_REQUEST_PERIODIC)
	k_work_init_delayable(&periodic_search_work, periodic_search_work_fn);
#endif

	err = multicell_location_provision_certificate(false);
   4405c:	4620      	mov	r0, r4
   4405e:	f009 f80b 	bl	4d078 <multicell_location_provision_certificate>
	if (err) {
   44062:	4605      	mov	r5, r0
   44064:	b358      	cbz	r0, 440be <main+0xd6>
		LOG_ERR("Certificate provisioning failed, exiting application");
   44066:	4b6f      	ldr	r3, [pc, #444]	; (44224 <main+0x23c>)
   44068:	2201      	movs	r2, #1
   4406a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4406e:	4620      	mov	r0, r4
   44070:	4623      	mov	r3, r4
   44072:	496b      	ldr	r1, [pc, #428]	; (44220 <main+0x238>)
   44074:	9400      	str	r4, [sp, #0]
   44076:	f011 fa96 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
			}
			start_cell_measurements();
			getData = 1;
		}
	}
}
   4407a:	b01f      	add	sp, #124	; 0x7c
   4407c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	printk("\nListing dir %s ...\n", path);
   4407e:	486a      	ldr	r0, [pc, #424]	; (44228 <main+0x240>)
   44080:	f011 fb49 	bl	55716 <printk>
		res = fs_readdir(&dirp, &entry);
   44084:	4c69      	ldr	r4, [pc, #420]	; (4422c <main+0x244>)
			printk("[FILE] %s (size = %zu)\n",
   44086:	4e6a      	ldr	r6, [pc, #424]	; (44230 <main+0x248>)
   44088:	1c65      	adds	r5, r4, #1
		res = fs_readdir(&dirp, &entry);
   4408a:	4968      	ldr	r1, [pc, #416]	; (4422c <main+0x244>)
   4408c:	a817      	add	r0, sp, #92	; 0x5c
   4408e:	f002 fecb 	bl	46e28 <fs_readdir>
		if (res || entry.name[0] == 0) {
   44092:	b980      	cbnz	r0, 440b6 <main+0xce>
   44094:	7863      	ldrb	r3, [r4, #1]
   44096:	b173      	cbz	r3, 440b6 <main+0xce>
		if (entry.type == FS_DIR_ENTRY_DIR) {
   44098:	7823      	ldrb	r3, [r4, #0]
   4409a:	2b01      	cmp	r3, #1
   4409c:	d104      	bne.n	440a8 <main+0xc0>
			printk("[DIR] %s\n", entry.name);
   4409e:	4629      	mov	r1, r5
   440a0:	4864      	ldr	r0, [pc, #400]	; (44234 <main+0x24c>)
   440a2:	f011 fb38 	bl	55716 <printk>
   440a6:	e7f0      	b.n	4408a <main+0xa2>
			printk("[FILE] %s (size = %zu)\n",
   440a8:	4629      	mov	r1, r5
   440aa:	4630      	mov	r0, r6
   440ac:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   440b0:	f011 fb31 	bl	55716 <printk>
   440b4:	e7e9      	b.n	4408a <main+0xa2>
	fs_closedir(&dirp);
   440b6:	a817      	add	r0, sp, #92	; 0x5c
   440b8:	f002 ff32 	bl	46f20 <fs_closedir>
	return res;
   440bc:	e7b5      	b.n	4402a <main+0x42>
	err = dk_buttons_init(button_handler);
   440be:	485e      	ldr	r0, [pc, #376]	; (44238 <main+0x250>)
   440c0:	f006 fa4c 	bl	4a55c <dk_buttons_init>
	if (err) {
   440c4:	b150      	cbz	r0, 440dc <main+0xf4>
		LOG_ERR("Failed to initialize DK library, error: %d", err);
   440c6:	4b5d      	ldr	r3, [pc, #372]	; (4423c <main+0x254>)
   440c8:	9003      	str	r0, [sp, #12]
   440ca:	e9cd 5301 	strd	r5, r3, [sp, #4]
   440ce:	2201      	movs	r2, #1
   440d0:	462b      	mov	r3, r5
   440d2:	4628      	mov	r0, r5
   440d4:	4952      	ldr	r1, [pc, #328]	; (44220 <main+0x238>)
   440d6:	9500      	str	r5, [sp, #0]
   440d8:	f011 fa65 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
		err = lte_lc_psm_req(false);
   440dc:	2000      	movs	r0, #0
   440de:	f007 f9cf 	bl	4b480 <lte_lc_psm_req>
		if (err) {
   440e2:	b150      	cbz	r0, 440fa <main+0x112>
			LOG_ERR("Failed to disable PSM, error: %d", err);
   440e4:	4b56      	ldr	r3, [pc, #344]	; (44240 <main+0x258>)
   440e6:	9003      	str	r0, [sp, #12]
   440e8:	9302      	str	r3, [sp, #8]
   440ea:	2300      	movs	r3, #0
   440ec:	2201      	movs	r2, #1
   440ee:	4618      	mov	r0, r3
   440f0:	e9cd 3300 	strd	r3, r3, [sp]
   440f4:	494a      	ldr	r1, [pc, #296]	; (44220 <main+0x238>)
   440f6:	f011 fa56 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
		err = lte_lc_edrx_req(false);
   440fa:	2000      	movs	r0, #0
   440fc:	f007 fb58 	bl	4b7b0 <lte_lc_edrx_req>
		if (err) {
   44100:	b150      	cbz	r0, 44118 <main+0x130>
			LOG_ERR("Failed to disable eDRX, error: %d", err);
   44102:	4b50      	ldr	r3, [pc, #320]	; (44244 <main+0x25c>)
   44104:	9003      	str	r0, [sp, #12]
   44106:	9302      	str	r3, [sp, #8]
   44108:	2300      	movs	r3, #0
   4410a:	2201      	movs	r2, #1
   4410c:	4618      	mov	r0, r3
   4410e:	e9cd 3300 	strd	r3, r3, [sp]
   44112:	4943      	ldr	r1, [pc, #268]	; (44220 <main+0x238>)
   44114:	f011 fa47 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
	err = lte_lc_init_and_connect_async(lte_handler);
   44118:	484b      	ldr	r0, [pc, #300]	; (44248 <main+0x260>)
   4411a:	f013 fc57 	bl	579cc <lte_lc_init_and_connect_async>
	if (err) {
   4411e:	4604      	mov	r4, r0
   44120:	2800      	cmp	r0, #0
   44122:	d14b      	bne.n	441bc <main+0x1d4>
	LOG_INF("Connecting to LTE network, this may take several minutes...");
   44124:	4b49      	ldr	r3, [pc, #292]	; (4424c <main+0x264>)
   44126:	2203      	movs	r2, #3
   44128:	e9cd 0301 	strd	r0, r3, [sp, #4]
   4412c:	493c      	ldr	r1, [pc, #240]	; (44220 <main+0x238>)
   4412e:	4603      	mov	r3, r0
   44130:	9000      	str	r0, [sp, #0]
   44132:	f011 fa38 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
	return z_impl_k_sem_take(sem, timeout);
   44136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4413a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4413e:	4844      	ldr	r0, [pc, #272]	; (44250 <main+0x268>)
   44140:	f00e fab4 	bl	526ac <z_impl_k_sem_take>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   44144:	2301      	movs	r3, #1
   44146:	4f43      	ldr	r7, [pc, #268]	; (44254 <main+0x26c>)
   44148:	e8d7 2fef 	ldaex	r2, [r7]
   4414c:	e8c7 3fe1 	stlex	r1, r3, [r7]
   44150:	2900      	cmp	r1, #0
   44152:	d1f9      	bne.n	44148 <main+0x160>
	LOG_INF("Connected to LTE network");
   44154:	4b40      	ldr	r3, [pc, #256]	; (44258 <main+0x270>)
   44156:	2203      	movs	r2, #3
   44158:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4415c:	4620      	mov	r0, r4
   4415e:	4623      	mov	r3, r4
   44160:	492f      	ldr	r1, [pc, #188]	; (44220 <main+0x238>)
   44162:	9400      	str	r4, [sp, #0]
   44164:	f011 fa1f 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
   44168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4416c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44170:	483a      	ldr	r0, [pc, #232]	; (4425c <main+0x274>)
   44172:	f00e fa9b 	bl	526ac <z_impl_k_sem_take>
	start_cell_measurements();
   44176:	f7fe fcbd 	bl	42af4 <start_cell_measurements>
	int getData = 0;
   4417a:	4625      	mov	r5, r4
   4417c:	4e38      	ldr	r6, [pc, #224]	; (44260 <main+0x278>)
	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   4417e:	4c39      	ldr	r4, [pc, #228]	; (44264 <main+0x27c>)
   44180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44188:	4630      	mov	r0, r6
   4418a:	f00e fa8f 	bl	526ac <z_impl_k_sem_take>
		if(getData == 1)
   4418e:	2d00      	cmp	r5, #0
   44190:	f000 826e 	beq.w	44670 <main+0x688>
			printk("Scan is not available!\n");
   44194:	4834      	ldr	r0, [pc, #208]	; (44268 <main+0x280>)
   44196:	f011 fabe 	bl	55716 <printk>
	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   4419a:	68a3      	ldr	r3, [r4, #8]
   4419c:	3301      	adds	r3, #1
   4419e:	d16b      	bne.n	44278 <main+0x290>
		LOG_WRN("No cells were found");
   441a0:	2500      	movs	r5, #0
   441a2:	4b32      	ldr	r3, [pc, #200]	; (4426c <main+0x284>)
   441a4:	2202      	movs	r2, #2
   441a6:	4628      	mov	r0, r5
   441a8:	491d      	ldr	r1, [pc, #116]	; (44220 <main+0x238>)
   441aa:	9302      	str	r3, [sp, #8]
   441ac:	e9cd 5500 	strd	r5, r5, [sp]
   441b0:	462b      	mov	r3, r5
   441b2:	f011 f9f8 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
		Tower_Read_Fail_Change();
   441b6:	f7fe fda9 	bl	42d0c <Tower_Read_Fail_Change>
		return;
   441ba:	e7e1      	b.n	44180 <main+0x198>
		LOG_ERR("Modem could not be configured, error: %d",
   441bc:	2500      	movs	r5, #0
   441be:	4b2c      	ldr	r3, [pc, #176]	; (44270 <main+0x288>)
   441c0:	9003      	str	r0, [sp, #12]
   441c2:	9302      	str	r3, [sp, #8]
   441c4:	4628      	mov	r0, r5
   441c6:	462b      	mov	r3, r5
   441c8:	2201      	movs	r2, #1
   441ca:	e9cd 5500 	strd	r5, r5, [sp]
   441ce:	4914      	ldr	r1, [pc, #80]	; (44220 <main+0x238>)
   441d0:	f011 f9e9 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
		LOG_ERR("Failed to connect to LTE network, error: %d", err);
   441d4:	4b27      	ldr	r3, [pc, #156]	; (44274 <main+0x28c>)
   441d6:	2201      	movs	r2, #1
   441d8:	e9cd 5301 	strd	r5, r3, [sp, #4]
   441dc:	4628      	mov	r0, r5
   441de:	462b      	mov	r3, r5
   441e0:	490f      	ldr	r1, [pc, #60]	; (44220 <main+0x238>)
   441e2:	9403      	str	r4, [sp, #12]
   441e4:	9500      	str	r5, [sp, #0]
   441e6:	f011 f9de 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
		return;
   441ea:	e746      	b.n	4407a <main+0x92>
   441ec:	0005c130 	.word	0x0005c130
   441f0:	0005c128 	.word	0x0005c128
   441f4:	0005c120 	.word	0x0005c120
   441f8:	0005c118 	.word	0x0005c118
   441fc:	0005d051 	.word	0x0005d051
   44200:	0005d3c8 	.word	0x0005d3c8
   44204:	0005d111 	.word	0x0005d111
   44208:	2001dca0 	.word	0x2001dca0
   4420c:	0005d119 	.word	0x0005d119
   44210:	2001da6e 	.word	0x2001da6e
   44214:	0005d121 	.word	0x0005d121
   44218:	2001d83c 	.word	0x2001d83c
   4421c:	0005d41a 	.word	0x0005d41a
   44220:	0005bf14 	.word	0x0005bf14
   44224:	0005d42f 	.word	0x0005d42f
   44228:	0005d3e3 	.word	0x0005d3e3
   4422c:	2001b070 	.word	0x2001b070
   44230:	0005d402 	.word	0x0005d402
   44234:	0005d3f8 	.word	0x0005d3f8
   44238:	00043fa1 	.word	0x00043fa1
   4423c:	0005d464 	.word	0x0005d464
   44240:	0005d48f 	.word	0x0005d48f
   44244:	0005d4b0 	.word	0x0005d4b0
   44248:	00042b31 	.word	0x00042b31
   4424c:	0005d4d2 	.word	0x0005d4d2
   44250:	2001ac00 	.word	0x2001ac00
   44254:	2001b28c 	.word	0x2001b28c
   44258:	0005d50e 	.word	0x0005d50e
   4425c:	2001ac18 	.word	0x2001ac18
   44260:	2001abe8 	.word	0x2001abe8
   44264:	2001a500 	.word	0x2001a500
   44268:	0005d57c 	.word	0x0005d57c
   4426c:	0005d594 	.word	0x0005d594
   44270:	0005d527 	.word	0x0005d527
   44274:	0005d550 	.word	0x0005d550
	printk("Current cell:\n");
   44278:	489d      	ldr	r0, [pc, #628]	; (444f0 <main+0x508>)
   4427a:	f011 fa4c 	bl	55716 <printk>
	printk("\tMCC: %03d\n", cell_data.current_cell.mcc);
   4427e:	6821      	ldr	r1, [r4, #0]
   44280:	489c      	ldr	r0, [pc, #624]	; (444f4 <main+0x50c>)
   44282:	f011 fa48 	bl	55716 <printk>
	printk("\tMNC: %03d\n", cell_data.current_cell.mnc);
   44286:	6861      	ldr	r1, [r4, #4]
   44288:	489b      	ldr	r0, [pc, #620]	; (444f8 <main+0x510>)
   4428a:	f011 fa44 	bl	55716 <printk>
	printk("\tCell ID: %d\n", cell_data.current_cell.id);
   4428e:	68a1      	ldr	r1, [r4, #8]
   44290:	489a      	ldr	r0, [pc, #616]	; (444fc <main+0x514>)
   44292:	f011 fa40 	bl	55716 <printk>
	printk("\tTAC: %d\n", cell_data.current_cell.tac);
   44296:	68e1      	ldr	r1, [r4, #12]
   44298:	4899      	ldr	r0, [pc, #612]	; (44500 <main+0x518>)
   4429a:	f011 fa3c 	bl	55716 <printk>
	printk("\tEARFCN: %d\n", cell_data.current_cell.earfcn);
   4429e:	6921      	ldr	r1, [r4, #16]
   442a0:	4898      	ldr	r0, [pc, #608]	; (44504 <main+0x51c>)
   442a2:	f011 fa38 	bl	55716 <printk>
	printk("\tTiming advance: %d\n", cell_data.current_cell.timing_advance);
   442a6:	8aa1      	ldrh	r1, [r4, #20]
   442a8:	4897      	ldr	r0, [pc, #604]	; (44508 <main+0x520>)
   442aa:	f011 fa34 	bl	55716 <printk>
	printk("\tMeasurement time: %lld\n", cell_data.current_cell.measurement_time);
   442ae:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   442b2:	4896      	ldr	r0, [pc, #600]	; (4450c <main+0x524>)
   442b4:	f011 fa2f 	bl	55716 <printk>
	printk("\tPhysical cell ID: %d\n", cell_data.current_cell.phys_cell_id);
   442b8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   442ba:	4895      	ldr	r0, [pc, #596]	; (44510 <main+0x528>)
   442bc:	f011 fa2b 	bl	55716 <printk>
	printk("\tRSRP: %d\n", cell_data.current_cell.rsrp);
   442c0:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
   442c4:	4893      	ldr	r0, [pc, #588]	; (44514 <main+0x52c>)
   442c6:	f011 fa26 	bl	55716 <printk>
	printk("\tRSRQ: %d\n", cell_data.current_cell.rsrq);
   442ca:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   442ce:	4892      	ldr	r0, [pc, #584]	; (44518 <main+0x530>)
   442d0:	f011 fa21 	bl	55716 <printk>
	sprintf(newID,"%d",cell_data.current_cell.id);
   442d4:	68a3      	ldr	r3, [r4, #8]
   442d6:	2214      	movs	r2, #20
   442d8:	2100      	movs	r1, #0
   442da:	9300      	str	r3, [sp, #0]
   442dc:	a80d      	add	r0, sp, #52	; 0x34
   442de:	4b8f      	ldr	r3, [pc, #572]	; (4451c <main+0x534>)
   442e0:	f016 ff1e 	bl	5b120 <__sprintf_chk>
	sprintf(newTA,"%d",cell_data.current_cell.timing_advance);
   442e4:	8aa3      	ldrh	r3, [r4, #20]
   442e6:	2214      	movs	r2, #20
   442e8:	2100      	movs	r1, #0
   442ea:	9300      	str	r3, [sp, #0]
   442ec:	a812      	add	r0, sp, #72	; 0x48
   442ee:	4b8b      	ldr	r3, [pc, #556]	; (4451c <main+0x534>)
   442f0:	f016 ff16 	bl	5b120 <__sprintf_chk>
	sprintf(newMCC,"%03d",cell_data.current_cell.mcc);
   442f4:	6823      	ldr	r3, [r4, #0]
   442f6:	220d      	movs	r2, #13
   442f8:	2100      	movs	r1, #0
   442fa:	9300      	str	r3, [sp, #0]
   442fc:	a805      	add	r0, sp, #20
   442fe:	4b88      	ldr	r3, [pc, #544]	; (44520 <main+0x538>)
   44300:	f016 ff0e 	bl	5b120 <__sprintf_chk>
	sprintf(newMNC,"%03d",cell_data.current_cell.mnc);
   44304:	6863      	ldr	r3, [r4, #4]
   44306:	220d      	movs	r2, #13
   44308:	2100      	movs	r1, #0
   4430a:	9300      	str	r3, [sp, #0]
   4430c:	a809      	add	r0, sp, #36	; 0x24
   4430e:	4b84      	ldr	r3, [pc, #528]	; (44520 <main+0x538>)
   44310:	f016 ff06 	bl	5b120 <__sprintf_chk>
	strcpy(newCOPS,newMCC);
   44314:	2219      	movs	r2, #25
   44316:	a905      	add	r1, sp, #20
   44318:	a817      	add	r0, sp, #92	; 0x5c
   4431a:	f016 ff8d 	bl	5b238 <__strcpy_chk>
	strcat(newCOPS,newMNC);
   4431e:	2219      	movs	r2, #25
   44320:	a909      	add	r1, sp, #36	; 0x24
   44322:	a817      	add	r0, sp, #92	; 0x5c
   44324:	f016 ff5b 	bl	5b1de <__strcat_chk>
	if(cell_data.current_cell.timing_advance != 65535)
   44328:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4432c:	8aa2      	ldrh	r2, [r4, #20]
   4432e:	429a      	cmp	r2, r3
   44330:	f000 818e 	beq.w	44650 <main+0x668>
		if((strstr(t1ID, "empty") != NULL) )
   44334:	497b      	ldr	r1, [pc, #492]	; (44524 <main+0x53c>)
   44336:	487c      	ldr	r0, [pc, #496]	; (44528 <main+0x540>)
   44338:	f016 ffcb 	bl	5b2d2 <strstr>
   4433c:	2800      	cmp	r0, #0
   4433e:	f000 8084 	beq.w	4444a <main+0x462>
			sprintf(t1ID,"%d",cell_data.current_cell.id);
   44342:	68a3      	ldr	r3, [r4, #8]
   44344:	220f      	movs	r2, #15
   44346:	2100      	movs	r1, #0
   44348:	9300      	str	r3, [sp, #0]
   4434a:	4877      	ldr	r0, [pc, #476]	; (44528 <main+0x540>)
   4434c:	4b73      	ldr	r3, [pc, #460]	; (4451c <main+0x534>)
   4434e:	f016 fee7 	bl	5b120 <__sprintf_chk>
			sprintf(t1MCC,"%03d",cell_data.current_cell.mcc);
   44352:	6823      	ldr	r3, [r4, #0]
   44354:	220c      	movs	r2, #12
   44356:	2100      	movs	r1, #0
   44358:	9300      	str	r3, [sp, #0]
   4435a:	4874      	ldr	r0, [pc, #464]	; (4452c <main+0x544>)
   4435c:	4b70      	ldr	r3, [pc, #448]	; (44520 <main+0x538>)
   4435e:	f016 fedf 	bl	5b120 <__sprintf_chk>
			sprintf(t1MNC,"%03d",cell_data.current_cell.mnc);
   44362:	6863      	ldr	r3, [r4, #4]
   44364:	220c      	movs	r2, #12
   44366:	2100      	movs	r1, #0
   44368:	9300      	str	r3, [sp, #0]
   4436a:	4871      	ldr	r0, [pc, #452]	; (44530 <main+0x548>)
   4436c:	4b6c      	ldr	r3, [pc, #432]	; (44520 <main+0x538>)
   4436e:	f016 fed7 	bl	5b120 <__sprintf_chk>
			sprintf(t1TAC,"%d",cell_data.current_cell.tac);
   44372:	68e3      	ldr	r3, [r4, #12]
   44374:	220c      	movs	r2, #12
   44376:	2100      	movs	r1, #0
   44378:	9300      	str	r3, [sp, #0]
   4437a:	486e      	ldr	r0, [pc, #440]	; (44534 <main+0x54c>)
   4437c:	4b67      	ldr	r3, [pc, #412]	; (4451c <main+0x534>)
   4437e:	f016 fecf 	bl	5b120 <__sprintf_chk>
			sprintf(t1TA,"%d",cell_data.current_cell.timing_advance);
   44382:	8aa3      	ldrh	r3, [r4, #20]
   44384:	220c      	movs	r2, #12
   44386:	2100      	movs	r1, #0
   44388:	9300      	str	r3, [sp, #0]
   4438a:	486b      	ldr	r0, [pc, #428]	; (44538 <main+0x550>)
   4438c:	4b63      	ldr	r3, [pc, #396]	; (4451c <main+0x534>)
   4438e:	f016 fec7 	bl	5b120 <__sprintf_chk>
			sprintf(t1RSRP,"%d",cell_data.current_cell.rsrp);
   44392:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   44396:	220c      	movs	r2, #12
   44398:	2100      	movs	r1, #0
   4439a:	9300      	str	r3, [sp, #0]
   4439c:	4867      	ldr	r0, [pc, #412]	; (4453c <main+0x554>)
   4439e:	4b5f      	ldr	r3, [pc, #380]	; (4451c <main+0x534>)
   443a0:	f016 febe 	bl	5b120 <__sprintf_chk>
			sprintf(t1RSRQ,"%d",cell_data.current_cell.rsrq);
   443a4:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
   443a8:	220c      	movs	r2, #12
   443aa:	2100      	movs	r1, #0
   443ac:	9300      	str	r3, [sp, #0]
   443ae:	4864      	ldr	r0, [pc, #400]	; (44540 <main+0x558>)
   443b0:	4b5a      	ldr	r3, [pc, #360]	; (4451c <main+0x534>)
   443b2:	f016 feb5 	bl	5b120 <__sprintf_chk>
			strcpy(t1COPS,t1MCC);
   443b6:	2219      	movs	r2, #25
   443b8:	495c      	ldr	r1, [pc, #368]	; (4452c <main+0x544>)
   443ba:	4862      	ldr	r0, [pc, #392]	; (44544 <main+0x55c>)
   443bc:	f016 ff3c 	bl	5b238 <__strcpy_chk>
			strcat(t1COPS,t1MNC);
   443c0:	2219      	movs	r2, #25
   443c2:	495b      	ldr	r1, [pc, #364]	; (44530 <main+0x548>)
   443c4:	485f      	ldr	r0, [pc, #380]	; (44544 <main+0x55c>)
			strcat(t2COPS,t2MNC);
   443c6:	f016 ff0a 	bl	5b1de <__strcat_chk>
	printk("Currently stored towers:\n");
   443ca:	485f      	ldr	r0, [pc, #380]	; (44548 <main+0x560>)
   443cc:	f011 f9a3 	bl	55716 <printk>
	printk("Tower 1: %s\n", t1ID);
   443d0:	4955      	ldr	r1, [pc, #340]	; (44528 <main+0x540>)
   443d2:	485e      	ldr	r0, [pc, #376]	; (4454c <main+0x564>)
   443d4:	f011 f99f 	bl	55716 <printk>
	printk("Tower 2: %s\n", t2ID);
   443d8:	495d      	ldr	r1, [pc, #372]	; (44550 <main+0x568>)
   443da:	485e      	ldr	r0, [pc, #376]	; (44554 <main+0x56c>)
   443dc:	f011 f99b 	bl	55716 <printk>
	printk("Tower 3: %s\n", t3ID);
   443e0:	495d      	ldr	r1, [pc, #372]	; (44558 <main+0x570>)
   443e2:	485e      	ldr	r0, [pc, #376]	; (4455c <main+0x574>)
   443e4:	f011 f997 	bl	55716 <printk>
	printk("Tower 1 COPS: %s\n", t1COPS);
   443e8:	4956      	ldr	r1, [pc, #344]	; (44544 <main+0x55c>)
   443ea:	485d      	ldr	r0, [pc, #372]	; (44560 <main+0x578>)
   443ec:	f011 f993 	bl	55716 <printk>
	printk("Tower 2 COPS: %s\n", t2COPS);
   443f0:	495c      	ldr	r1, [pc, #368]	; (44564 <main+0x57c>)
   443f2:	485d      	ldr	r0, [pc, #372]	; (44568 <main+0x580>)
   443f4:	f011 f98f 	bl	55716 <printk>
	printk("Tower 3 COPS: %s\n", t3COPS);
   443f8:	495c      	ldr	r1, [pc, #368]	; (4456c <main+0x584>)
   443fa:	485d      	ldr	r0, [pc, #372]	; (44570 <main+0x588>)
   443fc:	f011 f98b 	bl	55716 <printk>
	if(!(strstr(t1ID, "empty") != NULL) && !(strstr(t2ID, "empty") != NULL) && !(strstr(t3ID, "empty") != NULL))
   44400:	4948      	ldr	r1, [pc, #288]	; (44524 <main+0x53c>)
   44402:	4849      	ldr	r0, [pc, #292]	; (44528 <main+0x540>)
   44404:	f016 ff65 	bl	5b2d2 <strstr>
   44408:	b958      	cbnz	r0, 44422 <main+0x43a>
   4440a:	4946      	ldr	r1, [pc, #280]	; (44524 <main+0x53c>)
   4440c:	4850      	ldr	r0, [pc, #320]	; (44550 <main+0x568>)
   4440e:	f016 ff60 	bl	5b2d2 <strstr>
   44412:	b930      	cbnz	r0, 44422 <main+0x43a>
   44414:	4943      	ldr	r1, [pc, #268]	; (44524 <main+0x53c>)
   44416:	4850      	ldr	r0, [pc, #320]	; (44558 <main+0x570>)
   44418:	f016 ff5b 	bl	5b2d2 <strstr>
   4441c:	b908      	cbnz	r0, 44422 <main+0x43a>
		Tower_Buffer_Full_Change();
   4441e:	f7fe fc9b 	bl	42d58 <Tower_Buffer_Full_Change>
	if(strstr(t1COPS, t_mobile_cops) != NULL)
   44422:	4954      	ldr	r1, [pc, #336]	; (44574 <main+0x58c>)
   44424:	4847      	ldr	r0, [pc, #284]	; (44544 <main+0x55c>)
   44426:	f016 ff54 	bl	5b2d2 <strstr>
		if(strstr(t2COPS, att_mobility_cops) != NULL)
   4442a:	4953      	ldr	r1, [pc, #332]	; (44578 <main+0x590>)
	if(strstr(t1COPS, t_mobile_cops) != NULL)
   4442c:	2800      	cmp	r0, #0
   4442e:	f000 8132 	beq.w	44696 <main+0x6ae>
		if(strstr(t2COPS, att_mobility_cops) != NULL)
   44432:	484c      	ldr	r0, [pc, #304]	; (44564 <main+0x57c>)
   44434:	f016 ff4d 	bl	5b2d2 <strstr>
   44438:	2800      	cmp	r0, #0
   4443a:	f000 810b 	beq.w	44654 <main+0x66c>
			changeCOPS(verizon, strlen(verizon));
   4443e:	484f      	ldr	r0, [pc, #316]	; (4457c <main+0x594>)
   44440:	f7fc fcd8 	bl	40df4 <strlen>
   44444:	4601      	mov	r1, r0
   44446:	484d      	ldr	r0, [pc, #308]	; (4457c <main+0x594>)
   44448:	e109      	b.n	4465e <main+0x676>
		else if((strstr(t2ID, "empty") != NULL)  && (!(strstr(t1COPS, newCOPS) != NULL)))
   4444a:	4936      	ldr	r1, [pc, #216]	; (44524 <main+0x53c>)
   4444c:	4840      	ldr	r0, [pc, #256]	; (44550 <main+0x568>)
   4444e:	f016 ff40 	bl	5b2d2 <strstr>
   44452:	2800      	cmp	r0, #0
   44454:	f000 80a0 	beq.w	44598 <main+0x5b0>
   44458:	483a      	ldr	r0, [pc, #232]	; (44544 <main+0x55c>)
   4445a:	a917      	add	r1, sp, #92	; 0x5c
   4445c:	f016 ff39 	bl	5b2d2 <strstr>
   44460:	4605      	mov	r5, r0
   44462:	2800      	cmp	r0, #0
   44464:	f040 8098 	bne.w	44598 <main+0x5b0>
			sprintf(t2ID,"%d",cell_data.current_cell.id);
   44468:	68a3      	ldr	r3, [r4, #8]
   4446a:	4601      	mov	r1, r0
   4446c:	220f      	movs	r2, #15
   4446e:	9300      	str	r3, [sp, #0]
   44470:	4837      	ldr	r0, [pc, #220]	; (44550 <main+0x568>)
   44472:	4b2a      	ldr	r3, [pc, #168]	; (4451c <main+0x534>)
   44474:	f016 fe54 	bl	5b120 <__sprintf_chk>
			sprintf(t2MCC,"%03d",cell_data.current_cell.mcc);
   44478:	6823      	ldr	r3, [r4, #0]
   4447a:	220c      	movs	r2, #12
   4447c:	4629      	mov	r1, r5
   4447e:	9300      	str	r3, [sp, #0]
   44480:	483f      	ldr	r0, [pc, #252]	; (44580 <main+0x598>)
   44482:	4b27      	ldr	r3, [pc, #156]	; (44520 <main+0x538>)
   44484:	f016 fe4c 	bl	5b120 <__sprintf_chk>
			sprintf(t2MNC,"%03d",cell_data.current_cell.mnc);
   44488:	6863      	ldr	r3, [r4, #4]
   4448a:	220c      	movs	r2, #12
   4448c:	4629      	mov	r1, r5
   4448e:	9300      	str	r3, [sp, #0]
   44490:	483c      	ldr	r0, [pc, #240]	; (44584 <main+0x59c>)
   44492:	4b23      	ldr	r3, [pc, #140]	; (44520 <main+0x538>)
   44494:	f016 fe44 	bl	5b120 <__sprintf_chk>
			sprintf(t2TAC,"%d",cell_data.current_cell.tac);
   44498:	68e3      	ldr	r3, [r4, #12]
   4449a:	220c      	movs	r2, #12
   4449c:	4629      	mov	r1, r5
   4449e:	9300      	str	r3, [sp, #0]
   444a0:	4839      	ldr	r0, [pc, #228]	; (44588 <main+0x5a0>)
   444a2:	4b1e      	ldr	r3, [pc, #120]	; (4451c <main+0x534>)
   444a4:	f016 fe3c 	bl	5b120 <__sprintf_chk>
			sprintf(t2TA,"%d",cell_data.current_cell.timing_advance);
   444a8:	8aa3      	ldrh	r3, [r4, #20]
   444aa:	220c      	movs	r2, #12
   444ac:	4629      	mov	r1, r5
   444ae:	9300      	str	r3, [sp, #0]
   444b0:	4836      	ldr	r0, [pc, #216]	; (4458c <main+0x5a4>)
   444b2:	4b1a      	ldr	r3, [pc, #104]	; (4451c <main+0x534>)
   444b4:	f016 fe34 	bl	5b120 <__sprintf_chk>
			sprintf(t2RSRP,"%d",cell_data.current_cell.rsrp);
   444b8:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   444bc:	220c      	movs	r2, #12
   444be:	4629      	mov	r1, r5
   444c0:	9300      	str	r3, [sp, #0]
   444c2:	4833      	ldr	r0, [pc, #204]	; (44590 <main+0x5a8>)
   444c4:	4b15      	ldr	r3, [pc, #84]	; (4451c <main+0x534>)
   444c6:	f016 fe2b 	bl	5b120 <__sprintf_chk>
			sprintf(t2RSRQ,"%d",cell_data.current_cell.rsrq);
   444ca:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
   444ce:	220c      	movs	r2, #12
   444d0:	4629      	mov	r1, r5
   444d2:	9300      	str	r3, [sp, #0]
   444d4:	482f      	ldr	r0, [pc, #188]	; (44594 <main+0x5ac>)
   444d6:	4b11      	ldr	r3, [pc, #68]	; (4451c <main+0x534>)
   444d8:	f016 fe22 	bl	5b120 <__sprintf_chk>
			strcpy(t2COPS,t2MCC);
   444dc:	2219      	movs	r2, #25
   444de:	4928      	ldr	r1, [pc, #160]	; (44580 <main+0x598>)
   444e0:	4820      	ldr	r0, [pc, #128]	; (44564 <main+0x57c>)
   444e2:	f016 fea9 	bl	5b238 <__strcpy_chk>
			strcat(t2COPS,t2MNC);
   444e6:	2219      	movs	r2, #25
   444e8:	4926      	ldr	r1, [pc, #152]	; (44584 <main+0x59c>)
   444ea:	481e      	ldr	r0, [pc, #120]	; (44564 <main+0x57c>)
   444ec:	e76b      	b.n	443c6 <main+0x3de>
   444ee:	bf00      	nop
   444f0:	0005d5a8 	.word	0x0005d5a8
   444f4:	0005d5b7 	.word	0x0005d5b7
   444f8:	0005d5c3 	.word	0x0005d5c3
   444fc:	0005d5cf 	.word	0x0005d5cf
   44500:	0005d5dd 	.word	0x0005d5dd
   44504:	0005d5e7 	.word	0x0005d5e7
   44508:	0005d5f4 	.word	0x0005d5f4
   4450c:	0005d609 	.word	0x0005d609
   44510:	0005d622 	.word	0x0005d622
   44514:	0005d639 	.word	0x0005d639
   44518:	0005d644 	.word	0x0005d644
   4451c:	0005fd35 	.word	0x0005fd35
   44520:	0005d64f 	.word	0x0005d64f
   44524:	0005d10b 	.word	0x0005d10b
   44528:	2001dce9 	.word	0x2001dce9
   4452c:	2001dcdd 	.word	0x2001dcdd
   44530:	2001dcd1 	.word	0x2001dcd1
   44534:	2001dcc5 	.word	0x2001dcc5
   44538:	2001dcb9 	.word	0x2001dcb9
   4453c:	2001dc94 	.word	0x2001dc94
   44540:	2001dc88 	.word	0x2001dc88
   44544:	2001dca0 	.word	0x2001dca0
   44548:	0005d688 	.word	0x0005d688
   4454c:	0005d371 	.word	0x0005d371
   44550:	2001dab7 	.word	0x2001dab7
   44554:	0005d37e 	.word	0x0005d37e
   44558:	2001d885 	.word	0x2001d885
   4455c:	0005d38b 	.word	0x0005d38b
   44560:	0005d6a2 	.word	0x0005d6a2
   44564:	2001da6e 	.word	0x2001da6e
   44568:	0005d6b4 	.word	0x0005d6b4
   4456c:	2001d83c 	.word	0x2001d83c
   44570:	0005d6c6 	.word	0x0005d6c6
   44574:	0005d6d8 	.word	0x0005d6d8
   44578:	0005d6df 	.word	0x0005d6df
   4457c:	0005d6e6 	.word	0x0005d6e6
   44580:	2001daab 	.word	0x2001daab
   44584:	2001da9f 	.word	0x2001da9f
   44588:	2001da93 	.word	0x2001da93
   4458c:	2001da87 	.word	0x2001da87
   44590:	2001da62 	.word	0x2001da62
   44594:	2001da56 	.word	0x2001da56
		else if((strstr(t3ID, "empty") != NULL) && (!(strstr(t1COPS, newCOPS) != NULL)) && (!(strstr(t2COPS, newCOPS) != NULL)))
   44598:	4956      	ldr	r1, [pc, #344]	; (446f4 <main+0x70c>)
   4459a:	4857      	ldr	r0, [pc, #348]	; (446f8 <main+0x710>)
   4459c:	f016 fe99 	bl	5b2d2 <strstr>
   445a0:	2800      	cmp	r0, #0
   445a2:	d04f      	beq.n	44644 <main+0x65c>
   445a4:	4855      	ldr	r0, [pc, #340]	; (446fc <main+0x714>)
   445a6:	a917      	add	r1, sp, #92	; 0x5c
   445a8:	f016 fe93 	bl	5b2d2 <strstr>
   445ac:	2800      	cmp	r0, #0
   445ae:	d149      	bne.n	44644 <main+0x65c>
   445b0:	4853      	ldr	r0, [pc, #332]	; (44700 <main+0x718>)
   445b2:	a917      	add	r1, sp, #92	; 0x5c
   445b4:	f016 fe8d 	bl	5b2d2 <strstr>
   445b8:	4605      	mov	r5, r0
   445ba:	2800      	cmp	r0, #0
   445bc:	d142      	bne.n	44644 <main+0x65c>
			sprintf(t3ID,"%d",cell_data.current_cell.id);
   445be:	68a3      	ldr	r3, [r4, #8]
   445c0:	4601      	mov	r1, r0
   445c2:	220f      	movs	r2, #15
   445c4:	9300      	str	r3, [sp, #0]
   445c6:	484c      	ldr	r0, [pc, #304]	; (446f8 <main+0x710>)
   445c8:	4b4e      	ldr	r3, [pc, #312]	; (44704 <main+0x71c>)
   445ca:	f016 fda9 	bl	5b120 <__sprintf_chk>
			sprintf(t3MCC,"%03d",cell_data.current_cell.mcc);
   445ce:	6823      	ldr	r3, [r4, #0]
   445d0:	220c      	movs	r2, #12
   445d2:	4629      	mov	r1, r5
   445d4:	9300      	str	r3, [sp, #0]
   445d6:	484c      	ldr	r0, [pc, #304]	; (44708 <main+0x720>)
   445d8:	4b4c      	ldr	r3, [pc, #304]	; (4470c <main+0x724>)
   445da:	f016 fda1 	bl	5b120 <__sprintf_chk>
			sprintf(t3MNC,"%03d",cell_data.current_cell.mnc);
   445de:	6863      	ldr	r3, [r4, #4]
   445e0:	220c      	movs	r2, #12
   445e2:	4629      	mov	r1, r5
   445e4:	9300      	str	r3, [sp, #0]
   445e6:	484a      	ldr	r0, [pc, #296]	; (44710 <main+0x728>)
   445e8:	4b48      	ldr	r3, [pc, #288]	; (4470c <main+0x724>)
   445ea:	f016 fd99 	bl	5b120 <__sprintf_chk>
			sprintf(t3TAC,"%d",cell_data.current_cell.tac);
   445ee:	68e3      	ldr	r3, [r4, #12]
   445f0:	220c      	movs	r2, #12
   445f2:	4629      	mov	r1, r5
   445f4:	9300      	str	r3, [sp, #0]
   445f6:	4847      	ldr	r0, [pc, #284]	; (44714 <main+0x72c>)
   445f8:	4b42      	ldr	r3, [pc, #264]	; (44704 <main+0x71c>)
   445fa:	f016 fd91 	bl	5b120 <__sprintf_chk>
			sprintf(t3TA,"%d",cell_data.current_cell.timing_advance);
   445fe:	8aa3      	ldrh	r3, [r4, #20]
   44600:	220c      	movs	r2, #12
   44602:	4629      	mov	r1, r5
   44604:	9300      	str	r3, [sp, #0]
   44606:	4844      	ldr	r0, [pc, #272]	; (44718 <main+0x730>)
   44608:	4b3e      	ldr	r3, [pc, #248]	; (44704 <main+0x71c>)
   4460a:	f016 fd89 	bl	5b120 <__sprintf_chk>
			sprintf(t3RSRP,"%d",cell_data.current_cell.rsrp);
   4460e:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   44612:	220c      	movs	r2, #12
   44614:	4629      	mov	r1, r5
   44616:	9300      	str	r3, [sp, #0]
   44618:	4840      	ldr	r0, [pc, #256]	; (4471c <main+0x734>)
   4461a:	4b3a      	ldr	r3, [pc, #232]	; (44704 <main+0x71c>)
   4461c:	f016 fd80 	bl	5b120 <__sprintf_chk>
			sprintf(t3RSRQ,"%d",cell_data.current_cell.rsrq);
   44620:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
   44624:	220c      	movs	r2, #12
   44626:	4629      	mov	r1, r5
   44628:	9300      	str	r3, [sp, #0]
   4462a:	483d      	ldr	r0, [pc, #244]	; (44720 <main+0x738>)
   4462c:	4b35      	ldr	r3, [pc, #212]	; (44704 <main+0x71c>)
   4462e:	f016 fd77 	bl	5b120 <__sprintf_chk>
			strcpy(t3COPS,t3MCC);
   44632:	2219      	movs	r2, #25
   44634:	4934      	ldr	r1, [pc, #208]	; (44708 <main+0x720>)
   44636:	483b      	ldr	r0, [pc, #236]	; (44724 <main+0x73c>)
   44638:	f016 fdfe 	bl	5b238 <__strcpy_chk>
			strcat(t3COPS,t3MNC);
   4463c:	2219      	movs	r2, #25
   4463e:	4934      	ldr	r1, [pc, #208]	; (44710 <main+0x728>)
   44640:	4838      	ldr	r0, [pc, #224]	; (44724 <main+0x73c>)
   44642:	e6c0      	b.n	443c6 <main+0x3de>
			printk("Information not recorded!\n");
   44644:	4838      	ldr	r0, [pc, #224]	; (44728 <main+0x740>)
		printk("Invalid timing advance!\n");
   44646:	f011 f866 	bl	55716 <printk>
		Tower_Read_Fail_Change();
   4464a:	f7fe fb5f 	bl	42d0c <Tower_Read_Fail_Change>
   4464e:	e6bc      	b.n	443ca <main+0x3e2>
		printk("Invalid timing advance!\n");
   44650:	4836      	ldr	r0, [pc, #216]	; (4472c <main+0x744>)
   44652:	e7f8      	b.n	44646 <main+0x65e>
			changeCOPS(att_mobility_cops, strlen(att_mobility_cops));
   44654:	4836      	ldr	r0, [pc, #216]	; (44730 <main+0x748>)
   44656:	f7fc fbcd 	bl	40df4 <strlen>
   4465a:	4601      	mov	r1, r0
   4465c:	4834      	ldr	r0, [pc, #208]	; (44730 <main+0x748>)
   4465e:	f7ff f965 	bl	4392c <changeCOPS>
   44662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4466a:	4630      	mov	r0, r6
   4466c:	f00e f81e 	bl	526ac <z_impl_k_sem_take>
			printk("Data is being gathered!\n");
   44670:	4830      	ldr	r0, [pc, #192]	; (44734 <main+0x74c>)
   44672:	f011 f850 	bl	55716 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   44676:	e8d7 3faf 	lda	r3, [r7]
			if (!atomic_get(&connected)) 
   4467a:	b943      	cbnz	r3, 4468e <main+0x6a6>
				LOG_INF("Ignoring button press, not connected to network");
   4467c:	4a2e      	ldr	r2, [pc, #184]	; (44738 <main+0x750>)
   4467e:	4618      	mov	r0, r3
   44680:	e9cd 3201 	strd	r3, r2, [sp, #4]
   44684:	492d      	ldr	r1, [pc, #180]	; (4473c <main+0x754>)
   44686:	2203      	movs	r2, #3
   44688:	9300      	str	r3, [sp, #0]
   4468a:	f010 ff8c 	bl	555a6 <z_log_msg_runtime_create.constprop.0>
			start_cell_measurements();
   4468e:	f7fe fa31 	bl	42af4 <start_cell_measurements>
			getData = 1;
   44692:	2501      	movs	r5, #1
   44694:	e574      	b.n	44180 <main+0x198>
	else if(strstr(t1COPS, att_mobility_cops) != NULL)
   44696:	4819      	ldr	r0, [pc, #100]	; (446fc <main+0x714>)
   44698:	f016 fe1b 	bl	5b2d2 <strstr>
   4469c:	b160      	cbz	r0, 446b8 <main+0x6d0>
		if(strstr(t2COPS, t_mobile_cops) != NULL)
   4469e:	4928      	ldr	r1, [pc, #160]	; (44740 <main+0x758>)
   446a0:	4817      	ldr	r0, [pc, #92]	; (44700 <main+0x718>)
   446a2:	f016 fe16 	bl	5b2d2 <strstr>
   446a6:	2800      	cmp	r0, #0
   446a8:	f47f aec9 	bne.w	4443e <main+0x456>
			changeCOPS(t_mobile_cops, strlen(t_mobile_cops));
   446ac:	4824      	ldr	r0, [pc, #144]	; (44740 <main+0x758>)
   446ae:	f7fc fba1 	bl	40df4 <strlen>
   446b2:	4601      	mov	r1, r0
   446b4:	4822      	ldr	r0, [pc, #136]	; (44740 <main+0x758>)
   446b6:	e7d2      	b.n	4465e <main+0x676>
	else if(strstr(t1COPS, verizon) != NULL)
   446b8:	4922      	ldr	r1, [pc, #136]	; (44744 <main+0x75c>)
   446ba:	4810      	ldr	r0, [pc, #64]	; (446fc <main+0x714>)
   446bc:	f016 fe09 	bl	5b2d2 <strstr>
   446c0:	b188      	cbz	r0, 446e6 <main+0x6fe>
		if(strstr(t2COPS, t_mobile_cops) != NULL)
   446c2:	491f      	ldr	r1, [pc, #124]	; (44740 <main+0x758>)
   446c4:	480e      	ldr	r0, [pc, #56]	; (44700 <main+0x718>)
   446c6:	f016 fe04 	bl	5b2d2 <strstr>
   446ca:	b160      	cbz	r0, 446e6 <main+0x6fe>
			changeCOPS(att_mobility_cops, strlen(att_mobility_cops));
   446cc:	4818      	ldr	r0, [pc, #96]	; (44730 <main+0x748>)
   446ce:	f7fc fb91 	bl	40df4 <strlen>
   446d2:	4601      	mov	r1, r0
   446d4:	4816      	ldr	r0, [pc, #88]	; (44730 <main+0x748>)
		changeCOPS(t_mobile_cops, strlen(t_mobile_cops));
   446d6:	f7ff f929 	bl	4392c <changeCOPS>
   446da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   446de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   446e2:	4819      	ldr	r0, [pc, #100]	; (44748 <main+0x760>)
   446e4:	e7c2      	b.n	4466c <main+0x684>
   446e6:	4816      	ldr	r0, [pc, #88]	; (44740 <main+0x758>)
   446e8:	f7fc fb84 	bl	40df4 <strlen>
   446ec:	4601      	mov	r1, r0
   446ee:	4814      	ldr	r0, [pc, #80]	; (44740 <main+0x758>)
   446f0:	e7f1      	b.n	446d6 <main+0x6ee>
   446f2:	bf00      	nop
   446f4:	0005d10b 	.word	0x0005d10b
   446f8:	2001d885 	.word	0x2001d885
   446fc:	2001dca0 	.word	0x2001dca0
   44700:	2001da6e 	.word	0x2001da6e
   44704:	0005fd35 	.word	0x0005fd35
   44708:	2001d879 	.word	0x2001d879
   4470c:	0005d64f 	.word	0x0005d64f
   44710:	2001d86d 	.word	0x2001d86d
   44714:	2001d861 	.word	0x2001d861
   44718:	2001d855 	.word	0x2001d855
   4471c:	2001d830 	.word	0x2001d830
   44720:	2001d824 	.word	0x2001d824
   44724:	2001d83c 	.word	0x2001d83c
   44728:	0005d654 	.word	0x0005d654
   4472c:	0005d66f 	.word	0x0005d66f
   44730:	0005d6df 	.word	0x0005d6df
   44734:	0005d6ed 	.word	0x0005d6ed
   44738:	0005d309 	.word	0x0005d309
   4473c:	0005bf14 	.word	0x0005bf14
   44740:	0005d6d8 	.word	0x0005d6d8
   44744:	0005d6e6 	.word	0x0005d6e6
   44748:	2001abe8 	.word	0x2001abe8

0004474c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   4474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44750:	b091      	sub	sp, #68	; 0x44
   44752:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   44754:	f002 0304 	and.w	r3, r2, #4
   44758:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   4475a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   4475e:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   44760:	0784      	lsls	r4, r0, #30
{
   44762:	4605      	mov	r5, r0
   44764:	460e      	mov	r6, r1
   44766:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   4476a:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   4476c:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   4476e:	f040 81bd 	bne.w	44aec <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   44772:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   44774:	b130      	cbz	r0, 44784 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   44776:	2907      	cmp	r1, #7
   44778:	d809      	bhi.n	4478e <cbvprintf_package+0x42>
		return -ENOSPC;
   4477a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   4477e:	b011      	add	sp, #68	; 0x44
   44780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   44784:	f001 0607 	and.w	r6, r1, #7
   44788:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   4478a:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   4478e:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   44790:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
   44794:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
   44798:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   4479a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   4479e:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   447a0:	9301      	str	r3, [sp, #4]
	bool parsing = false;
   447a2:	46cb      	mov	fp, r9
	size = sizeof(char *);
   447a4:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   447a6:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
   447aa:	b10d      	cbz	r5, 447b0 <cbvprintf_package+0x64>
				*(const char **)buf = s;
   447ac:	9800      	ldr	r0, [sp, #0]
   447ae:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   447b0:	9805      	ldr	r0, [sp, #20]
   447b2:	2800      	cmp	r0, #0
   447b4:	f300 80eb 	bgt.w	4498e <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   447b8:	4899      	ldr	r0, [pc, #612]	; (44a20 <cbvprintf_package+0x2d4>)
   447ba:	9a00      	ldr	r2, [sp, #0]
   447bc:	4282      	cmp	r2, r0
   447be:	d303      	bcc.n	447c8 <cbvprintf_package+0x7c>
   447c0:	4898      	ldr	r0, [pc, #608]	; (44a24 <cbvprintf_package+0x2d8>)
   447c2:	4282      	cmp	r2, r0
   447c4:	f0c0 80e3 	bcc.w	4498e <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   447c8:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   447ca:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   447ce:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   447d0:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   447d4:	f100 8106 	bmi.w	449e4 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   447d8:	2f0f      	cmp	r7, #15
   447da:	f200 80b4 	bhi.w	44946 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   447de:	2d00      	cmp	r5, #0
   447e0:	f000 8108 	beq.w	449f4 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
   447e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
   447e8:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   447ec:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   447ee:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   447f2:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   447f6:	9804      	ldr	r0, [sp, #16]
   447f8:	3001      	adds	r0, #1
   447fa:	9004      	str	r0, [sp, #16]
   447fc:	e0ea      	b.n	449d4 <cbvprintf_package+0x288>
			switch (*fmt) {
   447fe:	287a      	cmp	r0, #122	; 0x7a
   44800:	d860      	bhi.n	448c4 <cbvprintf_package+0x178>
   44802:	284b      	cmp	r0, #75	; 0x4b
   44804:	d80e      	bhi.n	44824 <cbvprintf_package+0xd8>
   44806:	2847      	cmp	r0, #71	; 0x47
   44808:	d85c      	bhi.n	448c4 <cbvprintf_package+0x178>
   4480a:	2829      	cmp	r0, #41	; 0x29
   4480c:	d82f      	bhi.n	4486e <cbvprintf_package+0x122>
   4480e:	2825      	cmp	r0, #37	; 0x25
   44810:	d055      	beq.n	448be <cbvprintf_package+0x172>
   44812:	d857      	bhi.n	448c4 <cbvprintf_package+0x178>
   44814:	2820      	cmp	r0, #32
   44816:	d07d      	beq.n	44914 <cbvprintf_package+0x1c8>
   44818:	3823      	subs	r0, #35	; 0x23
   4481a:	f1d0 0b00 	rsbs	fp, r0, #0
   4481e:	eb4b 0b00 	adc.w	fp, fp, r0
   44822:	e077      	b.n	44914 <cbvprintf_package+0x1c8>
   44824:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   44828:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   4482c:	d84a      	bhi.n	448c4 <cbvprintf_package+0x178>
   4482e:	e8df f00c 	tbb	[pc, ip]
   44832:	4971      	.short	0x4971
   44834:	49494949 	.word	0x49494949
   44838:	49494949 	.word	0x49494949
   4483c:	494c4949 	.word	0x494c4949
   44840:	49494949 	.word	0x49494949
   44844:	5a494949 	.word	0x5a494949
   44848:	5a4c4c49 	.word	0x5a4c4c49
   4484c:	4c715a5a 	.word	0x4c715a5a
   44850:	4971496e 	.word	0x4971496e
   44854:	49184c18 	.word	0x49184c18
   44858:	4c808349 	.word	0x4c808349
   4485c:	494c4949 	.word	0x494c4949
   44860:	80          	.byte	0x80
   44861:	00          	.byte	0x00
   44862:	2000      	movs	r0, #0
   44864:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   44868:	f04f 0a04 	mov.w	sl, #4
   4486c:	e039      	b.n	448e2 <cbvprintf_package+0x196>
   4486e:	2201      	movs	r2, #1
			switch (*fmt) {
   44870:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   44874:	fa5f fc8c 	uxtb.w	ip, ip
   44878:	fa02 fc0c 	lsl.w	ip, r2, ip
   4487c:	ea1c 0f0e 	tst.w	ip, lr
   44880:	d148      	bne.n	44914 <cbvprintf_package+0x1c8>
   44882:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   44886:	d12e      	bne.n	448e6 <cbvprintf_package+0x19a>
   44888:	ea1c 0b02 	ands.w	fp, ip, r2
   4488c:	d042      	beq.n	44914 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
   4488e:	3c01      	subs	r4, #1
   44890:	4454      	add	r4, sl
   44892:	f1ca 0c00 	rsb	ip, sl, #0
   44896:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   4489a:	2d00      	cmp	r5, #0
   4489c:	d061      	beq.n	44962 <cbvprintf_package+0x216>
   4489e:	eba3 0c05 	sub.w	ip, r3, r5
   448a2:	44a4      	add	ip, r4
   448a4:	4566      	cmp	r6, ip
   448a6:	f4ff af68 	bcc.w	4477a <cbvprintf_package+0x2e>
		if (is_str_arg) {
   448aa:	2800      	cmp	r0, #0
   448ac:	d168      	bne.n	44980 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   448ae:	2b04      	cmp	r3, #4
   448b0:	d147      	bne.n	44942 <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
   448b2:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   448b6:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   448b8:	2304      	movs	r3, #4
   448ba:	3404      	adds	r4, #4
   448bc:	e02a      	b.n	44914 <cbvprintf_package+0x1c8>
				arg_idx--;
   448be:	9a01      	ldr	r2, [sp, #4]
   448c0:	3a01      	subs	r2, #1
   448c2:	9201      	str	r2, [sp, #4]
				parsing = false;
   448c4:	f04f 0b00 	mov.w	fp, #0
				continue;
   448c8:	e024      	b.n	44914 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
   448ca:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   448ce:	286c      	cmp	r0, #108	; 0x6c
   448d0:	d134      	bne.n	4493c <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
   448d2:	2000      	movs	r0, #0
   448d4:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
   448d8:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   448da:	2b6c      	cmp	r3, #108	; 0x6c
   448dc:	d1c4      	bne.n	44868 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
   448de:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   448e2:	4653      	mov	r3, sl
   448e4:	e7d3      	b.n	4488e <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
   448e6:	f108 0807 	add.w	r8, r8, #7
   448ea:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   448ee:	3407      	adds	r4, #7
   448f0:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
   448f4:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
   448f8:	b135      	cbz	r5, 44908 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
   448fa:	9806      	ldr	r0, [sp, #24]
   448fc:	4420      	add	r0, r4
   448fe:	42b0      	cmp	r0, r6
   44900:	f63f af3b 	bhi.w	4477a <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
   44904:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
   44908:	f04f 0b00 	mov.w	fp, #0
				buf += size;
   4490c:	3408      	adds	r4, #8
			switch (*fmt) {
   4490e:	f04f 0a08 	mov.w	sl, #8
   44912:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   44914:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   44918:	2800      	cmp	r0, #0
   4491a:	d078      	beq.n	44a0e <cbvprintf_package+0x2c2>
			if (!parsing) {
   4491c:	f1bb 0f00 	cmp.w	fp, #0
   44920:	f47f af6d 	bne.w	447fe <cbvprintf_package+0xb2>
				if (*fmt == '%') {
   44924:	2825      	cmp	r0, #37	; 0x25
   44926:	d1f5      	bne.n	44914 <cbvprintf_package+0x1c8>
					parsing = true;
   44928:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
   4492c:	9b01      	ldr	r3, [sp, #4]
   4492e:	3301      	adds	r3, #1
   44930:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
   44932:	f04f 0a04 	mov.w	sl, #4
   44936:	e7ec      	b.n	44912 <cbvprintf_package+0x1c6>
			switch (*fmt) {
   44938:	4658      	mov	r0, fp
   4493a:	e793      	b.n	44864 <cbvprintf_package+0x118>
   4493c:	2000      	movs	r0, #0
				parsing = false;
   4493e:	4683      	mov	fp, r0
   44940:	e7a5      	b.n	4488e <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
   44942:	2b08      	cmp	r3, #8
   44944:	d002      	beq.n	4494c <cbvprintf_package+0x200>
					return -EINVAL;
   44946:	f06f 0015 	mvn.w	r0, #21
   4494a:	e718      	b.n	4477e <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
   4494c:	f108 0807 	add.w	r8, r8, #7
   44950:	f028 0807 	bic.w	r8, r8, #7
   44954:	ecb8 7b02 	vldmia	r8!, {d7}
					*(long long *)buf = v;
   44958:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
   4495c:	2308      	movs	r3, #8
   4495e:	3408      	adds	r4, #8
   44960:	e7d8      	b.n	44914 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
   44962:	b968      	cbnz	r0, 44980 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   44964:	2b04      	cmp	r3, #4
   44966:	d102      	bne.n	4496e <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
   44968:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   4496c:	e7a4      	b.n	448b8 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
   4496e:	2b08      	cmp	r3, #8
   44970:	d1e9      	bne.n	44946 <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
   44972:	f108 0807 	add.w	r8, r8, #7
   44976:	f028 0807 	bic.w	r8, r8, #7
   4497a:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   4497e:	e7ed      	b.n	4495c <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   44980:	9805      	ldr	r0, [sp, #20]
   44982:	3801      	subs	r0, #1
   44984:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   44986:	f858 0b04 	ldr.w	r0, [r8], #4
   4498a:	9000      	str	r0, [sp, #0]
   4498c:	e70d      	b.n	447aa <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
   4498e:	9a03      	ldr	r2, [sp, #12]
   44990:	0790      	lsls	r0, r2, #30
   44992:	d520      	bpl.n	449d6 <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   44994:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   44998:	eba4 0e05 	sub.w	lr, r4, r5
   4499c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   449a0:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   449a4:	d2cf      	bcs.n	44946 <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   449a6:	2f0f      	cmp	r7, #15
   449a8:	d8cd      	bhi.n	44946 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   449aa:	b1f5      	cbz	r5, 449ea <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
   449ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
   449b0:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   449b4:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   449b6:	b2c0      	uxtb	r0, r0
   449b8:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   449bc:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   449c0:	f1bc 0f00 	cmp.w	ip, #0
   449c4:	f43f af17 	beq.w	447f6 <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   449c8:	f060 007f 	orn	r0, r0, #127	; 0x7f
   449cc:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   449d0:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   449d4:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   449d6:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
   449da:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
   449de:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   449e0:	9206      	str	r2, [sp, #24]
   449e2:	e797      	b.n	44914 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   449e4:	f04f 0c00 	mov.w	ip, #0
   449e8:	e7da      	b.n	449a0 <cbvprintf_package+0x254>
				} else if (is_ro) {
   449ea:	f1bc 0f00 	cmp.w	ip, #0
   449ee:	d001      	beq.n	449f4 <cbvprintf_package+0x2a8>
					len += 1;
   449f0:	3601      	adds	r6, #1
   449f2:	e7ef      	b.n	449d4 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
   449f4:	9a02      	ldr	r2, [sp, #8]
					len += 2;
   449f6:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   449f8:	2a00      	cmp	r2, #0
   449fa:	d1eb      	bne.n	449d4 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
   449fc:	9800      	ldr	r0, [sp, #0]
   449fe:	e9cd 3106 	strd	r3, r1, [sp, #24]
   44a02:	f7fc f9f7 	bl	40df4 <strlen>
   44a06:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   44a0a:	4406      	add	r6, r0
   44a0c:	e7e2      	b.n	449d4 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
   44a0e:	1b63      	subs	r3, r4, r5
   44a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   44a14:	d297      	bcs.n	44946 <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
   44a16:	b93d      	cbnz	r5, 44a28 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   44a18:	f1a6 0408 	sub.w	r4, r6, #8
   44a1c:	18e0      	adds	r0, r4, r3
   44a1e:	e6ae      	b.n	4477e <cbvprintf_package+0x32>
   44a20:	0005baa0 	.word	0x0005baa0
   44a24:	00060b6c 	.word	0x00060b6c
	if (rws_pos_en) {
   44a28:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   44a2a:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
   44a2c:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   44a2e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   44a30:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   44a34:	b1c2      	cbz	r2, 44a68 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   44a36:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   44a38:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   44a3c:	f1b9 0f00 	cmp.w	r9, #0
   44a40:	d005      	beq.n	44a4e <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
   44a42:	2200      	movs	r2, #0
   44a44:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
   44a46:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   44a4a:	4297      	cmp	r7, r2
   44a4c:	d10e      	bne.n	44a6c <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
   44a4e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   44a52:	f1c5 0301 	rsb	r3, r5, #1
   44a56:	f10d 0820 	add.w	r8, sp, #32
   44a5a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   44a5c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   44a60:	4557      	cmp	r7, sl
   44a62:	d112      	bne.n	44a8a <cbvprintf_package+0x33e>
	return BUF_OFFSET;
   44a64:	1b60      	subs	r0, r4, r5
   44a66:	e68a      	b.n	4477e <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   44a68:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   44a6a:	e7e5      	b.n	44a38 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   44a6c:	f810 3b01 	ldrb.w	r3, [r0], #1
   44a70:	0619      	lsls	r1, r3, #24
   44a72:	d508      	bpl.n	44a86 <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
   44a74:	eb04 0e0c 	add.w	lr, r4, ip
   44a78:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   44a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   44a7e:	f4ff ae7c 	bcc.w	4477a <cbvprintf_package+0x2e>
			*buf++ = pos;
   44a82:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   44a86:	3201      	adds	r2, #1
   44a88:	e7df      	b.n	44a4a <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   44a8a:	f1b9 0f00 	cmp.w	r9, #0
   44a8e:	d003      	beq.n	44a98 <cbvprintf_package+0x34c>
   44a90:	f998 2000 	ldrsb.w	r2, [r8]
   44a94:	2a00      	cmp	r2, #0
   44a96:	db17      	blt.n	44ac8 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
   44a98:	9b02      	ldr	r3, [sp, #8]
   44a9a:	b1d3      	cbz	r3, 44ad2 <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
   44a9c:	f81a 200b 	ldrb.w	r2, [sl, fp]
   44aa0:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   44aa4:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   44aa6:	9b01      	ldr	r3, [sp, #4]
   44aa8:	1898      	adds	r0, r3, r2
   44aaa:	4420      	add	r0, r4
   44aac:	4286      	cmp	r6, r0
   44aae:	f4ff ae64 	bcc.w	4477a <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
   44ab2:	f898 0000 	ldrb.w	r0, [r8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   44ab6:	9900      	ldr	r1, [sp, #0]
   44ab8:	f804 0b01 	strb.w	r0, [r4], #1
   44abc:	4620      	mov	r0, r4
   44abe:	9203      	str	r2, [sp, #12]
   44ac0:	f016 f9cb 	bl	5ae5a <memcpy>
		buf += size;
   44ac4:	9a03      	ldr	r2, [sp, #12]
   44ac6:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   44ac8:	f10a 0a01 	add.w	sl, sl, #1
   44acc:	f108 0801 	add.w	r8, r8, #1
   44ad0:	e7c6      	b.n	44a60 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   44ad2:	f898 2000 	ldrb.w	r2, [r8]
   44ad6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   44ada:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   44adc:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
   44ade:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   44ae0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   44ae4:	f7fc f986 	bl	40df4 <strlen>
   44ae8:	1c42      	adds	r2, r0, #1
   44aea:	e7dc      	b.n	44aa6 <cbvprintf_package+0x35a>
		return -EFAULT;
   44aec:	f06f 000d 	mvn.w	r0, #13
   44af0:	e645      	b.n	4477e <cbvprintf_package+0x32>
   44af2:	bf00      	nop

00044af4 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   44af4:	2803      	cmp	r0, #3
{
   44af6:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   44af8:	d906      	bls.n	44b08 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   44afa:	f011 fafb 	bl	560f4 <__errno>
   44afe:	2309      	movs	r3, #9
   44b00:	6003      	str	r3, [r0, #0]
		return -1;
   44b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   44b06:	bd08      	pop	{r3, pc}
   44b08:	4b04      	ldr	r3, [pc, #16]	; (44b1c <_check_fd+0x28>)
   44b0a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
   44b0e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&fdtable[fd].refcount)) {
   44b12:	2b00      	cmp	r3, #0
   44b14:	d0f1      	beq.n	44afa <_check_fd+0x6>
	return 0;
   44b16:	2000      	movs	r0, #0
   44b18:	e7f5      	b.n	44b06 <_check_fd+0x12>
   44b1a:	bf00      	nop
   44b1c:	2001b4d4 	.word	0x2001b4d4

00044b20 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   44b20:	b570      	push	{r4, r5, r6, lr}
   44b22:	4604      	mov	r4, r0
   44b24:	460d      	mov	r5, r1
   44b26:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   44b28:	f7ff ffe4 	bl	44af4 <_check_fd>
   44b2c:	2800      	cmp	r0, #0
   44b2e:	db09      	blt.n	44b44 <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   44b30:	4b06      	ldr	r3, [pc, #24]	; (44b4c <z_get_fd_obj+0x2c>)
   44b32:	0160      	lsls	r0, r4, #5
   44b34:	b145      	cbz	r5, 44b48 <z_get_fd_obj+0x28>
   44b36:	181a      	adds	r2, r3, r0
   44b38:	6852      	ldr	r2, [r2, #4]
   44b3a:	42aa      	cmp	r2, r5
   44b3c:	d004      	beq.n	44b48 <z_get_fd_obj+0x28>
		errno = err;
   44b3e:	f011 fad9 	bl	560f4 <__errno>
   44b42:	6006      	str	r6, [r0, #0]
		return NULL;
   44b44:	2000      	movs	r0, #0
		return NULL;
	}

	return entry->obj;
}
   44b46:	bd70      	pop	{r4, r5, r6, pc}
	return entry->obj;
   44b48:	5818      	ldr	r0, [r3, r0]
   44b4a:	e7fc      	b.n	44b46 <z_get_fd_obj+0x26>
   44b4c:	2001b4cc 	.word	0x2001b4cc

00044b50 <z_reserve_fd>:

	return entry->obj;
}

int z_reserve_fd(void)
{
   44b50:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   44b52:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   44b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44b5c:	4814      	ldr	r0, [pc, #80]	; (44bb0 <z_reserve_fd+0x60>)
   44b5e:	f00d fc95 	bl	5248c <z_impl_k_mutex_lock>
   44b62:	4b14      	ldr	r3, [pc, #80]	; (44bb4 <z_reserve_fd+0x64>)
   44b64:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   44b68:	b17a      	cbz	r2, 44b8a <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   44b6a:	3401      	adds	r4, #1
   44b6c:	2c04      	cmp	r4, #4
   44b6e:	f103 0320 	add.w	r3, r3, #32
   44b72:	d1f7      	bne.n	44b64 <z_reserve_fd+0x14>
	errno = ENFILE;
   44b74:	f011 fabe 	bl	560f4 <__errno>
   44b78:	2317      	movs	r3, #23
	return -1;
   44b7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   44b7e:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   44b80:	480b      	ldr	r0, [pc, #44]	; (44bb0 <z_reserve_fd+0x60>)
   44b82:	f00d fcfd 	bl	52580 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   44b86:	4620      	mov	r0, r4
   44b88:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   44b8a:	e8d3 0fef 	ldaex	r0, [r3]
   44b8e:	3001      	adds	r0, #1
   44b90:	e8c3 0fe1 	stlex	r1, r0, [r3]
   44b94:	2900      	cmp	r1, #0
   44b96:	d1f8      	bne.n	44b8a <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   44b98:	4807      	ldr	r0, [pc, #28]	; (44bb8 <z_reserve_fd+0x68>)
   44b9a:	0163      	lsls	r3, r4, #5
   44b9c:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   44ba0:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   44ba2:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   44ba4:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   44ba6:	4418      	add	r0, r3
   44ba8:	f015 fe3d 	bl	5a826 <z_impl_k_mutex_init>
   44bac:	e7e8      	b.n	44b80 <z_reserve_fd+0x30>
   44bae:	bf00      	nop
   44bb0:	2001ab70 	.word	0x2001ab70
   44bb4:	2001b4d4 	.word	0x2001b4d4
   44bb8:	2001b4cc 	.word	0x2001b4cc

00044bbc <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   44bbc:	b410      	push	{r4}
   44bbe:	4604      	mov	r4, r0
   44bc0:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   44bc2:	4b0a      	ldr	r3, [pc, #40]	; (44bec <z_finalize_fd+0x30>)
   44bc4:	0162      	lsls	r2, r4, #5
   44bc6:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   44bca:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   44bcc:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   44bce:	b148      	cbz	r0, 44be4 <z_finalize_fd+0x28>
   44bd0:	68c4      	ldr	r4, [r0, #12]
   44bd2:	b13c      	cbz	r4, 44be4 <z_finalize_fd+0x28>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   44bd4:	320c      	adds	r2, #12
   44bd6:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   44bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   44bdc:	f240 1205 	movw	r2, #261	; 0x105
   44be0:	f010 bd75 	b.w	556ce <z_fdtable_call_ioctl.constprop.0>
}
   44be4:	f85d 4b04 	ldr.w	r4, [sp], #4
   44be8:	4770      	bx	lr
   44bea:	bf00      	nop
   44bec:	2001b4cc 	.word	0x2001b4cc

00044bf0 <z_free_fd>:

void z_free_fd(int fd)
{
   44bf0:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   44bf2:	490d      	ldr	r1, [pc, #52]	; (44c28 <z_free_fd+0x38>)
   44bf4:	0140      	lsls	r0, r0, #5
   44bf6:	f100 0308 	add.w	r3, r0, #8
   44bfa:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   44bfc:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   44c00:	b182      	cbz	r2, 44c24 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   44c02:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   44c04:	e8d3 5fef 	ldaex	r5, [r3]
   44c08:	4295      	cmp	r5, r2
   44c0a:	d104      	bne.n	44c16 <z_free_fd+0x26>
   44c0c:	e8c3 4fec 	stlex	ip, r4, [r3]
   44c10:	f1bc 0f00 	cmp.w	ip, #0
   44c14:	d1f6      	bne.n	44c04 <z_free_fd+0x14>
   44c16:	d1f1      	bne.n	44bfc <z_free_fd+0xc>
	if (old_rc != 1) {
   44c18:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   44c1a:	bf01      	itttt	eq
   44c1c:	2300      	moveq	r3, #0
   44c1e:	180a      	addeq	r2, r1, r0
   44c20:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   44c22:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   44c24:	bd30      	pop	{r4, r5, pc}
   44c26:	bf00      	nop
   44c28:	2001b4cc 	.word	0x2001b4cc

00044c2c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   44c2c:	4b01      	ldr	r3, [pc, #4]	; (44c34 <char_out+0x8>)
   44c2e:	681b      	ldr	r3, [r3, #0]
   44c30:	4718      	bx	r3
   44c32:	bf00      	nop
   44c34:	2001a564 	.word	0x2001a564

00044c38 <__printk_hook_install>:
	_char_out = fn;
   44c38:	4b01      	ldr	r3, [pc, #4]	; (44c40 <__printk_hook_install+0x8>)
   44c3a:	6018      	str	r0, [r3, #0]
}
   44c3c:	4770      	bx	lr
   44c3e:	bf00      	nop
   44c40:	2001a564 	.word	0x2001a564

00044c44 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   44c44:	b507      	push	{r0, r1, r2, lr}
   44c46:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   44c48:	2100      	movs	r1, #0
   44c4a:	4602      	mov	r2, r0
   44c4c:	9100      	str	r1, [sp, #0]
   44c4e:	4803      	ldr	r0, [pc, #12]	; (44c5c <vprintk+0x18>)
   44c50:	f7fc f8da 	bl	40e08 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   44c54:	b003      	add	sp, #12
   44c56:	f85d fb04 	ldr.w	pc, [sp], #4
   44c5a:	bf00      	nop
   44c5c:	00044c2d 	.word	0x00044c2d

00044c60 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   44c60:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   44c62:	2500      	movs	r5, #0
{
   44c64:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   44c66:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   44c6a:	4604      	mov	r4, r0
   44c6c:	9500      	str	r5, [sp, #0]
   44c6e:	a903      	add	r1, sp, #12
   44c70:	4805      	ldr	r0, [pc, #20]	; (44c88 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   44c72:	9505      	str	r5, [sp, #20]
   44c74:	f7fc f8c8 	bl	40e08 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   44c78:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   44c7c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   44c7e:	bfb8      	it	lt
   44c80:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   44c82:	b007      	add	sp, #28
   44c84:	bd30      	pop	{r4, r5, pc}
   44c86:	bf00      	nop
   44c88:	000556f1 	.word	0x000556f1

00044c8c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   44c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   44c90:	8b05      	ldrh	r5, [r0, #24]
{
   44c92:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   44c94:	0728      	lsls	r0, r5, #28
{
   44c96:	4690      	mov	r8, r2
	if (processing) {
   44c98:	d411      	bmi.n	44cbe <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   44c9a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   44c9c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   44ca0:	f040 80cd 	bne.w	44e3e <process_event+0x1b2>
			evt = process_recheck(mgr);
   44ca4:	4620      	mov	r0, r4
   44ca6:	f010 ff1f 	bl	55ae8 <process_recheck>
		}

		if (evt == EVT_NOP) {
   44caa:	b178      	cbz	r0, 44ccc <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   44cac:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44cae:	8b21      	ldrh	r1, [r4, #24]
   44cb0:	2804      	cmp	r0, #4
   44cb2:	d811      	bhi.n	44cd8 <process_event+0x4c>
   44cb4:	e8df f000 	tbb	[pc, r0]
   44cb8:	856d10c3 	.word	0x856d10c3
   44cbc:	95          	.byte	0x95
   44cbd:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   44cbe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   44cc0:	bf0c      	ite	eq
   44cc2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   44cc6:	f045 0520 	orrne.w	r5, r5, #32
   44cca:	8325      	strh	r5, [r4, #24]
   44ccc:	f388 8811 	msr	BASEPRI, r8
   44cd0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   44cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44cd8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   44cdc:	45aa      	cmp	sl, r5
   44cde:	f000 80a6 	beq.w	44e2e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   44ce2:	2700      	movs	r7, #0
   44ce4:	46b9      	mov	r9, r7
   44ce6:	463e      	mov	r6, r7
   44ce8:	68a3      	ldr	r3, [r4, #8]
   44cea:	2b00      	cmp	r3, #0
   44cec:	f000 80bd 	beq.w	44e6a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   44cf0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   44cf4:	8321      	strh	r1, [r4, #24]
   44cf6:	f388 8811 	msr	BASEPRI, r8
   44cfa:	f3bf 8f6f 	isb	sy
	return list->head;
   44cfe:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   44d00:	2900      	cmp	r1, #0
   44d02:	f000 80bb 	beq.w	44e7c <process_event+0x1f0>
	return node->next;
   44d06:	680d      	ldr	r5, [r1, #0]
   44d08:	2900      	cmp	r1, #0
   44d0a:	f000 80b7 	beq.w	44e7c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   44d0e:	4633      	mov	r3, r6
   44d10:	4652      	mov	r2, sl
   44d12:	4620      	mov	r0, r4
   44d14:	f8d1 8004 	ldr.w	r8, [r1, #4]
   44d18:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   44d1a:	2d00      	cmp	r5, #0
   44d1c:	d076      	beq.n	44e0c <process_event+0x180>
   44d1e:	682b      	ldr	r3, [r5, #0]
   44d20:	4629      	mov	r1, r5
   44d22:	461d      	mov	r5, r3
   44d24:	e7f0      	b.n	44d08 <process_event+0x7c>
   44d26:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   44d2a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   44d2c:	2a01      	cmp	r2, #1
   44d2e:	d81b      	bhi.n	44d68 <process_event+0xdc>
	list->head = NULL;
   44d30:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44d32:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   44d36:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   44d38:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44d3a:	b289      	uxth	r1, r1
	list->tail = NULL;
   44d3c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   44d40:	d109      	bne.n	44d56 <process_event+0xca>
   44d42:	463b      	mov	r3, r7
   44d44:	e003      	b.n	44d4e <process_event+0xc2>
				mgr->refs += 1U;
   44d46:	8b62      	ldrh	r2, [r4, #26]
   44d48:	3201      	adds	r2, #1
   44d4a:	8362      	strh	r2, [r4, #26]
	return node->next;
   44d4c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   44d4e:	2b00      	cmp	r3, #0
   44d50:	d1f9      	bne.n	44d46 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44d52:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   44d56:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   44d58:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   44d5a:	f010 fec5 	bl	55ae8 <process_recheck>
   44d5e:	2800      	cmp	r0, #0
   44d60:	d07b      	beq.n	44e5a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   44d62:	f041 0120 	orr.w	r1, r1, #32
   44d66:	e077      	b.n	44e58 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   44d68:	2b04      	cmp	r3, #4
   44d6a:	d10a      	bne.n	44d82 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44d6c:	f021 0107 	bic.w	r1, r1, #7
   44d70:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   44d72:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   44d74:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   44d76:	f010 feb7 	bl	55ae8 <process_recheck>
   44d7a:	b110      	cbz	r0, 44d82 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   44d7c:	f041 0120 	orr.w	r1, r1, #32
   44d80:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44d82:	8b21      	ldrh	r1, [r4, #24]
   44d84:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   44d88:	45aa      	cmp	sl, r5
   44d8a:	d050      	beq.n	44e2e <process_event+0x1a2>
   44d8c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   44d8e:	46b9      	mov	r9, r7
   44d90:	e7aa      	b.n	44ce8 <process_event+0x5c>
			transit = mgr->transitions->start;
   44d92:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44d94:	f021 0107 	bic.w	r1, r1, #7
   44d98:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   44d9c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   44d9e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   44da2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   44da4:	d12d      	bne.n	44e02 <process_event+0x176>
		    || (transit != NULL)) {
   44da6:	f1b9 0f00 	cmp.w	r9, #0
   44daa:	d040      	beq.n	44e2e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   44dac:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   44db0:	8321      	strh	r1, [r4, #24]
   44db2:	f388 8811 	msr	BASEPRI, r8
   44db6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   44dba:	4620      	mov	r0, r4
   44dbc:	4939      	ldr	r1, [pc, #228]	; (44ea4 <process_event+0x218>)
   44dbe:	47c8      	blx	r9
   44dc0:	e029      	b.n	44e16 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44dc2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   44dc6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44dc8:	f041 0104 	orr.w	r1, r1, #4
   44dcc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   44dce:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   44dd0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   44dd4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   44dd6:	d0e6      	beq.n	44da6 <process_event+0x11a>
   44dd8:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44dda:	f04f 0a04 	mov.w	sl, #4
		res = 0;
   44dde:	463e      	mov	r6, r7
   44de0:	e782      	b.n	44ce8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44de2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   44de6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44de8:	f041 0105 	orr.w	r1, r1, #5
   44dec:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   44dee:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   44df0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   44df4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   44df6:	d0d6      	beq.n	44da6 <process_event+0x11a>
   44df8:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44dfa:	f04f 0a05 	mov.w	sl, #5
		res = 0;
   44dfe:	463e      	mov	r6, r7
   44e00:	e772      	b.n	44ce8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   44e02:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44e04:	f04f 0a06 	mov.w	sl, #6
		res = 0;
   44e08:	463e      	mov	r6, r7
   44e0a:	e76d      	b.n	44ce8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   44e0c:	462b      	mov	r3, r5
   44e0e:	e787      	b.n	44d20 <process_event+0x94>
			if (transit != NULL) {
   44e10:	f1b9 0f00 	cmp.w	r9, #0
   44e14:	d1d1      	bne.n	44dba <process_event+0x12e>
	__asm__ volatile(
   44e16:	f04f 0320 	mov.w	r3, #32
   44e1a:	f3ef 8811 	mrs	r8, BASEPRI
   44e1e:	f383 8812 	msr	BASEPRI_MAX, r3
   44e22:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   44e26:	8b23      	ldrh	r3, [r4, #24]
   44e28:	f023 0308 	bic.w	r3, r3, #8
   44e2c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   44e2e:	8b25      	ldrh	r5, [r4, #24]
   44e30:	06ea      	lsls	r2, r5, #27
   44e32:	d52e      	bpl.n	44e92 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   44e34:	f025 0310 	bic.w	r3, r5, #16
   44e38:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   44e3a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   44e3e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   44e40:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   44e42:	2e00      	cmp	r6, #0
   44e44:	f6bf af6f 	bge.w	44d26 <process_event+0x9a>
	list->head = NULL;
   44e48:	2300      	movs	r3, #0
		*clients = mgr->clients;
   44e4a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   44e4c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44e50:	f021 0107 	bic.w	r1, r1, #7
   44e54:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   44e58:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44e5a:	8b21      	ldrh	r1, [r4, #24]
   44e5c:	f04f 0900 	mov.w	r9, #0
   44e60:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   44e64:	45aa      	cmp	sl, r5
   44e66:	f47f af3f 	bne.w	44ce8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   44e6a:	2f00      	cmp	r7, #0
   44e6c:	d09b      	beq.n	44da6 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   44e6e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   44e72:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   44e74:	f388 8811 	msr	BASEPRI, r8
   44e78:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   44e7c:	2f00      	cmp	r7, #0
   44e7e:	d0c7      	beq.n	44e10 <process_event+0x184>
	return node->next;
   44e80:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   44e82:	4639      	mov	r1, r7
   44e84:	4633      	mov	r3, r6
   44e86:	4652      	mov	r2, sl
   44e88:	4620      	mov	r0, r4
   44e8a:	f010 fe59 	bl	55b40 <notify_one>
	list->head = node;
   44e8e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   44e90:	e7f4      	b.n	44e7c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   44e92:	06ab      	lsls	r3, r5, #26
   44e94:	f57f af1a 	bpl.w	44ccc <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   44e98:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   44e9c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   44e9e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   44ea2:	e6ff      	b.n	44ca4 <process_event+0x18>
   44ea4:	00055b6d 	.word	0x00055b6d

00044ea8 <extract_decimal>:
{
   44ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   44eaa:	4602      	mov	r2, r0
   44eac:	6801      	ldr	r1, [r0, #0]
		val = 10U * val + *sp++ - '0';
   44eae:	270a      	movs	r7, #10
	size_t val = 0;
   44eb0:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   44eb2:	4e07      	ldr	r6, [pc, #28]	; (44ed0 <extract_decimal+0x28>)
   44eb4:	460b      	mov	r3, r1
   44eb6:	781c      	ldrb	r4, [r3, #0]
   44eb8:	3101      	adds	r1, #1
   44eba:	5d35      	ldrb	r5, [r6, r4]
   44ebc:	076d      	lsls	r5, r5, #29
   44ebe:	d401      	bmi.n	44ec4 <extract_decimal+0x1c>
	*str = sp;
   44ec0:	6013      	str	r3, [r2, #0]
}
   44ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   44ec4:	fb07 4300 	mla	r3, r7, r0, r4
   44ec8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   44ecc:	e7f2      	b.n	44eb4 <extract_decimal+0xc>
   44ece:	bf00      	nop
   44ed0:	000608c3 	.word	0x000608c3

00044ed4 <encode_uint>:
{
   44ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44ed8:	4615      	mov	r5, r2
   44eda:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   44edc:	78d3      	ldrb	r3, [r2, #3]
   44ede:	4a22      	ldr	r2, [pc, #136]	; (44f68 <encode_uint+0x94>)
	switch (specifier) {
   44ee0:	2b6f      	cmp	r3, #111	; 0x6f
   44ee2:	f812 b003 	ldrb.w	fp, [r2, r3]
{
   44ee6:	4680      	mov	r8, r0
   44ee8:	460f      	mov	r7, r1
   44eea:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   44eee:	d029      	beq.n	44f44 <encode_uint+0x70>
   44ef0:	d824      	bhi.n	44f3c <encode_uint+0x68>
		return 10;
   44ef2:	2b58      	cmp	r3, #88	; 0x58
   44ef4:	bf0c      	ite	eq
   44ef6:	2610      	moveq	r6, #16
   44ef8:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   44efa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   44efe:	4632      	mov	r2, r6
   44f00:	2300      	movs	r3, #0
   44f02:	4640      	mov	r0, r8
   44f04:	4639      	mov	r1, r7
   44f06:	f7fb fe03 	bl	40b10 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   44f0a:	2a09      	cmp	r2, #9
   44f0c:	b2d4      	uxtb	r4, r2
   44f0e:	d81e      	bhi.n	44f4e <encode_uint+0x7a>
   44f10:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   44f12:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   44f14:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   44f16:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   44f1a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   44f1e:	d301      	bcc.n	44f24 <encode_uint+0x50>
   44f20:	45d1      	cmp	r9, sl
   44f22:	d811      	bhi.n	44f48 <encode_uint+0x74>
	if (conv->flag_hash) {
   44f24:	782b      	ldrb	r3, [r5, #0]
   44f26:	069b      	lsls	r3, r3, #26
   44f28:	d505      	bpl.n	44f36 <encode_uint+0x62>
		if (radix == 8) {
   44f2a:	2e08      	cmp	r6, #8
   44f2c:	d115      	bne.n	44f5a <encode_uint+0x86>
			conv->altform_0 = true;
   44f2e:	78ab      	ldrb	r3, [r5, #2]
   44f30:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   44f34:	70ab      	strb	r3, [r5, #2]
}
   44f36:	4648      	mov	r0, r9
   44f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   44f3c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   44f40:	2b70      	cmp	r3, #112	; 0x70
   44f42:	e7d7      	b.n	44ef4 <encode_uint+0x20>
	switch (specifier) {
   44f44:	2608      	movs	r6, #8
   44f46:	e7d8      	b.n	44efa <encode_uint+0x26>
		value /= radix;
   44f48:	4680      	mov	r8, r0
   44f4a:	460f      	mov	r7, r1
   44f4c:	e7d7      	b.n	44efe <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   44f4e:	f1bb 0f01 	cmp.w	fp, #1
   44f52:	bf0c      	ite	eq
   44f54:	3437      	addeq	r4, #55	; 0x37
   44f56:	3457      	addne	r4, #87	; 0x57
   44f58:	e7db      	b.n	44f12 <encode_uint+0x3e>
		} else if (radix == 16) {
   44f5a:	2e10      	cmp	r6, #16
   44f5c:	d1eb      	bne.n	44f36 <encode_uint+0x62>
			conv->altform_0c = true;
   44f5e:	78ab      	ldrb	r3, [r5, #2]
   44f60:	f043 0310 	orr.w	r3, r3, #16
   44f64:	e7e6      	b.n	44f34 <encode_uint+0x60>
   44f66:	bf00      	nop
   44f68:	000608c3 	.word	0x000608c3

00044f6c <nordicsemi_nrf91_init>:
	__asm__ volatile(
   44f6c:	f04f 0220 	mov.w	r2, #32
   44f70:	f3ef 8311 	mrs	r3, BASEPRI
   44f74:	f382 8812 	msr	BASEPRI_MAX, r2
   44f78:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   44f7c:	2101      	movs	r1, #1
   44f7e:	4a04      	ldr	r2, [pc, #16]	; (44f90 <nordicsemi_nrf91_init+0x24>)
   44f80:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   44f84:	f383 8811 	msr	BASEPRI, r3
   44f88:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   44f8c:	2000      	movs	r0, #0
   44f8e:	4770      	bx	lr
   44f90:	40039000 	.word	0x40039000

00044f94 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   44f94:	b120      	cbz	r0, 44fa0 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   44f96:	4b03      	ldr	r3, [pc, #12]	; (44fa4 <arch_busy_wait+0x10>)
   44f98:	0180      	lsls	r0, r0, #6
   44f9a:	f043 0301 	orr.w	r3, r3, #1
   44f9e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   44fa0:	4770      	bx	lr
   44fa2:	bf00      	nop
   44fa4:	0005c020 	.word	0x0005c020

00044fa8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   44fa8:	f00a b946 	b.w	4f238 <SystemInit>

00044fac <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
   44fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44fb0:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
   44fb2:	482f      	ldr	r0, [pc, #188]	; (45070 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
   44fb4:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   44fb6:	f010 fedd 	bl	55d74 <atomic_inc>
   44fba:	4606      	mov	r6, r0
   44fbc:	b970      	cbnz	r0, 44fdc <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   44fbe:	4c2d      	ldr	r4, [pc, #180]	; (45074 <z_log_init.isra.0+0xc8>)
	uint32_t mask = 0;
   44fc0:	4605      	mov	r5, r0
   44fc2:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
   44fc4:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   44fc8:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 45078 <z_log_init.isra.0+0xcc>
   44fcc:	4554      	cmp	r4, sl
   44fce:	d307      	bcc.n	44fe0 <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
   44fd0:	f1b9 0f00 	cmp.w	r9, #0
   44fd4:	d002      	beq.n	44fdc <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
   44fd6:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
   44fda:	b9e5      	cbnz	r5, 45016 <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
   44fdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
   44fe0:	7b23      	ldrb	r3, [r4, #12]
   44fe2:	b173      	cbz	r3, 45002 <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
   44fe4:	6823      	ldr	r3, [r4, #0]
   44fe6:	68db      	ldr	r3, [r3, #12]
   44fe8:	b10b      	cbz	r3, 44fee <z_log_init.isra.0+0x42>
		backend->api->init(backend);
   44fea:	4620      	mov	r0, r4
   44fec:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   44fee:	6823      	ldr	r3, [r4, #0]
   44ff0:	691b      	ldr	r3, [r3, #16]
   44ff2:	b943      	cbnz	r3, 45006 <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
   44ff4:	6863      	ldr	r3, [r4, #4]
   44ff6:	2204      	movs	r2, #4
   44ff8:	4620      	mov	r0, r4
   44ffa:	6819      	ldr	r1, [r3, #0]
   44ffc:	f000 f8c0 	bl	45180 <log_backend_enable>
			i++;
   45000:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   45002:	3410      	adds	r4, #16
   45004:	e7e2      	b.n	44fcc <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
   45006:	4620      	mov	r0, r4
   45008:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   4500a:	2800      	cmp	r0, #0
   4500c:	d0f2      	beq.n	44ff4 <z_log_init.isra.0+0x48>
				mask |= BIT(i);
   4500e:	fa0b f306 	lsl.w	r3, fp, r6
   45012:	431d      	orrs	r5, r3
   45014:	e7f4      	b.n	45000 <z_log_init.isra.0+0x54>
   45016:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
   45018:	fa95 f4a5 	rbit	r4, r5
   4501c:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
   45020:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   45024:	0126      	lsls	r6, r4, #4
   45026:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
   4502a:	ea6f 0b03 	mvn.w	fp, r3
   4502e:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   45032:	7b23      	ldrb	r3, [r4, #12]
   45034:	b163      	cbz	r3, 45050 <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
   45036:	f858 3006 	ldr.w	r3, [r8, r6]
   4503a:	691b      	ldr	r3, [r3, #16]
   4503c:	b993      	cbnz	r3, 45064 <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
   4503e:	4446      	add	r6, r8
			log_backend_enable(backend,
   45040:	6873      	ldr	r3, [r6, #4]
   45042:	2204      	movs	r2, #4
   45044:	4620      	mov	r0, r4
   45046:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   45048:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
   4504c:	f000 f898 	bl	45180 <log_backend_enable>
	while (mask_cpy) {
   45050:	2d00      	cmp	r5, #0
   45052:	d1e1      	bne.n	45018 <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   45054:	b127      	cbz	r7, 45060 <z_log_init.isra.0+0xb4>
	return z_impl_k_sleep(timeout);
   45056:	f44f 70a4 	mov.w	r0, #328	; 0x148
   4505a:	2100      	movs	r1, #0
   4505c:	f00d ff12 	bl	52e84 <z_impl_k_sleep>
   45060:	464d      	mov	r5, r9
   45062:	e7ba      	b.n	44fda <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
   45064:	4620      	mov	r0, r4
   45066:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   45068:	2800      	cmp	r0, #0
   4506a:	d1f1      	bne.n	45050 <z_log_init.isra.0+0xa4>
   4506c:	e7e7      	b.n	4503e <z_log_init.isra.0+0x92>
   4506e:	bf00      	nop
   45070:	2001b554 	.word	0x2001b554
   45074:	0005bfcc 	.word	0x0005bfcc
   45078:	0005bfdc 	.word	0x0005bfdc

0004507c <log_format_func_t_get>:
}
   4507c:	4b01      	ldr	r3, [pc, #4]	; (45084 <log_format_func_t_get+0x8>)
   4507e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   45082:	4770      	bx	lr
   45084:	0005c138 	.word	0x0005c138

00045088 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
   45088:	b508      	push	{r3, lr}
   4508a:	4603      	mov	r3, r0
   4508c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   4508e:	b12b      	cbz	r3, 4509c <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
   45090:	4a04      	ldr	r2, [pc, #16]	; (450a4 <log_set_timestamp_func+0x1c>)
   45092:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
   45094:	f000 fa7c 	bl	45590 <log_output_timestamp_freq_set>
	}

	return 0;
   45098:	2000      	movs	r0, #0
}
   4509a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   4509c:	f06f 0015 	mvn.w	r0, #21
   450a0:	e7fb      	b.n	4509a <log_set_timestamp_func+0x12>
   450a2:	bf00      	nop
   450a4:	2001a568 	.word	0x2001a568

000450a8 <log_core_init>:
	panic_mode = false;
   450a8:	2300      	movs	r3, #0
   450aa:	4a04      	ldr	r2, [pc, #16]	; (450bc <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
   450ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
   450b0:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   450b2:	4a03      	ldr	r2, [pc, #12]	; (450c0 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
   450b4:	4803      	ldr	r0, [pc, #12]	; (450c4 <log_core_init+0x1c>)
	dropped_cnt = 0;
   450b6:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   450b8:	f7ff bfe6 	b.w	45088 <log_set_timestamp_func>
   450bc:	2001de2a 	.word	0x2001de2a
   450c0:	2001b54c 	.word	0x2001b54c
   450c4:	00055d71 	.word	0x00055d71

000450c8 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
   450c8:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   450ca:	4d0b      	ldr	r5, [pc, #44]	; (450f8 <z_impl_log_panic+0x30>)
   450cc:	7829      	ldrb	r1, [r5, #0]
   450ce:	b941      	cbnz	r1, 450e2 <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
   450d0:	2001      	movs	r0, #1
   450d2:	f7ff ff6b 	bl	44fac <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
   450d6:	4c09      	ldr	r4, [pc, #36]	; (450fc <z_impl_log_panic+0x34>)
   450d8:	4e09      	ldr	r6, [pc, #36]	; (45100 <z_impl_log_panic+0x38>)
   450da:	42b4      	cmp	r4, r6
   450dc:	d302      	bcc.n	450e4 <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
   450de:	2301      	movs	r3, #1
   450e0:	702b      	strb	r3, [r5, #0]
}
   450e2:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   450e4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   450e6:	795b      	ldrb	r3, [r3, #5]
   450e8:	b11b      	cbz	r3, 450f2 <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
   450ea:	6823      	ldr	r3, [r4, #0]
   450ec:	4620      	mov	r0, r4
   450ee:	689b      	ldr	r3, [r3, #8]
   450f0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   450f2:	3410      	adds	r4, #16
   450f4:	e7f1      	b.n	450da <z_impl_log_panic+0x12>
   450f6:	bf00      	nop
   450f8:	2001de2a 	.word	0x2001de2a
   450fc:	0005bfcc 	.word	0x0005bfcc
   45100:	0005bfdc 	.word	0x0005bfdc

00045104 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
   45104:	b510      	push	{r4, lr}
   45106:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   45108:	4806      	ldr	r0, [pc, #24]	; (45124 <z_log_dropped+0x20>)
   4510a:	f010 fe33 	bl	55d74 <atomic_inc>
	if (buffered) {
   4510e:	b13c      	cbz	r4, 45120 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   45110:	4b05      	ldr	r3, [pc, #20]	; (45128 <z_log_dropped+0x24>)
   45112:	e8d3 1fef 	ldaex	r1, [r3]
   45116:	3901      	subs	r1, #1
   45118:	e8c3 1fe2 	stlex	r2, r1, [r3]
   4511c:	2a00      	cmp	r2, #0
   4511e:	d1f8      	bne.n	45112 <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
   45120:	bd10      	pop	{r4, pc}
   45122:	bf00      	nop
   45124:	2001b54c 	.word	0x2001b54c
   45128:	2001b550 	.word	0x2001b550

0004512c <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
   4512c:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   4512e:	4b0a      	ldr	r3, [pc, #40]	; (45158 <z_log_msg_commit+0x2c>)
{
   45130:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
   45132:	681b      	ldr	r3, [r3, #0]
   45134:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   45136:	4c09      	ldr	r4, [pc, #36]	; (4515c <z_log_msg_commit+0x30>)
   45138:	4e09      	ldr	r6, [pc, #36]	; (45160 <z_log_msg_commit+0x34>)
	msg->hdr.timestamp = timestamp_func();
   4513a:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   4513c:	42b4      	cmp	r4, r6
   4513e:	d300      	bcc.n	45142 <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
   45140:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   45142:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   45144:	795b      	ldrb	r3, [r3, #5]
   45146:	b123      	cbz	r3, 45152 <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
   45148:	6823      	ldr	r3, [r4, #0]
   4514a:	4629      	mov	r1, r5
   4514c:	4620      	mov	r0, r4
   4514e:	681b      	ldr	r3, [r3, #0]
   45150:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   45152:	3410      	adds	r4, #16
   45154:	e7f2      	b.n	4513c <z_log_msg_commit+0x10>
   45156:	bf00      	nop
   45158:	2001a568 	.word	0x2001a568
   4515c:	0005bfcc 	.word	0x0005bfcc
   45160:	0005bfdc 	.word	0x0005bfdc

00045164 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   45164:	4a04      	ldr	r2, [pc, #16]	; (45178 <log_source_name_get+0x14>)
   45166:	4b05      	ldr	r3, [pc, #20]	; (4517c <log_source_name_get+0x18>)
   45168:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   4516a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   4516e:	bf34      	ite	cc
   45170:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   45174:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   45176:	4770      	bx	lr
   45178:	0005beac 	.word	0x0005beac
   4517c:	0005bfcc 	.word	0x0005bfcc

00045180 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   45180:	4b08      	ldr	r3, [pc, #32]	; (451a4 <log_backend_enable+0x24>)
{
   45182:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   45184:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
   45186:	6844      	ldr	r4, [r0, #4]
   45188:	111b      	asrs	r3, r3, #4
   4518a:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   4518c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   4518e:	6843      	ldr	r3, [r0, #4]
   45190:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
   45192:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   45194:	6843      	ldr	r3, [r0, #4]
   45196:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   45198:	6843      	ldr	r3, [r0, #4]
   4519a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   4519c:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_log_notify_backend_enabled();
   451a0:	f010 bdf8 	b.w	55d94 <z_log_notify_backend_enabled>
   451a4:	0005bfcc 	.word	0x0005bfcc

000451a8 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   451a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   451ac:	b085      	sub	sp, #20
   451ae:	af02      	add	r7, sp, #8
   451b0:	4604      	mov	r4, r0
   451b2:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
   451b6:	460e      	mov	r6, r1
   451b8:	4693      	mov	fp, r2
   451ba:	4698      	mov	r8, r3
   451bc:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
   451be:	f1ba 0f00 	cmp.w	sl, #0
   451c2:	d035      	beq.n	45230 <z_impl_z_log_msg_runtime_vcreate+0x88>
		va_list ap2;

		va_copy(ap2, ap);
   451c4:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   451c8:	f8cd 9000 	str.w	r9, [sp]
   451cc:	2110      	movs	r1, #16
   451ce:	4653      	mov	r3, sl
   451d0:	2000      	movs	r0, #0
   451d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   451d4:	f7ff faba 	bl	4474c <cbvprintf_package>
   451d8:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   451da:	4a16      	ldr	r2, [pc, #88]	; (45234 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
   451dc:	f004 0407 	and.w	r4, r4, #7
   451e0:	f00b 0b07 	and.w	fp, fp, #7
   451e4:	00e4      	lsls	r4, r4, #3
   451e6:	ea02 2241 	and.w	r2, r2, r1, lsl #9
   451ea:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   451ee:	4314      	orrs	r4, r2
   451f0:	4a11      	ldr	r2, [pc, #68]	; (45238 <z_impl_z_log_msg_runtime_vcreate+0x90>)
   451f2:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   451f6:	3517      	adds	r5, #23
   451f8:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
   451fa:	f025 0507 	bic.w	r5, r5, #7
   451fe:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
   45202:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
   45204:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
   45206:	f1ba 0f00 	cmp.w	sl, #0
   4520a:	d007      	beq.n	4521c <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   4520c:	f8cd 9000 	str.w	r9, [sp]
   45210:	4653      	mov	r3, sl
   45212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   45214:	f105 0010 	add.w	r0, r5, #16
   45218:	f7ff fa98 	bl	4474c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   4521c:	4643      	mov	r3, r8
   4521e:	4622      	mov	r2, r4
   45220:	4631      	mov	r1, r6
   45222:	4628      	mov	r0, r5
   45224:	f010 fdb9 	bl	55d9a <z_log_msg_finalize>
	}
}
   45228:	370c      	adds	r7, #12
   4522a:	46bd      	mov	sp, r7
   4522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   45230:	4651      	mov	r1, sl
   45232:	e7d2      	b.n	451da <z_impl_z_log_msg_runtime_vcreate+0x32>
   45234:	0007fe00 	.word	0x0007fe00
   45238:	7ff80000 	.word	0x7ff80000

0004523c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   4523c:	b40e      	push	{r1, r2, r3}
   4523e:	b503      	push	{r0, r1, lr}
   45240:	ab03      	add	r3, sp, #12
   45242:	f853 2b04 	ldr.w	r2, [r3], #4
   45246:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   45248:	4804      	ldr	r0, [pc, #16]	; (4525c <print_formatted+0x20>)
	va_start(args, fmt);
   4524a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   4524c:	f010 fde8 	bl	55e20 <cbvprintf>
	va_end(args);

	return length;
}
   45250:	b002      	add	sp, #8
   45252:	f85d eb04 	ldr.w	lr, [sp], #4
   45256:	b003      	add	sp, #12
   45258:	4770      	bx	lr
   4525a:	bf00      	nop
   4525c:	00055dcf 	.word	0x00055dcf

00045260 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   45260:	06ca      	lsls	r2, r1, #27
   45262:	d405      	bmi.n	45270 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   45264:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   45266:	bf4c      	ite	mi
   45268:	4902      	ldrmi	r1, [pc, #8]	; (45274 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   4526a:	4903      	ldrpl	r1, [pc, #12]	; (45278 <newline_print+0x18>)
   4526c:	f7ff bfe6 	b.w	4523c <print_formatted>
	}
}
   45270:	4770      	bx	lr
   45272:	bf00      	nop
   45274:	0005fc03 	.word	0x0005fc03
   45278:	0005fc02 	.word	0x0005fc02

0004527c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   4527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45280:	b08b      	sub	sp, #44	; 0x2c
   45282:	469a      	mov	sl, r3
   45284:	e9dd 7315 	ldrd	r7, r3, [sp, #84]	; 0x54
   45288:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   4528c:	9306      	str	r3, [sp, #24]
   4528e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   45290:	4604      	mov	r4, r0
   45292:	460d      	mov	r5, r1
   45294:	9e18      	ldr	r6, [sp, #96]	; 0x60
   45296:	9208      	str	r2, [sp, #32]
   45298:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   4529a:	f1bb 0f00 	cmp.w	fp, #0
   4529e:	f000 8085 	beq.w	453ac <log_output_process+0x130>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   452a2:	f006 0301 	and.w	r3, r6, #1
   452a6:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   452a8:	f006 0308 	and.w	r3, r6, #8
   452ac:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   452ae:	f010 fd72 	bl	55d96 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   452b2:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
   452b6:	4602      	mov	r2, r0
   452b8:	2800      	cmp	r0, #0
   452ba:	d047      	beq.n	4534c <log_output_process+0xd0>
		length += print_formatted(output, "%s ", tag);
   452bc:	4620      	mov	r0, r4
   452be:	4984      	ldr	r1, [pc, #528]	; (454d0 <log_output_process+0x254>)
   452c0:	f7ff ffbc 	bl	4523c <print_formatted>
   452c4:	4680      	mov	r8, r0
	if (stamp) {
   452c6:	f1b9 0f00 	cmp.w	r9, #0
   452ca:	d008      	beq.n	452de <log_output_process+0x62>
	if (!format) {
   452cc:	f016 0f44 	tst.w	r6, #68	; 0x44
   452d0:	d13e      	bne.n	45350 <log_output_process+0xd4>
		length = print_formatted(output, "[%08lu] ", timestamp);
   452d2:	462a      	mov	r2, r5
   452d4:	4620      	mov	r0, r4
   452d6:	497f      	ldr	r1, [pc, #508]	; (454d4 <log_output_process+0x258>)
   452d8:	f7ff ffb0 	bl	4523c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   452dc:	4480      	add	r8, r0
	if (color) {
   452de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   452e0:	b153      	cbz	r3, 452f8 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
   452e2:	4b7d      	ldr	r3, [pc, #500]	; (454d8 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
   452e4:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
   452e6:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
   452ea:	4b7c      	ldr	r3, [pc, #496]	; (454dc <log_output_process+0x260>)
   452ec:	497c      	ldr	r1, [pc, #496]	; (454e0 <log_output_process+0x264>)
   452ee:	2a00      	cmp	r2, #0
   452f0:	bf08      	it	eq
   452f2:	461a      	moveq	r2, r3
   452f4:	f7ff ffa2 	bl	4523c <print_formatted>
	if (level_on) {
   452f8:	9b07      	ldr	r3, [sp, #28]
   452fa:	2b00      	cmp	r3, #0
   452fc:	d054      	beq.n	453a8 <log_output_process+0x12c>
		total += print_formatted(output, "<%s> ", severity[level]);
   452fe:	4b79      	ldr	r3, [pc, #484]	; (454e4 <log_output_process+0x268>)
   45300:	4620      	mov	r0, r4
   45302:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
   45306:	4978      	ldr	r1, [pc, #480]	; (454e8 <log_output_process+0x26c>)
   45308:	f7ff ff98 	bl	4523c <print_formatted>
   4530c:	4605      	mov	r5, r0
	if (domain) {
   4530e:	9b08      	ldr	r3, [sp, #32]
   45310:	b12b      	cbz	r3, 4531e <log_output_process+0xa2>
		total += print_formatted(output, "%s/", domain);
   45312:	461a      	mov	r2, r3
   45314:	4620      	mov	r0, r4
   45316:	4975      	ldr	r1, [pc, #468]	; (454ec <log_output_process+0x270>)
   45318:	f7ff ff90 	bl	4523c <print_formatted>
   4531c:	4405      	add	r5, r0
	if (source) {
   4531e:	f1ba 0f00 	cmp.w	sl, #0
   45322:	d005      	beq.n	45330 <log_output_process+0xb4>
		total += print_formatted(output,
   45324:	4652      	mov	r2, sl
   45326:	4620      	mov	r0, r4
   45328:	4971      	ldr	r1, [pc, #452]	; (454f0 <log_output_process+0x274>)
   4532a:	f7ff ff87 	bl	4523c <print_formatted>
   4532e:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   45330:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   45332:	2f00      	cmp	r7, #0
   45334:	d148      	bne.n	453c8 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   45336:	9b05      	ldr	r3, [sp, #20]
   45338:	2b00      	cmp	r3, #0
   4533a:	d14e      	bne.n	453da <log_output_process+0x15e>
	if (color) {
   4533c:	07f3      	lsls	r3, r6, #31
   4533e:	f100 80c0 	bmi.w	454c2 <log_output_process+0x246>
	newline_print(output, flags);
   45342:	4631      	mov	r1, r6
   45344:	4620      	mov	r0, r4
   45346:	f7ff ff8b 	bl	45260 <newline_print>
}
   4534a:	e0b4      	b.n	454b6 <log_output_process+0x23a>
	uint32_t length = 0U;
   4534c:	4680      	mov	r8, r0
   4534e:	e7ba      	b.n	452c6 <log_output_process+0x4a>
	} else if (freq != 0U) {
   45350:	4b68      	ldr	r3, [pc, #416]	; (454f4 <log_output_process+0x278>)
   45352:	6818      	ldr	r0, [r3, #0]
   45354:	2800      	cmp	r0, #0
   45356:	d0c1      	beq.n	452dc <log_output_process+0x60>
		timestamp /= timestamp_div;
   45358:	4b67      	ldr	r3, [pc, #412]	; (454f8 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   4535a:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
   4535e:	681b      	ldr	r3, [r3, #0]
   45360:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   45364:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   45368:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   4536c:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
   45370:	fb09 f505 	mul.w	r5, r9, r5
   45374:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   45378:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
   4537c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   45380:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   45384:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
   45388:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   4538c:	fb09 f505 	mul.w	r5, r9, r5
   45390:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   45394:	fb0c 1113 	mls	r1, ip, r3, r1
   45398:	4620      	mov	r0, r4
   4539a:	9100      	str	r1, [sp, #0]
   4539c:	e9cd e501 	strd	lr, r5, [sp, #4]
   453a0:	4956      	ldr	r1, [pc, #344]	; (454fc <log_output_process+0x280>)
   453a2:	f7ff ff4b 	bl	4523c <print_formatted>
   453a6:	e799      	b.n	452dc <log_output_process+0x60>
	int total = 0;
   453a8:	9d07      	ldr	r5, [sp, #28]
   453aa:	e7b0      	b.n	4530e <log_output_process+0x92>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   453ac:	f1ba 0f01 	cmp.w	sl, #1
   453b0:	d106      	bne.n	453c0 <log_output_process+0x144>
	if (package) {
   453b2:	2f00      	cmp	r7, #0
   453b4:	d165      	bne.n	45482 <log_output_process+0x206>
	if (data_len) {
   453b6:	9b05      	ldr	r3, [sp, #20]
   453b8:	2b00      	cmp	r3, #0
   453ba:	d07c      	beq.n	454b6 <log_output_process+0x23a>
		prefix_offset = 0;
   453bc:	2500      	movs	r5, #0
   453be:	e00c      	b.n	453da <log_output_process+0x15e>
	if (package) {
   453c0:	2f00      	cmp	r7, #0
   453c2:	d0f8      	beq.n	453b6 <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   453c4:	484e      	ldr	r0, [pc, #312]	; (45500 <log_output_process+0x284>)
   453c6:	e05d      	b.n	45484 <log_output_process+0x208>
		cb = out_func;
   453c8:	484e      	ldr	r0, [pc, #312]	; (45504 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   453ca:	463b      	mov	r3, r7
   453cc:	4622      	mov	r2, r4
   453ce:	494e      	ldr	r1, [pc, #312]	; (45508 <log_output_process+0x28c>)
   453d0:	f010 f928 	bl	55624 <cbpprintf_external>
	if (data_len) {
   453d4:	9b05      	ldr	r3, [sp, #20]
   453d6:	2b00      	cmp	r3, #0
   453d8:	d069      	beq.n	454ae <log_output_process+0x232>
		print_formatted(output, " ");
   453da:	f8df 8140 	ldr.w	r8, [pc, #320]	; 4551c <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
   453de:	f8df 9140 	ldr.w	r9, [pc, #320]	; 45520 <log_output_process+0x2a4>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   453e2:	9f05      	ldr	r7, [sp, #20]
	newline_print(output, flags);
   453e4:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   453e6:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   453e8:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   453ea:	bf28      	it	cs
   453ec:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
   453ee:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
   453f2:	f7ff ff35 	bl	45260 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   453f6:	4555      	cmp	r5, sl
   453f8:	dc46      	bgt.n	45488 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
   453fa:	9b06      	ldr	r3, [sp, #24]
   453fc:	4649      	mov	r1, r9
   453fe:	4620      	mov	r0, r4
   45400:	781a      	ldrb	r2, [r3, #0]
   45402:	f7ff ff1b 	bl	4523c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   45406:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
   4540a:	f01a 0f07 	tst.w	sl, #7
   4540e:	d103      	bne.n	45418 <log_output_process+0x19c>
			print_formatted(output, " ");
   45410:	4641      	mov	r1, r8
   45412:	4620      	mov	r0, r4
   45414:	f7ff ff12 	bl	4523c <print_formatted>
		if (i < length) {
   45418:	4557      	cmp	r7, sl
   4541a:	d93c      	bls.n	45496 <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
   4541c:	9b06      	ldr	r3, [sp, #24]
   4541e:	4649      	mov	r1, r9
   45420:	4620      	mov	r0, r4
   45422:	f813 200a 	ldrb.w	r2, [r3, sl]
   45426:	f7ff ff09 	bl	4523c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   4542a:	f10a 0a01 	add.w	sl, sl, #1
   4542e:	f1ba 0f10 	cmp.w	sl, #16
   45432:	d1ea      	bne.n	4540a <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   45434:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
   45438:	4620      	mov	r0, r4
   4543a:	4934      	ldr	r1, [pc, #208]	; (4550c <log_output_process+0x290>)
   4543c:	f7ff fefe 	bl	4523c <print_formatted>
		if (i < length) {
   45440:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
   45442:	9b06      	ldr	r3, [sp, #24]
			print_formatted(output, "%c",
   45444:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
   45446:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
   45448:	4b31      	ldr	r3, [pc, #196]	; (45510 <log_output_process+0x294>)
   4544a:	5c99      	ldrb	r1, [r3, r2]
   4544c:	f011 0f97 	tst.w	r1, #151	; 0x97
   45450:	bf08      	it	eq
   45452:	222e      	moveq	r2, #46	; 0x2e
   45454:	492f      	ldr	r1, [pc, #188]	; (45514 <log_output_process+0x298>)
   45456:	f7ff fef1 	bl	4523c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   4545a:	f10a 0a01 	add.w	sl, sl, #1
   4545e:	f1ba 0f10 	cmp.w	sl, #16
   45462:	d01d      	beq.n	454a0 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
   45464:	f01a 0f07 	tst.w	sl, #7
   45468:	d103      	bne.n	45472 <log_output_process+0x1f6>
			print_formatted(output, " ");
   4546a:	4641      	mov	r1, r8
   4546c:	4620      	mov	r0, r4
   4546e:	f7ff fee5 	bl	4523c <print_formatted>
		if (i < length) {
   45472:	4557      	cmp	r7, sl
   45474:	4652      	mov	r2, sl
   45476:	d8e4      	bhi.n	45442 <log_output_process+0x1c6>
			print_formatted(output, " ");
   45478:	4641      	mov	r1, r8
   4547a:	4620      	mov	r0, r4
   4547c:	f7ff fede 	bl	4523c <print_formatted>
   45480:	e7eb      	b.n	4545a <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   45482:	4820      	ldr	r0, [pc, #128]	; (45504 <log_output_process+0x288>)
		prefix_offset = 0;
   45484:	465d      	mov	r5, fp
   45486:	e7a0      	b.n	453ca <log_output_process+0x14e>
		print_formatted(output, " ");
   45488:	4641      	mov	r1, r8
   4548a:	4620      	mov	r0, r4
   4548c:	f7ff fed6 	bl	4523c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   45490:	f10a 0a01 	add.w	sl, sl, #1
   45494:	e7af      	b.n	453f6 <log_output_process+0x17a>
			print_formatted(output, "   ");
   45496:	4620      	mov	r0, r4
   45498:	491f      	ldr	r1, [pc, #124]	; (45518 <log_output_process+0x29c>)
   4549a:	f7ff fecf 	bl	4523c <print_formatted>
   4549e:	e7c4      	b.n	4542a <log_output_process+0x1ae>
		data += length;
   454a0:	9b06      	ldr	r3, [sp, #24]
   454a2:	443b      	add	r3, r7
   454a4:	9306      	str	r3, [sp, #24]
	} while (len);
   454a6:	9b05      	ldr	r3, [sp, #20]
   454a8:	1bdb      	subs	r3, r3, r7
   454aa:	9305      	str	r3, [sp, #20]
   454ac:	d199      	bne.n	453e2 <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   454ae:	f1bb 0f00 	cmp.w	fp, #0
   454b2:	f47f af43 	bne.w	4533c <log_output_process+0xc0>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   454b6:	4620      	mov	r0, r4
}
   454b8:	b00b      	add	sp, #44	; 0x2c
   454ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   454be:	f010 bcb6 	b.w	55e2e <log_output_flush>
		print_formatted(output, "%s", log_color);
   454c2:	4620      	mov	r0, r4
   454c4:	4a05      	ldr	r2, [pc, #20]	; (454dc <log_output_process+0x260>)
   454c6:	4906      	ldr	r1, [pc, #24]	; (454e0 <log_output_process+0x264>)
   454c8:	f7ff feb8 	bl	4523c <print_formatted>
}
   454cc:	e739      	b.n	45342 <log_output_process+0xc6>
   454ce:	bf00      	nop
   454d0:	0005d738 	.word	0x0005d738
   454d4:	0005d73c 	.word	0x0005d73c
   454d8:	0005c148 	.word	0x0005c148
   454dc:	0005d733 	.word	0x0005d733
   454e0:	0005d298 	.word	0x0005d298
   454e4:	0005c15c 	.word	0x0005c15c
   454e8:	0005d761 	.word	0x0005d761
   454ec:	0005d767 	.word	0x0005d767
   454f0:	0005d76b 	.word	0x0005d76b
   454f4:	2001b55c 	.word	0x2001b55c
   454f8:	2001b558 	.word	0x2001b558
   454fc:	0005d745 	.word	0x0005d745
   45500:	00055deb 	.word	0x00055deb
   45504:	00055dcf 	.word	0x00055dcf
   45508:	00055e21 	.word	0x00055e21
   4550c:	0005d770 	.word	0x0005d770
   45510:	000608c3 	.word	0x000608c3
   45514:	0005efd1 	.word	0x0005efd1
   45518:	000606f8 	.word	0x000606f8
   4551c:	0005d09e 	.word	0x0005d09e
   45520:	0005d19f 	.word	0x0005d19f

00045524 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   45524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   45528:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   4552a:	684b      	ldr	r3, [r1, #4]
   4552c:	4605      	mov	r5, r0
   4552e:	460c      	mov	r4, r1
   45530:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   45532:	688e      	ldr	r6, [r1, #8]
   45534:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
   45536:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   4553a:	b15b      	cbz	r3, 45554 <log_output_msg_process+0x30>
   4553c:	4a13      	ldr	r2, [pc, #76]	; (4558c <log_output_msg_process+0x68>)
   4553e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   45540:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   45544:	2900      	cmp	r1, #0
   45546:	db1f      	blt.n	45588 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   45548:	7820      	ldrb	r0, [r4, #0]
   4554a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   4554e:	f7ff fe09 	bl	45164 <log_source_name_get>
   45552:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   45554:	4621      	mov	r1, r4
   45556:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
   4555a:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   4555c:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   45560:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   45562:	eb01 0402 	add.w	r4, r1, r2
   45566:	bf08      	it	eq
   45568:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
   4556a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   4556e:	e9cd 0803 	strd	r0, r8, [sp, #12]
   45572:	e9cd 1401 	strd	r1, r4, [sp, #4]
   45576:	2200      	movs	r2, #0
   45578:	4631      	mov	r1, r6
   4557a:	4628      	mov	r0, r5
   4557c:	9700      	str	r7, [sp, #0]
   4557e:	f7ff fe7d 	bl	4527c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   45582:	b006      	add	sp, #24
   45584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   45588:	2300      	movs	r3, #0
   4558a:	e7e3      	b.n	45554 <log_output_msg_process+0x30>
   4558c:	0005beac 	.word	0x0005beac

00045590 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   45590:	2100      	movs	r1, #0
   45592:	2301      	movs	r3, #1
   45594:	4a06      	ldr	r2, [pc, #24]	; (455b0 <log_output_timestamp_freq_set+0x20>)
   45596:	4290      	cmp	r0, r2
   45598:	d806      	bhi.n	455a8 <log_output_timestamp_freq_set+0x18>
   4559a:	4a06      	ldr	r2, [pc, #24]	; (455b4 <log_output_timestamp_freq_set+0x24>)
   4559c:	b901      	cbnz	r1, 455a0 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   4559e:	2301      	movs	r3, #1
   455a0:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   455a2:	4b05      	ldr	r3, [pc, #20]	; (455b8 <log_output_timestamp_freq_set+0x28>)
   455a4:	6018      	str	r0, [r3, #0]
}
   455a6:	4770      	bx	lr
		timestamp_div *= 2U;
   455a8:	2101      	movs	r1, #1
		frequency /= 2U;
   455aa:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   455ac:	005b      	lsls	r3, r3, #1
   455ae:	e7f2      	b.n	45596 <log_output_timestamp_freq_set+0x6>
   455b0:	000f4240 	.word	0x000f4240
   455b4:	2001b558 	.word	0x2001b558
   455b8:	2001b55c 	.word	0x2001b55c

000455bc <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   455bc:	4b01      	ldr	r3, [pc, #4]	; (455c4 <format_set+0x8>)
	return 0;
}
   455be:	2000      	movs	r0, #0
	log_format_current = log_type;
   455c0:	6019      	str	r1, [r3, #0]
}
   455c2:	4770      	bx	lr
   455c4:	2001b574 	.word	0x2001b574

000455c8 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   455c8:	2201      	movs	r2, #1
   455ca:	4b02      	ldr	r3, [pc, #8]	; (455d4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   455cc:	4802      	ldr	r0, [pc, #8]	; (455d8 <panic+0x10>)
   455ce:	701a      	strb	r2, [r3, #0]
   455d0:	f010 bc2d 	b.w	55e2e <log_output_flush>
   455d4:	2001de2c 	.word	0x2001de2c
   455d8:	0005c18c 	.word	0x0005c18c

000455dc <process>:
{
   455dc:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   455de:	4b06      	ldr	r3, [pc, #24]	; (455f8 <process+0x1c>)
{
   455e0:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   455e2:	6818      	ldr	r0, [r3, #0]
   455e4:	f7ff fd4a 	bl	4507c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   455e8:	4621      	mov	r1, r4
}
   455ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   455ee:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   455f0:	220f      	movs	r2, #15
   455f2:	4802      	ldr	r0, [pc, #8]	; (455fc <process+0x20>)
   455f4:	4718      	bx	r3
   455f6:	bf00      	nop
   455f8:	2001b574 	.word	0x2001b574
   455fc:	0005c18c 	.word	0x0005c18c

00045600 <char_out>:
{
   45600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45602:	460d      	mov	r5, r1
   45604:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   45606:	4f06      	ldr	r7, [pc, #24]	; (45620 <char_out+0x20>)
   45608:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   4560a:	42b4      	cmp	r4, r6
   4560c:	d101      	bne.n	45612 <char_out+0x12>
}
   4560e:	4628      	mov	r0, r5
   45610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   45612:	f814 1b01 	ldrb.w	r1, [r4], #1
   45616:	68bb      	ldr	r3, [r7, #8]
   45618:	4801      	ldr	r0, [pc, #4]	; (45620 <char_out+0x20>)
   4561a:	685b      	ldr	r3, [r3, #4]
   4561c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   4561e:	e7f4      	b.n	4560a <char_out+0xa>
   45620:	0005bbcc 	.word	0x0005bbcc

00045624 <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
   45624:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   45626:	4804      	ldr	r0, [pc, #16]	; (45638 <disk_init+0x14>)
   45628:	f015 f8fd 	bl	5a826 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   4562c:	4b03      	ldr	r3, [pc, #12]	; (4563c <disk_init+0x18>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
   4562e:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   45630:	e9c3 3300 	strd	r3, r3, [r3]
   45634:	bd08      	pop	{r3, pc}
   45636:	bf00      	nop
   45638:	2001b578 	.word	0x2001b578
   4563c:	2001b58c 	.word	0x2001b58c

00045640 <disk_access_get_di>:
{
   45640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45642:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
   45644:	f7fb fbd6 	bl	40df4 <strlen>
   45648:	4605      	mov	r5, r0
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   4564a:	4f12      	ldr	r7, [pc, #72]	; (45694 <disk_access_get_di+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
   4564c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45654:	4810      	ldr	r0, [pc, #64]	; (45698 <disk_access_get_di+0x58>)
   45656:	f00c ff19 	bl	5248c <z_impl_k_mutex_lock>
   4565a:	683c      	ldr	r4, [r7, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4565c:	42bc      	cmp	r4, r7
   4565e:	d10a      	bne.n	45676 <disk_access_get_di+0x36>
	struct disk_info *disk = NULL, *itr;
   45660:	2400      	movs	r4, #0
   45662:	e012      	b.n	4568a <disk_access_get_di+0x4a>
		if (strlen(itr->name) != name_len) {
   45664:	68a0      	ldr	r0, [r4, #8]
   45666:	f7fb fbc5 	bl	40df4 <strlen>
   4566a:	42a8      	cmp	r0, r5
   4566c:	d006      	beq.n	4567c <disk_access_get_di+0x3c>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   4566e:	687b      	ldr	r3, [r7, #4]
   45670:	429c      	cmp	r4, r3
   45672:	d0f5      	beq.n	45660 <disk_access_get_di+0x20>
   45674:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
   45676:	2c00      	cmp	r4, #0
   45678:	d1f4      	bne.n	45664 <disk_access_get_di+0x24>
   4567a:	e7f1      	b.n	45660 <disk_access_get_di+0x20>
		if (strncmp(name, itr->name, name_len) == 0) {
   4567c:	462a      	mov	r2, r5
   4567e:	4630      	mov	r0, r6
   45680:	68a1      	ldr	r1, [r4, #8]
   45682:	f015 fdf5 	bl	5b270 <strncmp>
   45686:	2800      	cmp	r0, #0
   45688:	d1f1      	bne.n	4566e <disk_access_get_di+0x2e>
	return z_impl_k_mutex_unlock(mutex);
   4568a:	4803      	ldr	r0, [pc, #12]	; (45698 <disk_access_get_di+0x58>)
   4568c:	f00c ff78 	bl	52580 <z_impl_k_mutex_unlock>
}
   45690:	4620      	mov	r0, r4
   45692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   45694:	2001b58c 	.word	0x2001b58c
   45698:	2001b578 	.word	0x2001b578

0004569c <disk_access_register>:
{
   4569c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   4569e:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   456a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   456a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   456a8:	4812      	ldr	r0, [pc, #72]	; (456f4 <disk_access_register+0x58>)
   456aa:	f00c feef 	bl	5248c <z_impl_k_mutex_lock>
	if ((disk == NULL) || (disk->name == NULL)) {
   456ae:	b10c      	cbz	r4, 456b4 <disk_access_register+0x18>
   456b0:	68a0      	ldr	r0, [r4, #8]
   456b2:	b988      	cbnz	r0, 456d8 <disk_access_register+0x3c>
		LOG_ERR("invalid disk interface!!");
   456b4:	4b10      	ldr	r3, [pc, #64]	; (456f8 <disk_access_register+0x5c>)
		LOG_ERR("disk interface already registered!!");
   456b6:	9302      	str	r3, [sp, #8]
   456b8:	2300      	movs	r3, #0
   456ba:	2201      	movs	r2, #1
   456bc:	4618      	mov	r0, r3
   456be:	e9cd 3300 	strd	r3, r3, [sp]
   456c2:	490e      	ldr	r1, [pc, #56]	; (456fc <disk_access_register+0x60>)
   456c4:	f010 fbc1 	bl	55e4a <z_log_msg_runtime_create.constprop.0>
		rc = -EINVAL;
   456c8:	f06f 0415 	mvn.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
   456cc:	4809      	ldr	r0, [pc, #36]	; (456f4 <disk_access_register+0x58>)
   456ce:	f00c ff57 	bl	52580 <z_impl_k_mutex_unlock>
}
   456d2:	4620      	mov	r0, r4
   456d4:	b004      	add	sp, #16
   456d6:	bd10      	pop	{r4, pc}
	if (disk_access_get_di(disk->name) != NULL) {
   456d8:	f7ff ffb2 	bl	45640 <disk_access_get_di>
   456dc:	b108      	cbz	r0, 456e2 <disk_access_register+0x46>
		LOG_ERR("disk interface already registered!!");
   456de:	4b08      	ldr	r3, [pc, #32]	; (45700 <disk_access_register+0x64>)
   456e0:	e7e9      	b.n	456b6 <disk_access_register+0x1a>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   456e2:	4b08      	ldr	r3, [pc, #32]	; (45704 <disk_access_register+0x68>)
   456e4:	685a      	ldr	r2, [r3, #4]

	node->next = list;
	node->prev = tail;
   456e6:	e9c4 3200 	strd	r3, r2, [r4]

	tail->next = node;
   456ea:	6014      	str	r4, [r2, #0]
	list->tail = node;
   456ec:	605c      	str	r4, [r3, #4]
	int rc = 0;
   456ee:	4604      	mov	r4, r0
   456f0:	e7ec      	b.n	456cc <disk_access_register+0x30>
   456f2:	bf00      	nop
   456f4:	2001b578 	.word	0x2001b578
   456f8:	0005d7ac 	.word	0x0005d7ac
   456fc:	0005becc 	.word	0x0005becc
   45700:	0005d7c5 	.word	0x0005d7c5
   45704:	2001b58c 	.word	0x2001b58c

00045708 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   45708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4570c:	4605      	mov	r5, r0
   4570e:	460e      	mov	r6, r1
   45710:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   45712:	4c10      	ldr	r4, [pc, #64]	; (45754 <z_impl_zsock_socket+0x4c>)
   45714:	f8df 8040 	ldr.w	r8, [pc, #64]	; 45758 <z_impl_zsock_socket+0x50>
   45718:	4544      	cmp	r4, r8
   4571a:	d307      	bcc.n	4572c <z_impl_zsock_socket+0x24>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   4571c:	f010 fcea 	bl	560f4 <__errno>
   45720:	236a      	movs	r3, #106	; 0x6a
   45722:	6003      	str	r3, [r0, #0]
	return -1;
}
   45724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   45728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
   4572c:	6823      	ldr	r3, [r4, #0]
   4572e:	42ab      	cmp	r3, r5
   45730:	d000      	beq.n	45734 <z_impl_zsock_socket+0x2c>
   45732:	b963      	cbnz	r3, 4574e <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
   45734:	463a      	mov	r2, r7
   45736:	4631      	mov	r1, r6
   45738:	4628      	mov	r0, r5
   4573a:	68a3      	ldr	r3, [r4, #8]
   4573c:	4798      	blx	r3
   4573e:	b130      	cbz	r0, 4574e <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
   45740:	463a      	mov	r2, r7
   45742:	4631      	mov	r1, r6
   45744:	4628      	mov	r0, r5
   45746:	68e3      	ldr	r3, [r4, #12]
}
   45748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
   4574c:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   4574e:	3410      	adds	r4, #16
   45750:	e7e2      	b.n	45718 <z_impl_zsock_socket+0x10>
   45752:	bf00      	nop
   45754:	0005be9c 	.word	0x0005be9c
   45758:	0005beac 	.word	0x0005beac

0004575c <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   4575c:	4b01      	ldr	r3, [pc, #4]	; (45764 <socket_offload_dns_register+0x8>)
   4575e:	6018      	str	r0, [r3, #0]
}
   45760:	4770      	bx	lr
   45762:	bf00      	nop
   45764:	2001b594 	.word	0x2001b594

00045768 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   45768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4576c:	4605      	mov	r5, r0
	__asm__ volatile(
   4576e:	f04f 0320 	mov.w	r3, #32
   45772:	f3ef 8611 	mrs	r6, BASEPRI
   45776:	f383 8812 	msr	BASEPRI_MAX, r3
   4577a:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   4577e:	f04f 090c 	mov.w	r9, #12
	return list->head;
   45782:	4b0d      	ldr	r3, [pc, #52]	; (457b8 <pm_state_notify+0x50>)
   45784:	4f0d      	ldr	r7, [pc, #52]	; (457bc <pm_state_notify+0x54>)
   45786:	681c      	ldr	r4, [r3, #0]
   45788:	f8df 8034 	ldr.w	r8, [pc, #52]	; 457c0 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   4578c:	b92c      	cbnz	r4, 4579a <pm_state_notify+0x32>
	__asm__ volatile(
   4578e:	f386 8811 	msr	BASEPRI, r6
   45792:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   45796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   4579a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   4579e:	2d00      	cmp	r5, #0
   457a0:	bf18      	it	ne
   457a2:	4613      	movne	r3, r2
		if (callback) {
   457a4:	b12b      	cbz	r3, 457b2 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   457a6:	f898 2014 	ldrb.w	r2, [r8, #20]
   457aa:	fb09 f202 	mul.w	r2, r9, r2
   457ae:	5cb8      	ldrb	r0, [r7, r2]
   457b0:	4798      	blx	r3
	return node->next;
   457b2:	6824      	ldr	r4, [r4, #0]
   457b4:	e7ea      	b.n	4578c <pm_state_notify+0x24>
   457b6:	bf00      	nop
   457b8:	2001b5b4 	.word	0x2001b5b4
   457bc:	2001b5a8 	.word	0x2001b5a8
   457c0:	2001bc78 	.word	0x2001bc78

000457c4 <pm_resume_devices>:
{
   457c4:	b570      	push	{r4, r5, r6, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
   457c6:	4d08      	ldr	r5, [pc, #32]	; (457e8 <pm_resume_devices+0x24>)
		pm_device_action_run(__pm_device_slots_start[i],
   457c8:	4e08      	ldr	r6, [pc, #32]	; (457ec <pm_resume_devices+0x28>)
	for (int i = (num_susp - 1); i >= 0; i--) {
   457ca:	682c      	ldr	r4, [r5, #0]
   457cc:	3c01      	subs	r4, #1
   457ce:	2c00      	cmp	r4, #0
   457d0:	da02      	bge.n	457d8 <pm_resume_devices+0x14>
	num_susp = 0;
   457d2:	2300      	movs	r3, #0
   457d4:	602b      	str	r3, [r5, #0]
}
   457d6:	bd70      	pop	{r4, r5, r6, pc}
		pm_device_action_run(__pm_device_slots_start[i],
   457d8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   457dc:	2101      	movs	r1, #1
   457de:	f000 f9bd 	bl	45b5c <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
   457e2:	3c01      	subs	r4, #1
   457e4:	e7f3      	b.n	457ce <pm_resume_devices+0xa>
   457e6:	bf00      	nop
   457e8:	2001b598 	.word	0x2001b598
   457ec:	2001aab4 	.word	0x2001aab4

000457f0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   457f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   457f2:	ab0b      	add	r3, sp, #44	; 0x2c
   457f4:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   457f6:	9303      	str	r3, [sp, #12]
   457f8:	4b05      	ldr	r3, [pc, #20]	; (45810 <z_log_msg_runtime_create.constprop.0+0x20>)
   457fa:	2201      	movs	r2, #1
   457fc:	9302      	str	r3, [sp, #8]
   457fe:	2300      	movs	r3, #0
   45800:	4618      	mov	r0, r3
   45802:	e9cd 3300 	strd	r3, r3, [sp]
   45806:	f7ff fccf 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   4580a:	b007      	add	sp, #28
   4580c:	f85d fb04 	ldr.w	pc, [sp], #4
   45810:	0005d7ee 	.word	0x0005d7ee

00045814 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   45814:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   45816:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   45818:	4b16      	ldr	r3, [pc, #88]	; (45874 <pm_system_resume+0x60>)
   4581a:	7d1c      	ldrb	r4, [r3, #20]
   4581c:	f004 031f 	and.w	r3, r4, #31
   45820:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   45822:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45824:	4b14      	ldr	r3, [pc, #80]	; (45878 <pm_system_resume+0x64>)
   45826:	0961      	lsrs	r1, r4, #5
   45828:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   4582c:	e8d3 1fef 	ldaex	r1, [r3]
   45830:	ea01 0500 	and.w	r5, r1, r0
   45834:	e8c3 5fe6 	stlex	r6, r5, [r3]
   45838:	2e00      	cmp	r6, #0
   4583a:	d1f7      	bne.n	4582c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   4583c:	420a      	tst	r2, r1
   4583e:	d013      	beq.n	45868 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   45840:	4b0e      	ldr	r3, [pc, #56]	; (4587c <pm_system_resume+0x68>)
   45842:	4d0f      	ldr	r5, [pc, #60]	; (45880 <pm_system_resume+0x6c>)
   45844:	b18b      	cbz	r3, 4586a <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   45846:	230c      	movs	r3, #12
   45848:	4363      	muls	r3, r4
   4584a:	18ea      	adds	r2, r5, r3
   4584c:	7851      	ldrb	r1, [r2, #1]
   4584e:	5ce8      	ldrb	r0, [r5, r3]
   45850:	f010 fa86 	bl	55d60 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   45854:	2000      	movs	r0, #0
   45856:	f7ff ff87 	bl	45768 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   4585a:	230c      	movs	r3, #12
   4585c:	435c      	muls	r4, r3
   4585e:	2300      	movs	r3, #0
   45860:	192a      	adds	r2, r5, r4
   45862:	512b      	str	r3, [r5, r4]
   45864:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   45868:	bd70      	pop	{r4, r5, r6, pc}
   4586a:	f383 8811 	msr	BASEPRI, r3
   4586e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   45872:	e7ef      	b.n	45854 <pm_system_resume+0x40>
   45874:	2001bc78 	.word	0x2001bc78
   45878:	2001b5bc 	.word	0x2001b5bc
   4587c:	00055d61 	.word	0x00055d61
   45880:	2001b5a8 	.word	0x2001b5a8

00045884 <pm_state_force>:

bool pm_state_force(uint8_t cpu, const struct pm_state_info *info)
{
   45884:	b510      	push	{r4, lr}
	__asm__ volatile(
   45886:	f04f 0320 	mov.w	r3, #32
   4588a:	f3ef 8411 	mrs	r4, BASEPRI
   4588e:	f383 8812 	msr	BASEPRI_MAX, r3
   45892:	f3bf 8f6f 	isb	sy

	__ASSERT(info->state < PM_STATE_COUNT,
		 "Invalid power state %d!", info->state);

	key = k_spin_lock(&pm_forced_state_lock);
	z_cpus_pm_forced_state[cpu] = *info;
   45896:	220c      	movs	r2, #12
   45898:	4b05      	ldr	r3, [pc, #20]	; (458b0 <pm_state_force+0x2c>)
   4589a:	fb02 3300 	mla	r3, r2, r0, r3
   4589e:	c907      	ldmia	r1, {r0, r1, r2}
   458a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	__asm__ volatile(
   458a4:	f384 8811 	msr	BASEPRI, r4
   458a8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&pm_forced_state_lock, key);

	return true;
}
   458ac:	2001      	movs	r0, #1
   458ae:	bd10      	pop	{r4, pc}
   458b0:	2001b59c 	.word	0x2001b59c

000458b4 <pm_system_suspend>:

bool pm_system_suspend(int32_t ticks)
{
   458b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t id = CURRENT_CPU;
   458b8:	4b6d      	ldr	r3, [pc, #436]	; (45a70 <pm_system_suspend+0x1bc>)
{
   458ba:	4606      	mov	r6, r0
	uint8_t id = CURRENT_CPU;
   458bc:	7d1c      	ldrb	r4, [r3, #20]
{
   458be:	b088      	sub	sp, #32
	__asm__ volatile(
   458c0:	f04f 0320 	mov.w	r3, #32
   458c4:	f3ef 8711 	mrs	r7, BASEPRI
   458c8:	f383 8812 	msr	BASEPRI_MAX, r3
   458cc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   458d0:	250c      	movs	r5, #12
   458d2:	4365      	muls	r5, r4
   458d4:	4b67      	ldr	r3, [pc, #412]	; (45a74 <pm_system_suspend+0x1c0>)
   458d6:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 45a98 <pm_system_suspend+0x1e4>
   458da:	5d59      	ldrb	r1, [r3, r5]
   458dc:	195a      	adds	r2, r3, r5
   458de:	2900      	cmp	r1, #0
   458e0:	d072      	beq.n	459c8 <pm_system_suspend+0x114>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   458e2:	ca07      	ldmia	r2, {r0, r1, r2}
   458e4:	eb08 0c05 	add.w	ip, r8, r5
   458e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   458ec:	2200      	movs	r2, #0
   458ee:	555a      	strb	r2, [r3, r5]
	__asm__ volatile(
   458f0:	f387 8811 	msr	BASEPRI, r7
   458f4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   458f8:	230c      	movs	r3, #12
   458fa:	4363      	muls	r3, r4
   458fc:	eb08 0203 	add.w	r2, r8, r3
   45900:	f818 3003 	ldrb.w	r3, [r8, r3]
   45904:	2b00      	cmp	r3, #0
   45906:	f000 80a5 	beq.w	45a54 <pm_system_suspend+0x1a0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   4590a:	1c73      	adds	r3, r6, #1
   4590c:	d00f      	beq.n	4592e <pm_system_suspend+0x7a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   4590e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   45912:	2100      	movs	r1, #0
   45914:	6897      	ldr	r7, [r2, #8]
   45916:	4d58      	ldr	r5, [pc, #352]	; (45a78 <pm_system_suspend+0x1c4>)
   45918:	2300      	movs	r3, #0
   4591a:	fbe7 5100 	umlal	r5, r1, r7, r0
   4591e:	4a57      	ldr	r2, [pc, #348]	; (45a7c <pm_system_suspend+0x1c8>)
   45920:	4628      	mov	r0, r5
   45922:	f7fb f8f5 	bl	40b10 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   45926:	2101      	movs	r1, #1
   45928:	1a30      	subs	r0, r6, r0
   4592a:	f015 f994 	bl	5ac56 <z_set_timeout_expiry>
			     z_cpus_pm_state[id].exit_latency_us),
				     true);
	}

#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if ((z_cpus_pm_state[id].state != PM_STATE_RUNTIME_IDLE) &&
   4592e:	230c      	movs	r3, #12
   45930:	4363      	muls	r3, r4
   45932:	f818 3003 	ldrb.w	r3, [r8, r3]
   45936:	4f52      	ldr	r7, [pc, #328]	; (45a80 <pm_system_suspend+0x1cc>)
   45938:	2b01      	cmp	r3, #1
   4593a:	d016      	beq.n	4596a <pm_system_suspend+0xb6>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   4593c:	e8d7 5fef 	ldaex	r5, [r7]
   45940:	3d01      	subs	r5, #1
   45942:	e8c7 5fe3 	stlex	r3, r5, [r7]
   45946:	2b00      	cmp	r3, #0
   45948:	d1f8      	bne.n	4593c <pm_system_suspend+0x88>
   4594a:	b975      	cbnz	r5, 4596a <pm_system_suspend+0xb6>
	devc = z_device_get_all_static(&devs);
   4594c:	a807      	add	r0, sp, #28
   4594e:	f00c fb11 	bl	51f74 <z_device_get_all_static>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   45952:	231c      	movs	r3, #28
   45954:	4358      	muls	r0, r3
	num_susp = 0;
   45956:	f8df a144 	ldr.w	sl, [pc, #324]	; 45a9c <pm_system_suspend+0x1e8>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   4595a:	381c      	subs	r0, #28
	num_susp = 0;
   4595c:	f8ca 5000 	str.w	r5, [sl]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   45960:	9d07      	ldr	r5, [sp, #28]
   45962:	4405      	add	r5, r0
   45964:	9b07      	ldr	r3, [sp, #28]
   45966:	429d      	cmp	r5, r3
   45968:	d239      	bcs.n	459de <pm_system_suspend+0x12a>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   4596a:	f00d f9cd 	bl	52d08 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   4596e:	2001      	movs	r0, #1
   45970:	f7ff fefa 	bl	45768 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45974:	4b43      	ldr	r3, [pc, #268]	; (45a84 <pm_system_suspend+0x1d0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   45976:	0962      	lsrs	r2, r4, #5
   45978:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   4597c:	2201      	movs	r2, #1
   4597e:	f004 011f 	and.w	r1, r4, #31
   45982:	408a      	lsls	r2, r1
   45984:	e8d3 0fef 	ldaex	r0, [r3]
   45988:	4310      	orrs	r0, r2
   4598a:	e8c3 0fe1 	stlex	r1, r0, [r3]
   4598e:	2900      	cmp	r1, #0
   45990:	d1f8      	bne.n	45984 <pm_system_suspend+0xd0>
	if (pm_state_set != NULL) {
   45992:	4b3d      	ldr	r3, [pc, #244]	; (45a88 <pm_system_suspend+0x1d4>)
   45994:	b143      	cbz	r3, 459a8 <pm_system_suspend+0xf4>
		pm_state_set(info->state, info->substate_id);
   45996:	230c      	movs	r3, #12
   45998:	435c      	muls	r4, r3
   4599a:	eb08 0304 	add.w	r3, r8, r4
   4599e:	7859      	ldrb	r1, [r3, #1]
   459a0:	f818 0004 	ldrb.w	r0, [r8, r4]
   459a4:	f010 f9d0 	bl	55d48 <pm_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   459a8:	e8d7 3fef 	ldaex	r3, [r7]
   459ac:	1c5a      	adds	r2, r3, #1
   459ae:	e8c7 2fe1 	stlex	r1, r2, [r7]
   459b2:	2900      	cmp	r1, #0
   459b4:	d1f8      	bne.n	459a8 <pm_system_suspend+0xf4>
	state_set(&z_cpus_pm_state[id]);
	pm_stats_stop();

	/* Wake up sequence starts here */
#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_add(&z_cpus_active, 1) == 0) {
   459b6:	b90b      	cbnz	r3, 459bc <pm_system_suspend+0x108>
		pm_resume_devices();
   459b8:	f7ff ff04 	bl	457c4 <pm_resume_devices>
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   459bc:	f7ff ff2a 	bl	45814 <pm_system_resume>
	k_sched_unlock();
   459c0:	f00d f9b6 	bl	52d30 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   459c4:	2001      	movs	r0, #1
   459c6:	e046      	b.n	45a56 <pm_system_suspend+0x1a2>
		info = pm_policy_next_state(id, ticks);
   459c8:	4601      	mov	r1, r0
   459ca:	4620      	mov	r0, r4
   459cc:	f000 f868 	bl	45aa0 <pm_policy_next_state>
		if (info != NULL) {
   459d0:	2800      	cmp	r0, #0
   459d2:	d08d      	beq.n	458f0 <pm_system_suspend+0x3c>
			z_cpus_pm_state[id] = *info;
   459d4:	c807      	ldmia	r0, {r0, r1, r2}
   459d6:	4445      	add	r5, r8
   459d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   459dc:	e788      	b.n	458f0 <pm_system_suspend+0x3c>
		if (pm_device_is_busy(dev) || pm_device_state_is_locked(dev)
   459de:	4628      	mov	r0, r5
   459e0:	f010 faa9 	bl	55f36 <pm_device_is_busy>
   459e4:	2800      	cmp	r0, #0
   459e6:	d141      	bne.n	45a6c <pm_system_suspend+0x1b8>
   459e8:	4628      	mov	r0, r5
   459ea:	f010 fab4 	bl	55f56 <pm_device_state_is_locked>
   459ee:	2800      	cmp	r0, #0
   459f0:	d13c      	bne.n	45a6c <pm_system_suspend+0x1b8>
		    || pm_device_wakeup_is_enabled(dev) ||
   459f2:	4628      	mov	r0, r5
   459f4:	f010 faa7 	bl	55f46 <pm_device_wakeup_is_enabled>
   459f8:	4606      	mov	r6, r0
   459fa:	bbb8      	cbnz	r0, 45a6c <pm_system_suspend+0x1b8>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
   459fc:	4601      	mov	r1, r0
   459fe:	4628      	mov	r0, r5
   45a00:	f000 f8ac 	bl	45b5c <pm_device_action_run>
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
   45a04:	f020 0320 	bic.w	r3, r0, #32
   45a08:	3378      	adds	r3, #120	; 0x78
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
   45a0a:	4681      	mov	r9, r0
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
   45a0c:	d02e      	beq.n	45a6c <pm_system_suspend+0x1b8>
   45a0e:	f110 0f86 	cmn.w	r0, #134	; 0x86
   45a12:	d02b      	beq.n	45a6c <pm_system_suspend+0x1b8>
		} else if (ret < 0) {
   45a14:	2800      	cmp	r0, #0
   45a16:	da21      	bge.n	45a5c <pm_system_suspend+0x1a8>
			LOG_ERR("Device %s did not enter %s state (%d)",
   45a18:	2001      	movs	r0, #1
   45a1a:	682d      	ldr	r5, [r5, #0]
   45a1c:	f000 f892 	bl	45b44 <pm_device_state_str>
   45a20:	4b1a      	ldr	r3, [pc, #104]	; (45a8c <pm_system_suspend+0x1d8>)
   45a22:	2201      	movs	r2, #1
   45a24:	e9cd 0904 	strd	r0, r9, [sp, #16]
   45a28:	e9cd 6301 	strd	r6, r3, [sp, #4]
   45a2c:	4630      	mov	r0, r6
   45a2e:	4633      	mov	r3, r6
   45a30:	4917      	ldr	r1, [pc, #92]	; (45a90 <pm_system_suspend+0x1dc>)
   45a32:	9503      	str	r5, [sp, #12]
   45a34:	9600      	str	r6, [sp, #0]
   45a36:	f7ff fedb 	bl	457f0 <z_log_msg_runtime_create.constprop.0>
			pm_resume_devices();
   45a3a:	f7ff fec3 	bl	457c4 <pm_resume_devices>
			z_cpus_pm_state[id].state = PM_STATE_ACTIVE;
   45a3e:	230c      	movs	r3, #12
   45a40:	4363      	muls	r3, r4
   45a42:	f808 6003 	strb.w	r6, [r8, r3]
   45a46:	e8d7 3fef 	ldaex	r3, [r7]
   45a4a:	3301      	adds	r3, #1
   45a4c:	e8c7 3fe2 	stlex	r2, r3, [r7]
   45a50:	2a00      	cmp	r2, #0
   45a52:	d1f8      	bne.n	45a46 <pm_system_suspend+0x192>
		return false;
   45a54:	2000      	movs	r0, #0
}
   45a56:	b008      	add	sp, #32
   45a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		__pm_device_slots_start[num_susp] = dev;
   45a5c:	f8da 3000 	ldr.w	r3, [sl]
   45a60:	4a0c      	ldr	r2, [pc, #48]	; (45a94 <pm_system_suspend+0x1e0>)
   45a62:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
		num_susp++;
   45a66:	3301      	adds	r3, #1
   45a68:	f8ca 3000 	str.w	r3, [sl]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   45a6c:	3d1c      	subs	r5, #28
   45a6e:	e779      	b.n	45964 <pm_system_suspend+0xb0>
   45a70:	2001bc78 	.word	0x2001bc78
   45a74:	2001b59c 	.word	0x2001b59c
   45a78:	000f423f 	.word	0x000f423f
   45a7c:	000f4240 	.word	0x000f4240
   45a80:	2001a56c 	.word	0x2001a56c
   45a84:	2001b5bc 	.word	0x2001b5bc
   45a88:	00055d49 	.word	0x00055d49
   45a8c:	0005d7ee 	.word	0x0005d7ee
   45a90:	0005bf8c 	.word	0x0005bf8c
   45a94:	2001aab4 	.word	0x2001aab4
   45a98:	2001b5a8 	.word	0x2001b5a8
   45a9c:	2001b598 	.word	0x2001b598

00045aa0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   45aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45aa4:	b085      	sub	sp, #20
   45aa6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   45aa8:	a903      	add	r1, sp, #12
   45aaa:	f000 f843 	bl	45b34 <pm_state_cpu_get_all>
   45aae:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   45ab2:	4604      	mov	r4, r0
   45ab4:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   45ab8:	4b1b      	ldr	r3, [pc, #108]	; (45b28 <pm_policy_next_state+0x88>)
   45aba:	9d03      	ldr	r5, [sp, #12]
   45abc:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   45ac0:	1e43      	subs	r3, r0, #1
   45ac2:	b21b      	sxth	r3, r3
   45ac4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   45ac8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 45b30 <pm_policy_next_state+0x90>
   45acc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   45ad0:	b924      	cbnz	r4, 45adc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   45ad2:	46a1      	mov	r9, r4
}
   45ad4:	4648      	mov	r0, r9
   45ad6:	b005      	add	sp, #20
   45ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45adc:	46c4      	mov	ip, r8
   45ade:	4659      	mov	r1, fp
   45ae0:	6868      	ldr	r0, [r5, #4]
   45ae2:	2300      	movs	r3, #0
   45ae4:	fbe0 c107 	umlal	ip, r1, r0, r7
   45ae8:	4a10      	ldr	r2, [pc, #64]	; (45b2c <pm_policy_next_state+0x8c>)
   45aea:	4660      	mov	r0, ip
   45aec:	f7fb f810 	bl	40b10 <__aeabi_uldivmod>
   45af0:	46c4      	mov	ip, r8
   45af2:	4659      	mov	r1, fp
   45af4:	9001      	str	r0, [sp, #4]
   45af6:	68a8      	ldr	r0, [r5, #8]
   45af8:	2300      	movs	r3, #0
   45afa:	fbe0 c107 	umlal	ip, r1, r0, r7
   45afe:	4a0b      	ldr	r2, [pc, #44]	; (45b2c <pm_policy_next_state+0x8c>)
   45b00:	4660      	mov	r0, ip
   45b02:	f7fb f805 	bl	40b10 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   45b06:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
   45b0a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   45b0c:	d001      	beq.n	45b12 <pm_policy_next_state+0x72>
   45b0e:	4582      	cmp	sl, r0
   45b10:	d905      	bls.n	45b1e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   45b12:	1c73      	adds	r3, r6, #1
   45b14:	d0de      	beq.n	45ad4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   45b16:	9b01      	ldr	r3, [sp, #4]
   45b18:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   45b1a:	42b0      	cmp	r0, r6
   45b1c:	d9da      	bls.n	45ad4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   45b1e:	3c01      	subs	r4, #1
   45b20:	b2a4      	uxth	r4, r4
   45b22:	3d0c      	subs	r5, #12
   45b24:	e7d4      	b.n	45ad0 <pm_policy_next_state+0x30>
   45b26:	bf00      	nop
   45b28:	2001a570 	.word	0x2001a570
   45b2c:	000f4240 	.word	0x000f4240
   45b30:	000f423f 	.word	0x000f423f

00045b34 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   45b34:	b908      	cbnz	r0, 45b3a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   45b36:	4b02      	ldr	r3, [pc, #8]	; (45b40 <pm_state_cpu_get_all+0xc>)
   45b38:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   45b3a:	2000      	movs	r0, #0
   45b3c:	4770      	bx	lr
   45b3e:	bf00      	nop
   45b40:	0005c19c 	.word	0x0005c19c

00045b44 <pm_device_state_str>:
	[PM_DEVICE_ACTION_TURN_ON] = PM_DEVICE_STATE_OFF,
};

const char *pm_device_state_str(enum pm_device_state state)
{
	switch (state) {
   45b44:	2803      	cmp	r0, #3
   45b46:	bf9a      	itte	ls
   45b48:	4b02      	ldrls	r3, [pc, #8]	; (45b54 <pm_device_state_str+0x10>)
   45b4a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
   45b4e:	4802      	ldrhi	r0, [pc, #8]	; (45b58 <pm_device_state_str+0x14>)
	case PM_DEVICE_STATE_OFF:
		return "off";
	default:
		return "";
	}
}
   45b50:	4770      	bx	lr
   45b52:	bf00      	nop
   45b54:	0005c19c 	.word	0x0005c19c
   45b58:	0005fc04 	.word	0x0005fc04

00045b5c <pm_device_action_run>:

int pm_device_action_run(const struct device *dev,
			 enum pm_device_action action)
{
   45b5c:	b570      	push	{r4, r5, r6, lr}
	struct pm_device *pm = dev->pm;
   45b5e:	6984      	ldr	r4, [r0, #24]
{
   45b60:	4603      	mov	r3, r0
   45b62:	460d      	mov	r5, r1
	int ret;

	if (pm == NULL) {
   45b64:	b38c      	cbz	r4, 45bca <pm_device_action_run+0x6e>
		return -ENOSYS;
	}

	if (pm_device_state_is_locked(dev)) {
   45b66:	f010 f9f6 	bl	55f56 <pm_device_state_is_locked>
   45b6a:	bb88      	cbnz	r0, 45bd0 <pm_device_action_run+0x74>
		return -EPERM;
	}

	/* Validate action against current state */
	if (pm->state == action_target_state[action]) {
   45b6c:	481d      	ldr	r0, [pc, #116]	; (45be4 <pm_device_action_run+0x88>)
   45b6e:	7a22      	ldrb	r2, [r4, #8]
   45b70:	5c46      	ldrb	r6, [r0, r1]
   45b72:	42b2      	cmp	r2, r6
   45b74:	d02f      	beq.n	45bd6 <pm_device_action_run+0x7a>
		return -EALREADY;
	}
	if (pm->state != action_expected_state[action]) {
   45b76:	481c      	ldr	r0, [pc, #112]	; (45be8 <pm_device_action_run+0x8c>)
   45b78:	5c40      	ldrb	r0, [r0, r1]
   45b7a:	4290      	cmp	r0, r2
   45b7c:	d12e      	bne.n	45bdc <pm_device_action_run+0x80>
		return -ENOTSUP;
	}

	ret = pm->action_cb(dev, action);
   45b7e:	4618      	mov	r0, r3
   45b80:	68e2      	ldr	r2, [r4, #12]
   45b82:	4790      	blx	r2
	if (ret < 0) {
   45b84:	2800      	cmp	r0, #0
   45b86:	da11      	bge.n	45bac <pm_device_action_run+0x50>
		 * physical behavior.
		 *
		 * The function will still return the error code so the domain
		 * can take whatever action is more appropriated.
		 */
		switch (action) {
   45b88:	2d02      	cmp	r5, #2
   45b8a:	d00d      	beq.n	45ba8 <pm_device_action_run+0x4c>
   45b8c:	2d03      	cmp	r5, #3
   45b8e:	d10c      	bne.n	45baa <pm_device_action_run+0x4e>
		case PM_DEVICE_ACTION_TURN_ON:
			/* Store an error flag when the transition explicitly fails */
			if (ret != -ENOTSUP) {
   45b90:	f110 0f86 	cmn.w	r0, #134	; 0x86
   45b94:	d008      	beq.n	45ba8 <pm_device_action_run+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45b96:	1d23      	adds	r3, r4, #4
   45b98:	e8d3 1fef 	ldaex	r1, [r3]
   45b9c:	f041 0102 	orr.w	r1, r1, #2
   45ba0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   45ba4:	2a00      	cmp	r2, #0
   45ba6:	d1f7      	bne.n	45b98 <pm_device_action_run+0x3c>
				atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
			}
			__fallthrough;
		case PM_DEVICE_ACTION_TURN_OFF:
			pm->state = action_target_state[action];
   45ba8:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
		atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
	}

	return 0;
}
   45baa:	bd70      	pop	{r4, r5, r6, pc}
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
   45bac:	2d02      	cmp	r5, #2
	pm->state = action_target_state[action];
   45bae:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
   45bb0:	d001      	beq.n	45bb6 <pm_device_action_run+0x5a>
	return 0;
   45bb2:	2000      	movs	r0, #0
   45bb4:	e7f9      	b.n	45baa <pm_device_action_run+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45bb6:	3404      	adds	r4, #4
   45bb8:	e8d4 3fef 	ldaex	r3, [r4]
   45bbc:	f023 0302 	bic.w	r3, r3, #2
   45bc0:	e8c4 3fe2 	stlex	r2, r3, [r4]
   45bc4:	2a00      	cmp	r2, #0
   45bc6:	d0f4      	beq.n	45bb2 <pm_device_action_run+0x56>
   45bc8:	e7f6      	b.n	45bb8 <pm_device_action_run+0x5c>
		return -ENOSYS;
   45bca:	f06f 0057 	mvn.w	r0, #87	; 0x57
   45bce:	e7ec      	b.n	45baa <pm_device_action_run+0x4e>
		return -EPERM;
   45bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   45bd4:	e7e9      	b.n	45baa <pm_device_action_run+0x4e>
		return -EALREADY;
   45bd6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   45bda:	e7e6      	b.n	45baa <pm_device_action_run+0x4e>
		return -ENOTSUP;
   45bdc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   45be0:	e7e3      	b.n	45baa <pm_device_action_run+0x4e>
   45be2:	bf00      	nop
   45be4:	0005d833 	.word	0x0005d833
   45be8:	0005d82f 	.word	0x0005d82f

00045bec <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   45bec:	4901      	ldr	r1, [pc, #4]	; (45bf4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   45bee:	2210      	movs	r2, #16
	str	r2, [r1]
   45bf0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   45bf2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   45bf4:	e000ed10 	.word	0xe000ed10

00045bf8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   45bf8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   45bfa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   45bfc:	f380 8811 	msr	BASEPRI, r0
	isb
   45c00:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   45c04:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   45c08:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   45c0a:	b662      	cpsie	i
	isb
   45c0c:	f3bf 8f6f 	isb	sy

	bx	lr
   45c10:	4770      	bx	lr
   45c12:	bf00      	nop

00045c14 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   45c14:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   45c16:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   45c18:	f381 8811 	msr	BASEPRI, r1

	wfe
   45c1c:	bf20      	wfe

	msr	BASEPRI, r0
   45c1e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   45c22:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   45c24:	4770      	bx	lr
   45c26:	bf00      	nop

00045c28 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   45c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   45c2c:	4680      	mov	r8, r0

	if (esf != NULL) {
   45c2e:	460d      	mov	r5, r1
{
   45c30:	b08c      	sub	sp, #48	; 0x30
	if (esf != NULL) {
   45c32:	2900      	cmp	r1, #0
   45c34:	d077      	beq.n	45d26 <z_arm_fatal_error+0xfe>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   45c36:	2400      	movs	r4, #0
   45c38:	688b      	ldr	r3, [r1, #8]
   45c3a:	2201      	movs	r2, #1
   45c3c:	9305      	str	r3, [sp, #20]
   45c3e:	684b      	ldr	r3, [r1, #4]
   45c40:	4620      	mov	r0, r4
   45c42:	9304      	str	r3, [sp, #16]
   45c44:	680b      	ldr	r3, [r1, #0]
   45c46:	493b      	ldr	r1, [pc, #236]	; (45d34 <z_arm_fatal_error+0x10c>)
   45c48:	9303      	str	r3, [sp, #12]
   45c4a:	4b3b      	ldr	r3, [pc, #236]	; (45d38 <z_arm_fatal_error+0x110>)
   45c4c:	e9cd 4400 	strd	r4, r4, [sp]
   45c50:	9302      	str	r3, [sp, #8]
   45c52:	4623      	mov	r3, r4
   45c54:	f010 f987 	bl	55f66 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   45c58:	696b      	ldr	r3, [r5, #20]
   45c5a:	2201      	movs	r2, #1
   45c5c:	9305      	str	r3, [sp, #20]
   45c5e:	692b      	ldr	r3, [r5, #16]
   45c60:	4620      	mov	r0, r4
   45c62:	9304      	str	r3, [sp, #16]
   45c64:	68eb      	ldr	r3, [r5, #12]
   45c66:	4933      	ldr	r1, [pc, #204]	; (45d34 <z_arm_fatal_error+0x10c>)
   45c68:	9303      	str	r3, [sp, #12]
   45c6a:	4b34      	ldr	r3, [pc, #208]	; (45d3c <z_arm_fatal_error+0x114>)
   45c6c:	9400      	str	r4, [sp, #0]
   45c6e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   45c72:	4623      	mov	r3, r4
   45c74:	f010 f977 	bl	55f66 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   45c78:	69eb      	ldr	r3, [r5, #28]
   45c7a:	2201      	movs	r2, #1
   45c7c:	9303      	str	r3, [sp, #12]
   45c7e:	4b30      	ldr	r3, [pc, #192]	; (45d40 <z_arm_fatal_error+0x118>)
   45c80:	4620      	mov	r0, r4
   45c82:	e9cd 4301 	strd	r4, r3, [sp, #4]
   45c86:	492b      	ldr	r1, [pc, #172]	; (45d34 <z_arm_fatal_error+0x10c>)
   45c88:	4623      	mov	r3, r4
   45c8a:	9400      	str	r4, [sp, #0]
   45c8c:	f010 f96b 	bl	55f66 <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   45c90:	462f      	mov	r7, r5
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   45c92:	4626      	mov	r6, r4
   45c94:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 45d4c <z_arm_fatal_error+0x124>
   45c98:	f8df a098 	ldr.w	sl, [pc, #152]	; 45d34 <z_arm_fatal_error+0x10c>
   45c9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   45ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   45ca4:	1ce3      	adds	r3, r4, #3
   45ca6:	9309      	str	r3, [sp, #36]	; 0x24
   45ca8:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
   45cac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   45cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   45cb4:	1ca3      	adds	r3, r4, #2
   45cb6:	9307      	str	r3, [sp, #28]
   45cb8:	edcd 7a08 	vstr	s15, [sp, #32]
   45cbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   45cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   45cc4:	1c63      	adds	r3, r4, #1
   45cc6:	9305      	str	r3, [sp, #20]
   45cc8:	edcd 7a06 	vstr	s15, [sp, #24]
   45ccc:	edd7 7a08 	vldr	s15, [r7, #32]
   45cd0:	2300      	movs	r3, #0
   45cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   45cd6:	e9cd 9402 	strd	r9, r4, [sp, #8]
   45cda:	edcd 7a04 	vstr	s15, [sp, #16]
   45cde:	2201      	movs	r2, #1
   45ce0:	4651      	mov	r1, sl
   45ce2:	4618      	mov	r0, r3
   45ce4:	e9cd 6600 	strd	r6, r6, [sp]
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   45ce8:	3404      	adds	r4, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   45cea:	f010 f93c 	bl	55f66 <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   45cee:	2c10      	cmp	r4, #16
   45cf0:	f107 0710 	add.w	r7, r7, #16
   45cf4:	d1d2      	bne.n	45c9c <z_arm_fatal_error+0x74>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
   45cf6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   45cf8:	2201      	movs	r2, #1
   45cfa:	9303      	str	r3, [sp, #12]
   45cfc:	4b11      	ldr	r3, [pc, #68]	; (45d44 <z_arm_fatal_error+0x11c>)
   45cfe:	490d      	ldr	r1, [pc, #52]	; (45d34 <z_arm_fatal_error+0x10c>)
   45d00:	e9cd 6301 	strd	r6, r3, [sp, #4]
   45d04:	2300      	movs	r3, #0
   45d06:	9600      	str	r6, [sp, #0]
   45d08:	4618      	mov	r0, r3
   45d0a:	f010 f92c 	bl	55f66 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   45d0e:	69ab      	ldr	r3, [r5, #24]
   45d10:	2201      	movs	r2, #1
   45d12:	9303      	str	r3, [sp, #12]
   45d14:	4b0c      	ldr	r3, [pc, #48]	; (45d48 <z_arm_fatal_error+0x120>)
   45d16:	4907      	ldr	r1, [pc, #28]	; (45d34 <z_arm_fatal_error+0x10c>)
   45d18:	e9cd 6301 	strd	r6, r3, [sp, #4]
   45d1c:	2300      	movs	r3, #0
   45d1e:	9600      	str	r6, [sp, #0]
   45d20:	4618      	mov	r0, r3
   45d22:	f010 f920 	bl	55f66 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   45d26:	4629      	mov	r1, r5
   45d28:	4640      	mov	r0, r8
}
   45d2a:	b00c      	add	sp, #48	; 0x30
   45d2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
   45d30:	f00c b934 	b.w	51f9c <z_fatal_error>
   45d34:	0005bf84 	.word	0x0005bf84
   45d38:	0005d837 	.word	0x0005d837
   45d3c:	0005d866 	.word	0x0005d866
   45d40:	0005d895 	.word	0x0005d895
   45d44:	0005d8e7 	.word	0x0005d8e7
   45d48:	0005d8f6 	.word	0x0005d8f6
   45d4c:	0005d8a4 	.word	0x0005d8a4

00045d50 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   45d50:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   45d52:	2800      	cmp	r0, #0
   45d54:	db07      	blt.n	45d66 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   45d56:	2301      	movs	r3, #1
   45d58:	0941      	lsrs	r1, r0, #5
   45d5a:	4a03      	ldr	r2, [pc, #12]	; (45d68 <arch_irq_enable+0x18>)
   45d5c:	f000 001f 	and.w	r0, r0, #31
   45d60:	4083      	lsls	r3, r0
   45d62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   45d66:	4770      	bx	lr
   45d68:	e000e100 	.word	0xe000e100

00045d6c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   45d6c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   45d6e:	2800      	cmp	r0, #0
   45d70:	db0c      	blt.n	45d8c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   45d72:	2201      	movs	r2, #1
   45d74:	4906      	ldr	r1, [pc, #24]	; (45d90 <arch_irq_disable+0x24>)
   45d76:	0943      	lsrs	r3, r0, #5
   45d78:	f000 001f 	and.w	r0, r0, #31
   45d7c:	4082      	lsls	r2, r0
   45d7e:	3320      	adds	r3, #32
   45d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   45d84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   45d88:	f3bf 8f6f 	isb	sy
}
   45d8c:	4770      	bx	lr
   45d8e:	bf00      	nop
   45d90:	e000e100 	.word	0xe000e100

00045d94 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   45d94:	4b05      	ldr	r3, [pc, #20]	; (45dac <arch_irq_is_enabled+0x18>)
   45d96:	0942      	lsrs	r2, r0, #5
   45d98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   45d9c:	2301      	movs	r3, #1
   45d9e:	f000 001f 	and.w	r0, r0, #31
   45da2:	fa03 f000 	lsl.w	r0, r3, r0
}
   45da6:	4010      	ands	r0, r2
   45da8:	4770      	bx	lr
   45daa:	bf00      	nop
   45dac:	e000e100 	.word	0xe000e100

00045db0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   45db0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   45db2:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
   45db4:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45db8:	bfac      	ite	ge
   45dba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45dbe:	4b06      	ldrlt	r3, [pc, #24]	; (45dd8 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45dc0:	ea4f 1141 	mov.w	r1, r1, lsl #5
   45dc4:	b2c9      	uxtb	r1, r1
   45dc6:	bfab      	itete	ge
   45dc8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45dcc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45dd0:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45dd4:	5419      	strblt	r1, [r3, r0]
}
   45dd6:	4770      	bx	lr
   45dd8:	e000ed14 	.word	0xe000ed14

00045ddc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   45ddc:	bf30      	wfi
    b z_SysNmiOnReset
   45dde:	f7ff bffd 	b.w	45ddc <z_SysNmiOnReset>
   45de2:	bf00      	nop

00045de4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   45de4:	4a14      	ldr	r2, [pc, #80]	; (45e38 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   45de6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   45de8:	4b14      	ldr	r3, [pc, #80]	; (45e3c <z_arm_prep_c+0x58>)
   45dea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   45dee:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   45df0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   45df4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   45df8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   45dfc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   45e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   45e04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   45e08:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   45e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   45e10:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   45e14:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   45e18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   45e1c:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   45e20:	2300      	movs	r3, #0
   45e22:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   45e26:	f00c f959 	bl	520dc <z_bss_zero>
	z_data_copy();
   45e2a:	f00d f8bd 	bl	52fa8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   45e2e:	f000 fbb3 	bl	46598 <z_arm_interrupt_init>
	z_cstart();
   45e32:	f00c f993 	bl	5215c <z_cstart>
   45e36:	bf00      	nop
   45e38:	00040000 	.word	0x00040000
   45e3c:	e000ed00 	.word	0xe000ed00

00045e40 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   45e40:	4a09      	ldr	r2, [pc, #36]	; (45e68 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   45e42:	490a      	ldr	r1, [pc, #40]	; (45e6c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   45e44:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   45e46:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   45e48:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   45e4a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   45e4c:	4908      	ldr	r1, [pc, #32]	; (45e70 <arch_swap+0x30>)
   45e4e:	684b      	ldr	r3, [r1, #4]
   45e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   45e54:	604b      	str	r3, [r1, #4]
   45e56:	2300      	movs	r3, #0
   45e58:	f383 8811 	msr	BASEPRI, r3
   45e5c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   45e60:	6893      	ldr	r3, [r2, #8]
}
   45e62:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   45e64:	4770      	bx	lr
   45e66:	bf00      	nop
   45e68:	2001bc78 	.word	0x2001bc78
   45e6c:	0005c800 	.word	0x0005c800
   45e70:	e000ed00 	.word	0xe000ed00

00045e74 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   45e74:	4922      	ldr	r1, [pc, #136]	; (45f00 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   45e76:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   45e78:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   45e7c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   45e80:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   45e82:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   45e86:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   45e8a:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   45e8e:	d103      	bne.n	45e98 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   45e90:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   45e94:	ec80 8a10 	vstmia	r0, {s16-s31}

00045e98 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   45e98:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   45e9a:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   45e9e:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   45ea2:	4f18      	ldr	r7, [pc, #96]	; (45f04 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   45ea4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   45ea8:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
   45eaa:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   45eac:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   45eae:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   45eb2:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   45eb4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   45eb6:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   45eb8:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   45ebc:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   45ec0:	d003      	beq.n	45eca <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   45ec2:	2300      	movs	r3, #0
    vmsr fpscr, r3
   45ec4:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   45ec8:	e003      	b.n	45ed2 <in_fp_endif>

00045eca <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   45eca:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   45ece:	ec90 8a10 	vldmia	r0, {s16-s31}

00045ed2 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   45ed2:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   45ed6:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   45eda:	f383 8814 	msr	CONTROL, r3
    isb
   45ede:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   45ee2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   45ee6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   45eea:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   45eee:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   45ef2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   45ef4:	f010 f856 	bl	55fa4 <configure_builtin_stack_guard>
    pop {r2, lr}
   45ef8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   45efc:	4770      	bx	lr
   45efe:	0000      	.short	0x0000
    ldr r1, =_kernel
   45f00:	2001bc78 	.word	0x2001bc78
    ldr v4, =_SCS_ICSR
   45f04:	e000ed04 	.word	0xe000ed04

00045f08 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   45f08:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   45f0c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   45f0e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   45f12:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   45f16:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   45f18:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   45f1c:	2902      	cmp	r1, #2
    beq _oops
   45f1e:	d0ff      	beq.n	45f20 <_oops>

00045f20 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   45f20:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   45f22:	f010 f830 	bl	55f86 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   45f26:	bd01      	pop	{r0, pc}

00045f28 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   45f28:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   45f2c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   45f2e:	490d      	ldr	r1, [pc, #52]	; (45f64 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   45f30:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   45f34:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   45f36:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   45f3a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   45f3e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   45f40:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   45f44:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   45f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   45f4c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   45f50:	2300      	movs	r3, #0
   45f52:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   45f54:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   45f58:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   45f5a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   45f5c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   45f60:	4770      	bx	lr
   45f62:	bf00      	nop
   45f64:	0005574b 	.word	0x0005574b

00045f68 <arch_switch_to_main_thread>:
   45f68:	2300      	movs	r3, #0
   45f6a:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   45f6e:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_CPU_CORTEX_M) && defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   45f72:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   45f76:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   45f7a:	f3bf 8f6f 	isb	sy
   45f7e:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   45f82:	4b09      	ldr	r3, [pc, #36]	; (45fa8 <arch_switch_to_main_thread+0x40>)
   45f84:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   45f86:	6e83      	ldr	r3, [r0, #104]	; 0x68
   45f88:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   45f8c:	4610      	mov	r0, r2
   45f8e:	f381 8809 	msr	PSP, r1
   45f92:	2100      	movs	r1, #0
   45f94:	b663      	cpsie	if
   45f96:	f381 8811 	msr	BASEPRI, r1
   45f9a:	f3bf 8f6f 	isb	sy
   45f9e:	2200      	movs	r2, #0
   45fa0:	2300      	movs	r3, #0
   45fa2:	f00f fbd2 	bl	5574a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   45fa6:	bf00      	nop
   45fa8:	2001bc78 	.word	0x2001bc78

00045fac <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   45fac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   45fae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   45fb0:	4a0b      	ldr	r2, [pc, #44]	; (45fe0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   45fb2:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
   45fb4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   45fb6:	bf1e      	ittt	ne
	movne	r1, #0
   45fb8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   45fba:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
   45fbc:	f014 fc24 	blne	5a808 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   45fc0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   45fc2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   45fc6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   45fca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   45fce:	4905      	ldr	r1, [pc, #20]	; (45fe4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   45fd0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   45fd2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   45fd4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   45fd6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   45fda:	4903      	ldr	r1, [pc, #12]	; (45fe8 <_isr_wrapper+0x3c>)
	bx r1
   45fdc:	4708      	bx	r1
   45fde:	0000      	.short	0x0000
	ldr r2, =_kernel
   45fe0:	2001bc78 	.word	0x2001bc78
	ldr r1, =_sw_isr_table
   45fe4:	0005bc58 	.word	0x0005bc58
	ldr r1, =z_arm_int_exit
   45fe8:	00045fed 	.word	0x00045fed

00045fec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   45fec:	4b04      	ldr	r3, [pc, #16]	; (46000 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   45fee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   45ff0:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
   45ff2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   45ff4:	d003      	beq.n	45ffe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   45ff6:	4903      	ldr	r1, [pc, #12]	; (46004 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   45ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   45ffc:	600a      	str	r2, [r1, #0]

00045ffe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   45ffe:	4770      	bx	lr
	ldr r3, =_kernel
   46000:	2001bc78 	.word	0x2001bc78
	ldr r1, =_SCS_ICSR
   46004:	e000ed04 	.word	0xe000ed04

00046008 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   46008:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   4600a:	2400      	movs	r4, #0
   4600c:	4b3d      	ldr	r3, [pc, #244]	; (46104 <mem_manage_fault.constprop.0+0xfc>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   4600e:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   46010:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   46012:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   46014:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   46016:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   46018:	2201      	movs	r2, #1
   4601a:	4620      	mov	r0, r4
   4601c:	e9cd 4400 	strd	r4, r4, [sp]
   46020:	4939      	ldr	r1, [pc, #228]	; (46108 <mem_manage_fault.constprop.0+0x100>)
   46022:	f00f ffc3 	bl	55fac <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   46026:	4b39      	ldr	r3, [pc, #228]	; (4610c <mem_manage_fault.constprop.0+0x104>)
   46028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   4602a:	06dd      	lsls	r5, r3, #27
   4602c:	d509      	bpl.n	46042 <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   4602e:	4b38      	ldr	r3, [pc, #224]	; (46110 <mem_manage_fault.constprop.0+0x108>)
   46030:	2201      	movs	r2, #1
   46032:	e9cd 4301 	strd	r4, r3, [sp, #4]
   46036:	4620      	mov	r0, r4
   46038:	4623      	mov	r3, r4
   4603a:	4933      	ldr	r1, [pc, #204]	; (46108 <mem_manage_fault.constprop.0+0x100>)
   4603c:	9400      	str	r4, [sp, #0]
   4603e:	f00f ffb5 	bl	55fac <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   46042:	4b32      	ldr	r3, [pc, #200]	; (4610c <mem_manage_fault.constprop.0+0x104>)
   46044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   46046:	0718      	lsls	r0, r3, #28
   46048:	d509      	bpl.n	4605e <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   4604a:	4b32      	ldr	r3, [pc, #200]	; (46114 <mem_manage_fault.constprop.0+0x10c>)
   4604c:	2201      	movs	r2, #1
   4604e:	9302      	str	r3, [sp, #8]
   46050:	2300      	movs	r3, #0
   46052:	492d      	ldr	r1, [pc, #180]	; (46108 <mem_manage_fault.constprop.0+0x100>)
   46054:	4618      	mov	r0, r3
   46056:	e9cd 3300 	strd	r3, r3, [sp]
   4605a:	f00f ffa7 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   4605e:	4d2b      	ldr	r5, [pc, #172]	; (4610c <mem_manage_fault.constprop.0+0x104>)
   46060:	6aab      	ldr	r3, [r5, #40]	; 0x28
   46062:	0799      	lsls	r1, r3, #30
   46064:	d51e      	bpl.n	460a4 <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
   46066:	2400      	movs	r4, #0
   46068:	4b2b      	ldr	r3, [pc, #172]	; (46118 <mem_manage_fault.constprop.0+0x110>)
   4606a:	2201      	movs	r2, #1
   4606c:	9302      	str	r3, [sp, #8]
   4606e:	4620      	mov	r0, r4
   46070:	4623      	mov	r3, r4
   46072:	e9cd 4400 	strd	r4, r4, [sp]
   46076:	4924      	ldr	r1, [pc, #144]	; (46108 <mem_manage_fault.constprop.0+0x100>)
   46078:	f00f ff98 	bl	55fac <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   4607c:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   4607e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   46080:	0612      	lsls	r2, r2, #24
   46082:	d50f      	bpl.n	460a4 <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   46084:	9303      	str	r3, [sp, #12]
   46086:	4b25      	ldr	r3, [pc, #148]	; (4611c <mem_manage_fault.constprop.0+0x114>)
   46088:	2201      	movs	r2, #1
   4608a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4608e:	4620      	mov	r0, r4
   46090:	4623      	mov	r3, r4
   46092:	491d      	ldr	r1, [pc, #116]	; (46108 <mem_manage_fault.constprop.0+0x100>)
   46094:	9400      	str	r4, [sp, #0]
   46096:	f00f ff89 	bl	55fac <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   4609a:	b11f      	cbz	r7, 460a4 <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   4609c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   4609e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   460a2:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   460a4:	4b19      	ldr	r3, [pc, #100]	; (4610c <mem_manage_fault.constprop.0+0x104>)
   460a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   460a8:	07dc      	lsls	r4, r3, #31
   460aa:	d509      	bpl.n	460c0 <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
   460ac:	4b1c      	ldr	r3, [pc, #112]	; (46120 <mem_manage_fault.constprop.0+0x118>)
   460ae:	2201      	movs	r2, #1
   460b0:	9302      	str	r3, [sp, #8]
   460b2:	2300      	movs	r3, #0
   460b4:	4914      	ldr	r1, [pc, #80]	; (46108 <mem_manage_fault.constprop.0+0x100>)
   460b6:	4618      	mov	r0, r3
   460b8:	e9cd 3300 	strd	r3, r3, [sp]
   460bc:	f00f ff76 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   460c0:	4b12      	ldr	r3, [pc, #72]	; (4610c <mem_manage_fault.constprop.0+0x104>)
   460c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   460c4:	0698      	lsls	r0, r3, #26
   460c6:	d509      	bpl.n	460dc <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
   460c8:	4b16      	ldr	r3, [pc, #88]	; (46124 <mem_manage_fault.constprop.0+0x11c>)
   460ca:	2201      	movs	r2, #1
   460cc:	9302      	str	r3, [sp, #8]
   460ce:	2300      	movs	r3, #0
   460d0:	490d      	ldr	r1, [pc, #52]	; (46108 <mem_manage_fault.constprop.0+0x100>)
   460d2:	4618      	mov	r0, r3
   460d4:	e9cd 3300 	strd	r3, r3, [sp]
   460d8:	f00f ff68 	bl	55fac <z_log_msg_runtime_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   460dc:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   460de:	4b0b      	ldr	r3, [pc, #44]	; (4610c <mem_manage_fault.constprop.0+0x104>)
   460e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   460e2:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   460e4:	bf58      	it	pl
   460e6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   460e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   460ea:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   460ec:	bf42      	ittt	mi
   460ee:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   460f0:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   460f4:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   460f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   460f8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   460fc:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   460fe:	7030      	strb	r0, [r6, #0]

	return reason;
}
   46100:	b005      	add	sp, #20
   46102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   46104:	0005d924 	.word	0x0005d924
   46108:	0005bf84 	.word	0x0005bf84
   4610c:	e000ed00 	.word	0xe000ed00
   46110:	0005d93a 	.word	0x0005d93a
   46114:	0005d96d 	.word	0x0005d96d
   46118:	0005d980 	.word	0x0005d980
   4611c:	0005d998 	.word	0x0005d998
   46120:	0005d9ae 	.word	0x0005d9ae
   46124:	0005d9cd 	.word	0x0005d9cd

00046128 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   46128:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   4612a:	2400      	movs	r4, #0
   4612c:	4b3b      	ldr	r3, [pc, #236]	; (4621c <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   4612e:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
   46130:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   46132:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   46134:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   46136:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   46138:	2201      	movs	r2, #1
   4613a:	4620      	mov	r0, r4
   4613c:	e9cd 4400 	strd	r4, r4, [sp]
   46140:	4937      	ldr	r1, [pc, #220]	; (46220 <bus_fault.constprop.0+0xf8>)
   46142:	f00f ff33 	bl	55fac <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   46146:	4b37      	ldr	r3, [pc, #220]	; (46224 <bus_fault.constprop.0+0xfc>)
   46148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   4614a:	04db      	lsls	r3, r3, #19
   4614c:	d509      	bpl.n	46162 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   4614e:	4b36      	ldr	r3, [pc, #216]	; (46228 <bus_fault.constprop.0+0x100>)
   46150:	2201      	movs	r2, #1
   46152:	e9cd 4301 	strd	r4, r3, [sp, #4]
   46156:	4620      	mov	r0, r4
   46158:	4623      	mov	r3, r4
   4615a:	4931      	ldr	r1, [pc, #196]	; (46220 <bus_fault.constprop.0+0xf8>)
   4615c:	9400      	str	r4, [sp, #0]
   4615e:	f00f ff25 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   46162:	4b30      	ldr	r3, [pc, #192]	; (46224 <bus_fault.constprop.0+0xfc>)
   46164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   46166:	051d      	lsls	r5, r3, #20
   46168:	d509      	bpl.n	4617e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   4616a:	4b30      	ldr	r3, [pc, #192]	; (4622c <bus_fault.constprop.0+0x104>)
   4616c:	2201      	movs	r2, #1
   4616e:	9302      	str	r3, [sp, #8]
   46170:	2300      	movs	r3, #0
   46172:	492b      	ldr	r1, [pc, #172]	; (46220 <bus_fault.constprop.0+0xf8>)
   46174:	4618      	mov	r0, r3
   46176:	e9cd 3300 	strd	r3, r3, [sp]
   4617a:	f00f ff17 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   4617e:	4d29      	ldr	r5, [pc, #164]	; (46224 <bus_fault.constprop.0+0xfc>)
   46180:	6aab      	ldr	r3, [r5, #40]	; 0x28
   46182:	059c      	lsls	r4, r3, #22
   46184:	d51e      	bpl.n	461c4 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   46186:	2400      	movs	r4, #0
   46188:	4b29      	ldr	r3, [pc, #164]	; (46230 <bus_fault.constprop.0+0x108>)
   4618a:	2201      	movs	r2, #1
   4618c:	4620      	mov	r0, r4
   4618e:	9302      	str	r3, [sp, #8]
   46190:	e9cd 4400 	strd	r4, r4, [sp]
   46194:	4623      	mov	r3, r4
   46196:	4922      	ldr	r1, [pc, #136]	; (46220 <bus_fault.constprop.0+0xf8>)
   46198:	f00f ff08 	bl	55fac <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   4619c:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   4619e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   461a0:	0410      	lsls	r0, r2, #16
   461a2:	d50f      	bpl.n	461c4 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   461a4:	9303      	str	r3, [sp, #12]
   461a6:	4b23      	ldr	r3, [pc, #140]	; (46234 <bus_fault.constprop.0+0x10c>)
   461a8:	2201      	movs	r2, #1
   461aa:	e9cd 4301 	strd	r4, r3, [sp, #4]
   461ae:	4620      	mov	r0, r4
   461b0:	4623      	mov	r3, r4
   461b2:	491b      	ldr	r1, [pc, #108]	; (46220 <bus_fault.constprop.0+0xf8>)
   461b4:	9400      	str	r4, [sp, #0]
   461b6:	f00f fef9 	bl	55fac <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   461ba:	b11f      	cbz	r7, 461c4 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   461bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   461be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   461c2:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   461c4:	4b17      	ldr	r3, [pc, #92]	; (46224 <bus_fault.constprop.0+0xfc>)
   461c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   461c8:	0559      	lsls	r1, r3, #21
   461ca:	d509      	bpl.n	461e0 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   461cc:	4b1a      	ldr	r3, [pc, #104]	; (46238 <bus_fault.constprop.0+0x110>)
   461ce:	2201      	movs	r2, #1
   461d0:	9302      	str	r3, [sp, #8]
   461d2:	2300      	movs	r3, #0
   461d4:	4912      	ldr	r1, [pc, #72]	; (46220 <bus_fault.constprop.0+0xf8>)
   461d6:	4618      	mov	r0, r3
   461d8:	e9cd 3300 	strd	r3, r3, [sp]
   461dc:	f00f fee6 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   461e0:	4a10      	ldr	r2, [pc, #64]	; (46224 <bus_fault.constprop.0+0xfc>)
   461e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   461e4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   461e8:	d012      	beq.n	46210 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   461ea:	4b14      	ldr	r3, [pc, #80]	; (4623c <bus_fault.constprop.0+0x114>)
   461ec:	9302      	str	r3, [sp, #8]
   461ee:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   461f0:	2201      	movs	r2, #1
   461f2:	4618      	mov	r0, r3
   461f4:	e9cd 3300 	strd	r3, r3, [sp]
   461f8:	4909      	ldr	r1, [pc, #36]	; (46220 <bus_fault.constprop.0+0xf8>)
   461fa:	f00f fed7 	bl	55fac <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   461fe:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   46200:	4a08      	ldr	r2, [pc, #32]	; (46224 <bus_fault.constprop.0+0xfc>)
   46202:	6a93      	ldr	r3, [r2, #40]	; 0x28
   46204:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   46208:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   4620a:	7030      	strb	r0, [r6, #0]

	return reason;
}
   4620c:	b005      	add	sp, #20
   4620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   46210:	6a92      	ldr	r2, [r2, #40]	; 0x28
   46212:	0492      	lsls	r2, r2, #18
   46214:	d5f3      	bpl.n	461fe <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   46216:	4a0a      	ldr	r2, [pc, #40]	; (46240 <bus_fault.constprop.0+0x118>)
   46218:	9202      	str	r2, [sp, #8]
   4621a:	e7e9      	b.n	461f0 <bus_fault.constprop.0+0xc8>
   4621c:	0005d9fc 	.word	0x0005d9fc
   46220:	0005bf84 	.word	0x0005bf84
   46224:	e000ed00 	.word	0xe000ed00
   46228:	0005da12 	.word	0x0005da12
   4622c:	0005d96d 	.word	0x0005d96d
   46230:	0005da23 	.word	0x0005da23
   46234:	0005da3c 	.word	0x0005da3c
   46238:	0005da51 	.word	0x0005da51
   4623c:	0005da6c 	.word	0x0005da6c
   46240:	0005d9cd 	.word	0x0005d9cd

00046244 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   46244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   46246:	2400      	movs	r4, #0
   46248:	4b3b      	ldr	r3, [pc, #236]	; (46338 <usage_fault.constprop.0+0xf4>)
   4624a:	2201      	movs	r2, #1
   4624c:	9302      	str	r3, [sp, #8]
   4624e:	4620      	mov	r0, r4
   46250:	4623      	mov	r3, r4
   46252:	e9cd 4400 	strd	r4, r4, [sp]
   46256:	4939      	ldr	r1, [pc, #228]	; (4633c <usage_fault.constprop.0+0xf8>)
   46258:	f00f fea8 	bl	55fac <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   4625c:	4b38      	ldr	r3, [pc, #224]	; (46340 <usage_fault.constprop.0+0xfc>)
   4625e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   46260:	019b      	lsls	r3, r3, #6
   46262:	d509      	bpl.n	46278 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   46264:	4b37      	ldr	r3, [pc, #220]	; (46344 <usage_fault.constprop.0+0x100>)
   46266:	2201      	movs	r2, #1
   46268:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4626c:	4620      	mov	r0, r4
   4626e:	4623      	mov	r3, r4
   46270:	4932      	ldr	r1, [pc, #200]	; (4633c <usage_fault.constprop.0+0xf8>)
   46272:	9400      	str	r4, [sp, #0]
   46274:	f00f fe9a 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   46278:	4b31      	ldr	r3, [pc, #196]	; (46340 <usage_fault.constprop.0+0xfc>)
   4627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   4627c:	01dc      	lsls	r4, r3, #7
   4627e:	d509      	bpl.n	46294 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   46280:	4b31      	ldr	r3, [pc, #196]	; (46348 <usage_fault.constprop.0+0x104>)
   46282:	2201      	movs	r2, #1
   46284:	9302      	str	r3, [sp, #8]
   46286:	2300      	movs	r3, #0
   46288:	492c      	ldr	r1, [pc, #176]	; (4633c <usage_fault.constprop.0+0xf8>)
   4628a:	4618      	mov	r0, r3
   4628c:	e9cd 3300 	strd	r3, r3, [sp]
   46290:	f00f fe8c 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   46294:	4b2a      	ldr	r3, [pc, #168]	; (46340 <usage_fault.constprop.0+0xfc>)
   46296:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   46298:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   4629c:	d00a      	beq.n	462b4 <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   4629e:	4b2b      	ldr	r3, [pc, #172]	; (4634c <usage_fault.constprop.0+0x108>)
   462a0:	2201      	movs	r2, #1
   462a2:	9302      	str	r3, [sp, #8]
   462a4:	2300      	movs	r3, #0
   462a6:	4925      	ldr	r1, [pc, #148]	; (4633c <usage_fault.constprop.0+0xf8>)
   462a8:	4618      	mov	r0, r3
   462aa:	e9cd 3300 	strd	r3, r3, [sp]
   462ae:	f00f fe7d 	bl	55fac <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   462b2:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   462b4:	4b22      	ldr	r3, [pc, #136]	; (46340 <usage_fault.constprop.0+0xfc>)
   462b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   462b8:	0318      	lsls	r0, r3, #12
   462ba:	d509      	bpl.n	462d0 <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
   462bc:	4b24      	ldr	r3, [pc, #144]	; (46350 <usage_fault.constprop.0+0x10c>)
   462be:	2201      	movs	r2, #1
   462c0:	9302      	str	r3, [sp, #8]
   462c2:	2300      	movs	r3, #0
   462c4:	491d      	ldr	r1, [pc, #116]	; (4633c <usage_fault.constprop.0+0xf8>)
   462c6:	4618      	mov	r0, r3
   462c8:	e9cd 3300 	strd	r3, r3, [sp]
   462cc:	f00f fe6e 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   462d0:	4b1b      	ldr	r3, [pc, #108]	; (46340 <usage_fault.constprop.0+0xfc>)
   462d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   462d4:	0359      	lsls	r1, r3, #13
   462d6:	d509      	bpl.n	462ec <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   462d8:	4b1e      	ldr	r3, [pc, #120]	; (46354 <usage_fault.constprop.0+0x110>)
   462da:	2201      	movs	r2, #1
   462dc:	9302      	str	r3, [sp, #8]
   462de:	2300      	movs	r3, #0
   462e0:	4916      	ldr	r1, [pc, #88]	; (4633c <usage_fault.constprop.0+0xf8>)
   462e2:	4618      	mov	r0, r3
   462e4:	e9cd 3300 	strd	r3, r3, [sp]
   462e8:	f00f fe60 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   462ec:	4b14      	ldr	r3, [pc, #80]	; (46340 <usage_fault.constprop.0+0xfc>)
   462ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   462f0:	039a      	lsls	r2, r3, #14
   462f2:	d509      	bpl.n	46308 <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   462f4:	4b18      	ldr	r3, [pc, #96]	; (46358 <usage_fault.constprop.0+0x114>)
   462f6:	2201      	movs	r2, #1
   462f8:	9302      	str	r3, [sp, #8]
   462fa:	2300      	movs	r3, #0
   462fc:	490f      	ldr	r1, [pc, #60]	; (4633c <usage_fault.constprop.0+0xf8>)
   462fe:	4618      	mov	r0, r3
   46300:	e9cd 3300 	strd	r3, r3, [sp]
   46304:	f00f fe52 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   46308:	4b0d      	ldr	r3, [pc, #52]	; (46340 <usage_fault.constprop.0+0xfc>)
   4630a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   4630c:	03db      	lsls	r3, r3, #15
   4630e:	d509      	bpl.n	46324 <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   46310:	4b12      	ldr	r3, [pc, #72]	; (4635c <usage_fault.constprop.0+0x118>)
   46312:	2201      	movs	r2, #1
   46314:	9302      	str	r3, [sp, #8]
   46316:	2300      	movs	r3, #0
   46318:	4908      	ldr	r1, [pc, #32]	; (4633c <usage_fault.constprop.0+0xf8>)
   4631a:	4618      	mov	r0, r3
   4631c:	e9cd 3300 	strd	r3, r3, [sp]
   46320:	f00f fe44 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   46324:	4a06      	ldr	r2, [pc, #24]	; (46340 <usage_fault.constprop.0+0xfc>)

	return reason;
}
   46326:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   46328:	6a93      	ldr	r3, [r2, #40]	; 0x28
   4632a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   4632e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   46332:	6293      	str	r3, [r2, #40]	; 0x28
}
   46334:	b004      	add	sp, #16
   46336:	bd10      	pop	{r4, pc}
   46338:	0005da84 	.word	0x0005da84
   4633c:	0005bf84 	.word	0x0005bf84
   46340:	e000ed00 	.word	0xe000ed00
   46344:	0005da9c 	.word	0x0005da9c
   46348:	0005daaf 	.word	0x0005daaf
   4634c:	0005dac9 	.word	0x0005dac9
   46350:	0005daf3 	.word	0x0005daf3
   46354:	0005db11 	.word	0x0005db11
   46358:	0005db36 	.word	0x0005db36
   4635c:	0005db50 	.word	0x0005db50

00046360 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   46360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   46364:	4b75      	ldr	r3, [pc, #468]	; (4653c <z_arm_fault+0x1dc>)
{
   46366:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   46368:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   4636c:	4689      	mov	r9, r1
   4636e:	4614      	mov	r4, r2
   46370:	2600      	movs	r6, #0
   46372:	b0a3      	sub	sp, #140	; 0x8c
   46374:	f3c8 0708 	ubfx	r7, r8, #0, #9
   46378:	f386 8811 	msr	BASEPRI, r6
   4637c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   46380:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   46384:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   46388:	d125      	bne.n	463d6 <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   4638a:	f012 0301 	ands.w	r3, r2, #1
   4638e:	d122      	bne.n	463d6 <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   46390:	0651      	lsls	r1, r2, #25
   46392:	d403      	bmi.n	4639c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   46394:	0722      	lsls	r2, r4, #28
   46396:	d40d      	bmi.n	463b4 <z_arm_fault+0x54>
			*nested_exc = true;
   46398:	2601      	movs	r6, #1
   4639a:	e00d      	b.n	463b8 <z_arm_fault+0x58>
		PR_FAULT_INFO("Exception occurred in Secure State");
   4639c:	4a68      	ldr	r2, [pc, #416]	; (46540 <z_arm_fault+0x1e0>)
   4639e:	4618      	mov	r0, r3
   463a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   463a4:	4967      	ldr	r1, [pc, #412]	; (46544 <z_arm_fault+0x1e4>)
   463a6:	2201      	movs	r2, #1
   463a8:	9300      	str	r3, [sp, #0]
   463aa:	f00f fdff 	bl	55fac <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   463ae:	f014 0404 	ands.w	r4, r4, #4
   463b2:	d000      	beq.n	463b6 <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)psp;
   463b4:	464d      	mov	r5, r9
	*nested_exc = false;
   463b6:	2600      	movs	r6, #0
	*recoverable = false;
   463b8:	f04f 0900 	mov.w	r9, #0
	switch (fault) {
   463bc:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   463be:	f88d 901f 	strb.w	r9, [sp, #31]
	switch (fault) {
   463c2:	2b09      	cmp	r3, #9
   463c4:	f200 80a0 	bhi.w	46508 <z_arm_fault+0x1a8>
   463c8:	e8df f003 	tbb	[pc, r3]
   463cc:	90989407 	.word	0x90989407
   463d0:	9e9e9e9e 	.word	0x9e9e9e9e
   463d4:	9c9e      	.short	0x9c9e
		return NULL;
   463d6:	4635      	mov	r5, r6
   463d8:	e7ee      	b.n	463b8 <z_arm_fault+0x58>
	PR_FAULT_INFO("***** HARD FAULT *****");
   463da:	4b5b      	ldr	r3, [pc, #364]	; (46548 <z_arm_fault+0x1e8>)
   463dc:	2201      	movs	r2, #1
   463de:	e9cd 9301 	strd	r9, r3, [sp, #4]
   463e2:	2300      	movs	r3, #0
   463e4:	4957      	ldr	r1, [pc, #348]	; (46544 <z_arm_fault+0x1e4>)
   463e6:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   463e8:	4f54      	ldr	r7, [pc, #336]	; (4653c <z_arm_fault+0x1dc>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   463ea:	f8cd 9000 	str.w	r9, [sp]
   463ee:	f00f fddd 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
   463f2:	f88d 901f 	strb.w	r9, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   463f6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   463f8:	f014 0402 	ands.w	r4, r4, #2
   463fc:	d005      	beq.n	4640a <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   463fe:	4b53      	ldr	r3, [pc, #332]	; (4654c <z_arm_fault+0x1ec>)
	PR_FAULT_INFO(
   46400:	e9cd 9301 	strd	r9, r3, [sp, #4]
   46404:	f8cd 9000 	str.w	r9, [sp]
   46408:	e006      	b.n	46418 <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   4640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4640c:	2b00      	cmp	r3, #0
   4640e:	da0b      	bge.n	46428 <z_arm_fault+0xc8>
		PR_EXC("  Debug event");
   46410:	4b4f      	ldr	r3, [pc, #316]	; (46550 <z_arm_fault+0x1f0>)
   46412:	9400      	str	r4, [sp, #0]
   46414:	e9cd 4301 	strd	r4, r3, [sp, #4]
	PR_FAULT_INFO(
   46418:	2300      	movs	r3, #0
   4641a:	2201      	movs	r2, #1
   4641c:	4618      	mov	r0, r3
   4641e:	4949      	ldr	r1, [pc, #292]	; (46544 <z_arm_fault+0x1e4>)
   46420:	f00f fdc4 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   46424:	2400      	movs	r4, #0
   46426:	e030      	b.n	4648a <z_arm_fault+0x12a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   46428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   4642a:	005b      	lsls	r3, r3, #1
   4642c:	d5fa      	bpl.n	46424 <z_arm_fault+0xc4>
		PR_EXC("  Fault escalation (see below)");
   4642e:	4b49      	ldr	r3, [pc, #292]	; (46554 <z_arm_fault+0x1f4>)
   46430:	2201      	movs	r2, #1
   46432:	e9cd 4301 	strd	r4, r3, [sp, #4]
   46436:	4620      	mov	r0, r4
   46438:	4623      	mov	r3, r4
   4643a:	4942      	ldr	r1, [pc, #264]	; (46544 <z_arm_fault+0x1e4>)
   4643c:	9400      	str	r4, [sp, #0]
   4643e:	f00f fdb5 	bl	55fac <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   46442:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   46444:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   46446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   4644a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   4644c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   46450:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   46454:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   46456:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   4645a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   4645e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   46460:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   46464:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   46468:	f64d 7302 	movw	r3, #57090	; 0xdf02
   4646c:	429a      	cmp	r2, r3
   4646e:	d126      	bne.n	464be <z_arm_fault+0x15e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   46470:	682b      	ldr	r3, [r5, #0]
   46472:	4620      	mov	r0, r4
   46474:	9303      	str	r3, [sp, #12]
   46476:	4b38      	ldr	r3, [pc, #224]	; (46558 <z_arm_fault+0x1f8>)
   46478:	9400      	str	r4, [sp, #0]
   4647a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4647e:	2201      	movs	r2, #1
   46480:	4623      	mov	r3, r4
   46482:	4930      	ldr	r1, [pc, #192]	; (46544 <z_arm_fault+0x1e4>)
   46484:	f00f fd92 	bl	55fac <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   46488:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   4648a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   4648e:	b99b      	cbnz	r3, 464b8 <z_arm_fault+0x158>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   46490:	2268      	movs	r2, #104	; 0x68
   46492:	4629      	mov	r1, r5
   46494:	a808      	add	r0, sp, #32
   46496:	f014 fce0 	bl	5ae5a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   4649a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   4649c:	2e00      	cmp	r6, #0
   4649e:	d047      	beq.n	46530 <z_arm_fault+0x1d0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   464a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   464a4:	b922      	cbnz	r2, 464b0 <z_arm_fault+0x150>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   464a6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   464aa:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   464ae:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   464b0:	4620      	mov	r0, r4
   464b2:	a908      	add	r1, sp, #32
   464b4:	f7ff fbb8 	bl	45c28 <z_arm_fatal_error>
}
   464b8:	b023      	add	sp, #140	; 0x8c
   464ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   464be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   464c0:	b2db      	uxtb	r3, r3
   464c2:	b12b      	cbz	r3, 464d0 <z_arm_fault+0x170>
			reason = mem_manage_fault(esf, 1, recoverable);
   464c4:	2001      	movs	r0, #1
   464c6:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
   464ca:	f7ff fd9d 	bl	46008 <mem_manage_fault.constprop.0>
   464ce:	e00f      	b.n	464f0 <z_arm_fault+0x190>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   464d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   464d2:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   464d6:	d005      	beq.n	464e4 <z_arm_fault+0x184>
			reason = bus_fault(esf, 1, recoverable);
   464d8:	2001      	movs	r0, #1
   464da:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
   464de:	f7ff fe23 	bl	46128 <bus_fault.constprop.0>
   464e2:	e005      	b.n	464f0 <z_arm_fault+0x190>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   464e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   464e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   464ea:	d39b      	bcc.n	46424 <z_arm_fault+0xc4>
			reason = usage_fault(esf);
   464ec:	f7ff feaa 	bl	46244 <usage_fault.constprop.0>
   464f0:	4604      	mov	r4, r0
   464f2:	e7ca      	b.n	4648a <z_arm_fault+0x12a>
		reason = mem_manage_fault(esf, 0, recoverable);
   464f4:	2000      	movs	r0, #0
   464f6:	f10d 011f 	add.w	r1, sp, #31
   464fa:	e7e6      	b.n	464ca <z_arm_fault+0x16a>
		reason = bus_fault(esf, 0, recoverable);
   464fc:	2000      	movs	r0, #0
   464fe:	f10d 011f 	add.w	r1, sp, #31
   46502:	e7ec      	b.n	464de <z_arm_fault+0x17e>
	PR_FAULT_INFO(
   46504:	4b15      	ldr	r3, [pc, #84]	; (4655c <z_arm_fault+0x1fc>)
   46506:	e77b      	b.n	46400 <z_arm_fault+0xa0>
	PR_FAULT_INFO("***** %s %d) *****",
   46508:	4a15      	ldr	r2, [pc, #84]	; (46560 <z_arm_fault+0x200>)
   4650a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   4650e:	4b15      	ldr	r3, [pc, #84]	; (46564 <z_arm_fault+0x204>)
   46510:	bf18      	it	ne
   46512:	4613      	movne	r3, r2
   46514:	3f10      	subs	r7, #16
   46516:	e9cd 3703 	strd	r3, r7, [sp, #12]
   4651a:	4b13      	ldr	r3, [pc, #76]	; (46568 <z_arm_fault+0x208>)
   4651c:	2201      	movs	r2, #1
   4651e:	9302      	str	r3, [sp, #8]
   46520:	2300      	movs	r3, #0
   46522:	4908      	ldr	r1, [pc, #32]	; (46544 <z_arm_fault+0x1e4>)
   46524:	4618      	mov	r0, r3
   46526:	e9cd 3300 	strd	r3, r3, [sp]
   4652a:	f00f fd3f 	bl	55fac <z_log_msg_runtime_create.constprop.0>
}
   4652e:	e779      	b.n	46424 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   46530:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   46534:	f023 0301 	bic.w	r3, r3, #1
   46538:	e7b9      	b.n	464ae <z_arm_fault+0x14e>
   4653a:	bf00      	nop
   4653c:	e000ed00 	.word	0xe000ed00
   46540:	0005dba9 	.word	0x0005dba9
   46544:	0005bf84 	.word	0x0005bf84
   46548:	0005dbcc 	.word	0x0005dbcc
   4654c:	0005dbe3 	.word	0x0005dbe3
   46550:	0005dc04 	.word	0x0005dc04
   46554:	0005dc12 	.word	0x0005dc12
   46558:	0005dc31 	.word	0x0005dc31
   4655c:	0005dc4d 	.word	0x0005dc4d
   46560:	0005db90 	.word	0x0005db90
   46564:	0005db7b 	.word	0x0005db7b
   46568:	0005dc71 	.word	0x0005dc71

0004656c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   4656c:	4b04      	ldr	r3, [pc, #16]	; (46580 <z_arm_fault_init+0x14>)
   4656e:	695a      	ldr	r2, [r3, #20]
   46570:	f042 0210 	orr.w	r2, r2, #16
   46574:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   46576:	695a      	ldr	r2, [r3, #20]
   46578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   4657c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   4657e:	4770      	bx	lr
   46580:	e000ed00 	.word	0xe000ed00

00046584 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   46584:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   46588:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   4658c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   4658e:	4672      	mov	r2, lr
	bl z_arm_fault
   46590:	f7ff fee6 	bl	46360 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   46594:	bd01      	pop	{r0, pc}
   46596:	bf00      	nop

00046598 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   46598:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   4659a:	2120      	movs	r1, #32
   4659c:	4803      	ldr	r0, [pc, #12]	; (465ac <z_arm_interrupt_init+0x14>)
   4659e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   465a0:	3301      	adds	r3, #1
   465a2:	2b41      	cmp	r3, #65	; 0x41
   465a4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   465a8:	d1f9      	bne.n	4659e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   465aa:	4770      	bx	lr
   465ac:	e000e100 	.word	0xe000e100

000465b0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   465b0:	2000      	movs	r0, #0
    msr CONTROL, r0
   465b2:	f380 8814 	msr	CONTROL, r0
    isb
   465b6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   465ba:	2000      	movs	r0, #0
    msr MSPLIM, r0
   465bc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   465c0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   465c4:	f7fe fcf0 	bl	44fa8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   465c8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   465ca:	490e      	ldr	r1, [pc, #56]	; (46604 <__start+0x54>)
    str r0, [r1]
   465cc:	6008      	str	r0, [r1, #0]
    dsb
   465ce:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   465d2:	480d      	ldr	r0, [pc, #52]	; (46608 <__start+0x58>)
    msr msp, r0
   465d4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   465d8:	f000 f83e 	bl	46658 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   465dc:	2020      	movs	r0, #32
    msr BASEPRI, r0
   465de:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   465e2:	480a      	ldr	r0, [pc, #40]	; (4660c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   465e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   465e8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   465ea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   465ee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   465f2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   465f4:	4308      	orrs	r0, r1
    msr CONTROL, r0
   465f6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   465fa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   465fe:	f7ff fbf1 	bl	45de4 <z_arm_prep_c>
   46602:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   46604:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   46608:	20022780 	.word	0x20022780
    ldr r0, =z_interrupt_stacks
   4660c:	20020e40 	.word	0x20020e40

00046610 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   46610:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   46614:	4905      	ldr	r1, [pc, #20]	; (4662c <sys_arch_reboot+0x1c>)
   46616:	4b06      	ldr	r3, [pc, #24]	; (46630 <sys_arch_reboot+0x20>)
   46618:	68ca      	ldr	r2, [r1, #12]
   4661a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   4661e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   46620:	60cb      	str	r3, [r1, #12]
   46622:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   46626:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   46628:	e7fd      	b.n	46626 <sys_arch_reboot+0x16>
   4662a:	bf00      	nop
   4662c:	e000ed00 	.word	0xe000ed00
   46630:	05fa0004 	.word	0x05fa0004

00046634 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   46634:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   46636:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   46638:	4906      	ldr	r1, [pc, #24]	; (46654 <z_arm_clear_arm_mpu_config+0x20>)
   4663a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   4663e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   46642:	4293      	cmp	r3, r2
   46644:	db00      	blt.n	46648 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   46646:	4770      	bx	lr
  mpu->RNR = rnr;
   46648:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   4664c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   46650:	3301      	adds	r3, #1
   46652:	e7f6      	b.n	46642 <z_arm_clear_arm_mpu_config+0xe>
   46654:	e000ed00 	.word	0xe000ed00

00046658 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   46658:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   4665a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   4665c:	2400      	movs	r4, #0
   4665e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   46662:	f7ff ffe7 	bl	46634 <z_arm_clear_arm_mpu_config>
   46666:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   46668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4666c:	4a0c      	ldr	r2, [pc, #48]	; (466a0 <z_arm_init_arch_hw_at_boot+0x48>)
   4666e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   46672:	3301      	adds	r3, #1
   46674:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   46676:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   4667a:	d1f8      	bne.n	4666e <z_arm_init_arch_hw_at_boot+0x16>
   4667c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   4667e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46682:	4a07      	ldr	r2, [pc, #28]	; (466a0 <z_arm_init_arch_hw_at_boot+0x48>)
   46684:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   46688:	3301      	adds	r3, #1
   4668a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   4668c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   46690:	d1f8      	bne.n	46684 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   46692:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   46694:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   46698:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   4669c:	bd10      	pop	{r4, pc}
   4669e:	bf00      	nop
   466a0:	e000e100 	.word	0xe000e100

000466a4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   466a4:	4b08      	ldr	r3, [pc, #32]	; (466c8 <z_impl_k_thread_abort+0x24>)
   466a6:	689b      	ldr	r3, [r3, #8]
   466a8:	4283      	cmp	r3, r0
   466aa:	d10b      	bne.n	466c4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   466ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   466b0:	b143      	cbz	r3, 466c4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   466b2:	4b06      	ldr	r3, [pc, #24]	; (466cc <z_impl_k_thread_abort+0x28>)
   466b4:	685a      	ldr	r2, [r3, #4]
   466b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   466ba:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   466bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   466be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   466c2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   466c4:	f00c bbfe 	b.w	52ec4 <z_thread_abort>
   466c8:	2001bc78 	.word	0x2001bc78
   466cc:	e000ed00 	.word	0xe000ed00

000466d0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   466d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   466d2:	4c09      	ldr	r4, [pc, #36]	; (466f8 <z_arm_configure_static_mpu_regions+0x28>)
   466d4:	4a09      	ldr	r2, [pc, #36]	; (466fc <z_arm_configure_static_mpu_regions+0x2c>)
   466d6:	4623      	mov	r3, r4
   466d8:	2101      	movs	r1, #1
   466da:	4809      	ldr	r0, [pc, #36]	; (46700 <z_arm_configure_static_mpu_regions+0x30>)
   466dc:	f000 f918 	bl	46910 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   466e0:	2300      	movs	r3, #0
   466e2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   466e4:	4b07      	ldr	r3, [pc, #28]	; (46704 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   466e6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   466e8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   466ea:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   466ec:	9301      	str	r3, [sp, #4]
   466ee:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   466f0:	f000 f918 	bl	46924 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   466f4:	b004      	add	sp, #16
   466f6:	bd10      	pop	{r4, pc}
   466f8:	20040000 	.word	0x20040000
   466fc:	2001a500 	.word	0x2001a500
   46700:	0005c1ac 	.word	0x0005c1ac
   46704:	2001ac70 	.word	0x2001ac70

00046708 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   46708:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   4670a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   4670c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   4670e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   46712:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   46716:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   46718:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   4671a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   4671c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   46720:	4905      	ldr	r1, [pc, #20]	; (46738 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   46722:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   46726:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   4672a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   4672e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   46732:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   46736:	bd10      	pop	{r4, pc}
   46738:	e000ed00 	.word	0xe000ed00

0004673c <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   4673c:	280f      	cmp	r0, #15
{
   4673e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   46740:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
   46742:	d90f      	bls.n	46764 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   46744:	4b09      	ldr	r3, [pc, #36]	; (4676c <region_allocate_and_init+0x30>)
   46746:	9003      	str	r0, [sp, #12]
   46748:	9302      	str	r3, [sp, #8]
   4674a:	2300      	movs	r3, #0
   4674c:	2201      	movs	r2, #1
   4674e:	4618      	mov	r0, r3
   46750:	e9cd 3300 	strd	r3, r3, [sp]
   46754:	4906      	ldr	r1, [pc, #24]	; (46770 <region_allocate_and_init+0x34>)
   46756:	f00f fc70 	bl	5603a <z_log_msg_runtime_create.constprop.0>
   4675a:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   4675e:	4620      	mov	r0, r4
   46760:	b004      	add	sp, #16
   46762:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   46764:	f7ff ffd0 	bl	46708 <region_init>
	return index;
   46768:	e7f9      	b.n	4675e <region_allocate_and_init+0x22>
   4676a:	bf00      	nop
   4676c:	0005dc88 	.word	0x0005dc88
   46770:	0005bf2c 	.word	0x0005bf2c

00046774 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   46774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46778:	4689      	mov	r9, r1
   4677a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   4677c:	4606      	mov	r6, r0
   4677e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   46782:	4d54      	ldr	r5, [pc, #336]	; (468d4 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   46784:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
   46786:	45c8      	cmp	r8, r9
   46788:	da2d      	bge.n	467e6 <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
   4678a:	f8d6 a004 	ldr.w	sl, [r6, #4]
   4678e:	f1ba 0f00 	cmp.w	sl, #0
   46792:	d04a      	beq.n	4682a <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
   46794:	f1ba 0f1f 	cmp.w	sl, #31
   46798:	d917      	bls.n	467ca <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
   4679a:	f01a 0f1f 	tst.w	sl, #31
   4679e:	d114      	bne.n	467ca <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
   467a0:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   467a4:	f01b 0f1f 	tst.w	fp, #31
   467a8:	d10f      	bne.n	467ca <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   467aa:	4658      	mov	r0, fp
   467ac:	f00f fc3c 	bl	56028 <arm_cmse_mpu_region_get>
   467b0:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   467b2:	eb0a 000b 	add.w	r0, sl, fp
   467b6:	3801      	subs	r0, #1
   467b8:	f00f fc36 	bl	56028 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   467bc:	4287      	cmp	r7, r0
   467be:	d016      	beq.n	467ee <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   467c0:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   467c4:	4b44      	ldr	r3, [pc, #272]	; (468d8 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   467c6:	9703      	str	r7, [sp, #12]
   467c8:	e002      	b.n	467d0 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   467ca:	4b44      	ldr	r3, [pc, #272]	; (468dc <mpu_configure_regions_and_partition.constprop.0+0x168>)
   467cc:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
   467d0:	9302      	str	r3, [sp, #8]
   467d2:	2300      	movs	r3, #0
   467d4:	2201      	movs	r2, #1
   467d6:	4618      	mov	r0, r3
   467d8:	e9cd 3300 	strd	r3, r3, [sp]
   467dc:	4940      	ldr	r1, [pc, #256]	; (468e0 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   467de:	f00f fc2c 	bl	5603a <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   467e2:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   467e6:	4620      	mov	r0, r4
   467e8:	b009      	add	sp, #36	; 0x24
   467ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   467ee:	f117 0f16 	cmn.w	r7, #22
   467f2:	d0e7      	beq.n	467c4 <mpu_configure_regions_and_partition.constprop.0+0x50>
   467f4:	42bc      	cmp	r4, r7
   467f6:	dde5      	ble.n	467c4 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
   467f8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   467fc:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   46800:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   46804:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   46808:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   4680c:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   46810:	e9d6 3200 	ldrd	r3, r2, [r6]
   46814:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   46816:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   46818:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
   4681c:	d11d      	bne.n	4685a <mpu_configure_regions_and_partition.constprop.0+0xe6>
   4681e:	45d3      	cmp	fp, sl
   46820:	d107      	bne.n	46832 <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
   46822:	4631      	mov	r1, r6
   46824:	b2f8      	uxtb	r0, r7
   46826:	f00f fc18 	bl	5605a <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   4682a:	f108 0801 	add.w	r8, r8, #1
   4682e:	360c      	adds	r6, #12
   46830:	e7a9      	b.n	46786 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   46832:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   46834:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   46838:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   4683c:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   46840:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   46844:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
   46846:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   4684a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   4684c:	f00f fc05 	bl	5605a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   46850:	f110 0f16 	cmn.w	r0, #22
   46854:	d0c5      	beq.n	467e2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
   46856:	1c44      	adds	r4, r0, #1
   46858:	e7e7      	b.n	4682a <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
   4685a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   4685e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   46862:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
   46864:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   46868:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   4686c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   4686e:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   46870:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   46872:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
   46874:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   46878:	d0e8      	beq.n	4684c <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
   4687a:	f00f fbee 	bl	5605a <mpu_configure_region>
			if (reg_index == -EINVAL) {
   4687e:	f110 0f16 	cmn.w	r0, #22
   46882:	d0ae      	beq.n	467e2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
   46884:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   46888:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   4688c:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
   46890:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
   46894:	f362 0304 	bfi	r3, r2, #0, #5
   46898:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
   4689c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   468a0:	f89d 2018 	ldrb.w	r2, [sp, #24]
   468a4:	085b      	lsrs	r3, r3, #1
   468a6:	f363 1247 	bfi	r2, r3, #5, #3
   468aa:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
   468ae:	e9d6 3200 	ldrd	r3, r2, [r6]
   468b2:	4413      	add	r3, r2
   468b4:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   468b6:	f023 031f 	bic.w	r3, r3, #31
   468ba:	445b      	add	r3, fp
   468bc:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   468c0:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   468c2:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   468c6:	a904      	add	r1, sp, #16
   468c8:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   468ca:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   468cc:	f7ff ff36 	bl	4673c <region_allocate_and_init>
   468d0:	e7be      	b.n	46850 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   468d2:	bf00      	nop
   468d4:	e000ed00 	.word	0xe000ed00
   468d8:	0005dcd1 	.word	0x0005dcd1
   468dc:	0005dcae 	.word	0x0005dcae
   468e0:	0005bf2c 	.word	0x0005bf2c

000468e4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   468e4:	2205      	movs	r2, #5
   468e6:	4b04      	ldr	r3, [pc, #16]	; (468f8 <arm_core_mpu_enable+0x14>)
   468e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   468ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   468f0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   468f4:	4770      	bx	lr
   468f6:	bf00      	nop
   468f8:	e000ed00 	.word	0xe000ed00

000468fc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   468fc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   46900:	2200      	movs	r2, #0
   46902:	4b02      	ldr	r3, [pc, #8]	; (4690c <arm_core_mpu_disable+0x10>)
   46904:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   46908:	4770      	bx	lr
   4690a:	bf00      	nop
   4690c:	e000ed00 	.word	0xe000ed00

00046910 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   46910:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   46912:	4c03      	ldr	r4, [pc, #12]	; (46920 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   46914:	7822      	ldrb	r2, [r4, #0]
   46916:	f7ff ff2d 	bl	46774 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   4691a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   4691c:	bd10      	pop	{r4, pc}
   4691e:	bf00      	nop
   46920:	2001de2d 	.word	0x2001de2d

00046924 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   46924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46928:	4d29      	ldr	r5, [pc, #164]	; (469d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   4692a:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   4692c:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   4692e:	f04f 0800 	mov.w	r8, #0
   46932:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
   46934:	4f27      	ldr	r7, [pc, #156]	; (469d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   46936:	45d0      	cmp	r8, sl
   46938:	da1b      	bge.n	46972 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   4693a:	f8d6 9004 	ldr.w	r9, [r6, #4]
   4693e:	f1b9 0f00 	cmp.w	r9, #0
   46942:	d03f      	beq.n	469c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   46944:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   46946:	4608      	mov	r0, r1
   46948:	9101      	str	r1, [sp, #4]
   4694a:	f00f fb6d 	bl	56028 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   4694e:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   46950:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   46952:	eb09 0001 	add.w	r0, r9, r1
   46956:	3801      	subs	r0, #1
   46958:	f00f fb66 	bl	56028 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   4695c:	4284      	cmp	r4, r0
   4695e:	f04f 0214 	mov.w	r2, #20
   46962:	4b1d      	ldr	r3, [pc, #116]	; (469d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   46964:	d008      	beq.n	46978 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   46966:	fb02 f308 	mul.w	r3, r2, r8
   4696a:	f06f 0215 	mvn.w	r2, #21
   4696e:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   46972:	b003      	add	sp, #12
   46974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   46978:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   4697c:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   4697e:	d0f8      	beq.n	46972 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   46980:	7819      	ldrb	r1, [r3, #0]
   46982:	42a1      	cmp	r1, r4
   46984:	ddf5      	ble.n	46972 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
   46986:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   4698a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   4698e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   46992:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   46996:	f100 0108 	add.w	r1, r0, #8
   4699a:	7b00      	ldrb	r0, [r0, #12]
   4699c:	f364 0004 	bfi	r0, r4, #0, #5
   469a0:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   469a2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   469a6:	790c      	ldrb	r4, [r1, #4]
   469a8:	0840      	lsrs	r0, r0, #1
   469aa:	f360 1447 	bfi	r4, r0, #5, #3
   469ae:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   469b0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   469b4:	f021 011f 	bic.w	r1, r1, #31
   469b8:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
   469ba:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   469be:	f021 011f 	bic.w	r1, r1, #31
   469c2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   469c4:	f108 0801 	add.w	r8, r8, #1
   469c8:	3514      	adds	r5, #20
   469ca:	360c      	adds	r6, #12
   469cc:	e7b3      	b.n	46936 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   469ce:	bf00      	nop
   469d0:	2001b5c0 	.word	0x2001b5c0
   469d4:	e000ed00 	.word	0xe000ed00
   469d8:	2001de2d 	.word	0x2001de2d

000469dc <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   469dc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   469de:	4d0e      	ldr	r5, [pc, #56]	; (46a18 <z_arm_mpu_init+0x3c>)
   469e0:	682c      	ldr	r4, [r5, #0]
   469e2:	2c10      	cmp	r4, #16
   469e4:	d815      	bhi.n	46a12 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   469e6:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   469e8:	f7ff ff88 	bl	468fc <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   469ec:	4b0b      	ldr	r3, [pc, #44]	; (46a1c <z_arm_mpu_init+0x40>)
   469ee:	4a0c      	ldr	r2, [pc, #48]	; (46a20 <z_arm_mpu_init+0x44>)
   469f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   469f4:	4284      	cmp	r4, r0
   469f6:	d105      	bne.n	46a04 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   469f8:	4b0a      	ldr	r3, [pc, #40]	; (46a24 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   469fa:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   469fc:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   469fe:	f7ff ff71 	bl	468e4 <arm_core_mpu_enable>
}
   46a02:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   46a04:	6869      	ldr	r1, [r5, #4]
   46a06:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   46a0a:	f7ff fe7d 	bl	46708 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   46a0e:	3001      	adds	r0, #1
   46a10:	e7f0      	b.n	469f4 <z_arm_mpu_init+0x18>
		return -1;
   46a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46a16:	e7f4      	b.n	46a02 <z_arm_mpu_init+0x26>
   46a18:	0005c1b8 	.word	0x0005c1b8
   46a1c:	e000ed00 	.word	0xe000ed00
   46a20:	0044ffaa 	.word	0x0044ffaa
   46a24:	2001de2d 	.word	0x2001de2d

00046a28 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   46a28:	4b01      	ldr	r3, [pc, #4]	; (46a30 <__stdout_hook_install+0x8>)
   46a2a:	6018      	str	r0, [r3, #0]
}
   46a2c:	4770      	bx	lr
   46a2e:	bf00      	nop
   46a30:	2001a578 	.word	0x2001a578

00046a34 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   46a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46a36:	4606      	mov	r6, r0
   46a38:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   46a3a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   46a3c:	4f06      	ldr	r7, [pc, #24]	; (46a58 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   46a3e:	42ac      	cmp	r4, r5
   46a40:	da08      	bge.n	46a54 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   46a42:	683b      	ldr	r3, [r7, #0]
   46a44:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   46a46:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   46a48:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   46a4a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   46a4e:	d001      	beq.n	46a54 <z_impl_zephyr_read_stdin+0x20>
   46a50:	280d      	cmp	r0, #13
   46a52:	d1f4      	bne.n	46a3e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   46a54:	4620      	mov	r0, r4
   46a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   46a58:	2001a574 	.word	0x2001a574

00046a5c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   46a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46a5e:	460d      	mov	r5, r1
   46a60:	4f09      	ldr	r7, [pc, #36]	; (46a88 <z_impl_zephyr_write_stdout+0x2c>)
   46a62:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   46a64:	f1c0 0401 	rsb	r4, r0, #1
   46a68:	19a3      	adds	r3, r4, r6
   46a6a:	429d      	cmp	r5, r3
   46a6c:	dc01      	bgt.n	46a72 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   46a6e:	4628      	mov	r0, r5
   46a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   46a72:	7873      	ldrb	r3, [r6, #1]
   46a74:	2b0a      	cmp	r3, #10
   46a76:	d102      	bne.n	46a7e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   46a78:	200d      	movs	r0, #13
   46a7a:	683b      	ldr	r3, [r7, #0]
   46a7c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   46a7e:	683b      	ldr	r3, [r7, #0]
   46a80:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   46a84:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   46a86:	e7ef      	b.n	46a68 <z_impl_zephyr_write_stdout+0xc>
   46a88:	2001a578 	.word	0x2001a578

00046a8c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   46a8c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   46a8e:	2105      	movs	r1, #5
   46a90:	4801      	ldr	r0, [pc, #4]	; (46a98 <_exit+0xc>)
   46a92:	f7ff ffe3 	bl	46a5c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   46a96:	e7fe      	b.n	46a96 <_exit+0xa>
   46a98:	0005dcf4 	.word	0x0005dcf4

00046a9c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   46a9c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   46a9e:	4c07      	ldr	r4, [pc, #28]	; (46abc <_sbrk+0x20>)
   46aa0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   46aa2:	18c2      	adds	r2, r0, r3
   46aa4:	4806      	ldr	r0, [pc, #24]	; (46ac0 <_sbrk+0x24>)
   46aa6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   46aaa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   46aae:	428a      	cmp	r2, r1
		heap_sz += count;
   46ab0:	bf36      	itet	cc
   46ab2:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   46ab4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   46ab8:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   46aba:	bd10      	pop	{r4, pc}
   46abc:	2001b5d4 	.word	0x2001b5d4
   46ac0:	20025680 	.word	0x20025680

00046ac4 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   46ac4:	b508      	push	{r3, lr}
   46ac6:	211d      	movs	r1, #29
   46ac8:	4804      	ldr	r0, [pc, #16]	; (46adc <__chk_fail+0x18>)
   46aca:	f7ff ffc7 	bl	46a5c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   46ace:	4040      	eors	r0, r0
   46ad0:	f380 8811 	msr	BASEPRI, r0
   46ad4:	f04f 0003 	mov.w	r0, #3
   46ad8:	df02      	svc	2
	CODE_UNREACHABLE;
   46ada:	bf00      	nop
   46adc:	0005dcfa 	.word	0x0005dcfa

00046ae0 <registry_find>:
static struct registry_entry *registry_find(int type)
{
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
   46ae0:	4b08      	ldr	r3, [pc, #32]	; (46b04 <registry_find+0x24>)
{
   46ae2:	4602      	mov	r2, r0
		if ((ep->fstp != NULL) && (ep->type == type)) {
   46ae4:	6859      	ldr	r1, [r3, #4]
   46ae6:	b111      	cbz	r1, 46aee <registry_find+0xe>
   46ae8:	6819      	ldr	r1, [r3, #0]
   46aea:	4288      	cmp	r0, r1
   46aec:	d007      	beq.n	46afe <registry_find+0x1e>
   46aee:	68d8      	ldr	r0, [r3, #12]
   46af0:	b130      	cbz	r0, 46b00 <registry_find+0x20>
   46af2:	6899      	ldr	r1, [r3, #8]
		struct registry_entry *ep = &registry[i];
   46af4:	4804      	ldr	r0, [pc, #16]	; (46b08 <registry_find+0x28>)
   46af6:	428a      	cmp	r2, r1
   46af8:	bf18      	it	ne
   46afa:	2000      	movne	r0, #0
   46afc:	4770      	bx	lr
   46afe:	4618      	mov	r0, r3
			return ep;
		}
	}
	return NULL;
}
   46b00:	4770      	bx	lr
   46b02:	bf00      	nop
   46b04:	2001b5d8 	.word	0x2001b5d8
   46b08:	2001b5e0 	.word	0x2001b5e0

00046b0c <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   46b0c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   46b0e:	4804      	ldr	r0, [pc, #16]	; (46b20 <fs_init+0x14>)
   46b10:	f013 fe89 	bl	5a826 <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
   46b14:	4b03      	ldr	r3, [pc, #12]	; (46b24 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   46b16:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   46b18:	e9c3 3300 	strd	r3, r3, [r3]
   46b1c:	bd08      	pop	{r3, pc}
   46b1e:	bf00      	nop
   46b20:	2001b5e8 	.word	0x2001b5e8
   46b24:	2001b5fc 	.word	0x2001b5fc

00046b28 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   46b28:	4602      	mov	r2, r0
   46b2a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   46b2c:	4801      	ldr	r0, [pc, #4]	; (46b34 <k_mutex_lock.constprop.0.isra.0+0xc>)
   46b2e:	f00b bcad 	b.w	5248c <z_impl_k_mutex_lock>
   46b32:	bf00      	nop
   46b34:	2001b5e8 	.word	0x2001b5e8

00046b38 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   46b38:	4801      	ldr	r0, [pc, #4]	; (46b40 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   46b3a:	f00b bd21 	b.w	52580 <z_impl_k_mutex_unlock>
   46b3e:	bf00      	nop
   46b40:	2001b5e8 	.word	0x2001b5e8

00046b44 <fs_get_mnt_point>:
{
   46b44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46b48:	4682      	mov	sl, r0
	size_t len, name_len = strlen(name);
   46b4a:	4608      	mov	r0, r1
{
   46b4c:	460e      	mov	r6, r1
   46b4e:	4617      	mov	r7, r2
	size_t len, name_len = strlen(name);
   46b50:	f7fa f950 	bl	40df4 <strlen>
   46b54:	f04f 0900 	mov.w	r9, #0
   46b58:	4683      	mov	fp, r0
	k_mutex_lock(&mutex, K_FOREVER);
   46b5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   46b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46b62:	f7ff ffe1 	bl	46b28 <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
   46b66:	4b1a      	ldr	r3, [pc, #104]	; (46bd0 <fs_get_mnt_point+0x8c>)
   46b68:	46c8      	mov	r8, r9
   46b6a:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   46b6c:	429c      	cmp	r4, r3
   46b6e:	bf08      	it	eq
   46b70:	2400      	moveq	r4, #0
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
   46b72:	b954      	cbnz	r4, 46b8a <fs_get_mnt_point+0x46>
	k_mutex_unlock(&mutex);
   46b74:	f7ff ffe0 	bl	46b38 <k_mutex_unlock.constprop.0.isra.0>
	if (mnt_p == NULL) {
   46b78:	f1b8 0f00 	cmp.w	r8, #0
   46b7c:	d025      	beq.n	46bca <fs_get_mnt_point+0x86>
	*mnt_pntp = mnt_p;
   46b7e:	f8ca 8000 	str.w	r8, [sl]
	if (match_len) {
   46b82:	b9f7      	cbnz	r7, 46bc2 <fs_get_mnt_point+0x7e>
	return 0;
   46b84:	2000      	movs	r0, #0
}
   46b86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = itr->mountp_len;
   46b8a:	69a5      	ldr	r5, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
   46b8c:	45a9      	cmp	r9, r5
   46b8e:	d807      	bhi.n	46ba0 <fs_get_mnt_point+0x5c>
   46b90:	45ab      	cmp	fp, r5
   46b92:	d305      	bcc.n	46ba0 <fs_get_mnt_point+0x5c>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
   46b94:	2d01      	cmp	r5, #1
   46b96:	d90a      	bls.n	46bae <fs_get_mnt_point+0x6a>
   46b98:	5d72      	ldrb	r2, [r6, r5]
   46b9a:	2a2f      	cmp	r2, #47	; 0x2f
   46b9c:	d007      	beq.n	46bae <fs_get_mnt_point+0x6a>
   46b9e:	b132      	cbz	r2, 46bae <fs_get_mnt_point+0x6a>
   46ba0:	464d      	mov	r5, r9
	return (node == list->tail) ? NULL : node->next;
   46ba2:	685a      	ldr	r2, [r3, #4]
   46ba4:	4294      	cmp	r4, r2
   46ba6:	d0e5      	beq.n	46b74 <fs_get_mnt_point+0x30>
   46ba8:	46a9      	mov	r9, r5
   46baa:	6824      	ldr	r4, [r4, #0]
   46bac:	e7e1      	b.n	46b72 <fs_get_mnt_point+0x2e>
		if (strncmp(name, itr->mnt_point, len) == 0) {
   46bae:	462a      	mov	r2, r5
   46bb0:	4630      	mov	r0, r6
   46bb2:	68e1      	ldr	r1, [r4, #12]
   46bb4:	f014 fb5c 	bl	5b270 <strncmp>
   46bb8:	4b05      	ldr	r3, [pc, #20]	; (46bd0 <fs_get_mnt_point+0x8c>)
   46bba:	2800      	cmp	r0, #0
   46bbc:	d1f0      	bne.n	46ba0 <fs_get_mnt_point+0x5c>
   46bbe:	46a0      	mov	r8, r4
   46bc0:	e7ef      	b.n	46ba2 <fs_get_mnt_point+0x5e>
		*match_len = mnt_p->mountp_len;
   46bc2:	f8d8 3018 	ldr.w	r3, [r8, #24]
   46bc6:	603b      	str	r3, [r7, #0]
   46bc8:	e7dc      	b.n	46b84 <fs_get_mnt_point+0x40>
		return -ENOENT;
   46bca:	f06f 0001 	mvn.w	r0, #1
   46bce:	e7da      	b.n	46b86 <fs_get_mnt_point+0x42>
   46bd0:	2001b5fc 	.word	0x2001b5fc

00046bd4 <fs_open>:
{
   46bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46bd8:	4605      	mov	r5, r0
   46bda:	4617      	mov	r7, r2
	if ((file_name == NULL) ||
   46bdc:	460e      	mov	r6, r1
{
   46bde:	b086      	sub	sp, #24
	if ((file_name == NULL) ||
   46be0:	b979      	cbnz	r1, 46c02 <fs_open+0x2e>
		LOG_ERR("invalid file name!!");
   46be2:	4b2e      	ldr	r3, [pc, #184]	; (46c9c <fs_open+0xc8>)
   46be4:	2201      	movs	r2, #1
   46be6:	9302      	str	r3, [sp, #8]
   46be8:	2300      	movs	r3, #0
   46bea:	492d      	ldr	r1, [pc, #180]	; (46ca0 <fs_open+0xcc>)
   46bec:	4618      	mov	r0, r3
   46bee:	e9cd 3300 	strd	r3, r3, [sp]
   46bf2:	f00f fa81 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   46bf6:	f06f 0415 	mvn.w	r4, #21
}
   46bfa:	4620      	mov	r0, r4
   46bfc:	b006      	add	sp, #24
   46bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
   46c02:	4608      	mov	r0, r1
   46c04:	f7fa f8f6 	bl	40df4 <strlen>
	if ((file_name == NULL) ||
   46c08:	2801      	cmp	r0, #1
   46c0a:	d9ea      	bls.n	46be2 <fs_open+0xe>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
   46c0c:	7833      	ldrb	r3, [r6, #0]
   46c0e:	2b2f      	cmp	r3, #47	; 0x2f
   46c10:	d1e7      	bne.n	46be2 <fs_open+0xe>
	if (zfp->mp != NULL) {
   46c12:	f8d5 8004 	ldr.w	r8, [r5, #4]
   46c16:	f1b8 0f00 	cmp.w	r8, #0
   46c1a:	d136      	bne.n	46c8a <fs_open+0xb6>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
   46c1c:	4642      	mov	r2, r8
   46c1e:	4631      	mov	r1, r6
   46c20:	a805      	add	r0, sp, #20
   46c22:	f7ff ff8f 	bl	46b44 <fs_get_mnt_point>
	if (rc < 0) {
   46c26:	1e04      	subs	r4, r0, #0
   46c28:	da0b      	bge.n	46c42 <fs_open+0x6e>
		LOG_ERR("mount point not found!!");
   46c2a:	4b1e      	ldr	r3, [pc, #120]	; (46ca4 <fs_open+0xd0>)
   46c2c:	2201      	movs	r2, #1
   46c2e:	e9cd 8301 	strd	r8, r3, [sp, #4]
   46c32:	4640      	mov	r0, r8
   46c34:	4643      	mov	r3, r8
   46c36:	491a      	ldr	r1, [pc, #104]	; (46ca0 <fs_open+0xcc>)
   46c38:	f8cd 8000 	str.w	r8, [sp]
   46c3c:	f00f fa5c 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
		return rc;
   46c40:	e7db      	b.n	46bfa <fs_open+0x26>
	if (((mp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) &&
   46c42:	9b05      	ldr	r3, [sp, #20]
   46c44:	f893 2020 	ldrb.w	r2, [r3, #32]
   46c48:	0792      	lsls	r2, r2, #30
   46c4a:	d502      	bpl.n	46c52 <fs_open+0x7e>
   46c4c:	f017 0f12 	tst.w	r7, #18
   46c50:	d11e      	bne.n	46c90 <fs_open+0xbc>
	CHECKIF(mp->fs->open == NULL) {
   46c52:	69da      	ldr	r2, [r3, #28]
   46c54:	6812      	ldr	r2, [r2, #0]
   46c56:	b1f2      	cbz	r2, 46c96 <fs_open+0xc2>
	zfp->mp = mp;
   46c58:	606b      	str	r3, [r5, #4]
	rc = mp->fs->open(zfp, file_name, flags);
   46c5a:	69db      	ldr	r3, [r3, #28]
   46c5c:	463a      	mov	r2, r7
   46c5e:	4631      	mov	r1, r6
   46c60:	4628      	mov	r0, r5
   46c62:	681b      	ldr	r3, [r3, #0]
   46c64:	4798      	blx	r3
	if (rc < 0) {
   46c66:	1e04      	subs	r4, r0, #0
   46c68:	da0d      	bge.n	46c86 <fs_open+0xb2>
		LOG_ERR("file open error (%d)", rc);
   46c6a:	2600      	movs	r6, #0
   46c6c:	4b0e      	ldr	r3, [pc, #56]	; (46ca8 <fs_open+0xd4>)
   46c6e:	2201      	movs	r2, #1
   46c70:	9302      	str	r3, [sp, #8]
   46c72:	4630      	mov	r0, r6
   46c74:	4633      	mov	r3, r6
   46c76:	e9cd 6600 	strd	r6, r6, [sp]
   46c7a:	4909      	ldr	r1, [pc, #36]	; (46ca0 <fs_open+0xcc>)
   46c7c:	9403      	str	r4, [sp, #12]
   46c7e:	f00f fa3b 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
		zfp->mp = NULL;
   46c82:	606e      	str	r6, [r5, #4]
		return rc;
   46c84:	e7b9      	b.n	46bfa <fs_open+0x26>
	zfp->flags = flags;
   46c86:	722f      	strb	r7, [r5, #8]
	return rc;
   46c88:	e7b7      	b.n	46bfa <fs_open+0x26>
		return -EBUSY;
   46c8a:	f06f 040f 	mvn.w	r4, #15
   46c8e:	e7b4      	b.n	46bfa <fs_open+0x26>
		return -EROFS;
   46c90:	f06f 041d 	mvn.w	r4, #29
   46c94:	e7b1      	b.n	46bfa <fs_open+0x26>
		return -ENOTSUP;
   46c96:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46c9a:	e7ae      	b.n	46bfa <fs_open+0x26>
   46c9c:	0005dd27 	.word	0x0005dd27
   46ca0:	0005bee4 	.word	0x0005bee4
   46ca4:	0005dd3b 	.word	0x0005dd3b
   46ca8:	0005dd53 	.word	0x0005dd53

00046cac <fs_close>:
{
   46cac:	b530      	push	{r4, r5, lr}
	if (zfp->mp == NULL) {
   46cae:	6844      	ldr	r4, [r0, #4]
{
   46cb0:	4605      	mov	r5, r0
   46cb2:	b085      	sub	sp, #20
	if (zfp->mp == NULL) {
   46cb4:	b18c      	cbz	r4, 46cda <fs_close+0x2e>
	CHECKIF(zfp->mp->fs->close == NULL) {
   46cb6:	69e3      	ldr	r3, [r4, #28]
   46cb8:	69db      	ldr	r3, [r3, #28]
   46cba:	b19b      	cbz	r3, 46ce4 <fs_close+0x38>
	rc = zfp->mp->fs->close(zfp);
   46cbc:	4798      	blx	r3
	if (rc < 0) {
   46cbe:	1e04      	subs	r4, r0, #0
   46cc0:	f04f 0300 	mov.w	r3, #0
   46cc4:	da0c      	bge.n	46ce0 <fs_close+0x34>
		LOG_ERR("file close error (%d)", rc);
   46cc6:	4a09      	ldr	r2, [pc, #36]	; (46cec <fs_close+0x40>)
   46cc8:	4618      	mov	r0, r3
   46cca:	e9cd 3201 	strd	r3, r2, [sp, #4]
   46cce:	4908      	ldr	r1, [pc, #32]	; (46cf0 <fs_close+0x44>)
   46cd0:	2201      	movs	r2, #1
   46cd2:	9403      	str	r4, [sp, #12]
   46cd4:	9300      	str	r3, [sp, #0]
   46cd6:	f00f fa0f 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
}
   46cda:	4620      	mov	r0, r4
   46cdc:	b005      	add	sp, #20
   46cde:	bd30      	pop	{r4, r5, pc}
	zfp->mp = NULL;
   46ce0:	606b      	str	r3, [r5, #4]
	return rc;
   46ce2:	e7fa      	b.n	46cda <fs_close+0x2e>
		return -ENOTSUP;
   46ce4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46ce8:	e7f7      	b.n	46cda <fs_close+0x2e>
   46cea:	bf00      	nop
   46cec:	0005dd68 	.word	0x0005dd68
   46cf0:	0005bee4 	.word	0x0005bee4

00046cf4 <fs_write>:
{
   46cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (zfp->mp == NULL) {
   46cf6:	6843      	ldr	r3, [r0, #4]
   46cf8:	b19b      	cbz	r3, 46d22 <fs_write+0x2e>
	CHECKIF(zfp->mp->fs->write == NULL) {
   46cfa:	69db      	ldr	r3, [r3, #28]
   46cfc:	689b      	ldr	r3, [r3, #8]
   46cfe:	b19b      	cbz	r3, 46d28 <fs_write+0x34>
	rc = zfp->mp->fs->write(zfp, ptr, size);
   46d00:	4798      	blx	r3
	if (rc < 0) {
   46d02:	1e04      	subs	r4, r0, #0
   46d04:	da0a      	bge.n	46d1c <fs_write+0x28>
		LOG_ERR("file write error (%d)", rc);
   46d06:	4b0a      	ldr	r3, [pc, #40]	; (46d30 <fs_write+0x3c>)
   46d08:	2201      	movs	r2, #1
   46d0a:	9302      	str	r3, [sp, #8]
   46d0c:	2300      	movs	r3, #0
   46d0e:	4909      	ldr	r1, [pc, #36]	; (46d34 <fs_write+0x40>)
   46d10:	4618      	mov	r0, r3
   46d12:	e9cd 3300 	strd	r3, r3, [sp]
   46d16:	9403      	str	r4, [sp, #12]
   46d18:	f00f f9ee 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
}
   46d1c:	4620      	mov	r0, r4
   46d1e:	b004      	add	sp, #16
   46d20:	bd10      	pop	{r4, pc}
		return -EBADF;
   46d22:	f06f 0408 	mvn.w	r4, #8
   46d26:	e7f9      	b.n	46d1c <fs_write+0x28>
		return -ENOTSUP;
   46d28:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46d2c:	e7f6      	b.n	46d1c <fs_write+0x28>
   46d2e:	bf00      	nop
   46d30:	0005dd7e 	.word	0x0005dd7e
   46d34:	0005bee4 	.word	0x0005bee4

00046d38 <fs_opendir>:
{
   46d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   46d3a:	4606      	mov	r6, r0
	if ((abs_path == NULL) ||
   46d3c:	460f      	mov	r7, r1
{
   46d3e:	b087      	sub	sp, #28
	if ((abs_path == NULL) ||
   46d40:	b971      	cbnz	r1, 46d60 <fs_opendir+0x28>
		LOG_ERR("invalid directory name!!");
   46d42:	4b33      	ldr	r3, [pc, #204]	; (46e10 <fs_opendir+0xd8>)
   46d44:	2201      	movs	r2, #1
   46d46:	9302      	str	r3, [sp, #8]
   46d48:	2300      	movs	r3, #0
   46d4a:	4932      	ldr	r1, [pc, #200]	; (46e14 <fs_opendir+0xdc>)
   46d4c:	4618      	mov	r0, r3
   46d4e:	e9cd 3300 	strd	r3, r3, [sp]
   46d52:	f00f f9d1 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   46d56:	f06f 0415 	mvn.w	r4, #21
}
   46d5a:	4620      	mov	r0, r4
   46d5c:	b007      	add	sp, #28
   46d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
   46d60:	4608      	mov	r0, r1
   46d62:	f7fa f847 	bl	40df4 <strlen>
	if ((abs_path == NULL) ||
   46d66:	2800      	cmp	r0, #0
   46d68:	d0eb      	beq.n	46d42 <fs_opendir+0xa>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
   46d6a:	783b      	ldrb	r3, [r7, #0]
   46d6c:	2b2f      	cmp	r3, #47	; 0x2f
   46d6e:	d1e8      	bne.n	46d42 <fs_opendir+0xa>
	if (zdp->mp != NULL || zdp->dirp != NULL) {
   46d70:	6873      	ldr	r3, [r6, #4]
   46d72:	2b00      	cmp	r3, #0
   46d74:	d145      	bne.n	46e02 <fs_opendir+0xca>
   46d76:	6835      	ldr	r5, [r6, #0]
   46d78:	2d00      	cmp	r5, #0
   46d7a:	d142      	bne.n	46e02 <fs_opendir+0xca>
	if (strcmp(abs_path, "/") == 0) {
   46d7c:	4638      	mov	r0, r7
   46d7e:	4926      	ldr	r1, [pc, #152]	; (46e18 <fs_opendir+0xe0>)
   46d80:	f7fa f82e 	bl	40de0 <strcmp>
   46d84:	4604      	mov	r4, r0
   46d86:	b980      	cbnz	r0, 46daa <fs_opendir+0x72>
		k_mutex_lock(&mutex, K_FOREVER);
   46d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   46d90:	f7ff feca 	bl	46b28 <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
   46d94:	4a21      	ldr	r2, [pc, #132]	; (46e1c <fs_opendir+0xe4>)
		zdp->mp = NULL;
   46d96:	6074      	str	r4, [r6, #4]
   46d98:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   46d9a:	4293      	cmp	r3, r2
   46d9c:	bf14      	ite	ne
   46d9e:	461d      	movne	r5, r3
   46da0:	4625      	moveq	r5, r4
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
   46da2:	6035      	str	r5, [r6, #0]
		k_mutex_unlock(&mutex);
   46da4:	f7ff fec8 	bl	46b38 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   46da8:	e7d7      	b.n	46d5a <fs_opendir+0x22>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
   46daa:	462a      	mov	r2, r5
   46dac:	4639      	mov	r1, r7
   46dae:	a805      	add	r0, sp, #20
   46db0:	f7ff fec8 	bl	46b44 <fs_get_mnt_point>
	if (rc < 0) {
   46db4:	1e04      	subs	r4, r0, #0
   46db6:	da0a      	bge.n	46dce <fs_opendir+0x96>
		LOG_ERR("mount point not found!!");
   46db8:	4b19      	ldr	r3, [pc, #100]	; (46e20 <fs_opendir+0xe8>)
   46dba:	2201      	movs	r2, #1
   46dbc:	e9cd 5301 	strd	r5, r3, [sp, #4]
   46dc0:	4628      	mov	r0, r5
   46dc2:	462b      	mov	r3, r5
   46dc4:	4913      	ldr	r1, [pc, #76]	; (46e14 <fs_opendir+0xdc>)
   46dc6:	9500      	str	r5, [sp, #0]
   46dc8:	f00f f996 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
		return rc;
   46dcc:	e7c5      	b.n	46d5a <fs_opendir+0x22>
	CHECKIF(mp->fs->opendir == NULL) {
   46dce:	9b05      	ldr	r3, [sp, #20]
   46dd0:	69da      	ldr	r2, [r3, #28]
   46dd2:	6a12      	ldr	r2, [r2, #32]
   46dd4:	b1c2      	cbz	r2, 46e08 <fs_opendir+0xd0>
	zdp->mp = mp;
   46dd6:	6073      	str	r3, [r6, #4]
	rc = zdp->mp->fs->opendir(zdp, abs_path);
   46dd8:	69db      	ldr	r3, [r3, #28]
   46dda:	4639      	mov	r1, r7
   46ddc:	4630      	mov	r0, r6
   46dde:	6a1b      	ldr	r3, [r3, #32]
   46de0:	4798      	blx	r3
	if (rc < 0) {
   46de2:	1e04      	subs	r4, r0, #0
   46de4:	dab9      	bge.n	46d5a <fs_opendir+0x22>
		LOG_ERR("directory open error (%d)", rc);
   46de6:	4b0f      	ldr	r3, [pc, #60]	; (46e24 <fs_opendir+0xec>)
		zdp->dirp = NULL;
   46de8:	e9c6 5500 	strd	r5, r5, [r6]
		LOG_ERR("directory open error (%d)", rc);
   46dec:	2201      	movs	r2, #1
   46dee:	e9cd 5301 	strd	r5, r3, [sp, #4]
   46df2:	4628      	mov	r0, r5
   46df4:	462b      	mov	r3, r5
   46df6:	4907      	ldr	r1, [pc, #28]	; (46e14 <fs_opendir+0xdc>)
   46df8:	9403      	str	r4, [sp, #12]
   46dfa:	9500      	str	r5, [sp, #0]
   46dfc:	f00f f97c 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
   46e00:	e7ab      	b.n	46d5a <fs_opendir+0x22>
		return -EBUSY;
   46e02:	f06f 040f 	mvn.w	r4, #15
   46e06:	e7a8      	b.n	46d5a <fs_opendir+0x22>
		return -ENOTSUP;
   46e08:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46e0c:	e7a5      	b.n	46d5a <fs_opendir+0x22>
   46e0e:	bf00      	nop
   46e10:	0005dd94 	.word	0x0005dd94
   46e14:	0005bee4 	.word	0x0005bee4
   46e18:	0005d769 	.word	0x0005d769
   46e1c:	2001b5fc 	.word	0x2001b5fc
   46e20:	0005dd3b 	.word	0x0005dd3b
   46e24:	0005ddad 	.word	0x0005ddad

00046e28 <fs_readdir>:
{
   46e28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (zdp->mp) {
   46e2c:	6847      	ldr	r7, [r0, #4]
{
   46e2e:	4606      	mov	r6, r0
   46e30:	460d      	mov	r5, r1
	if (zdp->mp) {
   46e32:	2f00      	cmp	r7, #0
   46e34:	d02f      	beq.n	46e96 <fs_readdir+0x6e>
		CHECKIF(zdp->mp->fs->readdir == NULL) {
   46e36:	69fb      	ldr	r3, [r7, #28]
   46e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   46e3a:	2b00      	cmp	r3, #0
   46e3c:	d063      	beq.n	46f06 <fs_readdir+0xde>
			if ((strcmp(entry->name, ".") != 0)
   46e3e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 46f18 <fs_readdir+0xf0>
   46e42:	1c4f      	adds	r7, r1, #1
			rc = zdp->mp->fs->readdir(zdp, entry);
   46e44:	6873      	ldr	r3, [r6, #4]
   46e46:	4629      	mov	r1, r5
   46e48:	69db      	ldr	r3, [r3, #28]
   46e4a:	4630      	mov	r0, r6
   46e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   46e4e:	4798      	blx	r3
			if (rc < 0) {
   46e50:	1e04      	subs	r4, r0, #0
   46e52:	db14      	blt.n	46e7e <fs_readdir+0x56>
			if (entry->name[0] == 0) {
   46e54:	786b      	ldrb	r3, [r5, #1]
   46e56:	b173      	cbz	r3, 46e76 <fs_readdir+0x4e>
			if (entry->type != FS_DIR_ENTRY_DIR) {
   46e58:	782b      	ldrb	r3, [r5, #0]
   46e5a:	2b01      	cmp	r3, #1
   46e5c:	d10b      	bne.n	46e76 <fs_readdir+0x4e>
			if ((strcmp(entry->name, ".") != 0)
   46e5e:	4641      	mov	r1, r8
   46e60:	4638      	mov	r0, r7
   46e62:	f7f9 ffbd 	bl	40de0 <strcmp>
   46e66:	2800      	cmp	r0, #0
   46e68:	d0ec      	beq.n	46e44 <fs_readdir+0x1c>
			    && (strcmp(entry->name, "..") != 0)) {
   46e6a:	4638      	mov	r0, r7
   46e6c:	4927      	ldr	r1, [pc, #156]	; (46f0c <fs_readdir+0xe4>)
   46e6e:	f7f9 ffb7 	bl	40de0 <strcmp>
   46e72:	2800      	cmp	r0, #0
   46e74:	d0e6      	beq.n	46e44 <fs_readdir+0x1c>
}
   46e76:	4620      	mov	r0, r4
   46e78:	b004      	add	sp, #16
   46e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERR("directory read error (%d)", rc);
   46e7e:	4b24      	ldr	r3, [pc, #144]	; (46f10 <fs_readdir+0xe8>)
   46e80:	2201      	movs	r2, #1
   46e82:	9302      	str	r3, [sp, #8]
   46e84:	2300      	movs	r3, #0
   46e86:	4923      	ldr	r1, [pc, #140]	; (46f14 <fs_readdir+0xec>)
   46e88:	4618      	mov	r0, r3
   46e8a:	e9cd 3300 	strd	r3, r3, [sp]
   46e8e:	9403      	str	r4, [sp, #12]
   46e90:	f00f f932 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
   46e94:	e7ef      	b.n	46e76 <fs_readdir+0x4e>
	if (zdp->dirp == NULL) {
   46e96:	6803      	ldr	r3, [r0, #0]
   46e98:	b913      	cbnz	r3, 46ea0 <fs_readdir+0x78>
		entry->name[0] = 0;
   46e9a:	704b      	strb	r3, [r1, #1]
		return 0;
   46e9c:	2400      	movs	r4, #0
   46e9e:	e7ea      	b.n	46e76 <fs_readdir+0x4e>
	return list->head == list;
   46ea0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 46f1c <fs_readdir+0xf4>
	k_mutex_lock(&mutex, K_FOREVER);
   46ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   46eac:	f7ff fe3c 	bl	46b28 <k_mutex_lock.constprop.0.isra.0>
   46eb0:	f8d8 4000 	ldr.w	r4, [r8]
	return (node == list->tail) ? NULL : node->next;
   46eb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   46eb8:	4544      	cmp	r4, r8
   46eba:	bf08      	it	eq
   46ebc:	2400      	moveq	r4, #0
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
   46ebe:	b924      	cbnz	r4, 46eca <fs_readdir+0xa2>
	k_mutex_unlock(&mutex);
   46ec0:	f7ff fe3a 	bl	46b38 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOENT;
   46ec4:	f06f 0401 	mvn.w	r4, #1
   46ec8:	e7d5      	b.n	46e76 <fs_readdir+0x4e>
		if (node == zdp->dirp) {
   46eca:	6832      	ldr	r2, [r6, #0]
   46ecc:	42a2      	cmp	r2, r4
   46ece:	d116      	bne.n	46efe <fs_readdir+0xd6>
			entry->type = FS_DIR_ENTRY_DIR;
   46ed0:	2301      	movs	r3, #1
   46ed2:	4628      	mov	r0, r5
   46ed4:	f800 3b01 	strb.w	r3, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
   46ed8:	68e1      	ldr	r1, [r4, #12]
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   46eda:	22ff      	movs	r2, #255	; 0xff
   46edc:	4419      	add	r1, r3
   46ede:	f014 f9d9 	bl	5b294 <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
   46ee2:	2300      	movs	r3, #0
   46ee4:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
			entry->size = 0;
   46ee8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
	return (node == list->tail) ? NULL : node->next;
   46eec:	f8d8 3004 	ldr.w	r3, [r8, #4]
   46ef0:	429c      	cmp	r4, r3
   46ef2:	bf18      	it	ne
   46ef4:	6827      	ldrne	r7, [r4, #0]
	k_mutex_unlock(&mutex);
   46ef6:	f7ff fe1f 	bl	46b38 <k_mutex_unlock.constprop.0.isra.0>
	zdp->dirp = next;
   46efa:	6037      	str	r7, [r6, #0]
	return 0;
   46efc:	e7ce      	b.n	46e9c <fs_readdir+0x74>
   46efe:	429c      	cmp	r4, r3
   46f00:	d0de      	beq.n	46ec0 <fs_readdir+0x98>
   46f02:	6824      	ldr	r4, [r4, #0]
   46f04:	e7db      	b.n	46ebe <fs_readdir+0x96>
			return  -ENOTSUP;
   46f06:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46f0a:	e7b4      	b.n	46e76 <fs_readdir+0x4e>
   46f0c:	0005d50b 	.word	0x0005d50b
   46f10:	0005ddc7 	.word	0x0005ddc7
   46f14:	0005bee4 	.word	0x0005bee4
   46f18:	0005d50c 	.word	0x0005d50c
   46f1c:	2001b5fc 	.word	0x2001b5fc

00046f20 <fs_closedir>:
{
   46f20:	b530      	push	{r4, r5, lr}
	if (zdp->mp == NULL) {
   46f22:	6844      	ldr	r4, [r0, #4]
{
   46f24:	4605      	mov	r5, r0
   46f26:	b085      	sub	sp, #20
	if (zdp->mp == NULL) {
   46f28:	b91c      	cbnz	r4, 46f32 <fs_closedir+0x12>
		zdp->dirp = NULL;
   46f2a:	6004      	str	r4, [r0, #0]
}
   46f2c:	4620      	mov	r0, r4
   46f2e:	b005      	add	sp, #20
   46f30:	bd30      	pop	{r4, r5, pc}
	CHECKIF(zdp->mp->fs->closedir == NULL) {
   46f32:	69e3      	ldr	r3, [r4, #28]
   46f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   46f36:	b193      	cbz	r3, 46f5e <fs_closedir+0x3e>
	rc = zdp->mp->fs->closedir(zdp);
   46f38:	4798      	blx	r3
	if (rc < 0) {
   46f3a:	1e04      	subs	r4, r0, #0
   46f3c:	f04f 0300 	mov.w	r3, #0
   46f40:	da0a      	bge.n	46f58 <fs_closedir+0x38>
		LOG_ERR("directory close error (%d)", rc);
   46f42:	4a08      	ldr	r2, [pc, #32]	; (46f64 <fs_closedir+0x44>)
   46f44:	4618      	mov	r0, r3
   46f46:	e9cd 3201 	strd	r3, r2, [sp, #4]
   46f4a:	4907      	ldr	r1, [pc, #28]	; (46f68 <fs_closedir+0x48>)
   46f4c:	2201      	movs	r2, #1
   46f4e:	9403      	str	r4, [sp, #12]
   46f50:	9300      	str	r3, [sp, #0]
   46f52:	f00f f8d1 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
		return rc;
   46f56:	e7e9      	b.n	46f2c <fs_closedir+0xc>
	zdp->dirp = NULL;
   46f58:	e9c5 3300 	strd	r3, r3, [r5]
	return rc;
   46f5c:	e7e6      	b.n	46f2c <fs_closedir+0xc>
		return -ENOTSUP;
   46f5e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46f62:	e7e3      	b.n	46f2c <fs_closedir+0xc>
   46f64:	0005dde1 	.word	0x0005dde1
   46f68:	0005bee4 	.word	0x0005bee4

00046f6c <fs_mount>:
{
   46f6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
   46f70:	4604      	mov	r4, r0
   46f72:	b108      	cbz	r0, 46f78 <fs_mount+0xc>
   46f74:	68c0      	ldr	r0, [r0, #12]
   46f76:	b960      	cbnz	r0, 46f92 <fs_mount+0x26>
		LOG_ERR("mount point not initialized!!");
   46f78:	4b50      	ldr	r3, [pc, #320]	; (470bc <fs_mount+0x150>)
		LOG_ERR("invalid mount point!!");
   46f7a:	9302      	str	r3, [sp, #8]
   46f7c:	2300      	movs	r3, #0
   46f7e:	2201      	movs	r2, #1
   46f80:	4618      	mov	r0, r3
   46f82:	e9cd 3300 	strd	r3, r3, [sp]
   46f86:	494e      	ldr	r1, [pc, #312]	; (470c0 <fs_mount+0x154>)
   46f88:	f00f f8b6 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   46f8c:	f06f 0515 	mvn.w	r5, #21
   46f90:	e00d      	b.n	46fae <fs_mount+0x42>
	if (sys_dnode_is_linked(&mp->node)) {
   46f92:	6823      	ldr	r3, [r4, #0]
   46f94:	b17b      	cbz	r3, 46fb6 <fs_mount+0x4a>
		LOG_ERR("file system already mounted!!");
   46f96:	4b4b      	ldr	r3, [pc, #300]	; (470c4 <fs_mount+0x158>)
   46f98:	2201      	movs	r2, #1
   46f9a:	9302      	str	r3, [sp, #8]
   46f9c:	2300      	movs	r3, #0
   46f9e:	4948      	ldr	r1, [pc, #288]	; (470c0 <fs_mount+0x154>)
   46fa0:	4618      	mov	r0, r3
   46fa2:	e9cd 3300 	strd	r3, r3, [sp]
   46fa6:	f00f f8a7 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
		return -EBUSY;
   46faa:	f06f 050f 	mvn.w	r5, #15
}
   46fae:	4628      	mov	r0, r5
   46fb0:	b004      	add	sp, #16
   46fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = strlen(mp->mnt_point);
   46fb6:	f7f9 ff1d 	bl	40df4 <strlen>
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
   46fba:	2801      	cmp	r0, #1
	len = strlen(mp->mnt_point);
   46fbc:	4607      	mov	r7, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
   46fbe:	d903      	bls.n	46fc8 <fs_mount+0x5c>
   46fc0:	68e3      	ldr	r3, [r4, #12]
   46fc2:	781b      	ldrb	r3, [r3, #0]
   46fc4:	2b2f      	cmp	r3, #47	; 0x2f
   46fc6:	d001      	beq.n	46fcc <fs_mount+0x60>
		LOG_ERR("invalid mount point!!");
   46fc8:	4b3f      	ldr	r3, [pc, #252]	; (470c8 <fs_mount+0x15c>)
   46fca:	e7d6      	b.n	46f7a <fs_mount+0xe>
	return list->head == list;
   46fcc:	4e3f      	ldr	r6, [pc, #252]	; (470cc <fs_mount+0x160>)
	k_mutex_lock(&mutex, K_FOREVER);
   46fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46fd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   46fd6:	f7ff fda7 	bl	46b28 <k_mutex_lock.constprop.0.isra.0>
   46fda:	6835      	ldr	r5, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   46fdc:	42b5      	cmp	r5, r6
   46fde:	d11a      	bne.n	47016 <fs_mount+0xaa>
	fs = fs_type_get(mp->type);
   46fe0:	68a5      	ldr	r5, [r4, #8]
	struct registry_entry *ep = registry_find(type);
   46fe2:	4628      	mov	r0, r5
   46fe4:	f7ff fd7c 	bl	46ae0 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   46fe8:	b120      	cbz	r0, 46ff4 <fs_mount+0x88>
   46fea:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (fs == NULL) {
   46fee:	f1b8 0f00 	cmp.w	r8, #0
   46ff2:	d12a      	bne.n	4704a <fs_mount+0xde>
		LOG_ERR("requested file system type not registered!!");
   46ff4:	4b36      	ldr	r3, [pc, #216]	; (470d0 <fs_mount+0x164>)
   46ff6:	2201      	movs	r2, #1
   46ff8:	9302      	str	r3, [sp, #8]
   46ffa:	2300      	movs	r3, #0
   46ffc:	4930      	ldr	r1, [pc, #192]	; (470c0 <fs_mount+0x154>)
   46ffe:	4618      	mov	r0, r3
   47000:	e9cd 3300 	strd	r3, r3, [sp]
   47004:	f00f f878 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
		rc = -ENOENT;
   47008:	f06f 0501 	mvn.w	r5, #1
		goto mount_err;
   4700c:	e01a      	b.n	47044 <fs_mount+0xd8>
	return (node == list->tail) ? NULL : node->next;
   4700e:	6873      	ldr	r3, [r6, #4]
   47010:	429d      	cmp	r5, r3
   47012:	d0e5      	beq.n	46fe0 <fs_mount+0x74>
   47014:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
   47016:	2d00      	cmp	r5, #0
   47018:	d0e2      	beq.n	46fe0 <fs_mount+0x74>
		if (len != itr->mountp_len) {
   4701a:	69ab      	ldr	r3, [r5, #24]
   4701c:	42bb      	cmp	r3, r7
   4701e:	d1f6      	bne.n	4700e <fs_mount+0xa2>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
   47020:	463a      	mov	r2, r7
   47022:	68e9      	ldr	r1, [r5, #12]
   47024:	68e0      	ldr	r0, [r4, #12]
   47026:	f014 f923 	bl	5b270 <strncmp>
   4702a:	4603      	mov	r3, r0
   4702c:	2800      	cmp	r0, #0
   4702e:	d1ee      	bne.n	4700e <fs_mount+0xa2>
			LOG_ERR("mount point already exists!!");
   47030:	4a28      	ldr	r2, [pc, #160]	; (470d4 <fs_mount+0x168>)
   47032:	4923      	ldr	r1, [pc, #140]	; (470c0 <fs_mount+0x154>)
   47034:	e9cd 0201 	strd	r0, r2, [sp, #4]
   47038:	9000      	str	r0, [sp, #0]
   4703a:	2201      	movs	r2, #1
   4703c:	f00f f85c 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
			rc = -EBUSY;
   47040:	f06f 050f 	mvn.w	r5, #15
	k_mutex_unlock(&mutex);
   47044:	f7ff fd78 	bl	46b38 <k_mutex_unlock.constprop.0.isra.0>
	return rc;
   47048:	e7b1      	b.n	46fae <fs_mount+0x42>
	CHECKIF(fs->mount == NULL) {
   4704a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   4704e:	b963      	cbnz	r3, 4706a <fs_mount+0xfe>
		LOG_ERR("fs type %d does not support mounting", mp->type);
   47050:	4a21      	ldr	r2, [pc, #132]	; (470d8 <fs_mount+0x16c>)
   47052:	9503      	str	r5, [sp, #12]
   47054:	e9cd 3201 	strd	r3, r2, [sp, #4]
   47058:	4618      	mov	r0, r3
   4705a:	2201      	movs	r2, #1
   4705c:	4918      	ldr	r1, [pc, #96]	; (470c0 <fs_mount+0x154>)
   4705e:	9300      	str	r3, [sp, #0]
   47060:	f00f f84a 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
		rc = -ENOTSUP;
   47064:	f06f 0585 	mvn.w	r5, #133	; 0x85
		goto mount_err;
   47068:	e7ec      	b.n	47044 <fs_mount+0xd8>
	if (fs->unmount == NULL) {
   4706a:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
   4706e:	b953      	cbnz	r3, 47086 <fs_mount+0x11a>
		LOG_WRN("mount path %s is not unmountable",
   47070:	68e2      	ldr	r2, [r4, #12]
   47072:	4618      	mov	r0, r3
   47074:	9203      	str	r2, [sp, #12]
   47076:	4a19      	ldr	r2, [pc, #100]	; (470dc <fs_mount+0x170>)
   47078:	4911      	ldr	r1, [pc, #68]	; (470c0 <fs_mount+0x154>)
   4707a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4707e:	9300      	str	r3, [sp, #0]
   47080:	2202      	movs	r2, #2
   47082:	f00f f839 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
	rc = fs->mount(mp);
   47086:	4620      	mov	r0, r4
   47088:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   4708c:	4798      	blx	r3
	if (rc < 0) {
   4708e:	1e05      	subs	r5, r0, #0
   47090:	da0b      	bge.n	470aa <fs_mount+0x13e>
		LOG_ERR("fs mount error (%d)", rc);
   47092:	4b13      	ldr	r3, [pc, #76]	; (470e0 <fs_mount+0x174>)
   47094:	2201      	movs	r2, #1
   47096:	9302      	str	r3, [sp, #8]
   47098:	2300      	movs	r3, #0
   4709a:	4909      	ldr	r1, [pc, #36]	; (470c0 <fs_mount+0x154>)
   4709c:	4618      	mov	r0, r3
   4709e:	e9cd 3300 	strd	r3, r3, [sp]
   470a2:	9503      	str	r5, [sp, #12]
   470a4:	f00f f828 	bl	560f8 <z_log_msg_runtime_create.constprop.0>
		goto mount_err;
   470a8:	e7cc      	b.n	47044 <fs_mount+0xd8>
	sys_dnode_t *const tail = list->tail;
   470aa:	6873      	ldr	r3, [r6, #4]
	mp->fs = fs;
   470ac:	e9c4 7806 	strd	r7, r8, [r4, #24]
	node->prev = tail;
   470b0:	e9c4 6300 	strd	r6, r3, [r4]
	tail->next = node;
   470b4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   470b6:	6074      	str	r4, [r6, #4]
	LOG_DBG("fs mounted at %s", mp->mnt_point);
   470b8:	e7c4      	b.n	47044 <fs_mount+0xd8>
   470ba:	bf00      	nop
   470bc:	0005ddfc 	.word	0x0005ddfc
   470c0:	0005bee4 	.word	0x0005bee4
   470c4:	0005de1a 	.word	0x0005de1a
   470c8:	0005de38 	.word	0x0005de38
   470cc:	2001b5fc 	.word	0x2001b5fc
   470d0:	0005de6b 	.word	0x0005de6b
   470d4:	0005de4e 	.word	0x0005de4e
   470d8:	0005de97 	.word	0x0005de97
   470dc:	0005debc 	.word	0x0005debc
   470e0:	0005dedd 	.word	0x0005dedd

000470e4 <fs_register>:
{
   470e4:	b538      	push	{r3, r4, r5, lr}
   470e6:	4604      	mov	r4, r0
   470e8:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
   470ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   470ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   470f2:	f7ff fd19 	bl	46b28 <k_mutex_lock.constprop.0.isra.0>
	struct registry_entry *ep = registry_find(type);
   470f6:	4620      	mov	r0, r4
   470f8:	f7ff fcf2 	bl	46ae0 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   470fc:	b108      	cbz	r0, 47102 <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
   470fe:	6843      	ldr	r3, [r0, #4]
   47100:	b97b      	cbnz	r3, 47122 <fs_register+0x3e>
		if (ep->fstp == NULL) {
   47102:	4b0b      	ldr	r3, [pc, #44]	; (47130 <fs_register+0x4c>)
   47104:	685a      	ldr	r2, [r3, #4]
   47106:	b112      	cbz	r2, 4710e <fs_register+0x2a>
   47108:	68da      	ldr	r2, [r3, #12]
   4710a:	b96a      	cbnz	r2, 47128 <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
   4710c:	2201      	movs	r2, #1
			ep->type = type;
   4710e:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			rv = 0;
   47112:	2400      	movs	r4, #0
			ep->fstp = fstp;
   47114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   47118:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
   4711a:	f7ff fd0d 	bl	46b38 <k_mutex_unlock.constprop.0.isra.0>
}
   4711e:	4620      	mov	r0, r4
   47120:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
   47122:	f06f 0477 	mvn.w	r4, #119	; 0x77
   47126:	e7f8      	b.n	4711a <fs_register+0x36>
	int rv = -ENOSPC;
   47128:	f06f 041b 	mvn.w	r4, #27
   4712c:	e7f5      	b.n	4711a <fs_register+0x36>
   4712e:	bf00      	nop
   47130:	2001b5d8 	.word	0x2001b5d8

00047134 <translate_error>:
K_MEM_SLAB_DEFINE(fatfs_filep_pool, sizeof(FIL),
			CONFIG_FS_FATFS_NUM_FILES, 4);

static int translate_error(int error)
{
	switch (error) {
   47134:	2813      	cmp	r0, #19
   47136:	bfda      	itte	le
   47138:	4b02      	ldrle	r3, [pc, #8]	; (47144 <translate_error+0x10>)
   4713a:	5618      	ldrsble	r0, [r3, r0]
{
   4713c:	f06f 0004 	mvngt.w	r0, #4
	case FR_NOT_READY:
		return -EIO;
	}

	return -EIO;
}
   47140:	4770      	bx	lr
   47142:	bf00      	nop
   47144:	0005def4 	.word	0x0005def4

00047148 <fatfs_init>:

static int fatfs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return fs_register(FS_FATFS, &fatfs_fs);
   47148:	2000      	movs	r0, #0
   4714a:	4901      	ldr	r1, [pc, #4]	; (47150 <fatfs_init+0x8>)
   4714c:	f7ff bfca 	b.w	470e4 <fs_register>
   47150:	0005c1e0 	.word	0x0005c1e0

00047154 <fatfs_mount>:
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
   47154:	2201      	movs	r2, #1
{
   47156:	b530      	push	{r4, r5, lr}
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
   47158:	68c1      	ldr	r1, [r0, #12]
{
   4715a:	4604      	mov	r4, r0
   4715c:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
   47160:	6900      	ldr	r0, [r0, #16]
   47162:	4411      	add	r1, r2
   47164:	f007 f90e 	bl	4e384 <f_mount>
	if (res == FR_NO_FILESYSTEM &&
   47168:	280d      	cmp	r0, #13
   4716a:	d119      	bne.n	471a0 <fatfs_mount+0x4c>
	    (mountp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) {
   4716c:	f894 3020 	ldrb.w	r3, [r4, #32]
	if (res == FR_NO_FILESYSTEM &&
   47170:	079a      	lsls	r2, r3, #30
   47172:	d422      	bmi.n	471ba <fatfs_mount+0x66>
	if (res == FR_NO_FILESYSTEM &&
   47174:	07db      	lsls	r3, r3, #31
   47176:	d41a      	bmi.n	471ae <fatfs_mount+0x5a>
		MKFS_PARM mkfs_opt = {
   47178:	466d      	mov	r5, sp
   4717a:	4b12      	ldr	r3, [pc, #72]	; (471c4 <fatfs_mount+0x70>)
   4717c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   4717e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		res = f_mkfs(&mountp->mnt_point[1], &mkfs_opt, work, sizeof(work));
   47182:	68e0      	ldr	r0, [r4, #12]
   47184:	f44f 7300 	mov.w	r3, #512	; 0x200
   47188:	4629      	mov	r1, r5
   4718a:	aa04      	add	r2, sp, #16
   4718c:	3001      	adds	r0, #1
   4718e:	f007 f91d 	bl	4e3cc <f_mkfs>
		if (res == FR_OK) {
   47192:	b960      	cbnz	r0, 471ae <fatfs_mount+0x5a>
			res = f_mount((FATFS *)mountp->fs_data,
   47194:	2201      	movs	r2, #1
					&mountp->mnt_point[1], 1);
   47196:	68e1      	ldr	r1, [r4, #12]
			res = f_mount((FATFS *)mountp->fs_data,
   47198:	6920      	ldr	r0, [r4, #16]
   4719a:	4411      	add	r1, r2
   4719c:	f007 f8f2 	bl	4e384 <f_mount>
	if (res == FR_OK) {
   471a0:	b928      	cbnz	r0, 471ae <fatfs_mount+0x5a>
		mountp->flags |= FS_MOUNT_FLAG_USE_DISK_ACCESS;
   471a2:	f894 3020 	ldrb.w	r3, [r4, #32]
   471a6:	f043 0308 	orr.w	r3, r3, #8
   471aa:	f884 3020 	strb.w	r3, [r4, #32]
}
   471ae:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   471b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
   471b6:	f7ff bfbd 	b.w	47134 <translate_error>
}
   471ba:	f06f 001d 	mvn.w	r0, #29
   471be:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   471c2:	bd30      	pop	{r4, r5, pc}
   471c4:	0005bfe0 	.word	0x0005bfe0

000471c8 <fatfs_closedir>:
{
   471c8:	b538      	push	{r3, r4, r5, lr}
   471ca:	4604      	mov	r4, r0
	res = f_closedir(zdp->dirp);
   471cc:	6800      	ldr	r0, [r0, #0]
   471ce:	f012 f809 	bl	591e4 <f_closedir>
   471d2:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
   471d4:	4621      	mov	r1, r4
   471d6:	4804      	ldr	r0, [pc, #16]	; (471e8 <fatfs_closedir+0x20>)
   471d8:	f013 fae0 	bl	5a79c <k_mem_slab_free>
	return translate_error(res);
   471dc:	4628      	mov	r0, r5
}
   471de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
   471e2:	f7ff bfa7 	b.w	47134 <translate_error>
   471e6:	bf00      	nop
   471e8:	2001aac0 	.word	0x2001aac0

000471ec <fatfs_close>:
{
   471ec:	b538      	push	{r3, r4, r5, lr}
   471ee:	4604      	mov	r4, r0
	res = f_close(zfp->filep);
   471f0:	6800      	ldr	r0, [r0, #0]
   471f2:	f011 feb8 	bl	58f66 <f_close>
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
   471f6:	4621      	mov	r1, r4
	res = f_close(zfp->filep);
   471f8:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
   471fa:	4805      	ldr	r0, [pc, #20]	; (47210 <fatfs_close+0x24>)
   471fc:	f013 face 	bl	5a79c <k_mem_slab_free>
	zfp->filep = NULL;
   47200:	2300      	movs	r3, #0
   47202:	6023      	str	r3, [r4, #0]
	return translate_error(res);
   47204:	4628      	mov	r0, r5
}
   47206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
   4720a:	f7ff bf93 	b.w	47134 <translate_error>
   4720e:	bf00      	nop
   47210:	2001aadc 	.word	0x2001aadc

00047214 <fatfs_opendir>:
{
   47214:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
   47216:	2200      	movs	r2, #0
{
   47218:	4606      	mov	r6, r0
   4721a:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
   4721c:	2300      	movs	r3, #0
   4721e:	4810      	ldr	r0, [pc, #64]	; (47260 <fatfs_opendir+0x4c>)
   47220:	a901      	add	r1, sp, #4
   47222:	f00b f831 	bl	52288 <k_mem_slab_alloc>
   47226:	4604      	mov	r4, r0
   47228:	b9b0      	cbnz	r0, 47258 <fatfs_opendir+0x44>
		(void)memset(ptr, 0, sizeof(DIR));
   4722a:	9b01      	ldr	r3, [sp, #4]
__ssp_bos_icheck3(memset, void *, int)
   4722c:	4601      	mov	r1, r0
   4722e:	2250      	movs	r2, #80	; 0x50
   47230:	4618      	mov	r0, r3
   47232:	f013 fe4c 	bl	5aece <memset>
	res = f_opendir(zdp->dirp, &path[1]);
   47236:	1c69      	adds	r1, r5, #1
		zdp->dirp = ptr;
   47238:	6030      	str	r0, [r6, #0]
	res = f_opendir(zdp->dirp, &path[1]);
   4723a:	f011 ff8f 	bl	5915c <f_opendir>
	if (res != FR_OK) {
   4723e:	4605      	mov	r5, r0
   47240:	b120      	cbz	r0, 4724c <fatfs_opendir+0x38>
		k_mem_slab_free(&fatfs_dirp_pool, &ptr);
   47242:	4807      	ldr	r0, [pc, #28]	; (47260 <fatfs_opendir+0x4c>)
   47244:	a901      	add	r1, sp, #4
   47246:	f013 faa9 	bl	5a79c <k_mem_slab_free>
		zdp->dirp = NULL;
   4724a:	6034      	str	r4, [r6, #0]
	return translate_error(res);
   4724c:	4628      	mov	r0, r5
}
   4724e:	b002      	add	sp, #8
   47250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return translate_error(res);
   47254:	f7ff bf6e 	b.w	47134 <translate_error>
}
   47258:	f06f 000b 	mvn.w	r0, #11
   4725c:	b002      	add	sp, #8
   4725e:	bd70      	pop	{r4, r5, r6, pc}
   47260:	2001aac0 	.word	0x2001aac0

00047264 <fatfs_open>:
{
   47264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
   47266:	2300      	movs	r3, #0
{
   47268:	4606      	mov	r6, r0
   4726a:	460d      	mov	r5, r1
   4726c:	4617      	mov	r7, r2
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
   4726e:	4812      	ldr	r0, [pc, #72]	; (472b8 <fatfs_open+0x54>)
   47270:	2200      	movs	r2, #0
   47272:	a901      	add	r1, sp, #4
   47274:	f00b f808 	bl	52288 <k_mem_slab_alloc>
   47278:	4604      	mov	r4, r0
   4727a:	b9c0      	cbnz	r0, 472ae <fatfs_open+0x4a>
		(void)memset(ptr, 0, sizeof(FIL));
   4727c:	9b01      	ldr	r3, [sp, #4]
   4727e:	4601      	mov	r1, r0
   47280:	2250      	movs	r2, #80	; 0x50
   47282:	4618      	mov	r0, r3
   47284:	f013 fe23 	bl	5aece <memset>
	res = f_open(zfp->filep, &file_name[1], fs_mode);
   47288:	1c69      	adds	r1, r5, #1
		zfp->filep = ptr;
   4728a:	6030      	str	r0, [r6, #0]
	res = f_open(zfp->filep, &file_name[1], fs_mode);
   4728c:	f007 0213 	and.w	r2, r7, #19
   47290:	f011 fb16 	bl	588c0 <f_open>
	if (res != FR_OK) {
   47294:	4605      	mov	r5, r0
   47296:	b120      	cbz	r0, 472a2 <fatfs_open+0x3e>
		k_mem_slab_free(&fatfs_filep_pool, &ptr);
   47298:	4807      	ldr	r0, [pc, #28]	; (472b8 <fatfs_open+0x54>)
   4729a:	a901      	add	r1, sp, #4
   4729c:	f013 fa7e 	bl	5a79c <k_mem_slab_free>
		zfp->filep = NULL;
   472a0:	6034      	str	r4, [r6, #0]
	return translate_error(res);
   472a2:	4628      	mov	r0, r5
}
   472a4:	b003      	add	sp, #12
   472a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return translate_error(res);
   472aa:	f7ff bf43 	b.w	47134 <translate_error>
}
   472ae:	f06f 000b 	mvn.w	r0, #11
   472b2:	b003      	add	sp, #12
   472b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   472b6:	bf00      	nop
   472b8:	2001aadc 	.word	0x2001aadc

000472bc <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   472bc:	4602      	mov	r2, r0
   472be:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   472c0:	4801      	ldr	r0, [pc, #4]	; (472c8 <k_mutex_lock.constprop.0.isra.0+0xc>)
   472c2:	f00b b8e3 	b.w	5248c <z_impl_k_mutex_lock>
   472c6:	bf00      	nop
   472c8:	2001abac 	.word	0x2001abac

000472cc <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   472cc:	4801      	ldr	r0, [pc, #4]	; (472d4 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   472ce:	f00b b957 	b.w	52580 <z_impl_k_mutex_unlock>
   472d2:	bf00      	nop
   472d4:	2001abac 	.word	0x2001abac

000472d8 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   472d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   472da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   472de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   472e2:	f7ff ffeb 	bl	472bc <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   472e6:	4c0c      	ldr	r4, [pc, #48]	; (47318 <net_if_init+0x40>)
   472e8:	4e0c      	ldr	r6, [pc, #48]	; (4731c <net_if_init+0x44>)
   472ea:	42b4      	cmp	r4, r6
   472ec:	4627      	mov	r7, r4
   472ee:	d303      	bcc.n	472f8 <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   472f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   472f4:	f7ff bfea 	b.w	472cc <k_mutex_unlock.constprop.0.isra.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   472f8:	f854 0b04 	ldr.w	r0, [r4], #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   472fc:	6803      	ldr	r3, [r0, #0]
   472fe:	689d      	ldr	r5, [r3, #8]
	if (!api || !api->init) {
   47300:	2d00      	cmp	r5, #0
   47302:	d0f2      	beq.n	472ea <net_if_init+0x12>
   47304:	682b      	ldr	r3, [r5, #0]
   47306:	2b00      	cmp	r3, #0
   47308:	d0ef      	beq.n	472ea <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
   4730a:	2109      	movs	r1, #9
   4730c:	f00f f891 	bl	56432 <net_if_flag_test_and_set.isra.0>
	api->init(iface);
   47310:	4638      	mov	r0, r7
   47312:	682b      	ldr	r3, [r5, #0]
   47314:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   47316:	e7e8      	b.n	472ea <net_if_init+0x12>
   47318:	2001ac48 	.word	0x2001ac48
   4731c:	2001ac4c 	.word	0x2001ac4c

00047320 <net_if_post_init>:

void net_if_post_init(void)
{
   47320:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   47322:	4c07      	ldr	r4, [pc, #28]	; (47340 <net_if_post_init+0x20>)
   47324:	4d07      	ldr	r5, [pc, #28]	; (47344 <net_if_post_init+0x24>)
   47326:	42ac      	cmp	r4, r5
   47328:	d300      	bcc.n	4732c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   4732a:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   4732c:	2103      	movs	r1, #3
   4732e:	4620      	mov	r0, r4
   47330:	f00f f82b 	bl	5638a <net_if_flag_is_set>
   47334:	b910      	cbnz	r0, 4733c <net_if_post_init+0x1c>
			net_if_up(iface);
   47336:	4620      	mov	r0, r4
   47338:	f00f f88d 	bl	56456 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   4733c:	3404      	adds	r4, #4
   4733e:	e7f2      	b.n	47326 <net_if_post_init+0x6>
   47340:	2001ac48 	.word	0x2001ac48
   47344:	2001ac4c 	.word	0x2001ac4c

00047348 <sd_common_init>:
 * This function performs the following portions of SD initialization
 * - CMD0 (SD reset)
 * - CMD8 (SD voltage check)
 */
static int sd_common_init(struct sd_card *card)
{
   47348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4734c:	4605      	mov	r5, r0
   4734e:	b08e      	sub	sp, #56	; 0x38
	int ret;

	/* Reset card with CMD0 */
	ret = sd_idle(card);
   47350:	6800      	ldr	r0, [r0, #0]
   47352:	f00f f8cc 	bl	564ee <sd_idle.isra.0>
	if (ret) {
   47356:	4604      	mov	r4, r0
   47358:	b168      	cbz	r0, 47376 <sd_common_init+0x2e>
		LOG_ERR("Card error on CMD0");
   4735a:	4b3b      	ldr	r3, [pc, #236]	; (47448 <sd_common_init+0x100>)
   4735c:	2201      	movs	r2, #1
   4735e:	9302      	str	r3, [sp, #8]
   47360:	2300      	movs	r3, #0
   47362:	493a      	ldr	r1, [pc, #232]	; (4744c <sd_common_init+0x104>)
   47364:	4618      	mov	r0, r3
   47366:	e9cd 3300 	strd	r3, r3, [sp]
   4736a:	f00f f8a9 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
		IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
		/* Enable CRC for spi commands using CMD59 */
		ret = sd_enable_crc(card);
	}
	return ret;
}
   4736e:	4620      	mov	r0, r4
   47370:	b00e      	add	sp, #56	; 0x38
   47372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   47376:	260b      	movs	r6, #11
		LOG_INF("Legacy card detected, no CMD8 support");
   47378:	4f35      	ldr	r7, [pc, #212]	; (47450 <sd_common_init+0x108>)
   4737a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 4744c <sd_common_init+0x104>
	struct sdhc_command cmd = {0};
   4737e:	2218      	movs	r2, #24
   47380:	2100      	movs	r1, #0
   47382:	a807      	add	r0, sp, #28
   47384:	f013 fda3 	bl	5aece <memset>
	cmd.arg = SD_IF_COND_VHS_3V3 | SD_IF_COND_CHECK;
   47388:	2008      	movs	r0, #8
   4738a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   4738e:	e9cd 0305 	strd	r0, r3, [sp, #20]
	cmd.response_type = (SD_RSP_TYPE_R7 | SD_SPI_RSP_TYPE_R7);
   47392:	2379      	movs	r3, #121	; 0x79
   47394:	930b      	str	r3, [sp, #44]	; 0x2c
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47396:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47398:	6828      	ldr	r0, [r5, #0]
   4739a:	a905      	add	r1, sp, #20
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   4739c:	930d      	str	r3, [sp, #52]	; 0x34
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   4739e:	f00f f89e 	bl	564de <sdhc_request.constprop.0>
	if (ret) {
   473a2:	4604      	mov	r4, r0
   473a4:	b978      	cbnz	r0, 473c6 <sd_common_init+0x7e>
	if (card->host_props.is_spi) {
   473a6:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
   473aa:	b1f2      	cbz	r2, 473ea <sd_common_init+0xa2>
		resp = cmd.response[1];
   473ac:	9b08      	ldr	r3, [sp, #32]
	if ((resp & 0xFF) != SD_IF_COND_CHECK) {
   473ae:	b2d9      	uxtb	r1, r3
   473b0:	29aa      	cmp	r1, #170	; 0xaa
   473b2:	d01c      	beq.n	473ee <sd_common_init+0xa6>
		LOG_INF("Legacy card detected, no CMD8 support");
   473b4:	2300      	movs	r3, #0
   473b6:	2203      	movs	r2, #3
   473b8:	4641      	mov	r1, r8
   473ba:	4618      	mov	r0, r3
   473bc:	e9cd 3300 	strd	r3, r3, [sp]
   473c0:	9702      	str	r7, [sp, #8]
   473c2:	f00f f87d 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
	struct sd_card *card,
	int retries)
{
	int ret = -ETIMEDOUT;

	while (retries-- >= 0) {
   473c6:	3e01      	subs	r6, #1
   473c8:	d1d9      	bne.n	4737e <sd_common_init+0x36>
		LOG_INF("Card does not support CMD8, assuming legacy card");
   473ca:	4b22      	ldr	r3, [pc, #136]	; (47454 <sd_common_init+0x10c>)
   473cc:	4630      	mov	r0, r6
   473ce:	e9cd 6301 	strd	r6, r3, [sp, #4]
   473d2:	2203      	movs	r2, #3
   473d4:	4633      	mov	r3, r6
   473d6:	491d      	ldr	r1, [pc, #116]	; (4744c <sd_common_init+0x104>)
   473d8:	9600      	str	r6, [sp, #0]
   473da:	f00f f871 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
		return sd_idle(card);
   473de:	6828      	ldr	r0, [r5, #0]
}
   473e0:	b00e      	add	sp, #56	; 0x38
   473e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sd_idle(card);
   473e6:	f00f b882 	b.w	564ee <sd_idle.isra.0>
		resp = cmd.response[0];
   473ea:	9b07      	ldr	r3, [sp, #28]
   473ec:	e7df      	b.n	473ae <sd_common_init+0x66>
	if ((resp & SD_IF_COND_VHS_MASK) != SD_IF_COND_VHS_3V3) {
   473ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   473f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   473f6:	d00c      	beq.n	47412 <sd_common_init+0xca>
		LOG_ERR("Card error on CMD 8");
   473f8:	4b17      	ldr	r3, [pc, #92]	; (47458 <sd_common_init+0x110>)
   473fa:	2201      	movs	r2, #1
   473fc:	9302      	str	r3, [sp, #8]
   473fe:	2300      	movs	r3, #0
   47400:	4912      	ldr	r1, [pc, #72]	; (4744c <sd_common_init+0x104>)
   47402:	4618      	mov	r0, r3
   47404:	e9cd 3300 	strd	r3, r3, [sp]
   47408:	f00f f85a 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
		return ret;
   4740c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   47410:	e7ad      	b.n	4736e <sd_common_init+0x26>
	card->flags |= SD_SDHC_FLAG;
   47412:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   47414:	f043 0308 	orr.w	r3, r3, #8
   47418:	676b      	str	r3, [r5, #116]	; 0x74
	if (card->host_props.is_spi &&
   4741a:	2a00      	cmp	r2, #0
   4741c:	d0a7      	beq.n	4736e <sd_common_init+0x26>
	struct sdhc_command cmd = {0};
   4741e:	2218      	movs	r2, #24
   47420:	2100      	movs	r1, #0
   47422:	a807      	add	r0, sp, #28
   47424:	682c      	ldr	r4, [r5, #0]
   47426:	f013 fd52 	bl	5aece <memset>
	cmd.arg = 0x1; /* Enable CRC */
   4742a:	223b      	movs	r2, #59	; 0x3b
   4742c:	2301      	movs	r3, #1
   4742e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	cmd.response_type = SD_SPI_RSP_TYPE_R1;
   47432:	2310      	movs	r3, #16
   47434:	930b      	str	r3, [sp, #44]	; 0x2c
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47436:	23c8      	movs	r3, #200	; 0xc8
	return sdhc_request(card->sdhc, &cmd, NULL);
   47438:	4620      	mov	r0, r4
   4743a:	a905      	add	r1, sp, #20
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   4743c:	930d      	str	r3, [sp, #52]	; 0x34
	return sdhc_request(card->sdhc, &cmd, NULL);
   4743e:	f00f f84e 	bl	564de <sdhc_request.constprop.0>
   47442:	4604      	mov	r4, r0
   47444:	e793      	b.n	4736e <sd_common_init+0x26>
   47446:	bf00      	nop
   47448:	0005df10 	.word	0x0005df10
   4744c:	0005bfa4 	.word	0x0005bfa4
   47450:	0005df23 	.word	0x0005df23
   47454:	0005df5d 	.word	0x0005df5d
   47458:	0005df49 	.word	0x0005df49

0004745c <sd_init_io>:

static int sd_init_io(struct sd_card *card)
{
   4745c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bus_io->bus_mode = SDHC_BUSMODE_PUSHPULL;
	bus_io->power_mode = SDHC_POWER_ON;
	bus_io->bus_width = SDHC_BUS_WIDTH1BIT;
	/* Cards start with legacy timing and 3.3V signalling at power on */
	bus_io->timing = SDHC_TIMING_LEGACY;
	bus_io->signal_voltage = SD_VOL_3_3_V;
   47460:	2701      	movs	r7, #1
	bus_io->bus_mode = SDHC_BUSMODE_PUSHPULL;
   47462:	2600      	movs	r6, #0
   47464:	4b1b      	ldr	r3, [pc, #108]	; (474d4 <sd_init_io+0x78>)
	struct sdhc_io *bus_io = &card->bus_io;
   47466:	f100 0804 	add.w	r8, r0, #4
	bus_io->bus_mode = SDHC_BUSMODE_PUSHPULL;
   4746a:	e9c0 6301 	strd	r6, r3, [r0, #4]
	bus_io->signal_voltage = SD_VOL_3_3_V;
   4746e:	7347      	strb	r7, [r0, #13]
{
   47470:	4604      	mov	r4, r0

	/* Toggle power to card to reset it */
	LOG_DBG("Resetting power to card");
	bus_io->power_mode = SDHC_POWER_OFF;
	ret = sdhc_set_io(card->sdhc, bus_io);
   47472:	4641      	mov	r1, r8
   47474:	6800      	ldr	r0, [r0, #0]
   47476:	f00f f81a 	bl	564ae <sdhc_set_io>
	if (ret) {
   4747a:	4605      	mov	r5, r0
   4747c:	b168      	cbz	r0, 4749a <sd_init_io+0x3e>
	}
	sd_delay(card->host_props.power_delay);
	bus_io->power_mode = SDHC_POWER_ON;
	ret = sdhc_set_io(card->sdhc, bus_io);
	if (ret) {
		LOG_ERR("Could not disable card power via SDHC");
   4747e:	4b16      	ldr	r3, [pc, #88]	; (474d8 <sd_init_io+0x7c>)
	sd_delay(card->host_props.power_delay);
	/* Start bus clock */
	bus_io->clock = SDMMC_CLOCK_400KHZ;
	ret = sdhc_set_io(card->sdhc, bus_io);
	if (ret) {
		LOG_ERR("Could not start bus clock");
   47480:	e9cd 6301 	strd	r6, r3, [sp, #4]
   47484:	463a      	mov	r2, r7
   47486:	4633      	mov	r3, r6
   47488:	4630      	mov	r0, r6
   4748a:	4914      	ldr	r1, [pc, #80]	; (474dc <sd_init_io+0x80>)
   4748c:	9600      	str	r6, [sp, #0]
   4748e:	f00f f817 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
		return ret;
	}
	return 0;
}
   47492:	4628      	mov	r0, r5
   47494:	b004      	add	sp, #16
   47496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_msleep(millis);
   4749a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   4749c:	f00f f839 	bl	56512 <k_msleep.isra.0>
	bus_io->power_mode = SDHC_POWER_ON;
   474a0:	2302      	movs	r3, #2
	ret = sdhc_set_io(card->sdhc, bus_io);
   474a2:	4641      	mov	r1, r8
   474a4:	6820      	ldr	r0, [r4, #0]
	bus_io->power_mode = SDHC_POWER_ON;
   474a6:	7263      	strb	r3, [r4, #9]
	ret = sdhc_set_io(card->sdhc, bus_io);
   474a8:	f00f f801 	bl	564ae <sdhc_set_io>
	if (ret) {
   474ac:	4605      	mov	r5, r0
   474ae:	2800      	cmp	r0, #0
   474b0:	d1e5      	bne.n	4747e <sd_init_io+0x22>
	card->flags = 0U;
   474b2:	6760      	str	r0, [r4, #116]	; 0x74
	card->card_voltage = SD_VOL_3_3_V;
   474b4:	7427      	strb	r7, [r4, #16]
   474b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   474b8:	f00f f82b 	bl	56512 <k_msleep.isra.0>
	bus_io->clock = SDMMC_CLOCK_400KHZ;
   474bc:	4b08      	ldr	r3, [pc, #32]	; (474e0 <sd_init_io+0x84>)
	ret = sdhc_set_io(card->sdhc, bus_io);
   474be:	4641      	mov	r1, r8
   474c0:	6820      	ldr	r0, [r4, #0]
	bus_io->clock = SDMMC_CLOCK_400KHZ;
   474c2:	6063      	str	r3, [r4, #4]
	ret = sdhc_set_io(card->sdhc, bus_io);
   474c4:	f00e fff3 	bl	564ae <sdhc_set_io>
	if (ret) {
   474c8:	4605      	mov	r5, r0
   474ca:	2800      	cmp	r0, #0
   474cc:	d0e1      	beq.n	47492 <sd_init_io+0x36>
		LOG_ERR("Could not start bus clock");
   474ce:	4b05      	ldr	r3, [pc, #20]	; (474e4 <sd_init_io+0x88>)
   474d0:	e7d6      	b.n	47480 <sd_init_io+0x24>
   474d2:	bf00      	nop
   474d4:	01010102 	.word	0x01010102
   474d8:	0005df8e 	.word	0x0005df8e
   474dc:	0005bfa4 	.word	0x0005bfa4
   474e0:	00061a80 	.word	0x00061a80
   474e4:	0005dfb4 	.word	0x0005dfb4

000474e8 <sd_command_init>:

/*
 * Performs init flow described in section 3.6 of SD specification.
 */
static int sd_command_init(struct sd_card *card)
{
   474e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   474ea:	4605      	mov	r5, r0
   474ec:	b085      	sub	sp, #20
   474ee:	2001      	movs	r0, #1
   474f0:	f00f f80f 	bl	56512 <k_msleep.isra.0>
	sd_delay(1);
	/*
	 * Start card initialization and identification
	 * flow described in section 3.6 of SD specification
	 */
	ret = sd_common_init(card);
   474f4:	4628      	mov	r0, r5
   474f6:	f7ff ff27 	bl	47348 <sd_common_init>
	if (ret) {
   474fa:	4604      	mov	r4, r0
   474fc:	bb28      	cbnz	r0, 4754a <sd_command_init+0x62>
	ret = sd_test_sdio(card);
   474fe:	4628      	mov	r0, r5
   47500:	f00f f81a 	bl	56538 <sd_test_sdio>
	if ((ret == SD_NOT_SDIO) && card->type == CARD_SDMMC) {
   47504:	2802      	cmp	r0, #2
   47506:	d123      	bne.n	47550 <sd_command_init+0x68>
   47508:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
   4750c:	bb6b      	cbnz	r3, 4756a <sd_command_init+0x82>
		LOG_INF("Detected SD card");
   4750e:	4b30      	ldr	r3, [pc, #192]	; (475d0 <sd_command_init+0xe8>)
   47510:	2203      	movs	r2, #3
   47512:	e9cd 4301 	strd	r4, r3, [sp, #4]
   47516:	4620      	mov	r0, r4
   47518:	4623      	mov	r3, r4
   4751a:	492e      	ldr	r1, [pc, #184]	; (475d4 <sd_command_init+0xec>)
   4751c:	9400      	str	r4, [sp, #0]
		LOG_INF("Detected SDIO card");
   4751e:	f00e ffcf 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
	ret = sd_check_card_type(card);
	if (ret) {
		LOG_ERR("Unusable card");
		return -ENOTSUP;
	}
	if (card->type == CARD_SDMMC) {
   47522:	f895 7072 	ldrb.w	r7, [r5, #114]	; 0x72
   47526:	2f00      	cmp	r7, #0
   47528:	d149      	bne.n	475be <sd_command_init+0xd6>
		/*
		 * Reset the card first- CMD5 sent to see if it is SDIO card
		 * may have left it in error state
		 */
		ret = sd_common_init(card);
   4752a:	4628      	mov	r0, r5
   4752c:	f7ff ff0c 	bl	47348 <sd_common_init>
		if (ret) {
   47530:	4606      	mov	r6, r0
   47532:	b390      	cbz	r0, 4759a <sd_command_init+0xb2>
			LOG_ERR("Init after CMD5 failed");
   47534:	4b28      	ldr	r3, [pc, #160]	; (475d8 <sd_command_init+0xf0>)
   47536:	2201      	movs	r2, #1
   47538:	e9cd 7301 	strd	r7, r3, [sp, #4]
   4753c:	4638      	mov	r0, r7
   4753e:	463b      	mov	r3, r7
   47540:	4924      	ldr	r1, [pc, #144]	; (475d4 <sd_command_init+0xec>)
   47542:	9700      	str	r7, [sp, #0]
   47544:	f00e ffbc 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
			return ret;
   47548:	4634      	mov	r4, r6
	if (ret) {
		LOG_ERR("Card init failed");
		return ret;
	}
	return 0;
}
   4754a:	4620      	mov	r0, r4
   4754c:	b005      	add	sp, #20
   4754e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if ((ret == 0) && card->type == CARD_SDIO) {
   47550:	b958      	cbnz	r0, 4756a <sd_command_init+0x82>
   47552:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
   47556:	2b01      	cmp	r3, #1
   47558:	d107      	bne.n	4756a <sd_command_init+0x82>
		LOG_INF("Detected SDIO card");
   4755a:	4b20      	ldr	r3, [pc, #128]	; (475dc <sd_command_init+0xf4>)
   4755c:	2203      	movs	r2, #3
   4755e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   47562:	491c      	ldr	r1, [pc, #112]	; (475d4 <sd_command_init+0xec>)
   47564:	4623      	mov	r3, r4
   47566:	9400      	str	r4, [sp, #0]
   47568:	e7d9      	b.n	4751e <sd_command_init+0x36>
	LOG_ERR("No usable card type was found");
   4756a:	2400      	movs	r4, #0
   4756c:	4b1c      	ldr	r3, [pc, #112]	; (475e0 <sd_command_init+0xf8>)
   4756e:	2201      	movs	r2, #1
   47570:	9302      	str	r3, [sp, #8]
   47572:	4620      	mov	r0, r4
   47574:	4623      	mov	r3, r4
   47576:	e9cd 4400 	strd	r4, r4, [sp]
   4757a:	4916      	ldr	r1, [pc, #88]	; (475d4 <sd_command_init+0xec>)
   4757c:	f00e ffa0 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
		LOG_ERR("Unusable card");
   47580:	4b18      	ldr	r3, [pc, #96]	; (475e4 <sd_command_init+0xfc>)
   47582:	2201      	movs	r2, #1
   47584:	e9cd 4301 	strd	r4, r3, [sp, #4]
   47588:	4623      	mov	r3, r4
   4758a:	9400      	str	r4, [sp, #0]
		LOG_ERR("SDIO cards not currently supported");
   4758c:	4618      	mov	r0, r3
   4758e:	4911      	ldr	r1, [pc, #68]	; (475d4 <sd_command_init+0xec>)
   47590:	f00e ff96 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   47594:	f06f 0485 	mvn.w	r4, #133	; 0x85
   47598:	e7d7      	b.n	4754a <sd_command_init+0x62>
		ret = sdmmc_card_init(card);
   4759a:	4628      	mov	r0, r5
   4759c:	f000 f984 	bl	478a8 <sdmmc_card_init>
	if (ret) {
   475a0:	4605      	mov	r5, r0
   475a2:	2800      	cmp	r0, #0
   475a4:	d0d1      	beq.n	4754a <sd_command_init+0x62>
		LOG_ERR("Card init failed");
   475a6:	4b10      	ldr	r3, [pc, #64]	; (475e8 <sd_command_init+0x100>)
   475a8:	2201      	movs	r2, #1
   475aa:	e9cd 6301 	strd	r6, r3, [sp, #4]
   475ae:	4630      	mov	r0, r6
   475b0:	4633      	mov	r3, r6
   475b2:	4908      	ldr	r1, [pc, #32]	; (475d4 <sd_command_init+0xec>)
   475b4:	9600      	str	r6, [sp, #0]
   475b6:	f00e ff83 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
		return ret;
   475ba:	462c      	mov	r4, r5
   475bc:	e7c5      	b.n	4754a <sd_command_init+0x62>
	} else if (card->type == CARD_SDIO) {
   475be:	2f01      	cmp	r7, #1
   475c0:	d1c3      	bne.n	4754a <sd_command_init+0x62>
		LOG_ERR("SDIO cards not currently supported");
   475c2:	4b0a      	ldr	r3, [pc, #40]	; (475ec <sd_command_init+0x104>)
   475c4:	463a      	mov	r2, r7
   475c6:	9302      	str	r3, [sp, #8]
   475c8:	2300      	movs	r3, #0
   475ca:	e9cd 3300 	strd	r3, r3, [sp]
   475ce:	e7dd      	b.n	4758c <sd_command_init+0xa4>
   475d0:	0005dfce 	.word	0x0005dfce
   475d4:	0005bfa4 	.word	0x0005bfa4
   475d8:	0005e01e 	.word	0x0005e01e
   475dc:	0005dfdf 	.word	0x0005dfdf
   475e0:	0005dff2 	.word	0x0005dff2
   475e4:	0005e010 	.word	0x0005e010
   475e8:	0005e058 	.word	0x0005e058
   475ec:	0005e035 	.word	0x0005e035

000475f0 <sd_init>:

/* Initializes SD/SDIO card */
int sd_init(const struct device *sdhc_dev, struct sd_card *card)
{
   475f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   475f2:	460d      	mov	r5, r1
   475f4:	b085      	sub	sp, #20
	int ret;

	if (!sdhc_dev) {
   475f6:	2800      	cmp	r0, #0
   475f8:	d063      	beq.n	476c2 <sd_init+0xd2>
		return -ENODEV;
	}
	card->sdhc = sdhc_dev;
   475fa:	f841 0b28 	str.w	r0, [r1], #40
	struct sdhc_host_props *props)
{
	const struct sdhc_driver_api *api =
		(const struct sdhc_driver_api *)dev->api;

	if (!api->get_host_props) {
   475fe:	6883      	ldr	r3, [r0, #8]
   47600:	699b      	ldr	r3, [r3, #24]
   47602:	b17b      	cbz	r3, 47624 <sd_init+0x34>
		return -ENOSYS;
	}

	return api->get_host_props(dev, props);
   47604:	4798      	blx	r3
	ret = sdhc_get_host_props(card->sdhc, &card->host_props);
	if (ret) {
   47606:	4604      	mov	r4, r0
   47608:	b178      	cbz	r0, 4762a <sd_init+0x3a>
		LOG_ERR("SD host controller returned invalid properties");
   4760a:	4b2f      	ldr	r3, [pc, #188]	; (476c8 <sd_init+0xd8>)
		LOG_DBG("Could not init card mutex");
		return ret;
	}
	ret = k_mutex_lock(&card->lock, K_MSEC(CONFIG_SD_INIT_TIMEOUT));
	if (ret) {
		LOG_ERR("Timeout while trying to acquire card mutex");
   4760c:	9302      	str	r3, [sp, #8]
   4760e:	2300      	movs	r3, #0
   47610:	2201      	movs	r2, #1
   47612:	4618      	mov	r0, r3
   47614:	e9cd 3300 	strd	r3, r3, [sp]
   47618:	492c      	ldr	r1, [pc, #176]	; (476cc <sd_init+0xdc>)
   4761a:	f00e ff51 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
		LOG_DBG("Could not unlock card mutex");
		return ret;
	}
	return ret;
}
   4761e:	4620      	mov	r0, r4
   47620:	b005      	add	sp, #20
   47622:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOSYS;
   47624:	f06f 0457 	mvn.w	r4, #87	; 0x57
   47628:	e7ef      	b.n	4760a <sd_init+0x1a>
	ret = k_mutex_init(&card->lock);
   4762a:	f105 0614 	add.w	r6, r5, #20
	return z_impl_k_mutex_init(mutex);
   4762e:	4630      	mov	r0, r6
   47630:	f013 f8f9 	bl	5a826 <z_impl_k_mutex_init>
	if (ret) {
   47634:	4604      	mov	r4, r0
   47636:	2800      	cmp	r0, #0
   47638:	d1f1      	bne.n	4761e <sd_init+0x2e>
	return z_impl_k_mutex_lock(mutex, timeout);
   4763a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   4763e:	2300      	movs	r3, #0
   47640:	4630      	mov	r0, r6
   47642:	f00a ff23 	bl	5248c <z_impl_k_mutex_lock>
	if (ret) {
   47646:	4604      	mov	r4, r0
   47648:	b108      	cbz	r0, 4764e <sd_init+0x5e>
		LOG_ERR("Timeout while trying to acquire card mutex");
   4764a:	4b21      	ldr	r3, [pc, #132]	; (476d0 <sd_init+0xe0>)
   4764c:	e7de      	b.n	4760c <sd_init+0x1c>
	ret = sd_init_io(card);
   4764e:	4628      	mov	r0, r5
   47650:	f7ff ff04 	bl	4745c <sd_init_io>
	if (ret) {
   47654:	4604      	mov	r4, r0
   47656:	b118      	cbz	r0, 47660 <sd_init+0x70>
			k_mutex_unlock(&card->lock);
   47658:	4630      	mov	r0, r6
   4765a:	f00e ff2f 	bl	564bc <k_mutex_unlock>
			return ret;
   4765e:	e7de      	b.n	4761e <sd_init+0x2e>
	ret = sd_command_init(card);
   47660:	4628      	mov	r0, r5
   47662:	f7ff ff41 	bl	474e8 <sd_command_init>
	if (ret == SD_RESTART) {
   47666:	2803      	cmp	r0, #3
	ret = sd_command_init(card);
   47668:	4604      	mov	r4, r0
	if (ret == SD_RESTART) {
   4766a:	d119      	bne.n	476a0 <sd_init+0xb0>
		card->status = CARD_ERROR;
   4766c:	2701      	movs	r7, #1
		ret = sd_init_io(card);
   4766e:	4628      	mov	r0, r5
		card->status = CARD_ERROR;
   47670:	f885 7071 	strb.w	r7, [r5, #113]	; 0x71
		ret = sd_init_io(card);
   47674:	f7ff fef2 	bl	4745c <sd_init_io>
		if (ret) {
   47678:	4604      	mov	r4, r0
   4767a:	b150      	cbz	r0, 47692 <sd_init+0xa2>
			LOG_ERR("Failed to reset SDHC I/O");
   4767c:	4b15      	ldr	r3, [pc, #84]	; (476d4 <sd_init+0xe4>)
			LOG_ERR("Failed to init SD card after I/O reset");
   4767e:	9302      	str	r3, [sp, #8]
   47680:	2300      	movs	r3, #0
   47682:	463a      	mov	r2, r7
   47684:	4618      	mov	r0, r3
   47686:	e9cd 3300 	strd	r3, r3, [sp]
   4768a:	4910      	ldr	r1, [pc, #64]	; (476cc <sd_init+0xdc>)
   4768c:	f00e ff18 	bl	564c0 <z_log_msg_runtime_create.constprop.0>
   47690:	e7e2      	b.n	47658 <sd_init+0x68>
		ret = sd_command_init(card);
   47692:	4628      	mov	r0, r5
   47694:	f7ff ff28 	bl	474e8 <sd_command_init>
		if (ret) {
   47698:	4604      	mov	r4, r0
   4769a:	b148      	cbz	r0, 476b0 <sd_init+0xc0>
			LOG_ERR("Failed to init SD card after I/O reset");
   4769c:	4b0e      	ldr	r3, [pc, #56]	; (476d8 <sd_init+0xe8>)
   4769e:	e7ee      	b.n	4767e <sd_init+0x8e>
	} else if (ret != 0) {
   476a0:	b130      	cbz	r0, 476b0 <sd_init+0xc0>
		k_mutex_unlock(&card->lock);
   476a2:	4630      	mov	r0, r6
   476a4:	f00e ff0a 	bl	564bc <k_mutex_unlock>
		card->status = CARD_ERROR;
   476a8:	2301      	movs	r3, #1
   476aa:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
		return ret;
   476ae:	e7b6      	b.n	4761e <sd_init+0x2e>
	card->status = CARD_INITIALIZED;
   476b0:	2302      	movs	r3, #2
	ret = k_mutex_unlock(&card->lock);
   476b2:	4630      	mov	r0, r6
	card->status = CARD_INITIALIZED;
   476b4:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
}
   476b8:	b005      	add	sp, #20
   476ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ret = k_mutex_unlock(&card->lock);
   476be:	f00e befd 	b.w	564bc <k_mutex_unlock>
		return -ENODEV;
   476c2:	f06f 0412 	mvn.w	r4, #18
   476c6:	e7aa      	b.n	4761e <sd_init+0x2e>
   476c8:	0005e069 	.word	0x0005e069
   476cc:	0005bfa4 	.word	0x0005bfa4
   476d0:	0005e098 	.word	0x0005e098
   476d4:	0005e0c3 	.word	0x0005e0c3
   476d8:	0005e0dc 	.word	0x0005e0dc

000476dc <sdmmc_app_command>:
	return 0;
}

/* Helper to send SD app command */
static int sdmmc_app_command(struct sd_card *card, int relative_card_address)
{
   476dc:	b530      	push	{r4, r5, lr}
   476de:	b08f      	sub	sp, #60	; 0x3c
   476e0:	4605      	mov	r5, r0
   476e2:	460c      	mov	r4, r1
	struct sdhc_command cmd = {0};
   476e4:	2218      	movs	r2, #24
   476e6:	2100      	movs	r1, #0
   476e8:	a807      	add	r0, sp, #28
   476ea:	f013 fbf0 	bl	5aece <memset>
	int ret;

	cmd.opcode = SD_APP_CMD;
   476ee:	2337      	movs	r3, #55	; 0x37
   476f0:	9305      	str	r3, [sp, #20]
	cmd.arg = relative_card_address << 16U;
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   476f2:	2311      	movs	r3, #17
   476f4:	930b      	str	r3, [sp, #44]	; 0x2c
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   476f6:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   476f8:	2200      	movs	r2, #0
   476fa:	6828      	ldr	r0, [r5, #0]
	cmd.arg = relative_card_address << 16U;
   476fc:	0424      	lsls	r4, r4, #16
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   476fe:	a905      	add	r1, sp, #20
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47700:	930d      	str	r3, [sp, #52]	; 0x34
	cmd.arg = relative_card_address << 16U;
   47702:	9406      	str	r4, [sp, #24]
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47704:	f00e ff4f 	bl	565a6 <sdhc_request>
   47708:	4603      	mov	r3, r0
	if (ret) {
   4770a:	b9f8      	cbnz	r0, 4774c <sdmmc_app_command+0x70>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
   4770c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   4770e:	2a01      	cmp	r2, #1
   47710:	d111      	bne.n	47736 <sdmmc_app_command+0x5a>
		return (cmd->response[0U] & SD_R1_ERR_FLAGS);
   47712:	9907      	ldr	r1, [sp, #28]
		/* We want to retry transmission */
		return SD_RETRY;
	}
	ret = sdmmc_check_response(&cmd);
	if (ret) {
   47714:	4a0e      	ldr	r2, [pc, #56]	; (47750 <sdmmc_app_command+0x74>)
   47716:	400a      	ands	r2, r1
   47718:	b16a      	cbz	r2, 47736 <sdmmc_app_command+0x5a>
		LOG_WRN("SD app command failed with R1 response of 0x%X",
   4771a:	4a0e      	ldr	r2, [pc, #56]	; (47754 <sdmmc_app_command+0x78>)
   4771c:	9103      	str	r1, [sp, #12]
   4771e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   47722:	490d      	ldr	r1, [pc, #52]	; (47758 <sdmmc_app_command+0x7c>)
   47724:	2202      	movs	r2, #2
   47726:	9000      	str	r0, [sp, #0]
   47728:	f00e ffbd 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
			cmd.response[0]);
		return -EIO;
   4772c:	f06f 0304 	mvn.w	r3, #4
	if ((!card->host_props.is_spi) && !(cmd.response[0U] & SD_R1_APP_CMD)) {
		/* Command succeeded, but card not ready for app command. No APP CMD support */
		return -ENOTSUP;
	}
	return 0;
}
   47730:	4618      	mov	r0, r3
   47732:	b00f      	add	sp, #60	; 0x3c
   47734:	bd30      	pop	{r4, r5, pc}
	if ((!card->host_props.is_spi) && !(cmd.response[0U] & SD_R1_APP_CMD)) {
   47736:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
   4773a:	2a00      	cmp	r2, #0
   4773c:	d1f8      	bne.n	47730 <sdmmc_app_command+0x54>
		return -ENOTSUP;
   4773e:	9a07      	ldr	r2, [sp, #28]
   47740:	f012 0f20 	tst.w	r2, #32
   47744:	bf08      	it	eq
   47746:	f06f 0385 	mvneq.w	r3, #133	; 0x85
   4774a:	e7f1      	b.n	47730 <sdmmc_app_command+0x54>
		return SD_RETRY;
   4774c:	2301      	movs	r3, #1
   4774e:	e7ef      	b.n	47730 <sdmmc_app_command+0x54>
   47750:	fdf98008 	.word	0xfdf98008
   47754:	0005e106 	.word	0x0005e106
   47758:	0005bfa4 	.word	0x0005bfa4

0004775c <sdmmc_wait_ready>:
	return -EBUSY;
}

/* Waits for SD card to be ready for data. Returns 0 if card is ready */
static int sdmmc_wait_ready(struct sd_card *card)
{
   4775c:	b570      	push	{r4, r5, r6, lr}
   4775e:	4604      	mov	r4, r0
	int ret, timeout = CONFIG_SD_DATA_TIMEOUT * 1000;
   47760:	4d0c      	ldr	r5, [pc, #48]	; (47794 <sdmmc_wait_ready+0x38>)
	bool busy = true;

	do {
		busy = sdhc_card_busy(card->sdhc);
   47762:	6820      	ldr	r0, [r4, #0]
   47764:	f00e ff2d 	bl	565c2 <sdhc_card_busy>
		if (!busy) {
   47768:	b138      	cbz	r0, 4777a <sdmmc_wait_ready+0x1e>
	z_impl_k_busy_wait(usec_to_wait);
   4776a:	207d      	movs	r0, #125	; 0x7d
			ret = sd_retry(sdmmc_read_status, card, CONFIG_SD_RETRY_COUNT);
			busy = (ret != 0);
		} else {
			/* Delay 125us before polling again */
			k_busy_wait(125);
			timeout -= 125;
   4776c:	3d7d      	subs	r5, #125	; 0x7d
   4776e:	f013 fa94 	bl	5ac9a <z_impl_k_busy_wait>
		}
	} while (busy && (timeout > 0));
   47772:	2d00      	cmp	r5, #0
   47774:	dcf5      	bgt.n	47762 <sdmmc_wait_ready+0x6>
   47776:	2001      	movs	r0, #1
   47778:	e00b      	b.n	47792 <sdmmc_wait_ready+0x36>
   4777a:	260c      	movs	r6, #12
	int ret = -ETIMEDOUT;
   4777c:	f06f 0073 	mvn.w	r0, #115	; 0x73
	while (retries-- >= 0) {
   47780:	3e01      	subs	r6, #1
   47782:	d004      	beq.n	4778e <sdmmc_wait_ready+0x32>
		/* Try cmd */
		ret = cmd(card);
   47784:	4620      	mov	r0, r4
   47786:	f00e ff4f 	bl	56628 <sdmmc_read_status>
		 * Functions have 3 possible responses:
		 * 0: success
		 * SD_RETRY: retry command
		 * other: does not retry
		 */
		if (ret != SD_RETRY) {
   4778a:	2801      	cmp	r0, #1
   4778c:	d0f8      	beq.n	47780 <sdmmc_wait_ready+0x24>
			break;
		}
	}
	return ret == SD_RETRY ? -ETIMEDOUT : ret;
   4778e:	2800      	cmp	r0, #0
   47790:	d1e7      	bne.n	47762 <sdmmc_wait_ready+0x6>
	return busy;
}
   47792:	bd70      	pop	{r4, r5, r6, pc}
   47794:	00989680 	.word	0x00989680

00047798 <sdmmc_set_bus_speed>:
{
   47798:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	switch (card->card_speed) {
   4779a:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
{
   4779e:	4606      	mov	r6, r0
	uint8_t *status = card->card_buffer;
   477a0:	f100 0378 	add.w	r3, r0, #120	; 0x78
	switch (card->card_speed) {
   477a4:	2a04      	cmp	r2, #4
   477a6:	d81e      	bhi.n	477e6 <sdmmc_set_bus_speed+0x4e>
   477a8:	e8df f002 	tbb	[pc, r2]
   477ac:	2a212427 	.word	0x2a212427
   477b0:	03          	.byte	0x03
   477b1:	00          	.byte	0x00
		timing = SDHC_TIMING_DDR50;
   477b2:	2507      	movs	r5, #7
	switch (card->card_speed) {
   477b4:	491f      	ldr	r1, [pc, #124]	; (47834 <sdmmc_set_bus_speed+0x9c>)
		card->switch_caps.uhs_max_dtr = SD_CLOCK_208MHZ;
   477b6:	6571      	str	r1, [r6, #84]	; 0x54
	ret = sdmmc_switch(card, SD_SWITCH_SET, SD_GRP_TIMING_MODE,
   477b8:	6830      	ldr	r0, [r6, #0]
   477ba:	2100      	movs	r1, #0
   477bc:	f00e ff82 	bl	566c4 <sdmmc_switch.constprop.0.isra.0>
	if (ret) {
   477c0:	4604      	mov	r4, r0
   477c2:	b988      	cbnz	r0, 477e8 <sdmmc_set_bus_speed+0x50>
	if ((status[16] & 0xF) != card->card_speed) {
   477c4:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
   477c8:	f896 2070 	ldrb.w	r2, [r6, #112]	; 0x70
   477cc:	f003 030f 	and.w	r3, r3, #15
   477d0:	429a      	cmp	r2, r3
   477d2:	d018      	beq.n	47806 <sdmmc_set_bus_speed+0x6e>
		LOG_WRN("Card did not accept new speed");
   477d4:	4b18      	ldr	r3, [pc, #96]	; (47838 <sdmmc_set_bus_speed+0xa0>)
   477d6:	2202      	movs	r2, #2
   477d8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   477dc:	4917      	ldr	r1, [pc, #92]	; (4783c <sdmmc_set_bus_speed+0xa4>)
   477de:	4603      	mov	r3, r0
   477e0:	9000      	str	r0, [sp, #0]
   477e2:	f00e ff60 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
		return 0;
   477e6:	2400      	movs	r4, #0
}
   477e8:	4620      	mov	r0, r4
   477ea:	b004      	add	sp, #16
   477ec:	bd70      	pop	{r4, r5, r6, pc}
		timing = SDHC_TIMING_SDR50;
   477ee:	2505      	movs	r5, #5
		break;
   477f0:	4913      	ldr	r1, [pc, #76]	; (47840 <sdmmc_set_bus_speed+0xa8>)
   477f2:	e7e0      	b.n	477b6 <sdmmc_set_bus_speed+0x1e>
		timing = SDHC_TIMING_SDR25;
   477f4:	2504      	movs	r5, #4
		break;
   477f6:	490f      	ldr	r1, [pc, #60]	; (47834 <sdmmc_set_bus_speed+0x9c>)
   477f8:	e7dd      	b.n	477b6 <sdmmc_set_bus_speed+0x1e>
		timing = SDHC_TIMING_SDR12;
   477fa:	2503      	movs	r5, #3
		break;
   477fc:	4911      	ldr	r1, [pc, #68]	; (47844 <sdmmc_set_bus_speed+0xac>)
   477fe:	e7da      	b.n	477b6 <sdmmc_set_bus_speed+0x1e>
	switch (card->card_speed) {
   47800:	2506      	movs	r5, #6
   47802:	4911      	ldr	r1, [pc, #68]	; (47848 <sdmmc_set_bus_speed+0xb0>)
   47804:	e7d7      	b.n	477b6 <sdmmc_set_bus_speed+0x1e>
		card->bus_io.clock = card->switch_caps.uhs_max_dtr;
   47806:	4631      	mov	r1, r6
   47808:	6d73      	ldr	r3, [r6, #84]	; 0x54
		card->bus_io.timing = timing;
   4780a:	72f5      	strb	r5, [r6, #11]
		card->bus_io.clock = card->switch_caps.uhs_max_dtr;
   4780c:	f841 3f04 	str.w	r3, [r1, #4]!
		ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47810:	6830      	ldr	r0, [r6, #0]
   47812:	f00e fecf 	bl	565b4 <sdhc_set_io>
		if (ret) {
   47816:	4604      	mov	r4, r0
   47818:	2800      	cmp	r0, #0
   4781a:	d0e4      	beq.n	477e6 <sdmmc_set_bus_speed+0x4e>
			LOG_ERR("Failed to change host bus speed");
   4781c:	4b0b      	ldr	r3, [pc, #44]	; (4784c <sdmmc_set_bus_speed+0xb4>)
   4781e:	2201      	movs	r2, #1
   47820:	9302      	str	r3, [sp, #8]
   47822:	2300      	movs	r3, #0
   47824:	4905      	ldr	r1, [pc, #20]	; (4783c <sdmmc_set_bus_speed+0xa4>)
   47826:	4618      	mov	r0, r3
   47828:	e9cd 3300 	strd	r3, r3, [sp]
   4782c:	f00e ff3b 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
			return ret;
   47830:	e7da      	b.n	477e8 <sdmmc_set_bus_speed+0x50>
   47832:	bf00      	nop
   47834:	02faf080 	.word	0x02faf080
   47838:	0005e135 	.word	0x0005e135
   4783c:	0005bfa4 	.word	0x0005bfa4
   47840:	05f5e100 	.word	0x05f5e100
   47844:	017d7840 	.word	0x017d7840
   47848:	0c65d400 	.word	0x0c65d400
   4784c:	0005e153 	.word	0x0005e153

00047850 <sdmmc_set_bus_width.constprop.0>:
static int sdmmc_set_bus_width(struct sd_card *card, enum sdhc_bus_width width)
   47850:	b510      	push	{r4, lr}
   47852:	4604      	mov	r4, r0
   47854:	b08a      	sub	sp, #40	; 0x28
	struct sdhc_command cmd = {0};
   47856:	2100      	movs	r1, #0
   47858:	2224      	movs	r2, #36	; 0x24
   4785a:	a801      	add	r0, sp, #4
   4785c:	f013 fb37 	bl	5aece <memset>
	ret = sdmmc_app_command(card, card->relative_addr);
   47860:	4620      	mov	r0, r4
   47862:	6e21      	ldr	r1, [r4, #96]	; 0x60
   47864:	f7ff ff3a 	bl	476dc <sdmmc_app_command>
	if (ret) {
   47868:	b9d0      	cbnz	r0, 478a0 <sdmmc_set_bus_width.constprop.0+0x50>
	cmd.opcode = SD_APP_SET_BUS_WIDTH;
   4786a:	2306      	movs	r3, #6
   4786c:	9301      	str	r3, [sp, #4]
	cmd.response_type = SD_RSP_TYPE_R1;
   4786e:	2301      	movs	r3, #1
   47870:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47872:	23c8      	movs	r3, #200	; 0xc8
   47874:	9309      	str	r3, [sp, #36]	; 0x24
		cmd.arg = 2U;
   47876:	2302      	movs	r3, #2
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47878:	4602      	mov	r2, r0
   4787a:	a901      	add	r1, sp, #4
   4787c:	6820      	ldr	r0, [r4, #0]
		cmd.arg = 2U;
   4787e:	9302      	str	r3, [sp, #8]
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47880:	f00e fe91 	bl	565a6 <sdhc_request>
	if (ret) {
   47884:	b960      	cbnz	r0, 478a0 <sdmmc_set_bus_width.constprop.0+0x50>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
   47886:	9b07      	ldr	r3, [sp, #28]
   47888:	2b01      	cmp	r3, #1
   4788a:	d103      	bne.n	47894 <sdmmc_set_bus_width.constprop.0+0x44>
		return (cmd->response[0U] & SD_R1_ERR_FLAGS);
   4788c:	4805      	ldr	r0, [pc, #20]	; (478a4 <sdmmc_set_bus_width.constprop.0+0x54>)
   4788e:	9b03      	ldr	r3, [sp, #12]
   47890:	4018      	ands	r0, r3
	if (ret) {
   47892:	b928      	cbnz	r0, 478a0 <sdmmc_set_bus_width.constprop.0+0x50>
	card->bus_io.bus_width = width;
   47894:	2304      	movs	r3, #4
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47896:	6820      	ldr	r0, [r4, #0]
	card->bus_io.bus_width = width;
   47898:	72a3      	strb	r3, [r4, #10]
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   4789a:	18e1      	adds	r1, r4, r3
   4789c:	f00e fe8a 	bl	565b4 <sdhc_set_io>
}
   478a0:	b00a      	add	sp, #40	; 0x28
   478a2:	bd10      	pop	{r4, pc}
   478a4:	fdf98008 	.word	0xfdf98008

000478a8 <sdmmc_card_init>:
{
   478a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
   478ac:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
   478b0:	4604      	mov	r4, r0
   478b2:	b095      	sub	sp, #84	; 0x54
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
   478b4:	2b00      	cmp	r3, #0
   478b6:	f000 80f8 	beq.w	47aaa <sdmmc_card_init+0x202>
	cmd.arg = arg;
   478ba:	233a      	movs	r3, #58	; 0x3a
   478bc:	2200      	movs	r2, #0
   478be:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
	cmd.response_type = SD_SPI_RSP_TYPE_R3;
   478c2:	2340      	movs	r3, #64	; 0x40
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   478c4:	6800      	ldr	r0, [r0, #0]
   478c6:	a90b      	add	r1, sp, #44	; 0x2c
	cmd.response_type = SD_SPI_RSP_TYPE_R3;
   478c8:	9311      	str	r3, [sp, #68]	; 0x44
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   478ca:	f00e fe6c 	bl	565a6 <sdhc_request>
	card->ocr = cmd.response[1];
   478ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		if (ret) {
   478d0:	4605      	mov	r5, r0
	card->ocr = cmd.response[1];
   478d2:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (ret) {
   478d4:	2800      	cmp	r0, #0
   478d6:	d178      	bne.n	479ca <sdmmc_card_init+0x122>
	cmd.opcode = SD_APP_SEND_OP_COND;
   478d8:	2329      	movs	r3, #41	; 0x29
		if (card->flags & SD_SDHC_FLAG) {
   478da:	6f66      	ldr	r6, [r4, #116]	; 0x74
   478dc:	f3c6 06c0 	ubfx	r6, r6, #3, #1
   478e0:	07b6      	lsls	r6, r6, #30
	cmd.arg = ocr_arg;
   478e2:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	cmd.response_type = (SD_RSP_TYPE_R3 | SD_SPI_RSP_TYPE_R1);
   478e6:	2314      	movs	r3, #20
   478e8:	9311      	str	r3, [sp, #68]	; 0x44
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   478ea:	23c8      	movs	r3, #200	; 0xc8
   478ec:	9313      	str	r3, [sp, #76]	; 0x4c
		ret = sdmmc_app_command(card, 0U);
   478ee:	2100      	movs	r1, #0
   478f0:	4620      	mov	r0, r4
   478f2:	f7ff fef3 	bl	476dc <sdmmc_app_command>
		if (ret == SD_RETRY) {
   478f6:	2801      	cmp	r0, #1
		ret = sdmmc_app_command(card, 0U);
   478f8:	4602      	mov	r2, r0
		if (ret == SD_RETRY) {
   478fa:	d030      	beq.n	4795e <sdmmc_card_init+0xb6>
		} else if (ret) {
   478fc:	2800      	cmp	r0, #0
   478fe:	f040 82d0 	bne.w	47ea2 <sdmmc_card_init+0x5fa>
		ret = sdhc_request(card->sdhc, &cmd, NULL);
   47902:	6820      	ldr	r0, [r4, #0]
   47904:	a90b      	add	r1, sp, #44	; 0x2c
   47906:	f00e fe4e 	bl	565a6 <sdhc_request>
		if (ret) {
   4790a:	4602      	mov	r2, r0
   4790c:	2800      	cmp	r0, #0
   4790e:	f040 82c8 	bne.w	47ea2 <sdmmc_card_init+0x5fa>
		if (ocr_arg == 0) {
   47912:	b12e      	cbz	r6, 47920 <sdmmc_card_init+0x78>
		if (card->host_props.is_spi) {
   47914:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
			if (!(cmd.response[0] & SD_SPI_R1IDLE_STATE)) {
   47918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		if (card->host_props.is_spi) {
   4791a:	b1d2      	cbz	r2, 47952 <sdmmc_card_init+0xaa>
			if (!(cmd.response[0] & SD_SPI_R1IDLE_STATE)) {
   4791c:	07df      	lsls	r7, r3, #31
   4791e:	d41b      	bmi.n	47958 <sdmmc_card_init+0xb0>
	cmd.opcode = SD_SPI_READ_OCR;
   47920:	233a      	movs	r3, #58	; 0x3a
	cmd.arg = arg;
   47922:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	cmd.response_type = SD_SPI_RSP_TYPE_R3;
   47926:	2340      	movs	r3, #64	; 0x40
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47928:	2200      	movs	r2, #0
   4792a:	6820      	ldr	r0, [r4, #0]
   4792c:	a90b      	add	r1, sp, #44	; 0x2c
	cmd.response_type = SD_SPI_RSP_TYPE_R3;
   4792e:	9311      	str	r3, [sp, #68]	; 0x44
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47930:	f00e fe39 	bl	565a6 <sdhc_request>
	card->ocr = cmd.response[1];
   47934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (ret) {
   47936:	4605      	mov	r5, r0
	card->ocr = cmd.response[1];
   47938:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (ret) {
   4793a:	b308      	cbz	r0, 47980 <sdmmc_card_init+0xd8>
		LOG_ERR("Failed to query card OCR");
   4793c:	4ba1      	ldr	r3, [pc, #644]	; (47bc4 <sdmmc_card_init+0x31c>)
		LOG_ERR("Failed to raise bus frequency to 25MHz");
   4793e:	9302      	str	r3, [sp, #8]
   47940:	2300      	movs	r3, #0
   47942:	2201      	movs	r2, #1
   47944:	4618      	mov	r0, r3
   47946:	e9cd 3300 	strd	r3, r3, [sp]
   4794a:	499f      	ldr	r1, [pc, #636]	; (47bc8 <sdmmc_card_init+0x320>)
   4794c:	f00e feab 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
		return ret;
   47950:	e03b      	b.n	479ca <sdmmc_card_init+0x122>
			if ((cmd.response[0U] & SD_OCR_PWR_BUSY_FLAG)) {
   47952:	2b00      	cmp	r3, #0
   47954:	f2c0 82a3 	blt.w	47e9e <sdmmc_card_init+0x5f6>
	k_msleep(millis);
   47958:	200a      	movs	r0, #10
   4795a:	f00e fee5 	bl	56728 <k_msleep.isra.0>
	for (retries = 0; retries < CONFIG_SD_OCR_RETRY_COUNT; retries++) {
   4795e:	3501      	adds	r5, #1
   47960:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   47964:	d1c3      	bne.n	478ee <sdmmc_card_init+0x46>
		LOG_ERR("Card never left busy state");
   47966:	4b99      	ldr	r3, [pc, #612]	; (47bcc <sdmmc_card_init+0x324>)
   47968:	2201      	movs	r2, #1
   4796a:	9302      	str	r3, [sp, #8]
   4796c:	2300      	movs	r3, #0
   4796e:	4996      	ldr	r1, [pc, #600]	; (47bc8 <sdmmc_card_init+0x320>)
   47970:	4618      	mov	r0, r3
   47972:	e9cd 3300 	strd	r3, r3, [sp]
   47976:	f00e fe96 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   4797a:	f06f 0573 	mvn.w	r5, #115	; 0x73
   4797e:	e024      	b.n	479ca <sdmmc_card_init+0x122>
	if (card->ocr & SD_OCR_CARD_CAP_FLAG) {
   47980:	005d      	lsls	r5, r3, #1
		card->flags |= SD_HIGH_CAPACITY_FLAG;
   47982:	bf48      	it	mi
   47984:	6f62      	ldrmi	r2, [r4, #116]	; 0x74
		(!card->host_props.is_spi) &&
   47986:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
		card->flags |= SD_HIGH_CAPACITY_FLAG;
   4798a:	bf44      	itt	mi
   4798c:	f042 0202 	orrmi.w	r2, r2, #2
   47990:	6762      	strmi	r2, [r4, #116]	; 0x74
	if (card->ocr & SD_OCR_SWITCH_18_ACCEPT_FLAG) {
   47992:	01d8      	lsls	r0, r3, #7
		card->flags |= SD_1800MV_FLAG;
   47994:	bf42      	ittt	mi
   47996:	6f62      	ldrmi	r2, [r4, #116]	; 0x74
   47998:	f042 0220 	orrmi.w	r2, r2, #32
   4799c:	6762      	strmi	r2, [r4, #116]	; 0x74
	if (card->ocr & SD_OCR_VDD29_30FLAG) {
   4799e:	0399      	lsls	r1, r3, #14
		card->flags |= SD_3000MV_FLAG;
   479a0:	bf42      	ittt	mi
   479a2:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
   479a4:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
   479a8:	6763      	strmi	r3, [r4, #116]	; 0x74
	if ((card->flags & SD_1800MV_FLAG) &&
   479aa:	6f63      	ldr	r3, [r4, #116]	; 0x74
   479ac:	069a      	lsls	r2, r3, #26
   479ae:	d578      	bpl.n	47aa2 <sdmmc_card_init+0x1fa>
   479b0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   479b4:	079b      	lsls	r3, r3, #30
   479b6:	d574      	bpl.n	47aa2 <sdmmc_card_init+0x1fa>
		(!card->host_props.is_spi) &&
   479b8:	b15d      	cbz	r5, 479d2 <sdmmc_card_init+0x12a>
		ret = sdmmc_spi_read_cxd(card, SD_SEND_CID, cid);
   479ba:	210a      	movs	r1, #10
   479bc:	4620      	mov	r0, r4
   479be:	aa0b      	add	r2, sp, #44	; 0x2c
   479c0:	f00e fe06 	bl	565d0 <sdmmc_spi_read_cxd>
	if (ret) {
   479c4:	4605      	mov	r5, r0
   479c6:	2800      	cmp	r0, #0
   479c8:	d072      	beq.n	47ab0 <sdmmc_card_init+0x208>
}
   479ca:	4628      	mov	r0, r5
   479cc:	b015      	add	sp, #84	; 0x54
   479ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct sdhc_command cmd = {0};
   479d2:	221c      	movs	r2, #28
   479d4:	4629      	mov	r1, r5
   479d6:	a80c      	add	r0, sp, #48	; 0x30
   479d8:	f013 fa79 	bl	5aece <memset>
	cmd.opcode = SD_VOL_SWITCH;
   479dc:	230b      	movs	r3, #11
   479de:	930b      	str	r3, [sp, #44]	; 0x2c
	cmd.response_type = SD_RSP_TYPE_R1;
   479e0:	2301      	movs	r3, #1
   479e2:	9311      	str	r3, [sp, #68]	; 0x44
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   479e4:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   479e6:	462a      	mov	r2, r5
   479e8:	6820      	ldr	r0, [r4, #0]
   479ea:	a90b      	add	r1, sp, #44	; 0x2c
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   479ec:	9313      	str	r3, [sp, #76]	; 0x4c
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   479ee:	f00e fdda 	bl	565a6 <sdhc_request>
	if (ret) {
   479f2:	2800      	cmp	r0, #0
   479f4:	d138      	bne.n	47a68 <sdmmc_card_init+0x1c0>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
   479f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   479f8:	2b01      	cmp	r3, #1
   479fa:	d103      	bne.n	47a04 <sdmmc_card_init+0x15c>
	if (ret) {
   479fc:	4b74      	ldr	r3, [pc, #464]	; (47bd0 <sdmmc_card_init+0x328>)
   479fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   47a00:	4013      	ands	r3, r2
   47a02:	bb8b      	cbnz	r3, 47a68 <sdmmc_card_init+0x1c0>
	if (!(sdhc_card_busy(card->sdhc))) {
   47a04:	6820      	ldr	r0, [r4, #0]
   47a06:	f00e fddc 	bl	565c2 <sdhc_card_busy>
   47a0a:	b930      	cbnz	r0, 47a1a <sdmmc_card_init+0x172>
   47a0c:	2001      	movs	r0, #1
   47a0e:	f00e fe8b 	bl	56728 <k_msleep.isra.0>
		if (!sdhc_card_busy(card->sdhc)) {
   47a12:	6820      	ldr	r0, [r4, #0]
   47a14:	f00e fdd5 	bl	565c2 <sdhc_card_busy>
   47a18:	b330      	cbz	r0, 47a68 <sdmmc_card_init+0x1c0>
	card->bus_io.clock = 0;
   47a1a:	4626      	mov	r6, r4
   47a1c:	2300      	movs	r3, #0
	sd_clock = card->bus_io.clock;
   47a1e:	f8d4 8004 	ldr.w	r8, [r4, #4]
	card->bus_io.clock = 0;
   47a22:	f846 3f04 	str.w	r3, [r6, #4]!
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47a26:	4631      	mov	r1, r6
   47a28:	6820      	ldr	r0, [r4, #0]
   47a2a:	f00e fdc3 	bl	565b4 <sdhc_set_io>
	if (ret) {
   47a2e:	b9d8      	cbnz	r0, 47a68 <sdmmc_card_init+0x1c0>
	card->bus_io.signal_voltage = SD_VOL_1_8_V;
   47a30:	2703      	movs	r7, #3
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47a32:	4631      	mov	r1, r6
   47a34:	6820      	ldr	r0, [r4, #0]
	card->bus_io.signal_voltage = SD_VOL_1_8_V;
   47a36:	7367      	strb	r7, [r4, #13]
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47a38:	f00e fdbc 	bl	565b4 <sdhc_set_io>
	if (ret) {
   47a3c:	4605      	mov	r5, r0
   47a3e:	b998      	cbnz	r0, 47a68 <sdmmc_card_init+0x1c0>
   47a40:	200a      	movs	r0, #10
   47a42:	f00e fe71 	bl	56728 <k_msleep.isra.0>
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47a46:	4631      	mov	r1, r6
   47a48:	6820      	ldr	r0, [r4, #0]
	card->bus_io.clock = sd_clock;
   47a4a:	f8c4 8004 	str.w	r8, [r4, #4]
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47a4e:	f00e fdb1 	bl	565b4 <sdhc_set_io>
	if (ret) {
   47a52:	b1a0      	cbz	r0, 47a7e <sdmmc_card_init+0x1d6>
		LOG_ERR("Failed to restart SD clock");
   47a54:	4b5f      	ldr	r3, [pc, #380]	; (47bd4 <sdmmc_card_init+0x32c>)
   47a56:	2201      	movs	r2, #1
   47a58:	e9cd 5301 	strd	r5, r3, [sp, #4]
   47a5c:	4628      	mov	r0, r5
   47a5e:	462b      	mov	r3, r5
   47a60:	4959      	ldr	r1, [pc, #356]	; (47bc8 <sdmmc_card_init+0x320>)
   47a62:	9500      	str	r5, [sp, #0]
   47a64:	f00e fe1f 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
			card->host_props.host_caps.vol_180_support = false;
   47a68:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
			return SD_RESTART;
   47a6c:	2503      	movs	r5, #3
			card->host_props.host_caps.vol_180_support = false;
   47a6e:	f36f 0341 	bfc	r3, #1, #1
   47a72:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			card->status = CARD_ERROR;
   47a76:	2301      	movs	r3, #1
   47a78:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
			return SD_RESTART;
   47a7c:	e7a5      	b.n	479ca <sdmmc_card_init+0x122>
   47a7e:	2001      	movs	r0, #1
   47a80:	f00e fe52 	bl	56728 <k_msleep.isra.0>
	if (sdhc_card_busy(card->sdhc)) {
   47a84:	6820      	ldr	r0, [r4, #0]
   47a86:	f00e fd9c 	bl	565c2 <sdhc_card_busy>
   47a8a:	4603      	mov	r3, r0
   47a8c:	2800      	cmp	r0, #0
   47a8e:	d1eb      	bne.n	47a68 <sdmmc_card_init+0x1c0>
	LOG_INF("Card switched to 1.8V signaling");
   47a90:	4a51      	ldr	r2, [pc, #324]	; (47bd8 <sdmmc_card_init+0x330>)
	card->card_voltage = SD_VOL_1_8_V;
   47a92:	7427      	strb	r7, [r4, #16]
	LOG_INF("Card switched to 1.8V signaling");
   47a94:	494c      	ldr	r1, [pc, #304]	; (47bc8 <sdmmc_card_init+0x320>)
   47a96:	e9cd 0201 	strd	r0, r2, [sp, #4]
   47a9a:	9000      	str	r0, [sp, #0]
   47a9c:	463a      	mov	r2, r7
   47a9e:	f00e fe02 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
   47aa2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   47aa6:	2b00      	cmp	r3, #0
   47aa8:	d187      	bne.n	479ba <sdmmc_card_init+0x112>
		return -ENOTSUP;
   47aaa:	f06f 0585 	mvn.w	r5, #133	; 0x85
   47aae:	e78c      	b.n	479ca <sdmmc_card_init+0x122>
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
   47ab0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   47ab4:	2b00      	cmp	r3, #0
   47ab6:	d0f8      	beq.n	47aaa <sdmmc_card_init+0x202>
		ret = sdmmc_spi_read_cxd(card, SD_SEND_CSD, csd);
   47ab8:	2109      	movs	r1, #9
   47aba:	4620      	mov	r0, r4
   47abc:	aa0b      	add	r2, sp, #44	; 0x2c
   47abe:	f00e fd87 	bl	565d0 <sdmmc_spi_read_cxd>
	if (ret) {
   47ac2:	4605      	mov	r5, r0
   47ac4:	2800      	cmp	r0, #0
   47ac6:	d180      	bne.n	479ca <sdmmc_card_init+0x122>
	csd->cmd_class = (uint16_t)((raw_csd[2U] &
   47ac8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
	switch (csd->csd_structure) {
   47acc:	0f92      	lsrs	r2, r2, #30
   47ace:	d010      	beq.n	47af2 <sdmmc_card_init+0x24a>
   47ad0:	2a01      	cmp	r2, #1
   47ad2:	d026      	beq.n	47b22 <sdmmc_card_init+0x27a>
	if (card->host_props.f_max < SD_CLOCK_25MHZ) {
   47ad4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   47ad6:	4e41      	ldr	r6, [pc, #260]	; (47bdc <sdmmc_card_init+0x334>)
   47ad8:	42b3      	cmp	r3, r6
   47ada:	d92b      	bls.n	47b34 <sdmmc_card_init+0x28c>
   47adc:	4b40      	ldr	r3, [pc, #256]	; (47be0 <sdmmc_card_init+0x338>)
		card->bus_io.clock = card->host_props.f_max;
   47ade:	4621      	mov	r1, r4
   47ae0:	f841 3f04 	str.w	r3, [r1, #4]!
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47ae4:	6820      	ldr	r0, [r4, #0]
   47ae6:	f00e fd65 	bl	565b4 <sdhc_set_io>
	if (ret) {
   47aea:	4605      	mov	r5, r0
   47aec:	b378      	cbz	r0, 47b4e <sdmmc_card_init+0x2a6>
		LOG_ERR("Failed to raise bus frequency to 25MHz");
   47aee:	4b3d      	ldr	r3, [pc, #244]	; (47be4 <sdmmc_card_init+0x33c>)
   47af0:	e725      	b.n	4793e <sdmmc_card_init+0x96>
		csd->device_size = (uint32_t)((raw_csd[2U] &
   47af2:	f640 72fc 	movw	r2, #4092	; 0xffc
		csd->device_size |= (uint32_t)((raw_csd[1U] &
   47af6:	990c      	ldr	r1, [sp, #48]	; 0x30
	csd->read_blk_len = (uint8_t)((raw_csd[2U] &
   47af8:	f3c3 4003 	ubfx	r0, r3, #16, #4
		csd->device_size = (uint32_t)((raw_csd[2U] &
   47afc:	ea02 0383 	and.w	r3, r2, r3, lsl #2
		csd->device_size |= (uint32_t)((raw_csd[1U] &
   47b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
		csd->dev_size_mul = (uint8_t)((raw_csd[1U] &
   47b04:	f3c1 31c2 	ubfx	r1, r1, #15, #3
		tmp_blk_count = ((csd->device_size + 1U) <<
   47b08:	3301      	adds	r3, #1
			(csd->dev_size_mul + 2U));
   47b0a:	3102      	adds	r1, #2
		if (tmp_blk_size != SDMMC_DEFAULT_BLOCK_SIZE) {
   47b0c:	2809      	cmp	r0, #9
		tmp_blk_count = ((csd->device_size + 1U) <<
   47b0e:	fa03 f301 	lsl.w	r3, r3, r1
		if (tmp_blk_size != SDMMC_DEFAULT_BLOCK_SIZE) {
   47b12:	d001      	beq.n	47b18 <sdmmc_card_init+0x270>
			tmp_blk_count = (tmp_blk_count * tmp_blk_size);
   47b14:	4083      	lsls	r3, r0
			tmp_blk_count = (tmp_blk_count / tmp_blk_size);
   47b16:	0a5b      	lsrs	r3, r3, #9
			*blk_count = tmp_blk_count;
   47b18:	6663      	str	r3, [r4, #100]	; 0x64
			*blk_size = tmp_blk_size;
   47b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
   47b1e:	66a3      	str	r3, [r4, #104]	; 0x68
   47b20:	e7d8      	b.n	47ad4 <sdmmc_card_init+0x22c>
			0xFFFF0000U) >> 16U);
   47b22:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
			0x3FU) << 16U);
   47b26:	041b      	lsls	r3, r3, #16
		csd->device_size = (uint32_t)((raw_csd[2U] &
   47b28:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
		csd->device_size |= (uint32_t)((raw_csd[1U] &
   47b2c:	4313      	orrs	r3, r2
		tmp_blk_count = ((csd->device_size + 1U) * 1024U);
   47b2e:	3301      	adds	r3, #1
   47b30:	029b      	lsls	r3, r3, #10
   47b32:	e7f1      	b.n	47b18 <sdmmc_card_init+0x270>
		LOG_INF("Maximum SD clock is under 25MHz, using clock of %dHz",
   47b34:	9303      	str	r3, [sp, #12]
   47b36:	4b2c      	ldr	r3, [pc, #176]	; (47be8 <sdmmc_card_init+0x340>)
   47b38:	2203      	movs	r2, #3
   47b3a:	9302      	str	r3, [sp, #8]
   47b3c:	2300      	movs	r3, #0
   47b3e:	4922      	ldr	r1, [pc, #136]	; (47bc8 <sdmmc_card_init+0x320>)
   47b40:	4618      	mov	r0, r3
   47b42:	e9cd 3300 	strd	r3, r3, [sp]
   47b46:	f00e fdae 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
		card->bus_io.clock = card->host_props.f_max;
   47b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   47b4c:	e7c7      	b.n	47ade <sdmmc_card_init+0x236>
	struct sdhc_command cmd = {0};
   47b4e:	4601      	mov	r1, r0
   47b50:	2224      	movs	r2, #36	; 0x24
   47b52:	a80b      	add	r0, sp, #44	; 0x2c
   47b54:	f013 f9bb 	bl	5aece <memset>
	struct sdhc_data data = {0};
   47b58:	4629      	mov	r1, r5
   47b5a:	2218      	movs	r2, #24
   47b5c:	a805      	add	r0, sp, #20
   47b5e:	f013 f9b6 	bl	5aece <memset>
	ret = sdmmc_app_command(card, card->relative_addr);
   47b62:	4620      	mov	r0, r4
   47b64:	6e21      	ldr	r1, [r4, #96]	; 0x60
   47b66:	f7ff fdb9 	bl	476dc <sdmmc_app_command>
	if (ret) {
   47b6a:	4605      	mov	r5, r0
   47b6c:	2800      	cmp	r0, #0
   47b6e:	f47f af2c 	bne.w	479ca <sdmmc_card_init+0x122>
	cmd.opcode = SD_APP_SEND_SCR;
   47b72:	2333      	movs	r3, #51	; 0x33
	cmd.arg = 0;
   47b74:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
	cmd.response_type =  (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   47b78:	2311      	movs	r3, #17
   47b7a:	9311      	str	r3, [sp, #68]	; 0x44
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47b7c:	23c8      	movs	r3, #200	; 0xc8
	data.blocks = 1U;
   47b7e:	2708      	movs	r7, #8
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47b80:	9313      	str	r3, [sp, #76]	; 0x4c
	data.blocks = 1U;
   47b82:	2301      	movs	r3, #1
   47b84:	e9cd 7306 	strd	r7, r3, [sp, #24]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   47b88:	f242 7310 	movw	r3, #10000	; 0x2710
	ret = sdhc_request(card->sdhc, &cmd, &data);
   47b8c:	6820      	ldr	r0, [r4, #0]
	uint32_t *scr = (uint32_t *)card->card_buffer;
   47b8e:	f104 0878 	add.w	r8, r4, #120	; 0x78
	ret = sdhc_request(card->sdhc, &cmd, &data);
   47b92:	aa05      	add	r2, sp, #20
   47b94:	a90b      	add	r1, sp, #44	; 0x2c
	data.data = scr;
   47b96:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   47b9a:	930a      	str	r3, [sp, #40]	; 0x28
	ret = sdhc_request(card->sdhc, &cmd, &data);
   47b9c:	f00e fd03 	bl	565a6 <sdhc_request>
	if (ret) {
   47ba0:	4605      	mov	r5, r0
   47ba2:	2800      	cmp	r0, #0
   47ba4:	f47f af11 	bne.w	479ca <sdmmc_card_init+0x122>
	raw_scr[0] = sys_be32_to_cpu(scr[0]);
   47ba8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   47baa:	ba0a      	rev	r2, r1
	if ((uint8_t)((raw_scr[0U] & 0x8000U) >> 15U)) {
   47bac:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
	scr->sd_spec = (uint8_t)((raw_scr[0U] & 0xF000000U) >> 24U);
   47bb0:	f001 030f 	and.w	r3, r1, #15
	if ((uint8_t)((raw_scr[0U] & 0x8000U) >> 15U)) {
   47bb4:	b2d2      	uxtb	r2, r2
   47bb6:	d119      	bne.n	47bec <sdmmc_card_init+0x344>
	switch (scr->sd_spec) {
   47bb8:	2b01      	cmp	r3, #1
   47bba:	d069      	beq.n	47c90 <sdmmc_card_init+0x3e8>
   47bbc:	2b02      	cmp	r3, #2
   47bbe:	d119      	bne.n	47bf4 <sdmmc_card_init+0x34c>
		tmp_version = SD_SPEC_VER2_0;
   47bc0:	2704      	movs	r7, #4
   47bc2:	e019      	b.n	47bf8 <sdmmc_card_init+0x350>
   47bc4:	0005e173 	.word	0x0005e173
   47bc8:	0005bfa4 	.word	0x0005bfa4
   47bcc:	0005e2db 	.word	0x0005e2db
   47bd0:	fdf98008 	.word	0xfdf98008
   47bd4:	0005e18c 	.word	0x0005e18c
   47bd8:	0005e1a7 	.word	0x0005e1a7
   47bdc:	017d783f 	.word	0x017d783f
   47be0:	017d7840 	.word	0x017d7840
   47be4:	0005e1fc 	.word	0x0005e1fc
   47be8:	0005e1c7 	.word	0x0005e1c7
	switch (scr->sd_spec) {
   47bec:	2b01      	cmp	r3, #1
   47bee:	d04f      	beq.n	47c90 <sdmmc_card_init+0x3e8>
   47bf0:	2b02      	cmp	r3, #2
   47bf2:	d001      	beq.n	47bf8 <sdmmc_card_init+0x350>
   47bf4:	b90b      	cbnz	r3, 47bfa <sdmmc_card_init+0x352>
   47bf6:	2701      	movs	r7, #1
		*version = tmp_version;
   47bf8:	66e7      	str	r7, [r4, #108]	; 0x6c
	if (card_scr.sd_width & 0x4U) {
   47bfa:	0549      	lsls	r1, r1, #21
		card->flags |= SD_4BITS_WIDTH;
   47bfc:	bf42      	ittt	mi
   47bfe:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
   47c00:	f043 0304 	orrmi.w	r3, r3, #4
   47c04:	6763      	strmi	r3, [r4, #116]	; 0x74
	if (card_scr.cmd_support & 0x1U) {
   47c06:	07d3      	lsls	r3, r2, #31
		card->flags |= SD_SPEED_CLASS_CONTROL_FLAG;
   47c08:	bf42      	ittt	mi
   47c0a:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
   47c0c:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
   47c10:	6763      	strmi	r3, [r4, #116]	; 0x74
	if (card_scr.cmd_support & 0x2U) {
   47c12:	0797      	lsls	r7, r2, #30
		card->flags |= SD_CMD23_FLAG;
   47c14:	bf42      	ittt	mi
   47c16:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
   47c18:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
   47c1c:	6763      	strmi	r3, [r4, #116]	; 0x74
	if ((card->flags & SD_1800MV_FLAG) &&
   47c1e:	6f61      	ldr	r1, [r4, #116]	; 0x74
   47c20:	0688      	lsls	r0, r1, #26
   47c22:	f140 80e7 	bpl.w	47df4 <sdmmc_card_init+0x54c>
		props->host_caps.uhs_2_support |
   47c26:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	return (props->host_caps.sdr50_support |
   47c2a:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
		props->host_caps.uhs_2_support |
   47c2e:	f3c2 0380 	ubfx	r3, r2, #2, #1
		props->host_caps.sdr104_support |
   47c32:	f3c2 0700 	ubfx	r7, r2, #0, #1
	return (props->host_caps.sdr50_support |
   47c36:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
		props->host_caps.uhs_2_support |
   47c3a:	433b      	orrs	r3, r7
		props->host_caps.ddr50_support)
   47c3c:	f3c2 0240 	ubfx	r2, r2, #1, #1
		props->host_caps.sdr104_support |
   47c40:	4313      	orrs	r3, r2
	if ((card->flags & SD_1800MV_FLAG) &&
   47c42:	ea13 0350 	ands.w	r3, r3, r0, lsr #1
   47c46:	f000 80d5 	beq.w	47df4 <sdmmc_card_init+0x54c>
		sdmmc_host_uhs(&card->host_props) &&
   47c4a:	f894 9048 	ldrb.w	r9, [r4, #72]	; 0x48
   47c4e:	f1b9 0f00 	cmp.w	r9, #0
   47c52:	f040 80cf 	bne.w	47df4 <sdmmc_card_init+0x54c>
	ret = sdmmc_set_bus_width(card, SDHC_BUS_WIDTH4BIT);
   47c56:	4620      	mov	r0, r4
   47c58:	f7ff fdfa 	bl	47850 <sdmmc_set_bus_width.constprop.0>
	if (ret) {
   47c5c:	4607      	mov	r7, r0
   47c5e:	b1c8      	cbz	r0, 47c94 <sdmmc_card_init+0x3ec>
		LOG_ERR("Failed to change card bus width to 4 bits");
   47c60:	4b91      	ldr	r3, [pc, #580]	; (47ea8 <sdmmc_card_init+0x600>)
   47c62:	2201      	movs	r2, #1
   47c64:	e9cd 9301 	strd	r9, r3, [sp, #4]
   47c68:	4648      	mov	r0, r9
   47c6a:	464b      	mov	r3, r9
   47c6c:	498f      	ldr	r1, [pc, #572]	; (47eac <sdmmc_card_init+0x604>)
   47c6e:	f8cd 9000 	str.w	r9, [sp]
   47c72:	f00e fd18 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
   47c76:	463e      	mov	r6, r7
			LOG_ERR("UHS card init failed");
   47c78:	4b8d      	ldr	r3, [pc, #564]	; (47eb0 <sdmmc_card_init+0x608>)
			LOG_ERR("HS card init failed");
   47c7a:	9302      	str	r3, [sp, #8]
   47c7c:	2300      	movs	r3, #0
   47c7e:	2201      	movs	r2, #1
   47c80:	4618      	mov	r0, r3
   47c82:	e9cd 3300 	strd	r3, r3, [sp]
   47c86:	4989      	ldr	r1, [pc, #548]	; (47eac <sdmmc_card_init+0x604>)
   47c88:	f00e fd0d 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
   47c8c:	4635      	mov	r5, r6
   47c8e:	e69c      	b.n	479ca <sdmmc_card_init+0x122>
		tmp_version = SD_SPEC_VER1_1;
   47c90:	2702      	movs	r7, #2
   47c92:	e7b1      	b.n	47bf8 <sdmmc_card_init+0x350>
	if (card->host_props.host_caps.sdr104_support &&
   47c94:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   47c98:	07da      	lsls	r2, r3, #31
   47c9a:	d534      	bpl.n	47d06 <sdmmc_card_init+0x45e>
   47c9c:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
   47ca0:	0710      	lsls	r0, r2, #28
   47ca2:	d530      	bpl.n	47d06 <sdmmc_card_init+0x45e>
		(card->switch_caps.bus_speed & UHS_SDR104_BUS_SPEED) &&
   47ca4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   47ca6:	4a83      	ldr	r2, [pc, #524]	; (47eb4 <sdmmc_card_init+0x60c>)
   47ca8:	4291      	cmp	r1, r2
   47caa:	d92c      	bls.n	47d06 <sdmmc_card_init+0x45e>
		card->card_speed = SD_TIMING_SDR104;
   47cac:	2203      	movs	r2, #3
		card->card_speed = SD_TIMING_SDR12;
   47cae:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
	if (card->host_props.host_caps.drv_type_c_support &&
   47cb2:	06d8      	lsls	r0, r3, #27
   47cb4:	d44e      	bmi.n	47d54 <sdmmc_card_init+0x4ac>
		(card->card_speed != SD_TIMING_SDR104) &&
   47cb6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
	if ((card->card_speed != SD_TIMING_SDR50) &&
   47cba:	3b02      	subs	r3, #2
   47cbc:	2b02      	cmp	r3, #2
   47cbe:	d959      	bls.n	47d74 <sdmmc_card_init+0x4cc>
	ret = sdmmc_set_bus_speed(card);
   47cc0:	4620      	mov	r0, r4
   47cc2:	f7ff fd69 	bl	47798 <sdmmc_set_bus_speed>
	if (ret) {
   47cc6:	4606      	mov	r6, r0
   47cc8:	2800      	cmp	r0, #0
   47cca:	d1d5      	bne.n	47c78 <sdmmc_card_init+0x3d0>
		card->card_speed == SD_TIMING_SDR104 ||
   47ccc:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
	if (card->card_speed == SD_TIMING_SDR50 ||
   47cd0:	3b02      	subs	r3, #2
   47cd2:	2b02      	cmp	r3, #2
   47cd4:	f63f ae79 	bhi.w	479ca <sdmmc_card_init+0x122>
		ret = sdhc_execute_tuning(card->sdhc);
   47cd8:	6820      	ldr	r0, [r4, #0]
	if (!api->execute_tuning) {
   47cda:	6883      	ldr	r3, [r0, #8]
   47cdc:	691b      	ldr	r3, [r3, #16]
   47cde:	2b00      	cmp	r3, #0
   47ce0:	f000 8085 	beq.w	47dee <sdmmc_card_init+0x546>
	return api->execute_tuning(dev);
   47ce4:	4798      	blx	r3
		if (ret) {
   47ce6:	4606      	mov	r6, r0
   47ce8:	2800      	cmp	r0, #0
   47cea:	f43f ae6e 	beq.w	479ca <sdmmc_card_init+0x122>
			LOG_ERR("SD tuning failed: %d", ret);
   47cee:	4b72      	ldr	r3, [pc, #456]	; (47eb8 <sdmmc_card_init+0x610>)
   47cf0:	2201      	movs	r2, #1
   47cf2:	9302      	str	r3, [sp, #8]
   47cf4:	2300      	movs	r3, #0
   47cf6:	496d      	ldr	r1, [pc, #436]	; (47eac <sdmmc_card_init+0x604>)
   47cf8:	4618      	mov	r0, r3
   47cfa:	e9cd 3300 	strd	r3, r3, [sp]
   47cfe:	9603      	str	r6, [sp, #12]
   47d00:	f00e fcd1 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
		if (ret) {
   47d04:	e7b8      	b.n	47c78 <sdmmc_card_init+0x3d0>
	} else if (card->host_props.host_caps.ddr50_support &&
   47d06:	0799      	lsls	r1, r3, #30
   47d08:	d509      	bpl.n	47d1e <sdmmc_card_init+0x476>
   47d0a:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
   47d0e:	06d2      	lsls	r2, r2, #27
   47d10:	d505      	bpl.n	47d1e <sdmmc_card_init+0x476>
		(card->switch_caps.bus_speed & UHS_DDR50_BUS_SPEED) &&
   47d12:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   47d14:	4a69      	ldr	r2, [pc, #420]	; (47ebc <sdmmc_card_init+0x614>)
   47d16:	4291      	cmp	r1, r2
   47d18:	d901      	bls.n	47d1e <sdmmc_card_init+0x476>
		card->card_speed = SD_TIMING_DDR50;
   47d1a:	2204      	movs	r2, #4
   47d1c:	e7c7      	b.n	47cae <sdmmc_card_init+0x406>
	} else if (card->host_props.host_caps.sdr50_support &&
   47d1e:	f994 2037 	ldrsb.w	r2, [r4, #55]	; 0x37
   47d22:	2a00      	cmp	r2, #0
   47d24:	da09      	bge.n	47d3a <sdmmc_card_init+0x492>
   47d26:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
   47d2a:	0750      	lsls	r0, r2, #29
   47d2c:	d505      	bpl.n	47d3a <sdmmc_card_init+0x492>
		(card->switch_caps.bus_speed & UHS_SDR50_BUS_SPEED) &&
   47d2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   47d30:	4a63      	ldr	r2, [pc, #396]	; (47ec0 <sdmmc_card_init+0x618>)
   47d32:	4291      	cmp	r1, r2
   47d34:	d901      	bls.n	47d3a <sdmmc_card_init+0x492>
		card->card_speed = SD_TIMING_SDR50;
   47d36:	2202      	movs	r2, #2
   47d38:	e7b9      	b.n	47cae <sdmmc_card_init+0x406>
	} else if (card->host_props.host_caps.high_spd_support &&
   47d3a:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   47d3e:	06d1      	lsls	r1, r2, #27
   47d40:	d5b7      	bpl.n	47cb2 <sdmmc_card_init+0x40a>
   47d42:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
   47d46:	07d2      	lsls	r2, r2, #31
   47d48:	d5b3      	bpl.n	47cb2 <sdmmc_card_init+0x40a>
		(card->switch_caps.bus_speed & UHS_SDR12_BUS_SPEED) &&
   47d4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   47d4c:	42b2      	cmp	r2, r6
   47d4e:	d9b0      	bls.n	47cb2 <sdmmc_card_init+0x40a>
		card->card_speed = SD_TIMING_SDR12;
   47d50:	2200      	movs	r2, #0
   47d52:	e7ac      	b.n	47cae <sdmmc_card_init+0x406>
	if (card->host_props.host_caps.drv_type_c_support &&
   47d54:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
   47d58:	0759      	lsls	r1, r3, #29
   47d5a:	d5ac      	bpl.n	47cb6 <sdmmc_card_init+0x40e>
		card->bus_io.driver_type = SD_DRIVER_TYPE_C;
   47d5c:	2304      	movs	r3, #4
		ret = sdmmc_switch(card, SD_SWITCH_SET,
   47d5e:	2202      	movs	r2, #2
		card->bus_io.driver_type = SD_DRIVER_TYPE_C;
   47d60:	7323      	strb	r3, [r4, #12]
		ret = sdmmc_switch(card, SD_SWITCH_SET,
   47d62:	4611      	mov	r1, r2
   47d64:	4643      	mov	r3, r8
   47d66:	6820      	ldr	r0, [r4, #0]
   47d68:	f00e fcac 	bl	566c4 <sdmmc_switch.constprop.0.isra.0>
	if (ret) {
   47d6c:	4606      	mov	r6, r0
   47d6e:	2800      	cmp	r0, #0
   47d70:	d182      	bne.n	47c78 <sdmmc_card_init+0x3d0>
   47d72:	e7a0      	b.n	47cb6 <sdmmc_card_init+0x40e>
	} else if (card->host_props.max_current_180 >= 800 &&
   47d74:	6c63      	ldr	r3, [r4, #68]	; 0x44
   47d76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   47d7a:	d328      	bcc.n	47dce <sdmmc_card_init+0x526>
   47d7c:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
   47d80:	071a      	lsls	r2, r3, #28
   47d82:	d42e      	bmi.n	47de2 <sdmmc_card_init+0x53a>
	} else if (card->host_props.max_current_180 >= 600 &&
   47d84:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
   47d88:	075b      	lsls	r3, r3, #29
   47d8a:	d42c      	bmi.n	47de6 <sdmmc_card_init+0x53e>
	} else if (card->host_props.max_current_180 >= 400 &&
   47d8c:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
   47d90:	079e      	lsls	r6, r3, #30
   47d92:	d42a      	bmi.n	47dea <sdmmc_card_init+0x542>
	} else if (card->host_props.max_current_180 >= 200 &&
   47d94:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
   47d98:	07d8      	lsls	r0, r3, #31
   47d9a:	d591      	bpl.n	47cc0 <sdmmc_card_init+0x418>
		ret = sdmmc_switch(card, SD_SWITCH_SET, SD_GRP_CURRENT_LIMIT_MODE,
   47d9c:	4643      	mov	r3, r8
   47d9e:	2103      	movs	r1, #3
   47da0:	6820      	ldr	r0, [r4, #0]
   47da2:	b2fa      	uxtb	r2, r7
   47da4:	f00e fc8e 	bl	566c4 <sdmmc_switch.constprop.0.isra.0>
		if (ret) {
   47da8:	4606      	mov	r6, r0
   47daa:	2800      	cmp	r0, #0
   47dac:	f47f af64 	bne.w	47c78 <sdmmc_card_init+0x3d0>
		if (((status[15] >> 4) & 0x0F) != max_current) {
   47db0:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
   47db4:	ebb7 1f13 	cmp.w	r7, r3, lsr #4
   47db8:	d082      	beq.n	47cc0 <sdmmc_card_init+0x418>
			LOG_WRN("Card did not accept current limit");
   47dba:	4b42      	ldr	r3, [pc, #264]	; (47ec4 <sdmmc_card_init+0x61c>)
   47dbc:	2202      	movs	r2, #2
   47dbe:	e9cd 0301 	strd	r0, r3, [sp, #4]
   47dc2:	493a      	ldr	r1, [pc, #232]	; (47eac <sdmmc_card_init+0x604>)
   47dc4:	4603      	mov	r3, r0
   47dc6:	9000      	str	r0, [sp, #0]
   47dc8:	f00e fc6d 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   47dcc:	e778      	b.n	47cc0 <sdmmc_card_init+0x418>
	} else if (card->host_props.max_current_180 >= 600 &&
   47dce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   47dd2:	d2d7      	bcs.n	47d84 <sdmmc_card_init+0x4dc>
	} else if (card->host_props.max_current_180 >= 400 &&
   47dd4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   47dd8:	d2d8      	bcs.n	47d8c <sdmmc_card_init+0x4e4>
	} else if (card->host_props.max_current_180 >= 200 &&
   47dda:	2bc7      	cmp	r3, #199	; 0xc7
   47ddc:	f67f af70 	bls.w	47cc0 <sdmmc_card_init+0x418>
   47de0:	e7d8      	b.n	47d94 <sdmmc_card_init+0x4ec>
		max_current = SD_SET_CURRENT_800MA;
   47de2:	2703      	movs	r7, #3
   47de4:	e7da      	b.n	47d9c <sdmmc_card_init+0x4f4>
		max_current = SD_SET_CURRENT_600MA;
   47de6:	2702      	movs	r7, #2
   47de8:	e7d8      	b.n	47d9c <sdmmc_card_init+0x4f4>
		max_current = SD_SET_CURRENT_400MA;
   47dea:	2701      	movs	r7, #1
   47dec:	e7d6      	b.n	47d9c <sdmmc_card_init+0x4f4>
		return -ENOSYS;
   47dee:	f06f 0657 	mvn.w	r6, #87	; 0x57
   47df2:	e77c      	b.n	47cee <sdmmc_card_init+0x446>
		if ((card->flags & SD_HIGH_CAPACITY_FLAG) == 0) {
   47df4:	f011 0602 	ands.w	r6, r1, #2
   47df8:	d123      	bne.n	47e42 <sdmmc_card_init+0x59a>
	struct sdhc_command cmd = {0};
   47dfa:	2218      	movs	r2, #24
   47dfc:	4631      	mov	r1, r6
   47dfe:	a80d      	add	r0, sp, #52	; 0x34
   47e00:	6827      	ldr	r7, [r4, #0]
	cmd.arg = block_len;
   47e02:	f44f 7800 	mov.w	r8, #512	; 0x200
	struct sdhc_command cmd = {0};
   47e06:	f013 f862 	bl	5aece <memset>
	cmd.arg = block_len;
   47e0a:	2310      	movs	r3, #16
   47e0c:	e9cd 380b 	strd	r3, r8, [sp, #44]	; 0x2c
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47e10:	23c8      	movs	r3, #200	; 0xc8
   47e12:	9313      	str	r3, [sp, #76]	; 0x4c
	cmd.response_type =  (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   47e14:	2311      	movs	r3, #17
	return sdhc_request(card->sdhc, &cmd, NULL);
   47e16:	4638      	mov	r0, r7
   47e18:	4632      	mov	r2, r6
   47e1a:	a90b      	add	r1, sp, #44	; 0x2c
	cmd.response_type =  (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   47e1c:	9311      	str	r3, [sp, #68]	; 0x44
	return sdhc_request(card->sdhc, &cmd, NULL);
   47e1e:	f00e fbc2 	bl	565a6 <sdhc_request>
			if (ret) {
   47e22:	4607      	mov	r7, r0
   47e24:	b158      	cbz	r0, 47e3e <sdmmc_card_init+0x596>
				LOG_ERR("Could not set SD blocklen to 512");
   47e26:	4b28      	ldr	r3, [pc, #160]	; (47ec8 <sdmmc_card_init+0x620>)
   47e28:	2201      	movs	r2, #1
   47e2a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   47e2e:	4630      	mov	r0, r6
   47e30:	4633      	mov	r3, r6
   47e32:	491e      	ldr	r1, [pc, #120]	; (47eac <sdmmc_card_init+0x604>)
   47e34:	9600      	str	r6, [sp, #0]
   47e36:	f00e fc36 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
				return ret;
   47e3a:	463d      	mov	r5, r7
   47e3c:	e5c5      	b.n	479ca <sdmmc_card_init+0x122>
			card->block_size = 512;
   47e3e:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
	if ((!card->host_props.host_caps.high_spd_support) ||
   47e42:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   47e46:	06da      	lsls	r2, r3, #27
   47e48:	f57f adbf 	bpl.w	479ca <sdmmc_card_init+0x122>
   47e4c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   47e4e:	2b01      	cmp	r3, #1
   47e50:	f67f adbb 	bls.w	479ca <sdmmc_card_init+0x122>
		(card->sd_version < SD_SPEC_VER1_1) ||
   47e54:	6d23      	ldr	r3, [r4, #80]	; 0x50
   47e56:	2b00      	cmp	r3, #0
   47e58:	f43f adb7 	beq.w	479ca <sdmmc_card_init+0x122>
	card->card_speed = SD_TIMING_SDR25;
   47e5c:	2701      	movs	r7, #1
	ret = sdmmc_set_bus_speed(card);
   47e5e:	4620      	mov	r0, r4
	card->card_speed = SD_TIMING_SDR25;
   47e60:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
	ret = sdmmc_set_bus_speed(card);
   47e64:	f7ff fc98 	bl	47798 <sdmmc_set_bus_speed>
	if (ret) {
   47e68:	4606      	mov	r6, r0
   47e6a:	b158      	cbz	r0, 47e84 <sdmmc_card_init+0x5dc>
		LOG_ERR("Failed to switch card to HS mode");
   47e6c:	4b17      	ldr	r3, [pc, #92]	; (47ecc <sdmmc_card_init+0x624>)
			LOG_ERR("Failed to change card bus width to 4 bits");
   47e6e:	9302      	str	r3, [sp, #8]
   47e70:	2300      	movs	r3, #0
   47e72:	463a      	mov	r2, r7
   47e74:	4618      	mov	r0, r3
   47e76:	e9cd 3300 	strd	r3, r3, [sp]
   47e7a:	490c      	ldr	r1, [pc, #48]	; (47eac <sdmmc_card_init+0x604>)
   47e7c:	f00e fc13 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
			LOG_ERR("HS card init failed");
   47e80:	4b13      	ldr	r3, [pc, #76]	; (47ed0 <sdmmc_card_init+0x628>)
   47e82:	e6fa      	b.n	47c7a <sdmmc_card_init+0x3d2>
	if (card->flags & SD_4BITS_WIDTH) {
   47e84:	6f63      	ldr	r3, [r4, #116]	; 0x74
   47e86:	075b      	lsls	r3, r3, #29
   47e88:	f57f ad9f 	bpl.w	479ca <sdmmc_card_init+0x122>
		ret = sdmmc_set_bus_width(card, SDHC_BUS_WIDTH4BIT);
   47e8c:	4620      	mov	r0, r4
   47e8e:	f7ff fcdf 	bl	47850 <sdmmc_set_bus_width.constprop.0>
		if (ret) {
   47e92:	4606      	mov	r6, r0
   47e94:	2800      	cmp	r0, #0
   47e96:	f43f ad98 	beq.w	479ca <sdmmc_card_init+0x122>
			LOG_ERR("Failed to change card bus width to 4 bits");
   47e9a:	4b03      	ldr	r3, [pc, #12]	; (47ea8 <sdmmc_card_init+0x600>)
   47e9c:	e7e7      	b.n	47e6e <sdmmc_card_init+0x5c6>
		card->ocr = cmd.response[0U];
   47e9e:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (ret) {
   47ea0:	e53e      	b.n	47920 <sdmmc_card_init+0x78>
   47ea2:	4615      	mov	r5, r2
   47ea4:	e591      	b.n	479ca <sdmmc_card_init+0x122>
   47ea6:	bf00      	nop
   47ea8:	0005e223 	.word	0x0005e223
   47eac:	0005bfa4 	.word	0x0005bfa4
   47eb0:	0005e284 	.word	0x0005e284
   47eb4:	0c65d3ff 	.word	0x0c65d3ff
   47eb8:	0005e26f 	.word	0x0005e26f
   47ebc:	02faf07f 	.word	0x02faf07f
   47ec0:	05f5e0ff 	.word	0x05f5e0ff
   47ec4:	0005e24d 	.word	0x0005e24d
   47ec8:	0005e299 	.word	0x0005e299
   47ecc:	0005e2ba 	.word	0x0005e2ba
   47ed0:	0005e285 	.word	0x0005e285

00047ed4 <sdmmc_read_blocks>:
}

/* Reads data from SD card memory card */
int sdmmc_read_blocks(struct sd_card *card, uint8_t *rbuf,
	uint32_t start_block, uint32_t num_blocks)
{
   47ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   47ed8:	4614      	mov	r4, r2
   47eda:	461e      	mov	r6, r3
	int ret;
	uint32_t rlen;
	uint32_t sector;
	uint8_t *buf_offset;

	if ((start_block + num_blocks) > card->block_count) {
   47edc:	441a      	add	r2, r3
   47ede:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   47ee0:	4605      	mov	r5, r0
	if ((start_block + num_blocks) > card->block_count) {
   47ee2:	429a      	cmp	r2, r3
{
   47ee4:	4689      	mov	r9, r1
   47ee6:	b095      	sub	sp, #84	; 0x54
	if ((start_block + num_blocks) > card->block_count) {
   47ee8:	f200 8086 	bhi.w	47ff8 <sdmmc_read_blocks+0x124>
		return -EINVAL;
	}
	if (card->type == CARD_SDIO) {
   47eec:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
   47ef0:	2b01      	cmp	r3, #1
   47ef2:	d10f      	bne.n	47f14 <sdmmc_read_blocks+0x40>
		LOG_WRN("SDIO does not support MMC commands");
   47ef4:	4b42      	ldr	r3, [pc, #264]	; (48000 <sdmmc_read_blocks+0x12c>)
   47ef6:	2202      	movs	r2, #2
   47ef8:	9302      	str	r3, [sp, #8]
   47efa:	2300      	movs	r3, #0
   47efc:	4941      	ldr	r1, [pc, #260]	; (48004 <sdmmc_read_blocks+0x130>)
   47efe:	4618      	mov	r0, r3
   47f00:	e9cd 3300 	strd	r3, r3, [sp]
   47f04:	f00e fbcf 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   47f08:	f06f 0485 	mvn.w	r4, #133	; 0x85
			return ret;
		}
	}
	k_mutex_unlock(&card->lock);
	return 0;
}
   47f0c:	4620      	mov	r0, r4
   47f0e:	b015      	add	sp, #84	; 0x54
   47f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = k_mutex_lock(&card->lock, K_NO_WAIT);
   47f14:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   47f18:	2200      	movs	r2, #0
   47f1a:	2300      	movs	r3, #0
   47f1c:	4640      	mov	r0, r8
   47f1e:	f00a fab5 	bl	5248c <z_impl_k_mutex_lock>
	if (ret) {
   47f22:	4607      	mov	r7, r0
   47f24:	b160      	cbz	r0, 47f40 <sdmmc_read_blocks+0x6c>
		LOG_WRN("Could not get SD card mutex");
   47f26:	4b38      	ldr	r3, [pc, #224]	; (48008 <sdmmc_read_blocks+0x134>)
   47f28:	2202      	movs	r2, #2
   47f2a:	9302      	str	r3, [sp, #8]
   47f2c:	2300      	movs	r3, #0
   47f2e:	4935      	ldr	r1, [pc, #212]	; (48004 <sdmmc_read_blocks+0x130>)
   47f30:	4618      	mov	r0, r3
   47f32:	e9cd 3300 	strd	r3, r3, [sp]
   47f36:	f00e fbb6 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
		return -EBUSY;
   47f3a:	f06f 040f 	mvn.w	r4, #15
   47f3e:	e7e5      	b.n	47f0c <sdmmc_read_blocks+0x38>
	struct sdhc_command cmd = {0};
   47f40:	4601      	mov	r1, r0
   47f42:	2210      	movs	r2, #16
   47f44:	a80d      	add	r0, sp, #52	; 0x34
   47f46:	f012 ffc2 	bl	5aece <memset>
	cmd.opcode = (num_blocks == 1U) ? SD_READ_SINGLE_BLOCK : SD_READ_MULTIPLE_BLOCK;
   47f4a:	2e01      	cmp	r6, #1
   47f4c:	bf0c      	ite	eq
   47f4e:	2311      	moveq	r3, #17
   47f50:	2312      	movne	r3, #18
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
   47f52:	6f6a      	ldr	r2, [r5, #116]	; 0x74
	struct sdhc_data data = {0};
   47f54:	9708      	str	r7, [sp, #32]
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
   47f56:	0797      	lsls	r7, r2, #30
		cmd.arg = start_block;
   47f58:	bf48      	it	mi
   47f5a:	4622      	movmi	r2, r4
	cmd.opcode = (num_blocks == 1U) ? SD_READ_SINGLE_BLOCK : SD_READ_MULTIPLE_BLOCK;
   47f5c:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.arg = start_block * card->block_size;
   47f5e:	6eab      	ldr	r3, [r5, #104]	; 0x68
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   47f60:	f04f 00c8 	mov.w	r0, #200	; 0xc8
		cmd.arg = start_block * card->block_size;
   47f64:	bf58      	it	pl
   47f66:	fb03 f204 	mulpl.w	r2, r3, r4
   47f6a:	920c      	str	r2, [sp, #48]	; 0x30
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   47f6c:	2211      	movs	r2, #17
   47f6e:	9211      	str	r2, [sp, #68]	; 0x44
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   47f70:	2203      	movs	r2, #3
	data.block_size = card->block_size;
   47f72:	e9cd 4305 	strd	r4, r3, [sp, #20]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   47f76:	f242 7310 	movw	r3, #10000	; 0x2710
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   47f7a:	e9cd 2012 	strd	r2, r0, [sp, #72]	; 0x48
	ret = sdhc_request(card->sdhc, &cmd, &data);
   47f7e:	a90b      	add	r1, sp, #44	; 0x2c
   47f80:	6828      	ldr	r0, [r5, #0]
   47f82:	aa05      	add	r2, sp, #20
	data.blocks = num_blocks;
   47f84:	9607      	str	r6, [sp, #28]
	data.data = rbuf;
   47f86:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   47f8a:	930a      	str	r3, [sp, #40]	; 0x28
	ret = sdhc_request(card->sdhc, &cmd, &data);
   47f8c:	f00e fb0b 	bl	565a6 <sdhc_request>
	if (ret) {
   47f90:	4604      	mov	r4, r0
   47f92:	b1a8      	cbz	r0, 47fc0 <sdmmc_read_blocks+0xec>
		LOG_ERR("Failed to read from SDMMC %d", ret);
   47f94:	4b1d      	ldr	r3, [pc, #116]	; (4800c <sdmmc_read_blocks+0x138>)
   47f96:	9003      	str	r0, [sp, #12]
   47f98:	9302      	str	r3, [sp, #8]
   47f9a:	2300      	movs	r3, #0
   47f9c:	2201      	movs	r2, #1
   47f9e:	4618      	mov	r0, r3
   47fa0:	e9cd 3300 	strd	r3, r3, [sp]
   47fa4:	4917      	ldr	r1, [pc, #92]	; (48004 <sdmmc_read_blocks+0x130>)
   47fa6:	f00e fb7e 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
			LOG_ERR("Card read failed");
   47faa:	4b19      	ldr	r3, [pc, #100]	; (48010 <sdmmc_read_blocks+0x13c>)
   47fac:	2201      	movs	r2, #1
   47fae:	9302      	str	r3, [sp, #8]
   47fb0:	2300      	movs	r3, #0
   47fb2:	4914      	ldr	r1, [pc, #80]	; (48004 <sdmmc_read_blocks+0x130>)
   47fb4:	4618      	mov	r0, r3
   47fb6:	e9cd 3300 	strd	r3, r3, [sp]
   47fba:	f00e fb74 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
   47fbe:	e002      	b.n	47fc6 <sdmmc_read_blocks+0xf2>
	if (!card->host_props.is_spi) {
   47fc0:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   47fc4:	b11b      	cbz	r3, 47fce <sdmmc_read_blocks+0xfa>
			k_mutex_unlock(&card->lock);
   47fc6:	4640      	mov	r0, r8
   47fc8:	f00e fbac 	bl	56724 <k_mutex_unlock.isra.0>
			return ret;
   47fcc:	e79e      	b.n	47f0c <sdmmc_read_blocks+0x38>
		ret = sdmmc_wait_ready(card);
   47fce:	4628      	mov	r0, r5
   47fd0:	f7ff fbc4 	bl	4775c <sdmmc_wait_ready>
		if (ret) {
   47fd4:	2800      	cmp	r0, #0
   47fd6:	d0f6      	beq.n	47fc6 <sdmmc_read_blocks+0xf2>
			LOG_ERR("Card did not return to ready state");
   47fd8:	4b0e      	ldr	r3, [pc, #56]	; (48014 <sdmmc_read_blocks+0x140>)
   47fda:	4620      	mov	r0, r4
   47fdc:	e9cd 4301 	strd	r4, r3, [sp, #4]
   47fe0:	2201      	movs	r2, #1
   47fe2:	4623      	mov	r3, r4
   47fe4:	4907      	ldr	r1, [pc, #28]	; (48004 <sdmmc_read_blocks+0x130>)
   47fe6:	9400      	str	r4, [sp, #0]
   47fe8:	f00e fb5d 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
			k_mutex_unlock(&card->lock);
   47fec:	4640      	mov	r0, r8
   47fee:	f00e fb99 	bl	56724 <k_mutex_unlock.isra.0>
			return -ETIMEDOUT;
   47ff2:	f06f 0473 	mvn.w	r4, #115	; 0x73
   47ff6:	e7d8      	b.n	47faa <sdmmc_read_blocks+0xd6>
		return -EINVAL;
   47ff8:	f06f 0415 	mvn.w	r4, #21
   47ffc:	e786      	b.n	47f0c <sdmmc_read_blocks+0x38>
   47ffe:	bf00      	nop
   48000:	0005e2f6 	.word	0x0005e2f6
   48004:	0005bfa4 	.word	0x0005bfa4
   48008:	0005e319 	.word	0x0005e319
   4800c:	0005e335 	.word	0x0005e335
   48010:	0005e375 	.word	0x0005e375
   48014:	0005e352 	.word	0x0005e352

00048018 <sdmmc_write_blocks>:
}

/* Writes data to SD card memory card */
int sdmmc_write_blocks(struct sd_card *card, const uint8_t *wbuf,
	uint32_t start_block, uint32_t num_blocks)
{
   48018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4801c:	4614      	mov	r4, r2
   4801e:	461f      	mov	r7, r3
	int ret;
	uint32_t wlen;
	uint32_t sector;
	const uint8_t *buf_offset;

	if ((start_block + num_blocks) > card->block_count) {
   48020:	441a      	add	r2, r3
   48022:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   48024:	4606      	mov	r6, r0
	if ((start_block + num_blocks) > card->block_count) {
   48026:	429a      	cmp	r2, r3
{
   48028:	4689      	mov	r9, r1
   4802a:	b0a5      	sub	sp, #148	; 0x94
	if ((start_block + num_blocks) > card->block_count) {
   4802c:	f200 80c6 	bhi.w	481bc <sdmmc_write_blocks+0x1a4>
		return -EINVAL;
	}
	if (card->type == CARD_SDIO) {
   48030:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
   48034:	2b01      	cmp	r3, #1
   48036:	d10f      	bne.n	48058 <sdmmc_write_blocks+0x40>
		LOG_WRN("SDIO does not support MMC commands");
   48038:	4b62      	ldr	r3, [pc, #392]	; (481c4 <sdmmc_write_blocks+0x1ac>)
   4803a:	2202      	movs	r2, #2
   4803c:	9302      	str	r3, [sp, #8]
   4803e:	2300      	movs	r3, #0
   48040:	4961      	ldr	r1, [pc, #388]	; (481c8 <sdmmc_write_blocks+0x1b0>)
   48042:	4618      	mov	r0, r3
   48044:	e9cd 3300 	strd	r3, r3, [sp]
   48048:	f00e fb2d 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   4804c:	f06f 0485 	mvn.w	r4, #133	; 0x85
			return ret;
		}
	}
	k_mutex_unlock(&card->lock);
	return 0;
}
   48050:	4620      	mov	r0, r4
   48052:	b025      	add	sp, #148	; 0x94
   48054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = k_mutex_lock(&card->lock, K_NO_WAIT);
   48058:	f100 0514 	add.w	r5, r0, #20
   4805c:	2200      	movs	r2, #0
   4805e:	2300      	movs	r3, #0
   48060:	4628      	mov	r0, r5
   48062:	f00a fa13 	bl	5248c <z_impl_k_mutex_lock>
	if (ret) {
   48066:	4680      	mov	r8, r0
   48068:	b160      	cbz	r0, 48084 <sdmmc_write_blocks+0x6c>
		LOG_WRN("Could not get SD card mutex");
   4806a:	4b58      	ldr	r3, [pc, #352]	; (481cc <sdmmc_write_blocks+0x1b4>)
   4806c:	2202      	movs	r2, #2
   4806e:	9302      	str	r3, [sp, #8]
   48070:	2300      	movs	r3, #0
   48072:	4955      	ldr	r1, [pc, #340]	; (481c8 <sdmmc_write_blocks+0x1b0>)
   48074:	4618      	mov	r0, r3
   48076:	e9cd 3300 	strd	r3, r3, [sp]
   4807a:	f00e fb14 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
		return -EBUSY;
   4807e:	f06f 040f 	mvn.w	r4, #15
   48082:	e7e5      	b.n	48050 <sdmmc_write_blocks+0x38>
	struct sdhc_command cmd = {0};
   48084:	4601      	mov	r1, r0
   48086:	2210      	movs	r2, #16
   48088:	a814      	add	r0, sp, #80	; 0x50
   4808a:	f012 ff20 	bl	5aece <memset>
	cmd.opcode = (num_blocks == 1) ? SD_WRITE_SINGLE_BLOCK : SD_WRITE_MULTIPLE_BLOCK;
   4808e:	2f01      	cmp	r7, #1
   48090:	bf0c      	ite	eq
   48092:	2318      	moveq	r3, #24
   48094:	2319      	movne	r3, #25
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
   48096:	6f72      	ldr	r2, [r6, #116]	; 0x74
	cmd.opcode = (num_blocks == 1) ? SD_WRITE_SINGLE_BLOCK : SD_WRITE_MULTIPLE_BLOCK;
   48098:	9312      	str	r3, [sp, #72]	; 0x48
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
   4809a:	0792      	lsls	r2, r2, #30
		cmd.arg = start_block;
   4809c:	bf48      	it	mi
   4809e:	4622      	movmi	r2, r4
		cmd.arg = start_block * card->block_size;
   480a0:	6eb3      	ldr	r3, [r6, #104]	; 0x68
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   480a2:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
		cmd.arg = start_block * card->block_size;
   480a6:	bf58      	it	pl
   480a8:	fb03 f204 	mulpl.w	r2, r3, r4
   480ac:	9213      	str	r2, [sp, #76]	; 0x4c
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   480ae:	2211      	movs	r2, #17
   480b0:	9218      	str	r2, [sp, #96]	; 0x60
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   480b2:	2203      	movs	r2, #3
	data.block_size = card->block_size;
   480b4:	e9cd 4306 	strd	r4, r3, [sp, #24]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   480b8:	f242 7310 	movw	r3, #10000	; 0x2710
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   480bc:	e9cd 2e19 	strd	r2, lr, [sp, #100]	; 0x64
	ret = sdhc_request(card->sdhc, &cmd, &data);
   480c0:	6830      	ldr	r0, [r6, #0]
   480c2:	aa06      	add	r2, sp, #24
   480c4:	a912      	add	r1, sp, #72	; 0x48
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   480c6:	930b      	str	r3, [sp, #44]	; 0x2c
	struct sdhc_data data = {0};
   480c8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	data.blocks = num_blocks;
   480cc:	9708      	str	r7, [sp, #32]
	data.data = (uint8_t *)wbuf;
   480ce:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
	ret = sdhc_request(card->sdhc, &cmd, &data);
   480d2:	f00e fa68 	bl	565a6 <sdhc_request>
	if (ret) {
   480d6:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
   480da:	2800      	cmp	r0, #0
   480dc:	d057      	beq.n	4818e <sdmmc_write_blocks+0x176>
			ret = sdmmc_read_status(card);
   480de:	4630      	mov	r0, r6
		if (card->host_props.is_spi) {
   480e0:	2b00      	cmp	r3, #0
   480e2:	d051      	beq.n	48188 <sdmmc_write_blocks+0x170>
			ret = sdmmc_read_status(card);
   480e4:	f00e faa0 	bl	56628 <sdmmc_read_status>
			ret = sdmmc_wait_ready(card);
   480e8:	4604      	mov	r4, r0
		if (ret) {
   480ea:	2800      	cmp	r0, #0
   480ec:	d13e      	bne.n	4816c <sdmmc_write_blocks+0x154>
	struct sdhc_command cmd = {0};
   480ee:	4601      	mov	r1, r0
   480f0:	2224      	movs	r2, #36	; 0x24
   480f2:	a81b      	add	r0, sp, #108	; 0x6c
   480f4:	f012 feeb 	bl	5aece <memset>
	struct sdhc_data data = {0};
   480f8:	4621      	mov	r1, r4
   480fa:	2218      	movs	r2, #24
   480fc:	a80c      	add	r0, sp, #48	; 0x30
   480fe:	f012 fee6 	bl	5aece <memset>
	ret = sdmmc_app_command(card, card->relative_addr);
   48102:	4630      	mov	r0, r6
   48104:	6e31      	ldr	r1, [r6, #96]	; 0x60
   48106:	f7ff fae9 	bl	476dc <sdmmc_app_command>
	if (ret) {
   4810a:	4604      	mov	r4, r0
   4810c:	bb70      	cbnz	r0, 4816c <sdmmc_write_blocks+0x154>
	cmd.opcode = SD_APP_SEND_NUM_WRITTEN_BLK;
   4810e:	2316      	movs	r3, #22
	cmd.arg = 0;
   48110:	e9cd 301b 	strd	r3, r0, [sp, #108]	; 0x6c
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   48114:	2311      	movs	r3, #17
   48116:	9321      	str	r3, [sp, #132]	; 0x84
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   48118:	23c8      	movs	r3, #200	; 0xc8
	data.blocks = 1U;
   4811a:	2004      	movs	r0, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   4811c:	9323      	str	r3, [sp, #140]	; 0x8c
	data.blocks = 1U;
   4811e:	2301      	movs	r3, #1
   48120:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
	uint32_t *blocks = (uint32_t *)card->card_buffer;
   48124:	f106 0378 	add.w	r3, r6, #120	; 0x78
	data.data = blocks;
   48128:	9310      	str	r3, [sp, #64]	; 0x40
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   4812a:	f242 7310 	movw	r3, #10000	; 0x2710
	ret = sdhc_request(card->sdhc, &cmd, &data);
   4812e:	6830      	ldr	r0, [r6, #0]
   48130:	aa0c      	add	r2, sp, #48	; 0x30
   48132:	a91b      	add	r1, sp, #108	; 0x6c
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   48134:	9311      	str	r3, [sp, #68]	; 0x44
	ret = sdhc_request(card->sdhc, &cmd, &data);
   48136:	f00e fa36 	bl	565a6 <sdhc_request>
	if (ret) {
   4813a:	4604      	mov	r4, r0
   4813c:	b9b0      	cbnz	r0, 4816c <sdmmc_write_blocks+0x154>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
   4813e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   48140:	2b01      	cmp	r3, #1
   48142:	d103      	bne.n	4814c <sdmmc_write_blocks+0x134>
		return (cmd->response[0U] & SD_R1_ERR_FLAGS);
   48144:	4c22      	ldr	r4, [pc, #136]	; (481d0 <sdmmc_write_blocks+0x1b8>)
   48146:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   48148:	401c      	ands	r4, r3
	if (ret) {
   4814a:	b97c      	cbnz	r4, 4816c <sdmmc_write_blocks+0x154>
	*num_written = sys_be32_to_cpu(blocks[0]);
   4814c:	6fb3      	ldr	r3, [r6, #120]	; 0x78
		LOG_ERR("Only %d blocks of %d were written", blocks, num_blocks);
   4814e:	2201      	movs	r2, #1
   48150:	ba1b      	rev	r3, r3
   48152:	e9cd 3703 	strd	r3, r7, [sp, #12]
   48156:	4b1f      	ldr	r3, [pc, #124]	; (481d4 <sdmmc_write_blocks+0x1bc>)
   48158:	491b      	ldr	r1, [pc, #108]	; (481c8 <sdmmc_write_blocks+0x1b0>)
   4815a:	9302      	str	r3, [sp, #8]
   4815c:	2300      	movs	r3, #0
   4815e:	4618      	mov	r0, r3
   48160:	e9cd 3300 	strd	r3, r3, [sp]
   48164:	f00e fa9f 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   48168:	f06f 0404 	mvn.w	r4, #4
			LOG_ERR("Write failed");
   4816c:	4b1a      	ldr	r3, [pc, #104]	; (481d8 <sdmmc_write_blocks+0x1c0>)
   4816e:	2201      	movs	r2, #1
   48170:	9302      	str	r3, [sp, #8]
   48172:	2300      	movs	r3, #0
   48174:	4914      	ldr	r1, [pc, #80]	; (481c8 <sdmmc_write_blocks+0x1b0>)
   48176:	4618      	mov	r0, r3
   48178:	e9cd 3300 	strd	r3, r3, [sp]
   4817c:	f00e fa93 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
			k_mutex_unlock(&card->lock);
   48180:	4628      	mov	r0, r5
   48182:	f00e facf 	bl	56724 <k_mutex_unlock.isra.0>
			return ret;
   48186:	e763      	b.n	48050 <sdmmc_write_blocks+0x38>
			ret = sdmmc_wait_ready(card);
   48188:	f7ff fae8 	bl	4775c <sdmmc_wait_ready>
   4818c:	e7ac      	b.n	480e8 <sdmmc_write_blocks+0xd0>
		ret = sdmmc_read_status(card);
   4818e:	4630      	mov	r0, r6
	if (card->host_props.is_spi) {
   48190:	b18b      	cbz	r3, 481b6 <sdmmc_write_blocks+0x19e>
		ret = sdmmc_read_status(card);
   48192:	f00e fa49 	bl	56628 <sdmmc_read_status>
		ret = sdmmc_wait_ready(card);
   48196:	4604      	mov	r4, r0
	if (ret) {
   48198:	2800      	cmp	r0, #0
   4819a:	d0f1      	beq.n	48180 <sdmmc_write_blocks+0x168>
		LOG_ERR("Card did not return to ready state");
   4819c:	4b0f      	ldr	r3, [pc, #60]	; (481dc <sdmmc_write_blocks+0x1c4>)
   4819e:	2201      	movs	r2, #1
   481a0:	9302      	str	r3, [sp, #8]
   481a2:	2300      	movs	r3, #0
   481a4:	4908      	ldr	r1, [pc, #32]	; (481c8 <sdmmc_write_blocks+0x1b0>)
   481a6:	4618      	mov	r0, r3
   481a8:	e9cd 3300 	strd	r3, r3, [sp]
   481ac:	f00e fa7b 	bl	566a6 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   481b0:	f06f 0473 	mvn.w	r4, #115	; 0x73
   481b4:	e7da      	b.n	4816c <sdmmc_write_blocks+0x154>
		ret = sdmmc_wait_ready(card);
   481b6:	f7ff fad1 	bl	4775c <sdmmc_wait_ready>
   481ba:	e7ec      	b.n	48196 <sdmmc_write_blocks+0x17e>
		return -EINVAL;
   481bc:	f06f 0415 	mvn.w	r4, #21
   481c0:	e746      	b.n	48050 <sdmmc_write_blocks+0x38>
   481c2:	bf00      	nop
   481c4:	0005e2f6 	.word	0x0005e2f6
   481c8:	0005bfa4 	.word	0x0005bfa4
   481cc:	0005e319 	.word	0x0005e319
   481d0:	fdf98008 	.word	0xfdf98008
   481d4:	0005e386 	.word	0x0005e386
   481d8:	0005e3a8 	.word	0x0005e3a8
   481dc:	0005e352 	.word	0x0005e352

000481e0 <disk_sdmmc_init>:
static struct disk_info sdmmc_disk = {
	.ops = &sdmmc_disk_ops,
};

static int disk_sdmmc_init(const struct device *dev)
{
   481e0:	4603      	mov	r3, r0
	struct sdmmc_data *data = dev->data;

	data->status = SD_UNINIT;
   481e2:	2100      	movs	r1, #0
	struct sdmmc_data *data = dev->data;
   481e4:	6902      	ldr	r2, [r0, #16]
	sdmmc_disk.dev = dev;
   481e6:	4804      	ldr	r0, [pc, #16]	; (481f8 <disk_sdmmc_init+0x18>)
	data->status = SD_UNINIT;
   481e8:	f882 10b8 	strb.w	r1, [r2, #184]	; 0xb8
	sdmmc_disk.dev = dev;
   481ec:	6103      	str	r3, [r0, #16]
	sdmmc_disk.name = data->name;
   481ee:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   481f2:	6083      	str	r3, [r0, #8]

	return disk_access_register(&sdmmc_disk);
   481f4:	f7fd ba52 	b.w	4569c <disk_access_register>
   481f8:	2001a63c 	.word	0x2001a63c

000481fc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   481fc:	4b08      	ldr	r3, [pc, #32]	; (48220 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   481fe:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   48200:	1ac3      	subs	r3, r0, r3
{
   48202:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   48204:	4907      	ldr	r1, [pc, #28]	; (48224 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   48206:	109b      	asrs	r3, r3, #2
{
   48208:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   4820a:	4359      	muls	r1, r3
   4820c:	2240      	movs	r2, #64	; 0x40
   4820e:	4806      	ldr	r0, [pc, #24]	; (48228 <onoff_stop+0x2c>)
   48210:	f00e fb01 	bl	56816 <stop>
	notify(mgr, res);
   48214:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   48216:	4601      	mov	r1, r0
	notify(mgr, res);
   48218:	4620      	mov	r0, r4
}
   4821a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   4821e:	4718      	bx	r3
   48220:	2001b618 	.word	0x2001b618
   48224:	b6db6db7 	.word	0xb6db6db7
   48228:	0005bb78 	.word	0x0005bb78

0004822c <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   4822c:	2340      	movs	r3, #64	; 0x40
{
   4822e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   48230:	4c0b      	ldr	r4, [pc, #44]	; (48260 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   48232:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   48234:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   48236:	460b      	mov	r3, r1
{
   48238:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   4823a:	490a      	ldr	r1, [pc, #40]	; (48264 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   4823c:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   4823e:	4361      	muls	r1, r4
{
   48240:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   48242:	4a09      	ldr	r2, [pc, #36]	; (48268 <onoff_start+0x3c>)
   48244:	4809      	ldr	r0, [pc, #36]	; (4826c <onoff_start+0x40>)
   48246:	f00e fb12 	bl	5686e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   4824a:	1e01      	subs	r1, r0, #0
   4824c:	da05      	bge.n	4825a <onoff_start+0x2e>
		notify(mgr, err);
   4824e:	4630      	mov	r0, r6
   48250:	462b      	mov	r3, r5
	}
}
   48252:	b002      	add	sp, #8
   48254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   48258:	4718      	bx	r3
}
   4825a:	b002      	add	sp, #8
   4825c:	bd70      	pop	{r4, r5, r6, pc}
   4825e:	bf00      	nop
   48260:	2001b618 	.word	0x2001b618
   48264:	b6db6db7 	.word	0xb6db6db7
   48268:	000568d9 	.word	0x000568d9
   4826c:	0005bb78 	.word	0x0005bb78

00048270 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   48270:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   48272:	2200      	movs	r2, #0
   48274:	2101      	movs	r1, #1
{
   48276:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   48278:	2005      	movs	r0, #5
   4827a:	f7fd fd99 	bl	45db0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   4827e:	480f      	ldr	r0, [pc, #60]	; (482bc <clk_init+0x4c>)
   48280:	f007 f882 	bl	4f388 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   48284:	4b0e      	ldr	r3, [pc, #56]	; (482c0 <clk_init+0x50>)
   48286:	4298      	cmp	r0, r3
   48288:	d115      	bne.n	482b6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   4828a:	f007 f88d 	bl	4f3a8 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   4828e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   48290:	490c      	ldr	r1, [pc, #48]	; (482c4 <clk_init+0x54>)
   48292:	4630      	mov	r0, r6
   48294:	f00d fc79 	bl	55b8a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   48298:	2800      	cmp	r0, #0
   4829a:	db0b      	blt.n	482b4 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   4829c:	2501      	movs	r5, #1
   4829e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   482a0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   482a2:	4908      	ldr	r1, [pc, #32]	; (482c4 <clk_init+0x54>)
   482a4:	f104 001c 	add.w	r0, r4, #28
   482a8:	f00d fc6f 	bl	55b8a <onoff_manager_init>
		if (err < 0) {
   482ac:	2800      	cmp	r0, #0
   482ae:	db01      	blt.n	482b4 <clk_init+0x44>
	}

	return 0;
   482b0:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   482b2:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   482b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   482b6:	f06f 0004 	mvn.w	r0, #4
   482ba:	e7fb      	b.n	482b4 <clk_init+0x44>
   482bc:	000482fd 	.word	0x000482fd
   482c0:	0bad0000 	.word	0x0bad0000
   482c4:	0005c240 	.word	0x0005c240

000482c8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   482c8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   482ca:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   482cc:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   482ce:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   482d0:	434b      	muls	r3, r1
   482d2:	4808      	ldr	r0, [pc, #32]	; (482f4 <clkstarted_handle.constprop.0+0x2c>)
   482d4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   482d6:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   482d8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   482dc:	4418      	add	r0, r3
	sub_data->cb = NULL;
   482de:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   482e0:	f00e fa86 	bl	567f0 <set_on_state>
	if (callback) {
   482e4:	b12d      	cbz	r5, 482f2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   482e6:	4632      	mov	r2, r6
   482e8:	462b      	mov	r3, r5
}
   482ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   482ee:	4802      	ldr	r0, [pc, #8]	; (482f8 <clkstarted_handle.constprop.0+0x30>)
   482f0:	4718      	bx	r3
}
   482f2:	bd70      	pop	{r4, r5, r6, pc}
   482f4:	2001b618 	.word	0x2001b618
   482f8:	0005bb78 	.word	0x0005bb78

000482fc <clock_event_handler>:
	switch (event) {
   482fc:	b110      	cbz	r0, 48304 <clock_event_handler+0x8>
   482fe:	2801      	cmp	r0, #1
   48300:	d004      	beq.n	4830c <clock_event_handler+0x10>
   48302:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   48304:	4b03      	ldr	r3, [pc, #12]	; (48314 <clock_event_handler+0x18>)
   48306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   48308:	075b      	lsls	r3, r3, #29
   4830a:	d101      	bne.n	48310 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   4830c:	f7ff bfdc 	b.w	482c8 <clkstarted_handle.constprop.0>
}
   48310:	4770      	bx	lr
   48312:	bf00      	nop
   48314:	2001b618 	.word	0x2001b618

00048318 <generic_hfclk_start>:
{
   48318:	b508      	push	{r3, lr}
	__asm__ volatile(
   4831a:	f04f 0320 	mov.w	r3, #32
   4831e:	f3ef 8111 	mrs	r1, BASEPRI
   48322:	f383 8812 	msr	BASEPRI_MAX, r3
   48326:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   4832a:	4a11      	ldr	r2, [pc, #68]	; (48370 <generic_hfclk_start+0x58>)
   4832c:	6813      	ldr	r3, [r2, #0]
   4832e:	f043 0002 	orr.w	r0, r3, #2
   48332:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   48334:	07da      	lsls	r2, r3, #31
   48336:	d408      	bmi.n	4834a <generic_hfclk_start+0x32>
	__asm__ volatile(
   48338:	f381 8811 	msr	BASEPRI, r1
   4833c:	f3bf 8f6f 	isb	sy
}
   48340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   48344:	2001      	movs	r0, #1
   48346:	f007 b83f 	b.w	4f3c8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   4834a:	4b0a      	ldr	r3, [pc, #40]	; (48374 <generic_hfclk_start+0x5c>)
   4834c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   48350:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   48354:	07d3      	lsls	r3, r2, #31
   48356:	d5ef      	bpl.n	48338 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   48358:	4807      	ldr	r0, [pc, #28]	; (48378 <generic_hfclk_start+0x60>)
   4835a:	f00e fa49 	bl	567f0 <set_on_state>
   4835e:	f381 8811 	msr	BASEPRI, r1
   48362:	f3bf 8f6f 	isb	sy
}
   48366:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   4836a:	2000      	movs	r0, #0
   4836c:	f7ff bfac 	b.w	482c8 <clkstarted_handle.constprop.0>
   48370:	2001b668 	.word	0x2001b668
   48374:	40005000 	.word	0x40005000
   48378:	2001b658 	.word	0x2001b658

0004837c <api_blocking_start>:
{
   4837c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   4837e:	2200      	movs	r2, #0
   48380:	2301      	movs	r3, #1
   48382:	e9cd 2302 	strd	r2, r3, [sp, #8]
   48386:	ab04      	add	r3, sp, #16
   48388:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   4838c:	4a09      	ldr	r2, [pc, #36]	; (483b4 <api_blocking_start+0x38>)
   4838e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   48390:	f8cd d000 	str.w	sp, [sp]
   48394:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   48398:	f00e fa97 	bl	568ca <api_start>
	if (err < 0) {
   4839c:	2800      	cmp	r0, #0
   4839e:	db05      	blt.n	483ac <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   483a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   483a4:	2300      	movs	r3, #0
   483a6:	4668      	mov	r0, sp
   483a8:	f00a f980 	bl	526ac <z_impl_k_sem_take>
}
   483ac:	b007      	add	sp, #28
   483ae:	f85d fb04 	ldr.w	pc, [sp], #4
   483b2:	bf00      	nop
   483b4:	000568f9 	.word	0x000568f9

000483b8 <generic_hfclk_stop>:
   483b8:	4b07      	ldr	r3, [pc, #28]	; (483d8 <generic_hfclk_stop+0x20>)
   483ba:	e8d3 2fef 	ldaex	r2, [r3]
   483be:	f022 0102 	bic.w	r1, r2, #2
   483c2:	e8c3 1fe0 	stlex	r0, r1, [r3]
   483c6:	2800      	cmp	r0, #0
   483c8:	d1f7      	bne.n	483ba <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   483ca:	07d3      	lsls	r3, r2, #31
   483cc:	d402      	bmi.n	483d4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   483ce:	2001      	movs	r0, #1
   483d0:	f011 ba45 	b.w	5985e <nrfx_clock_stop>
}
   483d4:	4770      	bx	lr
   483d6:	bf00      	nop
   483d8:	2001b668 	.word	0x2001b668

000483dc <z_nrf_clock_control_lf_on>:
{
   483dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   483e0:	2201      	movs	r2, #1
   483e2:	4607      	mov	r7, r0
   483e4:	4935      	ldr	r1, [pc, #212]	; (484bc <z_nrf_clock_control_lf_on+0xe0>)
   483e6:	e8d1 3fef 	ldaex	r3, [r1]
   483ea:	e8c1 2fe0 	stlex	r0, r2, [r1]
   483ee:	2800      	cmp	r0, #0
   483f0:	d1f9      	bne.n	483e6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   483f2:	b933      	cbnz	r3, 48402 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   483f4:	4932      	ldr	r1, [pc, #200]	; (484c0 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   483f6:	4833      	ldr	r0, [pc, #204]	; (484c4 <z_nrf_clock_control_lf_on+0xe8>)
   483f8:	604b      	str	r3, [r1, #4]
   483fa:	60cb      	str	r3, [r1, #12]
   483fc:	608a      	str	r2, [r1, #8]
   483fe:	f00d fbd7 	bl	55bb0 <onoff_request>
	switch (start_mode) {
   48402:	1e7b      	subs	r3, r7, #1
   48404:	2b01      	cmp	r3, #1
   48406:	d828      	bhi.n	4845a <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   48408:	2f01      	cmp	r7, #1
   4840a:	d106      	bne.n	4841a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   4840c:	4b2e      	ldr	r3, [pc, #184]	; (484c8 <z_nrf_clock_control_lf_on+0xec>)
   4840e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   48412:	f003 0303 	and.w	r3, r3, #3
   48416:	2b02      	cmp	r3, #2
   48418:	d01f      	beq.n	4845a <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   4841a:	f012 f9e8 	bl	5a7ee <k_is_in_isr>
   4841e:	4605      	mov	r5, r0
   48420:	b9e8      	cbnz	r0, 4845e <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   48422:	4b2a      	ldr	r3, [pc, #168]	; (484cc <z_nrf_clock_control_lf_on+0xf0>)
   48424:	781b      	ldrb	r3, [r3, #0]
   48426:	b1d3      	cbz	r3, 4845e <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   48428:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   4842a:	4606      	mov	r6, r0
   4842c:	4b26      	ldr	r3, [pc, #152]	; (484c8 <z_nrf_clock_control_lf_on+0xec>)
   4842e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   48432:	4c25      	ldr	r4, [pc, #148]	; (484c8 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   48434:	f8df 8098 	ldr.w	r8, [pc, #152]	; 484d0 <z_nrf_clock_control_lf_on+0xf4>
   48438:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   4843c:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   48440:	03d2      	lsls	r2, r2, #15
   48442:	d516      	bpl.n	48472 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   48444:	f003 0303 	and.w	r3, r3, #3
   48448:	2b02      	cmp	r3, #2
   4844a:	d001      	beq.n	48450 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   4844c:	2f01      	cmp	r7, #1
   4844e:	d110      	bne.n	48472 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   48450:	b375      	cbz	r5, 484b0 <z_nrf_clock_control_lf_on+0xd4>
   48452:	f386 8811 	msr	BASEPRI, r6
   48456:	f3bf 8f6f 	isb	sy
}
   4845a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   4845e:	f04f 0320 	mov.w	r3, #32
   48462:	f3ef 8611 	mrs	r6, BASEPRI
   48466:	f383 8812 	msr	BASEPRI_MAX, r3
   4846a:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   4846e:	2501      	movs	r5, #1
   48470:	e7df      	b.n	48432 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   48472:	b1c5      	cbz	r5, 484a6 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   48474:	4630      	mov	r0, r6
   48476:	f7fd fbcd 	bl	45c14 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   4847a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   4847e:	b2db      	uxtb	r3, r3
   48480:	2b01      	cmp	r3, #1
   48482:	d1d9      	bne.n	48438 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   48484:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   48488:	2a00      	cmp	r2, #0
   4848a:	d0d5      	beq.n	48438 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4848c:	2200      	movs	r2, #0
   4848e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   48492:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   48496:	2202      	movs	r2, #2
   48498:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   4849c:	2220      	movs	r2, #32
   4849e:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   484a2:	60a3      	str	r3, [r4, #8]
}
   484a4:	e7c8      	b.n	48438 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   484a6:	2100      	movs	r1, #0
   484a8:	2021      	movs	r0, #33	; 0x21
   484aa:	f00a fceb 	bl	52e84 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   484ae:	e7e4      	b.n	4847a <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   484b0:	2202      	movs	r2, #2
   484b2:	4b05      	ldr	r3, [pc, #20]	; (484c8 <z_nrf_clock_control_lf_on+0xec>)
   484b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   484b8:	e7cf      	b.n	4845a <z_nrf_clock_control_lf_on+0x7e>
   484ba:	bf00      	nop
   484bc:	2001b614 	.word	0x2001b614
   484c0:	2001b604 	.word	0x2001b604
   484c4:	2001b634 	.word	0x2001b634
   484c8:	40005000 	.word	0x40005000
   484cc:	2002083d 	.word	0x2002083d
   484d0:	e000e100 	.word	0xe000e100

000484d4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   484d4:	b508      	push	{r3, lr}
   484d6:	4807      	ldr	r0, [pc, #28]	; (484f4 <uart_console_init+0x20>)
   484d8:	f012 f8ae 	bl	5a638 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   484dc:	b138      	cbz	r0, 484ee <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   484de:	4806      	ldr	r0, [pc, #24]	; (484f8 <uart_console_init+0x24>)
   484e0:	f7fe faa2 	bl	46a28 <__stdout_hook_install>
	__printk_hook_install(console_out);
   484e4:	4804      	ldr	r0, [pc, #16]	; (484f8 <uart_console_init+0x24>)
   484e6:	f7fc fba7 	bl	44c38 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   484ea:	2000      	movs	r0, #0
}
   484ec:	bd08      	pop	{r3, pc}
		return -ENODEV;
   484ee:	f06f 0012 	mvn.w	r0, #18
   484f2:	e7fb      	b.n	484ec <uart_console_init+0x18>
   484f4:	0005bbcc 	.word	0x0005bbcc
   484f8:	000484fd 	.word	0x000484fd

000484fc <console_out>:
	if ('\n' == c) {
   484fc:	280a      	cmp	r0, #10
{
   484fe:	b538      	push	{r3, r4, r5, lr}
   48500:	4604      	mov	r4, r0
   48502:	4d07      	ldr	r5, [pc, #28]	; (48520 <console_out+0x24>)
	if ('\n' == c) {
   48504:	d104      	bne.n	48510 <console_out+0x14>
   48506:	68ab      	ldr	r3, [r5, #8]
   48508:	210d      	movs	r1, #13
   4850a:	4628      	mov	r0, r5
   4850c:	685b      	ldr	r3, [r3, #4]
   4850e:	4798      	blx	r3
   48510:	68ab      	ldr	r3, [r5, #8]
   48512:	4803      	ldr	r0, [pc, #12]	; (48520 <console_out+0x24>)
   48514:	685b      	ldr	r3, [r3, #4]
   48516:	b2e1      	uxtb	r1, r4
   48518:	4798      	blx	r3
}
   4851a:	4620      	mov	r0, r4
   4851c:	bd38      	pop	{r3, r4, r5, pc}
   4851e:	bf00      	nop
   48520:	0005bbcc 	.word	0x0005bbcc

00048524 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   48524:	b530      	push	{r4, r5, lr}
	return port->config;
   48526:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   48528:	f001 041f 	and.w	r4, r1, #31
   4852c:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   4852e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   48532:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   48534:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   48538:	d105      	bne.n	48546 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   4853a:	4620      	mov	r0, r4
   4853c:	f007 fa0a 	bl	4f954 <nrfx_gpiote_trigger_disable>

		return 0;
   48540:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   48542:	b005      	add	sp, #20
   48544:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   48546:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   48548:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   4854c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   48550:	d114      	bne.n	4857c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   48552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   48556:	bf0c      	ite	eq
   48558:	2304      	moveq	r3, #4
   4855a:	2305      	movne	r3, #5
   4855c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   48560:	2300      	movs	r3, #0
   48562:	4620      	mov	r0, r4
   48564:	4619      	mov	r1, r3
   48566:	aa02      	add	r2, sp, #8
   48568:	f007 f82a 	bl	4f5c0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   4856c:	4b1c      	ldr	r3, [pc, #112]	; (485e0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   4856e:	4298      	cmp	r0, r3
   48570:	d133      	bne.n	485da <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   48572:	2101      	movs	r1, #1
   48574:	4620      	mov	r0, r4
   48576:	f007 f9a9 	bl	4f8cc <nrfx_gpiote_trigger_enable>
	return 0;
   4857a:	e7e1      	b.n	48540 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   4857c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   48580:	d020      	beq.n	485c4 <gpio_nrfx_pin_interrupt_configure+0xa0>
   48582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   48586:	bf14      	ite	ne
   48588:	2301      	movne	r3, #1
   4858a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   4858c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   48590:	6883      	ldr	r3, [r0, #8]
   48592:	40cb      	lsrs	r3, r1
   48594:	07d9      	lsls	r1, r3, #31
   48596:	d4e3      	bmi.n	48560 <gpio_nrfx_pin_interrupt_configure+0x3c>
   48598:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   4859c:	d1e0      	bne.n	48560 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   4859e:	4a11      	ldr	r2, [pc, #68]	; (485e4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   485a0:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   485a4:	3380      	adds	r3, #128	; 0x80
   485a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   485aa:	07db      	lsls	r3, r3, #31
   485ac:	d4d8      	bmi.n	48560 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   485ae:	f10d 0507 	add.w	r5, sp, #7
   485b2:	4629      	mov	r1, r5
   485b4:	4620      	mov	r0, r4
   485b6:	f007 f935 	bl	4f824 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   485ba:	4b0b      	ldr	r3, [pc, #44]	; (485e8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   485bc:	4298      	cmp	r0, r3
   485be:	d003      	beq.n	485c8 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
   485c0:	9503      	str	r5, [sp, #12]
   485c2:	e7cd      	b.n	48560 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   485c4:	2303      	movs	r3, #3
   485c6:	e7e1      	b.n	4858c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   485c8:	4628      	mov	r0, r5
   485ca:	f007 f979 	bl	4f8c0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   485ce:	4b04      	ldr	r3, [pc, #16]	; (485e0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   485d0:	4298      	cmp	r0, r3
   485d2:	d0f5      	beq.n	485c0 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   485d4:	f06f 000b 	mvn.w	r0, #11
   485d8:	e7b3      	b.n	48542 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   485da:	f06f 0015 	mvn.w	r0, #21
   485de:	e7b0      	b.n	48542 <gpio_nrfx_pin_interrupt_configure+0x1e>
   485e0:	0bad0000 	.word	0x0bad0000
   485e4:	40842500 	.word	0x40842500
   485e8:	0bad0004 	.word	0x0bad0004

000485ec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   485ec:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   485ee:	f007 f957 	bl	4f8a0 <nrfx_gpiote_is_init>
   485f2:	4604      	mov	r4, r0
   485f4:	b968      	cbnz	r0, 48612 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   485f6:	f007 f92b 	bl	4f850 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   485fa:	4b08      	ldr	r3, [pc, #32]	; (4861c <gpio_nrfx_init+0x30>)
   485fc:	4298      	cmp	r0, r3
   485fe:	d10a      	bne.n	48616 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   48600:	4621      	mov	r1, r4
   48602:	4807      	ldr	r0, [pc, #28]	; (48620 <gpio_nrfx_init+0x34>)
   48604:	f007 f908 	bl	4f818 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   48608:	4622      	mov	r2, r4
   4860a:	2105      	movs	r1, #5
   4860c:	2031      	movs	r0, #49	; 0x31
   4860e:	f7fd fbcf 	bl	45db0 <z_arm_irq_priority_set>
		return 0;
   48612:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   48614:	bd10      	pop	{r4, pc}
		return -EIO;
   48616:	f06f 0004 	mvn.w	r0, #4
   4861a:	e7fb      	b.n	48614 <gpio_nrfx_init+0x28>
   4861c:	0bad0000 	.word	0x0bad0000
   48620:	00048625 	.word	0x00048625

00048624 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   48624:	0943      	lsrs	r3, r0, #5
{
   48626:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   48628:	d107      	bne.n	4863a <nrfx_gpio_handler+0x16>
	return list->head;
   4862a:	4b0b      	ldr	r3, [pc, #44]	; (48658 <nrfx_gpio_handler+0x34>)
   4862c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   4862e:	b121      	cbz	r1, 4863a <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   48630:	2501      	movs	r5, #1
	return node->next;
   48632:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   48634:	4e09      	ldr	r6, [pc, #36]	; (4865c <nrfx_gpio_handler+0x38>)
   48636:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   48638:	b901      	cbnz	r1, 4863c <nrfx_gpio_handler+0x18>
}
   4863a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   4863c:	688a      	ldr	r2, [r1, #8]
   4863e:	402a      	ands	r2, r5
   48640:	d002      	beq.n	48648 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   48642:	4630      	mov	r0, r6
   48644:	684b      	ldr	r3, [r1, #4]
   48646:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   48648:	b11c      	cbz	r4, 48652 <nrfx_gpio_handler+0x2e>
   4864a:	6823      	ldr	r3, [r4, #0]
   4864c:	4621      	mov	r1, r4
   4864e:	461c      	mov	r4, r3
   48650:	e7f2      	b.n	48638 <nrfx_gpio_handler+0x14>
   48652:	4623      	mov	r3, r4
   48654:	e7fa      	b.n	4864c <nrfx_gpio_handler+0x28>
   48656:	bf00      	nop
   48658:	2001b66c 	.word	0x2001b66c
   4865c:	0005bb94 	.word	0x0005bb94

00048660 <gpio_nrfx_pin_configure>:
{
   48660:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   48664:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   48666:	f001 051f 	and.w	r5, r1, #31
   4866a:	7b3b      	ldrb	r3, [r7, #12]
{
   4866c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   4866e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   48672:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   48674:	4628      	mov	r0, r5
   48676:	f10d 0103 	add.w	r1, sp, #3
   4867a:	f007 f8d3 	bl	4f824 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   4867e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   48682:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   48684:	d10b      	bne.n	4869e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   48686:	4628      	mov	r0, r5
   48688:	f007 f98c 	bl	4f9a4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   4868c:	4b3c      	ldr	r3, [pc, #240]	; (48780 <gpio_nrfx_pin_configure+0x120>)
   4868e:	4598      	cmp	r8, r3
   48690:	d103      	bne.n	4869a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   48692:	f89d 0003 	ldrb.w	r0, [sp, #3]
   48696:	f007 f90d 	bl	4f8b4 <nrfx_gpiote_channel_free>
		return 0;
   4869a:	2000      	movs	r0, #0
   4869c:	e00c      	b.n	486b8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   4869e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   486a0:	4628      	mov	r0, r5
   486a2:	4619      	mov	r1, r3
   486a4:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   486a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   486aa:	f006 ff89 	bl	4f5c0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   486ae:	4b34      	ldr	r3, [pc, #208]	; (48780 <gpio_nrfx_pin_configure+0x120>)
   486b0:	4298      	cmp	r0, r3
   486b2:	d004      	beq.n	486be <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   486b4:	f06f 0015 	mvn.w	r0, #21
}
   486b8:	b004      	add	sp, #16
   486ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   486be:	4580      	cmp	r8, r0
   486c0:	d103      	bne.n	486ca <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   486c2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   486c6:	f007 f8f5 	bl	4f8b4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   486ca:	03a3      	lsls	r3, r4, #14
   486cc:	d549      	bpl.n	48762 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   486ce:	f240 3306 	movw	r3, #774	; 0x306
   486d2:	4023      	ands	r3, r4
   486d4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   486d8:	d019      	beq.n	4870e <gpio_nrfx_pin_configure+0xae>
   486da:	d80c      	bhi.n	486f6 <gpio_nrfx_pin_configure+0x96>
   486dc:	2b06      	cmp	r3, #6
   486de:	d017      	beq.n	48710 <gpio_nrfx_pin_configure+0xb0>
   486e0:	d804      	bhi.n	486ec <gpio_nrfx_pin_configure+0x8c>
   486e2:	b1ab      	cbz	r3, 48710 <gpio_nrfx_pin_configure+0xb0>
   486e4:	2b02      	cmp	r3, #2
   486e6:	d1e5      	bne.n	486b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   486e8:	2304      	movs	r3, #4
   486ea:	e011      	b.n	48710 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   486ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   486f0:	d1e0      	bne.n	486b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   486f2:	2301      	movs	r3, #1
   486f4:	e00c      	b.n	48710 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   486f6:	f240 2202 	movw	r2, #514	; 0x202
   486fa:	4293      	cmp	r3, r2
   486fc:	d026      	beq.n	4874c <gpio_nrfx_pin_configure+0xec>
   486fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   48702:	d025      	beq.n	48750 <gpio_nrfx_pin_configure+0xf0>
   48704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   48708:	d1d4      	bne.n	486b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   4870a:	2302      	movs	r3, #2
   4870c:	e000      	b.n	48710 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   4870e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   48710:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   48714:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   48718:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   4871c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   4871e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   48722:	bf4c      	ite	mi
   48724:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   48726:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   4872a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   4872c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   48730:	d510      	bpl.n	48754 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   48732:	2301      	movs	r3, #1
   48734:	687a      	ldr	r2, [r7, #4]
   48736:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   48738:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   4873a:	2200      	movs	r2, #0
   4873c:	4628      	mov	r0, r5
   4873e:	a901      	add	r1, sp, #4
   48740:	f006 ffea 	bl	4f718 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   48744:	4b0e      	ldr	r3, [pc, #56]	; (48780 <gpio_nrfx_pin_configure+0x120>)
   48746:	4298      	cmp	r0, r3
   48748:	d0a7      	beq.n	4869a <gpio_nrfx_pin_configure+0x3a>
   4874a:	e7b3      	b.n	486b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   4874c:	2305      	movs	r3, #5
   4874e:	e7df      	b.n	48710 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   48750:	2303      	movs	r3, #3
   48752:	e7dd      	b.n	48710 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   48754:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   48756:	bf41      	itttt	mi
   48758:	2301      	movmi	r3, #1
   4875a:	687a      	ldrmi	r2, [r7, #4]
   4875c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   4875e:	60d3      	strmi	r3, [r2, #12]
}
   48760:	e7eb      	b.n	4873a <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   48762:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   48764:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   48768:	bf4c      	ite	mi
   4876a:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   4876c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   48770:	461a      	mov	r2, r3
   48772:	4628      	mov	r0, r5
   48774:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   48776:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   4877a:	f006 ff21 	bl	4f5c0 <nrfx_gpiote_input_configure>
   4877e:	e7e1      	b.n	48744 <gpio_nrfx_pin_configure+0xe4>
   48780:	0bad0000 	.word	0x0bad0000

00048784 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   48784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   48788:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   4878a:	6905      	ldr	r5, [r0, #16]
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   4878c:	2100      	movs	r1, #0
   4878e:	6a60      	ldr	r0, [r4, #36]	; 0x24
{
   48790:	b086      	sub	sp, #24
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   48792:	f00e f929 	bl	569e8 <pinctrl_apply_state>
	if (err < 0) {
   48796:	2800      	cmp	r0, #0
   48798:	db22      	blt.n	487e0 <spi_nrfx_init+0x5c>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   4879a:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   4879c:	6a23      	ldr	r3, [r4, #32]
   4879e:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   487a0:	68ac      	ldr	r4, [r5, #8]
   487a2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   487a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   487aa:	429c      	cmp	r4, r3
   487ac:	d304      	bcc.n	487b8 <spi_nrfx_init+0x34>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   487ae:	4628      	mov	r0, r5
   487b0:	f00e f979 	bl	56aa6 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   487b4:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   487b6:	e013      	b.n	487e0 <spi_nrfx_init+0x5c>
		if (!device_is_ready(cs_gpio->port)) {
   487b8:	6820      	ldr	r0, [r4, #0]
   487ba:	f011 ff3d 	bl	5a638 <z_device_is_ready>
   487be:	4603      	mov	r3, r0
   487c0:	b988      	cbnz	r0, 487e6 <spi_nrfx_init+0x62>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   487c2:	7922      	ldrb	r2, [r4, #4]
   487c4:	4919      	ldr	r1, [pc, #100]	; (4882c <spi_nrfx_init+0xa8>)
   487c6:	9204      	str	r2, [sp, #16]
   487c8:	6822      	ldr	r2, [r4, #0]
   487ca:	6812      	ldr	r2, [r2, #0]
   487cc:	9000      	str	r0, [sp, #0]
   487ce:	9203      	str	r2, [sp, #12]
   487d0:	4a17      	ldr	r2, [pc, #92]	; (48830 <spi_nrfx_init+0xac>)
   487d2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   487d6:	2201      	movs	r2, #1
   487d8:	f00e f8f6 	bl	569c8 <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   487dc:	f06f 0012 	mvn.w	r0, #18
#endif
}
   487e0:	b006      	add	sp, #24
   487e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
   487e6:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   487e8:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   487ea:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   487ec:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   487f0:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   487f2:	f8dc 7000 	ldr.w	r7, [ip]
	return gpio_pin_configure(spec->port,
   487f6:	bf54      	ite	pl
   487f8:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   487fc:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   48800:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   48804:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   48808:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
   4880a:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   4880e:	bf4c      	ite	mi
   48810:	ea47 070e 	orrmi.w	r7, r7, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   48814:	ea27 070e 	bicpl.w	r7, r7, lr
   48818:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
   4881c:	f8d8 3000 	ldr.w	r3, [r8]
   48820:	4798      	blx	r3
		if (ret < 0) {
   48822:	2800      	cmp	r0, #0
   48824:	dbdc      	blt.n	487e0 <spi_nrfx_init+0x5c>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   48826:	3408      	adds	r4, #8
   48828:	e7bb      	b.n	487a2 <spi_nrfx_init+0x1e>
   4882a:	bf00      	nop
   4882c:	0005bfbc 	.word	0x0005bfbc
   48830:	0005e3ea 	.word	0x0005e3ea

00048834 <transfer_next_chunk>:
{
   48834:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   48836:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   48838:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   4883a:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   4883c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   4883e:	b98d      	cbnz	r5, 48864 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   48840:	2b00      	cmp	r3, #0
   48842:	d137      	bne.n	488b4 <transfer_next_chunk+0x80>
	int error = 0;
   48844:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   48846:	2200      	movs	r2, #0
   48848:	4620      	mov	r0, r4
   4884a:	4611      	mov	r1, r2
   4884c:	f00e f909 	bl	56a62 <_spi_context_cs_control>
	ctx->sync_status = status;
   48850:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   48852:	f104 0028 	add.w	r0, r4, #40	; 0x28
   48856:	f009 ff03 	bl	52660 <z_impl_k_sem_give>
	dev_data->busy = false;
   4885a:	2300      	movs	r3, #0
   4885c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   48860:	b004      	add	sp, #16
   48862:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   48864:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   48866:	bb0b      	cbnz	r3, 488ac <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   48868:	bb39      	cbnz	r1, 488ba <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   4886a:	f641 72ff 	movw	r2, #8191	; 0x1fff
   4886e:	42aa      	cmp	r2, r5
   48870:	bf28      	it	cs
   48872:	462a      	movcs	r2, r5
   48874:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   48876:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   48878:	9100      	str	r1, [sp, #0]
   4887a:	b11b      	cbz	r3, 48884 <transfer_next_chunk+0x50>
   4887c:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   4887e:	2b00      	cmp	r3, #0
   48880:	bf18      	it	ne
   48882:	4613      	movne	r3, r2
   48884:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   48886:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   48888:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   4888a:	b11b      	cbz	r3, 48894 <transfer_next_chunk+0x60>
   4888c:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   4888e:	2b00      	cmp	r3, #0
   48890:	bf18      	it	ne
   48892:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   48894:	2200      	movs	r2, #0
   48896:	4669      	mov	r1, sp
   48898:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   4889a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   4889c:	f007 faec 	bl	4fe78 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   488a0:	4b0d      	ldr	r3, [pc, #52]	; (488d8 <transfer_next_chunk+0xa4>)
   488a2:	4298      	cmp	r0, r3
   488a4:	d0dc      	beq.n	48860 <transfer_next_chunk+0x2c>
			error = -EIO;
   488a6:	f06f 0504 	mvn.w	r5, #4
   488aa:	e7cc      	b.n	48846 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   488ac:	429d      	cmp	r5, r3
   488ae:	bf28      	it	cs
   488b0:	461d      	movcs	r5, r3
   488b2:	e7d9      	b.n	48868 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   488b4:	461d      	mov	r5, r3
   488b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   488b8:	e7d7      	b.n	4886a <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   488ba:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   488be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   488c2:	d0d2      	beq.n	4886a <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   488c4:	2d40      	cmp	r5, #64	; 0x40
   488c6:	bf28      	it	cs
   488c8:	2540      	movcs	r5, #64	; 0x40
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   488ca:	6f20      	ldr	r0, [r4, #112]	; 0x70
   488cc:	462a      	mov	r2, r5
   488ce:	f012 fac4 	bl	5ae5a <memcpy>
			tx_buf = dev_data->buffer;
   488d2:	6f21      	ldr	r1, [r4, #112]	; 0x70
   488d4:	e7c9      	b.n	4886a <transfer_next_chunk+0x36>
   488d6:	bf00      	nop
   488d8:	0bad0000 	.word	0x0bad0000

000488dc <event_handler>:
{
   488dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   488de:	7803      	ldrb	r3, [r0, #0]
{
   488e0:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   488e2:	2b00      	cmp	r3, #0
   488e4:	d154      	bne.n	48990 <event_handler+0xb4>
	if (!ctx->tx_len) {
   488e6:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   488e8:	6e89      	ldr	r1, [r1, #104]	; 0x68
   488ea:	b152      	cbz	r2, 48902 <event_handler+0x26>
	if (len > ctx->tx_len) {
   488ec:	4291      	cmp	r1, r2
   488ee:	d91d      	bls.n	4892c <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   488f0:	4a28      	ldr	r2, [pc, #160]	; (48994 <event_handler+0xb8>)
   488f2:	4618      	mov	r0, r3
   488f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   488f8:	4927      	ldr	r1, [pc, #156]	; (48998 <event_handler+0xbc>)
   488fa:	2201      	movs	r2, #1
   488fc:	9300      	str	r3, [sp, #0]
   488fe:	f00e f863 	bl	569c8 <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   48902:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   48904:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   48906:	b15b      	cbz	r3, 48920 <event_handler+0x44>
	if (len > ctx->rx_len) {
   48908:	429a      	cmp	r2, r3
   4890a:	d928      	bls.n	4895e <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   4890c:	4b21      	ldr	r3, [pc, #132]	; (48994 <event_handler+0xb8>)
   4890e:	2201      	movs	r2, #1
   48910:	9302      	str	r3, [sp, #8]
   48912:	2300      	movs	r3, #0
   48914:	4920      	ldr	r1, [pc, #128]	; (48998 <event_handler+0xbc>)
   48916:	4618      	mov	r0, r3
   48918:	e9cd 3300 	strd	r3, r3, [sp]
   4891c:	f00e f854 	bl	569c8 <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   48920:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   48922:	b004      	add	sp, #16
   48924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   48928:	f7ff bf84 	b.w	48834 <transfer_next_chunk>
	ctx->tx_len -= len;
   4892c:	1a52      	subs	r2, r2, r1
   4892e:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   48930:	b97a      	cbnz	r2, 48952 <event_handler+0x76>
		++ctx->current_tx;
   48932:	6c63      	ldr	r3, [r4, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   48934:	f104 0258 	add.w	r2, r4, #88	; 0x58
		++ctx->current_tx;
   48938:	3308      	adds	r3, #8
   4893a:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   4893c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   4893e:	f104 0148 	add.w	r1, r4, #72	; 0x48
		--ctx->tx_count;
   48942:	3b01      	subs	r3, #1
   48944:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   48946:	f104 0044 	add.w	r0, r4, #68	; 0x44
   4894a:	f00e f82a 	bl	569a2 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   4894e:	6560      	str	r0, [r4, #84]	; 0x54
   48950:	e7d7      	b.n	48902 <event_handler+0x26>
	} else if (ctx->tx_buf) {
   48952:	6d63      	ldr	r3, [r4, #84]	; 0x54
   48954:	2b00      	cmp	r3, #0
   48956:	d0d4      	beq.n	48902 <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   48958:	440b      	add	r3, r1
   4895a:	6563      	str	r3, [r4, #84]	; 0x54
   4895c:	e7d1      	b.n	48902 <event_handler+0x26>
	ctx->rx_len -= len;
   4895e:	1a9b      	subs	r3, r3, r2
   48960:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   48962:	b97b      	cbnz	r3, 48984 <event_handler+0xa8>
		++ctx->current_rx;
   48964:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   48966:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   4896a:	3308      	adds	r3, #8
   4896c:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   4896e:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   48970:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   48974:	3b01      	subs	r3, #1
   48976:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   48978:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   4897c:	f00e f811 	bl	569a2 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   48980:	65e0      	str	r0, [r4, #92]	; 0x5c
   48982:	e7cd      	b.n	48920 <event_handler+0x44>
	} else if (ctx->rx_buf) {
   48984:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   48986:	2b00      	cmp	r3, #0
   48988:	d0ca      	beq.n	48920 <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   4898a:	4413      	add	r3, r2
   4898c:	65e3      	str	r3, [r4, #92]	; 0x5c
   4898e:	e7c7      	b.n	48920 <event_handler+0x44>
}
   48990:	b004      	add	sp, #16
   48992:	bd10      	pop	{r4, pc}
   48994:	0005e40e 	.word	0x0005e40e
   48998:	0005bfbc 	.word	0x0005bfbc

0004899c <spi_nrfx_transceive>:
{
   4899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   489a0:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   489a2:	888b      	ldrh	r3, [r1, #4]
   489a4:	460f      	mov	r7, r1
   489a6:	0499      	lsls	r1, r3, #18
   489a8:	4680      	mov	r8, r0
   489aa:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   489ac:	6904      	ldr	r4, [r0, #16]
{
   489ae:	b08f      	sub	sp, #60	; 0x3c
   489b0:	d436      	bmi.n	48a20 <spi_nrfx_transceive+0x84>
	return z_impl_k_sem_take(sem, timeout);
   489b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   489b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   489ba:	f104 0010 	add.w	r0, r4, #16
   489be:	f009 fe75 	bl	526ac <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   489c2:	6067      	str	r7, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   489c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   489c8:	f8d8 a010 	ldr.w	sl, [r8, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   489cc:	9305      	str	r3, [sp, #20]
	uint32_t max_freq = dev_config->max_freq;
   489ce:	689b      	ldr	r3, [r3, #8]
   489d0:	9307      	str	r3, [sp, #28]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   489d2:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   489d6:	9306      	str	r3, [sp, #24]
   489d8:	b123      	cbz	r3, 489e4 <spi_nrfx_transceive+0x48>
   489da:	f8da 3000 	ldr.w	r3, [sl]
   489de:	429f      	cmp	r7, r3
   489e0:	f000 80c2 	beq.w	48b68 <spi_nrfx_transceive+0x1cc>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   489e4:	88be      	ldrh	r6, [r7, #4]
   489e6:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   489ea:	d020      	beq.n	48a2e <spi_nrfx_transceive+0x92>
		LOG_ERR("Half-duplex not supported");
   489ec:	4b95      	ldr	r3, [pc, #596]	; (48c44 <spi_nrfx_transceive+0x2a8>)
   489ee:	2201      	movs	r2, #1
   489f0:	9302      	str	r3, [sp, #8]
   489f2:	2300      	movs	r3, #0
   489f4:	4994      	ldr	r1, [pc, #592]	; (48c48 <spi_nrfx_transceive+0x2ac>)
   489f6:	4618      	mov	r0, r3
   489f8:	e9cd 3300 	strd	r3, r3, [sp]
   489fc:	f00d ffe4 	bl	569c8 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   48a00:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   48a04:	6823      	ldr	r3, [r4, #0]
   48a06:	889b      	ldrh	r3, [r3, #4]
   48a08:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   48a0c:	d104      	bne.n	48a18 <spi_nrfx_transceive+0x7c>
		ctx->owner = NULL;
   48a0e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   48a10:	f104 0010 	add.w	r0, r4, #16
   48a14:	f009 fe24 	bl	52660 <z_impl_k_sem_give>
}
   48a18:	4628      	mov	r0, r5
   48a1a:	b00f      	add	sp, #60	; 0x3c
   48a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   48a20:	69a3      	ldr	r3, [r4, #24]
   48a22:	2b00      	cmp	r3, #0
   48a24:	d1c5      	bne.n	489b2 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   48a26:	6863      	ldr	r3, [r4, #4]
   48a28:	429f      	cmp	r7, r3
   48a2a:	d1c2      	bne.n	489b2 <spi_nrfx_transceive+0x16>
   48a2c:	e7ca      	b.n	489c4 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   48a2e:	f016 0201 	ands.w	r2, r6, #1
   48a32:	d00e      	beq.n	48a52 <spi_nrfx_transceive+0xb6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   48a34:	f8d8 2000 	ldr.w	r2, [r8]
   48a38:	4618      	mov	r0, r3
   48a3a:	9203      	str	r2, [sp, #12]
   48a3c:	4a83      	ldr	r2, [pc, #524]	; (48c4c <spi_nrfx_transceive+0x2b0>)
   48a3e:	4982      	ldr	r1, [pc, #520]	; (48c48 <spi_nrfx_transceive+0x2ac>)
   48a40:	e9cd 3201 	strd	r3, r2, [sp, #4]
   48a44:	9300      	str	r3, [sp, #0]
   48a46:	2201      	movs	r2, #1
   48a48:	f00d ffbe 	bl	569c8 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   48a4c:	f06f 0515 	mvn.w	r5, #21
   48a50:	e7d8      	b.n	48a04 <spi_nrfx_transceive+0x68>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   48a52:	f016 0308 	ands.w	r3, r6, #8
   48a56:	d00a      	beq.n	48a6e <spi_nrfx_transceive+0xd2>
		LOG_ERR("Loopback mode is not supported");
   48a58:	4b7d      	ldr	r3, [pc, #500]	; (48c50 <spi_nrfx_transceive+0x2b4>)
   48a5a:	9200      	str	r2, [sp, #0]
   48a5c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   48a60:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   48a62:	2201      	movs	r2, #1
   48a64:	4618      	mov	r0, r3
   48a66:	4978      	ldr	r1, [pc, #480]	; (48c48 <spi_nrfx_transceive+0x2ac>)
   48a68:	f00d ffae 	bl	569c8 <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   48a6c:	e7ee      	b.n	48a4c <spi_nrfx_transceive+0xb0>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   48a6e:	f3c6 1245 	ubfx	r2, r6, #5, #6
   48a72:	2a08      	cmp	r2, #8
   48a74:	d004      	beq.n	48a80 <spi_nrfx_transceive+0xe4>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   48a76:	4a77      	ldr	r2, [pc, #476]	; (48c54 <spi_nrfx_transceive+0x2b8>)
   48a78:	e9cd 3201 	strd	r3, r2, [sp, #4]
   48a7c:	9300      	str	r3, [sp, #0]
   48a7e:	e7f0      	b.n	48a62 <spi_nrfx_transceive+0xc6>
	if (spi_cfg->frequency < 125000) {
   48a80:	683d      	ldr	r5, [r7, #0]
   48a82:	4a75      	ldr	r2, [pc, #468]	; (48c58 <spi_nrfx_transceive+0x2bc>)
   48a84:	4295      	cmp	r5, r2
   48a86:	d801      	bhi.n	48a8c <spi_nrfx_transceive+0xf0>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   48a88:	4a74      	ldr	r2, [pc, #464]	; (48c5c <spi_nrfx_transceive+0x2c0>)
   48a8a:	e7f5      	b.n	48a78 <spi_nrfx_transceive+0xdc>
	config = dev_config->def_config;
   48a8c:	9b05      	ldr	r3, [sp, #20]
   48a8e:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   48a92:	f103 0e0c 	add.w	lr, r3, #12
   48a96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   48a9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   48a9e:	f8de 3000 	ldr.w	r3, [lr]
   48aa2:	f8cc 3000 	str.w	r3, [ip]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   48aa6:	9b07      	ldr	r3, [sp, #28]
   48aa8:	42ab      	cmp	r3, r5
   48aaa:	bf28      	it	cs
   48aac:	462b      	movcs	r3, r5
   48aae:	461d      	mov	r5, r3
	if (frequency < 250000) {
   48ab0:	4b6b      	ldr	r3, [pc, #428]	; (48c60 <spi_nrfx_transceive+0x2c4>)
   48ab2:	429d      	cmp	r5, r3
   48ab4:	d940      	bls.n	48b38 <spi_nrfx_transceive+0x19c>
	} else if (frequency < 500000) {
   48ab6:	4b6b      	ldr	r3, [pc, #428]	; (48c64 <spi_nrfx_transceive+0x2c8>)
   48ab8:	429d      	cmp	r5, r3
   48aba:	d940      	bls.n	48b3e <spi_nrfx_transceive+0x1a2>
	} else if (frequency < 1000000) {
   48abc:	4b6a      	ldr	r3, [pc, #424]	; (48c68 <spi_nrfx_transceive+0x2cc>)
   48abe:	429d      	cmp	r5, r3
   48ac0:	d940      	bls.n	48b44 <spi_nrfx_transceive+0x1a8>
	} else if (frequency < 2000000) {
   48ac2:	4b6a      	ldr	r3, [pc, #424]	; (48c6c <spi_nrfx_transceive+0x2d0>)
   48ac4:	429d      	cmp	r5, r3
   48ac6:	d940      	bls.n	48b4a <spi_nrfx_transceive+0x1ae>
	} else if (frequency < 4000000) {
   48ac8:	4b69      	ldr	r3, [pc, #420]	; (48c70 <spi_nrfx_transceive+0x2d4>)
   48aca:	429d      	cmp	r5, r3
   48acc:	d940      	bls.n	48b50 <spi_nrfx_transceive+0x1b4>
		return NRF_SPIM_FREQ_4M;
   48ace:	4b69      	ldr	r3, [pc, #420]	; (48c74 <spi_nrfx_transceive+0x2d8>)
   48ad0:	429d      	cmp	r5, r3
   48ad2:	bf2c      	ite	cs
   48ad4:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
   48ad8:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   48adc:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   48ade:	950b      	str	r5, [sp, #44]	; 0x2c
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   48ae0:	f006 0304 	and.w	r3, r6, #4
   48ae4:	d537      	bpl.n	48b56 <spi_nrfx_transceive+0x1ba>
			return NRF_SPIM_MODE_2;
   48ae6:	2b00      	cmp	r3, #0
   48ae8:	bf14      	ite	ne
   48aea:	2303      	movne	r3, #3
   48aec:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   48aee:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (dev_data->initialized) {
   48af2:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
   48af4:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   48af8:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
	if (dev_data->initialized) {
   48afc:	b12b      	cbz	r3, 48b0a <spi_nrfx_transceive+0x16e>
		nrfx_spim_uninit(&dev_config->spim);
   48afe:	9805      	ldr	r0, [sp, #20]
   48b00:	f007 f972 	bl	4fde8 <nrfx_spim_uninit>
		dev_data->initialized = false;
   48b04:	2300      	movs	r3, #0
   48b06:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   48b0a:	4653      	mov	r3, sl
   48b0c:	4a5a      	ldr	r2, [pc, #360]	; (48c78 <spi_nrfx_transceive+0x2dc>)
   48b0e:	9805      	ldr	r0, [sp, #20]
   48b10:	a909      	add	r1, sp, #36	; 0x24
   48b12:	f007 f8c1 	bl	4fc98 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   48b16:	4b59      	ldr	r3, [pc, #356]	; (48c7c <spi_nrfx_transceive+0x2e0>)
   48b18:	4298      	cmp	r0, r3
   48b1a:	d020      	beq.n	48b5e <spi_nrfx_transceive+0x1c2>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   48b1c:	4b58      	ldr	r3, [pc, #352]	; (48c80 <spi_nrfx_transceive+0x2e4>)
   48b1e:	9003      	str	r0, [sp, #12]
   48b20:	9302      	str	r3, [sp, #8]
   48b22:	2300      	movs	r3, #0
   48b24:	2201      	movs	r2, #1
   48b26:	4618      	mov	r0, r3
   48b28:	e9cd 3300 	strd	r3, r3, [sp]
   48b2c:	4946      	ldr	r1, [pc, #280]	; (48c48 <spi_nrfx_transceive+0x2ac>)
   48b2e:	f00d ff4b 	bl	569c8 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   48b32:	f06f 0504 	mvn.w	r5, #4
   48b36:	e765      	b.n	48a04 <spi_nrfx_transceive+0x68>
		return NRF_SPIM_FREQ_125K;
   48b38:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   48b3c:	e7ce      	b.n	48adc <spi_nrfx_transceive+0x140>
		return NRF_SPIM_FREQ_250K;
   48b3e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   48b42:	e7cb      	b.n	48adc <spi_nrfx_transceive+0x140>
		return NRF_SPIM_FREQ_500K;
   48b44:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   48b48:	e7c8      	b.n	48adc <spi_nrfx_transceive+0x140>
		return NRF_SPIM_FREQ_1M;
   48b4a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   48b4e:	e7c5      	b.n	48adc <spi_nrfx_transceive+0x140>
		return NRF_SPIM_FREQ_2M;
   48b50:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   48b54:	e7c2      	b.n	48adc <spi_nrfx_transceive+0x140>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   48b56:	3b00      	subs	r3, #0
   48b58:	bf18      	it	ne
   48b5a:	2301      	movne	r3, #1
   48b5c:	e7c7      	b.n	48aee <spi_nrfx_transceive+0x152>
	dev_data->initialized = true;
   48b5e:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   48b60:	f8ca 7000 	str.w	r7, [sl]
	dev_data->initialized = true;
   48b64:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   48b68:	2301      	movs	r3, #1
   48b6a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   48b6e:	f1b9 0f00 	cmp.w	r9, #0
   48b72:	d154      	bne.n	48c1e <spi_nrfx_transceive+0x282>
   48b74:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   48b78:	2300      	movs	r3, #0
   48b7a:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   48b7c:	f104 0258 	add.w	r2, r4, #88	; 0x58
   48b80:	f104 0148 	add.w	r1, r4, #72	; 0x48
   48b84:	f104 0044 	add.w	r0, r4, #68	; 0x44
   48b88:	f00d ff0b 	bl	569a2 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   48b8c:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   48b8e:	f1bb 0f00 	cmp.w	fp, #0
   48b92:	d14c      	bne.n	48c2e <spi_nrfx_transceive+0x292>
   48b94:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   48b98:	2300      	movs	r3, #0
   48b9a:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   48b9c:	f104 0260 	add.w	r2, r4, #96	; 0x60
   48ba0:	f104 0150 	add.w	r1, r4, #80	; 0x50
   48ba4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   48ba8:	f00d fefb 	bl	569a2 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   48bac:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   48bae:	2101      	movs	r1, #1
   48bb0:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   48bb2:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   48bb4:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   48bb6:	4620      	mov	r0, r4
   48bb8:	f00d ff53 	bl	56a62 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   48bbc:	4640      	mov	r0, r8
   48bbe:	f7ff fe39 	bl	48834 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   48bc2:	6e25      	ldr	r5, [r4, #96]	; 0x60
   48bc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   48bc6:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   48bc8:	429d      	cmp	r5, r3
   48bca:	bf38      	it	cc
   48bcc:	461d      	movcc	r5, r3
   48bce:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   48bd2:	435d      	muls	r5, r3
			     ctx->config->frequency;
   48bd4:	f857 3b28 	ldr.w	r3, [r7], #40
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   48bd8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   48bdc:	681b      	ldr	r3, [r3, #0]
   48bde:	4631      	mov	r1, r6
   48be0:	fbb5 f5f3 	udiv	r5, r5, r3
   48be4:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   48be8:	35c8      	adds	r5, #200	; 0xc8
   48bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48bee:	2300      	movs	r3, #0
   48bf0:	fbe5 010c 	umlal	r0, r1, r5, ip
   48bf4:	f7f7 ff8c 	bl	40b10 <__aeabi_uldivmod>
   48bf8:	4602      	mov	r2, r0
   48bfa:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   48bfc:	4638      	mov	r0, r7
   48bfe:	f009 fd55 	bl	526ac <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   48c02:	b1e0      	cbz	r0, 48c3e <spi_nrfx_transceive+0x2a2>
		LOG_ERR("Timeout waiting for transfer complete");
   48c04:	4b1f      	ldr	r3, [pc, #124]	; (48c84 <spi_nrfx_transceive+0x2e8>)
   48c06:	2201      	movs	r2, #1
   48c08:	e9cd 6301 	strd	r6, r3, [sp, #4]
   48c0c:	4630      	mov	r0, r6
   48c0e:	4633      	mov	r3, r6
   48c10:	490d      	ldr	r1, [pc, #52]	; (48c48 <spi_nrfx_transceive+0x2ac>)
   48c12:	9600      	str	r6, [sp, #0]
   48c14:	f00d fed8 	bl	569c8 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   48c18:	f06f 0573 	mvn.w	r5, #115	; 0x73
   48c1c:	e6f2      	b.n	48a04 <spi_nrfx_transceive+0x68>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   48c1e:	f8d9 3000 	ldr.w	r3, [r9]
   48c22:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   48c24:	2b00      	cmp	r3, #0
   48c26:	d0a7      	beq.n	48b78 <spi_nrfx_transceive+0x1dc>
   48c28:	f8d9 3004 	ldr.w	r3, [r9, #4]
   48c2c:	e7a5      	b.n	48b7a <spi_nrfx_transceive+0x1de>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   48c2e:	f8db 3000 	ldr.w	r3, [fp]
   48c32:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   48c34:	2b00      	cmp	r3, #0
   48c36:	d0af      	beq.n	48b98 <spi_nrfx_transceive+0x1fc>
   48c38:	f8db 3004 	ldr.w	r3, [fp, #4]
   48c3c:	e7ad      	b.n	48b9a <spi_nrfx_transceive+0x1fe>
	status = ctx->sync_status;
   48c3e:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   48c40:	e6e0      	b.n	48a04 <spi_nrfx_transceive+0x68>
   48c42:	bf00      	nop
   48c44:	0005e42c 	.word	0x0005e42c
   48c48:	0005bfbc 	.word	0x0005bfbc
   48c4c:	0005e446 	.word	0x0005e446
   48c50:	0005e468 	.word	0x0005e468
   48c54:	0005e487 	.word	0x0005e487
   48c58:	0001e847 	.word	0x0001e847
   48c5c:	0005e4b6 	.word	0x0005e4b6
   48c60:	0003d08f 	.word	0x0003d08f
   48c64:	0007a11f 	.word	0x0007a11f
   48c68:	000f423f 	.word	0x000f423f
   48c6c:	001e847f 	.word	0x001e847f
   48c70:	003d08ff 	.word	0x003d08ff
   48c74:	007a1200 	.word	0x007a1200
   48c78:	000488dd 	.word	0x000488dd
   48c7c:	0bad0000 	.word	0x0bad0000
   48c80:	0005e4e7 	.word	0x0005e4e7
   48c84:	0005e50e 	.word	0x0005e50e

00048c88 <sdhc_spi_rx>:
};

/* Receives a block of bytes */
static int sdhc_spi_rx(const struct device *spi_dev, struct spi_config *spi_cfg,
	uint8_t *buf, int len)
{
   48c88:	b510      	push	{r4, lr}
	struct spi_buf tx_bufs[] = {
   48c8a:	4c09      	ldr	r4, [pc, #36]	; (48cb0 <sdhc_spi_rx+0x28>)
{
   48c8c:	b088      	sub	sp, #32
	struct spi_buf tx_bufs[] = {
   48c8e:	e9cd 4300 	strd	r4, r3, [sp]
			.buf = (uint8_t *)sdhc_ones,
			.len = len
		}
	};

	const struct spi_buf_set tx = {
   48c92:	2401      	movs	r4, #1
		.buffers = tx_bufs,
		.count = 1,
	};

	struct spi_buf rx_bufs[] = {
   48c94:	9305      	str	r3, [sp, #20]
			.buf = buf,
			.len = len
		}
	};

	const struct spi_buf_set rx = {
   48c96:	ab04      	add	r3, sp, #16
	struct spi_buf rx_bufs[] = {
   48c98:	e9cd 4203 	strd	r4, r2, [sp, #12]
	const struct spi_buf_set rx = {
   48c9c:	e9cd 3406 	strd	r3, r4, [sp, #24]
		.buffers = rx_bufs,
		.count = 1,
	};

	return spi_transceive(spi_dev, spi_cfg, &tx, &rx);
   48ca0:	aa02      	add	r2, sp, #8
   48ca2:	ab06      	add	r3, sp, #24
	const struct spi_buf_set tx = {
   48ca4:	f8cd d008 	str.w	sp, [sp, #8]
	return spi_transceive(spi_dev, spi_cfg, &tx, &rx);
   48ca8:	f00d ff33 	bl	56b12 <spi_transceive>
}
   48cac:	b008      	add	sp, #32
   48cae:	bd10      	pop	{r4, pc}
   48cb0:	0005e5a3 	.word	0x0005e5a3

00048cb4 <sdhc_spi_reset>:
static int sdhc_spi_reset(const struct device *dev)
{
	struct sdhc_spi_data *data = dev->data;

	/* Reset host I/O */
	data->spi_cfg->frequency = SDMMC_CLOCK_400KHZ;
   48cb4:	6903      	ldr	r3, [r0, #16]
   48cb6:	4a02      	ldr	r2, [pc, #8]	; (48cc0 <sdhc_spi_reset+0xc>)
   48cb8:	685b      	ldr	r3, [r3, #4]
	return 0;
}
   48cba:	2000      	movs	r0, #0
	data->spi_cfg->frequency = SDMMC_CLOCK_400KHZ;
   48cbc:	601a      	str	r2, [r3, #0]
}
   48cbe:	4770      	bx	lr
   48cc0:	00061a80 	.word	0x00061a80

00048cc4 <sdhc_spi_get_host_props>:
{
   48cc4:	460b      	mov	r3, r1
   48cc6:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
   48cc8:	2224      	movs	r2, #36	; 0x24
	const struct sdhc_spi_config *cfg = dev->config;
   48cca:	6844      	ldr	r4, [r0, #4]
   48ccc:	2100      	movs	r1, #0
   48cce:	4618      	mov	r0, r3
   48cd0:	f012 f8fd 	bl	5aece <memset>
	props->f_min = SDMMC_CLOCK_400KHZ;
   48cd4:	4a07      	ldr	r2, [pc, #28]	; (48cf4 <sdhc_spi_get_host_props+0x30>)
   48cd6:	6042      	str	r2, [r0, #4]
	props->f_max = cfg->spi_max_freq;
   48cd8:	68e2      	ldr	r2, [r4, #12]
   48cda:	6002      	str	r2, [r0, #0]
	props->power_delay = 1000; /* SPI always needs 1ms power delay */
   48cdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48ce0:	6082      	str	r2, [r0, #8]
	props->host_caps.vol_330_support = true;
   48ce2:	7b82      	ldrb	r2, [r0, #14]
   48ce4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   48ce8:	7382      	strb	r2, [r0, #14]
	props->is_spi = true;
   48cea:	2201      	movs	r2, #1
   48cec:	f880 2020 	strb.w	r2, [r0, #32]
}
   48cf0:	2000      	movs	r0, #0
   48cf2:	bd10      	pop	{r4, pc}
   48cf4:	00061a80 	.word	0x00061a80

00048cf8 <sdhc_skip.constprop.0>:
static int sdhc_skip(const struct device *dev, uint8_t skip_val)
   48cf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t retries = SD_SPI_SKIP_RETRIES;
   48cfa:	4c0c      	ldr	r4, [pc, #48]	; (48d2c <sdhc_skip.constprop.0+0x34>)
	const struct sdhc_spi_config *config = dev->config;
   48cfc:	6845      	ldr	r5, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   48cfe:	6906      	ldr	r6, [r0, #16]
		ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg,
   48d00:	2301      	movs	r3, #1
   48d02:	6871      	ldr	r1, [r6, #4]
   48d04:	6828      	ldr	r0, [r5, #0]
   48d06:	f10d 0207 	add.w	r2, sp, #7
   48d0a:	f7ff ffbd 	bl	48c88 <sdhc_spi_rx>
		if (ret) {
   48d0e:	b928      	cbnz	r0, 48d1c <sdhc_skip.constprop.0+0x24>
	} while (buf == skip_val && retries--);
   48d10:	f89d 0007 	ldrb.w	r0, [sp, #7]
   48d14:	28ff      	cmp	r0, #255	; 0xff
   48d16:	d103      	bne.n	48d20 <sdhc_skip.constprop.0+0x28>
   48d18:	3c01      	subs	r4, #1
   48d1a:	d2f1      	bcs.n	48d00 <sdhc_skip.constprop.0+0x8>
}
   48d1c:	b002      	add	sp, #8
   48d1e:	bd70      	pop	{r4, r5, r6, pc}
	if (retries == 0) {
   48d20:	2c00      	cmp	r4, #0
   48d22:	d1fb      	bne.n	48d1c <sdhc_skip.constprop.0+0x24>
		return -ETIMEDOUT;
   48d24:	f06f 0073 	mvn.w	r0, #115	; 0x73
   48d28:	e7f8      	b.n	48d1c <sdhc_skip.constprop.0+0x24>
   48d2a:	bf00      	nop
   48d2c:	000f4240 	.word	0x000f4240

00048d30 <sdhc_spi_set_io>:
{
   48d30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct sdhc_spi_data *data = dev->data;
   48d34:	6904      	ldr	r4, [r0, #16]
	if (ios->clock != data->spi_cfg->frequency) {
   48d36:	680b      	ldr	r3, [r1, #0]
{
   48d38:	460e      	mov	r6, r1
	if (ios->clock != data->spi_cfg->frequency) {
   48d3a:	6861      	ldr	r1, [r4, #4]
	const struct sdhc_spi_config *cfg = dev->config;
   48d3c:	6847      	ldr	r7, [r0, #4]
	if (ios->clock != data->spi_cfg->frequency) {
   48d3e:	680a      	ldr	r2, [r1, #0]
   48d40:	4293      	cmp	r3, r2
   48d42:	d016      	beq.n	48d72 <sdhc_spi_set_io+0x42>
		if (ios->clock > cfg->spi_max_freq) {
   48d44:	68fa      	ldr	r2, [r7, #12]
   48d46:	4293      	cmp	r3, r2
   48d48:	d904      	bls.n	48d54 <sdhc_spi_set_io+0x24>
			return -ENOTSUP;
   48d4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   48d4e:	b004      	add	sp, #16
   48d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ios->clock != 0) {
   48d54:	b16b      	cbz	r3, 48d72 <sdhc_spi_set_io+0x42>
			if (data->spi_cfg == &data->cfg_a) {
   48d56:	f104 0508 	add.w	r5, r4, #8
   48d5a:	42a9      	cmp	r1, r5
				memcpy(&data->cfg_b, &data->cfg_a,
   48d5c:	f104 0214 	add.w	r2, r4, #20
			if (data->spi_cfg == &data->cfg_a) {
   48d60:	d135      	bne.n	48dce <sdhc_spi_set_io+0x9e>
				data->cfg_a.frequency = ios->clock;
   48d62:	60a3      	str	r3, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   48d64:	680b      	ldr	r3, [r1, #0]
   48d66:	6163      	str	r3, [r4, #20]
   48d68:	684b      	ldr	r3, [r1, #4]
   48d6a:	6053      	str	r3, [r2, #4]
   48d6c:	688b      	ldr	r3, [r1, #8]
   48d6e:	6093      	str	r3, [r2, #8]
				data->spi_cfg = &data->cfg_b;
   48d70:	6062      	str	r2, [r4, #4]
	if (ios->bus_mode != SDHC_BUSMODE_PUSHPULL) {
   48d72:	7933      	ldrb	r3, [r6, #4]
   48d74:	2b02      	cmp	r3, #2
   48d76:	d1e8      	bne.n	48d4a <sdhc_spi_set_io+0x1a>
	if (data->power_mode != ios->power_mode) {
   48d78:	7973      	ldrb	r3, [r6, #5]
   48d7a:	7822      	ldrb	r2, [r4, #0]
   48d7c:	429a      	cmp	r2, r3
   48d7e:	d040      	beq.n	48e02 <sdhc_spi_set_io+0xd2>
		if (ios->power_mode == SDHC_POWER_ON) {
   48d80:	2b02      	cmp	r3, #2
   48d82:	d139      	bne.n	48df8 <sdhc_spi_set_io+0xc8>
	struct sdhc_spi_data *data = dev->data;
   48d84:	6902      	ldr	r2, [r0, #16]
	const struct sdhc_spi_config *config = dev->config;
   48d86:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_config *spi_cfg = data->spi_cfg;
   48d8a:	6855      	ldr	r5, [r2, #4]
	if (spi_cfg->frequency == 0) {
   48d8c:	682b      	ldr	r3, [r5, #0]
   48d8e:	b90b      	cbnz	r3, 48d94 <sdhc_spi_set_io+0x64>
		spi_cfg->frequency = SDMMC_CLOCK_400KHZ;
   48d90:	4b26      	ldr	r3, [pc, #152]	; (48e2c <sdhc_spi_set_io+0xfc>)
   48d92:	602b      	str	r3, [r5, #0]
	spi_cfg->operation |= SPI_CS_ACTIVE_HIGH;
   48d94:	88ab      	ldrh	r3, [r5, #4]
	ret = sdhc_spi_rx(config->spi_dev, spi_cfg, data->scratch, 10);
   48d96:	4629      	mov	r1, r5
	spi_cfg->operation |= SPI_CS_ACTIVE_HIGH;
   48d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   48d9c:	80ab      	strh	r3, [r5, #4]
	ret = sdhc_spi_rx(config->spi_dev, spi_cfg, data->scratch, 10);
   48d9e:	f8d8 0000 	ldr.w	r0, [r8]
   48da2:	230a      	movs	r3, #10
   48da4:	3220      	adds	r2, #32
   48da6:	f7ff ff6f 	bl	48c88 <sdhc_spi_rx>
	if (ret != 0) {
   48daa:	b1c8      	cbz	r0, 48de0 <sdhc_spi_set_io+0xb0>
		spi_cfg->operation &= ~SPI_CS_ACTIVE_HIGH;
   48dac:	88ab      	ldrh	r3, [r5, #4]
   48dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   48db2:	80ab      	strh	r3, [r5, #4]
				LOG_ERR("Card SCLK init sequence failed");
   48db4:	4b1e      	ldr	r3, [pc, #120]	; (48e30 <sdhc_spi_set_io+0x100>)
   48db6:	2201      	movs	r2, #1
   48db8:	9302      	str	r3, [sp, #8]
   48dba:	2300      	movs	r3, #0
   48dbc:	491d      	ldr	r1, [pc, #116]	; (48e34 <sdhc_spi_set_io+0x104>)
   48dbe:	4618      	mov	r0, r3
   48dc0:	e9cd 3300 	strd	r3, r3, [sp]
   48dc4:	f00d fed6 	bl	56b74 <z_log_msg_runtime_create.constprop.0>
				return -EIO;
   48dc8:	f06f 0004 	mvn.w	r0, #4
   48dcc:	e7bf      	b.n	48d4e <sdhc_spi_set_io+0x1e>
				data->cfg_b.frequency = ios->clock;
   48dce:	6163      	str	r3, [r4, #20]
   48dd0:	6963      	ldr	r3, [r4, #20]
   48dd2:	60a3      	str	r3, [r4, #8]
   48dd4:	6853      	ldr	r3, [r2, #4]
   48dd6:	606b      	str	r3, [r5, #4]
   48dd8:	6893      	ldr	r3, [r2, #8]
   48dda:	60ab      	str	r3, [r5, #8]
				data->spi_cfg = &data->cfg_a;
   48ddc:	6065      	str	r5, [r4, #4]
   48dde:	e7c8      	b.n	48d72 <sdhc_spi_set_io+0x42>
	ret = spi_release(config->spi_dev, spi_cfg);
   48de0:	f8d8 0000 	ldr.w	r0, [r8]
				     const struct spi_config *config)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->release(dev, config);
   48de4:	6883      	ldr	r3, [r0, #8]
   48de6:	4629      	mov	r1, r5
   48de8:	685b      	ldr	r3, [r3, #4]
   48dea:	4798      	blx	r3
	spi_cfg->operation &= ~SPI_CS_ACTIVE_HIGH;
   48dec:	88ab      	ldrh	r3, [r5, #4]
   48dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   48df2:	80ab      	strh	r3, [r5, #4]
			if (sdhc_spi_init_card(dev) != 0) {
   48df4:	2800      	cmp	r0, #0
   48df6:	d1dd      	bne.n	48db4 <sdhc_spi_set_io+0x84>
		if (cfg->pwr_gpio.port) {
   48df8:	687a      	ldr	r2, [r7, #4]
			if (ios->power_mode == SDHC_POWER_ON) {
   48dfa:	7973      	ldrb	r3, [r6, #5]
		if (cfg->pwr_gpio.port) {
   48dfc:	b94a      	cbnz	r2, 48e12 <sdhc_spi_set_io+0xe2>
		data->power_mode = ios->power_mode;
   48dfe:	7973      	ldrb	r3, [r6, #5]
   48e00:	7023      	strb	r3, [r4, #0]
	if (ios->bus_width != SDHC_BUS_WIDTH1BIT) {
   48e02:	79b3      	ldrb	r3, [r6, #6]
   48e04:	2b01      	cmp	r3, #1
   48e06:	d1a0      	bne.n	48d4a <sdhc_spi_set_io+0x1a>
	if (ios->signal_voltage != SD_VOL_3_3_V) {
   48e08:	7a73      	ldrb	r3, [r6, #9]
   48e0a:	2b01      	cmp	r3, #1
   48e0c:	d19d      	bne.n	48d4a <sdhc_spi_set_io+0x1a>
	return 0;
   48e0e:	2000      	movs	r0, #0
   48e10:	e79d      	b.n	48d4e <sdhc_spi_set_io+0x1e>
			if (ios->power_mode == SDHC_POWER_ON) {
   48e12:	2b02      	cmp	r3, #2
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 1)) {
   48e14:	f107 0004 	add.w	r0, r7, #4
			if (ios->power_mode == SDHC_POWER_ON) {
   48e18:	d105      	bne.n	48e26 <sdhc_spi_set_io+0xf6>
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 1)) {
   48e1a:	2101      	movs	r1, #1
   48e1c:	f00d fe65 	bl	56aea <gpio_pin_set_dt>
   48e20:	2800      	cmp	r0, #0
   48e22:	d0ec      	beq.n	48dfe <sdhc_spi_set_io+0xce>
   48e24:	e7d0      	b.n	48dc8 <sdhc_spi_set_io+0x98>
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 0)) {
   48e26:	2100      	movs	r1, #0
   48e28:	e7f8      	b.n	48e1c <sdhc_spi_set_io+0xec>
   48e2a:	bf00      	nop
   48e2c:	00061a80 	.word	0x00061a80
   48e30:	0005e54b 	.word	0x0005e54b
   48e34:	0005bfac 	.word	0x0005bfac

00048e38 <sdhc_spi_request>:
{
   48e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sdhc_spi_config *config = dev->config;
   48e3c:	6843      	ldr	r3, [r0, #4]
{
   48e3e:	b09f      	sub	sp, #124	; 0x7c
	const struct sdhc_spi_config *config = dev->config;
   48e40:	9306      	str	r3, [sp, #24]
	struct sdhc_spi_data *dev_data = dev->data;
   48e42:	6903      	ldr	r3, [r0, #16]
	int ret, retries = cmd->retries;
   48e44:	f8d1 a01c 	ldr.w	sl, [r1, #28]
{
   48e48:	4605      	mov	r5, r0
   48e4a:	4689      	mov	r9, r1
   48e4c:	4616      	mov	r6, r2
	const struct sdhc_command stop_cmd = {
   48e4e:	2100      	movs	r1, #0
   48e50:	2214      	movs	r2, #20
   48e52:	a816      	add	r0, sp, #88	; 0x58
	struct sdhc_spi_data *dev_data = dev->data;
   48e54:	9307      	str	r3, [sp, #28]
	const struct sdhc_command stop_cmd = {
   48e56:	f012 f83a 	bl	5aece <memset>
   48e5a:	230c      	movs	r3, #12
   48e5c:	2120      	movs	r1, #32
   48e5e:	9315      	str	r3, [sp, #84]	; 0x54
   48e60:	2301      	movs	r3, #1
   48e62:	e9cd 131b 	strd	r1, r3, [sp, #108]	; 0x6c
   48e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   48e6a:	931d      	str	r3, [sp, #116]	; 0x74
	if (data == NULL) {
   48e6c:	2e00      	cmp	r6, #0
   48e6e:	d05c      	beq.n	48f2a <sdhc_spi_request+0xf2>
			ret = sdhc_spi_send_cmd(dev, cmd, true);
   48e70:	2201      	movs	r2, #1
   48e72:	4649      	mov	r1, r9
   48e74:	4628      	mov	r0, r5
   48e76:	f00d fec8 	bl	56c0a <sdhc_spi_send_cmd>
			if (ret) {
   48e7a:	4604      	mov	r4, r0
   48e7c:	2800      	cmp	r0, #0
   48e7e:	f040 8090 	bne.w	48fa2 <sdhc_spi_request+0x16a>
			if ((cmd->opcode == SD_WRITE_SINGLE_BLOCK) ||
   48e82:	f8d9 2000 	ldr.w	r2, [r9]
	const struct sdhc_spi_config *config = dev->config;
   48e86:	686b      	ldr	r3, [r5, #4]
			if ((cmd->opcode == SD_WRITE_SINGLE_BLOCK) ||
   48e88:	3a18      	subs	r2, #24
   48e8a:	2a01      	cmp	r2, #1
	const struct sdhc_spi_config *config = dev->config;
   48e8c:	9304      	str	r3, [sp, #16]
	struct sdhc_spi_data *dev_data = dev->data;
   48e8e:	f8d5 b010 	ldr.w	fp, [r5, #16]
	uint8_t *write_location = data->data, crc[SD_SPI_CRC16_SIZE];
   48e92:	6937      	ldr	r7, [r6, #16]
			.len = data->block_size,
   48e94:	e9d6 3801 	ldrd	r3, r8, [r6, #4]
			if ((cmd->opcode == SD_WRITE_SINGLE_BLOCK) ||
   48e98:	f200 809e 	bhi.w	48fd8 <sdhc_spi_request+0x1a0>
	struct spi_buf tx_bufs[] = {
   48e9c:	9312      	str	r3, [sp, #72]	; 0x48
   48e9e:	ab0b      	add	r3, sp, #44	; 0x2c
   48ea0:	9313      	str	r3, [sp, #76]	; 0x4c
   48ea2:	2302      	movs	r3, #2
   48ea4:	9314      	str	r3, [sp, #80]	; 0x50
	struct spi_buf_set tx = {
   48ea6:	ab0f      	add	r3, sp, #60	; 0x3c
   48ea8:	930d      	str	r3, [sp, #52]	; 0x34
   48eaa:	2303      	movs	r3, #3
	struct spi_buf tx_bufs[] = {
   48eac:	aa08      	add	r2, sp, #32
   48eae:	920f      	str	r2, [sp, #60]	; 0x3c
   48eb0:	2201      	movs	r2, #1
		token = SD_SPI_TOKEN_MULTI_WRITE;
   48eb2:	f1b8 0f02 	cmp.w	r8, #2
	struct spi_buf_set tx = {
   48eb6:	930e      	str	r3, [sp, #56]	; 0x38
		token = SD_SPI_TOKEN_MULTI_WRITE;
   48eb8:	bf34      	ite	cc
   48eba:	23fe      	movcc	r3, #254	; 0xfe
   48ebc:	23fc      	movcs	r3, #252	; 0xfc
	struct spi_buf tx_bufs[] = {
   48ebe:	e9cd 2710 	strd	r2, r7, [sp, #64]	; 0x40
   48ec2:	f88d 3020 	strb.w	r3, [sp, #32]
	while (remaining--) {
   48ec6:	f1b8 0f00 	cmp.w	r8, #0
   48eca:	d13f      	bne.n	48f4c <sdhc_spi_request+0x114>
	if (data->blocks > 1) {
   48ecc:	68b3      	ldr	r3, [r6, #8]
   48ece:	2b01      	cmp	r3, #1
   48ed0:	d917      	bls.n	48f02 <sdhc_spi_request+0xca>
		token = SD_SPI_TOKEN_STOP_TRAN;
   48ed2:	23fd      	movs	r3, #253	; 0xfd
   48ed4:	f88d 3020 	strb.w	r3, [sp, #32]
		tx.count = 1;
   48ed8:	2301      	movs	r3, #1
	return spi_transceive(dev, config, tx_bufs, NULL);
   48eda:	9804      	ldr	r0, [sp, #16]
   48edc:	930e      	str	r3, [sp, #56]	; 0x38
   48ede:	f8db 1004 	ldr.w	r1, [fp, #4]
   48ee2:	4643      	mov	r3, r8
   48ee4:	6800      	ldr	r0, [r0, #0]
   48ee6:	aa0d      	add	r2, sp, #52	; 0x34
   48ee8:	f00d fe13 	bl	56b12 <spi_transceive>
		if (ret) {
   48eec:	4604      	mov	r4, r0
   48eee:	2800      	cmp	r0, #0
   48ef0:	d16c      	bne.n	48fcc <sdhc_spi_request+0x194>
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
   48ef2:	4642      	mov	r2, r8
   48ef4:	4628      	mov	r0, r5
   48ef6:	6971      	ldr	r1, [r6, #20]
   48ef8:	f00d fe4c 	bl	56b94 <sdhc_spi_wait_unbusy>
		if (ret) {
   48efc:	4604      	mov	r4, r0
			if (ret || (cmd->opcode == SD_READ_MULTIPLE_BLOCK)) {
   48efe:	2c00      	cmp	r4, #0
   48f00:	d164      	bne.n	48fcc <sdhc_spi_request+0x194>
   48f02:	f8d9 3000 	ldr.w	r3, [r9]
   48f06:	2b12      	cmp	r3, #18
   48f08:	d104      	bne.n	48f14 <sdhc_spi_request+0xdc>
				sdhc_spi_send_cmd(dev,
   48f0a:	2200      	movs	r2, #0
   48f0c:	4628      	mov	r0, r5
   48f0e:	a915      	add	r1, sp, #84	; 0x54
   48f10:	f00d fe7b 	bl	56c0a <sdhc_spi_send_cmd>
	return spi_release(config->spi_dev, dev_data->spi_cfg);
   48f14:	9b06      	ldr	r3, [sp, #24]
   48f16:	6818      	ldr	r0, [r3, #0]
   48f18:	9b07      	ldr	r3, [sp, #28]
   48f1a:	6859      	ldr	r1, [r3, #4]
	return api->release(dev, config);
   48f1c:	6883      	ldr	r3, [r0, #8]
   48f1e:	685b      	ldr	r3, [r3, #4]
}
   48f20:	b01f      	add	sp, #124	; 0x7c
   48f22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   48f26:	4718      	bx	r3
		} while ((ret != 0) && (retries-- > 0));
   48f28:	469a      	mov	sl, r3
			ret = sdhc_spi_send_cmd(dev, cmd, false);
   48f2a:	2200      	movs	r2, #0
   48f2c:	4649      	mov	r1, r9
   48f2e:	4628      	mov	r0, r5
   48f30:	f00d fe6b 	bl	56c0a <sdhc_spi_send_cmd>
		} while ((ret != 0) && (retries-- > 0));
   48f34:	4604      	mov	r4, r0
   48f36:	2800      	cmp	r0, #0
   48f38:	d0ec      	beq.n	48f14 <sdhc_spi_request+0xdc>
   48f3a:	f1ba 0f00 	cmp.w	sl, #0
   48f3e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   48f42:	dcf1      	bgt.n	48f28 <sdhc_spi_request+0xf0>
}
   48f44:	4620      	mov	r0, r4
   48f46:	b01f      	add	sp, #124	; 0x7c
   48f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_put_be16(crc16_itu_t(0, write_location, data->block_size),
   48f4c:	4639      	mov	r1, r7
   48f4e:	6872      	ldr	r2, [r6, #4]
   48f50:	2000      	movs	r0, #0
   48f52:	f00c fb98 	bl	55686 <crc16_itu_t>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val >> 8;
   48f56:	ba40      	rev16	r0, r0
   48f58:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
	return spi_transceive(dev, config, tx_bufs, NULL);
   48f5c:	9804      	ldr	r0, [sp, #16]
   48f5e:	2300      	movs	r3, #0
   48f60:	f8db 1004 	ldr.w	r1, [fp, #4]
   48f64:	6800      	ldr	r0, [r0, #0]
   48f66:	aa0d      	add	r2, sp, #52	; 0x34
   48f68:	f00d fdd3 	bl	56b12 <spi_transceive>
		if (ret) {
   48f6c:	4604      	mov	r4, r0
   48f6e:	bb68      	cbnz	r0, 48fcc <sdhc_spi_request+0x194>
		ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
   48f70:	9804      	ldr	r0, [sp, #16]
   48f72:	2301      	movs	r3, #1
   48f74:	f8db 1004 	ldr.w	r1, [fp, #4]
   48f78:	6800      	ldr	r0, [r0, #0]
   48f7a:	aa09      	add	r2, sp, #36	; 0x24
   48f7c:	f7ff fe84 	bl	48c88 <sdhc_spi_rx>
		if (ret) {
   48f80:	4604      	mov	r4, r0
   48f82:	bb18      	cbnz	r0, 48fcc <sdhc_spi_request+0x194>
		if ((resp & 0xF) != SD_SPI_RESPONSE_ACCEPTED) {
   48f84:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   48f88:	f003 030f 	and.w	r3, r3, #15
   48f8c:	2b05      	cmp	r3, #5
   48f8e:	d00f      	beq.n	48fb0 <sdhc_spi_request+0x178>
			if ((resp & 0xF) == SD_SPI_RESPONSE_CRC_ERR) {
   48f90:	2b0b      	cmp	r3, #11
   48f92:	d13a      	bne.n	4900a <sdhc_spi_request+0x1d2>
				sdhc_spi_send_cmd(dev,
   48f94:	4602      	mov	r2, r0
   48f96:	a915      	add	r1, sp, #84	; 0x54
   48f98:	4628      	mov	r0, r5
   48f9a:	f00d fe36 	bl	56c0a <sdhc_spi_send_cmd>
   48f9e:	f06f 0489 	mvn.w	r4, #137	; 0x89
		} while ((ret != 0) && (retries-- > 0));
   48fa2:	f1ba 0f00 	cmp.w	sl, #0
   48fa6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   48faa:	ddcb      	ble.n	48f44 <sdhc_spi_request+0x10c>
   48fac:	469a      	mov	sl, r3
   48fae:	e75f      	b.n	48e70 <sdhc_spi_request+0x38>
		write_location += data->block_size;
   48fb0:	6873      	ldr	r3, [r6, #4]
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
   48fb2:	4602      	mov	r2, r0
		write_location += data->block_size;
   48fb4:	441f      	add	r7, r3
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
   48fb6:	4628      	mov	r0, r5
   48fb8:	6971      	ldr	r1, [r6, #20]
		tx_bufs[1].buf = write_location;
   48fba:	9711      	str	r7, [sp, #68]	; 0x44
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
   48fbc:	f00d fdea 	bl	56b94 <sdhc_spi_wait_unbusy>
		if (ret) {
   48fc0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   48fc4:	4604      	mov	r4, r0
   48fc6:	2800      	cmp	r0, #0
   48fc8:	f43f af7d 	beq.w	48ec6 <sdhc_spi_request+0x8e>
				sdhc_spi_send_cmd(dev,
   48fcc:	2200      	movs	r2, #0
   48fce:	4628      	mov	r0, r5
   48fd0:	a915      	add	r1, sp, #84	; 0x54
   48fd2:	f00d fe1a 	bl	56c0a <sdhc_spi_send_cmd>
		} while ((ret != 0) && (retries-- > 0));
   48fd6:	e7e4      	b.n	48fa2 <sdhc_spi_request+0x16a>
	const struct spi_buf tx_bufs[] = {
   48fd8:	4a39      	ldr	r2, [pc, #228]	; (490c0 <sdhc_spi_request+0x288>)
	const struct spi_buf_set rx = {
   48fda:	a90d      	add	r1, sp, #52	; 0x34
	const struct spi_buf tx_bufs[] = {
   48fdc:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	const struct spi_buf_set tx = {
   48fe0:	aa09      	add	r2, sp, #36	; 0x24
   48fe2:	920b      	str	r2, [sp, #44]	; 0x2c
   48fe4:	2201      	movs	r2, #1
	if (data->block_size > 512) {
   48fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	struct spi_buf rx_bufs[] = {
   48fea:	e9cd 270c 	strd	r2, r7, [sp, #48]	; 0x30
	const struct spi_buf_set rx = {
   48fee:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
	struct spi_buf rx_bufs[] = {
   48ff2:	930e      	str	r3, [sp, #56]	; 0x38
	if (data->block_size > 512) {
   48ff4:	d902      	bls.n	48ffc <sdhc_spi_request+0x1c4>
		return -ENOTSUP;
   48ff6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   48ffa:	e7e7      	b.n	48fcc <sdhc_spi_request+0x194>
	ret = sdhc_skip(dev, 0xff);
   48ffc:	4628      	mov	r0, r5
   48ffe:	f7ff fe7b 	bl	48cf8 <sdhc_skip.constprop.0>
	if (ret < 0) {
   49002:	1e04      	subs	r4, r0, #0
   49004:	dbe2      	blt.n	48fcc <sdhc_spi_request+0x194>
	if (ret != SD_SPI_TOKEN_SINGLE)	{
   49006:	2cfe      	cmp	r4, #254	; 0xfe
   49008:	d053      	beq.n	490b2 <sdhc_spi_request+0x27a>
		return -EIO;
   4900a:	f06f 0404 	mvn.w	r4, #4
   4900e:	e7dd      	b.n	48fcc <sdhc_spi_request+0x194>
		ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
   49010:	9804      	ldr	r0, [sp, #16]
   49012:	2303      	movs	r3, #3
   49014:	f8db 1004 	ldr.w	r1, [fp, #4]
   49018:	aa08      	add	r2, sp, #32
   4901a:	6800      	ldr	r0, [r0, #0]
   4901c:	f7ff fe34 	bl	48c88 <sdhc_spi_rx>
		if (crc16_itu_t(0, read_location, data->block_size) !=
   49020:	4639      	mov	r1, r7
		ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
   49022:	4604      	mov	r4, r0
		if (crc16_itu_t(0, read_location, data->block_size) !=
   49024:	6872      	ldr	r2, [r6, #4]
   49026:	2000      	movs	r0, #0
   49028:	f00c fb2d 	bl	55686 <crc16_itu_t>
   4902c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   49030:	ba5b      	rev16	r3, r3
   49032:	b29b      	uxth	r3, r3
   49034:	4283      	cmp	r3, r0
   49036:	d00c      	beq.n	49052 <sdhc_spi_request+0x21a>
			LOG_ERR("Bad data CRC");
   49038:	4b22      	ldr	r3, [pc, #136]	; (490c4 <sdhc_spi_request+0x28c>)
   4903a:	2201      	movs	r2, #1
   4903c:	9302      	str	r3, [sp, #8]
   4903e:	2300      	movs	r3, #0
   49040:	4921      	ldr	r1, [pc, #132]	; (490c8 <sdhc_spi_request+0x290>)
   49042:	4618      	mov	r0, r3
   49044:	e9cd 3300 	strd	r3, r3, [sp]
   49048:	f00d fd94 	bl	56b74 <z_log_msg_runtime_create.constprop.0>
			return -EILSEQ;
   4904c:	f06f 0489 	mvn.w	r4, #137	; 0x89
   49050:	e7bc      	b.n	48fcc <sdhc_spi_request+0x194>
		read_location += data->block_size;
   49052:	6873      	ldr	r3, [r6, #4]
   49054:	441f      	add	r7, r3
		if (remaining) {
   49056:	9b05      	ldr	r3, [sp, #20]
		rx_bufs[0].buf = read_location;
   49058:	970d      	str	r7, [sp, #52]	; 0x34
		if (remaining) {
   4905a:	2b00      	cmp	r3, #0
   4905c:	f43f af4f 	beq.w	48efe <sdhc_spi_request+0xc6>
			ret = sdhc_skip(dev, 0xff);
   49060:	4628      	mov	r0, r5
   49062:	f7ff fe49 	bl	48cf8 <sdhc_skip.constprop.0>
			if (ret != SD_SPI_TOKEN_SINGLE) {
   49066:	28fe      	cmp	r0, #254	; 0xfe
   49068:	d00a      	beq.n	49080 <sdhc_spi_request+0x248>
				LOG_ERR("Bad token");
   4906a:	4b18      	ldr	r3, [pc, #96]	; (490cc <sdhc_spi_request+0x294>)
   4906c:	2201      	movs	r2, #1
   4906e:	9302      	str	r3, [sp, #8]
   49070:	2300      	movs	r3, #0
   49072:	4915      	ldr	r1, [pc, #84]	; (490c8 <sdhc_spi_request+0x290>)
   49074:	4618      	mov	r0, r3
   49076:	e9cd 3300 	strd	r3, r3, [sp]
   4907a:	f00d fd7b 	bl	56b74 <z_log_msg_runtime_create.constprop.0>
			if (ret || (cmd->opcode == SD_READ_MULTIPLE_BLOCK)) {
   4907e:	e7c4      	b.n	4900a <sdhc_spi_request+0x1d2>
	while (remaining--) {
   49080:	9b05      	ldr	r3, [sp, #20]
   49082:	3b01      	subs	r3, #1
   49084:	9305      	str	r3, [sp, #20]
		ret = spi_transceive(config->spi_dev,
   49086:	9804      	ldr	r0, [sp, #16]
   49088:	f8db 1004 	ldr.w	r1, [fp, #4]
   4908c:	6800      	ldr	r0, [r0, #0]
   4908e:	ab0f      	add	r3, sp, #60	; 0x3c
   49090:	aa0b      	add	r2, sp, #44	; 0x2c
   49092:	f00d fd3e 	bl	56b12 <spi_transceive>
		if (ret) {
   49096:	4604      	mov	r4, r0
   49098:	2800      	cmp	r0, #0
   4909a:	d0b9      	beq.n	49010 <sdhc_spi_request+0x1d8>
			LOG_ERR("Data write failed");
   4909c:	4b0c      	ldr	r3, [pc, #48]	; (490d0 <sdhc_spi_request+0x298>)
   4909e:	2201      	movs	r2, #1
   490a0:	9302      	str	r3, [sp, #8]
   490a2:	2300      	movs	r3, #0
   490a4:	4908      	ldr	r1, [pc, #32]	; (490c8 <sdhc_spi_request+0x290>)
   490a6:	4618      	mov	r0, r3
   490a8:	e9cd 3300 	strd	r3, r3, [sp]
   490ac:	f00d fd62 	bl	56b74 <z_log_msg_runtime_create.constprop.0>
			if (ret || (cmd->opcode == SD_READ_MULTIPLE_BLOCK)) {
   490b0:	e78c      	b.n	48fcc <sdhc_spi_request+0x194>
	while (remaining--) {
   490b2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   490b6:	9305      	str	r3, [sp, #20]
   490b8:	f1b8 0f00 	cmp.w	r8, #0
   490bc:	d1e3      	bne.n	49086 <sdhc_spi_request+0x24e>
   490be:	e785      	b.n	48fcc <sdhc_spi_request+0x194>
   490c0:	0005e5a3 	.word	0x0005e5a3
   490c4:	0005e57c 	.word	0x0005e57c
   490c8:	0005bfac 	.word	0x0005bfac
   490cc:	0005e589 	.word	0x0005e589
   490d0:	0005e56a 	.word	0x0005e56a

000490d4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   490d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   490d6:	ab0b      	add	r3, sp, #44	; 0x2c
   490d8:	9305      	str	r3, [sp, #20]
   490da:	9303      	str	r3, [sp, #12]
   490dc:	4b05      	ldr	r3, [pc, #20]	; (490f4 <z_log_msg_runtime_create.constprop.0+0x20>)
   490de:	2201      	movs	r2, #1
   490e0:	9302      	str	r3, [sp, #8]
   490e2:	2300      	movs	r3, #0
   490e4:	4618      	mov	r0, r3
   490e6:	e9cd 3300 	strd	r3, r3, [sp]
   490ea:	f7fc f85d 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   490ee:	b007      	add	sp, #28
   490f0:	f85d fb04 	ldr.w	pc, [sp], #4
   490f4:	0005e7a3 	.word	0x0005e7a3

000490f8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   490f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   490fa:	794b      	ldrb	r3, [r1, #5]
   490fc:	2b01      	cmp	r3, #1
   490fe:	d026      	beq.n	4914e <uarte_nrfx_configure+0x56>
   49100:	2b03      	cmp	r3, #3
   49102:	d121      	bne.n	49148 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   49104:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   49106:	798b      	ldrb	r3, [r1, #6]
   49108:	2b03      	cmp	r3, #3
   4910a:	d11d      	bne.n	49148 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   4910c:	79ce      	ldrb	r6, [r1, #7]
   4910e:	b10e      	cbz	r6, 49114 <uarte_nrfx_configure+0x1c>
   49110:	2e01      	cmp	r6, #1
   49112:	d119      	bne.n	49148 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   49114:	790a      	ldrb	r2, [r1, #4]
   49116:	b112      	cbz	r2, 4911e <uarte_nrfx_configure+0x26>
   49118:	2a02      	cmp	r2, #2
   4911a:	d115      	bne.n	49148 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   4911c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   4911e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   49120:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   49122:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   49126:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   49128:	d067      	beq.n	491fa <uarte_nrfx_configure+0x102>
   4912a:	d82d      	bhi.n	49188 <uarte_nrfx_configure+0x90>
   4912c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   49130:	d066      	beq.n	49200 <uarte_nrfx_configure+0x108>
   49132:	d816      	bhi.n	49162 <uarte_nrfx_configure+0x6a>
   49134:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   49138:	d064      	beq.n	49204 <uarte_nrfx_configure+0x10c>
   4913a:	d80a      	bhi.n	49152 <uarte_nrfx_configure+0x5a>
   4913c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   49140:	d063      	beq.n	4920a <uarte_nrfx_configure+0x112>
   49142:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   49146:	d063      	beq.n	49210 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   49148:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4914c:	e054      	b.n	491f8 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   4914e:	2500      	movs	r5, #0
   49150:	e7d9      	b.n	49106 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   49152:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   49156:	d05e      	beq.n	49216 <uarte_nrfx_configure+0x11e>
   49158:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   4915c:	d1f4      	bne.n	49148 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   4915e:	4b38      	ldr	r3, [pc, #224]	; (49240 <uarte_nrfx_configure+0x148>)
   49160:	e03c      	b.n	491dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   49162:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   49166:	d059      	beq.n	4921c <uarte_nrfx_configure+0x124>
   49168:	d807      	bhi.n	4917a <uarte_nrfx_configure+0x82>
   4916a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   4916e:	d057      	beq.n	49220 <uarte_nrfx_configure+0x128>
   49170:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   49174:	d1e8      	bne.n	49148 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   49176:	4b33      	ldr	r3, [pc, #204]	; (49244 <uarte_nrfx_configure+0x14c>)
   49178:	e030      	b.n	491dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   4917a:	f647 2412 	movw	r4, #31250	; 0x7a12
   4917e:	42a3      	cmp	r3, r4
   49180:	d1e2      	bne.n	49148 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   49182:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   49186:	e029      	b.n	491dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   49188:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   4918c:	d04a      	beq.n	49224 <uarte_nrfx_configure+0x12c>
   4918e:	d813      	bhi.n	491b8 <uarte_nrfx_configure+0xc0>
   49190:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   49194:	d049      	beq.n	4922a <uarte_nrfx_configure+0x132>
   49196:	d809      	bhi.n	491ac <uarte_nrfx_configure+0xb4>
   49198:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   4919c:	42a3      	cmp	r3, r4
   4919e:	d046      	beq.n	4922e <uarte_nrfx_configure+0x136>
   491a0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   491a4:	d1d0      	bne.n	49148 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   491a6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   491aa:	e017      	b.n	491dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   491ac:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   491b0:	d1ca      	bne.n	49148 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   491b2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   491b6:	e011      	b.n	491dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   491b8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   491bc:	d03a      	beq.n	49234 <uarte_nrfx_configure+0x13c>
   491be:	d808      	bhi.n	491d2 <uarte_nrfx_configure+0xda>
   491c0:	4c21      	ldr	r4, [pc, #132]	; (49248 <uarte_nrfx_configure+0x150>)
   491c2:	42a3      	cmp	r3, r4
   491c4:	d039      	beq.n	4923a <uarte_nrfx_configure+0x142>
   491c6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   491ca:	d1bd      	bne.n	49148 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   491cc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   491d0:	e004      	b.n	491dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   491d2:	4c1e      	ldr	r4, [pc, #120]	; (4924c <uarte_nrfx_configure+0x154>)
   491d4:	42a3      	cmp	r3, r4
   491d6:	d1b7      	bne.n	49148 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   491d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   491dc:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   491de:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   491e2:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   491e4:	4335      	orrs	r5, r6
   491e6:	681b      	ldr	r3, [r3, #0]
   491e8:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   491ea:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   491ee:	1d23      	adds	r3, r4, #4
   491f0:	c903      	ldmia	r1, {r0, r1}
   491f2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   491f6:	2000      	movs	r0, #0
}
   491f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   491fa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   491fe:	e7ed      	b.n	491dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   49200:	4b13      	ldr	r3, [pc, #76]	; (49250 <uarte_nrfx_configure+0x158>)
   49202:	e7eb      	b.n	491dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   49204:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   49208:	e7e8      	b.n	491dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   4920a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   4920e:	e7e5      	b.n	491dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   49210:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   49214:	e7e2      	b.n	491dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   49216:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   4921a:	e7df      	b.n	491dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   4921c:	4b0d      	ldr	r3, [pc, #52]	; (49254 <uarte_nrfx_configure+0x15c>)
   4921e:	e7dd      	b.n	491dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   49220:	4b0d      	ldr	r3, [pc, #52]	; (49258 <uarte_nrfx_configure+0x160>)
   49222:	e7db      	b.n	491dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   49224:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   49228:	e7d8      	b.n	491dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   4922a:	4b0c      	ldr	r3, [pc, #48]	; (4925c <uarte_nrfx_configure+0x164>)
   4922c:	e7d6      	b.n	491dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   4922e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   49232:	e7d3      	b.n	491dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   49234:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   49238:	e7d0      	b.n	491dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   4923a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   4923e:	e7cd      	b.n	491dc <uarte_nrfx_configure+0xe4>
   49240:	0013b000 	.word	0x0013b000
   49244:	004ea000 	.word	0x004ea000
   49248:	0003d090 	.word	0x0003d090
   4924c:	000f4240 	.word	0x000f4240
   49250:	00275000 	.word	0x00275000
   49254:	0075c000 	.word	0x0075c000
   49258:	003af000 	.word	0x003af000
   4925c:	013a9000 	.word	0x013a9000

00049260 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   49260:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   49264:	4680      	mov	r8, r0
   49266:	2200      	movs	r2, #0
   49268:	2101      	movs	r1, #1
   4926a:	2008      	movs	r0, #8
   4926c:	f7fc fda0 	bl	45db0 <z_arm_irq_priority_set>
   49270:	2008      	movs	r0, #8
   49272:	f7fc fd6d 	bl	45d50 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   49276:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   49278:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   4927c:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   49280:	683c      	ldr	r4, [r7, #0]
   49282:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   49286:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   4928a:	68f8      	ldr	r0, [r7, #12]
   4928c:	f00d ff28 	bl	570e0 <pinctrl_apply_state>
	if (err < 0) {
   49290:	1e05      	subs	r5, r0, #0
   49292:	db1b      	blt.n	492cc <uarte_0_init+0x6c>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   49294:	4640      	mov	r0, r8
   49296:	1d31      	adds	r1, r6, #4
   49298:	f7ff ff2e 	bl	490f8 <uarte_nrfx_configure>
	if (err) {
   4929c:	4605      	mov	r5, r0
   4929e:	b9a8      	cbnz	r0, 492cc <uarte_0_init+0x6c>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   492a0:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   492a2:	0799      	lsls	r1, r3, #30
   492a4:	d523      	bpl.n	492ee <uarte_0_init+0x8e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   492a6:	f106 001c 	add.w	r0, r6, #28
   492aa:	f006 f901 	bl	4f4b0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   492ae:	4b24      	ldr	r3, [pc, #144]	; (49340 <uarte_0_init+0xe0>)
   492b0:	4298      	cmp	r0, r3
   492b2:	d00f      	beq.n	492d4 <uarte_0_init+0x74>
		LOG_ERR("Failed to allocate PPI Channel");
   492b4:	4b23      	ldr	r3, [pc, #140]	; (49344 <uarte_0_init+0xe4>)
   492b6:	4628      	mov	r0, r5
   492b8:	e9cd 5301 	strd	r5, r3, [sp, #4]
   492bc:	9500      	str	r5, [sp, #0]
   492be:	462b      	mov	r3, r5
   492c0:	2201      	movs	r2, #1
   492c2:	4921      	ldr	r1, [pc, #132]	; (49348 <uarte_0_init+0xe8>)
   492c4:	f7ff ff06 	bl	490d4 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   492c8:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   492cc:	4628      	mov	r0, r5
   492ce:	b004      	add	sp, #16
   492d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   492d4:	7f33      	ldrb	r3, [r6, #28]
   492d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   492da:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   492de:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   492e2:	2301      	movs	r3, #1
   492e4:	7f32      	ldrb	r2, [r6, #28]
   492e6:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   492e8:	4a18      	ldr	r2, [pc, #96]	; (4934c <uarte_0_init+0xec>)
   492ea:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   492ee:	2308      	movs	r3, #8
   492f0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   492f4:	7a3b      	ldrb	r3, [r7, #8]
   492f6:	b953      	cbnz	r3, 4930e <uarte_0_init+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   492f8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   492fc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   49300:	69b3      	ldr	r3, [r6, #24]
   49302:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   49306:	2301      	movs	r3, #1
   49308:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4930c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   4930e:	687b      	ldr	r3, [r7, #4]
   49310:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   49312:	bf5c      	itt	pl
   49314:	f44f 7380 	movpl.w	r3, #256	; 0x100
   49318:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   4931c:	687b      	ldr	r3, [r7, #4]
   4931e:	06db      	lsls	r3, r3, #27
   49320:	bf44      	itt	mi
   49322:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   49326:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   4932a:	6973      	ldr	r3, [r6, #20]
   4932c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   49330:	2300      	movs	r3, #0
   49332:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   49336:	2301      	movs	r3, #1
   49338:	60a3      	str	r3, [r4, #8]
   4933a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   4933c:	e7c6      	b.n	492cc <uarte_0_init+0x6c>
   4933e:	bf00      	nop
   49340:	0bad0000 	.word	0x0bad0000
   49344:	0005e7a3 	.word	0x0005e7a3
   49348:	0005bfc4 	.word	0x0005bfc4
   4934c:	40017000 	.word	0x40017000

00049350 <uarte_nrfx_poll_out>:
{
   49350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49352:	4604      	mov	r4, r0
   49354:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   49356:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   49358:	f011 fa49 	bl	5a7ee <k_is_in_isr>
   4935c:	b9b0      	cbnz	r0, 4938c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   4935e:	4b21      	ldr	r3, [pc, #132]	; (493e4 <uarte_nrfx_poll_out+0x94>)
   49360:	781b      	ldrb	r3, [r3, #0]
   49362:	b19b      	cbz	r3, 4938c <uarte_nrfx_poll_out+0x3c>
{
   49364:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   49366:	6860      	ldr	r0, [r4, #4]
   49368:	f00d fe10 	bl	56f8c <is_tx_ready.isra.0>
   4936c:	bb00      	cbnz	r0, 493b0 <uarte_nrfx_poll_out+0x60>
   4936e:	2001      	movs	r0, #1
   49370:	f010 fa73 	bl	5985a <nrfx_busy_wait>
   49374:	3e01      	subs	r6, #1
   49376:	d1f6      	bne.n	49366 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   49378:	2100      	movs	r1, #0
   4937a:	2021      	movs	r0, #33	; 0x21
   4937c:	f009 fd82 	bl	52e84 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   49380:	e7f0      	b.n	49364 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   49382:	f381 8811 	msr	BASEPRI, r1
   49386:	f3bf 8f6f 	isb	sy
}
   4938a:	e7f5      	b.n	49378 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   4938c:	f04f 0320 	mov.w	r3, #32
   49390:	f3ef 8111 	mrs	r1, BASEPRI
   49394:	f383 8812 	msr	BASEPRI_MAX, r3
   49398:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   4939c:	6860      	ldr	r0, [r4, #4]
   4939e:	460e      	mov	r6, r1
   493a0:	f00d fdf4 	bl	56f8c <is_tx_ready.isra.0>
   493a4:	b990      	cbnz	r0, 493cc <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   493a6:	f381 8811 	msr	BASEPRI, r1
   493aa:	f3bf 8f6f 	isb	sy
}
   493ae:	e7ed      	b.n	4938c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   493b0:	f04f 0320 	mov.w	r3, #32
   493b4:	f3ef 8111 	mrs	r1, BASEPRI
   493b8:	f383 8812 	msr	BASEPRI_MAX, r3
   493bc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   493c0:	6860      	ldr	r0, [r4, #4]
   493c2:	460e      	mov	r6, r1
   493c4:	f00d fde2 	bl	56f8c <is_tx_ready.isra.0>
   493c8:	2800      	cmp	r0, #0
   493ca:	d0da      	beq.n	49382 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   493cc:	697b      	ldr	r3, [r7, #20]
	tx_start(dev, data->char_out, 1);
   493ce:	2201      	movs	r2, #1
	*data->char_out = c;
   493d0:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   493d2:	4620      	mov	r0, r4
   493d4:	6979      	ldr	r1, [r7, #20]
   493d6:	f00d fdab 	bl	56f30 <tx_start>
	__asm__ volatile(
   493da:	f386 8811 	msr	BASEPRI, r6
   493de:	f3bf 8f6f 	isb	sy
}
   493e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   493e4:	2002083d 	.word	0x2002083d

000493e8 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   493e8:	2301      	movs	r3, #1
   493ea:	4083      	lsls	r3, r0
{
   493ec:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   493ee:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   493f0:	4a0b      	ldr	r2, [pc, #44]	; (49420 <compare_int_lock+0x38>)
   493f2:	e8d2 1fef 	ldaex	r1, [r2]
   493f6:	ea01 0504 	and.w	r5, r1, r4
   493fa:	e8c2 5fe6 	stlex	r6, r5, [r2]
   493fe:	2e00      	cmp	r6, #0
   49400:	d1f7      	bne.n	493f2 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   49402:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   49406:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   49408:	4806      	ldr	r0, [pc, #24]	; (49424 <compare_int_lock+0x3c>)
   4940a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   4940e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   49412:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   49416:	420b      	tst	r3, r1
}
   49418:	bf14      	ite	ne
   4941a:	2001      	movne	r0, #1
   4941c:	2000      	moveq	r0, #0
   4941e:	bd70      	pop	{r4, r5, r6, pc}
   49420:	2001b67c 	.word	0x2001b67c
   49424:	40015000 	.word	0x40015000

00049428 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   49428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   4942a:	491b      	ldr	r1, [pc, #108]	; (49498 <sys_clock_timeout_handler+0x70>)
{
   4942c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   4942e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   49432:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   49434:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   49438:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   4943c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   4943e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   49442:	d30f      	bcc.n	49464 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   49444:	f009 fe96 	bl	53174 <sys_clock_announce>
    return p_reg->CC[ch];
   49448:	00a3      	lsls	r3, r4, #2
   4944a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4944e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   49452:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   49456:	4295      	cmp	r5, r2
   49458:	d11d      	bne.n	49496 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   4945a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   4945e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   49462:	e012      	b.n	4948a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   49464:	4b0d      	ldr	r3, [pc, #52]	; (4949c <sys_clock_timeout_handler+0x74>)
   49466:	681b      	ldr	r3, [r3, #0]
   49468:	0a1a      	lsrs	r2, r3, #8
   4946a:	061b      	lsls	r3, r3, #24
   4946c:	195e      	adds	r6, r3, r5
   4946e:	4b0c      	ldr	r3, [pc, #48]	; (494a0 <sys_clock_timeout_handler+0x78>)
   49470:	f142 0700 	adc.w	r7, r2, #0
   49474:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   49478:	f009 fe7c 	bl	53174 <sys_clock_announce>
    return p_reg->CC[ch];
   4947c:	4a09      	ldr	r2, [pc, #36]	; (494a4 <sys_clock_timeout_handler+0x7c>)
   4947e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   49482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   49486:	429d      	cmp	r5, r3
   49488:	d105      	bne.n	49496 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   4948a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   4948e:	4a05      	ldr	r2, [pc, #20]	; (494a4 <sys_clock_timeout_handler+0x7c>)
   49490:	40a3      	lsls	r3, r4
   49492:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   49496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   49498:	2001ac80 	.word	0x2001ac80
   4949c:	2001b680 	.word	0x2001b680
   494a0:	2001ac88 	.word	0x2001ac88
   494a4:	40015000 	.word	0x40015000

000494a8 <compare_int_unlock>:
	if (key) {
   494a8:	b1d9      	cbz	r1, 494e2 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   494aa:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   494ac:	4a0d      	ldr	r2, [pc, #52]	; (494e4 <compare_int_unlock+0x3c>)
   494ae:	4083      	lsls	r3, r0
   494b0:	e8d2 cfef 	ldaex	ip, [r2]
   494b4:	ea4c 0c03 	orr.w	ip, ip, r3
   494b8:	e8c2 cfe1 	stlex	r1, ip, [r2]
   494bc:	2900      	cmp	r1, #0
   494be:	d1f7      	bne.n	494b0 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   494c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   494c4:	4a08      	ldr	r2, [pc, #32]	; (494e8 <compare_int_unlock+0x40>)
   494c6:	4083      	lsls	r3, r0
   494c8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   494cc:	4b07      	ldr	r3, [pc, #28]	; (494ec <compare_int_unlock+0x44>)
   494ce:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   494d2:	40c3      	lsrs	r3, r0
   494d4:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   494d6:	bf42      	ittt	mi
   494d8:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   494dc:	4b04      	ldrmi	r3, [pc, #16]	; (494f0 <compare_int_unlock+0x48>)
   494de:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   494e2:	4770      	bx	lr
   494e4:	2001b67c 	.word	0x2001b67c
   494e8:	40015000 	.word	0x40015000
   494ec:	2001b678 	.word	0x2001b678
   494f0:	e000e100 	.word	0xe000e100

000494f4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   494f4:	4b0d      	ldr	r3, [pc, #52]	; (4952c <z_nrf_rtc_timer_read+0x38>)
   494f6:	6818      	ldr	r0, [r3, #0]
   494f8:	0a01      	lsrs	r1, r0, #8
   494fa:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   494fc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   49500:	4b0b      	ldr	r3, [pc, #44]	; (49530 <z_nrf_rtc_timer_read+0x3c>)
   49502:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   49506:	1818      	adds	r0, r3, r0
   49508:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   4950c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   49510:	d20a      	bcs.n	49528 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   49512:	4b08      	ldr	r3, [pc, #32]	; (49534 <z_nrf_rtc_timer_read+0x40>)
   49514:	e9d3 2300 	ldrd	r2, r3, [r3]
   49518:	4290      	cmp	r0, r2
   4951a:	eb71 0303 	sbcs.w	r3, r1, r3
   4951e:	d203      	bcs.n	49528 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   49520:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   49524:	f141 0100 	adc.w	r1, r1, #0
}
   49528:	4770      	bx	lr
   4952a:	bf00      	nop
   4952c:	2001b680 	.word	0x2001b680
   49530:	40015000 	.word	0x40015000
   49534:	2001ac88 	.word	0x2001ac88

00049538 <compare_set>:
{
   49538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4953c:	4614      	mov	r4, r2
   4953e:	461d      	mov	r5, r3
   49540:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   49542:	f7ff ff51 	bl	493e8 <compare_int_lock>
   49546:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   49548:	f7ff ffd4 	bl	494f4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   4954c:	42a0      	cmp	r0, r4
   4954e:	eb71 0305 	sbcs.w	r3, r1, r5
   49552:	d27a      	bcs.n	4964a <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
   49554:	4b44      	ldr	r3, [pc, #272]	; (49668 <compare_set+0x130>)
   49556:	1a20      	subs	r0, r4, r0
   49558:	eb65 0101 	sbc.w	r1, r5, r1
   4955c:	4298      	cmp	r0, r3
   4955e:	f171 0100 	sbcs.w	r1, r1, #0
   49562:	d27d      	bcs.n	49660 <compare_set+0x128>
		if (target_time != cc_data[chan].target_time) {
   49564:	4b41      	ldr	r3, [pc, #260]	; (4966c <compare_set+0x134>)
   49566:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   4956a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   4956e:	429d      	cmp	r5, r3
   49570:	bf08      	it	eq
   49572:	4294      	cmpeq	r4, r2
   49574:	d054      	beq.n	49620 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   49576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   4957a:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   4957e:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   49580:	2100      	movs	r1, #0
   49582:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   49586:	f107 0850 	add.w	r8, r7, #80	; 0x50
   4958a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   4958e:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   49592:	40bb      	lsls	r3, r7
   49594:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
   49598:	fa1f f888 	uxth.w	r8, r8
   4959c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   495a0:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   495a2:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   495a6:	4b32      	ldr	r3, [pc, #200]	; (49670 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   495a8:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   495ac:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   495b0:	eba0 000a 	sub.w	r0, r0, sl
   495b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   495b8:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   495bc:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   495be:	f8c9 2540 	str.w	r2, [r9, #1344]	; 0x540
   495c2:	d104      	bne.n	495ce <compare_set+0x96>
	z_impl_k_busy_wait(usec_to_wait);
   495c4:	2013      	movs	r0, #19
   495c6:	f011 fb68 	bl	5ac9a <z_impl_k_busy_wait>
   495ca:	2100      	movs	r1, #0
   495cc:	4b28      	ldr	r3, [pc, #160]	; (49670 <compare_set+0x138>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   495ce:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   495d2:	eba6 000c 	sub.w	r0, r6, ip
   495d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   495da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   495de:	bf88      	it	hi
   495e0:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   495e2:	f8c8 1000 	str.w	r1, [r8]
    p_reg->EVTENSET = mask;
   495e6:	9a01      	ldr	r2, [sp, #4]
   495e8:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   495ec:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   495f0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   495f4:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   495f8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
   495fc:	4582      	cmp	sl, r0
   495fe:	d006      	beq.n	4960e <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
   49600:	1a30      	subs	r0, r6, r0
   49602:	3802      	subs	r0, #2
   49604:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   49608:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   4960c:	d81b      	bhi.n	49646 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
   4960e:	eba6 060b 	sub.w	r6, r6, fp
   49612:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   49616:	1936      	adds	r6, r6, r4
   49618:	f145 0300 	adc.w	r3, r5, #0
   4961c:	4634      	mov	r4, r6
   4961e:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   49620:	4912      	ldr	r1, [pc, #72]	; (4966c <compare_set+0x134>)
	cc_data[chan].callback = handler;
   49622:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   49624:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   49628:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   4962c:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   4962e:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   49630:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   49632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   49634:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   49636:	4638      	mov	r0, r7
   49638:	9900      	ldr	r1, [sp, #0]
   4963a:	f7ff ff35 	bl	494a8 <compare_int_unlock>
}
   4963e:	4620      	mov	r0, r4
   49640:	b003      	add	sp, #12
   49642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49646:	4630      	mov	r0, r6
   49648:	e7b0      	b.n	495ac <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   4964a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4964c:	4a09      	ldr	r2, [pc, #36]	; (49674 <compare_set+0x13c>)
   4964e:	40bb      	lsls	r3, r7
   49650:	e8d2 0fef 	ldaex	r0, [r2]
   49654:	4318      	orrs	r0, r3
   49656:	e8c2 0fe1 	stlex	r1, r0, [r2]
   4965a:	2900      	cmp	r1, #0
   4965c:	d0e0      	beq.n	49620 <compare_set+0xe8>
   4965e:	e7f7      	b.n	49650 <compare_set+0x118>
			return -EINVAL;
   49660:	f06f 0415 	mvn.w	r4, #21
   49664:	e7e7      	b.n	49636 <compare_set+0xfe>
   49666:	bf00      	nop
   49668:	01000001 	.word	0x01000001
   4966c:	2001ac70 	.word	0x2001ac70
   49670:	40015000 	.word	0x40015000
   49674:	2001b678 	.word	0x2001b678

00049678 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   49678:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   4967a:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   4967c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   49680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   49684:	4d16      	ldr	r5, [pc, #88]	; (496e0 <sys_clock_driver_init+0x68>)
   49686:	4b17      	ldr	r3, [pc, #92]	; (496e4 <sys_clock_driver_init+0x6c>)
   49688:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   4968c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   49690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   49694:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   49696:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   4969a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   4969e:	4b12      	ldr	r3, [pc, #72]	; (496e8 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   496a0:	2101      	movs	r1, #1
   496a2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   496a6:	2015      	movs	r0, #21
   496a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   496ac:	4622      	mov	r2, r4
   496ae:	f7fc fb7f 	bl	45db0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   496b2:	2015      	movs	r0, #21
   496b4:	f7fc fb4c 	bl	45d50 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   496b8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   496ba:	4a0c      	ldr	r2, [pc, #48]	; (496ec <sys_clock_driver_init+0x74>)
   496bc:	60ab      	str	r3, [r5, #8]
   496be:	602b      	str	r3, [r5, #0]
   496c0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   496c2:	4b0b      	ldr	r3, [pc, #44]	; (496f0 <sys_clock_driver_init+0x78>)
   496c4:	4a0b      	ldr	r2, [pc, #44]	; (496f4 <sys_clock_driver_init+0x7c>)
   496c6:	9300      	str	r3, [sp, #0]
   496c8:	4620      	mov	r0, r4
   496ca:	2300      	movs	r3, #0
   496cc:	9401      	str	r4, [sp, #4]
   496ce:	f7ff ff33 	bl	49538 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   496d2:	4630      	mov	r0, r6
   496d4:	f7fe fe82 	bl	483dc <z_nrf_clock_control_lf_on>

	return 0;
}
   496d8:	4620      	mov	r0, r4
   496da:	b002      	add	sp, #8
   496dc:	bd70      	pop	{r4, r5, r6, pc}
   496de:	bf00      	nop
   496e0:	40015000 	.word	0x40015000
   496e4:	2001ac70 	.word	0x2001ac70
   496e8:	e000e100 	.word	0xe000e100
   496ec:	2001b67c 	.word	0x2001b67c
   496f0:	00049429 	.word	0x00049429
   496f4:	007fffff 	.word	0x007fffff

000496f8 <rtc_nrf_isr>:
{
   496f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   496fc:	4b31      	ldr	r3, [pc, #196]	; (497c4 <rtc_nrf_isr+0xcc>)
   496fe:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   49702:	0792      	lsls	r2, r2, #30
   49704:	d50b      	bpl.n	4971e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   49706:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   4970a:	b142      	cbz	r2, 4971e <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   4970c:	2200      	movs	r2, #0
   4970e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   49712:	4a2d      	ldr	r2, [pc, #180]	; (497c8 <rtc_nrf_isr+0xd0>)
   49714:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   49718:	6813      	ldr	r3, [r2, #0]
   4971a:	3301      	adds	r3, #1
   4971c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   4971e:	f04f 0320 	mov.w	r3, #32
   49722:	f3ef 8211 	mrs	r2, BASEPRI
   49726:	f383 8812 	msr	BASEPRI_MAX, r3
   4972a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   4972e:	4c25      	ldr	r4, [pc, #148]	; (497c4 <rtc_nrf_isr+0xcc>)
   49730:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   49734:	03db      	lsls	r3, r3, #15
   49736:	d525      	bpl.n	49784 <rtc_nrf_isr+0x8c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   49738:	4b24      	ldr	r3, [pc, #144]	; (497cc <rtc_nrf_isr+0xd4>)
   4973a:	e8d3 1fef 	ldaex	r1, [r3]
   4973e:	f021 0001 	bic.w	r0, r1, #1
   49742:	e8c3 0fe5 	stlex	r5, r0, [r3]
   49746:	2d00      	cmp	r5, #0
   49748:	d1f7      	bne.n	4973a <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   4974a:	b911      	cbnz	r1, 49752 <rtc_nrf_isr+0x5a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4974c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   49750:	b1c3      	cbz	r3, 49784 <rtc_nrf_isr+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   49752:	2500      	movs	r5, #0
   49754:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   49758:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
   4975c:	f382 8811 	msr	BASEPRI, r2
   49760:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   49764:	f7ff fec6 	bl	494f4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   49768:	f04f 0320 	mov.w	r3, #32
   4976c:	f3ef 8211 	mrs	r2, BASEPRI
   49770:	f383 8812 	msr	BASEPRI_MAX, r3
   49774:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   49778:	4b15      	ldr	r3, [pc, #84]	; (497d0 <rtc_nrf_isr+0xd8>)
   4977a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   4977e:	42b0      	cmp	r0, r6
   49780:	41b9      	sbcs	r1, r7
   49782:	d206      	bcs.n	49792 <rtc_nrf_isr+0x9a>
	__asm__ volatile(
   49784:	f382 8811 	msr	BASEPRI, r2
   49788:	f3bf 8f6f 	isb	sy
}
   4978c:	b003      	add	sp, #12
   4978e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   49792:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   49796:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   4979a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
   4979e:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   497a0:	e9c3 8902 	strd	r8, r9, [r3, #8]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   497a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   497a8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   497ac:	f382 8811 	msr	BASEPRI, r2
   497b0:	f3bf 8f6f 	isb	sy
		if (handler) {
   497b4:	2900      	cmp	r1, #0
   497b6:	d0e9      	beq.n	4978c <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   497b8:	9000      	str	r0, [sp, #0]
   497ba:	4632      	mov	r2, r6
   497bc:	463b      	mov	r3, r7
   497be:	4628      	mov	r0, r5
   497c0:	4788      	blx	r1
}
   497c2:	e7e3      	b.n	4978c <rtc_nrf_isr+0x94>
   497c4:	40015000 	.word	0x40015000
   497c8:	2001b680 	.word	0x2001b680
   497cc:	2001b678 	.word	0x2001b678
   497d0:	2001ac70 	.word	0x2001ac70

000497d4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   497d4:	1c43      	adds	r3, r0, #1
{
   497d6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   497d8:	d020      	beq.n	4981c <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   497da:	2801      	cmp	r0, #1
   497dc:	dd20      	ble.n	49820 <sys_clock_set_timeout+0x4c>
   497de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   497e2:	da1f      	bge.n	49824 <sys_clock_set_timeout+0x50>
   497e4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   497e6:	f7ff fe85 	bl	494f4 <z_nrf_rtc_timer_read>
   497ea:	4b0f      	ldr	r3, [pc, #60]	; (49828 <sys_clock_set_timeout+0x54>)
   497ec:	e9d3 1300 	ldrd	r1, r3, [r3]
   497f0:	1a42      	subs	r2, r0, r1
		ticks = 0;
   497f2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   497f6:	bf28      	it	cs
   497f8:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   497fa:	480c      	ldr	r0, [pc, #48]	; (4982c <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   497fc:	3201      	adds	r2, #1
   497fe:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   49800:	4282      	cmp	r2, r0
   49802:	bf28      	it	cs
   49804:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   49806:	2000      	movs	r0, #0
   49808:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   4980a:	4909      	ldr	r1, [pc, #36]	; (49830 <sys_clock_set_timeout+0x5c>)
   4980c:	9001      	str	r0, [sp, #4]
   4980e:	9100      	str	r1, [sp, #0]
   49810:	f143 0300 	adc.w	r3, r3, #0
   49814:	f7ff fe90 	bl	49538 <compare_set>
}
   49818:	b002      	add	sp, #8
   4981a:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   4981c:	4803      	ldr	r0, [pc, #12]	; (4982c <sys_clock_set_timeout+0x58>)
   4981e:	e7e1      	b.n	497e4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   49820:	2400      	movs	r4, #0
   49822:	e7e0      	b.n	497e6 <sys_clock_set_timeout+0x12>
   49824:	4c01      	ldr	r4, [pc, #4]	; (4982c <sys_clock_set_timeout+0x58>)
   49826:	e7de      	b.n	497e6 <sys_clock_set_timeout+0x12>
   49828:	2001ac80 	.word	0x2001ac80
   4982c:	007fffff 	.word	0x007fffff
   49830:	00049429 	.word	0x00049429

00049834 <sys_clock_elapsed>:
{
   49834:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   49836:	f7ff fe5d 	bl	494f4 <z_nrf_rtc_timer_read>
   4983a:	4b02      	ldr	r3, [pc, #8]	; (49844 <sys_clock_elapsed+0x10>)
   4983c:	681b      	ldr	r3, [r3, #0]
}
   4983e:	1ac0      	subs	r0, r0, r3
   49840:	bd08      	pop	{r3, pc}
   49842:	bf00      	nop
   49844:	2001ac80 	.word	0x2001ac80

00049848 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   49848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   4984c:	2601      	movs	r6, #1
    p_reg->OUTSET = set_mask;
   4984e:	4d3c      	ldr	r5, [pc, #240]	; (49940 <pinctrl_configure_pins+0xf8>)
   49850:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   49854:	4281      	cmp	r1, r0
   49856:	d102      	bne.n	4985e <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   49858:	2000      	movs	r0, #0
}
   4985a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   4985e:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   49860:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   49864:	f3c4 2743 	ubfx	r7, r4, #9, #4
			pin = 0xFFFFFFFFU;
   49868:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   4986a:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   4986e:	bf08      	it	eq
   49870:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   49874:	2c19      	cmp	r4, #25
   49876:	d85f      	bhi.n	49938 <pinctrl_configure_pins+0xf0>
   49878:	e8df f004 	tbb	[pc, r4]
   4987c:	201d170d 	.word	0x201d170d
   49880:	5e204823 	.word	0x5e204823
   49884:	5e5e5e5e 	.word	0x5e5e5e5e
   49888:	5e5e5e5e 	.word	0x5e5e5e5e
   4988c:	5e5e5e5e 	.word	0x5e5e5e5e
   49890:	554d5e5e 	.word	0x554d5e5e
   49894:	5b58      	.short	0x5b58
			NRF_PSEL_UART(reg, TXD) = pin;
   49896:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   4989a:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   4989e:	fa06 f404 	lsl.w	r4, r6, r4
}
   498a2:	f04f 0c01 	mov.w	ip, #1
    p_reg->OUTSET = set_mask;
   498a6:	60ac      	str	r4, [r5, #8]
   498a8:	e003      	b.n	498b2 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_UART(reg, RXD) = pin;
   498aa:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   498ae:	f04f 0c00 	mov.w	ip, #0
}
   498b2:	46e6      	mov	lr, ip
   498b4:	e010      	b.n	498d8 <pinctrl_configure_pins+0x90>
			NRF_PSEL_UART(reg, RTS) = pin;
   498b6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    if (value == 0)
   498ba:	e7ee      	b.n	4989a <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
   498bc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   498c0:	e7f5      	b.n	498ae <pinctrl_configure_pins+0x66>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   498c2:	f04f 0c00 	mov.w	ip, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   498c6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   498ca:	f04f 0e01 	mov.w	lr, #1
    *p_pin = pin_number & 0x1F;
   498ce:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   498d2:	fa06 f404 	lsl.w	r4, r6, r4
    p_reg->OUTCLR = clr_mask;
   498d6:	60ec      	str	r4, [r5, #12]
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   498d8:	f850 4b04 	ldr.w	r4, [r0], #4
    *p_pin = pin_number & 0x1F;
   498dc:	f003 031f 	and.w	r3, r3, #31
   498e0:	f404 5800 	and.w	r8, r4, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   498e4:	f1b8 0f00 	cmp.w	r8, #0
   498e8:	bf1c      	itt	ne
   498ea:	f04f 0e00 	movne.w	lr, #0
   498ee:	f04f 0c01 	movne.w	ip, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   498f2:	f3c4 18c1 	ubfx	r8, r4, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   498f6:	023c      	lsls	r4, r7, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   498f8:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
   498fc:	ea44 040e 	orr.w	r4, r4, lr
   49900:	ea44 044c 	orr.w	r4, r4, ip, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   49904:	3380      	adds	r3, #128	; 0x80
   49906:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   4990a:	e7a3      	b.n	49854 <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   4990c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   49910:	f04f 0c01 	mov.w	ip, #1
   49914:	e7d9      	b.n	498ca <pinctrl_configure_pins+0x82>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   49916:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   4991a:	6804      	ldr	r4, [r0, #0]
   4991c:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   49920:	2c00      	cmp	r4, #0
   49922:	d0f5      	beq.n	49910 <pinctrl_configure_pins+0xc8>
   49924:	e7b9      	b.n	4989a <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   49926:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   4992a:	e7f6      	b.n	4991a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   4992c:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   49930:	e7f3      	b.n	4991a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   49932:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   49936:	e7f0      	b.n	4991a <pinctrl_configure_pins+0xd2>
		switch (NRF_GET_FUN(pins[i])) {
   49938:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4993c:	e78d      	b.n	4985a <pinctrl_configure_pins+0x12>
   4993e:	bf00      	nop
   49940:	40842500 	.word	0x40842500

00049944 <_nrf_modem_lib_init>:
			nrf_modem_at_err(err), nrf_modem_at_err_type(err));
	}
}

static int _nrf_modem_lib_init(const struct device *unused)
{
   49944:	b570      	push	{r4, r5, r6, lr}
	int err;
	(void) err;

	if (!first_time_init) {
   49946:	4d1b      	ldr	r5, [pc, #108]	; (499b4 <_nrf_modem_lib_init+0x70>)
   49948:	4c1b      	ldr	r4, [pc, #108]	; (499b8 <_nrf_modem_lib_init+0x74>)
   4994a:	782b      	ldrb	r3, [r5, #0]
   4994c:	b933      	cbnz	r3, 4995c <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   4994e:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   49952:	481a      	ldr	r0, [pc, #104]	; (499bc <_nrf_modem_lib_init+0x78>)
   49954:	f010 ff67 	bl	5a826 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   49958:	2301      	movs	r3, #1
   4995a:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
   4995c:	2200      	movs	r2, #0
   4995e:	2101      	movs	r1, #1
   49960:	202a      	movs	r0, #42	; 0x2a
   49962:	f7fc fa25 	bl	45db0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   49966:	2100      	movs	r1, #0
   49968:	4815      	ldr	r0, [pc, #84]	; (499c0 <_nrf_modem_lib_init+0x7c>)
   4996a:	f008 f8fd 	bl	51b68 <nrf_modem_init>
   4996e:	4d15      	ldr	r5, [pc, #84]	; (499c4 <_nrf_modem_lib_init+0x80>)
   49970:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   49972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   49976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4997a:	4810      	ldr	r0, [pc, #64]	; (499bc <_nrf_modem_lib_init+0x78>)
   4997c:	f008 fd86 	bl	5248c <z_impl_k_mutex_lock>
	return list->head;
   49980:	6820      	ldr	r0, [r4, #0]
	if (IS_ENABLED(CONFIG_NRF_MODEM_LIB_LOG_FW_VERSION_UUID)) {
		log_fw_version_uuid();
	}

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   49982:	b120      	cbz	r0, 4998e <_nrf_modem_lib_init+0x4a>
	return node->next;
   49984:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   49986:	3004      	adds	r0, #4
   49988:	f008 fe6a 	bl	52660 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   4998c:	b944      	cbnz	r4, 499a0 <_nrf_modem_lib_init+0x5c>
	return z_impl_k_mutex_unlock(mutex);
   4998e:	480b      	ldr	r0, [pc, #44]	; (499bc <_nrf_modem_lib_init+0x78>)
   49990:	f008 fdf6 	bl	52580 <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&slist_mutex);

	LOG_DBG("Modem library has initialized, ret %d", init_ret);
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   49994:	4c0c      	ldr	r4, [pc, #48]	; (499c8 <_nrf_modem_lib_init+0x84>)
   49996:	4e0d      	ldr	r6, [pc, #52]	; (499cc <_nrf_modem_lib_init+0x88>)
   49998:	42b4      	cmp	r4, r6
   4999a:	d304      	bcc.n	499a6 <_nrf_modem_lib_init+0x62>
		 */
		return 0;
	}

	return init_ret;
}
   4999c:	2000      	movs	r0, #0
   4999e:	bd70      	pop	{r4, r5, r6, pc}
   499a0:	4620      	mov	r0, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   499a2:	6824      	ldr	r4, [r4, #0]
   499a4:	e7ef      	b.n	49986 <_nrf_modem_lib_init+0x42>
		e->callback(init_ret, e->context);
   499a6:	e9d4 3100 	ldrd	r3, r1, [r4]
   499aa:	6828      	ldr	r0, [r5, #0]
   499ac:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   499ae:	3408      	adds	r4, #8
   499b0:	e7f2      	b.n	49998 <_nrf_modem_lib_init+0x54>
   499b2:	bf00      	nop
   499b4:	2001de90 	.word	0x2001de90
   499b8:	2001b69c 	.word	0x2001b69c
   499bc:	2001b688 	.word	0x2001b688
   499c0:	0005c3d0 	.word	0x0005c3d0
   499c4:	2001b684 	.word	0x2001b684
   499c8:	00060b4c 	.word	0x00060b4c
   499cc:	00060b64 	.word	0x00060b64

000499d0 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   499d0:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   499d2:	4b0f      	ldr	r3, [pc, #60]	; (49a10 <thread_monitor_entry_get+0x40>)
{
   499d4:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   499d6:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   499d8:	4b0e      	ldr	r3, [pc, #56]	; (49a14 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   499da:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   499dc:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   499de:	4618      	mov	r0, r3
   499e0:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   499e2:	42b8      	cmp	r0, r7
   499e4:	d301      	bcc.n	499ea <thread_monitor_entry_get+0x1a>
   499e6:	3d01      	subs	r5, #1
   499e8:	d104      	bne.n	499f4 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   499ea:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   499ec:	3a01      	subs	r2, #1
	new_entry->id = id;
   499ee:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   499f0:	605a      	str	r2, [r3, #4]
}
   499f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
   499f4:	6804      	ldr	r4, [r0, #0]
   499f6:	428c      	cmp	r4, r1
   499f8:	d0fb      	beq.n	499f2 <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
   499fa:	b13c      	cbz	r4, 49a0c <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
   499fc:	6844      	ldr	r4, [r0, #4]
   499fe:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   49a00:	42a6      	cmp	r6, r4
   49a02:	bfbc      	itt	lt
   49a04:	4603      	movlt	r3, r0
   49a06:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   49a08:	3008      	adds	r0, #8
   49a0a:	e7ea      	b.n	499e2 <thread_monitor_entry_get+0x12>
   49a0c:	4603      	mov	r3, r0
   49a0e:	e7ec      	b.n	499ea <thread_monitor_entry_get+0x1a>
   49a10:	2001b734 	.word	0x2001b734
   49a14:	2001b740 	.word	0x2001b740

00049a18 <on_init>:
	list->head = NULL;
   49a18:	2000      	movs	r0, #0
   49a1a:	4b05      	ldr	r3, [pc, #20]	; (49a30 <on_init+0x18>)
	list->tail = NULL;
   49a1c:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   49a20:	4b04      	ldr	r3, [pc, #16]	; (49a34 <on_init+0x1c>)
   49a22:	e8d3 2fef 	ldaex	r2, [r3]
   49a26:	e8c3 0fe1 	stlex	r1, r0, [r3]
   49a2a:	2900      	cmp	r1, #0
   49a2c:	d1f9      	bne.n	49a22 <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   49a2e:	4770      	bx	lr
   49a30:	2001b738 	.word	0x2001b738
   49a34:	2001b734 	.word	0x2001b734

00049a38 <nrf_modem_os_timedwait>:
{
   49a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   49a3c:	b088      	sub	sp, #32
   49a3e:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
   49a40:	f010 fdf2 	bl	5a628 <nrf_modem_is_initialized>
   49a44:	b920      	cbnz	r0, 49a50 <nrf_modem_os_timedwait+0x18>
		return -NRF_ESHUTDOWN;
   49a46:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   49a4a:	b008      	add	sp, #32
   49a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   49a50:	f011 f921 	bl	5ac96 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   49a54:	6833      	ldr	r3, [r6, #0]
   49a56:	4604      	mov	r4, r0
   49a58:	2b00      	cmp	r3, #0
   49a5a:	460f      	mov	r7, r1
   49a5c:	d104      	bne.n	49a68 <nrf_modem_os_timedwait+0x30>
	z_impl_k_yield();
   49a5e:	f009 f98f 	bl	52d80 <z_impl_k_yield>
		return -NRF_EAGAIN;
   49a62:	f06f 000a 	mvn.w	r0, #10
   49a66:	e7f0      	b.n	49a4a <nrf_modem_os_timedwait+0x12>
		*timeout = SYS_FOREVER_MS;
   49a68:	bfbc      	itt	lt
   49a6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   49a6e:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   49a70:	2201      	movs	r2, #1
   49a72:	2100      	movs	r1, #0
   49a74:	a802      	add	r0, sp, #8
   49a76:	f010 ff5a 	bl	5a92e <z_impl_k_sem_init>
   49a7a:	f10d 0804 	add.w	r8, sp, #4
	__asm__ volatile(
   49a7e:	f04f 0320 	mov.w	r3, #32
   49a82:	f3ef 8a11 	mrs	sl, BASEPRI
   49a86:	f383 8812 	msr	BASEPRI_MAX, r3
   49a8a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   49a8e:	f009 fa13 	bl	52eb8 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   49a92:	f7ff ff9d 	bl	499d0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   49a96:	f8df 9120 	ldr.w	r9, [pc, #288]	; 49bb8 <nrf_modem_os_timedwait+0x180>
   49a9a:	6842      	ldr	r2, [r0, #4]
   49a9c:	f8d9 3000 	ldr.w	r3, [r9]
   49aa0:	429a      	cmp	r2, r3
   49aa2:	d16d      	bne.n	49b80 <nrf_modem_os_timedwait+0x148>
	parent->next = child;
   49aa4:	2300      	movs	r3, #0
	return list->tail;
   49aa6:	4d43      	ldr	r5, [pc, #268]	; (49bb4 <nrf_modem_os_timedwait+0x17c>)
	parent->next = child;
   49aa8:	9301      	str	r3, [sp, #4]
	return list->tail;
   49aaa:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   49aac:	2b00      	cmp	r3, #0
   49aae:	d16e      	bne.n	49b8e <nrf_modem_os_timedwait+0x156>
	list->head = node;
   49ab0:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
   49ab4:	f38a 8811 	msr	BASEPRI, sl
   49ab8:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   49abc:	6833      	ldr	r3, [r6, #0]
   49abe:	1c5a      	adds	r2, r3, #1
   49ac0:	d06a      	beq.n	49b98 <nrf_modem_os_timedwait+0x160>
   49ac2:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   49ac6:	f240 30e7 	movw	r0, #999	; 0x3e7
   49aca:	2100      	movs	r1, #0
   49acc:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   49ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   49ad4:	2300      	movs	r3, #0
   49ad6:	fbcc 010e 	smlal	r0, r1, ip, lr
   49ada:	f7f7 f819 	bl	40b10 <__aeabi_uldivmod>
   49ade:	4602      	mov	r2, r0
   49ae0:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   49ae2:	a802      	add	r0, sp, #8
   49ae4:	f008 fde2 	bl	526ac <z_impl_k_sem_take>
	__asm__ volatile(
   49ae8:	f04f 0320 	mov.w	r3, #32
   49aec:	f3ef 8a11 	mrs	sl, BASEPRI
   49af0:	f383 8812 	msr	BASEPRI_MAX, r3
   49af4:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49af8:	2200      	movs	r2, #0
	return list->head;
   49afa:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49afc:	b15b      	cbz	r3, 49b16 <nrf_modem_os_timedwait+0xde>
   49afe:	4543      	cmp	r3, r8
   49b00:	d154      	bne.n	49bac <nrf_modem_os_timedwait+0x174>
	return node->next;
   49b02:	9901      	ldr	r1, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   49b04:	2a00      	cmp	r2, #0
   49b06:	d14b      	bne.n	49ba0 <nrf_modem_os_timedwait+0x168>
   49b08:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   49b0a:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   49b0c:	429a      	cmp	r2, r3
   49b0e:	d100      	bne.n	49b12 <nrf_modem_os_timedwait+0xda>
	list->tail = node;
   49b10:	6069      	str	r1, [r5, #4]
	parent->next = child;
   49b12:	2300      	movs	r3, #0
   49b14:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   49b16:	f009 f9cf 	bl	52eb8 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   49b1a:	f7ff ff59 	bl	499d0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   49b1e:	f8d9 3000 	ldr.w	r3, [r9]
   49b22:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   49b24:	f38a 8811 	msr	BASEPRI, sl
   49b28:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   49b2c:	f010 fd7c 	bl	5a628 <nrf_modem_is_initialized>
   49b30:	2800      	cmp	r0, #0
   49b32:	d088      	beq.n	49a46 <nrf_modem_os_timedwait+0xe>
	if (*timeout == SYS_FOREVER_MS) {
   49b34:	6835      	ldr	r5, [r6, #0]
   49b36:	1c6b      	adds	r3, r5, #1
   49b38:	d027      	beq.n	49b8a <nrf_modem_os_timedwait+0x152>
	return z_impl_k_uptime_ticks();
   49b3a:	f011 f8ac 	bl	5ac96 <z_impl_k_uptime_ticks>
   49b3e:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   49b42:	fba0 320e 	umull	r3, r2, r0, lr
   49b46:	fb0e 2101 	mla	r1, lr, r1, r2
   49b4a:	fba4 420e 	umull	r4, r2, r4, lr
   49b4e:	fb0e 2207 	mla	r2, lr, r7, r2
   49b52:	0bdb      	lsrs	r3, r3, #15
   49b54:	0be4      	lsrs	r4, r4, #15
   49b56:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   49b5a:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
   49b5e:	1b1b      	subs	r3, r3, r4
   49b60:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   49b64:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   49b68:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
   49b6c:	1aed      	subs	r5, r5, r3
   49b6e:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   49b72:	f1bc 0f00 	cmp.w	ip, #0
   49b76:	bfb8      	it	lt
   49b78:	2500      	movlt	r5, #0
   49b7a:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
   49b7c:	b92d      	cbnz	r5, 49b8a <nrf_modem_os_timedwait+0x152>
   49b7e:	e770      	b.n	49a62 <nrf_modem_os_timedwait+0x2a>
	entry->cnt = rpc_event_cnt;
   49b80:	6043      	str	r3, [r0, #4]
   49b82:	f38a 8811 	msr	BASEPRI, sl
   49b86:	f3bf 8f6f 	isb	sy
		return 0;
   49b8a:	2000      	movs	r0, #0
   49b8c:	e75d      	b.n	49a4a <nrf_modem_os_timedwait+0x12>
   49b8e:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   49b92:	f8c5 8004 	str.w	r8, [r5, #4]
   49b96:	e78d      	b.n	49ab4 <nrf_modem_os_timedwait+0x7c>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   49b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   49b9c:	4613      	mov	r3, r2
   49b9e:	e7a0      	b.n	49ae2 <nrf_modem_os_timedwait+0xaa>
	parent->next = child;
   49ba0:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   49ba2:	6869      	ldr	r1, [r5, #4]
   49ba4:	4299      	cmp	r1, r3
	list->tail = node;
   49ba6:	bf08      	it	eq
   49ba8:	606a      	streq	r2, [r5, #4]
}
   49baa:	e7b2      	b.n	49b12 <nrf_modem_os_timedwait+0xda>
	return node->next;
   49bac:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49bae:	681b      	ldr	r3, [r3, #0]
   49bb0:	e7a4      	b.n	49afc <nrf_modem_os_timedwait+0xc4>
   49bb2:	bf00      	nop
   49bb4:	2001b738 	.word	0x2001b738
   49bb8:	2001b734 	.word	0x2001b734

00049bbc <nrf_modem_os_sem_init>:
{
   49bbc:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   49bbe:	6804      	ldr	r4, [r0, #0]
   49bc0:	4b0a      	ldr	r3, [pc, #40]	; (49bec <nrf_modem_os_sem_init+0x30>)
   49bc2:	b12c      	cbz	r4, 49bd0 <nrf_modem_os_sem_init+0x14>
   49bc4:	429c      	cmp	r4, r3
   49bc6:	d303      	bcc.n	49bd0 <nrf_modem_os_sem_init+0x14>
   49bc8:	f103 0590 	add.w	r5, r3, #144	; 0x90
   49bcc:	42ac      	cmp	r4, r5
   49bce:	d308      	bcc.n	49be2 <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   49bd0:	4d07      	ldr	r5, [pc, #28]	; (49bf0 <nrf_modem_os_sem_init+0x34>)
   49bd2:	782c      	ldrb	r4, [r5, #0]
   49bd4:	1c66      	adds	r6, r4, #1
   49bd6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   49bda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   49bde:	702e      	strb	r6, [r5, #0]
   49be0:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   49be2:	6800      	ldr	r0, [r0, #0]
}
   49be4:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
   49be6:	f010 bea2 	b.w	5a92e <z_impl_k_sem_init>
   49bea:	bf00      	nop
   49bec:	2001b6a4 	.word	0x2001b6a4
   49bf0:	2001de91 	.word	0x2001de91

00049bf4 <nrf_modem_os_event_notify>:
{
   49bf4:	b510      	push	{r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   49bf6:	4b08      	ldr	r3, [pc, #32]	; (49c18 <nrf_modem_os_event_notify+0x24>)
   49bf8:	e8d3 1fef 	ldaex	r1, [r3]
   49bfc:	3101      	adds	r1, #1
   49bfe:	e8c3 1fe2 	stlex	r2, r1, [r3]
   49c02:	2a00      	cmp	r2, #0
   49c04:	d1f8      	bne.n	49bf8 <nrf_modem_os_event_notify+0x4>
	return list->head;
   49c06:	4b05      	ldr	r3, [pc, #20]	; (49c1c <nrf_modem_os_event_notify+0x28>)
   49c08:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   49c0a:	b904      	cbnz	r4, 49c0e <nrf_modem_os_event_notify+0x1a>
}
   49c0c:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   49c0e:	1d20      	adds	r0, r4, #4
   49c10:	f008 fd26 	bl	52660 <z_impl_k_sem_give>
	return node->next;
   49c14:	6824      	ldr	r4, [r4, #0]
   49c16:	e7f8      	b.n	49c0a <nrf_modem_os_event_notify+0x16>
   49c18:	2001b734 	.word	0x2001b734
   49c1c:	2001b738 	.word	0x2001b738

00049c20 <nrf_modem_os_alloc>:
{
   49c20:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   49c22:	2200      	movs	r2, #0
   49c24:	2300      	movs	r3, #0
   49c26:	4801      	ldr	r0, [pc, #4]	; (49c2c <nrf_modem_os_alloc+0xc>)
   49c28:	f010 bd7b 	b.w	5a722 <k_heap_alloc>
   49c2c:	2001b790 	.word	0x2001b790

00049c30 <nrf_modem_os_free>:
{
   49c30:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   49c32:	4801      	ldr	r0, [pc, #4]	; (49c38 <nrf_modem_os_free+0x8>)
   49c34:	f010 bd7f 	b.w	5a736 <k_heap_free>
   49c38:	2001b790 	.word	0x2001b790

00049c3c <nrf_modem_os_shm_tx_alloc>:
{
   49c3c:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   49c3e:	2200      	movs	r2, #0
   49c40:	2300      	movs	r3, #0
   49c42:	4801      	ldr	r0, [pc, #4]	; (49c48 <nrf_modem_os_shm_tx_alloc+0xc>)
   49c44:	f010 bd6d 	b.w	5a722 <k_heap_alloc>
   49c48:	2001b7a4 	.word	0x2001b7a4

00049c4c <nrf_modem_os_shm_tx_free>:
{
   49c4c:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   49c4e:	4801      	ldr	r0, [pc, #4]	; (49c54 <nrf_modem_os_shm_tx_free+0x8>)
   49c50:	f010 bd71 	b.w	5a736 <k_heap_free>
   49c54:	2001b7a4 	.word	0x2001b7a4

00049c58 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   49c58:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   49c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   49c5e:	4906      	ldr	r1, [pc, #24]	; (49c78 <nrf_modem_os_init+0x20>)
   49c60:	4806      	ldr	r0, [pc, #24]	; (49c7c <nrf_modem_os_init+0x24>)
   49c62:	f010 fd08 	bl	5a676 <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   49c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   49c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   49c6e:	4904      	ldr	r1, [pc, #16]	; (49c80 <nrf_modem_os_init+0x28>)
   49c70:	4804      	ldr	r0, [pc, #16]	; (49c84 <nrf_modem_os_init+0x2c>)
   49c72:	f010 bd00 	b.w	5a676 <k_heap_init>
   49c76:	bf00      	nop
   49c78:	2001de92 	.word	0x2001de92
   49c7c:	2001b790 	.word	0x2001b790
   49c80:	200164e8 	.word	0x200164e8
   49c84:	2001b7a4 	.word	0x2001b7a4

00049c88 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   49c88:	2801      	cmp	r0, #1
   49c8a:	d00e      	beq.n	49caa <z_to_nrf_optname+0x22>
   49c8c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   49c90:	d113      	bne.n	49cba <z_to_nrf_optname+0x32>
	case SOL_TLS:
		switch (z_in_optname) {
   49c92:	1e4b      	subs	r3, r1, #1
   49c94:	2b0d      	cmp	r3, #13
   49c96:	d810      	bhi.n	49cba <z_to_nrf_optname+0x32>
   49c98:	e8df f003 	tbb	[pc, r3]
   49c9c:	0f626262 	.word	0x0f626262
   49ca0:	0f0f6262 	.word	0x0f0f6262
   49ca4:	620f0f0f 	.word	0x620f0f0f
   49ca8:	6262      	.short	0x6262
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   49caa:	2937      	cmp	r1, #55	; 0x37
   49cac:	dc05      	bgt.n	49cba <z_to_nrf_optname+0x32>
   49cae:	2913      	cmp	r1, #19
   49cb0:	dc06      	bgt.n	49cc0 <z_to_nrf_optname+0x38>
   49cb2:	2902      	cmp	r1, #2
   49cb4:	d054      	beq.n	49d60 <z_to_nrf_optname+0xd8>
   49cb6:	2904      	cmp	r1, #4
   49cb8:	d052      	beq.n	49d60 <z_to_nrf_optname+0xd8>
   49cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		retval = -1;
		break;
	}

	return retval;
}
   49cbe:	4770      	bx	lr
   49cc0:	f1a1 0314 	sub.w	r3, r1, #20
   49cc4:	2b23      	cmp	r3, #35	; 0x23
   49cc6:	d8f8      	bhi.n	49cba <z_to_nrf_optname+0x32>
   49cc8:	a001      	add	r0, pc, #4	; (adr r0, 49cd0 <z_to_nrf_optname+0x48>)
   49cca:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   49cce:	bf00      	nop
   49cd0:	00049d61 	.word	0x00049d61
   49cd4:	00049d61 	.word	0x00049d61
   49cd8:	00049cbb 	.word	0x00049cbb
   49cdc:	00049cbb 	.word	0x00049cbb
   49ce0:	00049cbb 	.word	0x00049cbb
   49ce4:	00049d61 	.word	0x00049d61
   49ce8:	00049cbb 	.word	0x00049cbb
   49cec:	00049cbb 	.word	0x00049cbb
   49cf0:	00049cbb 	.word	0x00049cbb
   49cf4:	00049cbb 	.word	0x00049cbb
   49cf8:	00049d61 	.word	0x00049d61
   49cfc:	00049d61 	.word	0x00049d61
   49d00:	00049d61 	.word	0x00049d61
   49d04:	00049cbb 	.word	0x00049cbb
   49d08:	00049cbb 	.word	0x00049cbb
   49d0c:	00049cbb 	.word	0x00049cbb
   49d10:	00049cbb 	.word	0x00049cbb
   49d14:	00049cbb 	.word	0x00049cbb
   49d18:	00049cbb 	.word	0x00049cbb
   49d1c:	00049cbb 	.word	0x00049cbb
   49d20:	00049cbb 	.word	0x00049cbb
   49d24:	00049cbb 	.word	0x00049cbb
   49d28:	00049cbb 	.word	0x00049cbb
   49d2c:	00049cbb 	.word	0x00049cbb
   49d30:	00049cbb 	.word	0x00049cbb
   49d34:	00049cbb 	.word	0x00049cbb
   49d38:	00049cbb 	.word	0x00049cbb
   49d3c:	00049cbb 	.word	0x00049cbb
   49d40:	00049cbb 	.word	0x00049cbb
   49d44:	00049cbb 	.word	0x00049cbb
   49d48:	00049d61 	.word	0x00049d61
   49d4c:	00049d61 	.word	0x00049d61
   49d50:	00049d61 	.word	0x00049d61
   49d54:	00049d61 	.word	0x00049d61
   49d58:	00049d61 	.word	0x00049d61
   49d5c:	00049d61 	.word	0x00049d61
	int retval = 0;
   49d60:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   49d62:	6011      	str	r1, [r2, #0]
   49d64:	4770      	bx	lr
   49d66:	bf00      	nop

00049d68 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   49d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   49d6c:	4b05      	ldr	r3, [pc, #20]	; (49d84 <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   49d6e:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   49d70:	601a      	str	r2, [r3, #0]
   49d72:	609a      	str	r2, [r3, #8]
   49d74:	611a      	str	r2, [r3, #16]
   49d76:	619a      	str	r2, [r3, #24]
   49d78:	621a      	str	r2, [r3, #32]
   49d7a:	629a      	str	r2, [r3, #40]	; 0x28
   49d7c:	631a      	str	r2, [r3, #48]	; 0x30
   49d7e:	639a      	str	r2, [r3, #56]	; 0x38
}
   49d80:	4770      	bx	lr
   49d82:	bf00      	nop
   49d84:	2001b7bc 	.word	0x2001b7bc

00049d88 <nrf91_socket_offload_ioctl>:
{
   49d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   49d8c:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
   49d90:	6804      	ldr	r4, [r0, #0]
{
   49d92:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   49d94:	2b03      	cmp	r3, #3
   49d96:	d852      	bhi.n	49e3e <nrf91_socket_offload_ioctl+0xb6>
   49d98:	e8df f003 	tbb	[pc, r3]
   49d9c:	4d087502 	.word	0x4d087502
		return -EXDEV;
   49da0:	f06f 0411 	mvn.w	r4, #17
}
   49da4:	4620      	mov	r0, r4
   49da6:	b011      	add	sp, #68	; 0x44
   49da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   49dac:	2700      	movs	r7, #0
		nfds = va_arg(args, int);
   49dae:	e9d2 9800 	ldrd	r9, r8, [r2]
		timeout = va_arg(args, int);
   49db2:	466e      	mov	r6, sp
   49db4:	464d      	mov	r5, r9
	int retval = 0;
   49db6:	463c      	mov	r4, r7
		tmp[i].events = 0;
   49db8:	46ba      	mov	sl, r7
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   49dba:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   49dbc:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   49dc0:	4668      	mov	r0, sp
   49dc2:	2240      	movs	r2, #64	; 0x40
   49dc4:	f011 f883 	bl	5aece <memset>
			obj = z_get_fd_obj(fds[i].fd,
   49dc8:	4930      	ldr	r1, [pc, #192]	; (49e8c <nrf91_socket_offload_ioctl+0x104>)
	for (int i = 0; i < nfds; i++) {
   49dca:	45b8      	cmp	r8, r7
   49dcc:	dc0c      	bgt.n	49de8 <nrf91_socket_offload_ioctl+0x60>
	if (retval > 0) {
   49dce:	2c00      	cmp	r4, #0
   49dd0:	d1e8      	bne.n	49da4 <nrf91_socket_offload_ioctl+0x1c>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   49dd2:	465a      	mov	r2, fp
   49dd4:	4641      	mov	r1, r8
   49dd6:	4668      	mov	r0, sp
   49dd8:	f010 fb01 	bl	5a3de <nrf_poll>
		fds[i].revents = tmp[i].revents;
   49ddc:	f109 0306 	add.w	r3, r9, #6
	for (int i = 0; i < nfds; i++) {
   49de0:	45a0      	cmp	r8, r4
   49de2:	dc1c      	bgt.n	49e1e <nrf91_socket_offload_ioctl+0x96>
	return retval;
   49de4:	4604      	mov	r4, r0
		return nrf91_socket_offload_poll(fds, nfds, timeout);
   49de6:	e7dd      	b.n	49da4 <nrf91_socket_offload_ioctl+0x1c>
		tmp[i].events = 0;
   49de8:	f8a6 a004 	strh.w	sl, [r6, #4]
		if (fds[i].fd < 0) {
   49dec:	6828      	ldr	r0, [r5, #0]
		fds[i].revents = 0;
   49dee:	f8a5 a006 	strh.w	sl, [r5, #6]
		if (fds[i].fd < 0) {
   49df2:	2800      	cmp	r0, #0
   49df4:	da04      	bge.n	49e00 <nrf91_socket_offload_ioctl+0x78>
			tmp[i].fd = fds[i].fd;
   49df6:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   49df8:	3701      	adds	r7, #1
   49dfa:	3608      	adds	r6, #8
   49dfc:	3508      	adds	r5, #8
   49dfe:	e7e4      	b.n	49dca <nrf91_socket_offload_ioctl+0x42>
			obj = z_get_fd_obj(fds[i].fd,
   49e00:	2286      	movs	r2, #134	; 0x86
   49e02:	f7fa fe8d 	bl	44b20 <z_get_fd_obj>
			if (obj != NULL) {
   49e06:	4921      	ldr	r1, [pc, #132]	; (49e8c <nrf91_socket_offload_ioctl+0x104>)
   49e08:	b128      	cbz	r0, 49e16 <nrf91_socket_offload_ioctl+0x8e>
				tmp[i].fd = OBJ_TO_SD(obj);
   49e0a:	6803      	ldr	r3, [r0, #0]
   49e0c:	6033      	str	r3, [r6, #0]
		tmp[i].events = fds[i].events;
   49e0e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   49e12:	80b3      	strh	r3, [r6, #4]
   49e14:	e7f0      	b.n	49df8 <nrf91_socket_offload_ioctl+0x70>
				fds[i].revents = POLLNVAL;
   49e16:	2320      	movs	r3, #32
				retval++;
   49e18:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   49e1a:	80eb      	strh	r3, [r5, #6]
				retval++;
   49e1c:	e7f7      	b.n	49e0e <nrf91_socket_offload_ioctl+0x86>
		if (fds[i].fd < 0) {
   49e1e:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
   49e22:	2a00      	cmp	r2, #0
		fds[i].revents = tmp[i].revents;
   49e24:	bfa2      	ittt	ge
   49e26:	eb0d 02c4 	addge.w	r2, sp, r4, lsl #3
   49e2a:	f9b2 2006 	ldrshge.w	r2, [r2, #6]
   49e2e:	f823 2034 	strhge.w	r2, [r3, r4, lsl #3]
	for (int i = 0; i < nfds; i++) {
   49e32:	3401      	adds	r4, #1
   49e34:	e7d4      	b.n	49de0 <nrf91_socket_offload_ioctl+0x58>
		ctx->lock = va_arg(args, struct k_mutex *);
   49e36:	6813      	ldr	r3, [r2, #0]
		return 0;
   49e38:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   49e3a:	6043      	str	r3, [r0, #4]
		return 0;
   49e3c:	e7b2      	b.n	49da4 <nrf91_socket_offload_ioctl+0x1c>
	switch (cmd) {
   49e3e:	2903      	cmp	r1, #3
   49e40:	d012      	beq.n	49e68 <nrf91_socket_offload_ioctl+0xe0>
   49e42:	2904      	cmp	r1, #4
   49e44:	d118      	bne.n	49e78 <nrf91_socket_offload_ioctl+0xf0>
		flags = va_arg(args, int);
   49e46:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
   49e48:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
   49e4c:	d003      	beq.n	49e56 <nrf91_socket_offload_ioctl+0xce>
			errno = EINVAL;
   49e4e:	f00c f951 	bl	560f4 <__errno>
   49e52:	2316      	movs	r3, #22
   49e54:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   49e56:	2104      	movs	r1, #4
   49e58:	4620      	mov	r0, r4
   49e5a:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
   49e5e:	b011      	add	sp, #68	; 0x44
   49e60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   49e64:	f010 bb52 	b.w	5a50c <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   49e68:	4620      	mov	r0, r4
   49e6a:	2200      	movs	r2, #0
   49e6c:	f010 fb4e 	bl	5a50c <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   49e70:	0384      	lsls	r4, r0, #14
   49e72:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   49e76:	e795      	b.n	49da4 <nrf91_socket_offload_ioctl+0x1c>
		errno = EINVAL;
   49e78:	f00c f93c 	bl	560f4 <__errno>
   49e7c:	2316      	movs	r3, #22
		retval = -1;
   49e7e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		errno = EINVAL;
   49e82:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   49e84:	e78e      	b.n	49da4 <nrf91_socket_offload_ioctl+0x1c>
	switch (request) {
   49e86:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   49e8a:	e78b      	b.n	49da4 <nrf91_socket_offload_ioctl+0x1c>
   49e8c:	0005c400 	.word	0x0005c400

00049e90 <nrf91_socket_iface_init>:
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;
   49e90:	4b03      	ldr	r3, [pc, #12]	; (49ea0 <nrf91_socket_iface_init+0x10>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   49e92:	4a04      	ldr	r2, [pc, #16]	; (49ea4 <nrf91_socket_iface_init+0x14>)
	nrf91_socket_iface_data.iface = iface;
   49e94:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   49e96:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   49e98:	4803      	ldr	r0, [pc, #12]	; (49ea8 <nrf91_socket_iface_init+0x18>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   49e9a:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   49e9c:	f7fb bc5e 	b.w	4575c <socket_offload_dns_register>
   49ea0:	2001b7b8 	.word	0x2001b7b8
   49ea4:	0004a23d 	.word	0x0004a23d
   49ea8:	0005c3f8 	.word	0x0005c3f8

00049eac <nrf91_socket_is_supported>:
	if (offload_disabled) {
   49eac:	490b      	ldr	r1, [pc, #44]	; (49edc <nrf91_socket_is_supported+0x30>)
{
   49eae:	4603      	mov	r3, r0
	if (offload_disabled) {
   49eb0:	7808      	ldrb	r0, [r1, #0]
   49eb2:	b980      	cbnz	r0, 49ed6 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   49eb4:	490a      	ldr	r1, [pc, #40]	; (49ee0 <nrf91_socket_is_supported+0x34>)
   49eb6:	7809      	ldrb	r1, [r1, #0]
   49eb8:	b139      	cbz	r1, 49eca <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   49eba:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   49ebe:	2902      	cmp	r1, #2
   49ec0:	d90a      	bls.n	49ed8 <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   49ec2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   49ec6:	2a01      	cmp	r2, #1
   49ec8:	d906      	bls.n	49ed8 <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
   49eca:	3b01      	subs	r3, #1
   49ecc:	2b02      	cmp	r3, #2
   49ece:	bf8c      	ite	hi
   49ed0:	2000      	movhi	r0, #0
   49ed2:	2001      	movls	r0, #1
	return af_is_supported(family);
   49ed4:	4770      	bx	lr
		return false;
   49ed6:	2000      	movs	r0, #0
}
   49ed8:	4770      	bx	lr
   49eda:	bf00      	nop
   49edc:	2001e313 	.word	0x2001e313
   49ee0:	2001e312 	.word	0x2001e312

00049ee4 <nrf91_socket_offload_getaddrinfo>:
{
   49ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49ee8:	4614      	mov	r4, r2
   49eea:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   49eec:	2100      	movs	r1, #0
{
   49eee:	b08b      	sub	sp, #44	; 0x2c
   49ef0:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   49ef2:	2220      	movs	r2, #32
   49ef4:	a802      	add	r0, sp, #8
{
   49ef6:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   49ef8:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   49efa:	f010 ffe8 	bl	5aece <memset>
	if (hints != NULL) {
   49efe:	b15c      	cbz	r4, 49f18 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   49f00:	6863      	ldr	r3, [r4, #4]
   49f02:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   49f04:	68e3      	ldr	r3, [r4, #12]
   49f06:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   49f08:	68a3      	ldr	r3, [r4, #8]
   49f0a:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   49f0c:	6923      	ldr	r3, [r4, #16]
   49f0e:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   49f10:	69e3      	ldr	r3, [r4, #28]
   49f12:	b103      	cbz	r3, 49f16 <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   49f14:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   49f16:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   49f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   49f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   49f20:	4834      	ldr	r0, [pc, #208]	; (49ff4 <nrf91_socket_offload_getaddrinfo+0x110>)
   49f22:	f00d fb24 	bl	5756e <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   49f26:	4631      	mov	r1, r6
   49f28:	4622      	mov	r2, r4
   49f2a:	4628      	mov	r0, r5
   49f2c:	ab01      	add	r3, sp, #4
   49f2e:	f006 fc85 	bl	5083c <nrf_getaddrinfo>
	if (retval != 0) {
   49f32:	4606      	mov	r6, r0
   49f34:	b948      	cbnz	r0, 49f4a <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   49f36:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   49f38:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   49f3a:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   49f3e:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
   49f40:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   49f42:	b94d      	cbnz	r5, 49f58 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   49f44:	9801      	ldr	r0, [sp, #4]
   49f46:	f00f fe09 	bl	59b5c <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   49f4a:	482a      	ldr	r0, [pc, #168]	; (49ff4 <nrf91_socket_offload_getaddrinfo+0x110>)
   49f4c:	f00d fb11 	bl	57572 <k_mutex_unlock.isra.0>
}
   49f50:	4630      	mov	r0, r6
   49f52:	b00b      	add	sp, #44	; 0x2c
   49f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   49f58:	2050      	movs	r0, #80	; 0x50
   49f5a:	f010 ff46 	bl	5adea <k_malloc>
		if (next_z_res == NULL) {
   49f5e:	4604      	mov	r4, r0
   49f60:	2800      	cmp	r0, #0
   49f62:	d040      	beq.n	49fe6 <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
   49f64:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   49f68:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
   49f6c:	682b      	ldr	r3, [r5, #0]
   49f6e:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   49f70:	68ab      	ldr	r3, [r5, #8]
   49f72:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
   49f74:	686b      	ldr	r3, [r5, #4]
   49f76:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   49f78:	68eb      	ldr	r3, [r5, #12]
   49f7a:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   49f7c:	f8d5 b004 	ldr.w	fp, [r5, #4]
   49f80:	f1bb 0f01 	cmp.w	fp, #1
   49f84:	d114      	bne.n	49fb0 <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   49f86:	2008      	movs	r0, #8
   49f88:	f010 ff2f 	bl	5adea <k_malloc>
   49f8c:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   49f8e:	b338      	cbz	r0, 49fe0 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   49f90:	2308      	movs	r3, #8
   49f92:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   49f94:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
   49f96:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
   49f98:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
   49f9c:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   49f9e:	68db      	ldr	r3, [r3, #12]
   49fa0:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   49fa2:	f1b8 0f00 	cmp.w	r8, #0
   49fa6:	d121      	bne.n	49fec <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   49fa8:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   49faa:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   49fac:	69ed      	ldr	r5, [r5, #28]
   49fae:	e7c8      	b.n	49f42 <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   49fb0:	f1bb 0f02 	cmp.w	fp, #2
   49fb4:	d009      	beq.n	49fca <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   49fb6:	f010 ff11 	bl	5addc <k_free>
			retval = DNS_EAI_FAMILY;
   49fba:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
   49fbe:	6838      	ldr	r0, [r7, #0]
   49fc0:	f00d fa0a 	bl	573d8 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   49fc4:	2300      	movs	r3, #0
   49fc6:	603b      	str	r3, [r7, #0]
   49fc8:	e7bc      	b.n	49f44 <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   49fca:	2018      	movs	r0, #24
   49fcc:	f010 ff0d 	bl	5adea <k_malloc>
   49fd0:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   49fd2:	b128      	cbz	r0, 49fe0 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   49fd4:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   49fd8:	6969      	ldr	r1, [r5, #20]
   49fda:	f00d fa0a 	bl	573f2 <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   49fde:	e7e0      	b.n	49fa2 <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   49fe0:	4620      	mov	r0, r4
   49fe2:	f010 fefb 	bl	5addc <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   49fe6:	f06f 0609 	mvn.w	r6, #9
   49fea:	e7e8      	b.n	49fbe <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
   49fec:	f8c8 4000 	str.w	r4, [r8]
   49ff0:	e7db      	b.n	49faa <nrf91_socket_offload_getaddrinfo+0xc6>
   49ff2:	bf00      	nop
   49ff4:	2001ab84 	.word	0x2001ab84

00049ff8 <nrf91_socket_offload_sendmsg>:
{
   49ff8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   49ffc:	4607      	mov	r7, r0
   49ffe:	4690      	mov	r8, r2
	if (msg == NULL) {
   4a000:	460c      	mov	r4, r1
   4a002:	b379      	cbz	r1, 4a064 <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a004:	2300      	movs	r3, #0
	ssize_t len = 0;
   4a006:	461a      	mov	r2, r3
   4a008:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a00a:	4283      	cmp	r3, r0
   4a00c:	d134      	bne.n	4a078 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   4a00e:	2a80      	cmp	r2, #128	; 0x80
   4a010:	d871      	bhi.n	4a0f6 <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   4a012:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   4a014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4a018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4a01c:	4838      	ldr	r0, [pc, #224]	; (4a100 <nrf91_socket_offload_sendmsg+0x108>)
   4a01e:	f00d faa6 	bl	5756e <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   4a022:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   4a024:	4e37      	ldr	r6, [pc, #220]	; (4a104 <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   4a026:	68e3      	ldr	r3, [r4, #12]
   4a028:	429d      	cmp	r5, r3
   4a02a:	d32c      	bcc.n	4a086 <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   4a02c:	2600      	movs	r6, #0
		ret = 0;
   4a02e:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   4a030:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 4a104 <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   4a034:	45b1      	cmp	r9, r6
   4a036:	dd11      	ble.n	4a05c <nrf91_socket_offload_sendmsg+0x64>
   4a038:	b985      	cbnz	r5, 4a05c <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   4a03a:	6863      	ldr	r3, [r4, #4]
   4a03c:	4638      	mov	r0, r7
   4a03e:	9301      	str	r3, [sp, #4]
   4a040:	6823      	ldr	r3, [r4, #0]
   4a042:	eba9 0206 	sub.w	r2, r9, r6
   4a046:	9300      	str	r3, [sp, #0]
   4a048:	eb0a 0106 	add.w	r1, sl, r6
   4a04c:	4643      	mov	r3, r8
   4a04e:	f00d f9fd 	bl	5744c <nrf91_socket_offload_sendto>
			if (ret > 0) {
   4a052:	1e05      	subs	r5, r0, #0
   4a054:	ddee      	ble.n	4a034 <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   4a056:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   4a058:	45b1      	cmp	r9, r6
   4a05a:	dcee      	bgt.n	4a03a <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   4a05c:	4828      	ldr	r0, [pc, #160]	; (4a100 <nrf91_socket_offload_sendmsg+0x108>)
   4a05e:	f00d fa88 	bl	57572 <k_mutex_unlock.isra.0>
		return ret;
   4a062:	e005      	b.n	4a070 <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   4a064:	f00c f846 	bl	560f4 <__errno>
   4a068:	2316      	movs	r3, #22
		return -1;
   4a06a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		errno = EINVAL;
   4a06e:	6003      	str	r3, [r0, #0]
}
   4a070:	4628      	mov	r0, r5
   4a072:	b002      	add	sp, #8
   4a074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   4a078:	68a1      	ldr	r1, [r4, #8]
   4a07a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   4a07e:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a080:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   4a082:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a084:	e7c1      	b.n	4a00a <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   4a086:	68a3      	ldr	r3, [r4, #8]
   4a088:	eb06 0009 	add.w	r0, r6, r9
   4a08c:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   4a090:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   4a094:	6852      	ldr	r2, [r2, #4]
   4a096:	f010 fee0 	bl	5ae5a <memcpy>
			len += msg->msg_iov[i].iov_len;
   4a09a:	68a3      	ldr	r3, [r4, #8]
   4a09c:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   4a0a0:	4453      	add	r3, sl
   4a0a2:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   4a0a4:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   4a0a6:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   4a0a8:	e7bd      	b.n	4a026 <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   4a0aa:	68a3      	ldr	r3, [r4, #8]
   4a0ac:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   4a0b0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   4a0b4:	685b      	ldr	r3, [r3, #4]
   4a0b6:	b13b      	cbz	r3, 4a0c8 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   4a0b8:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   4a0bc:	68a3      	ldr	r3, [r4, #8]
   4a0be:	eb03 020a 	add.w	r2, r3, sl
   4a0c2:	6852      	ldr	r2, [r2, #4]
   4a0c4:	4591      	cmp	r9, r2
   4a0c6:	d304      	bcc.n	4a0d2 <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a0c8:	3601      	adds	r6, #1
   4a0ca:	68e3      	ldr	r3, [r4, #12]
   4a0cc:	429e      	cmp	r6, r3
   4a0ce:	d3ec      	bcc.n	4a0aa <nrf91_socket_offload_sendmsg+0xb2>
   4a0d0:	e7ce      	b.n	4a070 <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   4a0d2:	f853 100a 	ldr.w	r1, [r3, sl]
   4a0d6:	6863      	ldr	r3, [r4, #4]
   4a0d8:	4449      	add	r1, r9
   4a0da:	9301      	str	r3, [sp, #4]
   4a0dc:	6823      	ldr	r3, [r4, #0]
   4a0de:	4638      	mov	r0, r7
   4a0e0:	9300      	str	r3, [sp, #0]
   4a0e2:	eba2 0209 	sub.w	r2, r2, r9
   4a0e6:	4643      	mov	r3, r8
   4a0e8:	f00d f9b0 	bl	5744c <nrf91_socket_offload_sendto>
			if (ret < 0) {
   4a0ec:	1e01      	subs	r1, r0, #0
   4a0ee:	db05      	blt.n	4a0fc <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   4a0f0:	4489      	add	r9, r1
			len += ret;
   4a0f2:	440d      	add	r5, r1
   4a0f4:	e7e2      	b.n	4a0bc <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a0f6:	2600      	movs	r6, #0
	len = 0;
   4a0f8:	4635      	mov	r5, r6
   4a0fa:	e7e6      	b.n	4a0ca <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   4a0fc:	460d      	mov	r5, r1
   4a0fe:	e7b7      	b.n	4a070 <nrf91_socket_offload_sendmsg+0x78>
   4a100:	2001abc0 	.word	0x2001abc0
   4a104:	2001e292 	.word	0x2001e292

0004a108 <allocate_ctx>:
{
   4a108:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   4a10a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4a10e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   4a112:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   4a114:	480b      	ldr	r0, [pc, #44]	; (4a144 <allocate_ctx+0x3c>)
   4a116:	f00d fa2a 	bl	5756e <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   4a11a:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   4a11c:	4a0a      	ldr	r2, [pc, #40]	; (4a148 <allocate_ctx+0x40>)
   4a11e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   4a122:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   4a126:	3101      	adds	r1, #1
   4a128:	d106      	bne.n	4a138 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   4a12a:	f842 5033 	str.w	r5, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   4a12e:	4805      	ldr	r0, [pc, #20]	; (4a144 <allocate_ctx+0x3c>)
   4a130:	f00d fa1f 	bl	57572 <k_mutex_unlock.isra.0>
}
   4a134:	4620      	mov	r0, r4
   4a136:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   4a138:	3301      	adds	r3, #1
   4a13a:	2b08      	cmp	r3, #8
   4a13c:	d1ef      	bne.n	4a11e <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   4a13e:	2400      	movs	r4, #0
   4a140:	e7f5      	b.n	4a12e <allocate_ctx+0x26>
   4a142:	bf00      	nop
   4a144:	2001ab5c 	.word	0x2001ab5c
   4a148:	2001b7bc 	.word	0x2001b7bc

0004a14c <release_ctx>:
{
   4a14c:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   4a14e:	4d09      	ldr	r5, [pc, #36]	; (4a174 <release_ctx+0x28>)
{
   4a150:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   4a152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4a156:	4628      	mov	r0, r5
   4a158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4a15c:	f00d fa07 	bl	5756e <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   4a160:	2300      	movs	r3, #0
   4a162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4a166:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
   4a16a:	4628      	mov	r0, r5
}
   4a16c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   4a170:	f00d b9ff 	b.w	57572 <k_mutex_unlock.isra.0>
   4a174:	2001ab5c 	.word	0x2001ab5c

0004a178 <nrf91_socket_offload_accept>:
{
   4a178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4a17c:	b08b      	sub	sp, #44	; 0x2c
   4a17e:	4607      	mov	r7, r0
   4a180:	460c      	mov	r4, r1
   4a182:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   4a184:	f7fa fce4 	bl	44b50 <z_reserve_fd>
   4a188:	4606      	mov	r6, r0
	if (fd < 0) {
   4a18a:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   4a18c:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   4a18e:	db1e      	blt.n	4a1ce <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   4a190:	b304      	cbz	r4, 4a1d4 <nrf91_socket_offload_accept+0x5c>
   4a192:	b315      	cbz	r5, 4a1da <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   4a194:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   4a196:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   4a198:	2b08      	cmp	r3, #8
   4a19a:	bf14      	ite	ne
   4a19c:	2324      	movne	r3, #36	; 0x24
   4a19e:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   4a1a0:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   4a1a4:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   4a1a6:	4649      	mov	r1, r9
   4a1a8:	f00f fe5b 	bl	59e62 <nrf_accept>
	if (new_sd < 0) {
   4a1ac:	f1b0 0800 	subs.w	r8, r0, #0
   4a1b0:	db0a      	blt.n	4a1c8 <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
   4a1b2:	f7ff ffa9 	bl	4a108 <allocate_ctx>
	if (ctx == NULL) {
   4a1b6:	4607      	mov	r7, r0
   4a1b8:	b990      	cbnz	r0, 4a1e0 <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   4a1ba:	f00b ff9b 	bl	560f4 <__errno>
   4a1be:	230c      	movs	r3, #12
   4a1c0:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   4a1c2:	4640      	mov	r0, r8
   4a1c4:	f006 fdf0 	bl	50da8 <nrf_close>
	z_free_fd(fd);
   4a1c8:	4630      	mov	r0, r6
   4a1ca:	f7fa fd11 	bl	44bf0 <z_free_fd>
		return -1;
   4a1ce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4a1d2:	e018      	b.n	4a206 <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   4a1d4:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   4a1d6:	46a1      	mov	r9, r4
   4a1d8:	e7e5      	b.n	4a1a6 <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   4a1da:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   4a1dc:	46a9      	mov	r9, r5
   4a1de:	e7e2      	b.n	4a1a6 <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   4a1e0:	b164      	cbz	r4, 4a1fc <nrf91_socket_offload_accept+0x84>
   4a1e2:	b15d      	cbz	r5, 4a1fc <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   4a1e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   4a1e8:	2b01      	cmp	r3, #1
   4a1ea:	d110      	bne.n	4a20e <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
   4a1ec:	2208      	movs	r2, #8
   4a1ee:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   4a1f0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   4a1f4:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   4a1f6:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   4a1f8:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   4a1fa:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   4a1fc:	4639      	mov	r1, r7
   4a1fe:	4630      	mov	r0, r6
   4a200:	4a0d      	ldr	r2, [pc, #52]	; (4a238 <nrf91_socket_offload_accept+0xc0>)
   4a202:	f7fa fcdb 	bl	44bbc <z_finalize_fd>
}
   4a206:	4630      	mov	r0, r6
   4a208:	b00b      	add	sp, #44	; 0x2c
   4a20a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   4a20e:	2b02      	cmp	r3, #2
   4a210:	d106      	bne.n	4a220 <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
   4a212:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   4a214:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   4a216:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   4a218:	a901      	add	r1, sp, #4
   4a21a:	f00d f8ea 	bl	573f2 <nrf_to_z_ipv6>
   4a21e:	e7ed      	b.n	4a1fc <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
   4a220:	f00b ff68 	bl	560f4 <__errno>
   4a224:	2386      	movs	r3, #134	; 0x86
   4a226:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   4a228:	4640      	mov	r0, r8
   4a22a:	f006 fdbd 	bl	50da8 <nrf_close>
		release_ctx(ctx);
   4a22e:	4638      	mov	r0, r7
   4a230:	f7ff ff8c 	bl	4a14c <release_ctx>
   4a234:	e7c8      	b.n	4a1c8 <nrf91_socket_offload_accept+0x50>
   4a236:	bf00      	nop
   4a238:	0005c400 	.word	0x0005c400

0004a23c <nrf91_socket_create>:
{
   4a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   4a240:	1e0d      	subs	r5, r1, #0
{
   4a242:	4607      	mov	r7, r0
   4a244:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
   4a246:	da12      	bge.n	4a26e <nrf91_socket_create+0x32>
	k_sched_lock();
   4a248:	f008 fd5e 	bl	52d08 <k_sched_lock>
	*offload_lock = true;
   4a24c:	4e1c      	ldr	r6, [pc, #112]	; (4a2c0 <nrf91_socket_create+0x84>)
   4a24e:	2301      	movs	r3, #1
   4a250:	7033      	strb	r3, [r6, #0]
		union { uintptr_t x; int val; } parm2 = { .val = proto };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
   4a252:	4642      	mov	r2, r8
   4a254:	4638      	mov	r0, r7
   4a256:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   4a25a:	f7fb fa55 	bl	45708 <z_impl_zsock_socket>
	*offload_lock = false;
   4a25e:	2300      	movs	r3, #0
   4a260:	7033      	strb	r3, [r6, #0]
   4a262:	4604      	mov	r4, r0
	k_sched_unlock();
   4a264:	f008 fd64 	bl	52d30 <k_sched_unlock>
}
   4a268:	4620      	mov	r0, r4
   4a26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   4a26e:	006b      	lsls	r3, r5, #1
   4a270:	d503      	bpl.n	4a27a <nrf91_socket_create+0x3e>
	k_sched_lock();
   4a272:	f008 fd49 	bl	52d08 <k_sched_lock>
	*offload_lock = true;
   4a276:	4e13      	ldr	r6, [pc, #76]	; (4a2c4 <nrf91_socket_create+0x88>)
   4a278:	e7e9      	b.n	4a24e <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
   4a27a:	f7fa fc69 	bl	44b50 <z_reserve_fd>
	if (fd < 0) {
   4a27e:	1e04      	subs	r4, r0, #0
   4a280:	db09      	blt.n	4a296 <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
   4a282:	4629      	mov	r1, r5
   4a284:	4642      	mov	r2, r8
   4a286:	4638      	mov	r0, r7
   4a288:	f00f fc79 	bl	59b7e <nrf_socket>
	if (sd < 0) {
   4a28c:	1e05      	subs	r5, r0, #0
   4a28e:	da05      	bge.n	4a29c <nrf91_socket_create+0x60>
		z_free_fd(fd);
   4a290:	4620      	mov	r0, r4
   4a292:	f7fa fcad 	bl	44bf0 <z_free_fd>
		return -1;
   4a296:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   4a29a:	e7e5      	b.n	4a268 <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
   4a29c:	f7ff ff34 	bl	4a108 <allocate_ctx>
	if (ctx == NULL) {
   4a2a0:	4601      	mov	r1, r0
   4a2a2:	b938      	cbnz	r0, 4a2b4 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   4a2a4:	f00b ff26 	bl	560f4 <__errno>
   4a2a8:	230c      	movs	r3, #12
   4a2aa:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   4a2ac:	4628      	mov	r0, r5
   4a2ae:	f006 fd7b 	bl	50da8 <nrf_close>
		z_free_fd(fd);
   4a2b2:	e7ed      	b.n	4a290 <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
   4a2b4:	4620      	mov	r0, r4
   4a2b6:	4a04      	ldr	r2, [pc, #16]	; (4a2c8 <nrf91_socket_create+0x8c>)
   4a2b8:	f7fa fc80 	bl	44bbc <z_finalize_fd>
	return fd;
   4a2bc:	e7d4      	b.n	4a268 <nrf91_socket_create+0x2c>
   4a2be:	bf00      	nop
   4a2c0:	2001e313 	.word	0x2001e313
   4a2c4:	2001e312 	.word	0x2001e312
   4a2c8:	0005c400 	.word	0x0005c400

0004a2cc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   4a2cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   4a2ce:	ab0b      	add	r3, sp, #44	; 0x2c
   4a2d0:	9305      	str	r3, [sp, #20]
   4a2d2:	9303      	str	r3, [sp, #12]
   4a2d4:	4b05      	ldr	r3, [pc, #20]	; (4a2ec <z_log_msg_runtime_create.constprop.0+0x20>)
   4a2d6:	2201      	movs	r2, #1
   4a2d8:	9302      	str	r3, [sp, #8]
   4a2da:	2300      	movs	r3, #0
   4a2dc:	4618      	mov	r0, r3
   4a2de:	e9cd 3300 	strd	r3, r3, [sp]
   4a2e2:	f7fa ff61 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   4a2e6:	b007      	add	sp, #28
   4a2e8:	f85d fb04 	ldr.w	pc, [sp], #4
   4a2ec:	0005e801 	.word	0x0005e801

0004a2f0 <nrf_modem_fault_handler>:

LOG_MODULE_DECLARE(nrf_modem, CONFIG_NRF_MODEM_LIB_LOG_LEVEL);

#if CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
   4a2f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
   4a2f2:	6843      	ldr	r3, [r0, #4]
   4a2f4:	2201      	movs	r2, #1
   4a2f6:	9304      	str	r3, [sp, #16]
   4a2f8:	6803      	ldr	r3, [r0, #0]
   4a2fa:	4906      	ldr	r1, [pc, #24]	; (4a314 <nrf_modem_fault_handler+0x24>)
   4a2fc:	9303      	str	r3, [sp, #12]
   4a2fe:	4b06      	ldr	r3, [pc, #24]	; (4a318 <nrf_modem_fault_handler+0x28>)
   4a300:	9302      	str	r3, [sp, #8]
   4a302:	2300      	movs	r3, #0
   4a304:	4618      	mov	r0, r3
   4a306:	e9cd 3300 	strd	r3, r3, [sp]
   4a30a:	f7ff ffdf 	bl	4a2cc <z_log_msg_runtime_create.constprop.0>
}
   4a30e:	b007      	add	sp, #28
   4a310:	f85d fb04 	ldr.w	pc, [sp], #4
   4a314:	0005bf7c 	.word	0x0005bf7c
   4a318:	0005e801 	.word	0x0005e801

0004a31c <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   4a31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   4a320:	2400      	movs	r4, #0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   4a322:	f04f 0801 	mov.w	r8, #1
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a326:	4625      	mov	r5, r4
   4a328:	4e16      	ldr	r6, [pc, #88]	; (4a384 <get_buttons+0x68>)
{
   4a32a:	b087      	sub	sp, #28
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   4a32c:	6830      	ldr	r0, [r6, #0]
   4a32e:	7937      	ldrb	r7, [r6, #4]
	const struct gpio_driver_data *const data =
   4a330:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   4a334:	6883      	ldr	r3, [r0, #8]
   4a336:	a905      	add	r1, sp, #20
   4a338:	685b      	ldr	r3, [r3, #4]
   4a33a:	4798      	blx	r3
	if (ret == 0) {
   4a33c:	2800      	cmp	r0, #0
   4a33e:	d009      	beq.n	4a354 <get_buttons+0x38>
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
   4a340:	db11      	blt.n	4a366 <get_buttons+0x4a>
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if (val) {
			ret |= 1U << i;
   4a342:	fa08 f305 	lsl.w	r3, r8, r5
   4a346:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a348:	3501      	adds	r5, #1
   4a34a:	2d04      	cmp	r5, #4
   4a34c:	f106 0608 	add.w	r6, r6, #8
   4a350:	d1ec      	bne.n	4a32c <get_buttons+0x10>
   4a352:	e013      	b.n	4a37c <get_buttons+0x60>
		*value ^= data->invert;
   4a354:	f8d9 2000 	ldr.w	r2, [r9]
   4a358:	9b05      	ldr	r3, [sp, #20]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   4a35a:	fa08 f707 	lsl.w	r7, r8, r7
		*value ^= data->invert;
   4a35e:	4053      	eors	r3, r2
		if (val) {
   4a360:	423b      	tst	r3, r7
   4a362:	d0f1      	beq.n	4a348 <get_buttons+0x2c>
   4a364:	e7ed      	b.n	4a342 <get_buttons+0x26>
			LOG_ERR("Cannot read gpio pin");
   4a366:	2400      	movs	r4, #0
   4a368:	4b07      	ldr	r3, [pc, #28]	; (4a388 <get_buttons+0x6c>)
   4a36a:	2201      	movs	r2, #1
   4a36c:	9302      	str	r3, [sp, #8]
   4a36e:	4620      	mov	r0, r4
   4a370:	4623      	mov	r3, r4
   4a372:	e9cd 4400 	strd	r4, r4, [sp]
   4a376:	4905      	ldr	r1, [pc, #20]	; (4a38c <get_buttons+0x70>)
   4a378:	f00d f97c 	bl	57674 <z_log_msg_runtime_create.constprop.0>
		}
	}

	return ret;
}
   4a37c:	4620      	mov	r0, r4
   4a37e:	b007      	add	sp, #28
   4a380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   4a384:	0005c440 	.word	0x0005c440
   4a388:	0005e81d 	.word	0x0005e81d
   4a38c:	0005bed4 	.word	0x0005bed4

0004a390 <callback_ctrl>:
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   4a390:	2800      	cmp	r0, #0
{
   4a392:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   4a396:	bf0c      	ite	eq
   4a398:	f44f 1600 	moveq.w	r6, #2097152	; 0x200000
   4a39c:	f04f 6698 	movne.w	r6, #79691776	; 0x4c00000
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   4a3a0:	2500      	movs	r5, #0
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   4a3a2:	f04f 0801 	mov.w	r8, #1
   4a3a6:	4c11      	ldr	r4, [pc, #68]	; (4a3ec <callback_ctrl+0x5c>)
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   4a3a8:	f406 0700 	and.w	r7, r6, #8388608	; 0x800000
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   4a3ac:	6820      	ldr	r0, [r4, #0]
   4a3ae:	7921      	ldrb	r1, [r4, #4]
	const struct gpio_driver_api *api =
   4a3b0:	f8d0 c008 	ldr.w	ip, [r0, #8]
	const struct gpio_driver_data *const data =
   4a3b4:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   4a3b6:	b1bf      	cbz	r7, 4a3e8 <callback_ctrl+0x58>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   4a3b8:	6812      	ldr	r2, [r2, #0]
   4a3ba:	fa08 f301 	lsl.w	r3, r8, r1
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   4a3be:	4213      	tst	r3, r2
   4a3c0:	bf0c      	ite	eq
   4a3c2:	f04f 6298 	moveq.w	r2, #79691776	; 0x4c00000
   4a3c6:	f04f 7230 	movne.w	r2, #46137344	; 0x2c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   4a3ca:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   4a3ce:	f8dc 9018 	ldr.w	r9, [ip, #24]
   4a3d2:	f402 02c0 	and.w	r2, r2, #6291456	; 0x600000
   4a3d6:	3501      	adds	r5, #1
   4a3d8:	47c8      	blx	r9
   4a3da:	2d04      	cmp	r5, #4
   4a3dc:	d002      	beq.n	4a3e4 <callback_ctrl+0x54>
   4a3de:	3408      	adds	r4, #8
   4a3e0:	2800      	cmp	r0, #0
   4a3e2:	d0e3      	beq.n	4a3ac <callback_ctrl+0x1c>
}
   4a3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4a3e8:	4632      	mov	r2, r6
   4a3ea:	e7ee      	b.n	4a3ca <callback_ctrl+0x3a>
   4a3ec:	0005c440 	.word	0x0005c440

0004a3f0 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   4a3f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__asm__ volatile(
   4a3f2:	f04f 0320 	mov.w	r3, #32
   4a3f6:	f3ef 8411 	mrs	r4, BASEPRI
   4a3fa:	f383 8812 	msr	BASEPRI_MAX, r3
   4a3fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   4a402:	2000      	movs	r0, #0
   4a404:	f7ff ffc4 	bl	4a390 <callback_ctrl>

	if (err) {
   4a408:	b148      	cbz	r0, 4a41e <button_pressed+0x2e>
		LOG_ERR("Cannot disable callbacks");
   4a40a:	4b0d      	ldr	r3, [pc, #52]	; (4a440 <button_pressed+0x50>)
   4a40c:	2201      	movs	r2, #1
   4a40e:	9302      	str	r3, [sp, #8]
   4a410:	2300      	movs	r3, #0
   4a412:	490c      	ldr	r1, [pc, #48]	; (4a444 <button_pressed+0x54>)
   4a414:	4618      	mov	r0, r3
   4a416:	e9cd 3300 	strd	r3, r3, [sp]
   4a41a:	f00d f92b 	bl	57674 <z_log_msg_runtime_create.constprop.0>
	}

	switch (state) {
   4a41e:	4b0a      	ldr	r3, [pc, #40]	; (4a448 <button_pressed+0x58>)
   4a420:	781a      	ldrb	r2, [r3, #0]
   4a422:	b932      	cbnz	r2, 4a432 <button_pressed+0x42>
	case STATE_WAITING:
		state = STATE_SCANNING;
   4a424:	2201      	movs	r2, #1
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   4a426:	4809      	ldr	r0, [pc, #36]	; (4a44c <button_pressed+0x5c>)
		state = STATE_SCANNING;
   4a428:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   4a42a:	2221      	movs	r2, #33	; 0x21
   4a42c:	2300      	movs	r3, #0
   4a42e:	f008 fa5b 	bl	528e8 <k_work_reschedule>
	__asm__ volatile(
   4a432:	f384 8811 	msr	BASEPRI, r4
   4a436:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   4a43a:	b004      	add	sp, #16
   4a43c:	bd10      	pop	{r4, pc}
   4a43e:	bf00      	nop
   4a440:	0005e832 	.word	0x0005e832
   4a444:	0005bed4 	.word	0x0005bed4
   4a448:	2001e314 	.word	0x2001e314
   4a44c:	2001ac90 	.word	0x2001ac90

0004a450 <buttons_scan_fn>:
{
   4a450:	b5f0      	push	{r4, r5, r6, r7, lr}
   4a452:	b085      	sub	sp, #20
	button_scan = get_buttons();
   4a454:	f7ff ff62 	bl	4a31c <get_buttons>
   4a458:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4a45a:	4b2e      	ldr	r3, [pc, #184]	; (4a514 <buttons_scan_fn+0xc4>)
   4a45c:	e8d3 2fef 	ldaex	r2, [r3]
   4a460:	e8c3 4fe1 	stlex	r1, r4, [r3]
   4a464:	2900      	cmp	r1, #0
   4a466:	d1f9      	bne.n	4a45c <buttons_scan_fn+0xc>
	if (!initial_run) {
   4a468:	4b2b      	ldr	r3, [pc, #172]	; (4a518 <buttons_scan_fn+0xc8>)
   4a46a:	4f2c      	ldr	r7, [pc, #176]	; (4a51c <buttons_scan_fn+0xcc>)
   4a46c:	781a      	ldrb	r2, [r3, #0]
   4a46e:	bb3a      	cbnz	r2, 4a4c0 <buttons_scan_fn+0x70>
		if (button_scan != last_button_scan) {
   4a470:	683e      	ldr	r6, [r7, #0]
   4a472:	42a6      	cmp	r6, r4
   4a474:	d019      	beq.n	4a4aa <buttons_scan_fn+0x5a>
	if (button_handler_cb != NULL) {
   4a476:	4b2a      	ldr	r3, [pc, #168]	; (4a520 <buttons_scan_fn+0xd0>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   4a478:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   4a47a:	681b      	ldr	r3, [r3, #0]
   4a47c:	b10b      	cbz	r3, 4a482 <buttons_scan_fn+0x32>
		button_handler_cb(button_state, has_changed);
   4a47e:	4631      	mov	r1, r6
   4a480:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   4a482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4a486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4a48a:	4826      	ldr	r0, [pc, #152]	; (4a524 <buttons_scan_fn+0xd4>)
   4a48c:	f007 fffe 	bl	5248c <z_impl_k_mutex_lock>
	return list->head;
   4a490:	4b25      	ldr	r3, [pc, #148]	; (4a528 <buttons_scan_fn+0xd8>)
   4a492:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   4a494:	b135      	cbz	r5, 4a4a4 <buttons_scan_fn+0x54>
   4a496:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   4a498:	682b      	ldr	r3, [r5, #0]
   4a49a:	4631      	mov	r1, r6
   4a49c:	4620      	mov	r0, r4
   4a49e:	4798      	blx	r3
	return node->next;
   4a4a0:	686d      	ldr	r5, [r5, #4]
   4a4a2:	e7f7      	b.n	4a494 <buttons_scan_fn+0x44>
	return z_impl_k_mutex_unlock(mutex);
   4a4a4:	481f      	ldr	r0, [pc, #124]	; (4a524 <buttons_scan_fn+0xd4>)
   4a4a6:	f008 f86b 	bl	52580 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   4a4aa:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   4a4ac:	b15c      	cbz	r4, 4a4c6 <buttons_scan_fn+0x76>
		k_work_reschedule(&buttons_scan,
   4a4ae:	f44f 72a4 	mov.w	r2, #328	; 0x148
   4a4b2:	2300      	movs	r3, #0
   4a4b4:	481d      	ldr	r0, [pc, #116]	; (4a52c <buttons_scan_fn+0xdc>)
}
   4a4b6:	b005      	add	sp, #20
   4a4b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		k_work_reschedule(&buttons_scan,
   4a4bc:	f008 ba14 	b.w	528e8 <k_work_reschedule>
		initial_run = false;
   4a4c0:	2200      	movs	r2, #0
   4a4c2:	701a      	strb	r2, [r3, #0]
   4a4c4:	e7f1      	b.n	4a4aa <buttons_scan_fn+0x5a>
	__asm__ volatile(
   4a4c6:	f04f 0320 	mov.w	r3, #32
   4a4ca:	f3ef 8611 	mrs	r6, BASEPRI
   4a4ce:	f383 8812 	msr	BASEPRI_MAX, r3
   4a4d2:	f3bf 8f6f 	isb	sy
		switch (state) {
   4a4d6:	4b16      	ldr	r3, [pc, #88]	; (4a530 <buttons_scan_fn+0xe0>)
   4a4d8:	781d      	ldrb	r5, [r3, #0]
   4a4da:	2d01      	cmp	r5, #1
   4a4dc:	d005      	beq.n	4a4ea <buttons_scan_fn+0x9a>
	__asm__ volatile(
   4a4de:	f386 8811 	msr	BASEPRI, r6
   4a4e2:	f3bf 8f6f 	isb	sy
}
   4a4e6:	b005      	add	sp, #20
   4a4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = callback_ctrl(true);
   4a4ea:	4628      	mov	r0, r5
			state = STATE_WAITING;
   4a4ec:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   4a4ee:	f7ff ff4f 	bl	4a390 <callback_ctrl>
   4a4f2:	f386 8811 	msr	BASEPRI, r6
   4a4f6:	f3bf 8f6f 	isb	sy
		if (err) {
   4a4fa:	2800      	cmp	r0, #0
   4a4fc:	d0f3      	beq.n	4a4e6 <buttons_scan_fn+0x96>
			LOG_ERR("Cannot enable callbacks");
   4a4fe:	4b0d      	ldr	r3, [pc, #52]	; (4a534 <buttons_scan_fn+0xe4>)
   4a500:	462a      	mov	r2, r5
   4a502:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4a506:	4620      	mov	r0, r4
   4a508:	4623      	mov	r3, r4
   4a50a:	490b      	ldr	r1, [pc, #44]	; (4a538 <buttons_scan_fn+0xe8>)
   4a50c:	9400      	str	r4, [sp, #0]
   4a50e:	f00d f8b1 	bl	57674 <z_log_msg_runtime_create.constprop.0>
}
   4a512:	e7e8      	b.n	4a4e6 <buttons_scan_fn+0x96>
   4a514:	2001b82c 	.word	0x2001b82c
   4a518:	2001aa23 	.word	0x2001aa23
   4a51c:	2001b800 	.word	0x2001b800
   4a520:	2001b830 	.word	0x2001b830
   4a524:	2001b804 	.word	0x2001b804
   4a528:	2001b818 	.word	0x2001b818
   4a52c:	2001ac90 	.word	0x2001ac90
   4a530:	2001e314 	.word	0x2001e314
   4a534:	0005e84b 	.word	0x0005e84b
   4a538:	0005bed4 	.word	0x0005bed4

0004a53c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4a53c:	4b05      	ldr	r3, [pc, #20]	; (4a554 <dk_read_buttons+0x18>)
   4a53e:	e8d3 3faf 	lda	r3, [r3]
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   4a542:	b100      	cbz	r0, 4a546 <dk_read_buttons+0xa>
		*button_state = current_state;
   4a544:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   4a546:	4804      	ldr	r0, [pc, #16]	; (4a558 <dk_read_buttons+0x1c>)
   4a548:	b111      	cbz	r1, 4a550 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   4a54a:	6802      	ldr	r2, [r0, #0]
   4a54c:	405a      	eors	r2, r3
   4a54e:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   4a550:	6003      	str	r3, [r0, #0]
}
   4a552:	4770      	bx	lr
   4a554:	2001b82c 	.word	0x2001b82c
   4a558:	2001b7fc 	.word	0x2001b7fc

0004a55c <dk_buttons_init>:
{
   4a55c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   4a560:	4b3a      	ldr	r3, [pc, #232]	; (4a64c <dk_buttons_init+0xf0>)
{
   4a562:	b085      	sub	sp, #20
	button_handler_cb = button_handler;
   4a564:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   4a566:	4d3a      	ldr	r5, [pc, #232]	; (4a650 <dk_buttons_init+0xf4>)
   4a568:	483a      	ldr	r0, [pc, #232]	; (4a654 <dk_buttons_init+0xf8>)
   4a56a:	f010 f95c 	bl	5a826 <z_impl_k_mutex_init>
   4a56e:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a570:	2700      	movs	r7, #0
   4a572:	46a8      	mov	r8, r5
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   4a574:	88f3      	ldrh	r3, [r6, #6]
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   4a576:	4630      	mov	r0, r6
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   4a578:	f013 0f01 	tst.w	r3, #1
   4a57c:	bf0c      	ite	eq
   4a57e:	2120      	moveq	r1, #32
   4a580:	2110      	movne	r1, #16
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   4a582:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   4a586:	f00d f860 	bl	5764a <gpio_pin_configure_dt>
		if (err) {
   4a58a:	4604      	mov	r4, r0
   4a58c:	b168      	cbz	r0, 4a5aa <dk_buttons_init+0x4e>
			LOG_ERR("Cannot configure button gpio");
   4a58e:	4b32      	ldr	r3, [pc, #200]	; (4a658 <dk_buttons_init+0xfc>)
			LOG_ERR("Cannot disable callbacks()");
   4a590:	9302      	str	r3, [sp, #8]
   4a592:	2300      	movs	r3, #0
   4a594:	2201      	movs	r2, #1
   4a596:	4618      	mov	r0, r3
   4a598:	e9cd 3300 	strd	r3, r3, [sp]
   4a59c:	492f      	ldr	r1, [pc, #188]	; (4a65c <dk_buttons_init+0x100>)
   4a59e:	f00d f869 	bl	57674 <z_log_msg_runtime_create.constprop.0>
}
   4a5a2:	4620      	mov	r0, r4
   4a5a4:	b005      	add	sp, #20
   4a5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a5aa:	3701      	adds	r7, #1
   4a5ac:	2f04      	cmp	r7, #4
   4a5ae:	f106 0608 	add.w	r6, r6, #8
   4a5b2:	d1df      	bne.n	4a574 <dk_buttons_init+0x18>
	uint32_t pin_mask = 0;
   4a5b4:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a5b6:	4607      	mov	r7, r0
		pin_mask |= BIT(buttons[i].pin);
   4a5b8:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   4a5bc:	6828      	ldr	r0, [r5, #0]
   4a5be:	7929      	ldrb	r1, [r5, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   4a5c0:	6883      	ldr	r3, [r0, #8]
   4a5c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   4a5c6:	699c      	ldr	r4, [r3, #24]
   4a5c8:	2300      	movs	r3, #0
   4a5ca:	47a0      	blx	r4
		if (err) {
   4a5cc:	4604      	mov	r4, r0
   4a5ce:	b108      	cbz	r0, 4a5d4 <dk_buttons_init+0x78>
			LOG_ERR("Cannot disable callbacks()");
   4a5d0:	4b23      	ldr	r3, [pc, #140]	; (4a660 <dk_buttons_init+0x104>)
   4a5d2:	e7dd      	b.n	4a590 <dk_buttons_init+0x34>
		pin_mask |= BIT(buttons[i].pin);
   4a5d4:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a5d6:	3701      	adds	r7, #1
		pin_mask |= BIT(buttons[i].pin);
   4a5d8:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a5dc:	2f04      	cmp	r7, #4
		pin_mask |= BIT(buttons[i].pin);
   4a5de:	ea46 0603 	orr.w	r6, r6, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a5e2:	f105 0508 	add.w	r5, r5, #8
   4a5e6:	d1e9      	bne.n	4a5bc <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a5e8:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   4a5ea:	4f1e      	ldr	r7, [pc, #120]	; (4a664 <dk_buttons_init+0x108>)
   4a5ec:	4b1e      	ldr	r3, [pc, #120]	; (4a668 <dk_buttons_init+0x10c>)
	callback->pin_mask = pin_mask;
   4a5ee:	e9c7 3601 	strd	r3, r6, [r7, #4]
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   4a5f2:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   4a5f6:	6883      	ldr	r3, [r0, #8]
   4a5f8:	69db      	ldr	r3, [r3, #28]
   4a5fa:	b133      	cbz	r3, 4a60a <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   4a5fc:	2201      	movs	r2, #1
   4a5fe:	4639      	mov	r1, r7
   4a600:	4798      	blx	r3
		if (err) {
   4a602:	4604      	mov	r4, r0
   4a604:	b120      	cbz	r0, 4a610 <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
   4a606:	4b19      	ldr	r3, [pc, #100]	; (4a66c <dk_buttons_init+0x110>)
   4a608:	e7c2      	b.n	4a590 <dk_buttons_init+0x34>
		return -ENOTSUP;
   4a60a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   4a60e:	e7fa      	b.n	4a606 <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a610:	3501      	adds	r5, #1
   4a612:	2d04      	cmp	r5, #4
   4a614:	d1ed      	bne.n	4a5f2 <dk_buttons_init+0x96>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   4a616:	4916      	ldr	r1, [pc, #88]	; (4a670 <dk_buttons_init+0x114>)
   4a618:	4816      	ldr	r0, [pc, #88]	; (4a674 <dk_buttons_init+0x118>)
   4a61a:	f010 fa05 	bl	5aa28 <k_work_init_delayable>
	state = STATE_SCANNING;
   4a61e:	2201      	movs	r2, #1
   4a620:	4b15      	ldr	r3, [pc, #84]	; (4a678 <dk_buttons_init+0x11c>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   4a622:	4814      	ldr	r0, [pc, #80]	; (4a674 <dk_buttons_init+0x118>)
	state = STATE_SCANNING;
   4a624:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   4a626:	2300      	movs	r3, #0
   4a628:	2200      	movs	r2, #0
   4a62a:	f008 f929 	bl	52880 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   4a62e:	4621      	mov	r1, r4
   4a630:	4620      	mov	r0, r4
   4a632:	f7ff ff83 	bl	4a53c <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   4a636:	f7ff fe71 	bl	4a31c <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4a63a:	4b10      	ldr	r3, [pc, #64]	; (4a67c <dk_buttons_init+0x120>)
   4a63c:	e8d3 2fef 	ldaex	r2, [r3]
   4a640:	e8c3 0fe1 	stlex	r1, r0, [r3]
   4a644:	2900      	cmp	r1, #0
   4a646:	d0ac      	beq.n	4a5a2 <dk_buttons_init+0x46>
   4a648:	e7f8      	b.n	4a63c <dk_buttons_init+0xe0>
   4a64a:	bf00      	nop
   4a64c:	2001b830 	.word	0x2001b830
   4a650:	0005c440 	.word	0x0005c440
   4a654:	2001b804 	.word	0x2001b804
   4a658:	0005e863 	.word	0x0005e863
   4a65c:	0005bed4 	.word	0x0005bed4
   4a660:	0005e880 	.word	0x0005e880
   4a664:	2001b820 	.word	0x2001b820
   4a668:	0004a3f1 	.word	0x0004a3f1
   4a66c:	0005e89b 	.word	0x0005e89b
   4a670:	0004a451 	.word	0x0004a451
   4a674:	2001ac90 	.word	0x2001ac90
   4a678:	2001e314 	.word	0x2001e314
   4a67c:	2001b82c 	.word	0x2001b82c

0004a680 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   4a680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   4a682:	4809      	ldr	r0, [pc, #36]	; (4a6a8 <at_monitor_sys_init+0x28>)
   4a684:	f006 ff3c 	bl	51500 <nrf_modem_at_notif_handler_set>
	if (err) {
   4a688:	b150      	cbz	r0, 4a6a0 <at_monitor_sys_init+0x20>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   4a68a:	4b08      	ldr	r3, [pc, #32]	; (4a6ac <at_monitor_sys_init+0x2c>)
   4a68c:	9003      	str	r0, [sp, #12]
   4a68e:	9302      	str	r3, [sp, #8]
   4a690:	2300      	movs	r3, #0
   4a692:	2201      	movs	r2, #1
   4a694:	4618      	mov	r0, r3
   4a696:	e9cd 3300 	strd	r3, r3, [sp]
   4a69a:	4905      	ldr	r1, [pc, #20]	; (4a6b0 <at_monitor_sys_init+0x30>)
   4a69c:	f00c fffa 	bl	57694 <z_log_msg_runtime_create.constprop.0>
	}

	return 0;
}
   4a6a0:	2000      	movs	r0, #0
   4a6a2:	b005      	add	sp, #20
   4a6a4:	f85d fb04 	ldr.w	pc, [sp], #4
   4a6a8:	0004a6b5 	.word	0x0004a6b5
   4a6ac:	0005e8c3 	.word	0x0005e8c3
   4a6b0:	0005beb4 	.word	0x0005beb4

0004a6b4 <at_monitor_dispatch>:
{
   4a6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   4a6b6:	4605      	mov	r5, r0
	monitored = false;
   4a6b8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a6ba:	4c20      	ldr	r4, [pc, #128]	; (4a73c <at_monitor_dispatch+0x88>)
   4a6bc:	4f20      	ldr	r7, [pc, #128]	; (4a740 <at_monitor_dispatch+0x8c>)
{
   4a6be:	b085      	sub	sp, #20
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a6c0:	42bc      	cmp	r4, r7
   4a6c2:	d317      	bcc.n	4a6f4 <at_monitor_dispatch+0x40>
	if (!monitored) {
   4a6c4:	b1a6      	cbz	r6, 4a6f0 <at_monitor_dispatch+0x3c>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   4a6c6:	4628      	mov	r0, r5
   4a6c8:	f7f6 fb94 	bl	40df4 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   4a6cc:	2200      	movs	r2, #0
   4a6ce:	1d41      	adds	r1, r0, #5
   4a6d0:	2300      	movs	r3, #0
   4a6d2:	481c      	ldr	r0, [pc, #112]	; (4a744 <at_monitor_dispatch+0x90>)
   4a6d4:	f010 f825 	bl	5a722 <k_heap_alloc>
   4a6d8:	4604      	mov	r4, r0
	if (!at_notif) {
   4a6da:	bb00      	cbnz	r0, 4a71e <at_monitor_dispatch+0x6a>
		LOG_WRN("No heap space for incoming notification: %s",
   4a6dc:	4b1a      	ldr	r3, [pc, #104]	; (4a748 <at_monitor_dispatch+0x94>)
   4a6de:	2202      	movs	r2, #2
   4a6e0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   4a6e4:	4919      	ldr	r1, [pc, #100]	; (4a74c <at_monitor_dispatch+0x98>)
   4a6e6:	4603      	mov	r3, r0
   4a6e8:	9503      	str	r5, [sp, #12]
   4a6ea:	9000      	str	r0, [sp, #0]
   4a6ec:	f00c ffd2 	bl	57694 <z_log_msg_runtime_create.constprop.0>
}
   4a6f0:	b005      	add	sp, #20
   4a6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return mon->flags.paused;
   4a6f4:	7a23      	ldrb	r3, [r4, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   4a6f6:	07da      	lsls	r2, r3, #31
   4a6f8:	d405      	bmi.n	4a706 <at_monitor_dispatch+0x52>
   4a6fa:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   4a6fc:	b929      	cbnz	r1, 4a70a <at_monitor_dispatch+0x56>
	return mon->flags.direct;
   4a6fe:	7a23      	ldrb	r3, [r4, #8]
			if (is_direct(e)) {
   4a700:	079b      	lsls	r3, r3, #30
   4a702:	d408      	bmi.n	4a716 <at_monitor_dispatch+0x62>
				monitored = true;
   4a704:	2601      	movs	r6, #1
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a706:	340c      	adds	r4, #12
   4a708:	e7da      	b.n	4a6c0 <at_monitor_dispatch+0xc>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   4a70a:	4628      	mov	r0, r5
   4a70c:	f010 fde1 	bl	5b2d2 <strstr>
   4a710:	2800      	cmp	r0, #0
   4a712:	d1f4      	bne.n	4a6fe <at_monitor_dispatch+0x4a>
   4a714:	e7f7      	b.n	4a706 <at_monitor_dispatch+0x52>
				e->handler(notif);
   4a716:	4628      	mov	r0, r5
   4a718:	6863      	ldr	r3, [r4, #4]
   4a71a:	4798      	blx	r3
   4a71c:	e7f3      	b.n	4a706 <at_monitor_dispatch+0x52>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   4a71e:	4629      	mov	r1, r5
   4a720:	3004      	adds	r0, #4
   4a722:	f010 fd81 	bl	5b228 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   4a726:	4621      	mov	r1, r4
   4a728:	4809      	ldr	r0, [pc, #36]	; (4a750 <at_monitor_dispatch+0x9c>)
   4a72a:	f010 f8f5 	bl	5a918 <k_queue_append>
	k_work_submit(&at_monitor_work);
   4a72e:	4809      	ldr	r0, [pc, #36]	; (4a754 <at_monitor_dispatch+0xa0>)
}
   4a730:	b005      	add	sp, #20
   4a732:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_work_submit(&at_monitor_work);
   4a736:	f008 b83b 	b.w	527b0 <k_work_submit>
   4a73a:	bf00      	nop
   4a73c:	2001aa44 	.word	0x2001aa44
   4a740:	2001aaa4 	.word	0x2001aaa4
   4a744:	2001ab0c 	.word	0x2001ab0c
   4a748:	0005e8f0 	.word	0x0005e8f0
   4a74c:	0005beb4 	.word	0x0005beb4
   4a750:	2001ac30 	.word	0x2001ac30
   4a754:	2001a77c 	.word	0x2001a77c

0004a758 <at_monitor_task>:
{
   4a758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   4a75c:	4e14      	ldr	r6, [pc, #80]	; (4a7b0 <at_monitor_task+0x58>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a75e:	4f15      	ldr	r7, [pc, #84]	; (4a7b4 <at_monitor_task+0x5c>)
		k_heap_free(&at_monitor_heap, at_notif);
   4a760:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4a7bc <at_monitor_task+0x64>
   4a764:	2200      	movs	r2, #0
   4a766:	2300      	movs	r3, #0
   4a768:	4630      	mov	r0, r6
   4a76a:	f007 ff45 	bl	525f8 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   4a76e:	4605      	mov	r5, r0
   4a770:	b9c8      	cbnz	r0, 4a7a6 <at_monitor_task+0x4e>
}
   4a772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   4a776:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   4a778:	07da      	lsls	r2, r3, #31
   4a77a:	d406      	bmi.n	4a78a <at_monitor_task+0x32>
   4a77c:	079b      	lsls	r3, r3, #30
   4a77e:	d404      	bmi.n	4a78a <at_monitor_task+0x32>
   4a780:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   4a782:	b951      	cbnz	r1, 4a79a <at_monitor_task+0x42>
				e->handler(at_notif->data);
   4a784:	4648      	mov	r0, r9
   4a786:	6863      	ldr	r3, [r4, #4]
   4a788:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a78a:	340c      	adds	r4, #12
   4a78c:	42bc      	cmp	r4, r7
   4a78e:	d3f2      	bcc.n	4a776 <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
   4a790:	4629      	mov	r1, r5
   4a792:	4640      	mov	r0, r8
   4a794:	f00f ffcf 	bl	5a736 <k_heap_free>
   4a798:	e7e4      	b.n	4a764 <at_monitor_task+0xc>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   4a79a:	4648      	mov	r0, r9
   4a79c:	f010 fd99 	bl	5b2d2 <strstr>
   4a7a0:	2800      	cmp	r0, #0
   4a7a2:	d1ef      	bne.n	4a784 <at_monitor_task+0x2c>
   4a7a4:	e7f1      	b.n	4a78a <at_monitor_task+0x32>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a7a6:	4c04      	ldr	r4, [pc, #16]	; (4a7b8 <at_monitor_task+0x60>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   4a7a8:	f105 0904 	add.w	r9, r5, #4
   4a7ac:	e7ee      	b.n	4a78c <at_monitor_task+0x34>
   4a7ae:	bf00      	nop
   4a7b0:	2001ac30 	.word	0x2001ac30
   4a7b4:	2001aaa4 	.word	0x2001aaa4
   4a7b8:	2001aa44 	.word	0x2001aa44
   4a7bc:	2001ab0c 	.word	0x2001ab0c

0004a7c0 <z_impl_uart_irq_rx_enable.constprop.0>:
__syscall void uart_irq_rx_enable(const struct device *dev);

static inline void z_impl_uart_irq_rx_enable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   4a7c0:	4802      	ldr	r0, [pc, #8]	; (4a7cc <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_enable != NULL) {
   4a7c2:	6883      	ldr	r3, [r0, #8]
   4a7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   4a7c6:	b103      	cbz	r3, 4a7ca <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
   4a7c8:	4718      	bx	r3
	}
#else
	ARG_UNUSED(dev);
#endif
}
   4a7ca:	4770      	bx	lr
   4a7cc:	0005bbcc 	.word	0x0005bbcc

0004a7d0 <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   4a7d0:	b538      	push	{r3, r4, r5, lr}
	api->poll_out(dev, out_char);
   4a7d2:	4d05      	ldr	r5, [pc, #20]	; (4a7e8 <write_uart_string+0x18>)
   4a7d4:	1e44      	subs	r4, r0, #1
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
   4a7d6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   4a7da:	b901      	cbnz	r1, 4a7de <write_uart_string+0xe>
		uart_poll_out(uart_dev, str[i]);
	}
}
   4a7dc:	bd38      	pop	{r3, r4, r5, pc}
   4a7de:	68ab      	ldr	r3, [r5, #8]
   4a7e0:	4801      	ldr	r0, [pc, #4]	; (4a7e8 <write_uart_string+0x18>)
   4a7e2:	685b      	ldr	r3, [r3, #4]
   4a7e4:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   4a7e6:	e7f6      	b.n	4a7d6 <write_uart_string+0x6>
   4a7e8:	0005bbcc 	.word	0x0005bbcc

0004a7ec <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   4a7ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   4a7ee:	4b0f      	ldr	r3, [pc, #60]	; (4a82c <cmd_send+0x40>)
   4a7f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   4a7f4:	4618      	mov	r0, r3
   4a7f6:	4a0e      	ldr	r2, [pc, #56]	; (4a830 <cmd_send+0x44>)
   4a7f8:	f006 fed0 	bl	5159c <nrf_modem_at_cmd>
	if (err < 0) {
   4a7fc:	2800      	cmp	r0, #0
   4a7fe:	da0a      	bge.n	4a816 <cmd_send+0x2a>
		LOG_ERR("Error while processing AT command: %d", err);
   4a800:	4b0c      	ldr	r3, [pc, #48]	; (4a834 <cmd_send+0x48>)
   4a802:	9003      	str	r0, [sp, #12]
   4a804:	9302      	str	r3, [sp, #8]
   4a806:	2300      	movs	r3, #0
   4a808:	2201      	movs	r2, #1
   4a80a:	4618      	mov	r0, r3
   4a80c:	e9cd 3300 	strd	r3, r3, [sp]
   4a810:	4909      	ldr	r1, [pc, #36]	; (4a838 <cmd_send+0x4c>)
   4a812:	f00c ff50 	bl	576b6 <z_log_msg_runtime_create.constprop.0>
	}

	write_uart_string(at_buf);
   4a816:	4805      	ldr	r0, [pc, #20]	; (4a82c <cmd_send+0x40>)
   4a818:	f7ff ffda 	bl	4a7d0 <write_uart_string>

	at_buf_busy = false;
   4a81c:	2200      	movs	r2, #0
   4a81e:	4b07      	ldr	r3, [pc, #28]	; (4a83c <cmd_send+0x50>)
   4a820:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
}
   4a822:	b005      	add	sp, #20
   4a824:	f85d eb04 	ldr.w	lr, [sp], #4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   4a828:	f7ff bfca 	b.w	4a7c0 <z_impl_uart_irq_rx_enable.constprop.0>
   4a82c:	2001e316 	.word	0x2001e316
   4a830:	0005d298 	.word	0x0005d298
   4a834:	0005e927 	.word	0x0005e927
   4a838:	0005beac 	.word	0x0005beac
   4a83c:	2001f316 	.word	0x2001f316

0004a840 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   4a840:	b5f0      	push	{r4, r5, r6, r7, lr}
   4a842:	4604      	mov	r4, r0
   4a844:	b087      	sub	sp, #28
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   4a846:	6883      	ldr	r3, [r0, #8]
   4a848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   4a84a:	b103      	cbz	r3, 4a84e <isr+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   4a84c:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   4a84e:	68a3      	ldr	r3, [r4, #8]
   4a850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   4a852:	b9c3      	cbnz	r3, 4a886 <isr+0x46>

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!at_buf_busy) &&
   4a854:	4e50      	ldr	r6, [pc, #320]	; (4a998 <isr+0x158>)
		if (at_cmd_len > 0) {
   4a856:	4d51      	ldr	r5, [pc, #324]	; (4a99c <isr+0x15c>)
	while ((!at_buf_busy) &&
   4a858:	7833      	ldrb	r3, [r6, #0]
   4a85a:	b9c3      	cbnz	r3, 4a88e <isr+0x4e>
	if (api->fifo_read == NULL) {
   4a85c:	68a3      	ldr	r3, [r4, #8]
   4a85e:	699b      	ldr	r3, [r3, #24]
   4a860:	b12b      	cbz	r3, 4a86e <isr+0x2e>
	return api->fifo_read(dev, rx_data, size);
   4a862:	2201      	movs	r2, #1
   4a864:	4620      	mov	r0, r4
   4a866:	f10d 0117 	add.w	r1, sp, #23
   4a86a:	4798      	blx	r3
   4a86c:	b178      	cbz	r0, 4a88e <isr+0x4e>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
   4a86e:	f89d 3017 	ldrb.w	r3, [sp, #23]
	switch (character) {
   4a872:	2b08      	cmp	r3, #8
   4a874:	d001      	beq.n	4a87a <isr+0x3a>
   4a876:	2b7f      	cmp	r3, #127	; 0x7f
   4a878:	d10b      	bne.n	4a892 <isr+0x52>
		if (at_cmd_len > 0) {
   4a87a:	682b      	ldr	r3, [r5, #0]
   4a87c:	2b00      	cmp	r3, #0
   4a87e:	d0eb      	beq.n	4a858 <isr+0x18>
			at_cmd_len--;
   4a880:	3b01      	subs	r3, #1
   4a882:	602b      	str	r3, [r5, #0]
   4a884:	e7e8      	b.n	4a858 <isr+0x18>
	return api->irq_rx_ready(dev);
   4a886:	4620      	mov	r0, r4
   4a888:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   4a88a:	2800      	cmp	r0, #0
   4a88c:	d1e2      	bne.n	4a854 <isr+0x14>
	}
}
   4a88e:	b007      	add	sp, #28
   4a890:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!inside_quotes) {
   4a892:	4843      	ldr	r0, [pc, #268]	; (4a9a0 <isr+0x160>)
   4a894:	7802      	ldrb	r2, [r0, #0]
   4a896:	2a00      	cmp	r2, #0
   4a898:	d151      	bne.n	4a93e <isr+0xfe>
		switch (character) {
   4a89a:	2b0a      	cmp	r3, #10
   4a89c:	d023      	beq.n	4a8e6 <isr+0xa6>
   4a89e:	2b0d      	cmp	r3, #13
   4a8a0:	d00e      	beq.n	4a8c0 <isr+0x80>
   4a8a2:	2b00      	cmp	r3, #0
   4a8a4:	d14b      	bne.n	4a93e <isr+0xfe>
			if (term_mode == MODE_NULL_TERM) {
   4a8a6:	4a3f      	ldr	r2, [pc, #252]	; (4a9a4 <isr+0x164>)
   4a8a8:	7812      	ldrb	r2, [r2, #0]
   4a8aa:	b16a      	cbz	r2, 4a8c8 <isr+0x88>
			LOG_WRN("Ignored null; would terminate string early.");
   4a8ac:	4a3e      	ldr	r2, [pc, #248]	; (4a9a8 <isr+0x168>)
   4a8ae:	4618      	mov	r0, r3
   4a8b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4a8b4:	493d      	ldr	r1, [pc, #244]	; (4a9ac <isr+0x16c>)
   4a8b6:	2202      	movs	r2, #2
   4a8b8:	9300      	str	r3, [sp, #0]
   4a8ba:	f00c fefc 	bl	576b6 <z_log_msg_runtime_create.constprop.0>
			return;
   4a8be:	e7cb      	b.n	4a858 <isr+0x18>
			if (term_mode == MODE_CR) {
   4a8c0:	4a38      	ldr	r2, [pc, #224]	; (4a9a4 <isr+0x164>)
   4a8c2:	7812      	ldrb	r2, [r2, #0]
   4a8c4:	2a01      	cmp	r2, #1
   4a8c6:	d130      	bne.n	4a92a <isr+0xea>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   4a8c8:	2200      	movs	r2, #0
   4a8ca:	4934      	ldr	r1, [pc, #208]	; (4a99c <isr+0x15c>)
   4a8cc:	4b38      	ldr	r3, [pc, #224]	; (4a9b0 <isr+0x170>)
   4a8ce:	680f      	ldr	r7, [r1, #0]
	at_cmd_len = 0;
   4a8d0:	600a      	str	r2, [r1, #0]
   4a8d2:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   4a8d4:	55da      	strb	r2, [r3, r7]
	inside_quotes = false;
   4a8d6:	7002      	strb	r2, [r0, #0]
		if (*c > ' ') {
   4a8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
   4a8dc:	2a20      	cmp	r2, #32
   4a8de:	d84b      	bhi.n	4a978 <isr+0x138>
		} else if (*c == '\0') {
   4a8e0:	2a00      	cmp	r2, #0
   4a8e2:	d1f9      	bne.n	4a8d8 <isr+0x98>
   4a8e4:	e7b8      	b.n	4a858 <isr+0x18>
			if (term_mode == MODE_LF) {
   4a8e6:	4a2f      	ldr	r2, [pc, #188]	; (4a9a4 <isr+0x164>)
   4a8e8:	7817      	ldrb	r7, [r2, #0]
   4a8ea:	2f02      	cmp	r7, #2
   4a8ec:	d0ec      	beq.n	4a8c8 <isr+0x88>
		if (at_cmd_len > 0) {
   4a8ee:	492b      	ldr	r1, [pc, #172]	; (4a99c <isr+0x15c>)
			if (term_mode == MODE_CR_LF &&
   4a8f0:	2f03      	cmp	r7, #3
		if (at_cmd_len > 0) {
   4a8f2:	680a      	ldr	r2, [r1, #0]
			if (term_mode == MODE_CR_LF &&
   4a8f4:	d113      	bne.n	4a91e <isr+0xde>
   4a8f6:	4f2e      	ldr	r7, [pc, #184]	; (4a9b0 <isr+0x170>)
   4a8f8:	b16a      	cbz	r2, 4a916 <isr+0xd6>
			    at_buf[at_cmd_len - 1] == '\r') {
   4a8fa:	eb07 0c02 	add.w	ip, r7, r2
			    at_cmd_len > 0 &&
   4a8fe:	f81c cc01 	ldrb.w	ip, [ip, #-1]
   4a902:	f1bc 0f0d 	cmp.w	ip, #13
   4a906:	d0df      	beq.n	4a8c8 <isr+0x88>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   4a908:	1c50      	adds	r0, r2, #1
   4a90a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   4a90e:	d21b      	bcs.n	4a948 <isr+0x108>
	at_buf[at_cmd_len] = character;
   4a910:	54bb      	strb	r3, [r7, r2]
	at_cmd_len++;
   4a912:	6008      	str	r0, [r1, #0]
	if (character == '"') {
   4a914:	e7a0      	b.n	4a858 <isr+0x18>
	at_buf[at_cmd_len] = character;
   4a916:	703b      	strb	r3, [r7, #0]
	at_cmd_len++;
   4a918:	2301      	movs	r3, #1
   4a91a:	600b      	str	r3, [r1, #0]
	if (character == '"') {
   4a91c:	e79c      	b.n	4a858 <isr+0x18>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   4a91e:	1c50      	adds	r0, r2, #1
   4a920:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   4a924:	d210      	bcs.n	4a948 <isr+0x108>
	at_buf[at_cmd_len] = character;
   4a926:	4f22      	ldr	r7, [pc, #136]	; (4a9b0 <isr+0x170>)
   4a928:	e7f2      	b.n	4a910 <isr+0xd0>
		if (at_cmd_len > 0) {
   4a92a:	4a1c      	ldr	r2, [pc, #112]	; (4a99c <isr+0x15c>)
   4a92c:	6810      	ldr	r0, [r2, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   4a92e:	1c41      	adds	r1, r0, #1
   4a930:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   4a934:	d208      	bcs.n	4a948 <isr+0x108>
	at_buf[at_cmd_len] = character;
   4a936:	4f1e      	ldr	r7, [pc, #120]	; (4a9b0 <isr+0x170>)
	at_cmd_len++;
   4a938:	6011      	str	r1, [r2, #0]
	at_buf[at_cmd_len] = character;
   4a93a:	543b      	strb	r3, [r7, r0]
	if (character == '"') {
   4a93c:	e78c      	b.n	4a858 <isr+0x18>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   4a93e:	682f      	ldr	r7, [r5, #0]
   4a940:	1c79      	adds	r1, r7, #1
   4a942:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   4a946:	d30b      	bcc.n	4a960 <isr+0x120>
	switch (character) {
   4a948:	9303      	str	r3, [sp, #12]
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   4a94a:	4b1a      	ldr	r3, [pc, #104]	; (4a9b4 <isr+0x174>)
   4a94c:	2201      	movs	r2, #1
   4a94e:	9302      	str	r3, [sp, #8]
   4a950:	2300      	movs	r3, #0
   4a952:	4916      	ldr	r1, [pc, #88]	; (4a9ac <isr+0x16c>)
   4a954:	4618      	mov	r0, r3
   4a956:	e9cd 3300 	strd	r3, r3, [sp]
   4a95a:	f00c feac 	bl	576b6 <z_log_msg_runtime_create.constprop.0>
		return;
   4a95e:	e77b      	b.n	4a858 <isr+0x18>
	at_buf[at_cmd_len] = character;
   4a960:	f8df c04c 	ldr.w	ip, [pc, #76]	; 4a9b0 <isr+0x170>
	if (character == '"') {
   4a964:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
   4a966:	f80c 3007 	strb.w	r3, [ip, r7]
	at_cmd_len++;
   4a96a:	6029      	str	r1, [r5, #0]
	if (character == '"') {
   4a96c:	f47f af74 	bne.w	4a858 <isr+0x18>
	if (!inside_quotes) {
   4a970:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
   4a974:	7002      	strb	r2, [r0, #0]
   4a976:	e76f      	b.n	4a858 <isr+0x18>
	if (at_buf[0]) {
   4a978:	780b      	ldrb	r3, [r1, #0]
   4a97a:	2b00      	cmp	r3, #0
   4a97c:	f43f af6c 	beq.w	4a858 <isr+0x18>
	const struct uart_driver_api *api =
   4a980:	480d      	ldr	r0, [pc, #52]	; (4a9b8 <isr+0x178>)
	if (api->irq_rx_disable != NULL) {
   4a982:	6883      	ldr	r3, [r0, #8]
   4a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   4a986:	b103      	cbz	r3, 4a98a <isr+0x14a>
		api->irq_rx_disable(dev);
   4a988:	4798      	blx	r3
		at_buf_busy = true;
   4a98a:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   4a98c:	490b      	ldr	r1, [pc, #44]	; (4a9bc <isr+0x17c>)
   4a98e:	480c      	ldr	r0, [pc, #48]	; (4a9c0 <isr+0x180>)
		at_buf_busy = true;
   4a990:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   4a992:	f010 f838 	bl	5aa06 <k_work_submit_to_queue>
   4a996:	e75f      	b.n	4a858 <isr+0x18>
   4a998:	2001f316 	.word	0x2001f316
   4a99c:	2001b834 	.word	0x2001b834
   4a9a0:	2001e315 	.word	0x2001e315
   4a9a4:	2001f317 	.word	0x2001f317
   4a9a8:	0005e94d 	.word	0x0005e94d
   4a9ac:	0005beac 	.word	0x0005beac
   4a9b0:	2001e316 	.word	0x2001e316
   4a9b4:	0005e979 	.word	0x0005e979
   4a9b8:	0005bbcc 	.word	0x0005bbcc
   4a9bc:	2001b838 	.word	0x2001b838
   4a9c0:	2001acc0 	.word	0x2001acc0

0004a9c4 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   4a9c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   4a9c8:	2401      	movs	r4, #1
   4a9ca:	4b45      	ldr	r3, [pc, #276]	; (4aae0 <at_host_init+0x11c>)
{
   4a9cc:	b087      	sub	sp, #28
		term_mode = mode;
   4a9ce:	701c      	strb	r4, [r3, #0]
   4a9d0:	4844      	ldr	r0, [pc, #272]	; (4aae4 <at_host_init+0x120>)
   4a9d2:	f00f fe31 	bl	5a638 <z_device_is_ready>
   4a9d6:	4603      	mov	r3, r0
	if (!device_is_ready(uart_dev)) {
   4a9d8:	b9d0      	cbnz	r0, 4aa10 <at_host_init+0x4c>
		LOG_ERR("UART device not ready");
   4a9da:	4a43      	ldr	r2, [pc, #268]	; (4aae8 <at_host_init+0x124>)
   4a9dc:	4943      	ldr	r1, [pc, #268]	; (4aaec <at_host_init+0x128>)
   4a9de:	e9cd 0201 	strd	r0, r2, [sp, #4]
   4a9e2:	9000      	str	r0, [sp, #0]
   4a9e4:	4622      	mov	r2, r4
   4a9e6:	f00c fe66 	bl	576b6 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   4a9ea:	f06f 0312 	mvn.w	r3, #18
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   4a9ee:	9303      	str	r3, [sp, #12]
   4a9f0:	4b3f      	ldr	r3, [pc, #252]	; (4aaf0 <at_host_init+0x12c>)
   4a9f2:	2201      	movs	r2, #1
   4a9f4:	9302      	str	r3, [sp, #8]
   4a9f6:	2300      	movs	r3, #0
   4a9f8:	493c      	ldr	r1, [pc, #240]	; (4aaec <at_host_init+0x128>)
   4a9fa:	4618      	mov	r0, r3
   4a9fc:	e9cd 3300 	strd	r3, r3, [sp]
   4aa00:	f00c fe59 	bl	576b6 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4aa04:	f06f 090d 	mvn.w	r9, #13
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   4aa08:	4648      	mov	r0, r9
   4aa0a:	b007      	add	sp, #28
   4aa0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_uptime_ticks();
   4aa10:	f010 f941 	bl	5ac96 <z_impl_k_uptime_ticks>
   4aa14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   4aa18:	fba0 0302 	umull	r0, r3, r0, r2
   4aa1c:	fb02 3301 	mla	r3, r2, r1, r3
	const struct uart_driver_api *api =
   4aa20:	4e30      	ldr	r6, [pc, #192]	; (4aae4 <at_host_init+0x120>)
   4aa22:	0bc0      	lsrs	r0, r0, #15
   4aa24:	68b7      	ldr	r7, [r6, #8]
			LOG_INF("UART check failed: %d. "
   4aa26:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 4ab0c <at_host_init+0x148>
   4aa2a:	ea40 4543 	orr.w	r5, r0, r3, lsl #17
	if (api->err_check == NULL) {
   4aa2e:	68bb      	ldr	r3, [r7, #8]
   4aa30:	b1b3      	cbz	r3, 4aa60 <at_host_init+0x9c>
	return api->err_check(dev);
   4aa32:	4630      	mov	r0, r6
   4aa34:	4798      	blx	r3
		if (err) {
   4aa36:	4681      	mov	r9, r0
   4aa38:	b9a0      	cbnz	r0, 4aa64 <at_host_init+0xa0>
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   4aa3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   4aa3c:	2b00      	cmp	r3, #0
   4aa3e:	d149      	bne.n	4aad4 <at_host_init+0x110>
	k_work_init(&cmd_send_work, cmd_send);
   4aa40:	492c      	ldr	r1, [pc, #176]	; (4aaf4 <at_host_init+0x130>)
   4aa42:	482d      	ldr	r0, [pc, #180]	; (4aaf8 <at_host_init+0x134>)
   4aa44:	f00f ffc2 	bl	5a9cc <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   4aa48:	2300      	movs	r3, #0
   4aa4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   4aa4e:	9300      	str	r3, [sp, #0]
   4aa50:	492a      	ldr	r1, [pc, #168]	; (4aafc <at_host_init+0x138>)
   4aa52:	230a      	movs	r3, #10
   4aa54:	482a      	ldr	r0, [pc, #168]	; (4ab00 <at_host_init+0x13c>)
   4aa56:	f007 feb1 	bl	527bc <k_work_queue_start>
   4aa5a:	f7ff feb1 	bl	4a7c0 <z_impl_uart_irq_rx_enable.constprop.0>
}
   4aa5e:	e7d3      	b.n	4aa08 <at_host_init+0x44>
		return -ENOSYS;
   4aa60:	f06f 0957 	mvn.w	r9, #87	; 0x57
   4aa64:	f010 f917 	bl	5ac96 <z_impl_k_uptime_ticks>
   4aa68:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   4aa6c:	fba0 0204 	umull	r0, r2, r0, r4
   4aa70:	fb04 2201 	mla	r2, r4, r1, r2
   4aa74:	0bc4      	lsrs	r4, r0, #15
   4aa76:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			if (k_uptime_get_32() - start_time >
   4aa7a:	1b64      	subs	r4, r4, r5
   4aa7c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   4aa80:	f04f 0300 	mov.w	r3, #0
				LOG_ERR("UART check failed: %d. "
   4aa84:	f8cd 900c 	str.w	r9, [sp, #12]
			if (k_uptime_get_32() - start_time >
   4aa88:	d90b      	bls.n	4aaa2 <at_host_init+0xde>
				LOG_ERR("UART check failed: %d. "
   4aa8a:	4a1e      	ldr	r2, [pc, #120]	; (4ab04 <at_host_init+0x140>)
   4aa8c:	4618      	mov	r0, r3
   4aa8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4aa92:	9300      	str	r3, [sp, #0]
   4aa94:	2201      	movs	r2, #1
   4aa96:	4915      	ldr	r1, [pc, #84]	; (4aaec <at_host_init+0x128>)
   4aa98:	f00c fe0d 	bl	576b6 <z_log_msg_runtime_create.constprop.0>
				return -EIO;
   4aa9c:	f06f 0304 	mvn.w	r3, #4
   4aaa0:	e7a5      	b.n	4a9ee <at_host_init+0x2a>
			LOG_INF("UART check failed: %d. "
   4aaa2:	2203      	movs	r2, #3
   4aaa4:	4618      	mov	r0, r3
   4aaa6:	e9cd 3801 	strd	r3, r8, [sp, #4]
   4aaaa:	4910      	ldr	r1, [pc, #64]	; (4aaec <at_host_init+0x128>)
   4aaac:	9300      	str	r3, [sp, #0]
   4aaae:	f00c fe02 	bl	576b6 <z_log_msg_runtime_create.constprop.0>
	if (api->fifo_read == NULL) {
   4aab2:	68b4      	ldr	r4, [r6, #8]
   4aab4:	69a3      	ldr	r3, [r4, #24]
   4aab6:	2b00      	cmp	r3, #0
   4aab8:	d0fc      	beq.n	4aab4 <at_host_init+0xf0>
	return api->fifo_read(dev, rx_data, size);
   4aaba:	2201      	movs	r2, #1
   4aabc:	4630      	mov	r0, r6
   4aabe:	f10d 0117 	add.w	r1, sp, #23
   4aac2:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   4aac4:	2800      	cmp	r0, #0
   4aac6:	d1f5      	bne.n	4aab4 <at_host_init+0xf0>
	return z_impl_k_sleep(timeout);
   4aac8:	2100      	movs	r1, #0
   4aaca:	f44f 70a4 	mov.w	r0, #328	; 0x148
   4aace:	f008 f9d9 	bl	52e84 <z_impl_k_sleep>
	} while (err);
   4aad2:	e7ac      	b.n	4aa2e <at_host_init+0x6a>
		api->irq_callback_set(dev, cb, user_data);
   4aad4:	4602      	mov	r2, r0
   4aad6:	490c      	ldr	r1, [pc, #48]	; (4ab08 <at_host_init+0x144>)
   4aad8:	4802      	ldr	r0, [pc, #8]	; (4aae4 <at_host_init+0x120>)
   4aada:	4798      	blx	r3
	if (err) {
   4aadc:	e7b0      	b.n	4aa40 <at_host_init+0x7c>
   4aade:	bf00      	nop
   4aae0:	2001f317 	.word	0x2001f317
   4aae4:	0005bbcc 	.word	0x0005bbcc
   4aae8:	0005e999 	.word	0x0005e999
   4aaec:	0005beac 	.word	0x0005beac
   4aaf0:	0005ea1a 	.word	0x0005ea1a
   4aaf4:	0004a7ed 	.word	0x0004a7ed
   4aaf8:	2001b838 	.word	0x2001b838
   4aafc:	20020a40 	.word	0x20020a40
   4ab00:	2001acc0 	.word	0x2001acc0
   4ab04:	0005e9af 	.word	0x0005e9af
   4ab08:	0004a841 	.word	0x0004a841
   4ab0c:	0005e9e5 	.word	0x0005e9e5

0004ab10 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   4ab10:	4b09      	ldr	r3, [pc, #36]	; (4ab38 <is_valid_notification_char+0x28>)
   4ab12:	5c1b      	ldrb	r3, [r3, r0]
   4ab14:	f003 0303 	and.w	r3, r3, #3
   4ab18:	2b02      	cmp	r3, #2
   4ab1a:	bf08      	it	eq
   4ab1c:	3820      	subeq	r0, #32
   4ab1e:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   4ab20:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   4ab24:	2b19      	cmp	r3, #25
   4ab26:	d904      	bls.n	4ab32 <is_valid_notification_char+0x22>
   4ab28:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   4ab2c:	4258      	negs	r0, r3
   4ab2e:	4158      	adcs	r0, r3
   4ab30:	4770      	bx	lr
		return true;
   4ab32:	2001      	movs	r0, #1
	}

	return false;
}
   4ab34:	4770      	bx	lr
   4ab36:	bf00      	nop
   4ab38:	000608c3 	.word	0x000608c3

0004ab3c <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   4ab3c:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   4ab40:	b2db      	uxtb	r3, r3
   4ab42:	2b11      	cmp	r3, #17
   4ab44:	bf9d      	ittte	ls
   4ab46:	4803      	ldrls	r0, [pc, #12]	; (4ab54 <is_separator+0x18>)
   4ab48:	40d8      	lsrls	r0, r3
   4ab4a:	f000 0001 	andls.w	r0, r0, #1
{
   4ab4e:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   4ab50:	4770      	bx	lr
   4ab52:	bf00      	nop
   4ab54:	00024001 	.word	0x00024001

0004ab58 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   4ab58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4ab5a:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   4ab5c:	2400      	movs	r4, #0
   4ab5e:	4e09      	ldr	r6, [pc, #36]	; (4ab84 <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   4ab60:	f856 7b04 	ldr.w	r7, [r6], #4
   4ab64:	4638      	mov	r0, r7
   4ab66:	f7f6 f945 	bl	40df4 <strlen>
   4ab6a:	4639      	mov	r1, r7
   4ab6c:	4602      	mov	r2, r0
   4ab6e:	4628      	mov	r0, r5
   4ab70:	f010 fb7e 	bl	5b270 <strncmp>
		if (!diff) {
   4ab74:	b120      	cbz	r0, 4ab80 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   4ab76:	3401      	adds	r4, #1
   4ab78:	2c04      	cmp	r4, #4
   4ab7a:	d1f1      	bne.n	4ab60 <is_result+0x8>
			return true;
		}
	}

	return false;
   4ab7c:	2000      	movs	r0, #0
}
   4ab7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   4ab80:	2001      	movs	r0, #1
   4ab82:	e7fc      	b.n	4ab7e <is_result+0x26>
   4ab84:	0005c460 	.word	0x0005c460

0004ab88 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   4ab88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   4ab8c:	6804      	ldr	r4, [r0, #0]
{
   4ab8e:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4ab90:	7823      	ldrb	r3, [r4, #0]
   4ab92:	4680      	mov	r8, r0
   4ab94:	460e      	mov	r6, r1
   4ab96:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   4ab98:	9400      	str	r4, [sp, #0]
   4ab9a:	2b00      	cmp	r3, #0
   4ab9c:	f000 80cd 	beq.w	4ad3a <at_parse_process_element+0x1b2>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   4aba0:	4b67      	ldr	r3, [pc, #412]	; (4ad40 <at_parse_process_element+0x1b8>)
   4aba2:	781b      	ldrb	r3, [r3, #0]
   4aba4:	2b06      	cmp	r3, #6
   4aba6:	d113      	bne.n	4abd0 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   4aba8:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   4abaa:	1c62      	adds	r2, r4, #1
   4abac:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   4abae:	4611      	mov	r1, r2
   4abb0:	4607      	mov	r7, r0
   4abb2:	f812 0b01 	ldrb.w	r0, [r2], #1
   4abb6:	f7ff ffab 	bl	4ab10 <is_valid_notification_char>
   4abba:	2800      	cmp	r0, #0
   4abbc:	d1f7      	bne.n	4abae <at_parse_process_element+0x26>
   4abbe:	b107      	cbz	r7, 4abc2 <at_parse_process_element+0x3a>
   4abc0:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   4abc2:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   4abc4:	4622      	mov	r2, r4
   4abc6:	4631      	mov	r1, r6
   4abc8:	4628      	mov	r0, r5
   4abca:	f00c fe15 	bl	577f8 <at_params_string_put>
   4abce:	e046      	b.n	4ac5e <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   4abd0:	3b01      	subs	r3, #1
   4abd2:	2b08      	cmp	r3, #8
   4abd4:	d843      	bhi.n	4ac5e <at_parse_process_element+0xd6>
   4abd6:	e8df f003 	tbb	[pc, r3]
   4abda:	4964      	.short	0x4964
   4abdc:	420da05a 	.word	0x420da05a
   4abe0:	3f1c      	.short	0x3f1c
   4abe2:	05          	.byte	0x05
   4abe3:	00          	.byte	0x00
   4abe4:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   4abe6:	2100      	movs	r1, #0
   4abe8:	4613      	mov	r3, r2
   4abea:	f812 0b01 	ldrb.w	r0, [r2], #1
   4abee:	b160      	cbz	r0, 4ac0a <at_parse_process_element+0x82>
   4abf0:	2101      	movs	r1, #1
   4abf2:	e7f9      	b.n	4abe8 <at_parse_process_element+0x60>
   4abf4:	4622      	mov	r2, r4
   4abf6:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   4abf8:	4f52      	ldr	r7, [pc, #328]	; (4ad44 <at_parse_process_element+0x1bc>)
   4abfa:	4613      	mov	r3, r2
   4abfc:	f812 0b01 	ldrb.w	r0, [r2], #1
   4ac00:	5c38      	ldrb	r0, [r7, r0]
   4ac02:	f010 0f44 	tst.w	r0, #68	; 0x44
   4ac06:	f040 8096 	bne.w	4ad36 <at_parse_process_element+0x1ae>
   4ac0a:	b101      	cbz	r1, 4ac0e <at_parse_process_element+0x86>
   4ac0c:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   4ac0e:	1b1b      	subs	r3, r3, r4
   4ac10:	e7d8      	b.n	4abc4 <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   4ac12:	4668      	mov	r0, sp
   4ac14:	f00c fd67 	bl	576e6 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   4ac18:	2200      	movs	r2, #0
   4ac1a:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   4ac1c:	4849      	ldr	r0, [pc, #292]	; (4ad44 <at_parse_process_element+0x1bc>)
   4ac1e:	461f      	mov	r7, r3
   4ac20:	f813 1b01 	ldrb.w	r1, [r3], #1
   4ac24:	5c41      	ldrb	r1, [r0, r1]
   4ac26:	0749      	lsls	r1, r1, #29
   4ac28:	d110      	bne.n	4ac4c <at_parse_process_element+0xc4>
   4ac2a:	b102      	cbz	r2, 4ac2e <at_parse_process_element+0xa6>
   4ac2c:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   4ac2e:	1b3b      	subs	r3, r7, r4
   4ac30:	4622      	mov	r2, r4
   4ac32:	4631      	mov	r1, r6
   4ac34:	4628      	mov	r0, r5
   4ac36:	f00c fddf 	bl	577f8 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   4ac3a:	783b      	ldrb	r3, [r7, #0]
   4ac3c:	2b3d      	cmp	r3, #61	; 0x3d
   4ac3e:	d107      	bne.n	4ac50 <at_parse_process_element+0xc8>
   4ac40:	787b      	ldrb	r3, [r7, #1]
   4ac42:	2b3f      	cmp	r3, #63	; 0x3f
   4ac44:	d10b      	bne.n	4ac5e <at_parse_process_element+0xd6>
			tmpstr += 2;
   4ac46:	3702      	adds	r7, #2
		tmpstr++;
   4ac48:	9700      	str	r7, [sp, #0]
   4ac4a:	e008      	b.n	4ac5e <at_parse_process_element+0xd6>
   4ac4c:	2201      	movs	r2, #1
   4ac4e:	e7e6      	b.n	4ac1e <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   4ac50:	2b3f      	cmp	r3, #63	; 0x3f
   4ac52:	d104      	bne.n	4ac5e <at_parse_process_element+0xd6>
			tmpstr++;
   4ac54:	3701      	adds	r7, #1
   4ac56:	e7f7      	b.n	4ac48 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   4ac58:	4628      	mov	r0, r5
   4ac5a:	f00c fda3 	bl	577a4 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   4ac5e:	2000      	movs	r0, #0
	*str = tmpstr;
   4ac60:	9b00      	ldr	r3, [sp, #0]
   4ac62:	f8c8 3000 	str.w	r3, [r8]
}
   4ac66:	b023      	add	sp, #140	; 0x8c
   4ac68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   4ac6c:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   4ac6e:	783a      	ldrb	r2, [r7, #0]
   4ac70:	4610      	mov	r0, r2
   4ac72:	f00c fd2f 	bl	576d4 <is_lfcr>
   4ac76:	463b      	mov	r3, r7
			tmpstr++;
   4ac78:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   4ac7a:	b908      	cbnz	r0, 4ac80 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4ac7c:	2a00      	cmp	r2, #0
   4ac7e:	d1f6      	bne.n	4ac6e <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   4ac80:	4622      	mov	r2, r4
   4ac82:	4631      	mov	r1, r6
   4ac84:	4628      	mov	r0, r5
   4ac86:	1b1b      	subs	r3, r3, r4
   4ac88:	f00c fdb6 	bl	577f8 <at_params_string_put>
   4ac8c:	e7dc      	b.n	4ac48 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   4ac8e:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   4ac90:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   4ac92:	463b      	mov	r3, r7
   4ac94:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   4ac96:	f107 0701 	add.w	r7, r7, #1
   4ac9a:	d0f1      	beq.n	4ac80 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4ac9c:	2a00      	cmp	r2, #0
   4ac9e:	d1f7      	bne.n	4ac90 <at_parse_process_element+0x108>
   4aca0:	e7ee      	b.n	4ac80 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   4aca2:	4620      	mov	r0, r4
   4aca4:	220a      	movs	r2, #10
   4aca6:	a901      	add	r1, sp, #4
   4aca8:	f009 f922 	bl	53ef0 <strtoul>
   4acac:	2401      	movs	r4, #1
		tmpstr = next;
   4acae:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   4acb0:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   4acb2:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   4acb4:	9b00      	ldr	r3, [sp, #0]
   4acb6:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   4acb8:	2829      	cmp	r0, #41	; 0x29
   4acba:	d023      	beq.n	4ad04 <at_parse_process_element+0x17c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4acbc:	b310      	cbz	r0, 4ad04 <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   4acbe:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   4acc2:	f7ff ff3b 	bl	4ab3c <is_separator>
				tmparray[i++] =
   4acc6:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   4acca:	b908      	cbnz	r0, 4acd0 <at_parse_process_element+0x148>
					tmpstr = next;
   4accc:	4627      	mov	r7, r4
   4acce:	e017      	b.n	4ad00 <at_parse_process_element+0x178>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   4acd0:	220a      	movs	r2, #10
   4acd2:	a901      	add	r1, sp, #4
   4acd4:	4648      	mov	r0, r9
   4acd6:	f009 f90b 	bl	53ef0 <strtoul>
				tmparray[i++] =
   4acda:	ab22      	add	r3, sp, #136	; 0x88
   4acdc:	1c67      	adds	r7, r4, #1
   4acde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   4ace2:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   4ace6:	4648      	mov	r0, r9
   4ace8:	f7f6 f884 	bl	40df4 <strlen>
   4acec:	4604      	mov	r4, r0
   4acee:	9801      	ldr	r0, [sp, #4]
   4acf0:	f7f6 f880 	bl	40df4 <strlen>
   4acf4:	4284      	cmp	r4, r0
   4acf6:	d006      	beq.n	4ad06 <at_parse_process_element+0x17e>
					tmpstr = next;
   4acf8:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   4acfa:	2f20      	cmp	r7, #32
					tmpstr = next;
   4acfc:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   4acfe:	d002      	beq.n	4ad06 <at_parse_process_element+0x17e>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   4ad00:	463c      	mov	r4, r7
   4ad02:	e7d7      	b.n	4acb4 <at_parse_process_element+0x12c>
   4ad04:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   4ad06:	00bb      	lsls	r3, r7, #2
   4ad08:	4631      	mov	r1, r6
   4ad0a:	4628      	mov	r0, r5
   4ad0c:	aa02      	add	r2, sp, #8
   4ad0e:	f00c fd96 	bl	5783e <at_params_array_put>
		tmpstr++;
   4ad12:	9b00      	ldr	r3, [sp, #0]
   4ad14:	3301      	adds	r3, #1
   4ad16:	9300      	str	r3, [sp, #0]
   4ad18:	e7a1      	b.n	4ac5e <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   4ad1a:	220a      	movs	r2, #10
   4ad1c:	4620      	mov	r0, r4
   4ad1e:	a902      	add	r1, sp, #8
   4ad20:	f009 f86a 	bl	53df8 <strtoll>
   4ad24:	460b      	mov	r3, r1
		tmpstr = next;
   4ad26:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   4ad28:	4602      	mov	r2, r0
		tmpstr = next;
   4ad2a:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   4ad2c:	4628      	mov	r0, r5
   4ad2e:	4631      	mov	r1, r6
   4ad30:	f00c fd4d 	bl	577ce <at_params_int_put>
   4ad34:	e793      	b.n	4ac5e <at_parse_process_element+0xd6>
   4ad36:	2101      	movs	r1, #1
   4ad38:	e75f      	b.n	4abfa <at_parse_process_element+0x72>
		return -1;
   4ad3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4ad3e:	e792      	b.n	4ac66 <at_parse_process_element+0xde>
   4ad40:	2001f319 	.word	0x2001f319
   4ad44:	000608c3 	.word	0x000608c3

0004ad48 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   4ad48:	b510      	push	{r4, lr}
   4ad4a:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   4ad4c:	f7f6 f852 	bl	40df4 <strlen>
   4ad50:	2801      	cmp	r0, #1
   4ad52:	d921      	bls.n	4ad98 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   4ad54:	7823      	ldrb	r3, [r4, #0]
   4ad56:	4912      	ldr	r1, [pc, #72]	; (4ada0 <is_command+0x58>)
   4ad58:	5cca      	ldrb	r2, [r1, r3]
   4ad5a:	f002 0203 	and.w	r2, r2, #3
   4ad5e:	2a02      	cmp	r2, #2
   4ad60:	bf08      	it	eq
   4ad62:	3b20      	subeq	r3, #32
   4ad64:	2b41      	cmp	r3, #65	; 0x41
   4ad66:	d117      	bne.n	4ad98 <is_command+0x50>
   4ad68:	7863      	ldrb	r3, [r4, #1]
   4ad6a:	5cca      	ldrb	r2, [r1, r3]
   4ad6c:	f002 0203 	and.w	r2, r2, #3
   4ad70:	2a02      	cmp	r2, #2
   4ad72:	bf08      	it	eq
   4ad74:	3b20      	subeq	r3, #32
   4ad76:	2b54      	cmp	r3, #84	; 0x54
   4ad78:	d10e      	bne.n	4ad98 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   4ad7a:	78a2      	ldrb	r2, [r4, #2]
   4ad7c:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   4ad80:	2b23      	cmp	r3, #35	; 0x23
   4ad82:	d00b      	beq.n	4ad9c <is_command+0x54>
   4ad84:	2a25      	cmp	r2, #37	; 0x25
   4ad86:	d009      	beq.n	4ad9c <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   4ad88:	4610      	mov	r0, r2
   4ad8a:	f00c fca3 	bl	576d4 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   4ad8e:	b910      	cbnz	r0, 4ad96 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4ad90:	fab2 f082 	clz	r0, r2
   4ad94:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   4ad96:	bd10      	pop	{r4, pc}
		return false;
   4ad98:	2000      	movs	r0, #0
   4ad9a:	e7fc      	b.n	4ad96 <is_command+0x4e>
		return true;
   4ad9c:	2001      	movs	r0, #1
   4ad9e:	e7fa      	b.n	4ad96 <is_command+0x4e>
   4ada0:	000608c3 	.word	0x000608c3

0004ada4 <at_parse_detect_type>:
{
   4ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4ada6:	4606      	mov	r6, r0
	const char *tmpstr = *str;
   4ada8:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   4adaa:	4f65      	ldr	r7, [pc, #404]	; (4af40 <at_parse_detect_type+0x19c>)
   4adac:	2900      	cmp	r1, #0
   4adae:	d137      	bne.n	4ae20 <at_parse_detect_type+0x7c>
   4adb0:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   4adb2:	4d64      	ldr	r5, [pc, #400]	; (4af44 <at_parse_detect_type+0x1a0>)
   4adb4:	2b2b      	cmp	r3, #43	; 0x2b
   4adb6:	d001      	beq.n	4adbc <at_parse_detect_type+0x18>
   4adb8:	2b25      	cmp	r3, #37	; 0x25
   4adba:	d170      	bne.n	4ae9e <at_parse_detect_type+0xfa>
	state = new_state;
   4adbc:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   4adbe:	2205      	movs	r2, #5
   4adc0:	4620      	mov	r0, r4
   4adc2:	4961      	ldr	r1, [pc, #388]	; (4af48 <at_parse_detect_type+0x1a4>)
	state = new_state;
   4adc4:	702b      	strb	r3, [r5, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   4adc6:	f010 fa53 	bl	5b270 <strncmp>
   4adca:	b920      	cbnz	r0, 4add6 <at_parse_detect_type+0x32>
			retval = true;
   4adcc:	2301      	movs	r3, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   4adce:	703b      	strb	r3, [r7, #0]
	return 0;
   4add0:	2000      	movs	r0, #0
	*str = tmpstr;
   4add2:	6034      	str	r4, [r6, #0]
	return 0;
   4add4:	e062      	b.n	4ae9c <at_parse_detect_type+0xf8>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   4add6:	2205      	movs	r2, #5
   4add8:	4620      	mov	r0, r4
   4adda:	495c      	ldr	r1, [pc, #368]	; (4af4c <at_parse_detect_type+0x1a8>)
   4addc:	f010 fa48 	bl	5b270 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   4ade0:	2800      	cmp	r0, #0
   4ade2:	d0f3      	beq.n	4adcc <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   4ade4:	220b      	movs	r2, #11
   4ade6:	4620      	mov	r0, r4
   4ade8:	4959      	ldr	r1, [pc, #356]	; (4af50 <at_parse_detect_type+0x1ac>)
   4adea:	f010 fa41 	bl	5b270 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   4adee:	2800      	cmp	r0, #0
   4adf0:	d0ec      	beq.n	4adcc <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   4adf2:	220a      	movs	r2, #10
   4adf4:	4620      	mov	r0, r4
   4adf6:	4957      	ldr	r1, [pc, #348]	; (4af54 <at_parse_detect_type+0x1b0>)
   4adf8:	f010 fa3a 	bl	5b270 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   4adfc:	2800      	cmp	r0, #0
   4adfe:	d0e5      	beq.n	4adcc <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   4ae00:	220b      	movs	r2, #11
   4ae02:	4620      	mov	r0, r4
   4ae04:	4954      	ldr	r1, [pc, #336]	; (4af58 <at_parse_detect_type+0x1b4>)
   4ae06:	f010 fa33 	bl	5b270 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   4ae0a:	2800      	cmp	r0, #0
   4ae0c:	d0de      	beq.n	4adcc <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   4ae0e:	2207      	movs	r2, #7
   4ae10:	4620      	mov	r0, r4
   4ae12:	4952      	ldr	r1, [pc, #328]	; (4af5c <at_parse_detect_type+0x1b8>)
   4ae14:	f010 fa2c 	bl	5b270 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   4ae18:	fab0 f380 	clz	r3, r0
   4ae1c:	095b      	lsrs	r3, r3, #5
   4ae1e:	e7d6      	b.n	4adce <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   4ae20:	783b      	ldrb	r3, [r7, #0]
   4ae22:	2b00      	cmp	r3, #0
   4ae24:	d13d      	bne.n	4aea2 <at_parse_detect_type+0xfe>
	} else if ((index > 0) && is_clac(tmpstr)) {
   4ae26:	2900      	cmp	r1, #0
   4ae28:	dd51      	ble.n	4aece <at_parse_detect_type+0x12a>
   4ae2a:	4622      	mov	r2, r4
   4ae2c:	4615      	mov	r5, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   4ae2e:	f812 0b01 	ldrb.w	r0, [r2], #1
   4ae32:	f00c fc4f 	bl	576d4 <is_lfcr>
   4ae36:	2800      	cmp	r0, #0
   4ae38:	d1f8      	bne.n	4ae2c <at_parse_detect_type+0x88>
		str++;
	}

	if (strlen(str) < 4) {
   4ae3a:	4628      	mov	r0, r5
   4ae3c:	f7f5 ffda 	bl	40df4 <strlen>
   4ae40:	2803      	cmp	r0, #3
   4ae42:	d932      	bls.n	4aeaa <at_parse_detect_type+0x106>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   4ae44:	782b      	ldrb	r3, [r5, #0]
   4ae46:	4a46      	ldr	r2, [pc, #280]	; (4af60 <at_parse_detect_type+0x1bc>)
   4ae48:	5cd1      	ldrb	r1, [r2, r3]
   4ae4a:	f001 0103 	and.w	r1, r1, #3
   4ae4e:	2902      	cmp	r1, #2
   4ae50:	bf08      	it	eq
   4ae52:	3b20      	subeq	r3, #32
   4ae54:	2b41      	cmp	r3, #65	; 0x41
   4ae56:	d128      	bne.n	4aeaa <at_parse_detect_type+0x106>
   4ae58:	786b      	ldrb	r3, [r5, #1]
   4ae5a:	5cd1      	ldrb	r1, [r2, r3]
   4ae5c:	f001 0103 	and.w	r1, r1, #3
   4ae60:	2902      	cmp	r1, #2
   4ae62:	bf08      	it	eq
   4ae64:	3b20      	subeq	r3, #32
   4ae66:	2b54      	cmp	r3, #84	; 0x54
   4ae68:	d11f      	bne.n	4aeaa <at_parse_detect_type+0x106>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   4ae6a:	78ab      	ldrb	r3, [r5, #2]
   4ae6c:	5cd1      	ldrb	r1, [r2, r3]
   4ae6e:	f001 0103 	and.w	r1, r1, #3
   4ae72:	2902      	cmp	r1, #2
   4ae74:	bf08      	it	eq
   4ae76:	3b20      	subeq	r3, #32
   4ae78:	2b2b      	cmp	r3, #43	; 0x2b
   4ae7a:	d00a      	beq.n	4ae92 <at_parse_detect_type+0xee>
   4ae7c:	2b25      	cmp	r3, #37	; 0x25
   4ae7e:	d114      	bne.n	4aeaa <at_parse_detect_type+0x106>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   4ae80:	78eb      	ldrb	r3, [r5, #3]
   4ae82:	5cd2      	ldrb	r2, [r2, r3]
   4ae84:	f002 0203 	and.w	r2, r2, #3
   4ae88:	2a02      	cmp	r2, #2
   4ae8a:	bf08      	it	eq
   4ae8c:	3b20      	subeq	r3, #32
   4ae8e:	2b58      	cmp	r3, #88	; 0x58
   4ae90:	d00b      	beq.n	4aeaa <at_parse_detect_type+0x106>
	state = new_state;
   4ae92:	2209      	movs	r2, #9
		return -2;
   4ae94:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   4ae98:	4b2a      	ldr	r3, [pc, #168]	; (4af44 <at_parse_detect_type+0x1a0>)
   4ae9a:	701a      	strb	r2, [r3, #0]
}
   4ae9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (set_type_string) {
   4ae9e:	783b      	ldrb	r3, [r7, #0]
   4aea0:	b153      	cbz	r3, 4aeb8 <at_parse_detect_type+0x114>
	state = new_state;
   4aea2:	2202      	movs	r2, #2
   4aea4:	4b27      	ldr	r3, [pc, #156]	; (4af44 <at_parse_detect_type+0x1a0>)
   4aea6:	701a      	strb	r2, [r3, #0]
}
   4aea8:	e792      	b.n	4add0 <at_parse_detect_type+0x2c>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   4aeaa:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   4aeac:	2b2b      	cmp	r3, #43	; 0x2b
   4aeae:	d10c      	bne.n	4aeca <at_parse_detect_type+0x126>
		return -1;
   4aeb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		*str = tmpstr;
   4aeb4:	6034      	str	r4, [r6, #0]
   4aeb6:	e7f1      	b.n	4ae9c <at_parse_detect_type+0xf8>
	} else if ((index == 0) && is_command(tmpstr)) {
   4aeb8:	4620      	mov	r0, r4
   4aeba:	f7ff ff45 	bl	4ad48 <is_command>
   4aebe:	b110      	cbz	r0, 4aec6 <at_parse_detect_type+0x122>
	state = new_state;
   4aec0:	2307      	movs	r3, #7
   4aec2:	702b      	strb	r3, [r5, #0]
}
   4aec4:	e784      	b.n	4add0 <at_parse_detect_type+0x2c>
	state = new_state;
   4aec6:	2302      	movs	r3, #2
   4aec8:	e7fb      	b.n	4aec2 <at_parse_detect_type+0x11e>
   4aeca:	2b25      	cmp	r3, #37	; 0x25
   4aecc:	d0f0      	beq.n	4aeb0 <at_parse_detect_type+0x10c>
	} else if (is_number(*tmpstr)) {
   4aece:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   4aed0:	4b23      	ldr	r3, [pc, #140]	; (4af60 <at_parse_detect_type+0x1bc>)
   4aed2:	5c9b      	ldrb	r3, [r3, r2]
   4aed4:	075b      	lsls	r3, r3, #29
   4aed6:	d40a      	bmi.n	4aeee <at_parse_detect_type+0x14a>
   4aed8:	2a2d      	cmp	r2, #45	; 0x2d
   4aeda:	d008      	beq.n	4aeee <at_parse_detect_type+0x14a>
   4aedc:	2a2b      	cmp	r2, #43	; 0x2b
   4aede:	d006      	beq.n	4aeee <at_parse_detect_type+0x14a>
	if (chr == '"') {
   4aee0:	2a22      	cmp	r2, #34	; 0x22
   4aee2:	d107      	bne.n	4aef4 <at_parse_detect_type+0x150>
	state = new_state;
   4aee4:	2203      	movs	r2, #3
   4aee6:	4b17      	ldr	r3, [pc, #92]	; (4af44 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   4aee8:	3401      	adds	r4, #1
	state = new_state;
   4aeea:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   4aeec:	e770      	b.n	4add0 <at_parse_detect_type+0x2c>
	state = new_state;
   4aeee:	2204      	movs	r2, #4
   4aef0:	4b14      	ldr	r3, [pc, #80]	; (4af44 <at_parse_detect_type+0x1a0>)
   4aef2:	e7d8      	b.n	4aea6 <at_parse_detect_type+0x102>
	if (chr == '(') {
   4aef4:	2a28      	cmp	r2, #40	; 0x28
   4aef6:	d104      	bne.n	4af02 <at_parse_detect_type+0x15e>
   4aef8:	2201      	movs	r2, #1
   4aefa:	4b12      	ldr	r3, [pc, #72]	; (4af44 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   4aefc:	4414      	add	r4, r2
	state = new_state;
   4aefe:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   4af00:	e766      	b.n	4add0 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   4af02:	4610      	mov	r0, r2
   4af04:	f00c fbe6 	bl	576d4 <is_lfcr>
   4af08:	b188      	cbz	r0, 4af2e <at_parse_detect_type+0x18a>
   4af0a:	490e      	ldr	r1, [pc, #56]	; (4af44 <at_parse_detect_type+0x1a0>)
   4af0c:	780b      	ldrb	r3, [r1, #0]
   4af0e:	2b04      	cmp	r3, #4
   4af10:	d10a      	bne.n	4af28 <at_parse_detect_type+0x184>
   4af12:	4622      	mov	r2, r4
   4af14:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   4af16:	f812 0b01 	ldrb.w	r0, [r2], #1
   4af1a:	f00c fbdb 	bl	576d4 <is_lfcr>
   4af1e:	2800      	cmp	r0, #0
   4af20:	d1f8      	bne.n	4af14 <at_parse_detect_type+0x170>
	state = new_state;
   4af22:	2305      	movs	r3, #5
   4af24:	700b      	strb	r3, [r1, #0]
}
   4af26:	e753      	b.n	4add0 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   4af28:	2b08      	cmp	r3, #8
   4af2a:	f43f af51 	beq.w	4add0 <at_parse_detect_type+0x2c>
	} else if (is_separator(*tmpstr)) {
   4af2e:	4610      	mov	r0, r2
   4af30:	f7ff fe04 	bl	4ab3c <is_separator>
   4af34:	2800      	cmp	r0, #0
   4af36:	d0bb      	beq.n	4aeb0 <at_parse_detect_type+0x10c>
	state = new_state;
   4af38:	2208      	movs	r2, #8
   4af3a:	4b02      	ldr	r3, [pc, #8]	; (4af44 <at_parse_detect_type+0x1a0>)
   4af3c:	e7b3      	b.n	4aea6 <at_parse_detect_type+0x102>
   4af3e:	bf00      	nop
   4af40:	2001f318 	.word	0x2001f318
   4af44:	2001f319 	.word	0x2001f319
   4af48:	0005ea44 	.word	0x0005ea44
   4af4c:	0005ea4a 	.word	0x0005ea4a
   4af50:	0005ea50 	.word	0x0005ea50
   4af54:	0005ea5c 	.word	0x0005ea5c
   4af58:	0005ea67 	.word	0x0005ea67
   4af5c:	0005ea73 	.word	0x0005ea73
   4af60:	000608c3 	.word	0x000608c3

0004af64 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   4af64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4af68:	4689      	mov	r9, r1
   4af6a:	4616      	mov	r6, r2
   4af6c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   4af6e:	4680      	mov	r8, r0
   4af70:	2800      	cmp	r0, #0
   4af72:	f000 808d 	beq.w	4b090 <at_parser_max_params_from_str+0x12c>
   4af76:	2a00      	cmp	r2, #0
   4af78:	f000 808a 	beq.w	4b090 <at_parser_max_params_from_str+0x12c>
   4af7c:	6853      	ldr	r3, [r2, #4]
   4af7e:	2b00      	cmp	r3, #0
   4af80:	f000 8086 	beq.w	4b090 <at_parser_max_params_from_str+0x12c>
	state = IDLE;
   4af84:	2500      	movs	r5, #0
	int index = 0;
   4af86:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   4af88:	4610      	mov	r0, r2
   4af8a:	f00c fbe6 	bl	5775a <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   4af8e:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   4af90:	f8df a10c 	ldr.w	sl, [pc, #268]	; 4b0a0 <at_parser_max_params_from_str+0x13c>
	max_params_count = MIN(max_params_count, list->param_count);
   4af94:	429f      	cmp	r7, r3
   4af96:	bf28      	it	cs
   4af98:	461f      	movcs	r7, r3
	state = IDLE;
   4af9a:	4b3f      	ldr	r3, [pc, #252]	; (4b098 <at_parser_max_params_from_str+0x134>)
	const char *str = *at_params_str;
   4af9c:	f8cd 8004 	str.w	r8, [sp, #4]
	state = IDLE;
   4afa0:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   4afa2:	4b3e      	ldr	r3, [pc, #248]	; (4b09c <at_parser_max_params_from_str+0x138>)
   4afa4:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   4afa6:	9b01      	ldr	r3, [sp, #4]
   4afa8:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4afaa:	2a00      	cmp	r2, #0
   4afac:	d048      	beq.n	4b040 <at_parser_max_params_from_str+0xdc>
   4afae:	42a7      	cmp	r7, r4
   4afb0:	d946      	bls.n	4b040 <at_parser_max_params_from_str+0xdc>
		if (isspace((int)*str)) {
   4afb2:	f81a 2002 	ldrb.w	r2, [sl, r2]
		ret = at_parse_detect_type(&str, index);
   4afb6:	4621      	mov	r1, r4
		if (isspace((int)*str)) {
   4afb8:	0712      	lsls	r2, r2, #28
			str++;
   4afba:	bf48      	it	mi
   4afbc:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   4afbe:	a801      	add	r0, sp, #4
			str++;
   4afc0:	bf48      	it	mi
   4afc2:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   4afc4:	f7ff feee 	bl	4ada4 <at_parse_detect_type>
		if (ret == -1) {
   4afc8:	1c43      	adds	r3, r0, #1
   4afca:	d039      	beq.n	4b040 <at_parser_max_params_from_str+0xdc>
		if (ret == -2) {
   4afcc:	3002      	adds	r0, #2
			index = 0;
   4afce:	bf08      	it	eq
   4afd0:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   4afd2:	4632      	mov	r2, r6
   4afd4:	4621      	mov	r1, r4
   4afd6:	a801      	add	r0, sp, #4
			str = *at_params_str;
   4afd8:	bf08      	it	eq
   4afda:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   4afde:	f7ff fdd3 	bl	4ab88 <at_parse_process_element>
   4afe2:	3001      	adds	r0, #1
   4afe4:	d02c      	beq.n	4b040 <at_parser_max_params_from_str+0xdc>
		if (is_separator(*str)) {
   4afe6:	9a01      	ldr	r2, [sp, #4]
   4afe8:	7810      	ldrb	r0, [r2, #0]
   4afea:	f7ff fda7 	bl	4ab3c <is_separator>
   4afee:	b1b0      	cbz	r0, 4b01e <at_parser_max_params_from_str+0xba>
			if (is_lfcr(*(str + 1))) {
   4aff0:	7850      	ldrb	r0, [r2, #1]
   4aff2:	f00c fb6f 	bl	576d4 <is_lfcr>
   4aff6:	b178      	cbz	r0, 4b018 <at_parser_max_params_from_str+0xb4>
				index++;
   4aff8:	3401      	adds	r4, #1
				if (index == max_params) {
   4affa:	42bc      	cmp	r4, r7
   4affc:	d03b      	beq.n	4b076 <at_parser_max_params_from_str+0x112>
				if (at_parse_detect_type(&str, index) == -1) {
   4affe:	4621      	mov	r1, r4
   4b000:	a801      	add	r0, sp, #4
   4b002:	f7ff fecf 	bl	4ada4 <at_parse_detect_type>
   4b006:	3001      	adds	r0, #1
   4b008:	d01a      	beq.n	4b040 <at_parser_max_params_from_str+0xdc>
				if (at_parse_process_element(&str, index,
   4b00a:	4632      	mov	r2, r6
   4b00c:	4621      	mov	r1, r4
   4b00e:	a801      	add	r0, sp, #4
   4b010:	f7ff fdba 	bl	4ab88 <at_parse_process_element>
   4b014:	3001      	adds	r0, #1
   4b016:	d013      	beq.n	4b040 <at_parser_max_params_from_str+0xdc>
			str++;
   4b018:	9b01      	ldr	r3, [sp, #4]
   4b01a:	3301      	adds	r3, #1
   4b01c:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   4b01e:	9a01      	ldr	r2, [sp, #4]
   4b020:	7810      	ldrb	r0, [r2, #0]
   4b022:	f00c fb57 	bl	576d4 <is_lfcr>
   4b026:	b308      	cbz	r0, 4b06c <at_parser_max_params_from_str+0x108>
   4b028:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   4b02a:	7811      	ldrb	r1, [r2, #0]
   4b02c:	4693      	mov	fp, r2
   4b02e:	4608      	mov	r0, r1
   4b030:	3201      	adds	r2, #1
   4b032:	f00c fb4f 	bl	576d4 <is_lfcr>
   4b036:	2800      	cmp	r0, #0
   4b038:	d1f7      	bne.n	4b02a <at_parser_max_params_from_str+0xc6>
   4b03a:	b971      	cbnz	r1, 4b05a <at_parser_max_params_from_str+0xf6>
				str += i;
   4b03c:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   4b040:	9c01      	ldr	r4, [sp, #4]
	if (oversized) {
   4b042:	bb15      	cbnz	r5, 4b08a <at_parser_max_params_from_str+0x126>
   4b044:	7823      	ldrb	r3, [r4, #0]
   4b046:	b9c3      	cbnz	r3, 4b07a <at_parser_max_params_from_str+0x116>
	return 0;
   4b048:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   4b04a:	f1b9 0f00 	cmp.w	r9, #0
   4b04e:	d001      	beq.n	4b054 <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   4b050:	f8c9 4000 	str.w	r4, [r9]
	}

	return err;
}
   4b054:	b003      	add	sp, #12
   4b056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   4b05a:	292b      	cmp	r1, #43	; 0x2b
   4b05c:	d0ee      	beq.n	4b03c <at_parser_max_params_from_str+0xd8>
   4b05e:	2925      	cmp	r1, #37	; 0x25
   4b060:	d0ec      	beq.n	4b03c <at_parser_max_params_from_str+0xd8>
			    is_result(str + i)) {
   4b062:	4658      	mov	r0, fp
   4b064:	f7ff fd78 	bl	4ab58 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   4b068:	2800      	cmp	r0, #0
   4b06a:	d1e7      	bne.n	4b03c <at_parser_max_params_from_str+0xd8>
		index++;
   4b06c:	3401      	adds	r4, #1
			oversized = true;
   4b06e:	42bc      	cmp	r4, r7
   4b070:	bf08      	it	eq
   4b072:	2501      	moveq	r5, #1
   4b074:	e797      	b.n	4afa6 <at_parser_max_params_from_str+0x42>
					oversized = true;
   4b076:	4605      	mov	r5, r0
   4b078:	e7e2      	b.n	4b040 <at_parser_max_params_from_str+0xdc>
	if (!is_terminated(*str) && !is_result(str)) {
   4b07a:	4620      	mov	r0, r4
   4b07c:	f7ff fd6c 	bl	4ab58 <is_result>
   4b080:	2800      	cmp	r0, #0
   4b082:	d1e1      	bne.n	4b048 <at_parser_max_params_from_str+0xe4>
		return -EAGAIN;
   4b084:	f06f 000a 	mvn.w	r0, #10
   4b088:	e7df      	b.n	4b04a <at_parser_max_params_from_str+0xe6>
		return -E2BIG;
   4b08a:	f06f 0006 	mvn.w	r0, #6
   4b08e:	e7dc      	b.n	4b04a <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   4b090:	f06f 0015 	mvn.w	r0, #21
   4b094:	e7de      	b.n	4b054 <at_parser_max_params_from_str+0xf0>
   4b096:	bf00      	nop
   4b098:	2001f319 	.word	0x2001f319
   4b09c:	2001f318 	.word	0x2001f318
   4b0a0:	000608c3 	.word	0x000608c3

0004b0a4 <enable_notifications>:

	event_handler_list_dispatch(&evt);
}

static int enable_notifications(void)
{
   4b0a4:	b530      	push	{r4, r5, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   4b0a6:	4825      	ldr	r0, [pc, #148]	; (4b13c <enable_notifications+0x98>)
{
   4b0a8:	b093      	sub	sp, #76	; 0x4c
	err = nrf_modem_at_printf(AT_CEREG_5);
   4b0aa:	f006 fa2f 	bl	5150c <nrf_modem_at_printf>
	if (err) {
   4b0ae:	4604      	mov	r4, r0
   4b0b0:	b178      	cbz	r0, 4b0d2 <enable_notifications+0x2e>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   4b0b2:	4b23      	ldr	r3, [pc, #140]	; (4b140 <enable_notifications+0x9c>)
   4b0b4:	9003      	str	r0, [sp, #12]
   4b0b6:	9302      	str	r3, [sp, #8]
   4b0b8:	2300      	movs	r3, #0
   4b0ba:	2201      	movs	r2, #1
   4b0bc:	4618      	mov	r0, r3
   4b0be:	e9cd 3300 	strd	r3, r3, [sp]
   4b0c2:	4920      	ldr	r1, [pc, #128]	; (4b144 <enable_notifications+0xa0>)
   4b0c4:	f00c fc73 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4b0c8:	f06f 040d 	mvn.w	r4, #13
			LOG_WRN("Current modem firmware version: %s", buf);
		}
	}

	return 0;
}
   4b0cc:	4620      	mov	r0, r4
   4b0ce:	b013      	add	sp, #76	; 0x4c
   4b0d0:	bd30      	pop	{r4, r5, pc}
	err = nrf_modem_at_printf(cscon);
   4b0d2:	481d      	ldr	r0, [pc, #116]	; (4b148 <enable_notifications+0xa4>)
   4b0d4:	f006 fa1a 	bl	5150c <nrf_modem_at_printf>
	if (err) {
   4b0d8:	2800      	cmp	r0, #0
   4b0da:	d0f7      	beq.n	4b0cc <enable_notifications+0x28>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   4b0dc:	4b1b      	ldr	r3, [pc, #108]	; (4b14c <enable_notifications+0xa8>)
   4b0de:	2202      	movs	r2, #2
   4b0e0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b0e4:	4917      	ldr	r1, [pc, #92]	; (4b144 <enable_notifications+0xa0>)
   4b0e6:	4623      	mov	r3, r4
   4b0e8:	9003      	str	r0, [sp, #12]
   4b0ea:	9400      	str	r4, [sp, #0]
   4b0ec:	4620      	mov	r0, r4
   4b0ee:	f00c fc5e 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   4b0f2:	4b17      	ldr	r3, [pc, #92]	; (4b150 <enable_notifications+0xac>)
   4b0f4:	2202      	movs	r2, #2
   4b0f6:	4620      	mov	r0, r4
   4b0f8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b0fc:	4911      	ldr	r1, [pc, #68]	; (4b144 <enable_notifications+0xa0>)
   4b0fe:	4623      	mov	r3, r4
   4b100:	9400      	str	r4, [sp, #0]
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   4b102:	ad05      	add	r5, sp, #20
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   4b104:	f00c fc53 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   4b108:	2132      	movs	r1, #50	; 0x32
   4b10a:	4628      	mov	r0, r5
   4b10c:	4a11      	ldr	r2, [pc, #68]	; (4b154 <enable_notifications+0xb0>)
   4b10e:	f006 fa45 	bl	5159c <nrf_modem_at_cmd>
		if (err == 0) {
   4b112:	2800      	cmp	r0, #0
   4b114:	d1da      	bne.n	4b0cc <enable_notifications+0x28>
			char *end = strstr(buf, "\r\nOK");
   4b116:	4628      	mov	r0, r5
   4b118:	490f      	ldr	r1, [pc, #60]	; (4b158 <enable_notifications+0xb4>)
   4b11a:	f010 f8da 	bl	5b2d2 <strstr>
			if (end) {
   4b11e:	b100      	cbz	r0, 4b122 <enable_notifications+0x7e>
				*end = '\0';
   4b120:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
   4b122:	4b0e      	ldr	r3, [pc, #56]	; (4b15c <enable_notifications+0xb8>)
   4b124:	2202      	movs	r2, #2
   4b126:	9302      	str	r3, [sp, #8]
   4b128:	2300      	movs	r3, #0
   4b12a:	4906      	ldr	r1, [pc, #24]	; (4b144 <enable_notifications+0xa0>)
   4b12c:	4618      	mov	r0, r3
   4b12e:	e9cd 3300 	strd	r3, r3, [sp]
   4b132:	9503      	str	r5, [sp, #12]
   4b134:	f00c fc3b 	bl	579ae <z_log_msg_runtime_create.constprop.0>
   4b138:	e7c8      	b.n	4b0cc <enable_notifications+0x28>
   4b13a:	bf00      	nop
   4b13c:	0005ea9e 	.word	0x0005ea9e
   4b140:	0005eaa9 	.word	0x0005eaa9
   4b144:	0005bf04 	.word	0x0005bf04
   4b148:	0005f35f 	.word	0x0005f35f
   4b14c:	0005eadf 	.word	0x0005eadf
   4b150:	0005eb17 	.word	0x0005eb17
   4b154:	0005eb48 	.word	0x0005eb48
   4b158:	0005eb50 	.word	0x0005eb50
   4b15c:	0005eb55 	.word	0x0005eb55

0004b160 <at_handler_mdmev>:
{
   4b160:	b510      	push	{r4, lr}
   4b162:	4604      	mov	r4, r0
   4b164:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   4b166:	2100      	movs	r1, #0
   4b168:	2248      	movs	r2, #72	; 0x48
   4b16a:	a804      	add	r0, sp, #16
   4b16c:	f00f feaf 	bl	5aece <memset>
	err = parse_mdmev(response, &evt.modem_evt);
   4b170:	4620      	mov	r0, r4
   4b172:	a906      	add	r1, sp, #24
   4b174:	f001 fdec 	bl	4cd50 <parse_mdmev>
	if (err) {
   4b178:	b160      	cbz	r0, 4b194 <at_handler_mdmev+0x34>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   4b17a:	4b0a      	ldr	r3, [pc, #40]	; (4b1a4 <at_handler_mdmev+0x44>)
   4b17c:	9003      	str	r0, [sp, #12]
   4b17e:	9302      	str	r3, [sp, #8]
   4b180:	2300      	movs	r3, #0
   4b182:	2201      	movs	r2, #1
   4b184:	4618      	mov	r0, r3
   4b186:	e9cd 3300 	strd	r3, r3, [sp]
   4b18a:	4907      	ldr	r1, [pc, #28]	; (4b1a8 <at_handler_mdmev+0x48>)
   4b18c:	f00c fc0f 	bl	579ae <z_log_msg_runtime_create.constprop.0>
}
   4b190:	b016      	add	sp, #88	; 0x58
   4b192:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   4b194:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   4b196:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   4b198:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   4b19c:	f000 fef2 	bl	4bf84 <event_handler_list_dispatch>
   4b1a0:	e7f6      	b.n	4b190 <at_handler_mdmev+0x30>
   4b1a2:	bf00      	nop
   4b1a4:	0005eb78 	.word	0x0005eb78
   4b1a8:	0005bf04 	.word	0x0005bf04

0004b1ac <at_handler_xmodemsleep>:
{
   4b1ac:	b510      	push	{r4, lr}
   4b1ae:	4604      	mov	r4, r0
   4b1b0:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   4b1b2:	2100      	movs	r1, #0
   4b1b4:	2248      	movs	r2, #72	; 0x48
   4b1b6:	a804      	add	r0, sp, #16
   4b1b8:	f00f fe89 	bl	5aece <memset>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   4b1bc:	4620      	mov	r0, r4
   4b1be:	a906      	add	r1, sp, #24
   4b1c0:	f001 fd54 	bl	4cc6c <parse_xmodemsleep>
	if (err) {
   4b1c4:	b160      	cbz	r0, 4b1e0 <at_handler_xmodemsleep+0x34>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   4b1c6:	4b14      	ldr	r3, [pc, #80]	; (4b218 <at_handler_xmodemsleep+0x6c>)
   4b1c8:	9003      	str	r0, [sp, #12]
   4b1ca:	9302      	str	r3, [sp, #8]
   4b1cc:	2300      	movs	r3, #0
   4b1ce:	2201      	movs	r2, #1
   4b1d0:	4618      	mov	r0, r3
   4b1d2:	e9cd 3300 	strd	r3, r3, [sp]
   4b1d6:	4911      	ldr	r1, [pc, #68]	; (4b21c <at_handler_xmodemsleep+0x70>)
   4b1d8:	f00c fbe9 	bl	579ae <z_log_msg_runtime_create.constprop.0>
}
   4b1dc:	b016      	add	sp, #88	; 0x58
   4b1de:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   4b1e0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   4b1e4:	1e5a      	subs	r2, r3, #1
   4b1e6:	2a01      	cmp	r2, #1
   4b1e8:	d901      	bls.n	4b1ee <at_handler_xmodemsleep+0x42>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   4b1ea:	2b04      	cmp	r3, #4
   4b1ec:	d1f6      	bne.n	4b1dc <at_handler_xmodemsleep+0x30>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   4b1ee:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   4b1f2:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   4b1f6:	3b08      	subs	r3, #8
   4b1f8:	430b      	orrs	r3, r1
   4b1fa:	d008      	beq.n	4b20e <at_handler_xmodemsleep+0x62>
	} else if (evt.modem_sleep.time == 0) {
   4b1fc:	430a      	orrs	r2, r1
   4b1fe:	d008      	beq.n	4b212 <at_handler_xmodemsleep+0x66>
   4b200:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   4b202:	a804      	add	r0, sp, #16
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   4b204:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   4b208:	f000 febc 	bl	4bf84 <event_handler_list_dispatch>
   4b20c:	e7e6      	b.n	4b1dc <at_handler_xmodemsleep+0x30>
   4b20e:	2308      	movs	r3, #8
   4b210:	e7f7      	b.n	4b202 <at_handler_xmodemsleep+0x56>
   4b212:	2309      	movs	r3, #9
   4b214:	e7f5      	b.n	4b202 <at_handler_xmodemsleep+0x56>
   4b216:	bf00      	nop
   4b218:	0005eba8 	.word	0x0005eba8
   4b21c:	0005bf04 	.word	0x0005bf04

0004b220 <at_handler_ncellmeas>:
{
   4b220:	b570      	push	{r4, r5, r6, lr}
   4b222:	b0a8      	sub	sp, #160	; 0xa0
	struct lte_lc_evt evt = {0};
   4b224:	2100      	movs	r1, #0
   4b226:	2248      	movs	r2, #72	; 0x48
{
   4b228:	4605      	mov	r5, r0
	struct lte_lc_evt evt = {0};
   4b22a:	a804      	add	r0, sp, #16
   4b22c:	f00f fe4f 	bl	5aece <memset>
	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
   4b230:	f000 fe74 	bl	4bf1c <event_handler_list_is_empty>
   4b234:	4e4e      	ldr	r6, [pc, #312]	; (4b370 <at_handler_ncellmeas+0x150>)
   4b236:	4601      	mov	r1, r0
   4b238:	b9c8      	cbnz	r0, 4b26e <at_handler_ncellmeas+0x4e>
   4b23a:	7833      	ldrb	r3, [r6, #0]
   4b23c:	b1bb      	cbz	r3, 4b26e <at_handler_ncellmeas+0x4e>
	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   4b23e:	4c4d      	ldr	r4, [pc, #308]	; (4b374 <at_handler_ncellmeas+0x154>)
   4b240:	7823      	ldrb	r3, [r4, #0]
   4b242:	2b03      	cmp	r3, #3
   4b244:	d952      	bls.n	4b2ec <at_handler_ncellmeas+0xcc>
	struct lte_lc_evt evt = {0};
   4b246:	2248      	movs	r2, #72	; 0x48
   4b248:	a816      	add	r0, sp, #88	; 0x58
   4b24a:	f00f fe40 	bl	5aece <memset>
	int max_cell_count = ncellmeas_params.gci_count;
   4b24e:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
   4b250:	b188      	cbz	r0, 4b276 <at_handler_ncellmeas+0x56>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
   4b252:	2130      	movs	r1, #48	; 0x30
   4b254:	f00f fdcd 	bl	5adf2 <k_calloc>
		if (cells == NULL) {
   4b258:	4604      	mov	r4, r0
   4b25a:	b968      	cbnz	r0, 4b278 <at_handler_ncellmeas+0x58>
			LOG_ERR("Failed to allocate memory for the GCI cells");
   4b25c:	4b46      	ldr	r3, [pc, #280]	; (4b378 <at_handler_ncellmeas+0x158>)
			LOG_ERR("Failed to allocate memory for neighbor cells");
   4b25e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b262:	2201      	movs	r2, #1
   4b264:	4623      	mov	r3, r4
   4b266:	4945      	ldr	r1, [pc, #276]	; (4b37c <at_handler_ncellmeas+0x15c>)
   4b268:	9400      	str	r4, [sp, #0]
   4b26a:	f00c fba0 	bl	579ae <z_log_msg_runtime_create.constprop.0>
	ncellmeas_ongoing = false;
   4b26e:	2300      	movs	r3, #0
   4b270:	7033      	strb	r3, [r6, #0]
}
   4b272:	b028      	add	sp, #160	; 0xa0
   4b274:	bd70      	pop	{r4, r5, r6, pc}
	struct lte_lc_cell *cells = NULL;
   4b276:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   4b278:	aa18      	add	r2, sp, #96	; 0x60
   4b27a:	4629      	mov	r1, r5
   4b27c:	483d      	ldr	r0, [pc, #244]	; (4b374 <at_handler_ncellmeas+0x154>)
	evt.cells_info.gci_cells = cells;
   4b27e:	9427      	str	r4, [sp, #156]	; 0x9c
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   4b280:	f001 faa4 	bl	4c7cc <parse_ncellmeas_gci>
	switch (err) {
   4b284:	1dc2      	adds	r2, r0, #7
   4b286:	d00d      	beq.n	4b2a4 <at_handler_ncellmeas+0x84>
   4b288:	2801      	cmp	r0, #1
   4b28a:	d922      	bls.n	4b2d2 <at_handler_ncellmeas+0xb2>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   4b28c:	4b3c      	ldr	r3, [pc, #240]	; (4b380 <at_handler_ncellmeas+0x160>)
   4b28e:	9003      	str	r0, [sp, #12]
   4b290:	9302      	str	r3, [sp, #8]
   4b292:	2300      	movs	r3, #0
   4b294:	2201      	movs	r2, #1
   4b296:	4618      	mov	r0, r3
   4b298:	e9cd 3300 	strd	r3, r3, [sp]
   4b29c:	4937      	ldr	r1, [pc, #220]	; (4b37c <at_handler_ncellmeas+0x15c>)
   4b29e:	f00c fb86 	bl	579ae <z_log_msg_runtime_create.constprop.0>
   4b2a2:	e01c      	b.n	4b2de <at_handler_ncellmeas+0xbe>
		LOG_WRN("Not all neighbor cells could be parsed");
   4b2a4:	2500      	movs	r5, #0
   4b2a6:	4b37      	ldr	r3, [pc, #220]	; (4b384 <at_handler_ncellmeas+0x164>)
   4b2a8:	2202      	movs	r2, #2
   4b2aa:	4628      	mov	r0, r5
   4b2ac:	4933      	ldr	r1, [pc, #204]	; (4b37c <at_handler_ncellmeas+0x15c>)
   4b2ae:	9302      	str	r3, [sp, #8]
   4b2b0:	e9cd 5500 	strd	r5, r5, [sp]
   4b2b4:	462b      	mov	r3, r5
   4b2b6:	f00c fb7a 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   4b2ba:	2311      	movs	r3, #17
   4b2bc:	9303      	str	r3, [sp, #12]
   4b2be:	4b32      	ldr	r3, [pc, #200]	; (4b388 <at_handler_ncellmeas+0x168>)
   4b2c0:	2202      	movs	r2, #2
   4b2c2:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4b2c6:	4628      	mov	r0, r5
   4b2c8:	462b      	mov	r3, r5
   4b2ca:	492c      	ldr	r1, [pc, #176]	; (4b37c <at_handler_ncellmeas+0x15c>)
   4b2cc:	9500      	str	r5, [sp, #0]
   4b2ce:	f00c fb6e 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   4b2d2:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   4b2d4:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   4b2d6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   4b2da:	f000 fe53 	bl	4bf84 <event_handler_list_dispatch>
	k_free(cells);
   4b2de:	4620      	mov	r0, r4
   4b2e0:	f00f fd7c 	bl	5addc <k_free>
	k_free(evt.cells_info.neighbor_cells);
   4b2e4:	9825      	ldr	r0, [sp, #148]	; 0x94
		k_free(neighbor_cells);
   4b2e6:	f00f fd79 	bl	5addc <k_free>
   4b2ea:	e7c0      	b.n	4b26e <at_handler_ncellmeas+0x4e>
	int ncell_count = neighborcell_count_get(response);
   4b2ec:	4628      	mov	r0, r5
   4b2ee:	f001 f8df 	bl	4c4b0 <neighborcell_count_get>
   4b2f2:	4604      	mov	r4, r0
	if (ncell_count != 0) {
   4b2f4:	b130      	cbz	r0, 4b304 <at_handler_ncellmeas+0xe4>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   4b2f6:	2110      	movs	r1, #16
   4b2f8:	f00f fd7b 	bl	5adf2 <k_calloc>
		if (neighbor_cells == NULL) {
   4b2fc:	4604      	mov	r4, r0
   4b2fe:	b908      	cbnz	r0, 4b304 <at_handler_ncellmeas+0xe4>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   4b300:	4b22      	ldr	r3, [pc, #136]	; (4b38c <at_handler_ncellmeas+0x16c>)
   4b302:	e7ac      	b.n	4b25e <at_handler_ncellmeas+0x3e>
	err = parse_ncellmeas(response, &evt.cells_info);
   4b304:	4628      	mov	r0, r5
   4b306:	a906      	add	r1, sp, #24
	evt.cells_info.neighbor_cells = neighbor_cells;
   4b308:	9413      	str	r4, [sp, #76]	; 0x4c
	err = parse_ncellmeas(response, &evt.cells_info);
   4b30a:	f001 f8f5 	bl	4c4f8 <parse_ncellmeas>
	switch (err) {
   4b30e:	1dc3      	adds	r3, r0, #7
   4b310:	d00d      	beq.n	4b32e <at_handler_ncellmeas+0x10e>
   4b312:	2801      	cmp	r0, #1
   4b314:	d922      	bls.n	4b35c <at_handler_ncellmeas+0x13c>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   4b316:	4b1a      	ldr	r3, [pc, #104]	; (4b380 <at_handler_ncellmeas+0x160>)
   4b318:	9003      	str	r0, [sp, #12]
   4b31a:	9302      	str	r3, [sp, #8]
   4b31c:	2300      	movs	r3, #0
   4b31e:	2201      	movs	r2, #1
   4b320:	4618      	mov	r0, r3
   4b322:	e9cd 3300 	strd	r3, r3, [sp]
   4b326:	4915      	ldr	r1, [pc, #84]	; (4b37c <at_handler_ncellmeas+0x15c>)
   4b328:	f00c fb41 	bl	579ae <z_log_msg_runtime_create.constprop.0>
   4b32c:	e01c      	b.n	4b368 <at_handler_ncellmeas+0x148>
		LOG_WRN("Not all neighbor cells could be parsed");
   4b32e:	2500      	movs	r5, #0
   4b330:	4b14      	ldr	r3, [pc, #80]	; (4b384 <at_handler_ncellmeas+0x164>)
   4b332:	2202      	movs	r2, #2
   4b334:	4628      	mov	r0, r5
   4b336:	4911      	ldr	r1, [pc, #68]	; (4b37c <at_handler_ncellmeas+0x15c>)
   4b338:	9302      	str	r3, [sp, #8]
   4b33a:	e9cd 5500 	strd	r5, r5, [sp]
   4b33e:	462b      	mov	r3, r5
   4b340:	f00c fb35 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   4b344:	2311      	movs	r3, #17
   4b346:	9303      	str	r3, [sp, #12]
   4b348:	4b0f      	ldr	r3, [pc, #60]	; (4b388 <at_handler_ncellmeas+0x168>)
   4b34a:	2202      	movs	r2, #2
   4b34c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4b350:	4628      	mov	r0, r5
   4b352:	462b      	mov	r3, r5
   4b354:	4909      	ldr	r1, [pc, #36]	; (4b37c <at_handler_ncellmeas+0x15c>)
   4b356:	9500      	str	r5, [sp, #0]
   4b358:	f00c fb29 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   4b35c:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   4b35e:	a804      	add	r0, sp, #16
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   4b360:	f88d 3010 	strb.w	r3, [sp, #16]
		event_handler_list_dispatch(&evt);
   4b364:	f000 fe0e 	bl	4bf84 <event_handler_list_dispatch>
	if (neighbor_cells) {
   4b368:	2c00      	cmp	r4, #0
   4b36a:	d080      	beq.n	4b26e <at_handler_ncellmeas+0x4e>
		k_free(neighbor_cells);
   4b36c:	4620      	mov	r0, r4
   4b36e:	e7ba      	b.n	4b2e6 <at_handler_ncellmeas+0xc6>
   4b370:	2001f3bf 	.word	0x2001f3bf
   4b374:	2001f3c0 	.word	0x2001f3c0
   4b378:	0005ebe4 	.word	0x0005ebe4
   4b37c:	0005bf04 	.word	0x0005bf04
   4b380:	0005ec71 	.word	0x0005ec71
   4b384:	0005ec10 	.word	0x0005ec10
   4b388:	0005ec37 	.word	0x0005ec37
   4b38c:	0005ec9b 	.word	0x0005ec9b

0004b390 <at_handler_xt3412>:
{
   4b390:	b510      	push	{r4, lr}
   4b392:	4604      	mov	r4, r0
   4b394:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   4b396:	2100      	movs	r1, #0
   4b398:	2248      	movs	r2, #72	; 0x48
   4b39a:	a804      	add	r0, sp, #16
   4b39c:	f00f fd97 	bl	5aece <memset>
	err = parse_xt3412(response, &evt.time);
   4b3a0:	4620      	mov	r0, r4
   4b3a2:	a906      	add	r1, sp, #24
   4b3a4:	f001 f822 	bl	4c3ec <parse_xt3412>
	if (err) {
   4b3a8:	b160      	cbz	r0, 4b3c4 <at_handler_xt3412+0x34>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   4b3aa:	4b0d      	ldr	r3, [pc, #52]	; (4b3e0 <at_handler_xt3412+0x50>)
   4b3ac:	9003      	str	r0, [sp, #12]
   4b3ae:	9302      	str	r3, [sp, #8]
   4b3b0:	2300      	movs	r3, #0
   4b3b2:	2201      	movs	r2, #1
   4b3b4:	4618      	mov	r0, r3
   4b3b6:	e9cd 3300 	strd	r3, r3, [sp]
   4b3ba:	490a      	ldr	r1, [pc, #40]	; (4b3e4 <at_handler_xt3412+0x54>)
   4b3bc:	f00c faf7 	bl	579ae <z_log_msg_runtime_create.constprop.0>
}
   4b3c0:	b016      	add	sp, #88	; 0x58
   4b3c2:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   4b3c4:	9b06      	ldr	r3, [sp, #24]
   4b3c6:	9a07      	ldr	r2, [sp, #28]
   4b3c8:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   4b3cc:	3b08      	subs	r3, #8
   4b3ce:	4313      	orrs	r3, r2
   4b3d0:	d1f6      	bne.n	4b3c0 <at_handler_xt3412+0x30>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   4b3d2:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   4b3d4:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   4b3d6:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   4b3da:	f000 fdd3 	bl	4bf84 <event_handler_list_dispatch>
   4b3de:	e7ef      	b.n	4b3c0 <at_handler_xt3412+0x30>
   4b3e0:	0005ecc8 	.word	0x0005ecc8
   4b3e4:	0005bf04 	.word	0x0005bf04

0004b3e8 <at_handler_cedrxp>:
{
   4b3e8:	b510      	push	{r4, lr}
   4b3ea:	4604      	mov	r4, r0
   4b3ec:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   4b3ee:	2100      	movs	r1, #0
   4b3f0:	2248      	movs	r2, #72	; 0x48
   4b3f2:	a804      	add	r0, sp, #16
   4b3f4:	f00f fd6b 	bl	5aece <memset>
	err = parse_edrx(response, &evt.edrx_cfg);
   4b3f8:	4620      	mov	r0, r4
   4b3fa:	a906      	add	r1, sp, #24
   4b3fc:	f7f6 fb70 	bl	41ae0 <parse_edrx>
	if (err) {
   4b400:	b160      	cbz	r0, 4b41c <at_handler_cedrxp+0x34>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   4b402:	4b0a      	ldr	r3, [pc, #40]	; (4b42c <at_handler_cedrxp+0x44>)
   4b404:	9003      	str	r0, [sp, #12]
   4b406:	9302      	str	r3, [sp, #8]
   4b408:	2300      	movs	r3, #0
   4b40a:	2201      	movs	r2, #1
   4b40c:	4618      	mov	r0, r3
   4b40e:	e9cd 3300 	strd	r3, r3, [sp]
   4b412:	4907      	ldr	r1, [pc, #28]	; (4b430 <at_handler_cedrxp+0x48>)
   4b414:	f00c facb 	bl	579ae <z_log_msg_runtime_create.constprop.0>
}
   4b418:	b016      	add	sp, #88	; 0x58
   4b41a:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   4b41c:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   4b41e:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   4b420:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   4b424:	f000 fdae 	bl	4bf84 <event_handler_list_dispatch>
   4b428:	e7f6      	b.n	4b418 <at_handler_cedrxp+0x30>
   4b42a:	bf00      	nop
   4b42c:	0005ecfc 	.word	0x0005ecfc
   4b430:	0005bf04 	.word	0x0005bf04

0004b434 <at_handler_cscon>:
{
   4b434:	b510      	push	{r4, lr}
   4b436:	4604      	mov	r4, r0
   4b438:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   4b43a:	2248      	movs	r2, #72	; 0x48
   4b43c:	2100      	movs	r1, #0
   4b43e:	a804      	add	r0, sp, #16
   4b440:	f00f fd45 	bl	5aece <memset>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   4b444:	2201      	movs	r2, #1
   4b446:	4620      	mov	r0, r4
   4b448:	a906      	add	r1, sp, #24
   4b44a:	f000 fe7f 	bl	4c14c <parse_rrc_mode>
	if (err) {
   4b44e:	b160      	cbz	r0, 4b46a <at_handler_cscon+0x36>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   4b450:	4b09      	ldr	r3, [pc, #36]	; (4b478 <at_handler_cscon+0x44>)
   4b452:	9003      	str	r0, [sp, #12]
   4b454:	9302      	str	r3, [sp, #8]
   4b456:	2300      	movs	r3, #0
   4b458:	2201      	movs	r2, #1
   4b45a:	4618      	mov	r0, r3
   4b45c:	e9cd 3300 	strd	r3, r3, [sp]
   4b460:	4906      	ldr	r1, [pc, #24]	; (4b47c <at_handler_cscon+0x48>)
   4b462:	f00c faa4 	bl	579ae <z_log_msg_runtime_create.constprop.0>
}
   4b466:	b016      	add	sp, #88	; 0x58
   4b468:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   4b46a:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   4b46c:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   4b46e:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   4b472:	f000 fd87 	bl	4bf84 <event_handler_list_dispatch>
   4b476:	e7f6      	b.n	4b466 <at_handler_cscon+0x32>
   4b478:	0005ed18 	.word	0x0005ed18
   4b47c:	0005bf04 	.word	0x0005bf04

0004b480 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   4b480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (enable) {
   4b482:	2800      	cmp	r0, #0
   4b484:	d035      	beq.n	4b4f2 <lte_lc_psm_req+0x72>
		if (strlen(psm_param_rptau) == 8 &&
   4b486:	481c      	ldr	r0, [pc, #112]	; (4b4f8 <lte_lc_psm_req+0x78>)
   4b488:	f7f5 fcb4 	bl	40df4 <strlen>
   4b48c:	2808      	cmp	r0, #8
   4b48e:	d11a      	bne.n	4b4c6 <lte_lc_psm_req+0x46>
		    strlen(psm_param_rat) == 8) {
   4b490:	481a      	ldr	r0, [pc, #104]	; (4b4fc <lte_lc_psm_req+0x7c>)
   4b492:	f7f5 fcaf 	bl	40df4 <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   4b496:	2808      	cmp	r0, #8
   4b498:	d115      	bne.n	4b4c6 <lte_lc_psm_req+0x46>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
   4b49a:	4a18      	ldr	r2, [pc, #96]	; (4b4fc <lte_lc_psm_req+0x7c>)
   4b49c:	4916      	ldr	r1, [pc, #88]	; (4b4f8 <lte_lc_psm_req+0x78>)
   4b49e:	4818      	ldr	r0, [pc, #96]	; (4b500 <lte_lc_psm_req+0x80>)
   4b4a0:	f006 f834 	bl	5150c <nrf_modem_at_printf>
		}
	} else {
		err = nrf_modem_at_printf(psm_disable);
	}

	if (err) {
   4b4a4:	b160      	cbz	r0, 4b4c0 <lte_lc_psm_req+0x40>
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
   4b4a6:	4b17      	ldr	r3, [pc, #92]	; (4b504 <lte_lc_psm_req+0x84>)
   4b4a8:	9003      	str	r0, [sp, #12]
   4b4aa:	9302      	str	r3, [sp, #8]
   4b4ac:	2300      	movs	r3, #0
   4b4ae:	2201      	movs	r2, #1
   4b4b0:	4618      	mov	r0, r3
   4b4b2:	e9cd 3300 	strd	r3, r3, [sp]
   4b4b6:	4914      	ldr	r1, [pc, #80]	; (4b508 <lte_lc_psm_req+0x88>)
   4b4b8:	f00c fa79 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4b4bc:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   4b4c0:	b005      	add	sp, #20
   4b4c2:	f85d fb04 	ldr.w	pc, [sp], #4
		} else if (strlen(psm_param_rptau) == 8) {
   4b4c6:	480c      	ldr	r0, [pc, #48]	; (4b4f8 <lte_lc_psm_req+0x78>)
   4b4c8:	f7f5 fc94 	bl	40df4 <strlen>
   4b4cc:	2808      	cmp	r0, #8
   4b4ce:	d104      	bne.n	4b4da <lte_lc_psm_req+0x5a>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
   4b4d0:	4909      	ldr	r1, [pc, #36]	; (4b4f8 <lte_lc_psm_req+0x78>)
   4b4d2:	480e      	ldr	r0, [pc, #56]	; (4b50c <lte_lc_psm_req+0x8c>)
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   4b4d4:	f006 f81a 	bl	5150c <nrf_modem_at_printf>
   4b4d8:	e7e4      	b.n	4b4a4 <lte_lc_psm_req+0x24>
		} else if (strlen(psm_param_rat) == 8) {
   4b4da:	4808      	ldr	r0, [pc, #32]	; (4b4fc <lte_lc_psm_req+0x7c>)
   4b4dc:	f7f5 fc8a 	bl	40df4 <strlen>
   4b4e0:	2808      	cmp	r0, #8
   4b4e2:	d102      	bne.n	4b4ea <lte_lc_psm_req+0x6a>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   4b4e4:	4905      	ldr	r1, [pc, #20]	; (4b4fc <lte_lc_psm_req+0x7c>)
   4b4e6:	480a      	ldr	r0, [pc, #40]	; (4b510 <lte_lc_psm_req+0x90>)
   4b4e8:	e7f4      	b.n	4b4d4 <lte_lc_psm_req+0x54>
			err = nrf_modem_at_printf("AT+CPSMS=1");
   4b4ea:	480a      	ldr	r0, [pc, #40]	; (4b514 <lte_lc_psm_req+0x94>)
		err = nrf_modem_at_printf(psm_disable);
   4b4ec:	f006 f80e 	bl	5150c <nrf_modem_at_printf>
   4b4f0:	e7d8      	b.n	4b4a4 <lte_lc_psm_req+0x24>
   4b4f2:	4809      	ldr	r0, [pc, #36]	; (4b518 <lte_lc_psm_req+0x98>)
   4b4f4:	e7fa      	b.n	4b4ec <lte_lc_psm_req+0x6c>
   4b4f6:	bf00      	nop
   4b4f8:	2001aa25 	.word	0x2001aa25
   4b4fc:	2001aa2e 	.word	0x2001aa2e
   4b500:	0005ed3f 	.word	0x0005ed3f
   4b504:	0005ed86 	.word	0x0005ed86
   4b508:	0005bf04 	.word	0x0005bf04
   4b50c:	0005ed56 	.word	0x0005ed56
   4b510:	0005ed68 	.word	0x0005ed68
   4b514:	0005ed7b 	.word	0x0005ed7b
   4b518:	0005f36a 	.word	0x0005f36a

0004b51c <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
   4b51c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   4b51e:	2400      	movs	r4, #0
{
   4b520:	b091      	sub	sp, #68	; 0x44
   4b522:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   4b524:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   4b526:	e9cd 4407 	strd	r4, r4, [sp, #28]
	char tau_ext_str[9] = {0};
   4b52a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	char tau_legacy_str[9] = {0};
   4b52e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	char active_time_str[9] = {0};
   4b532:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	char tau_ext_str[9] = {0};
   4b536:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
	char tau_legacy_str[9] = {0};
   4b53a:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
	if ((tau == NULL) || (active_time == NULL)) {
   4b53e:	2800      	cmp	r0, #0
   4b540:	d06c      	beq.n	4b61c <lte_lc_psm_get+0x100>
   4b542:	2900      	cmp	r1, #0
   4b544:	d06a      	beq.n	4b61c <lte_lc_psm_get+0x100>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   4b546:	4f37      	ldr	r7, [pc, #220]	; (4b624 <lte_lc_psm_get+0x108>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   4b548:	21a0      	movs	r1, #160	; 0xa0
   4b54a:	4638      	mov	r0, r7
   4b54c:	4a36      	ldr	r2, [pc, #216]	; (4b628 <lte_lc_psm_get+0x10c>)
	response[0] = '\0';
   4b54e:	703c      	strb	r4, [r7, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   4b550:	f006 f824 	bl	5159c <nrf_modem_at_cmd>
	if (err) {
   4b554:	b178      	cbz	r0, 4b576 <lte_lc_psm_get+0x5a>
		LOG_ERR("AT command failed, error: %d", err);
   4b556:	4b35      	ldr	r3, [pc, #212]	; (4b62c <lte_lc_psm_get+0x110>)
   4b558:	9003      	str	r0, [sp, #12]
   4b55a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b55e:	4620      	mov	r0, r4
   4b560:	4623      	mov	r3, r4
   4b562:	9400      	str	r4, [sp, #0]
   4b564:	2201      	movs	r2, #1
   4b566:	4932      	ldr	r1, [pc, #200]	; (4b630 <lte_lc_psm_get+0x114>)
   4b568:	f00c fa21 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4b56c:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   4b570:	4620      	mov	r0, r4
   4b572:	b011      	add	sp, #68	; 0x44
   4b574:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   4b576:	212c      	movs	r1, #44	; 0x2c
   4b578:	4638      	mov	r0, r7
   4b57a:	f00f fe48 	bl	5b20e <strchr>
	if (!comma_ptr) {
   4b57e:	4604      	mov	r4, r0
   4b580:	b970      	cbnz	r0, 4b5a0 <lte_lc_psm_get+0x84>
		return -EBADMSG;
   4b582:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   4b586:	e7f3      	b.n	4b570 <lte_lc_psm_get+0x54>
		if (comma_ptr) {
   4b588:	b95c      	cbnz	r4, 4b5a2 <lte_lc_psm_get+0x86>
			LOG_ERR("AT command parsing failed");
   4b58a:	4b2a      	ldr	r3, [pc, #168]	; (4b634 <lte_lc_psm_get+0x118>)
   4b58c:	2201      	movs	r2, #1
   4b58e:	9302      	str	r3, [sp, #8]
   4b590:	2300      	movs	r3, #0
   4b592:	4927      	ldr	r1, [pc, #156]	; (4b630 <lte_lc_psm_get+0x114>)
   4b594:	4618      	mov	r0, r3
   4b596:	e9cd 3300 	strd	r3, r3, [sp]
   4b59a:	f00c fa08 	bl	579ae <z_log_msg_runtime_create.constprop.0>
			return -EBADMSG;
   4b59e:	e7f0      	b.n	4b582 <lte_lc_psm_get+0x66>
   4b5a0:	270c      	movs	r7, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
   4b5a2:	1c60      	adds	r0, r4, #1
   4b5a4:	212c      	movs	r1, #44	; 0x2c
   4b5a6:	f00f fe32 	bl	5b20e <strchr>
	for (int i = 0; i < 12; i++) {
   4b5aa:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   4b5ac:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   4b5ae:	d1eb      	bne.n	4b588 <lte_lc_psm_get+0x6c>
	if (comma_ptr) {
   4b5b0:	2800      	cmp	r0, #0
   4b5b2:	d0ea      	beq.n	4b58a <lte_lc_psm_get+0x6e>
		strncpy(active_time_str, comma_ptr + 2, 8);
   4b5b4:	1c81      	adds	r1, r0, #2
   4b5b6:	2208      	movs	r2, #8
   4b5b8:	a807      	add	r0, sp, #28
   4b5ba:	f00f fe6b 	bl	5b294 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   4b5be:	1c60      	adds	r0, r4, #1
   4b5c0:	212c      	movs	r1, #44	; 0x2c
   4b5c2:	f00f fe24 	bl	5b20e <strchr>
	if (comma_ptr) {
   4b5c6:	4604      	mov	r4, r0
   4b5c8:	2800      	cmp	r0, #0
   4b5ca:	d0de      	beq.n	4b58a <lte_lc_psm_get+0x6e>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   4b5cc:	1c81      	adds	r1, r0, #2
   4b5ce:	2208      	movs	r2, #8
   4b5d0:	a80a      	add	r0, sp, #40	; 0x28
   4b5d2:	f00f fe5f 	bl	5b294 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   4b5d6:	212c      	movs	r1, #44	; 0x2c
   4b5d8:	1c60      	adds	r0, r4, #1
   4b5da:	f00f fe18 	bl	5b20e <strchr>
	if (comma_ptr) {
   4b5de:	b120      	cbz	r0, 4b5ea <lte_lc_psm_get+0xce>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   4b5e0:	1c81      	adds	r1, r0, #2
   4b5e2:	2208      	movs	r2, #8
   4b5e4:	a80d      	add	r0, sp, #52	; 0x34
   4b5e6:	f00f fe55 	bl	5b294 <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   4b5ea:	ab05      	add	r3, sp, #20
   4b5ec:	aa0d      	add	r2, sp, #52	; 0x34
   4b5ee:	a90a      	add	r1, sp, #40	; 0x28
   4b5f0:	a807      	add	r0, sp, #28
   4b5f2:	f000 fd11 	bl	4c018 <parse_psm>
	if (err) {
   4b5f6:	4604      	mov	r4, r0
   4b5f8:	b158      	cbz	r0, 4b612 <lte_lc_psm_get+0xf6>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   4b5fa:	4b0f      	ldr	r3, [pc, #60]	; (4b638 <lte_lc_psm_get+0x11c>)
   4b5fc:	9003      	str	r0, [sp, #12]
   4b5fe:	9302      	str	r3, [sp, #8]
   4b600:	2300      	movs	r3, #0
   4b602:	2201      	movs	r2, #1
   4b604:	4618      	mov	r0, r3
   4b606:	e9cd 3300 	strd	r3, r3, [sp]
   4b60a:	4909      	ldr	r1, [pc, #36]	; (4b630 <lte_lc_psm_get+0x114>)
   4b60c:	f00c f9cf 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return err;
   4b610:	e7ae      	b.n	4b570 <lte_lc_psm_get+0x54>
	*tau = psm_cfg.tau;
   4b612:	9b05      	ldr	r3, [sp, #20]
   4b614:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   4b616:	9b06      	ldr	r3, [sp, #24]
   4b618:	602b      	str	r3, [r5, #0]
	return 0;
   4b61a:	e7a9      	b.n	4b570 <lte_lc_psm_get+0x54>
		return -EINVAL;
   4b61c:	f06f 0415 	mvn.w	r4, #21
   4b620:	e7a6      	b.n	4b570 <lte_lc_psm_get+0x54>
   4b622:	bf00      	nop
   4b624:	2001f31a 	.word	0x2001f31a
   4b628:	0005edb5 	.word	0x0005edb5
   4b62c:	0005edc2 	.word	0x0005edc2
   4b630:	0005bf04 	.word	0x0005bf04
   4b634:	0005eddf 	.word	0x0005eddf
   4b638:	0005edf9 	.word	0x0005edf9

0004b63c <at_handler_cereg>:
{
   4b63c:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
   4b63e:	2400      	movs	r4, #0
{
   4b640:	4605      	mov	r5, r0
   4b642:	b0a9      	sub	sp, #164	; 0xa4
	struct lte_lc_evt evt = {0};
   4b644:	2248      	movs	r2, #72	; 0x48
   4b646:	2100      	movs	r1, #0
   4b648:	a816      	add	r0, sp, #88	; 0x58
   4b64a:	f00f fc40 	bl	5aece <memset>
	struct lte_lc_cell cell = {0};
   4b64e:	2230      	movs	r2, #48	; 0x30
   4b650:	4621      	mov	r1, r4
   4b652:	a80a      	add	r0, sp, #40	; 0x28
	enum lte_lc_nw_reg_status reg_status = 0;
   4b654:	f88d 401e 	strb.w	r4, [sp, #30]
	struct lte_lc_psm_cfg psm_cfg = {0};
   4b658:	af08      	add	r7, sp, #32
	struct lte_lc_cell cell = {0};
   4b65a:	f00f fc38 	bl	5aece <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   4b65e:	f10d 031f 	add.w	r3, sp, #31
	struct lte_lc_psm_cfg psm_cfg = {0};
   4b662:	607c      	str	r4, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   4b664:	2101      	movs	r1, #1
   4b666:	9300      	str	r3, [sp, #0]
   4b668:	4628      	mov	r0, r5
   4b66a:	ab0a      	add	r3, sp, #40	; 0x28
   4b66c:	f10d 021e 	add.w	r2, sp, #30
	struct lte_lc_psm_cfg psm_cfg = {0};
   4b670:	9408      	str	r4, [sp, #32]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   4b672:	f000 fdc9 	bl	4c208 <parse_cereg>
	if (err) {
   4b676:	b168      	cbz	r0, 4b694 <at_handler_cereg+0x58>
		LOG_ERR("Failed to parse notification (error %d): %s",
   4b678:	4b45      	ldr	r3, [pc, #276]	; (4b790 <at_handler_cereg+0x154>)
   4b67a:	e9cd 0503 	strd	r0, r5, [sp, #12]
   4b67e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b682:	2201      	movs	r2, #1
   4b684:	4623      	mov	r3, r4
   4b686:	4620      	mov	r0, r4
   4b688:	4942      	ldr	r1, [pc, #264]	; (4b794 <at_handler_cereg+0x158>)
   4b68a:	9400      	str	r4, [sp, #0]
   4b68c:	f00c f98f 	bl	579ae <z_log_msg_runtime_create.constprop.0>
}
   4b690:	b029      	add	sp, #164	; 0xa4
   4b692:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   4b694:	f89d 301e 	ldrb.w	r3, [sp, #30]
   4b698:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   4b69c:	2b01      	cmp	r3, #1
   4b69e:	d105      	bne.n	4b6ac <at_handler_cereg+0x70>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   4b6a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   4b6a2:	3301      	adds	r3, #1
   4b6a4:	d05b      	beq.n	4b75e <at_handler_cereg+0x122>
	z_impl_k_sem_give(sem);
   4b6a6:	483c      	ldr	r0, [pc, #240]	; (4b798 <at_handler_cereg+0x15c>)
   4b6a8:	f006 ffda 	bl	52660 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   4b6ac:	f000 fc36 	bl	4bf1c <event_handler_list_is_empty>
   4b6b0:	2800      	cmp	r0, #0
   4b6b2:	d1ed      	bne.n	4b690 <at_handler_cereg+0x54>
	if (reg_status != prev_reg_status) {
   4b6b4:	4a39      	ldr	r2, [pc, #228]	; (4b79c <at_handler_cereg+0x160>)
   4b6b6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   4b6ba:	7811      	ldrb	r1, [r2, #0]
   4b6bc:	4299      	cmp	r1, r3
   4b6be:	d007      	beq.n	4b6d0 <at_handler_cereg+0x94>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   4b6c0:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   4b6c4:	a816      	add	r0, sp, #88	; 0x58
		prev_reg_status = reg_status;
   4b6c6:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   4b6c8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   4b6cc:	f000 fc5a 	bl	4bf84 <event_handler_list_dispatch>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   4b6d0:	2230      	movs	r2, #48	; 0x30
   4b6d2:	4933      	ldr	r1, [pc, #204]	; (4b7a0 <at_handler_cereg+0x164>)
   4b6d4:	a80a      	add	r0, sp, #40	; 0x28
   4b6d6:	f00f fbb0 	bl	5ae3a <memcmp>
   4b6da:	b1c8      	cbz	r0, 4b710 <at_handler_cereg+0xd4>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   4b6dc:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   4b6de:	4d30      	ldr	r5, [pc, #192]	; (4b7a0 <at_handler_cereg+0x164>)
   4b6e0:	ac0a      	add	r4, sp, #40	; 0x28
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   4b6e2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   4b6e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   4b6e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   4b6ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   4b6ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   4b6ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4b6f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   4b6f6:	ae18      	add	r6, sp, #96	; 0x60
   4b6f8:	ad0a      	add	r5, sp, #40	; 0x28
   4b6fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   4b6fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   4b6fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   4b700:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   4b702:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4b706:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   4b70a:	a816      	add	r0, sp, #88	; 0x58
   4b70c:	f000 fc3a 	bl	4bf84 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   4b710:	4a24      	ldr	r2, [pc, #144]	; (4b7a4 <at_handler_cereg+0x168>)
   4b712:	f89d 301f 	ldrb.w	r3, [sp, #31]
   4b716:	7811      	ldrb	r1, [r2, #0]
   4b718:	4299      	cmp	r1, r3
   4b71a:	d008      	beq.n	4b72e <at_handler_cereg+0xf2>
		prev_lte_mode = lte_mode;
   4b71c:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   4b71e:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   4b720:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   4b722:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		evt.lte_mode = lte_mode;
   4b726:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   4b72a:	f000 fc2b 	bl	4bf84 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   4b72e:	f89d 401e 	ldrb.w	r4, [sp, #30]
   4b732:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   4b736:	2c01      	cmp	r4, #1
   4b738:	d1aa      	bne.n	4b690 <at_handler_cereg+0x54>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   4b73a:	4638      	mov	r0, r7
   4b73c:	a909      	add	r1, sp, #36	; 0x24
   4b73e:	f7ff feed 	bl	4b51c <lte_lc_psm_get>
	if (err) {
   4b742:	b180      	cbz	r0, 4b766 <at_handler_cereg+0x12a>
		if (err != -EBADMSG) {
   4b744:	304d      	adds	r0, #77	; 0x4d
   4b746:	d0a3      	beq.n	4b690 <at_handler_cereg+0x54>
			LOG_ERR("Failed to get PSM information");
   4b748:	4b17      	ldr	r3, [pc, #92]	; (4b7a8 <at_handler_cereg+0x16c>)
   4b74a:	4622      	mov	r2, r4
   4b74c:	9302      	str	r3, [sp, #8]
   4b74e:	2300      	movs	r3, #0
   4b750:	4910      	ldr	r1, [pc, #64]	; (4b794 <at_handler_cereg+0x158>)
   4b752:	4618      	mov	r0, r3
   4b754:	e9cd 3300 	strd	r3, r3, [sp]
   4b758:	f00c f929 	bl	579ae <z_log_msg_runtime_create.constprop.0>
   4b75c:	e798      	b.n	4b690 <at_handler_cereg+0x54>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   4b75e:	2304      	movs	r3, #4
   4b760:	f88d 301e 	strb.w	r3, [sp, #30]
   4b764:	e7a2      	b.n	4b6ac <at_handler_cereg+0x70>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   4b766:	4d11      	ldr	r5, [pc, #68]	; (4b7ac <at_handler_cereg+0x170>)
   4b768:	2208      	movs	r2, #8
   4b76a:	4629      	mov	r1, r5
   4b76c:	4638      	mov	r0, r7
   4b76e:	f00f fb64 	bl	5ae3a <memcmp>
   4b772:	2800      	cmp	r0, #0
   4b774:	d08c      	beq.n	4b690 <at_handler_cereg+0x54>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   4b776:	e897 0003 	ldmia.w	r7, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   4b77a:	ab18      	add	r3, sp, #96	; 0x60
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   4b77c:	e885 0003 	stmia.w	r5, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   4b780:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   4b784:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   4b786:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   4b78a:	f000 fbfb 	bl	4bf84 <event_handler_list_dispatch>
   4b78e:	e77f      	b.n	4b690 <at_handler_cereg+0x54>
   4b790:	0005ee26 	.word	0x0005ee26
   4b794:	0005bf04 	.word	0x0005bf04
   4b798:	2001b854 	.word	0x2001b854
   4b79c:	2001f3bb 	.word	0x2001f3bb
   4b7a0:	2001ada8 	.word	0x2001ada8
   4b7a4:	2001f3ba 	.word	0x2001f3ba
   4b7a8:	0005ee52 	.word	0x0005ee52
   4b7ac:	2001b84c 	.word	0x2001b84c

0004b7b0 <lte_lc_edrx_req>:
}

int lte_lc_edrx_req(bool enable)
{
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   4b7b0:	2204      	movs	r2, #4
   4b7b2:	2305      	movs	r3, #5
{
   4b7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b7b8:	b087      	sub	sp, #28

	if (!enable) {
   4b7ba:	4604      	mov	r4, r0
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   4b7bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (!enable) {
   4b7c0:	b958      	cbnz	r0, 4b7da <lte_lc_edrx_req+0x2a>
		err = nrf_modem_at_printf(edrx_disable);
   4b7c2:	4829      	ldr	r0, [pc, #164]	; (4b868 <lte_lc_edrx_req+0xb8>)
   4b7c4:	f005 fea2 	bl	5150c <nrf_modem_at_printf>
		if (err) {
   4b7c8:	2800      	cmp	r0, #0
   4b7ca:	d04b      	beq.n	4b864 <lte_lc_edrx_req+0xb4>
			LOG_ERR("Failed to disable eDRX, reported error: %d", err);
   4b7cc:	4b27      	ldr	r3, [pc, #156]	; (4b86c <lte_lc_edrx_req+0xbc>)
   4b7ce:	9003      	str	r0, [sp, #12]
			continue;
		}

		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
		if (err) {
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   4b7d0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b7d4:	9400      	str	r4, [sp, #0]
   4b7d6:	4623      	mov	r3, r4
   4b7d8:	e023      	b.n	4b822 <lte_lc_edrx_req+0x72>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   4b7da:	2500      	movs	r5, #0
					edrx_param_ltem : edrx_param_nbiot;
   4b7dc:	4f24      	ldr	r7, [pc, #144]	; (4b870 <lte_lc_edrx_req+0xc0>)
   4b7de:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4b890 <lte_lc_edrx_req+0xe0>
   4b7e2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4b894 <lte_lc_edrx_req+0xe4>
   4b7e6:	ae04      	add	r6, sp, #16
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   4b7e8:	f856 ab04 	ldr.w	sl, [r6], #4
					edrx_param_ltem : edrx_param_nbiot;
   4b7ec:	4b21      	ldr	r3, [pc, #132]	; (4b874 <lte_lc_edrx_req+0xc4>)
   4b7ee:	f1ba 0f04 	cmp.w	sl, #4
   4b7f2:	bf14      	ite	ne
   4b7f4:	463c      	movne	r4, r7
   4b7f6:	4644      	moveq	r4, r8
		if (strlen(edrx_param) == 4) {
   4b7f8:	4620      	mov	r0, r4
					edrx_param_ltem : edrx_param_nbiot;
   4b7fa:	bf14      	ite	ne
   4b7fc:	46cb      	movne	fp, r9
   4b7fe:	469b      	moveq	fp, r3
		if (strlen(edrx_param) == 4) {
   4b800:	f7f5 faf8 	bl	40df4 <strlen>
   4b804:	2804      	cmp	r0, #4
   4b806:	d118      	bne.n	4b83a <lte_lc_edrx_req+0x8a>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   4b808:	4622      	mov	r2, r4
   4b80a:	4651      	mov	r1, sl
   4b80c:	481a      	ldr	r0, [pc, #104]	; (4b878 <lte_lc_edrx_req+0xc8>)
   4b80e:	f005 fe7d 	bl	5150c <nrf_modem_at_printf>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   4b812:	4604      	mov	r4, r0
		if (err) {
   4b814:	b1b0      	cbz	r0, 4b844 <lte_lc_edrx_req+0x94>
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
   4b816:	4b19      	ldr	r3, [pc, #100]	; (4b87c <lte_lc_edrx_req+0xcc>)
   4b818:	9003      	str	r0, [sp, #12]
   4b81a:	9302      	str	r3, [sp, #8]
   4b81c:	2300      	movs	r3, #0
   4b81e:	e9cd 3300 	strd	r3, r3, [sp]
   4b822:	4618      	mov	r0, r3
   4b824:	2201      	movs	r2, #1
   4b826:	4916      	ldr	r1, [pc, #88]	; (4b880 <lte_lc_edrx_req+0xd0>)
   4b828:	f00c f8c1 	bl	579ae <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
   4b82c:	f06f 000d 	mvn.w	r0, #13
			return -EFAULT;
		}
	}

	return 0;
}
   4b830:	b007      	add	sp, #28
   4b832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   4b836:	2501      	movs	r5, #1
   4b838:	e7d6      	b.n	4b7e8 <lte_lc_edrx_req+0x38>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   4b83a:	4651      	mov	r1, sl
   4b83c:	4811      	ldr	r0, [pc, #68]	; (4b884 <lte_lc_edrx_req+0xd4>)
   4b83e:	f005 fe65 	bl	5150c <nrf_modem_at_printf>
   4b842:	e7e6      	b.n	4b812 <lte_lc_edrx_req+0x62>
		if (strlen(ptw_param) != 4) {
   4b844:	4658      	mov	r0, fp
   4b846:	f7f5 fad5 	bl	40df4 <strlen>
   4b84a:	2804      	cmp	r0, #4
   4b84c:	d108      	bne.n	4b860 <lte_lc_edrx_req+0xb0>
		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   4b84e:	465a      	mov	r2, fp
   4b850:	4651      	mov	r1, sl
   4b852:	480d      	ldr	r0, [pc, #52]	; (4b888 <lte_lc_edrx_req+0xd8>)
   4b854:	f005 fe5a 	bl	5150c <nrf_modem_at_printf>
		if (err) {
   4b858:	b110      	cbz	r0, 4b860 <lte_lc_edrx_req+0xb0>
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   4b85a:	4b0c      	ldr	r3, [pc, #48]	; (4b88c <lte_lc_edrx_req+0xdc>)
   4b85c:	9003      	str	r0, [sp, #12]
   4b85e:	e7b7      	b.n	4b7d0 <lte_lc_edrx_req+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   4b860:	2d00      	cmp	r5, #0
   4b862:	d0e8      	beq.n	4b836 <lte_lc_edrx_req+0x86>
		return 0;
   4b864:	2000      	movs	r0, #0
   4b866:	e7e3      	b.n	4b830 <lte_lc_edrx_req+0x80>
   4b868:	0005f374 	.word	0x0005f374
   4b86c:	0005ee70 	.word	0x0005ee70
   4b870:	2001aa37 	.word	0x2001aa37
   4b874:	2001f3c7 	.word	0x2001f3c7
   4b878:	0005ee9b 	.word	0x0005ee9b
   4b87c:	0005eebe 	.word	0x0005eebe
   4b880:	0005bf04 	.word	0x0005bf04
   4b884:	0005eeaf 	.word	0x0005eeaf
   4b888:	0005eee8 	.word	0x0005eee8
   4b88c:	0005eef9 	.word	0x0005eef9
   4b890:	2001aa3c 	.word	0x2001aa3c
   4b894:	2001f3c2 	.word	0x2001f3c2

0004b898 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   4b898:	b530      	push	{r4, r5, lr}
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   4b89a:	2500      	movs	r5, #0
{
   4b89c:	b087      	sub	sp, #28

	if (status == NULL) {
   4b89e:	4604      	mov	r4, r0
	uint32_t cell_id = 0;
   4b8a0:	9505      	str	r5, [sp, #20]
	if (status == NULL) {
   4b8a2:	b300      	cbz	r0, 4b8e6 <lte_lc_nw_reg_status_get+0x4e>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   4b8a4:	4911      	ldr	r1, [pc, #68]	; (4b8ec <lte_lc_nw_reg_status_get+0x54>)
   4b8a6:	4812      	ldr	r0, [pc, #72]	; (4b8f0 <lte_lc_nw_reg_status_get+0x58>)
   4b8a8:	ab05      	add	r3, sp, #20
   4b8aa:	f10d 0212 	add.w	r2, sp, #18
   4b8ae:	f005 ff11 	bl	516d4 <nrf_modem_at_scanf>
		"%hu,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   4b8b2:	2800      	cmp	r0, #0
   4b8b4:	dc0e      	bgt.n	4b8d4 <lte_lc_nw_reg_status_get+0x3c>
		LOG_ERR("Could not get registration status, error: %d", err);
   4b8b6:	4b0f      	ldr	r3, [pc, #60]	; (4b8f4 <lte_lc_nw_reg_status_get+0x5c>)
   4b8b8:	9003      	str	r0, [sp, #12]
   4b8ba:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4b8be:	4628      	mov	r0, r5
   4b8c0:	462b      	mov	r3, r5
   4b8c2:	2201      	movs	r2, #1
   4b8c4:	490c      	ldr	r1, [pc, #48]	; (4b8f8 <lte_lc_nw_reg_status_get+0x60>)
   4b8c6:	9500      	str	r5, [sp, #0]
   4b8c8:	f00c f871 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4b8cc:	f06f 000d 	mvn.w	r0, #13
	} else {
		*status = status_tmp;
	}

	return 0;
}
   4b8d0:	b007      	add	sp, #28
   4b8d2:	bd30      	pop	{r4, r5, pc}
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   4b8d4:	9b05      	ldr	r3, [sp, #20]
	return 0;
   4b8d6:	2000      	movs	r0, #0
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   4b8d8:	3301      	adds	r3, #1
		*status = status_tmp;
   4b8da:	bf0c      	ite	eq
   4b8dc:	2304      	moveq	r3, #4
   4b8de:	f89d 3012 	ldrbne.w	r3, [sp, #18]
		*status = LTE_LC_NW_REG_UNKNOWN;
   4b8e2:	7023      	strb	r3, [r4, #0]
   4b8e4:	e7f4      	b.n	4b8d0 <lte_lc_nw_reg_status_get+0x38>
		return -EINVAL;
   4b8e6:	f06f 0015 	mvn.w	r0, #21
   4b8ea:	e7f1      	b.n	4b8d0 <lte_lc_nw_reg_status_get+0x38>
   4b8ec:	0005ef23 	.word	0x0005ef23
   4b8f0:	0005ef40 	.word	0x0005ef40
   4b8f4:	0005ef4a 	.word	0x0005ef4a
   4b8f8:	0005bf04 	.word	0x0005bf04

0004b8fc <lte_lc_system_mode_set>:

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   4b8fc:	b530      	push	{r4, r5, lr}
	int err;

	switch (mode) {
   4b8fe:	2807      	cmp	r0, #7
{
   4b900:	4605      	mov	r5, r0
   4b902:	460c      	mov	r4, r1
   4b904:	b085      	sub	sp, #20
	switch (mode) {
   4b906:	d90e      	bls.n	4b926 <lte_lc_system_mode_set+0x2a>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   4b908:	4b19      	ldr	r3, [pc, #100]	; (4b970 <lte_lc_system_mode_set+0x74>)
   4b90a:	9003      	str	r0, [sp, #12]
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   4b90c:	9302      	str	r3, [sp, #8]
   4b90e:	2300      	movs	r3, #0
   4b910:	2201      	movs	r2, #1
   4b912:	4618      	mov	r0, r3
   4b914:	e9cd 3300 	strd	r3, r3, [sp]
   4b918:	4916      	ldr	r1, [pc, #88]	; (4b974 <lte_lc_system_mode_set+0x78>)
   4b91a:	f00c f848 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   4b91e:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   4b922:	b005      	add	sp, #20
   4b924:	bd30      	pop	{r4, r5, pc}
	switch (preference) {
   4b926:	2904      	cmp	r1, #4
   4b928:	d902      	bls.n	4b930 <lte_lc_system_mode_set+0x34>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   4b92a:	4b13      	ldr	r3, [pc, #76]	; (4b978 <lte_lc_system_mode_set+0x7c>)
   4b92c:	9103      	str	r1, [sp, #12]
   4b92e:	e7ed      	b.n	4b90c <lte_lc_system_mode_set+0x10>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   4b930:	4b12      	ldr	r3, [pc, #72]	; (4b97c <lte_lc_system_mode_set+0x80>)
   4b932:	5c5a      	ldrb	r2, [r3, r1]
   4b934:	4b12      	ldr	r3, [pc, #72]	; (4b980 <lte_lc_system_mode_set+0x84>)
   4b936:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   4b93a:	4812      	ldr	r0, [pc, #72]	; (4b984 <lte_lc_system_mode_set+0x88>)
   4b93c:	f005 fde6 	bl	5150c <nrf_modem_at_printf>
	if (err) {
   4b940:	b168      	cbz	r0, 4b95e <lte_lc_system_mode_set+0x62>
		LOG_ERR("Could not send AT command, error: %d", err);
   4b942:	4b11      	ldr	r3, [pc, #68]	; (4b988 <lte_lc_system_mode_set+0x8c>)
   4b944:	9003      	str	r0, [sp, #12]
   4b946:	9302      	str	r3, [sp, #8]
   4b948:	2300      	movs	r3, #0
   4b94a:	2201      	movs	r2, #1
   4b94c:	4618      	mov	r0, r3
   4b94e:	e9cd 3300 	strd	r3, r3, [sp]
   4b952:	4908      	ldr	r1, [pc, #32]	; (4b974 <lte_lc_system_mode_set+0x78>)
   4b954:	f00c f82b 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4b958:	f06f 000d 	mvn.w	r0, #13
   4b95c:	e7e1      	b.n	4b922 <lte_lc_system_mode_set+0x26>
	sys_mode_current = mode;
   4b95e:	4b0b      	ldr	r3, [pc, #44]	; (4b98c <lte_lc_system_mode_set+0x90>)
   4b960:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   4b962:	4b0b      	ldr	r3, [pc, #44]	; (4b990 <lte_lc_system_mode_set+0x94>)
   4b964:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   4b966:	4b0b      	ldr	r3, [pc, #44]	; (4b994 <lte_lc_system_mode_set+0x98>)
   4b968:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   4b96a:	4b0b      	ldr	r3, [pc, #44]	; (4b998 <lte_lc_system_mode_set+0x9c>)
   4b96c:	701c      	strb	r4, [r3, #0]
	return 0;
   4b96e:	e7d8      	b.n	4b922 <lte_lc_system_mode_set+0x26>
   4b970:	0005ef77 	.word	0x0005ef77
   4b974:	0005bf04 	.word	0x0005bf04
   4b978:	0005ef99 	.word	0x0005ef99
   4b97c:	0005f35a 	.word	0x0005f35a
   4b980:	0005c470 	.word	0x0005c470
   4b984:	0005efbe 	.word	0x0005efbe
   4b988:	0005efd4 	.word	0x0005efd4
   4b98c:	2001f3bc 	.word	0x2001f3bc
   4b990:	2001aa24 	.word	0x2001aa24
   4b994:	2001f3bd 	.word	0x2001f3bd
   4b998:	2001f3be 	.word	0x2001f3be

0004b99c <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   4b99c:	b570      	push	{r4, r5, r6, lr}
	int err;
	int mode_bitmask = 0;
	int ltem_mode = 0;
   4b99e:	2600      	movs	r6, #0
{
   4b9a0:	b088      	sub	sp, #32
   4b9a2:	460c      	mov	r4, r1
	int nbiot_mode = 0;
	int gps_mode = 0;
	int mode_preference = 0;

	if (mode == NULL) {
   4b9a4:	4605      	mov	r5, r0
	int nbiot_mode = 0;
   4b9a6:	e9cd 6604 	strd	r6, r6, [sp, #16]
	int mode_preference = 0;
   4b9aa:	e9cd 6606 	strd	r6, r6, [sp, #24]
	if (mode == NULL) {
   4b9ae:	2800      	cmp	r0, #0
   4b9b0:	f000 8081 	beq.w	4bab6 <lte_lc_system_mode_get+0x11a>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   4b9b4:	ab07      	add	r3, sp, #28
   4b9b6:	9301      	str	r3, [sp, #4]
   4b9b8:	ab06      	add	r3, sp, #24
   4b9ba:	9300      	str	r3, [sp, #0]
   4b9bc:	493f      	ldr	r1, [pc, #252]	; (4babc <lte_lc_system_mode_get+0x120>)
   4b9be:	4840      	ldr	r0, [pc, #256]	; (4bac0 <lte_lc_system_mode_get+0x124>)
   4b9c0:	ab05      	add	r3, sp, #20
   4b9c2:	aa04      	add	r2, sp, #16
   4b9c4:	f005 fe86 	bl	516d4 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   4b9c8:	2804      	cmp	r0, #4
   4b9ca:	d00b      	beq.n	4b9e4 <lte_lc_system_mode_get+0x48>
		LOG_ERR("Failed to get system mode, error: %d", err);
   4b9cc:	4b3d      	ldr	r3, [pc, #244]	; (4bac4 <lte_lc_system_mode_get+0x128>)
   4b9ce:	9003      	str	r0, [sp, #12]
   4b9d0:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4b9d4:	9600      	str	r6, [sp, #0]
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   4b9d6:	2300      	movs	r3, #0
   4b9d8:	2201      	movs	r2, #1
   4b9da:	4618      	mov	r0, r3
   4b9dc:	493a      	ldr	r1, [pc, #232]	; (4bac8 <lte_lc_system_mode_get+0x12c>)
   4b9de:	f00b ffe6 	bl	579ae <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
   4b9e2:	e03d      	b.n	4ba60 <lte_lc_system_mode_get+0xc4>
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   4b9e4:	9b05      	ldr	r3, [sp, #20]
   4b9e6:	1e1a      	subs	r2, r3, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   4b9e8:	9b04      	ldr	r3, [sp, #16]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   4b9ea:	bf18      	it	ne
   4b9ec:	2201      	movne	r2, #1
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   4b9ee:	3b00      	subs	r3, #0
   4b9f0:	bf18      	it	ne
   4b9f2:	2301      	movne	r3, #1
   4b9f4:	005b      	lsls	r3, r3, #1
   4b9f6:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   4b9fa:	9a06      	ldr	r2, [sp, #24]
   4b9fc:	3a00      	subs	r2, #0
   4b9fe:	bf18      	it	ne
   4ba00:	2201      	movne	r2, #1
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   4ba02:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
	switch (mode_bitmask) {
   4ba06:	2b0e      	cmp	r3, #14
   4ba08:	d820      	bhi.n	4ba4c <lte_lc_system_mode_get+0xb0>
   4ba0a:	e8df f003 	tbb	[pc, r3]
   4ba0e:	1f2c      	.short	0x1f2c
   4ba10:	1f2e1f08 	.word	0x1f2e1f08
   4ba14:	1f151f1b 	.word	0x1f151f1b
   4ba18:	1f191f17 	.word	0x1f191f17
   4ba1c:	1d          	.byte	0x1d
   4ba1d:	00          	.byte	0x00
   4ba1e:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   4ba20:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   4ba22:	2c00      	cmp	r4, #0
   4ba24:	d03d      	beq.n	4baa2 <lte_lc_system_mode_get+0x106>
		switch (mode_preference) {
   4ba26:	9a07      	ldr	r2, [sp, #28]
   4ba28:	2300      	movs	r3, #0
   4ba2a:	2a04      	cmp	r2, #4
   4ba2c:	d833      	bhi.n	4ba96 <lte_lc_system_mode_get+0xfa>
   4ba2e:	e8df f002 	tbb	[pc, r2]
   4ba32:	1e1f      	.short	0x1e1f
   4ba34:	2e2c      	.short	0x2e2c
   4ba36:	30          	.byte	0x30
   4ba37:	00          	.byte	0x00
		break;
   4ba38:	2303      	movs	r3, #3
   4ba3a:	e7f1      	b.n	4ba20 <lte_lc_system_mode_get+0x84>
		break;
   4ba3c:	2304      	movs	r3, #4
   4ba3e:	e7ef      	b.n	4ba20 <lte_lc_system_mode_get+0x84>
		break;
   4ba40:	2305      	movs	r3, #5
   4ba42:	e7ed      	b.n	4ba20 <lte_lc_system_mode_get+0x84>
		break;
   4ba44:	2306      	movs	r3, #6
   4ba46:	e7eb      	b.n	4ba20 <lte_lc_system_mode_get+0x84>
		break;
   4ba48:	2307      	movs	r3, #7
   4ba4a:	e7e9      	b.n	4ba20 <lte_lc_system_mode_get+0x84>
		LOG_ERR("Invalid system mode, assuming parsing error");
   4ba4c:	4b1f      	ldr	r3, [pc, #124]	; (4bacc <lte_lc_system_mode_get+0x130>)
   4ba4e:	2201      	movs	r2, #1
   4ba50:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4ba54:	2300      	movs	r3, #0
   4ba56:	491c      	ldr	r1, [pc, #112]	; (4bac8 <lte_lc_system_mode_get+0x12c>)
   4ba58:	4618      	mov	r0, r3
   4ba5a:	9600      	str	r6, [sp, #0]
   4ba5c:	f00b ffa7 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4ba60:	f06f 000d 	mvn.w	r0, #13
   4ba64:	e023      	b.n	4baae <lte_lc_system_mode_get+0x112>
	switch (mode_bitmask) {
   4ba66:	2300      	movs	r3, #0
   4ba68:	e7da      	b.n	4ba20 <lte_lc_system_mode_get+0x84>
   4ba6a:	2302      	movs	r3, #2
   4ba6c:	e7d8      	b.n	4ba20 <lte_lc_system_mode_get+0x84>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   4ba6e:	2301      	movs	r3, #1
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   4ba70:	7023      	strb	r3, [r4, #0]
		}
	}

	if (sys_mode_current != *mode) {
   4ba72:	4b17      	ldr	r3, [pc, #92]	; (4bad0 <lte_lc_system_mode_get+0x134>)
   4ba74:	782a      	ldrb	r2, [r5, #0]
   4ba76:	7819      	ldrb	r1, [r3, #0]
   4ba78:	4291      	cmp	r1, r2
   4ba7a:	d11a      	bne.n	4bab2 <lte_lc_system_mode_get+0x116>
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
	}

	if ((preference != NULL) && (mode_pref_current != *preference)) {
   4ba7c:	4b15      	ldr	r3, [pc, #84]	; (4bad4 <lte_lc_system_mode_get+0x138>)
   4ba7e:	7822      	ldrb	r2, [r4, #0]
   4ba80:	7819      	ldrb	r1, [r3, #0]
   4ba82:	4291      	cmp	r1, r2
   4ba84:	d012      	beq.n	4baac <lte_lc_system_mode_get+0x110>
		LOG_DBG("Current system mode preference updated from %d to %d",
			mode_pref_current, *preference);
		mode_pref_current = *preference;
   4ba86:	701a      	strb	r2, [r3, #0]
   4ba88:	e010      	b.n	4baac <lte_lc_system_mode_get+0x110>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   4ba8a:	2302      	movs	r3, #2
   4ba8c:	e7f0      	b.n	4ba70 <lte_lc_system_mode_get+0xd4>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   4ba8e:	2303      	movs	r3, #3
   4ba90:	e7ee      	b.n	4ba70 <lte_lc_system_mode_get+0xd4>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   4ba92:	2304      	movs	r3, #4
   4ba94:	e7ec      	b.n	4ba70 <lte_lc_system_mode_get+0xd4>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   4ba96:	9203      	str	r2, [sp, #12]
   4ba98:	4a0f      	ldr	r2, [pc, #60]	; (4bad8 <lte_lc_system_mode_get+0x13c>)
   4ba9a:	9300      	str	r3, [sp, #0]
   4ba9c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4baa0:	e799      	b.n	4b9d6 <lte_lc_system_mode_get+0x3a>
	if (sys_mode_current != *mode) {
   4baa2:	4a0b      	ldr	r2, [pc, #44]	; (4bad0 <lte_lc_system_mode_get+0x134>)
   4baa4:	7811      	ldrb	r1, [r2, #0]
   4baa6:	4299      	cmp	r1, r3
		sys_mode_current = *mode;
   4baa8:	bf18      	it	ne
   4baaa:	7013      	strbne	r3, [r2, #0]
	}

	return 0;
   4baac:	2000      	movs	r0, #0
}
   4baae:	b008      	add	sp, #32
   4bab0:	bd70      	pop	{r4, r5, r6, pc}
		sys_mode_current = *mode;
   4bab2:	701a      	strb	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   4bab4:	e7e2      	b.n	4ba7c <lte_lc_system_mode_get+0xe0>
		return -EINVAL;
   4bab6:	f06f 0015 	mvn.w	r0, #21
   4baba:	e7f8      	b.n	4baae <lte_lc_system_mode_get+0x112>
   4babc:	0005eff9 	.word	0x0005eff9
   4bac0:	0005f014 	.word	0x0005f014
   4bac4:	0005f024 	.word	0x0005f024
   4bac8:	0005bf04 	.word	0x0005bf04
   4bacc:	0005f049 	.word	0x0005f049
   4bad0:	2001f3bc 	.word	0x2001f3bc
   4bad4:	2001f3bd 	.word	0x2001f3bd
   4bad8:	0005f075 	.word	0x0005f075

0004badc <init_and_config>:
{
   4badc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (is_initialized) {
   4bae0:	4e24      	ldr	r6, [pc, #144]	; (4bb74 <init_and_config+0x98>)
   4bae2:	7835      	ldrb	r5, [r6, #0]
   4bae4:	2d00      	cmp	r5, #0
   4bae6:	d143      	bne.n	4bb70 <init_and_config+0x94>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   4bae8:	4f23      	ldr	r7, [pc, #140]	; (4bb78 <init_and_config+0x9c>)
   4baea:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 4bb98 <init_and_config+0xbc>
	return z_impl_k_sem_init(sem, initial_count, limit);
   4baee:	2201      	movs	r2, #1
   4baf0:	4629      	mov	r1, r5
   4baf2:	4822      	ldr	r0, [pc, #136]	; (4bb7c <init_and_config+0xa0>)
   4baf4:	f00e ff1b 	bl	5a92e <z_impl_k_sem_init>
   4baf8:	4639      	mov	r1, r7
   4bafa:	4640      	mov	r0, r8
   4bafc:	f7ff ff4e 	bl	4b99c <lte_lc_system_mode_get>
	if (err) {
   4bb00:	4604      	mov	r4, r0
   4bb02:	b170      	cbz	r0, 4bb22 <init_and_config+0x46>
		LOG_ERR("Could not get current system mode, error: %d", err);
   4bb04:	4b1e      	ldr	r3, [pc, #120]	; (4bb80 <init_and_config+0xa4>)
   4bb06:	9003      	str	r0, [sp, #12]
   4bb08:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4bb0c:	462b      	mov	r3, r5
   4bb0e:	9500      	str	r5, [sp, #0]
			LOG_ERR("Could not set system mode, error: %d", err);
   4bb10:	2201      	movs	r2, #1
   4bb12:	4618      	mov	r0, r3
   4bb14:	491b      	ldr	r1, [pc, #108]	; (4bb84 <init_and_config+0xa8>)
   4bb16:	f00b ff4a 	bl	579ae <z_log_msg_runtime_create.constprop.0>
}
   4bb1a:	4620      	mov	r0, r4
   4bb1c:	b004      	add	sp, #16
   4bb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((sys_mode_current != sys_mode_target) ||
   4bb22:	4b19      	ldr	r3, [pc, #100]	; (4bb88 <init_and_config+0xac>)
   4bb24:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   4bb26:	4b19      	ldr	r3, [pc, #100]	; (4bb8c <init_and_config+0xb0>)
   4bb28:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   4bb2a:	f898 3000 	ldrb.w	r3, [r8]
   4bb2e:	4283      	cmp	r3, r0
   4bb30:	d102      	bne.n	4bb38 <init_and_config+0x5c>
   4bb32:	783b      	ldrb	r3, [r7, #0]
   4bb34:	428b      	cmp	r3, r1
   4bb36:	d00a      	beq.n	4bb4e <init_and_config+0x72>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   4bb38:	f7ff fee0 	bl	4b8fc <lte_lc_system_mode_set>
		if (err) {
   4bb3c:	4604      	mov	r4, r0
   4bb3e:	b130      	cbz	r0, 4bb4e <init_and_config+0x72>
			LOG_ERR("Could not set system mode, error: %d", err);
   4bb40:	4b13      	ldr	r3, [pc, #76]	; (4bb90 <init_and_config+0xb4>)
   4bb42:	9003      	str	r0, [sp, #12]
   4bb44:	9302      	str	r3, [sp, #8]
   4bb46:	2300      	movs	r3, #0
   4bb48:	e9cd 3300 	strd	r3, r3, [sp]
   4bb4c:	e7e0      	b.n	4bb10 <init_and_config+0x34>
	err = enable_notifications();
   4bb4e:	f7ff faa9 	bl	4b0a4 <enable_notifications>
	if (err) {
   4bb52:	4604      	mov	r4, r0
   4bb54:	b150      	cbz	r0, 4bb6c <init_and_config+0x90>
		LOG_ERR("Failed to enable notifications");
   4bb56:	4b0f      	ldr	r3, [pc, #60]	; (4bb94 <init_and_config+0xb8>)
   4bb58:	2201      	movs	r2, #1
   4bb5a:	9302      	str	r3, [sp, #8]
   4bb5c:	2300      	movs	r3, #0
   4bb5e:	4909      	ldr	r1, [pc, #36]	; (4bb84 <init_and_config+0xa8>)
   4bb60:	4618      	mov	r0, r3
   4bb62:	e9cd 3300 	strd	r3, r3, [sp]
   4bb66:	f00b ff22 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return err;
   4bb6a:	e7d6      	b.n	4bb1a <init_and_config+0x3e>
	is_initialized = true;
   4bb6c:	2301      	movs	r3, #1
   4bb6e:	7033      	strb	r3, [r6, #0]
		return 0;
   4bb70:	2400      	movs	r4, #0
   4bb72:	e7d2      	b.n	4bb1a <init_and_config+0x3e>
   4bb74:	2001f3cc 	.word	0x2001f3cc
   4bb78:	2001f3bd 	.word	0x2001f3bd
   4bb7c:	2001b854 	.word	0x2001b854
   4bb80:	0005f094 	.word	0x0005f094
   4bb84:	0005bf04 	.word	0x0005bf04
   4bb88:	2001aa24 	.word	0x2001aa24
   4bb8c:	2001f3be 	.word	0x2001f3be
   4bb90:	0005f0c1 	.word	0x0005f0c1
   4bb94:	0005f0e6 	.word	0x0005f0e6
   4bb98:	2001f3bc 	.word	0x2001f3bc

0004bb9c <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   4bb9c:	b510      	push	{r4, lr}
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   4bb9e:	4604      	mov	r4, r0
{
   4bba0:	b086      	sub	sp, #24
	if (mode == NULL) {
   4bba2:	b1e0      	cbz	r0, 4bbde <lte_lc_func_mode_get+0x42>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   4bba4:	490f      	ldr	r1, [pc, #60]	; (4bbe4 <lte_lc_func_mode_get+0x48>)
   4bba6:	4810      	ldr	r0, [pc, #64]	; (4bbe8 <lte_lc_func_mode_get+0x4c>)
   4bba8:	f10d 0216 	add.w	r2, sp, #22
   4bbac:	f005 fd92 	bl	516d4 <nrf_modem_at_scanf>
	if (err != 1) {
   4bbb0:	2801      	cmp	r0, #1
   4bbb2:	f04f 0300 	mov.w	r3, #0
   4bbb6:	d00d      	beq.n	4bbd4 <lte_lc_func_mode_get+0x38>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   4bbb8:	4a0c      	ldr	r2, [pc, #48]	; (4bbec <lte_lc_func_mode_get+0x50>)
   4bbba:	9003      	str	r0, [sp, #12]
   4bbbc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4bbc0:	4618      	mov	r0, r3
   4bbc2:	2201      	movs	r2, #1
   4bbc4:	490a      	ldr	r1, [pc, #40]	; (4bbf0 <lte_lc_func_mode_get+0x54>)
   4bbc6:	9300      	str	r3, [sp, #0]
   4bbc8:	f00b fef1 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4bbcc:	f06f 000d 	mvn.w	r0, #13
	}

	*mode = mode_tmp;

	return 0;
}
   4bbd0:	b006      	add	sp, #24
   4bbd2:	bd10      	pop	{r4, pc}
	*mode = mode_tmp;
   4bbd4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
	return 0;
   4bbd8:	4618      	mov	r0, r3
	*mode = mode_tmp;
   4bbda:	7022      	strb	r2, [r4, #0]
	return 0;
   4bbdc:	e7f8      	b.n	4bbd0 <lte_lc_func_mode_get+0x34>
		return -EINVAL;
   4bbde:	f06f 0015 	mvn.w	r0, #21
   4bbe2:	e7f5      	b.n	4bbd0 <lte_lc_func_mode_get+0x34>
   4bbe4:	0005f105 	.word	0x0005f105
   4bbe8:	0005f110 	.word	0x0005f110
   4bbec:	0005f119 	.word	0x0005f119
   4bbf0:	0005bf04 	.word	0x0005bf04

0004bbf4 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   4bbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	switch (mode) {
   4bbf6:	2804      	cmp	r0, #4
{
   4bbf8:	4604      	mov	r4, r0
   4bbfa:	b085      	sub	sp, #20
	switch (mode) {
   4bbfc:	d820      	bhi.n	4bc40 <lte_lc_func_mode_set+0x4c>
   4bbfe:	2804      	cmp	r0, #4
   4bc00:	d823      	bhi.n	4bc4a <lte_lc_func_mode_set+0x56>
   4bc02:	e8df f000 	tbb	[pc, r0]
   4bc06:	303a      	.short	0x303a
   4bc08:	223a      	.short	0x223a
   4bc0a:	3a          	.byte	0x3a
   4bc0b:	00          	.byte	0x00
   4bc0c:	2501      	movs	r5, #1
   4bc0e:	4b29      	ldr	r3, [pc, #164]	; (4bcb4 <lte_lc_func_mode_set+0xc0>)
   4bc10:	40b5      	lsls	r5, r6
   4bc12:	401d      	ands	r5, r3
   4bc14:	d131      	bne.n	4bc7a <lte_lc_func_mode_set+0x86>
   4bc16:	2e01      	cmp	r6, #1
   4bc18:	d117      	bne.n	4bc4a <lte_lc_func_mode_set+0x56>
	case LTE_LC_FUNC_MODE_ACTIVATE_LTE:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_ACTIVATE_LTE);

		err = enable_notifications();
   4bc1a:	f7ff fa43 	bl	4b0a4 <enable_notifications>
		if (err) {
   4bc1e:	b360      	cbz	r0, 4bc7a <lte_lc_func_mode_set+0x86>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   4bc20:	4b25      	ldr	r3, [pc, #148]	; (4bcb8 <lte_lc_func_mode_set+0xc4>)
   4bc22:	9003      	str	r0, [sp, #12]
   4bc24:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4bc28:	462b      	mov	r3, r5
   4bc2a:	9500      	str	r5, [sp, #0]
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
		if (err) {
			LOG_ERR("Failed to enable notifications, error: %d", err);
   4bc2c:	2201      	movs	r2, #1
   4bc2e:	4618      	mov	r0, r3
   4bc30:	4922      	ldr	r1, [pc, #136]	; (4bcbc <lte_lc_func_mode_set+0xc8>)
   4bc32:	f00b febc 	bl	579ae <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
   4bc36:	f06f 050d 	mvn.w	r5, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   4bc3a:	4628      	mov	r0, r5
   4bc3c:	b005      	add	sp, #20
   4bc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (mode) {
   4bc40:	f1a0 0614 	sub.w	r6, r0, #20
   4bc44:	b2f6      	uxtb	r6, r6
   4bc46:	2e18      	cmp	r6, #24
   4bc48:	d9e0      	bls.n	4bc0c <lte_lc_func_mode_set+0x18>
		LOG_ERR("Invalid functional mode: %d", mode);
   4bc4a:	4b1d      	ldr	r3, [pc, #116]	; (4bcc0 <lte_lc_func_mode_set+0xcc>)
   4bc4c:	2201      	movs	r2, #1
   4bc4e:	9302      	str	r3, [sp, #8]
   4bc50:	2300      	movs	r3, #0
   4bc52:	491a      	ldr	r1, [pc, #104]	; (4bcbc <lte_lc_func_mode_set+0xc8>)
   4bc54:	4618      	mov	r0, r3
   4bc56:	e9cd 3300 	strd	r3, r3, [sp]
   4bc5a:	9403      	str	r4, [sp, #12]
   4bc5c:	f00b fea7 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   4bc60:	f06f 0515 	mvn.w	r5, #21
   4bc64:	e7e9      	b.n	4bc3a <lte_lc_func_mode_set+0x46>
		err = enable_notifications();
   4bc66:	f7ff fa1d 	bl	4b0a4 <enable_notifications>
		if (err) {
   4bc6a:	b130      	cbz	r0, 4bc7a <lte_lc_func_mode_set+0x86>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   4bc6c:	4b12      	ldr	r3, [pc, #72]	; (4bcb8 <lte_lc_func_mode_set+0xc4>)
   4bc6e:	9003      	str	r0, [sp, #12]
   4bc70:	9302      	str	r3, [sp, #8]
   4bc72:	2300      	movs	r3, #0
   4bc74:	e9cd 3300 	strd	r3, r3, [sp]
   4bc78:	e7d8      	b.n	4bc2c <lte_lc_func_mode_set+0x38>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   4bc7a:	4621      	mov	r1, r4
   4bc7c:	4811      	ldr	r0, [pc, #68]	; (4bcc4 <lte_lc_func_mode_set+0xd0>)
   4bc7e:	f005 fc45 	bl	5150c <nrf_modem_at_printf>
	if (err) {
   4bc82:	4605      	mov	r5, r0
   4bc84:	b190      	cbz	r0, 4bcac <lte_lc_func_mode_set+0xb8>
		LOG_ERR("Failed to set functional mode. Please check XSYSTEMMODE.");
   4bc86:	4b10      	ldr	r3, [pc, #64]	; (4bcc8 <lte_lc_func_mode_set+0xd4>)
   4bc88:	2201      	movs	r2, #1
   4bc8a:	9302      	str	r3, [sp, #8]
   4bc8c:	2300      	movs	r3, #0
   4bc8e:	490b      	ldr	r1, [pc, #44]	; (4bcbc <lte_lc_func_mode_set+0xc8>)
   4bc90:	4618      	mov	r0, r3
   4bc92:	e9cd 3300 	strd	r3, r3, [sp]
   4bc96:	f00b fe8a 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4bc9a:	e7cc      	b.n	4bc36 <lte_lc_func_mode_set+0x42>
		e->callback(mode, e->context);
   4bc9c:	e9d6 3100 	ldrd	r3, r1, [r6]
   4bca0:	4620      	mov	r0, r4
   4bca2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   4bca4:	3608      	adds	r6, #8
   4bca6:	42be      	cmp	r6, r7
   4bca8:	d3f8      	bcc.n	4bc9c <lte_lc_func_mode_set+0xa8>
   4bcaa:	e7c6      	b.n	4bc3a <lte_lc_func_mode_set+0x46>
   4bcac:	4e07      	ldr	r6, [pc, #28]	; (4bccc <lte_lc_func_mode_set+0xd8>)
   4bcae:	4f08      	ldr	r7, [pc, #32]	; (4bcd0 <lte_lc_func_mode_set+0xdc>)
   4bcb0:	e7f9      	b.n	4bca6 <lte_lc_func_mode_set+0xb2>
   4bcb2:	bf00      	nop
   4bcb4:	01300c01 	.word	0x01300c01
   4bcb8:	0005f154 	.word	0x0005f154
   4bcbc:	0005bf04 	.word	0x0005bf04
   4bcc0:	0005f17e 	.word	0x0005f17e
   4bcc4:	0005f19a 	.word	0x0005f19a
   4bcc8:	0005f1a5 	.word	0x0005f1a5
   4bccc:	00060b4c 	.word	0x00060b4c
   4bcd0:	00060b4c 	.word	0x00060b4c

0004bcd4 <connect_lte>:
{
   4bcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!is_initialized) {
   4bcd8:	4b49      	ldr	r3, [pc, #292]	; (4be00 <connect_lte+0x12c>)
{
   4bcda:	4605      	mov	r5, r0
	if (!is_initialized) {
   4bcdc:	781b      	ldrb	r3, [r3, #0]
{
   4bcde:	b086      	sub	sp, #24
	if (!is_initialized) {
   4bce0:	b96b      	cbnz	r3, 4bcfe <connect_lte+0x2a>
		LOG_ERR("The LTE link controller is not initialized");
   4bce2:	4a48      	ldr	r2, [pc, #288]	; (4be04 <connect_lte+0x130>)
   4bce4:	4618      	mov	r0, r3
   4bce6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4bcea:	4947      	ldr	r1, [pc, #284]	; (4be08 <connect_lte+0x134>)
   4bcec:	2201      	movs	r2, #1
   4bcee:	9300      	str	r3, [sp, #0]
   4bcf0:	f00b fe5d 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   4bcf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   4bcf8:	b006      	add	sp, #24
   4bcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4bcfe:	2701      	movs	r7, #1
   4bd00:	4c42      	ldr	r4, [pc, #264]	; (4be0c <connect_lte+0x138>)
   4bd02:	e8d4 6fef 	ldaex	r6, [r4]
   4bd06:	e8c4 7fe3 	stlex	r3, r7, [r4]
   4bd0a:	2b00      	cmp	r3, #0
   4bd0c:	d1f9      	bne.n	4bd02 <connect_lte+0x2e>
	if (atomic_set(&in_progress, 1)) {
   4bd0e:	2e00      	cmp	r6, #0
   4bd10:	d172      	bne.n	4bdf8 <connect_lte+0x124>
	err = lte_lc_nw_reg_status_get(&reg_status);
   4bd12:	f10d 0017 	add.w	r0, sp, #23
   4bd16:	f7ff fdbf 	bl	4b898 <lte_lc_nw_reg_status_get>
	if (err) {
   4bd1a:	b160      	cbz	r0, 4bd36 <connect_lte+0x62>
		LOG_ERR("Failed to get current registration status");
   4bd1c:	4b3c      	ldr	r3, [pc, #240]	; (4be10 <connect_lte+0x13c>)
   4bd1e:	4630      	mov	r0, r6
   4bd20:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4bd24:	463a      	mov	r2, r7
   4bd26:	4633      	mov	r3, r6
   4bd28:	4937      	ldr	r1, [pc, #220]	; (4be08 <connect_lte+0x134>)
   4bd2a:	9600      	str	r6, [sp, #0]
   4bd2c:	f00b fe3f 	bl	579ae <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4bd30:	f06f 000d 	mvn.w	r0, #13
   4bd34:	e7e0      	b.n	4bcf8 <connect_lte+0x24>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   4bd36:	f89d 3017 	ldrb.w	r3, [sp, #23]
   4bd3a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   4bd3e:	2b01      	cmp	r3, #1
   4bd40:	d017      	beq.n	4bd72 <connect_lte+0x9e>
	if (blocking) {
   4bd42:	b125      	cbz	r5, 4bd4e <connect_lte+0x7a>
   4bd44:	4601      	mov	r1, r0
   4bd46:	463a      	mov	r2, r7
   4bd48:	4832      	ldr	r0, [pc, #200]	; (4be14 <connect_lte+0x140>)
   4bd4a:	f00e fdf0 	bl	5a92e <z_impl_k_sem_init>
{
   4bd4e:	f04f 0802 	mov.w	r8, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   4bd52:	4f31      	ldr	r7, [pc, #196]	; (4be18 <connect_lte+0x144>)
   4bd54:	4e31      	ldr	r6, [pc, #196]	; (4be1c <connect_lte+0x148>)
		err = lte_lc_func_mode_get(&current_func_mode);
   4bd56:	f10d 0016 	add.w	r0, sp, #22
   4bd5a:	f7ff ff1f 	bl	4bb9c <lte_lc_func_mode_get>
		if (err) {
   4bd5e:	b9b0      	cbnz	r0, 4bd8e <connect_lte+0xba>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   4bd60:	f89d 3016 	ldrb.w	r3, [sp, #22]
   4bd64:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   4bd68:	d00b      	beq.n	4bd82 <connect_lte+0xae>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   4bd6a:	2001      	movs	r0, #1
   4bd6c:	f7ff ff42 	bl	4bbf4 <lte_lc_func_mode_set>
		if (err || !blocking) {
   4bd70:	b180      	cbz	r0, 4bd94 <connect_lte+0xc0>
   4bd72:	2300      	movs	r3, #0
   4bd74:	e8d4 2fef 	ldaex	r2, [r4]
   4bd78:	e8c4 3fe1 	stlex	r1, r3, [r4]
   4bd7c:	2900      	cmp	r1, #0
   4bd7e:	d0bb      	beq.n	4bcf8 <connect_lte+0x24>
   4bd80:	e7f8      	b.n	4bd74 <connect_lte+0xa0>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   4bd82:	7839      	ldrb	r1, [r7, #0]
   4bd84:	7830      	ldrb	r0, [r6, #0]
   4bd86:	f7ff fdb9 	bl	4b8fc <lte_lc_system_mode_set>
			if (err) {
   4bd8a:	2800      	cmp	r0, #0
   4bd8c:	d0ed      	beq.n	4bd6a <connect_lte+0x96>
			err = -EFAULT;
   4bd8e:	f06f 000d 	mvn.w	r0, #13
   4bd92:	e7ee      	b.n	4bd72 <connect_lte+0x9e>
		if (err || !blocking) {
   4bd94:	2d00      	cmp	r5, #0
   4bd96:	d0ec      	beq.n	4bd72 <connect_lte+0x9e>
	return z_impl_k_sem_take(sem, timeout);
   4bd98:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   4bd9c:	2300      	movs	r3, #0
   4bd9e:	481d      	ldr	r0, [pc, #116]	; (4be14 <connect_lte+0x140>)
   4bda0:	f006 fc84 	bl	526ac <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   4bda4:	f110 0f0b 	cmn.w	r0, #11
   4bda8:	d1e3      	bne.n	4bd72 <connect_lte+0x9e>
			LOG_INF("Network connection attempt timed out");
   4bdaa:	4b1d      	ldr	r3, [pc, #116]	; (4be20 <connect_lte+0x14c>)
   4bdac:	2203      	movs	r2, #3
   4bdae:	9302      	str	r3, [sp, #8]
   4bdb0:	2300      	movs	r3, #0
   4bdb2:	4915      	ldr	r1, [pc, #84]	; (4be08 <connect_lte+0x134>)
   4bdb4:	4618      	mov	r0, r3
   4bdb6:	e9cd 3300 	strd	r3, r3, [sp]
   4bdba:	f00b fdf8 	bl	579ae <z_log_msg_runtime_create.constprop.0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   4bdbe:	f1b8 0f01 	cmp.w	r8, #1
   4bdc2:	d016      	beq.n	4bdf2 <connect_lte+0x11e>
				if (sys_mode_target == sys_mode_preferred) {
   4bdc4:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   4bdc6:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_fallback;
   4bdc8:	2b01      	cmp	r3, #1
   4bdca:	bf14      	ite	ne
   4bdcc:	2301      	movne	r3, #1
   4bdce:	2302      	moveq	r3, #2
   4bdd0:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   4bdd2:	f7ff ff0f 	bl	4bbf4 <lte_lc_func_mode_set>
   4bdd6:	4603      	mov	r3, r0
				if (err) {
   4bdd8:	2800      	cmp	r0, #0
   4bdda:	d1d8      	bne.n	4bd8e <connect_lte+0xba>
				LOG_INF("Using fallback network mode");
   4bddc:	4a11      	ldr	r2, [pc, #68]	; (4be24 <connect_lte+0x150>)
   4bdde:	490a      	ldr	r1, [pc, #40]	; (4be08 <connect_lte+0x134>)
   4bde0:	e9cd 0201 	strd	r0, r2, [sp, #4]
   4bde4:	9000      	str	r0, [sp, #0]
   4bde6:	2203      	movs	r2, #3
   4bde8:	f00b fde1 	bl	579ae <z_log_msg_runtime_create.constprop.0>
   4bdec:	f04f 0801 	mov.w	r8, #1
   4bdf0:	e7b1      	b.n	4bd56 <connect_lte+0x82>
				err = -ETIMEDOUT;
   4bdf2:	f06f 0073 	mvn.w	r0, #115	; 0x73
   4bdf6:	e7bc      	b.n	4bd72 <connect_lte+0x9e>
		return -EINPROGRESS;
   4bdf8:	f06f 0076 	mvn.w	r0, #118	; 0x76
   4bdfc:	e77c      	b.n	4bcf8 <connect_lte+0x24>
   4bdfe:	bf00      	nop
   4be00:	2001f3cc 	.word	0x2001f3cc
   4be04:	0005f1de 	.word	0x0005f1de
   4be08:	0005bf04 	.word	0x0005bf04
   4be0c:	2001b848 	.word	0x2001b848
   4be10:	0005f209 	.word	0x0005f209
   4be14:	2001b854 	.word	0x2001b854
   4be18:	2001f3bd 	.word	0x2001f3bd
   4be1c:	2001aa24 	.word	0x2001aa24
   4be20:	0005f233 	.word	0x0005f233
   4be24:	0005f258 	.word	0x0005f258

0004be28 <lte_lc_connect_async>:
{
   4be28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (handler) {
   4be2a:	4604      	mov	r4, r0
   4be2c:	b138      	cbz	r0, 4be3e <lte_lc_connect_async+0x16>
		event_handler_list_append_handler(handler);
   4be2e:	f000 f87d 	bl	4bf2c <event_handler_list_append_handler>
	return connect_lte(false);
   4be32:	2000      	movs	r0, #0
}
   4be34:	b004      	add	sp, #16
   4be36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return connect_lte(false);
   4be3a:	f7ff bf4b 	b.w	4bcd4 <connect_lte>
	} else if (event_handler_list_is_empty()) {
   4be3e:	f000 f86d 	bl	4bf1c <event_handler_list_is_empty>
   4be42:	2800      	cmp	r0, #0
   4be44:	d0f5      	beq.n	4be32 <lte_lc_connect_async+0xa>
		LOG_ERR("No handler registered");
   4be46:	4b07      	ldr	r3, [pc, #28]	; (4be64 <lte_lc_connect_async+0x3c>)
   4be48:	4620      	mov	r0, r4
   4be4a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4be4e:	2201      	movs	r2, #1
   4be50:	4623      	mov	r3, r4
   4be52:	4905      	ldr	r1, [pc, #20]	; (4be68 <lte_lc_connect_async+0x40>)
   4be54:	9400      	str	r4, [sp, #0]
   4be56:	f00b fdaa 	bl	579ae <z_log_msg_runtime_create.constprop.0>
}
   4be5a:	f06f 0015 	mvn.w	r0, #21
   4be5e:	b004      	add	sp, #16
   4be60:	bd10      	pop	{r4, pc}
   4be62:	bf00      	nop
   4be64:	0005f274 	.word	0x0005f274
   4be68:	0005bf04 	.word	0x0005bf04

0004be6c <lte_lc_deinit>:
{
   4be6c:	b508      	push	{r3, lr}
	if (is_initialized) {
   4be6e:	4b06      	ldr	r3, [pc, #24]	; (4be88 <lte_lc_deinit+0x1c>)
   4be70:	781a      	ldrb	r2, [r3, #0]
   4be72:	b122      	cbz	r2, 4be7e <lte_lc_deinit+0x12>
		is_initialized = false;
   4be74:	2000      	movs	r0, #0
   4be76:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   4be78:	f7ff febc 	bl	4bbf4 <lte_lc_func_mode_set>
   4be7c:	b908      	cbnz	r0, 4be82 <lte_lc_deinit+0x16>
   4be7e:	2000      	movs	r0, #0
}
   4be80:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   4be82:	f06f 000d 	mvn.w	r0, #13
   4be86:	e7fb      	b.n	4be80 <lte_lc_deinit+0x14>
   4be88:	2001f3cc 	.word	0x2001f3cc

0004be8c <lte_lc_neighbor_cell_measurement>:

	return 0;
}

int lte_lc_neighbor_cell_measurement(struct lte_lc_ncellmeas_params *params)
{
   4be8c:	b570      	push	{r4, r5, r6, lr}
			(int)params,
			LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT,
			LTE_LC_NEIGHBOR_SEARCH_TYPE_GCI_EXTENDED_COMPLETE),
		 "Invalid argument, API does not accept enum values directly anymore");

	if (ncellmeas_ongoing) {
   4be8e:	4e18      	ldr	r6, [pc, #96]	; (4bef0 <lte_lc_neighbor_cell_measurement+0x64>)
{
   4be90:	4604      	mov	r4, r0
	if (ncellmeas_ongoing) {
   4be92:	7833      	ldrb	r3, [r6, #0]
   4be94:	bb2b      	cbnz	r3, 4bee2 <lte_lc_neighbor_cell_measurement+0x56>
		return -EINPROGRESS;
	}

	if (params != NULL) {
   4be96:	b308      	cbz	r0, 4bedc <lte_lc_neighbor_cell_measurement+0x50>
		used_params = *params;
   4be98:	7805      	ldrb	r5, [r0, #0]
   4be9a:	7844      	ldrb	r4, [r0, #1]
	 * If the type is LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT, we therefore use the AT
	 * command without parameters to avoid error messages for older firmware version.
	 * Starting from modem firmware v1.3.4, additional CGI search types and
	 * GCI count are supported.
	 */
	if (used_params.search_type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_LIGHT) {
   4be9c:	2d02      	cmp	r5, #2
   4be9e:	d103      	bne.n	4bea8 <lte_lc_neighbor_cell_measurement+0x1c>
		err = nrf_modem_at_printf("AT%%NCELLMEAS=1");
   4bea0:	4814      	ldr	r0, [pc, #80]	; (4bef4 <lte_lc_neighbor_cell_measurement+0x68>)
		err = nrf_modem_at_printf("AT%%NCELLMEAS=4,%d", used_params.gci_count);
	} else if (used_params.search_type == LTE_LC_NEIGHBOR_SEARCH_TYPE_GCI_EXTENDED_COMPLETE) {
		err = nrf_modem_at_printf("AT%%NCELLMEAS=5,%d", used_params.gci_count);
	} else {
		/* Defaulting to use LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT */
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   4bea2:	f005 fb33 	bl	5150c <nrf_modem_at_printf>
   4bea6:	e00c      	b.n	4bec2 <lte_lc_neighbor_cell_measurement+0x36>
	} else if (used_params.search_type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   4bea8:	1eeb      	subs	r3, r5, #3
   4beaa:	2b03      	cmp	r3, #3
   4beac:	d817      	bhi.n	4bede <lte_lc_neighbor_cell_measurement+0x52>
   4beae:	e8df f003 	tbb	[pc, r3]
   4beb2:	0402      	.short	0x0402
   4beb4:	120f      	.short	0x120f
		err = nrf_modem_at_printf("AT%%NCELLMEAS=2");
   4beb6:	4810      	ldr	r0, [pc, #64]	; (4bef8 <lte_lc_neighbor_cell_measurement+0x6c>)
   4beb8:	e7f3      	b.n	4bea2 <lte_lc_neighbor_cell_measurement+0x16>
		err = nrf_modem_at_printf("AT%%NCELLMEAS=3,%d", used_params.gci_count);
   4beba:	4621      	mov	r1, r4
   4bebc:	480f      	ldr	r0, [pc, #60]	; (4befc <lte_lc_neighbor_cell_measurement+0x70>)
		err = nrf_modem_at_printf("AT%%NCELLMEAS=5,%d", used_params.gci_count);
   4bebe:	f005 fb25 	bl	5150c <nrf_modem_at_printf>
	}

	if (err) {
   4bec2:	b988      	cbnz	r0, 4bee8 <lte_lc_neighbor_cell_measurement+0x5c>
		err = -EFAULT;
	} else {
		ncellmeas_params = used_params;
   4bec4:	4b0e      	ldr	r3, [pc, #56]	; (4bf00 <lte_lc_neighbor_cell_measurement+0x74>)
   4bec6:	701d      	strb	r5, [r3, #0]
   4bec8:	705c      	strb	r4, [r3, #1]
		ncellmeas_ongoing = true;
   4beca:	2301      	movs	r3, #1
   4becc:	7033      	strb	r3, [r6, #0]
	}

	return err;
}
   4bece:	bd70      	pop	{r4, r5, r6, pc}
		err = nrf_modem_at_printf("AT%%NCELLMEAS=4,%d", used_params.gci_count);
   4bed0:	4621      	mov	r1, r4
   4bed2:	480c      	ldr	r0, [pc, #48]	; (4bf04 <lte_lc_neighbor_cell_measurement+0x78>)
   4bed4:	e7f3      	b.n	4bebe <lte_lc_neighbor_cell_measurement+0x32>
		err = nrf_modem_at_printf("AT%%NCELLMEAS=5,%d", used_params.gci_count);
   4bed6:	4621      	mov	r1, r4
   4bed8:	480b      	ldr	r0, [pc, #44]	; (4bf08 <lte_lc_neighbor_cell_measurement+0x7c>)
   4beda:	e7f0      	b.n	4bebe <lte_lc_neighbor_cell_measurement+0x32>
	struct lte_lc_ncellmeas_params used_params = {
   4bedc:	2501      	movs	r5, #1
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   4bede:	480b      	ldr	r0, [pc, #44]	; (4bf0c <lte_lc_neighbor_cell_measurement+0x80>)
   4bee0:	e7df      	b.n	4bea2 <lte_lc_neighbor_cell_measurement+0x16>
		return -EINPROGRESS;
   4bee2:	f06f 0076 	mvn.w	r0, #118	; 0x76
   4bee6:	e7f2      	b.n	4bece <lte_lc_neighbor_cell_measurement+0x42>
		err = -EFAULT;
   4bee8:	f06f 000d 	mvn.w	r0, #13
   4beec:	e7ef      	b.n	4bece <lte_lc_neighbor_cell_measurement+0x42>
   4beee:	bf00      	nop
   4bef0:	2001f3bf 	.word	0x2001f3bf
   4bef4:	0005f28a 	.word	0x0005f28a
   4bef8:	0005f29a 	.word	0x0005f29a
   4befc:	0005f2aa 	.word	0x0005f2aa
   4bf00:	2001f3c0 	.word	0x2001f3c0
   4bf04:	0005f2bd 	.word	0x0005f2bd
   4bf08:	0005f2d0 	.word	0x0005f2d0
   4bf0c:	0005f2e3 	.word	0x0005f2e3

0004bf10 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   4bf10:	4801      	ldr	r0, [pc, #4]	; (4bf18 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   4bf12:	f006 bb35 	b.w	52580 <z_impl_k_mutex_unlock>
   4bf16:	bf00      	nop
   4bf18:	2001ab98 	.word	0x2001ab98

0004bf1c <event_handler_list_is_empty>:
	return list->head;
   4bf1c:	4b02      	ldr	r3, [pc, #8]	; (4bf28 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   4bf1e:	6818      	ldr	r0, [r3, #0]
}
   4bf20:	fab0 f080 	clz	r0, r0
   4bf24:	0940      	lsrs	r0, r0, #5
   4bf26:	4770      	bx	lr
   4bf28:	2001b86c 	.word	0x2001b86c

0004bf2c <event_handler_list_append_handler>:
{
   4bf2c:	b570      	push	{r4, r5, r6, lr}
   4bf2e:	4606      	mov	r6, r0
	return list->head;
   4bf30:	4d12      	ldr	r5, [pc, #72]	; (4bf7c <event_handler_list_append_handler+0x50>)
	return z_impl_k_mutex_lock(mutex, timeout);
   4bf32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4bf36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4bf3a:	4811      	ldr	r0, [pc, #68]	; (4bf80 <event_handler_list_append_handler+0x54>)
   4bf3c:	f006 faa6 	bl	5248c <z_impl_k_mutex_lock>
   4bf40:	682c      	ldr	r4, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   4bf42:	b944      	cbnz	r4, 4bf56 <event_handler_list_append_handler+0x2a>
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   4bf44:	2008      	movs	r0, #8
   4bf46:	f00e ff50 	bl	5adea <k_malloc>
	if (to_ins == NULL) {
   4bf4a:	b948      	cbnz	r0, 4bf60 <event_handler_list_append_handler+0x34>
		k_mutex_unlock(&list_mtx);
   4bf4c:	f7ff ffe0 	bl	4bf10 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   4bf50:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4bf54:	e00d      	b.n	4bf72 <event_handler_list_append_handler+0x46>
		if (curr->handler == handler) {
   4bf56:	6863      	ldr	r3, [r4, #4]
   4bf58:	429e      	cmp	r6, r3
   4bf5a:	d007      	beq.n	4bf6c <event_handler_list_append_handler+0x40>
	return node->next;
   4bf5c:	6824      	ldr	r4, [r4, #0]
   4bf5e:	e7f0      	b.n	4bf42 <event_handler_list_append_handler+0x16>
__ssp_bos_icheck3(memset, void *, int)
   4bf60:	6004      	str	r4, [r0, #0]
	to_ins->handler = handler;
   4bf62:	6046      	str	r6, [r0, #4]
	return list->tail;
   4bf64:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   4bf66:	b92b      	cbnz	r3, 4bf74 <event_handler_list_append_handler+0x48>
	list->head = node;
   4bf68:	e9c5 0000 	strd	r0, r0, [r5]
		k_mutex_unlock(&list_mtx);
   4bf6c:	f7ff ffd0 	bl	4bf10 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   4bf70:	2000      	movs	r0, #0
}
   4bf72:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   4bf74:	6018      	str	r0, [r3, #0]
	list->tail = node;
   4bf76:	6068      	str	r0, [r5, #4]
}
   4bf78:	e7f8      	b.n	4bf6c <event_handler_list_append_handler+0x40>
   4bf7a:	bf00      	nop
   4bf7c:	2001b86c 	.word	0x2001b86c
   4bf80:	2001ab98 	.word	0x2001ab98

0004bf84 <event_handler_list_dispatch>:
{
   4bf84:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   4bf86:	4c0f      	ldr	r4, [pc, #60]	; (4bfc4 <event_handler_list_dispatch+0x40>)
   4bf88:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   4bf8a:	6823      	ldr	r3, [r4, #0]
   4bf8c:	b1c3      	cbz	r3, 4bfc0 <event_handler_list_dispatch+0x3c>
   4bf8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4bf92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4bf96:	480c      	ldr	r0, [pc, #48]	; (4bfc8 <event_handler_list_dispatch+0x44>)
   4bf98:	f006 fa78 	bl	5248c <z_impl_k_mutex_lock>
   4bf9c:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   4bf9e:	b10b      	cbz	r3, 4bfa4 <event_handler_list_dispatch+0x20>
	return node->next;
   4bfa0:	681c      	ldr	r4, [r3, #0]
   4bfa2:	b91b      	cbnz	r3, 4bfac <event_handler_list_dispatch+0x28>
}
   4bfa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   4bfa8:	f7ff bfb2 	b.w	4bf10 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   4bfac:	4628      	mov	r0, r5
   4bfae:	685b      	ldr	r3, [r3, #4]
   4bfb0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   4bfb2:	b11c      	cbz	r4, 4bfbc <event_handler_list_dispatch+0x38>
   4bfb4:	6822      	ldr	r2, [r4, #0]
   4bfb6:	4623      	mov	r3, r4
   4bfb8:	4614      	mov	r4, r2
   4bfba:	e7f2      	b.n	4bfa2 <event_handler_list_dispatch+0x1e>
   4bfbc:	4622      	mov	r2, r4
   4bfbe:	e7fa      	b.n	4bfb6 <event_handler_list_dispatch+0x32>
}
   4bfc0:	bd38      	pop	{r3, r4, r5, pc}
   4bfc2:	bf00      	nop
   4bfc4:	2001b86c 	.word	0x2001b86c
   4bfc8:	2001ab98 	.word	0x2001ab98

0004bfcc <response_is_valid>:
{
   4bfcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   4bfce:	460e      	mov	r6, r1
   4bfd0:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   4bfd2:	4605      	mov	r5, r0
   4bfd4:	b100      	cbz	r0, 4bfd8 <response_is_valid+0xc>
   4bfd6:	b962      	cbnz	r2, 4bff2 <response_is_valid+0x26>
		LOG_ERR("Invalid pointer provided");
   4bfd8:	4b0d      	ldr	r3, [pc, #52]	; (4c010 <response_is_valid+0x44>)
   4bfda:	2201      	movs	r2, #1
   4bfdc:	9302      	str	r3, [sp, #8]
   4bfde:	2300      	movs	r3, #0
   4bfe0:	490c      	ldr	r1, [pc, #48]	; (4c014 <response_is_valid+0x48>)
   4bfe2:	4618      	mov	r0, r3
   4bfe4:	e9cd 3300 	strd	r3, r3, [sp]
   4bfe8:	f00b fcfd 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
		return false;
   4bfec:	2000      	movs	r0, #0
}
   4bfee:	b004      	add	sp, #16
   4bff0:	bd70      	pop	{r4, r5, r6, pc}
	if ((response_len < strlen(check)) ||
   4bff2:	4610      	mov	r0, r2
   4bff4:	f7f4 fefe 	bl	40df4 <strlen>
   4bff8:	42b0      	cmp	r0, r6
   4bffa:	d8f7      	bhi.n	4bfec <response_is_valid+0x20>
	    (memcmp(response, check, response_len) != 0)) {
   4bffc:	4632      	mov	r2, r6
   4bffe:	4621      	mov	r1, r4
   4c000:	4628      	mov	r0, r5
   4c002:	f00e ff1a 	bl	5ae3a <memcmp>
	if ((response_len < strlen(check)) ||
   4c006:	fab0 f080 	clz	r0, r0
   4c00a:	0940      	lsrs	r0, r0, #5
   4c00c:	e7ef      	b.n	4bfee <response_is_valid+0x22>
   4c00e:	bf00      	nop
   4c010:	0005f380 	.word	0x0005f380
   4c014:	0005bf0c 	.word	0x0005bf0c

0004c018 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   4c018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   4c01c:	2700      	movs	r7, #0
{
   4c01e:	b087      	sub	sp, #28
   4c020:	4680      	mov	r8, r0
   4c022:	460e      	mov	r6, r1
   4c024:	4614      	mov	r4, r2
   4c026:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   4c028:	9705      	str	r7, [sp, #20]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   4c02a:	f7f4 fee3 	bl	40df4 <strlen>
   4c02e:	2808      	cmp	r0, #8
   4c030:	d11b      	bne.n	4c06a <parse_psm+0x52>
   4c032:	4630      	mov	r0, r6
   4c034:	f7f4 fede 	bl	40df4 <strlen>
   4c038:	2808      	cmp	r0, #8
   4c03a:	d116      	bne.n	4c06a <parse_psm+0x52>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   4c03c:	8832      	ldrh	r2, [r6, #0]
   4c03e:	78b3      	ldrb	r3, [r6, #2]
   4c040:	f8ad 2014 	strh.w	r2, [sp, #20]

	lut_idx = strtoul(unit_str, NULL, 2);
   4c044:	4639      	mov	r1, r7
   4c046:	2202      	movs	r2, #2
   4c048:	a805      	add	r0, sp, #20
	memcpy(unit_str, tau_ext_str, unit_str_len);
   4c04a:	f88d 3016 	strb.w	r3, [sp, #22]
	lut_idx = strtoul(unit_str, NULL, 2);
   4c04e:	f007 ff4f 	bl	53ef0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   4c052:	2807      	cmp	r0, #7
   4c054:	d90e      	bls.n	4c074 <parse_psm+0x5c>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   4c056:	4b36      	ldr	r3, [pc, #216]	; (4c130 <parse_psm+0x118>)
   4c058:	9700      	str	r7, [sp, #0]
   4c05a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   4c05e:	463b      	mov	r3, r7
   4c060:	2201      	movs	r2, #1
   4c062:	4618      	mov	r0, r3
   4c064:	4933      	ldr	r1, [pc, #204]	; (4c134 <parse_psm+0x11c>)
   4c066:	f00b fcbe 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   4c06a:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   4c06e:	b007      	add	sp, #28
   4c070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	timer_unit = t3412_ext_lookup[lut_idx];
   4c074:	4b30      	ldr	r3, [pc, #192]	; (4c138 <parse_psm+0x120>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   4c076:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   4c078:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   4c07c:	4639      	mov	r1, r7
   4c07e:	1cf0      	adds	r0, r6, #3
   4c080:	f007 ff36 	bl	53ef0 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   4c084:	f1b9 0f00 	cmp.w	r9, #0
   4c088:	d11b      	bne.n	4c0c2 <parse_psm+0xaa>
   4c08a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4c08e:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   4c090:	b1e4      	cbz	r4, 4c0cc <parse_psm+0xb4>
   4c092:	4620      	mov	r0, r4
   4c094:	f7f4 feae 	bl	40df4 <strlen>
   4c098:	2808      	cmp	r0, #8
   4c09a:	d117      	bne.n	4c0cc <parse_psm+0xb4>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   4c09c:	8822      	ldrh	r2, [r4, #0]
   4c09e:	78a3      	ldrb	r3, [r4, #2]
   4c0a0:	f8ad 2014 	strh.w	r2, [sp, #20]
		lut_idx = strtoul(unit_str, NULL, 2);
   4c0a4:	2100      	movs	r1, #0
   4c0a6:	2202      	movs	r2, #2
   4c0a8:	a805      	add	r0, sp, #20
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   4c0aa:	f88d 3016 	strb.w	r3, [sp, #22]
		lut_idx = strtoul(unit_str, NULL, 2);
   4c0ae:	f007 ff1f 	bl	53ef0 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   4c0b2:	2807      	cmp	r0, #7
   4c0b4:	d91b      	bls.n	4c0ee <parse_psm+0xd6>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   4c0b6:	4b21      	ldr	r3, [pc, #132]	; (4c13c <parse_psm+0x124>)
		LOG_ERR("Unable to parse active time string");
   4c0b8:	9302      	str	r3, [sp, #8]
   4c0ba:	2300      	movs	r3, #0
   4c0bc:	e9cd 3300 	strd	r3, r3, [sp]
   4c0c0:	e7ce      	b.n	4c060 <parse_psm+0x48>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   4c0c2:	fb09 f000 	mul.w	r0, r9, r0
   4c0c6:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   4c0c8:	3001      	adds	r0, #1
   4c0ca:	d0e1      	beq.n	4c090 <parse_psm+0x78>
	memcpy(unit_str, active_time_str, unit_str_len);
   4c0cc:	f8b8 2000 	ldrh.w	r2, [r8]
   4c0d0:	f898 3002 	ldrb.w	r3, [r8, #2]
   4c0d4:	f8ad 2014 	strh.w	r2, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   4c0d8:	2100      	movs	r1, #0
   4c0da:	2202      	movs	r2, #2
   4c0dc:	a805      	add	r0, sp, #20
	memcpy(unit_str, active_time_str, unit_str_len);
   4c0de:	f88d 3016 	strb.w	r3, [sp, #22]
	lut_idx = strtoul(unit_str, NULL, 2);
   4c0e2:	f007 ff05 	bl	53ef0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   4c0e6:	2807      	cmp	r0, #7
   4c0e8:	d910      	bls.n	4c10c <parse_psm+0xf4>
		LOG_ERR("Unable to parse active time string");
   4c0ea:	4b15      	ldr	r3, [pc, #84]	; (4c140 <parse_psm+0x128>)
   4c0ec:	e7e4      	b.n	4c0b8 <parse_psm+0xa0>
		timer_unit = t3412_lookup[lut_idx];
   4c0ee:	4b15      	ldr	r3, [pc, #84]	; (4c144 <parse_psm+0x12c>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   4c0f0:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   4c0f2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   4c0f6:	2100      	movs	r1, #0
   4c0f8:	1ce0      	adds	r0, r4, #3
   4c0fa:	f007 fef9 	bl	53ef0 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   4c0fe:	b116      	cbz	r6, 4c106 <parse_psm+0xee>
   4c100:	4346      	muls	r6, r0
   4c102:	602e      	str	r6, [r5, #0]
   4c104:	e7e2      	b.n	4c0cc <parse_psm+0xb4>
   4c106:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4c10a:	e7fa      	b.n	4c102 <parse_psm+0xea>
	timer_unit = t3324_lookup[lut_idx];
   4c10c:	4b0e      	ldr	r3, [pc, #56]	; (4c148 <parse_psm+0x130>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   4c10e:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   4c110:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   4c114:	2100      	movs	r1, #0
   4c116:	f108 0003 	add.w	r0, r8, #3
   4c11a:	f007 fee9 	bl	53ef0 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   4c11e:	b11c      	cbz	r4, 4c128 <parse_psm+0x110>
   4c120:	4344      	muls	r4, r0
	return 0;
   4c122:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   4c124:	606c      	str	r4, [r5, #4]
	return 0;
   4c126:	e7a2      	b.n	4c06e <parse_psm+0x56>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   4c128:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   4c12c:	e7f9      	b.n	4c122 <parse_psm+0x10a>
   4c12e:	bf00      	nop
   4c130:	0005f4d0 	.word	0x0005f4d0
   4c134:	0005bf0c 	.word	0x0005bf0c
   4c138:	0005c4c4 	.word	0x0005c4c4
   4c13c:	0005f505 	.word	0x0005f505
   4c140:	0005f531 	.word	0x0005f531
   4c144:	0005c4a4 	.word	0x0005c4a4
   4c148:	0005c4a4 	.word	0x0005c4a4

0004c14c <parse_rrc_mode>:
 * @return Zero on success or (negative) error code otherwise.
 */
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
   4c14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   4c150:	2500      	movs	r5, #0
{
   4c152:	b088      	sub	sp, #32
   4c154:	4680      	mov	r8, r0
   4c156:	460e      	mov	r6, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   4c158:	a806      	add	r0, sp, #24
   4c15a:	2104      	movs	r1, #4
{
   4c15c:	4617      	mov	r7, r2
	struct at_param_list resp_list = {0};
   4c15e:	e9cd 5506 	strd	r5, r5, [sp, #24]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   4c162:	f00b fae7 	bl	57734 <at_params_list_init>
	if (err) {
   4c166:	4604      	mov	r4, r0
   4c168:	b170      	cbz	r0, 4c188 <parse_rrc_mode+0x3c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   4c16a:	4b22      	ldr	r3, [pc, #136]	; (4c1f4 <parse_rrc_mode+0xa8>)
   4c16c:	9003      	str	r0, [sp, #12]
   4c16e:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4c172:	2201      	movs	r2, #1
   4c174:	462b      	mov	r3, r5
   4c176:	4628      	mov	r0, r5
   4c178:	491f      	ldr	r1, [pc, #124]	; (4c1f8 <parse_rrc_mode+0xac>)
   4c17a:	9500      	str	r5, [sp, #0]
   4c17c:	f00b fc33 	bl	579e6 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   4c180:	4620      	mov	r0, r4
   4c182:	b008      	add	sp, #32
   4c184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   4c188:	4601      	mov	r1, r0
   4c18a:	aa06      	add	r2, sp, #24
   4c18c:	4640      	mov	r0, r8
   4c18e:	f00b fab8 	bl	57702 <at_parser_params_from_str>
	if (err) {
   4c192:	4604      	mov	r4, r0
   4c194:	b170      	cbz	r0, 4c1b4 <parse_rrc_mode+0x68>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   4c196:	4b19      	ldr	r3, [pc, #100]	; (4c1fc <parse_rrc_mode+0xb0>)
   4c198:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get signalling mode, error: %d", err);
   4c19a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4c19e:	2201      	movs	r2, #1
   4c1a0:	462b      	mov	r3, r5
   4c1a2:	4628      	mov	r0, r5
   4c1a4:	4914      	ldr	r1, [pc, #80]	; (4c1f8 <parse_rrc_mode+0xac>)
   4c1a6:	9500      	str	r5, [sp, #0]
   4c1a8:	f00b fc1d 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   4c1ac:	a806      	add	r0, sp, #24
   4c1ae:	f00b faeb 	bl	57788 <at_params_list_free>
	return err;
   4c1b2:	e7e5      	b.n	4c180 <parse_rrc_mode+0x34>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   4c1b4:	4639      	mov	r1, r7
   4c1b6:	aa05      	add	r2, sp, #20
   4c1b8:	a806      	add	r0, sp, #24
   4c1ba:	f00b fb97 	bl	578ec <at_params_int_get>
	if (err) {
   4c1be:	4604      	mov	r4, r0
   4c1c0:	b110      	cbz	r0, 4c1c8 <parse_rrc_mode+0x7c>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   4c1c2:	4b0f      	ldr	r3, [pc, #60]	; (4c200 <parse_rrc_mode+0xb4>)
   4c1c4:	9003      	str	r0, [sp, #12]
   4c1c6:	e7e8      	b.n	4c19a <parse_rrc_mode+0x4e>
	if (temp_mode == 0) {
   4c1c8:	9b05      	ldr	r3, [sp, #20]
   4c1ca:	b11b      	cbz	r3, 4c1d4 <parse_rrc_mode+0x88>
	} else if (temp_mode == 1) {
   4c1cc:	2b01      	cmp	r3, #1
   4c1ce:	d103      	bne.n	4c1d8 <parse_rrc_mode+0x8c>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   4c1d0:	7033      	strb	r3, [r6, #0]
   4c1d2:	e7eb      	b.n	4c1ac <parse_rrc_mode+0x60>
   4c1d4:	4603      	mov	r3, r0
   4c1d6:	e7fb      	b.n	4c1d0 <parse_rrc_mode+0x84>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   4c1d8:	9303      	str	r3, [sp, #12]
   4c1da:	4b0a      	ldr	r3, [pc, #40]	; (4c204 <parse_rrc_mode+0xb8>)
   4c1dc:	2201      	movs	r2, #1
   4c1de:	e9cd 0301 	strd	r0, r3, [sp, #4]
   4c1e2:	4905      	ldr	r1, [pc, #20]	; (4c1f8 <parse_rrc_mode+0xac>)
   4c1e4:	4603      	mov	r3, r0
   4c1e6:	9000      	str	r0, [sp, #0]
   4c1e8:	f00b fbfd 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
		err = -EINVAL;
   4c1ec:	f06f 0415 	mvn.w	r4, #21
   4c1f0:	e7dc      	b.n	4c1ac <parse_rrc_mode+0x60>
   4c1f2:	bf00      	nop
   4c1f4:	0005f399 	.word	0x0005f399
   4c1f8:	0005bf0c 	.word	0x0005bf0c
   4c1fc:	0005f554 	.word	0x0005f554
   4c200:	0005f57f 	.word	0x0005f57f
   4c204:	0005f5a8 	.word	0x0005f5a8

0004c208 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   4c208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   4c20c:	2600      	movs	r6, #0
{
   4c20e:	4617      	mov	r7, r2
   4c210:	461d      	mov	r5, r3
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   4c212:	2207      	movs	r2, #7
   4c214:	2309      	movs	r3, #9
{
   4c216:	b08e      	sub	sp, #56	; 0x38
   4c218:	4682      	mov	sl, r0
   4c21a:	4688      	mov	r8, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   4c21c:	a809      	add	r0, sp, #36	; 0x24
   4c21e:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   4c220:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   4c224:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   4c228:	9607      	str	r6, [sp, #28]
   4c22a:	f8ad 6020 	strh.w	r6, [sp, #32]
   4c22e:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   4c232:	f00b fa7f 	bl	57734 <at_params_list_init>
	if (err) {
   4c236:	4604      	mov	r4, r0
   4c238:	b170      	cbz	r0, 4c258 <parse_cereg+0x50>
		LOG_ERR("Could not init AT params list, error: %d", err);
   4c23a:	4b63      	ldr	r3, [pc, #396]	; (4c3c8 <parse_cereg+0x1c0>)
   4c23c:	9003      	str	r0, [sp, #12]
   4c23e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4c242:	2201      	movs	r2, #1
   4c244:	4633      	mov	r3, r6
   4c246:	4630      	mov	r0, r6
   4c248:	4960      	ldr	r1, [pc, #384]	; (4c3cc <parse_cereg+0x1c4>)
   4c24a:	9600      	str	r6, [sp, #0]
   4c24c:	f00b fbcb 	bl	579e6 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   4c250:	4620      	mov	r0, r4
   4c252:	b00e      	add	sp, #56	; 0x38
   4c254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   4c258:	4601      	mov	r1, r0
   4c25a:	aa09      	add	r2, sp, #36	; 0x24
   4c25c:	4650      	mov	r0, sl
   4c25e:	f00b fa50 	bl	57702 <at_parser_params_from_str>
	if (err) {
   4c262:	4604      	mov	r4, r0
   4c264:	b170      	cbz	r0, 4c284 <parse_cereg+0x7c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   4c266:	4b5a      	ldr	r3, [pc, #360]	; (4c3d0 <parse_cereg+0x1c8>)
   4c268:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get response prefix, error: %d", err);
   4c26a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4c26e:	2201      	movs	r2, #1
   4c270:	4633      	mov	r3, r6
   4c272:	4630      	mov	r0, r6
   4c274:	4955      	ldr	r1, [pc, #340]	; (4c3cc <parse_cereg+0x1c4>)
   4c276:	9600      	str	r6, [sp, #0]
   4c278:	f00b fbb5 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   4c27c:	a809      	add	r0, sp, #36	; 0x24
   4c27e:	f00b fa83 	bl	57788 <at_params_list_free>
	return err;
   4c282:	e7e5      	b.n	4c250 <parse_cereg+0x48>
	err = at_params_string_get(&resp_list,
   4c284:	4601      	mov	r1, r0
   4c286:	ab04      	add	r3, sp, #16
   4c288:	aa07      	add	r2, sp, #28
   4c28a:	a809      	add	r0, sp, #36	; 0x24
   4c28c:	f00b fb5a 	bl	57944 <at_params_string_get>
	if (err) {
   4c290:	4604      	mov	r4, r0
   4c292:	b110      	cbz	r0, 4c29a <parse_cereg+0x92>
		LOG_ERR("Could not get response prefix, error: %d", err);
   4c294:	4b4f      	ldr	r3, [pc, #316]	; (4c3d4 <parse_cereg+0x1cc>)
   4c296:	9003      	str	r0, [sp, #12]
   4c298:	e7e7      	b.n	4c26a <parse_cereg+0x62>
	if (!response_is_valid(response_prefix, response_prefix_len,
   4c29a:	4a4f      	ldr	r2, [pc, #316]	; (4c3d8 <parse_cereg+0x1d0>)
   4c29c:	9904      	ldr	r1, [sp, #16]
   4c29e:	a807      	add	r0, sp, #28
   4c2a0:	f7ff fe94 	bl	4bfcc <response_is_valid>
   4c2a4:	2800      	cmp	r0, #0
   4c2a6:	d0e9      	beq.n	4c27c <parse_cereg+0x74>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   4c2a8:	aa0b      	add	r2, sp, #44	; 0x2c
   4c2aa:	f1c8 0102 	rsb	r1, r8, #2
   4c2ae:	a809      	add	r0, sp, #36	; 0x24
   4c2b0:	f00b fb1c 	bl	578ec <at_params_int_get>
	if (err) {
   4c2b4:	1e06      	subs	r6, r0, #0
   4c2b6:	d14a      	bne.n	4c34e <parse_cereg+0x146>
	switch (reg_status) {
   4c2b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   4c2ba:	2b08      	cmp	r3, #8
   4c2bc:	d031      	beq.n	4c322 <parse_cereg+0x11a>
   4c2be:	dc1b      	bgt.n	4c2f8 <parse_cereg+0xf0>
   4c2c0:	2b05      	cmp	r3, #5
   4c2c2:	d92e      	bls.n	4c322 <parse_cereg+0x11a>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   4c2c4:	9303      	str	r3, [sp, #12]
   4c2c6:	4b45      	ldr	r3, [pc, #276]	; (4c3dc <parse_cereg+0x1d4>)
   4c2c8:	2201      	movs	r2, #1
   4c2ca:	9302      	str	r3, [sp, #8]
   4c2cc:	2300      	movs	r3, #0
   4c2ce:	493f      	ldr	r1, [pc, #252]	; (4c3cc <parse_cereg+0x1c4>)
   4c2d0:	4618      	mov	r0, r3
   4c2d2:	e9cd 3300 	strd	r3, r3, [sp]
   4c2d6:	f00b fb86 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   4c2da:	f06f 0615 	mvn.w	r6, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   4c2de:	4b40      	ldr	r3, [pc, #256]	; (4c3e0 <parse_cereg+0x1d8>)
   4c2e0:	9603      	str	r6, [sp, #12]
			LOG_ERR("Could not get tracking area code, error: %d", err);
   4c2e2:	9302      	str	r3, [sp, #8]
   4c2e4:	2300      	movs	r3, #0
   4c2e6:	2201      	movs	r2, #1
   4c2e8:	4618      	mov	r0, r3
   4c2ea:	e9cd 3300 	strd	r3, r3, [sp]
   4c2ee:	4937      	ldr	r1, [pc, #220]	; (4c3cc <parse_cereg+0x1c4>)
   4c2f0:	f00b fb79 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   4c2f4:	4634      	mov	r4, r6
   4c2f6:	e7c1      	b.n	4c27c <parse_cereg+0x74>
	switch (reg_status) {
   4c2f8:	2b5a      	cmp	r3, #90	; 0x5a
   4c2fa:	d1e3      	bne.n	4c2c4 <parse_cereg+0xbc>
	if (reg_status) {
   4c2fc:	b107      	cbz	r7, 4c300 <parse_cereg+0xf8>
		*reg_status = status;
   4c2fe:	703b      	strb	r3, [r7, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   4c300:	bb65      	cbnz	r5, 4c35c <parse_cereg+0x154>
	if (lte_mode) {
   4c302:	f1b9 0f00 	cmp.w	r9, #0
   4c306:	d0b9      	beq.n	4c27c <parse_cereg+0x74>
		err = at_params_int_get(&resp_list,
   4c308:	aa06      	add	r2, sp, #24
   4c30a:	f1c8 0105 	rsb	r1, r8, #5
   4c30e:	a809      	add	r0, sp, #36	; 0x24
   4c310:	f00b faec 	bl	578ec <at_params_int_get>
		if (err) {
   4c314:	2800      	cmp	r0, #0
   4c316:	d155      	bne.n	4c3c4 <parse_cereg+0x1bc>
			*lte_mode = mode;
   4c318:	f89d 3018 	ldrb.w	r3, [sp, #24]
			LOG_DBG("LTE mode: %d", *lte_mode);
   4c31c:	f889 3000 	strb.w	r3, [r9]
   4c320:	e7ac      	b.n	4c27c <parse_cereg+0x74>
	if (reg_status) {
   4c322:	b997      	cbnz	r7, 4c34a <parse_cereg+0x142>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   4c324:	2d00      	cmp	r5, #0
   4c326:	d0ec      	beq.n	4c302 <parse_cereg+0xfa>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   4c328:	a809      	add	r0, sp, #36	; 0x24
   4c32a:	f00b fb2b 	bl	57984 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   4c32e:	2803      	cmp	r0, #3
   4c330:	d914      	bls.n	4c35c <parse_cereg+0x154>
		err = at_params_string_get(
   4c332:	ab05      	add	r3, sp, #20
   4c334:	aa0b      	add	r2, sp, #44	; 0x2c
   4c336:	f1c8 0103 	rsb	r1, r8, #3
   4c33a:	a809      	add	r0, sp, #36	; 0x24
   4c33c:	f00b fb02 	bl	57944 <at_params_string_get>
		if (err) {
   4c340:	4606      	mov	r6, r0
   4c342:	b180      	cbz	r0, 4c366 <parse_cereg+0x15e>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   4c344:	4b27      	ldr	r3, [pc, #156]	; (4c3e4 <parse_cereg+0x1dc>)
   4c346:	9003      	str	r0, [sp, #12]
   4c348:	e7cb      	b.n	4c2e2 <parse_cereg+0xda>
		*reg_status = status;
   4c34a:	703b      	strb	r3, [r7, #0]
   4c34c:	e7ea      	b.n	4c324 <parse_cereg+0x11c>
	if (status < 0) {
   4c34e:	dbc6      	blt.n	4c2de <parse_cereg+0xd6>
	if (reg_status) {
   4c350:	b107      	cbz	r7, 4c354 <parse_cereg+0x14c>
		*reg_status = status;
   4c352:	703e      	strb	r6, [r7, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   4c354:	2d00      	cmp	r5, #0
   4c356:	d0d4      	beq.n	4c302 <parse_cereg+0xfa>
   4c358:	2e5a      	cmp	r6, #90	; 0x5a
   4c35a:	d1e5      	bne.n	4c328 <parse_cereg+0x120>
		cell->tac = UINT32_MAX;
   4c35c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c360:	e9c5 3302 	strd	r3, r3, [r5, #8]
   4c364:	e7cd      	b.n	4c302 <parse_cereg+0xfa>
		str_buf[len] = '\0';
   4c366:	9b05      	ldr	r3, [sp, #20]
		cell->tac = strtoul(str_buf, NULL, 16);
   4c368:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   4c36a:	3338      	adds	r3, #56	; 0x38
   4c36c:	446b      	add	r3, sp
   4c36e:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   4c372:	2210      	movs	r2, #16
   4c374:	a80b      	add	r0, sp, #44	; 0x2c
   4c376:	f007 fdbb 	bl	53ef0 <strtoul>
		len = sizeof(str_buf) - 1;
   4c37a:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   4c37c:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   4c37e:	9305      	str	r3, [sp, #20]
		err = at_params_string_get(&resp_list,
   4c380:	aa0b      	add	r2, sp, #44	; 0x2c
   4c382:	ab05      	add	r3, sp, #20
   4c384:	f1c8 0104 	rsb	r1, r8, #4
   4c388:	a809      	add	r0, sp, #36	; 0x24
   4c38a:	f00b fadb 	bl	57944 <at_params_string_get>
		if (err) {
   4c38e:	4607      	mov	r7, r0
   4c390:	b160      	cbz	r0, 4c3ac <parse_cereg+0x1a4>
			LOG_ERR("Could not get cell ID, error: %d", err);
   4c392:	4b15      	ldr	r3, [pc, #84]	; (4c3e8 <parse_cereg+0x1e0>)
   4c394:	9003      	str	r0, [sp, #12]
   4c396:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4c39a:	2201      	movs	r2, #1
   4c39c:	4633      	mov	r3, r6
   4c39e:	4630      	mov	r0, r6
   4c3a0:	490a      	ldr	r1, [pc, #40]	; (4c3cc <parse_cereg+0x1c4>)
   4c3a2:	9600      	str	r6, [sp, #0]
   4c3a4:	f00b fb1f 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   4c3a8:	463c      	mov	r4, r7
   4c3aa:	e767      	b.n	4c27c <parse_cereg+0x74>
		str_buf[len] = '\0';
   4c3ac:	9b05      	ldr	r3, [sp, #20]
		cell->id = strtoul(str_buf, NULL, 16);
   4c3ae:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   4c3b0:	3338      	adds	r3, #56	; 0x38
   4c3b2:	446b      	add	r3, sp
   4c3b4:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   4c3b8:	2210      	movs	r2, #16
   4c3ba:	a80b      	add	r0, sp, #44	; 0x2c
   4c3bc:	f007 fd98 	bl	53ef0 <strtoul>
   4c3c0:	60a8      	str	r0, [r5, #8]
   4c3c2:	e79e      	b.n	4c302 <parse_cereg+0xfa>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   4c3c4:	2300      	movs	r3, #0
   4c3c6:	e7a9      	b.n	4c31c <parse_cereg+0x114>
   4c3c8:	0005f399 	.word	0x0005f399
   4c3cc:	0005bf0c 	.word	0x0005bf0c
   4c3d0:	0005f5c4 	.word	0x0005f5c4
   4c3d4:	0005f5f1 	.word	0x0005f5f1
   4c3d8:	0005f31c 	.word	0x0005f31c
   4c3dc:	0005f61a 	.word	0x0005f61a
   4c3e0:	0005ef4a 	.word	0x0005ef4a
   4c3e4:	0005f642 	.word	0x0005f642
   4c3e8:	0005f66e 	.word	0x0005f66e

0004c3ec <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
   4c3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct at_param_list resp_list = {0};
   4c3ee:	2500      	movs	r5, #0
{
   4c3f0:	b087      	sub	sp, #28
   4c3f2:	4607      	mov	r7, r0

	if (time == NULL || at_response == NULL) {
   4c3f4:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   4c3f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (time == NULL || at_response == NULL) {
   4c3fa:	2900      	cmp	r1, #0
   4c3fc:	d049      	beq.n	4c492 <parse_xt3412+0xa6>
   4c3fe:	2800      	cmp	r0, #0
   4c400:	d047      	beq.n	4c492 <parse_xt3412+0xa6>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   4c402:	2104      	movs	r1, #4
   4c404:	a804      	add	r0, sp, #16
   4c406:	f00b f995 	bl	57734 <at_params_list_init>
	if (err) {
   4c40a:	4604      	mov	r4, r0
   4c40c:	b168      	cbz	r0, 4c42a <parse_xt3412+0x3e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   4c40e:	4b22      	ldr	r3, [pc, #136]	; (4c498 <parse_xt3412+0xac>)
   4c410:	9003      	str	r0, [sp, #12]
   4c412:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4c416:	2201      	movs	r2, #1
   4c418:	462b      	mov	r3, r5
   4c41a:	4628      	mov	r0, r5
   4c41c:	491f      	ldr	r1, [pc, #124]	; (4c49c <parse_xt3412+0xb0>)
   4c41e:	9500      	str	r5, [sp, #0]
   4c420:	f00b fae1 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   4c424:	4620      	mov	r0, r4
   4c426:	b007      	add	sp, #28
   4c428:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   4c42a:	4601      	mov	r1, r0
   4c42c:	aa04      	add	r2, sp, #16
   4c42e:	4638      	mov	r0, r7
   4c430:	f00b f967 	bl	57702 <at_parser_params_from_str>
	if (err) {
   4c434:	4604      	mov	r4, r0
   4c436:	b170      	cbz	r0, 4c456 <parse_xt3412+0x6a>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   4c438:	4b19      	ldr	r3, [pc, #100]	; (4c4a0 <parse_xt3412+0xb4>)
   4c43a:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   4c43c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4c440:	2201      	movs	r2, #1
   4c442:	462b      	mov	r3, r5
   4c444:	4628      	mov	r0, r5
   4c446:	4915      	ldr	r1, [pc, #84]	; (4c49c <parse_xt3412+0xb0>)
   4c448:	9500      	str	r5, [sp, #0]
   4c44a:	f00b facc 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   4c44e:	a804      	add	r0, sp, #16
   4c450:	f00b f99a 	bl	57788 <at_params_list_free>
	return err;
   4c454:	e7e6      	b.n	4c424 <parse_xt3412+0x38>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   4c456:	4632      	mov	r2, r6
   4c458:	2102      	movs	r1, #2
   4c45a:	a804      	add	r0, sp, #16
   4c45c:	f00b fa5e 	bl	5791c <at_params_int64_get>
	if (err) {
   4c460:	4604      	mov	r4, r0
   4c462:	b110      	cbz	r0, 4c46a <parse_xt3412+0x7e>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   4c464:	4b0f      	ldr	r3, [pc, #60]	; (4c4a4 <parse_xt3412+0xb8>)
   4c466:	9003      	str	r0, [sp, #12]
   4c468:	e7e8      	b.n	4c43c <parse_xt3412+0x50>
	if ((*time > T3412_MAX) || *time < 0) {
   4c46a:	490f      	ldr	r1, [pc, #60]	; (4c4a8 <parse_xt3412+0xbc>)
   4c46c:	e9d6 3200 	ldrd	r3, r2, [r6]
   4c470:	4299      	cmp	r1, r3
   4c472:	f04f 0308 	mov.w	r3, #8
   4c476:	4193      	sbcs	r3, r2
   4c478:	d2e9      	bcs.n	4c44e <parse_xt3412+0x62>
		LOG_WRN("Parsed time parameter not within valid range");
   4c47a:	4b0c      	ldr	r3, [pc, #48]	; (4c4ac <parse_xt3412+0xc0>)
   4c47c:	2202      	movs	r2, #2
   4c47e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   4c482:	4906      	ldr	r1, [pc, #24]	; (4c49c <parse_xt3412+0xb0>)
   4c484:	4603      	mov	r3, r0
   4c486:	9000      	str	r0, [sp, #0]
   4c488:	f00b faad 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
		err = -EINVAL;
   4c48c:	f06f 0415 	mvn.w	r4, #21
   4c490:	e7dd      	b.n	4c44e <parse_xt3412+0x62>
		return -EINVAL;
   4c492:	f06f 0415 	mvn.w	r4, #21
   4c496:	e7c5      	b.n	4c424 <parse_xt3412+0x38>
   4c498:	0005f399 	.word	0x0005f399
   4c49c:	0005bf0c 	.word	0x0005bf0c
   4c4a0:	0005f68f 	.word	0x0005f68f
   4c4a4:	0005f6bc 	.word	0x0005f6bc
   4c4a8:	5099e000 	.word	0x5099e000
   4c4ac:	0005f6e9 	.word	0x0005f6e9

0004c4b0 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   4c4b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   4c4b2:	4603      	mov	r3, r0
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   4c4b4:	b958      	cbnz	r0, 4c4ce <neighborcell_count_get+0x1e>
		LOG_ERR("at_response is NULL, can't get cell count");
   4c4b6:	4a0e      	ldr	r2, [pc, #56]	; (4c4f0 <neighborcell_count_get+0x40>)
   4c4b8:	490e      	ldr	r1, [pc, #56]	; (4c4f4 <neighborcell_count_get+0x44>)
   4c4ba:	e9cd 0201 	strd	r0, r2, [sp, #4]
   4c4be:	9000      	str	r0, [sp, #0]
   4c4c0:	2201      	movs	r2, #1
   4c4c2:	f00b fa90 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
		return 0;
   4c4c6:	2000      	movs	r0, #0
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   4c4c8:	b005      	add	sp, #20
   4c4ca:	f85d fb04 	ldr.w	pc, [sp], #4
   4c4ce:	1e43      	subs	r3, r0, #1
	uint32_t count = 0;
   4c4d0:	2000      	movs	r0, #0
		if (*str == c) {
   4c4d2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4c4d6:	2a2c      	cmp	r2, #44	; 0x2c
   4c4d8:	d101      	bne.n	4c4de <neighborcell_count_get+0x2e>
			count++;
   4c4da:	3001      	adds	r0, #1
	} while (*(str++) != '\0');
   4c4dc:	e7f9      	b.n	4c4d2 <neighborcell_count_get+0x22>
   4c4de:	2a00      	cmp	r2, #0
   4c4e0:	d1f7      	bne.n	4c4d2 <neighborcell_count_get+0x22>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   4c4e2:	280a      	cmp	r0, #10
   4c4e4:	d9ef      	bls.n	4c4c6 <neighborcell_count_get+0x16>
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   4c4e6:	2305      	movs	r3, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   4c4e8:	3809      	subs	r0, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   4c4ea:	fbb0 f0f3 	udiv	r0, r0, r3
	return ncell_count;
   4c4ee:	e7eb      	b.n	4c4c8 <neighborcell_count_get+0x18>
   4c4f0:	0005f716 	.word	0x0005f716
   4c4f4:	0005bf0c 	.word	0x0005bf0c

0004c4f8 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   4c4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   4c4fc:	230b      	movs	r3, #11
{
   4c4fe:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c500:	2100      	movs	r1, #0
{
   4c502:	4607      	mov	r7, r0
   4c504:	b091      	sub	sp, #68	; 0x44
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c506:	e9cd 110d 	strd	r1, r1, [sp, #52]	; 0x34
	size_t response_prefix_len = sizeof(response_prefix);
   4c50a:	9308      	str	r3, [sp, #32]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c50c:	f8cd 103b 	str.w	r1, [sp, #59]	; 0x3b
static uint32_t get_char_frequency(const char *str, char c)
   4c510:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   4c512:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   4c516:	2e2c      	cmp	r6, #44	; 0x2c
   4c518:	d101      	bne.n	4c51e <parse_ncellmeas+0x26>
			count++;
   4c51a:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   4c51c:	e7f9      	b.n	4c512 <parse_ncellmeas+0x1a>
   4c51e:	2e00      	cmp	r6, #0
   4c520:	d1f7      	bne.n	4c512 <parse_ncellmeas+0x1a>
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cells->ncells_count = 0;
   4c526:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c52a:	60ab      	str	r3, [r5, #8]

	err = at_params_list_init(&resp_list, param_count);
   4c52c:	3103      	adds	r1, #3
   4c52e:	a80b      	add	r0, sp, #44	; 0x2c
   4c530:	f00b f900 	bl	57734 <at_params_list_init>
	if (err) {
   4c534:	4604      	mov	r4, r0
   4c536:	b170      	cbz	r0, 4c556 <parse_ncellmeas+0x5e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   4c538:	4b9f      	ldr	r3, [pc, #636]	; (4c7b8 <parse_ncellmeas+0x2c0>)
   4c53a:	9003      	str	r0, [sp, #12]
   4c53c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4c540:	2201      	movs	r2, #1
   4c542:	4633      	mov	r3, r6
   4c544:	4630      	mov	r0, r6
   4c546:	499d      	ldr	r1, [pc, #628]	; (4c7bc <parse_ncellmeas+0x2c4>)
   4c548:	9600      	str	r6, [sp, #0]
   4c54a:	f00b fa4c 	bl	579e6 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   4c54e:	4620      	mov	r0, r4
   4c550:	b011      	add	sp, #68	; 0x44
   4c552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   4c556:	4601      	mov	r1, r0
   4c558:	aa0b      	add	r2, sp, #44	; 0x2c
   4c55a:	4638      	mov	r0, r7
   4c55c:	f00b f8d1 	bl	57702 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   4c560:	4604      	mov	r4, r0
   4c562:	b180      	cbz	r0, 4c586 <parse_ncellmeas+0x8e>
   4c564:	1dc3      	adds	r3, r0, #7
   4c566:	d01e      	beq.n	4c5a6 <parse_ncellmeas+0xae>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   4c568:	4b95      	ldr	r3, [pc, #596]	; (4c7c0 <parse_ncellmeas+0x2c8>)
   4c56a:	9003      	str	r0, [sp, #12]
   4c56c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4c570:	4633      	mov	r3, r6
   4c572:	9600      	str	r6, [sp, #0]
		LOG_ERR("Could not get response prefix, error: %d", err);
   4c574:	2201      	movs	r2, #1
   4c576:	4618      	mov	r0, r3
   4c578:	4990      	ldr	r1, [pc, #576]	; (4c7bc <parse_ncellmeas+0x2c4>)
   4c57a:	f00b fa34 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   4c57e:	a80b      	add	r0, sp, #44	; 0x2c
   4c580:	f00b f902 	bl	57788 <at_params_list_free>
	return err;
   4c584:	e7e3      	b.n	4c54e <parse_ncellmeas+0x56>
	bool incomplete = false;
   4c586:	4606      	mov	r6, r0
	err = at_params_string_get(&resp_list,
   4c588:	2100      	movs	r1, #0
   4c58a:	ab08      	add	r3, sp, #32
   4c58c:	aa0d      	add	r2, sp, #52	; 0x34
   4c58e:	a80b      	add	r0, sp, #44	; 0x2c
   4c590:	f00b f9d8 	bl	57944 <at_params_string_get>
	if (err) {
   4c594:	4604      	mov	r4, r0
   4c596:	b140      	cbz	r0, 4c5aa <parse_ncellmeas+0xb2>
		LOG_ERR("Could not get response prefix, error: %d", err);
   4c598:	4b8a      	ldr	r3, [pc, #552]	; (4c7c4 <parse_ncellmeas+0x2cc>)
   4c59a:	9003      	str	r0, [sp, #12]
   4c59c:	9302      	str	r3, [sp, #8]
   4c59e:	2300      	movs	r3, #0
   4c5a0:	e9cd 3300 	strd	r3, r3, [sp]
   4c5a4:	e7e6      	b.n	4c574 <parse_ncellmeas+0x7c>
		incomplete = true;
   4c5a6:	2601      	movs	r6, #1
   4c5a8:	e7ee      	b.n	4c588 <parse_ncellmeas+0x90>
	if (!response_is_valid(response_prefix, response_prefix_len,
   4c5aa:	4a87      	ldr	r2, [pc, #540]	; (4c7c8 <parse_ncellmeas+0x2d0>)
   4c5ac:	9908      	ldr	r1, [sp, #32]
   4c5ae:	a80d      	add	r0, sp, #52	; 0x34
   4c5b0:	f7ff fd0c 	bl	4bfcc <response_is_valid>
   4c5b4:	2800      	cmp	r0, #0
   4c5b6:	f000 80a5 	beq.w	4c704 <parse_ncellmeas+0x20c>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   4c5ba:	2101      	movs	r1, #1
   4c5bc:	aa05      	add	r2, sp, #20
   4c5be:	a80b      	add	r0, sp, #44	; 0x2c
   4c5c0:	f00b f994 	bl	578ec <at_params_int_get>
	if (err) {
   4c5c4:	4604      	mov	r4, r0
   4c5c6:	2800      	cmp	r0, #0
   4c5c8:	d1d9      	bne.n	4c57e <parse_ncellmeas+0x86>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   4c5ca:	9b05      	ldr	r3, [sp, #20]
   4c5cc:	2b00      	cmp	r3, #0
   4c5ce:	f040 80f0 	bne.w	4c7b2 <parse_ncellmeas+0x2ba>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   4c5d2:	2102      	movs	r1, #2
   4c5d4:	aa06      	add	r2, sp, #24
   4c5d6:	a80b      	add	r0, sp, #44	; 0x2c
   4c5d8:	f00b fa3a 	bl	57a50 <string_param_to_int.constprop.0>
	if (err) {
   4c5dc:	4604      	mov	r4, r0
   4c5de:	2800      	cmp	r0, #0
   4c5e0:	d1cd      	bne.n	4c57e <parse_ncellmeas+0x86>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   4c5e2:	9b06      	ldr	r3, [sp, #24]
	len = sizeof(tmp_str);
   4c5e4:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   4c5e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c5ec:	bfa4      	itt	ge
   4c5ee:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
   4c5f2:	9306      	strge	r3, [sp, #24]
	cells->current_cell.id = tmp;
   4c5f4:	9b06      	ldr	r3, [sp, #24]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   4c5f6:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   4c5f8:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   4c5fa:	aa09      	add	r2, sp, #36	; 0x24
   4c5fc:	ab07      	add	r3, sp, #28
   4c5fe:	a80b      	add	r0, sp, #44	; 0x2c
	len = sizeof(tmp_str);
   4c600:	f8cd 801c 	str.w	r8, [sp, #28]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   4c604:	f00b f99e 	bl	57944 <at_params_string_get>
	if (err) {
   4c608:	4604      	mov	r4, r0
   4c60a:	2800      	cmp	r0, #0
   4c60c:	d1b7      	bne.n	4c57e <parse_ncellmeas+0x86>
	tmp_str[len] = '\0';
   4c60e:	9b07      	ldr	r3, [sp, #28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   4c610:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   4c612:	3340      	adds	r3, #64	; 0x40
   4c614:	446b      	add	r3, sp
   4c616:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   4c61a:	1d2a      	adds	r2, r5, #4
   4c61c:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   4c620:	f00b f9f0 	bl	57a04 <string_to_int>
	if (err) {
   4c624:	4604      	mov	r4, r0
   4c626:	2800      	cmp	r0, #0
   4c628:	d1a9      	bne.n	4c57e <parse_ncellmeas+0x86>
	tmp_str[3] = '\0';
   4c62a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   4c62e:	462a      	mov	r2, r5
   4c630:	210a      	movs	r1, #10
   4c632:	a809      	add	r0, sp, #36	; 0x24
   4c634:	f00b f9e6 	bl	57a04 <string_to_int>
	if (err) {
   4c638:	4604      	mov	r4, r0
   4c63a:	2800      	cmp	r0, #0
   4c63c:	d19f      	bne.n	4c57e <parse_ncellmeas+0x86>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   4c63e:	2104      	movs	r1, #4
   4c640:	aa06      	add	r2, sp, #24
   4c642:	a80b      	add	r0, sp, #44	; 0x2c
   4c644:	f00b fa04 	bl	57a50 <string_param_to_int.constprop.0>
	if (err) {
   4c648:	4604      	mov	r4, r0
   4c64a:	2800      	cmp	r0, #0
   4c64c:	d197      	bne.n	4c57e <parse_ncellmeas+0x86>
	cells->current_cell.tac = tmp;
   4c64e:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   4c650:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   4c652:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   4c654:	aa06      	add	r2, sp, #24
   4c656:	a80b      	add	r0, sp, #44	; 0x2c
   4c658:	f00b f948 	bl	578ec <at_params_int_get>
	if (err) {
   4c65c:	4604      	mov	r4, r0
   4c65e:	2800      	cmp	r0, #0
   4c660:	d18d      	bne.n	4c57e <parse_ncellmeas+0x86>
	cells->current_cell.timing_advance = tmp;
   4c662:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   4c664:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   4c666:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   4c668:	f105 0210 	add.w	r2, r5, #16
   4c66c:	a80b      	add	r0, sp, #44	; 0x2c
   4c66e:	f00b f93d 	bl	578ec <at_params_int_get>
	if (err) {
   4c672:	4604      	mov	r4, r0
   4c674:	2800      	cmp	r0, #0
   4c676:	d182      	bne.n	4c57e <parse_ncellmeas+0x86>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   4c678:	4641      	mov	r1, r8
   4c67a:	f105 0228 	add.w	r2, r5, #40	; 0x28
   4c67e:	a80b      	add	r0, sp, #44	; 0x2c
   4c680:	f00b f900 	bl	57884 <at_params_short_get>
	if (err) {
   4c684:	4604      	mov	r4, r0
   4c686:	2800      	cmp	r0, #0
   4c688:	f47f af79 	bne.w	4c57e <parse_ncellmeas+0x86>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   4c68c:	2108      	movs	r1, #8
   4c68e:	aa06      	add	r2, sp, #24
   4c690:	a80b      	add	r0, sp, #44	; 0x2c
   4c692:	f00b f92b 	bl	578ec <at_params_int_get>
	if (err) {
   4c696:	4604      	mov	r4, r0
   4c698:	2800      	cmp	r0, #0
   4c69a:	f47f af70 	bne.w	4c57e <parse_ncellmeas+0x86>
	cells->current_cell.rsrp = tmp;
   4c69e:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   4c6a0:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   4c6a2:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   4c6a4:	aa06      	add	r2, sp, #24
   4c6a6:	a80b      	add	r0, sp, #44	; 0x2c
   4c6a8:	f00b f920 	bl	578ec <at_params_int_get>
	if (err) {
   4c6ac:	4604      	mov	r4, r0
   4c6ae:	2800      	cmp	r0, #0
   4c6b0:	f47f af65 	bne.w	4c57e <parse_ncellmeas+0x86>
	cells->current_cell.rsrq = tmp;
   4c6b4:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   4c6b6:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   4c6b8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   4c6ba:	f105 0220 	add.w	r2, r5, #32
   4c6be:	a80b      	add	r0, sp, #44	; 0x2c
   4c6c0:	f00b f92c 	bl	5791c <at_params_int64_get>
	if (err) {
   4c6c4:	4604      	mov	r4, r0
   4c6c6:	2800      	cmp	r0, #0
   4c6c8:	f47f af59 	bne.w	4c57e <parse_ncellmeas+0x86>
	cells->ncells_count = neighborcell_count_get(at_response);
   4c6cc:	4638      	mov	r0, r7
   4c6ce:	f7ff feef 	bl	4c4b0 <neighborcell_count_get>
   4c6d2:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   4c6d6:	b2c0      	uxtb	r0, r0
   4c6d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   4c6dc:	f100 040b 	add.w	r4, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   4c6e0:	a80b      	add	r0, sp, #44	; 0x2c
   4c6e2:	f00b f94f 	bl	57984 <at_params_valid_count_get>
   4c6e6:	42a0      	cmp	r0, r4
   4c6e8:	d90e      	bls.n	4c708 <parse_ncellmeas+0x210>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   4c6ea:	4621      	mov	r1, r4
   4c6ec:	f105 0218 	add.w	r2, r5, #24
   4c6f0:	a80b      	add	r0, sp, #44	; 0x2c
   4c6f2:	f00b f913 	bl	5791c <at_params_int64_get>
		if (err) {
   4c6f6:	4604      	mov	r4, r0
   4c6f8:	2800      	cmp	r0, #0
   4c6fa:	f47f af40 	bne.w	4c57e <parse_ncellmeas+0x86>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   4c6fe:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   4c702:	b933      	cbnz	r3, 4c712 <parse_ncellmeas+0x21a>
	err = at_params_string_get(&resp_list,
   4c704:	2400      	movs	r4, #0
   4c706:	e73a      	b.n	4c57e <parse_ncellmeas+0x86>
		cells->current_cell.timing_advance_meas_time = 0;
   4c708:	2200      	movs	r2, #0
   4c70a:	2300      	movs	r3, #0
   4c70c:	e9c5 2306 	strd	r2, r3, [r5, #24]
   4c710:	e7f5      	b.n	4c6fe <parse_ncellmeas+0x206>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   4c712:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   4c714:	2b00      	cmp	r3, #0
   4c716:	d0f5      	beq.n	4c704 <parse_ncellmeas+0x20c>
   4c718:	270f      	movs	r7, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   4c71a:	f04f 0800 	mov.w	r8, #0
   4c71e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   4c722:	4598      	cmp	r8, r3
   4c724:	d304      	bcc.n	4c730 <parse_ncellmeas+0x238>
	if (incomplete) {
   4c726:	2e00      	cmp	r6, #0
   4c728:	d0ec      	beq.n	4c704 <parse_ncellmeas+0x20c>
		err = -E2BIG;
   4c72a:	f06f 0406 	mvn.w	r4, #6
   4c72e:	e726      	b.n	4c57e <parse_ncellmeas+0x86>
					&cells->neighbor_cells[i].earfcn);
   4c730:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   4c732:	1f39      	subs	r1, r7, #4
   4c734:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   4c738:	a80b      	add	r0, sp, #44	; 0x2c
   4c73a:	f00b f8d7 	bl	578ec <at_params_int_get>
		if (err) {
   4c73e:	ea4f 1908 	mov.w	r9, r8, lsl #4
   4c742:	4604      	mov	r4, r0
   4c744:	2800      	cmp	r0, #0
   4c746:	f47f af1a 	bne.w	4c57e <parse_ncellmeas+0x86>
					  &cells->neighbor_cells[i].phys_cell_id);
   4c74a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   4c74c:	1ef9      	subs	r1, r7, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   4c74e:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   4c750:	3208      	adds	r2, #8
   4c752:	a80b      	add	r0, sp, #44	; 0x2c
   4c754:	f00b f896 	bl	57884 <at_params_short_get>
		if (err) {
   4c758:	4604      	mov	r4, r0
   4c75a:	2800      	cmp	r0, #0
   4c75c:	f47f af0f 	bne.w	4c57e <parse_ncellmeas+0x86>
		err = at_params_int_get(&resp_list,
   4c760:	aa06      	add	r2, sp, #24
   4c762:	1eb9      	subs	r1, r7, #2
   4c764:	a80b      	add	r0, sp, #44	; 0x2c
   4c766:	f00b f8c1 	bl	578ec <at_params_int_get>
		if (err) {
   4c76a:	4604      	mov	r4, r0
   4c76c:	2800      	cmp	r0, #0
   4c76e:	f47f af06 	bne.w	4c57e <parse_ncellmeas+0x86>
		cells->neighbor_cells[i].rsrp = tmp;
   4c772:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   4c774:	9a06      	ldr	r2, [sp, #24]
   4c776:	444b      	add	r3, r9
   4c778:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   4c77a:	1e79      	subs	r1, r7, #1
   4c77c:	aa06      	add	r2, sp, #24
   4c77e:	a80b      	add	r0, sp, #44	; 0x2c
   4c780:	f00b f8b4 	bl	578ec <at_params_int_get>
		if (err) {
   4c784:	4604      	mov	r4, r0
   4c786:	2800      	cmp	r0, #0
   4c788:	f47f aef9 	bne.w	4c57e <parse_ncellmeas+0x86>
		cells->neighbor_cells[i].rsrq = tmp;
   4c78c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   4c78e:	9a06      	ldr	r2, [sp, #24]
   4c790:	444b      	add	r3, r9
   4c792:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   4c794:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   4c796:	4639      	mov	r1, r7
					&cells->neighbor_cells[i].time_diff);
   4c798:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   4c79a:	3204      	adds	r2, #4
   4c79c:	a80b      	add	r0, sp, #44	; 0x2c
   4c79e:	f00b f8a5 	bl	578ec <at_params_int_get>
		if (err) {
   4c7a2:	3705      	adds	r7, #5
   4c7a4:	4604      	mov	r4, r0
   4c7a6:	2800      	cmp	r0, #0
   4c7a8:	f47f aee9 	bne.w	4c57e <parse_ncellmeas+0x86>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   4c7ac:	f108 0801 	add.w	r8, r8, #1
   4c7b0:	e7b5      	b.n	4c71e <parse_ncellmeas+0x226>
		err = 1;
   4c7b2:	2401      	movs	r4, #1
   4c7b4:	e6e3      	b.n	4c57e <parse_ncellmeas+0x86>
   4c7b6:	bf00      	nop
   4c7b8:	0005f399 	.word	0x0005f399
   4c7bc:	0005bf0c 	.word	0x0005bf0c
   4c7c0:	0005f740 	.word	0x0005f740
   4c7c4:	0005f5f1 	.word	0x0005f5f1
   4c7c8:	0005f2e6 	.word	0x0005f2e6

0004c7cc <parse_ncellmeas_gci>:
{
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c7cc:	2300      	movs	r3, #0
{
   4c7ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c7d2:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
   4c7d4:	220b      	movs	r2, #11
{
   4c7d6:	460d      	mov	r5, r1
	uint32_t count = 0;
   4c7d8:	4699      	mov	r9, r3
{
   4c7da:	b0a3      	sub	sp, #140	; 0x8c
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c7dc:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	size_t response_prefix_len = sizeof(response_prefix);
   4c7e0:	920e      	str	r2, [sp, #56]	; 0x38
{
   4c7e2:	9007      	str	r0, [sp, #28]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c7e4:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
static uint32_t get_char_frequency(const char *str, char c)
   4c7e8:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   4c7ea:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   4c7ee:	2b2c      	cmp	r3, #44	; 0x2c
   4c7f0:	d102      	bne.n	4c7f8 <parse_ncellmeas_gci+0x2c>
			count++;
   4c7f2:	f109 0901 	add.w	r9, r9, #1
	} while (*(str++) != '\0');
   4c7f6:	e7f8      	b.n	4c7ea <parse_ncellmeas_gci+0x1e>
   4c7f8:	2b00      	cmp	r3, #0
   4c7fa:	d1f6      	bne.n	4c7ea <parse_ncellmeas_gci+0x1e>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c7fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4c800:	2430      	movs	r4, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   4c802:	f109 0703 	add.w	r7, r9, #3
	cells->gci_cells_count = 0;
   4c806:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	cells->ncells_count = 0;
   4c80a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c80e:	60b2      	str	r2, [r6, #8]

	for (i = 0; i < params->gci_count; i++) {
   4c810:	9907      	ldr	r1, [sp, #28]
   4c812:	7849      	ldrb	r1, [r1, #1]
   4c814:	4299      	cmp	r1, r3
   4c816:	d817      	bhi.n	4c848 <parse_ncellmeas_gci+0x7c>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   4c818:	4639      	mov	r1, r7
   4c81a:	a811      	add	r0, sp, #68	; 0x44
   4c81c:	f00a ff8a 	bl	57734 <at_params_list_init>
	if (err) {
   4c820:	4604      	mov	r4, r0
   4c822:	b1d8      	cbz	r0, 4c85c <parse_ncellmeas_gci+0x90>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
   4c824:	4b9c      	ldr	r3, [pc, #624]	; (4ca98 <parse_ncellmeas_gci+0x2cc>)
   4c826:	9003      	str	r0, [sp, #12]
		goto clean_exit;
	}

	err = at_parser_params_from_str(at_response, NULL, &resp_list);
	if (err && err != -E2BIG) {
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   4c828:	9302      	str	r3, [sp, #8]
   4c82a:	2300      	movs	r3, #0
   4c82c:	e9cd 3300 	strd	r3, r3, [sp]
   4c830:	2201      	movs	r2, #1
   4c832:	4618      	mov	r0, r3
   4c834:	4999      	ldr	r1, [pc, #612]	; (4ca9c <parse_ncellmeas_gci+0x2d0>)
   4c836:	f00b f8d6 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
	if (incomplete) {
		err = -E2BIG;
	}

clean_exit:
	at_params_list_free(&resp_list);
   4c83a:	a811      	add	r0, sp, #68	; 0x44
   4c83c:	f00a ffa4 	bl	57788 <at_params_list_free>

	return err;
}
   4c840:	4620      	mov	r0, r4
   4c842:	b023      	add	sp, #140	; 0x8c
   4c844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c848:	fb04 f003 	mul.w	r0, r4, r3
   4c84c:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   4c84e:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c850:	4401      	add	r1, r0
   4c852:	608a      	str	r2, [r1, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   4c854:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   4c856:	4401      	add	r1, r0
   4c858:	828a      	strh	r2, [r1, #20]
	for (i = 0; i < params->gci_count; i++) {
   4c85a:	e7d9      	b.n	4c810 <parse_ncellmeas_gci+0x44>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   4c85c:	4601      	mov	r1, r0
   4c85e:	aa11      	add	r2, sp, #68	; 0x44
   4c860:	4628      	mov	r0, r5
   4c862:	f00a ff4e 	bl	57702 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   4c866:	4604      	mov	r4, r0
   4c868:	b1f0      	cbz	r0, 4c8a8 <parse_ncellmeas_gci+0xdc>
   4c86a:	1dc3      	adds	r3, r0, #7
   4c86c:	d002      	beq.n	4c874 <parse_ncellmeas_gci+0xa8>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   4c86e:	4b8c      	ldr	r3, [pc, #560]	; (4caa0 <parse_ncellmeas_gci+0x2d4>)
   4c870:	9003      	str	r0, [sp, #12]
   4c872:	e7d9      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
   4c874:	4b8b      	ldr	r3, [pc, #556]	; (4caa4 <parse_ncellmeas_gci+0x2d8>)
   4c876:	e9cd 0504 	strd	r0, r5, [sp, #16]
   4c87a:	9302      	str	r3, [sp, #8]
   4c87c:	2300      	movs	r3, #0
   4c87e:	2202      	movs	r2, #2
   4c880:	4618      	mov	r0, r3
   4c882:	e9cd 3300 	strd	r3, r3, [sp]
   4c886:	4985      	ldr	r1, [pc, #532]	; (4ca9c <parse_ncellmeas_gci+0x2d0>)
   4c888:	9703      	str	r7, [sp, #12]
   4c88a:	f00b f8ac 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
		incomplete = true;
   4c88e:	2301      	movs	r3, #1
   4c890:	9306      	str	r3, [sp, #24]
	err = at_params_string_get(&resp_list,
   4c892:	2100      	movs	r1, #0
   4c894:	ab0e      	add	r3, sp, #56	; 0x38
   4c896:	aa13      	add	r2, sp, #76	; 0x4c
   4c898:	a811      	add	r0, sp, #68	; 0x44
   4c89a:	f00b f853 	bl	57944 <at_params_string_get>
	if (err) {
   4c89e:	4604      	mov	r4, r0
   4c8a0:	b120      	cbz	r0, 4c8ac <parse_ncellmeas_gci+0xe0>
		LOG_ERR("Could not get response prefix, error: %d", err);
   4c8a2:	4b81      	ldr	r3, [pc, #516]	; (4caa8 <parse_ncellmeas_gci+0x2dc>)
   4c8a4:	9003      	str	r0, [sp, #12]
   4c8a6:	e7bf      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
	bool incomplete = false;
   4c8a8:	9006      	str	r0, [sp, #24]
   4c8aa:	e7f2      	b.n	4c892 <parse_ncellmeas_gci+0xc6>
	if (!response_is_valid(response_prefix, response_prefix_len,
   4c8ac:	4a7f      	ldr	r2, [pc, #508]	; (4caac <parse_ncellmeas_gci+0x2e0>)
   4c8ae:	990e      	ldr	r1, [sp, #56]	; 0x38
   4c8b0:	a813      	add	r0, sp, #76	; 0x4c
   4c8b2:	f7ff fb8b 	bl	4bfcc <response_is_valid>
   4c8b6:	4607      	mov	r7, r0
   4c8b8:	b950      	cbnz	r0, 4c8d0 <parse_ncellmeas_gci+0x104>
		LOG_ERR("Not a valid NCELLMEAS response");
   4c8ba:	4b7d      	ldr	r3, [pc, #500]	; (4cab0 <parse_ncellmeas_gci+0x2e4>)
   4c8bc:	2201      	movs	r2, #1
   4c8be:	e9cd 0301 	strd	r0, r3, [sp, #4]
   4c8c2:	4976      	ldr	r1, [pc, #472]	; (4ca9c <parse_ncellmeas_gci+0x2d0>)
   4c8c4:	4603      	mov	r3, r0
   4c8c6:	9000      	str	r0, [sp, #0]
   4c8c8:	f00b f88d 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
	err = at_params_string_get(&resp_list,
   4c8cc:	2400      	movs	r4, #0
   4c8ce:	e7b4      	b.n	4c83a <parse_ncellmeas_gci+0x6e>
	err = at_params_int_get(&resp_list, curr_index, &status);
   4c8d0:	2101      	movs	r1, #1
   4c8d2:	aa0b      	add	r2, sp, #44	; 0x2c
   4c8d4:	a811      	add	r0, sp, #68	; 0x44
   4c8d6:	f00b f809 	bl	578ec <at_params_int_get>
	if (err) {
   4c8da:	4604      	mov	r4, r0
   4c8dc:	2800      	cmp	r0, #0
   4c8de:	d1ac      	bne.n	4c83a <parse_ncellmeas_gci+0x6e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   4c8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   4c8e2:	2b00      	cmp	r3, #0
   4c8e4:	f040 81ae 	bne.w	4cc44 <parse_ncellmeas_gci+0x478>
	curr_index = AT_NCELLMEAS_STATUS_INDEX;
   4c8e8:	2501      	movs	r5, #1
	size_t i = 0, j = 0, k = 0;
   4c8ea:	469b      	mov	fp, r3
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   4c8ec:	4698      	mov	r8, r3
   4c8ee:	f1a9 030a 	sub.w	r3, r9, #10
   4c8f2:	9309      	str	r3, [sp, #36]	; 0x24
   4c8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   4c8f6:	42ab      	cmp	r3, r5
   4c8f8:	d903      	bls.n	4c902 <parse_ncellmeas_gci+0x136>
			i < params->gci_count; i++) {
   4c8fa:	9b07      	ldr	r3, [sp, #28]
   4c8fc:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   4c8fe:	4598      	cmp	r8, r3
   4c900:	d305      	bcc.n	4c90e <parse_ncellmeas_gci+0x142>
	if (incomplete) {
   4c902:	9b06      	ldr	r3, [sp, #24]
   4c904:	2b00      	cmp	r3, #0
   4c906:	d0e1      	beq.n	4c8cc <parse_ncellmeas_gci+0x100>
		err = -E2BIG;
   4c908:	f06f 0406 	mvn.w	r4, #6
   4c90c:	e795      	b.n	4c83a <parse_ncellmeas_gci+0x6e>
		curr_index++;
   4c90e:	f105 0901 	add.w	r9, r5, #1
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   4c912:	4649      	mov	r1, r9
   4c914:	aa0c      	add	r2, sp, #48	; 0x30
   4c916:	a811      	add	r0, sp, #68	; 0x44
   4c918:	f00b f89a 	bl	57a50 <string_param_to_int.constprop.0>
		if (err) {
   4c91c:	4604      	mov	r4, r0
   4c91e:	b170      	cbz	r0, 4c93e <parse_ncellmeas_gci+0x172>
			LOG_ERR("Could not parse cell_id, index %d, i %d error: %d",
   4c920:	4b64      	ldr	r3, [pc, #400]	; (4cab4 <parse_ncellmeas_gci+0x2e8>)
   4c922:	e9cd 8004 	strd	r8, r0, [sp, #16]
   4c926:	9302      	str	r3, [sp, #8]
   4c928:	2300      	movs	r3, #0
   4c92a:	2201      	movs	r2, #1
   4c92c:	4618      	mov	r0, r3
   4c92e:	e9cd 3300 	strd	r3, r3, [sp]
   4c932:	495a      	ldr	r1, [pc, #360]	; (4ca9c <parse_ncellmeas_gci+0x2d0>)
   4c934:	f8cd 900c 	str.w	r9, [sp, #12]
   4c938:	f00b f855 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   4c93c:	e77d      	b.n	4c83a <parse_ncellmeas_gci+0x6e>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   4c93e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   4c940:	aa0f      	add	r2, sp, #60	; 0x3c
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   4c942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c946:	bfa4      	itt	ge
   4c948:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
   4c94c:	930c      	strge	r3, [sp, #48]	; 0x30
		parsed_cell.id = tmp_int;
   4c94e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   4c950:	1ca9      	adds	r1, r5, #2
		parsed_cell.id = tmp_int;
   4c952:	9318      	str	r3, [sp, #96]	; 0x60
		len = sizeof(tmp_str);
   4c954:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   4c956:	a811      	add	r0, sp, #68	; 0x44
		len = sizeof(tmp_str);
   4c958:	930d      	str	r3, [sp, #52]	; 0x34
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   4c95a:	ab0d      	add	r3, sp, #52	; 0x34
   4c95c:	f00a fff2 	bl	57944 <at_params_string_get>
		if (err) {
   4c960:	4604      	mov	r4, r0
   4c962:	b110      	cbz	r0, 4c96a <parse_ncellmeas_gci+0x19e>
			LOG_ERR("Could not parse plmn, error: %d", err);
   4c964:	4b54      	ldr	r3, [pc, #336]	; (4cab8 <parse_ncellmeas_gci+0x2ec>)
   4c966:	9003      	str	r0, [sp, #12]
   4c968:	e75e      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
		tmp_str[len] = '\0';
   4c96a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   4c96c:	4682      	mov	sl, r0
   4c96e:	3388      	adds	r3, #136	; 0x88
   4c970:	446b      	add	r3, sp
   4c972:	f803 0c4c 	strb.w	r0, [r3, #-76]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   4c976:	210a      	movs	r1, #10
   4c978:	aa17      	add	r2, sp, #92	; 0x5c
   4c97a:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   4c97e:	f00b f841 	bl	57a04 <string_to_int>
		if (err) {
   4c982:	4604      	mov	r4, r0
   4c984:	b138      	cbz	r0, 4c996 <parse_ncellmeas_gci+0x1ca>
			LOG_ERR("string_to_int, error: %d", err);
   4c986:	4b4d      	ldr	r3, [pc, #308]	; (4cabc <parse_ncellmeas_gci+0x2f0>)
   4c988:	9403      	str	r4, [sp, #12]
			LOG_ERR("Could not parse rsrp, error: %d", err);
   4c98a:	e9cd a301 	strd	sl, r3, [sp, #4]
   4c98e:	f8cd a000 	str.w	sl, [sp]
   4c992:	4653      	mov	r3, sl
   4c994:	e74c      	b.n	4c830 <parse_ncellmeas_gci+0x64>
		tmp_str[3] = '\0';
   4c996:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   4c99a:	4681      	mov	r9, r0
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   4c99c:	210a      	movs	r1, #10
   4c99e:	aa16      	add	r2, sp, #88	; 0x58
   4c9a0:	a80f      	add	r0, sp, #60	; 0x3c
   4c9a2:	f00b f82f 	bl	57a04 <string_to_int>
		if (err) {
   4c9a6:	4604      	mov	r4, r0
   4c9a8:	2800      	cmp	r0, #0
   4c9aa:	d1ec      	bne.n	4c986 <parse_ncellmeas_gci+0x1ba>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   4c9ac:	aa0c      	add	r2, sp, #48	; 0x30
   4c9ae:	1ce9      	adds	r1, r5, #3
   4c9b0:	a811      	add	r0, sp, #68	; 0x44
   4c9b2:	f00b f84d 	bl	57a50 <string_param_to_int.constprop.0>
		if (err) {
   4c9b6:	4604      	mov	r4, r0
   4c9b8:	b168      	cbz	r0, 4c9d6 <parse_ncellmeas_gci+0x20a>
			LOG_ERR("Could not parse tracking_area_code in i %d, error: %d", i, err);
   4c9ba:	4b41      	ldr	r3, [pc, #260]	; (4cac0 <parse_ncellmeas_gci+0x2f4>)
   4c9bc:	e9cd 8003 	strd	r8, r0, [sp, #12]
   4c9c0:	e9cd 9301 	strd	r9, r3, [sp, #4]
   4c9c4:	2201      	movs	r2, #1
   4c9c6:	464b      	mov	r3, r9
   4c9c8:	4648      	mov	r0, r9
   4c9ca:	4934      	ldr	r1, [pc, #208]	; (4ca9c <parse_ncellmeas_gci+0x2d0>)
   4c9cc:	f8cd 9000 	str.w	r9, [sp]
   4c9d0:	f00b f809 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   4c9d4:	e731      	b.n	4c83a <parse_ncellmeas_gci+0x6e>
		parsed_cell.tac = tmp_int;
   4c9d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   4c9d8:	aa0c      	add	r2, sp, #48	; 0x30
   4c9da:	1d29      	adds	r1, r5, #4
   4c9dc:	a811      	add	r0, sp, #68	; 0x44
		parsed_cell.tac = tmp_int;
   4c9de:	9319      	str	r3, [sp, #100]	; 0x64
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   4c9e0:	f00a ff84 	bl	578ec <at_params_int_get>
		if (err) {
   4c9e4:	4604      	mov	r4, r0
   4c9e6:	b110      	cbz	r0, 4c9ee <parse_ncellmeas_gci+0x222>
			LOG_ERR("Could not parse timing_advance, error: %d", err);
   4c9e8:	4b36      	ldr	r3, [pc, #216]	; (4cac4 <parse_ncellmeas_gci+0x2f8>)
   4c9ea:	9003      	str	r0, [sp, #12]
   4c9ec:	e7cd      	b.n	4c98a <parse_ncellmeas_gci+0x1be>
		parsed_cell.timing_advance = tmp_int;
   4c9ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_int64_get(&resp_list, curr_index,
   4c9f0:	aa1c      	add	r2, sp, #112	; 0x70
   4c9f2:	1d69      	adds	r1, r5, #5
   4c9f4:	a811      	add	r0, sp, #68	; 0x44
		parsed_cell.timing_advance = tmp_int;
   4c9f6:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
		err = at_params_int64_get(&resp_list, curr_index,
   4c9fa:	f00a ff8f 	bl	5791c <at_params_int64_get>
		if (err) {
   4c9fe:	4604      	mov	r4, r0
   4ca00:	b138      	cbz	r0, 4ca12 <parse_ncellmeas_gci+0x246>
			LOG_ERR("Could not parse timing_advance_meas_time, error: %d", err);
   4ca02:	4b31      	ldr	r3, [pc, #196]	; (4cac8 <parse_ncellmeas_gci+0x2fc>)
   4ca04:	9003      	str	r0, [sp, #12]
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   4ca06:	e9cd 9301 	strd	r9, r3, [sp, #4]
   4ca0a:	f8cd 9000 	str.w	r9, [sp]
   4ca0e:	464b      	mov	r3, r9
   4ca10:	e70e      	b.n	4c830 <parse_ncellmeas_gci+0x64>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   4ca12:	aa1a      	add	r2, sp, #104	; 0x68
   4ca14:	1da9      	adds	r1, r5, #6
   4ca16:	a811      	add	r0, sp, #68	; 0x44
   4ca18:	f00a ff68 	bl	578ec <at_params_int_get>
		if (err) {
   4ca1c:	4604      	mov	r4, r0
   4ca1e:	b110      	cbz	r0, 4ca26 <parse_ncellmeas_gci+0x25a>
			LOG_ERR("Could not parse earfcn, error: %d", err);
   4ca20:	4b2a      	ldr	r3, [pc, #168]	; (4cacc <parse_ncellmeas_gci+0x300>)
   4ca22:	9003      	str	r0, [sp, #12]
   4ca24:	e7b1      	b.n	4c98a <parse_ncellmeas_gci+0x1be>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   4ca26:	aa20      	add	r2, sp, #128	; 0x80
   4ca28:	1de9      	adds	r1, r5, #7
   4ca2a:	a811      	add	r0, sp, #68	; 0x44
   4ca2c:	f00a ff2a 	bl	57884 <at_params_short_get>
		if (err) {
   4ca30:	4604      	mov	r4, r0
   4ca32:	b110      	cbz	r0, 4ca3a <parse_ncellmeas_gci+0x26e>
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   4ca34:	4b26      	ldr	r3, [pc, #152]	; (4cad0 <parse_ncellmeas_gci+0x304>)
   4ca36:	9003      	str	r0, [sp, #12]
   4ca38:	e7e5      	b.n	4ca06 <parse_ncellmeas_gci+0x23a>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   4ca3a:	f10d 0282 	add.w	r2, sp, #130	; 0x82
   4ca3e:	f105 0108 	add.w	r1, r5, #8
   4ca42:	a811      	add	r0, sp, #68	; 0x44
   4ca44:	f00a ff1e 	bl	57884 <at_params_short_get>
		if (err) {
   4ca48:	4604      	mov	r4, r0
   4ca4a:	b110      	cbz	r0, 4ca52 <parse_ncellmeas_gci+0x286>
			LOG_ERR("Could not parse rsrp, error: %d", err);
   4ca4c:	4b21      	ldr	r3, [pc, #132]	; (4cad4 <parse_ncellmeas_gci+0x308>)
   4ca4e:	9003      	str	r0, [sp, #12]
   4ca50:	e79b      	b.n	4c98a <parse_ncellmeas_gci+0x1be>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   4ca52:	aa21      	add	r2, sp, #132	; 0x84
   4ca54:	f105 0109 	add.w	r1, r5, #9
   4ca58:	a811      	add	r0, sp, #68	; 0x44
   4ca5a:	f00a ff13 	bl	57884 <at_params_short_get>
		if (err) {
   4ca5e:	4604      	mov	r4, r0
   4ca60:	b110      	cbz	r0, 4ca68 <parse_ncellmeas_gci+0x29c>
			LOG_ERR("Could not parse rsrq, error: %d", err);
   4ca62:	4b1d      	ldr	r3, [pc, #116]	; (4cad8 <parse_ncellmeas_gci+0x30c>)
   4ca64:	9003      	str	r0, [sp, #12]
   4ca66:	e6df      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   4ca68:	aa1e      	add	r2, sp, #120	; 0x78
   4ca6a:	f105 010a 	add.w	r1, r5, #10
   4ca6e:	a811      	add	r0, sp, #68	; 0x44
   4ca70:	f00a ff54 	bl	5791c <at_params_int64_get>
		if (err) {
   4ca74:	4604      	mov	r4, r0
   4ca76:	b110      	cbz	r0, 4ca7e <parse_ncellmeas_gci+0x2b2>
			LOG_ERR("Could not parse meas_time, error: %d", err);
   4ca78:	4b18      	ldr	r3, [pc, #96]	; (4cadc <parse_ncellmeas_gci+0x310>)
   4ca7a:	9003      	str	r0, [sp, #12]
   4ca7c:	e6d4      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   4ca7e:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   4ca82:	f105 010b 	add.w	r1, r5, #11
   4ca86:	a811      	add	r0, sp, #68	; 0x44
   4ca88:	f00a fefc 	bl	57884 <at_params_short_get>
		if (err) {
   4ca8c:	4604      	mov	r4, r0
   4ca8e:	b348      	cbz	r0, 4cae4 <parse_ncellmeas_gci+0x318>
			LOG_ERR("Could not parse serving, error: %d", err);
   4ca90:	4b13      	ldr	r3, [pc, #76]	; (4cae0 <parse_ncellmeas_gci+0x314>)
   4ca92:	9003      	str	r0, [sp, #12]
   4ca94:	e6c8      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
   4ca96:	bf00      	nop
   4ca98:	0005f772 	.word	0x0005f772
   4ca9c:	0005bf0c 	.word	0x0005bf0c
   4caa0:	0005f740 	.word	0x0005f740
   4caa4:	0005f7a9 	.word	0x0005f7a9
   4caa8:	0005f5f1 	.word	0x0005f5f1
   4caac:	0005f2e6 	.word	0x0005f2e6
   4cab0:	0005f7e6 	.word	0x0005f7e6
   4cab4:	0005f805 	.word	0x0005f805
   4cab8:	0005f837 	.word	0x0005f837
   4cabc:	0005f857 	.word	0x0005f857
   4cac0:	0005f870 	.word	0x0005f870
   4cac4:	0005f8a6 	.word	0x0005f8a6
   4cac8:	0005f8d0 	.word	0x0005f8d0
   4cacc:	0005f904 	.word	0x0005f904
   4cad0:	0005f926 	.word	0x0005f926
   4cad4:	0005f94e 	.word	0x0005f94e
   4cad8:	0005f96e 	.word	0x0005f96e
   4cadc:	0005f98e 	.word	0x0005f98e
   4cae0:	0005f9b3 	.word	0x0005f9b3
		curr_index++;
   4cae4:	350c      	adds	r5, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   4cae6:	4629      	mov	r1, r5
   4cae8:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   4caec:	a811      	add	r0, sp, #68	; 0x44
		is_serving_cell = tmp_short;
   4caee:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   4caf2:	f00a fec7 	bl	57884 <at_params_short_get>
		if (err) {
   4caf6:	4604      	mov	r4, r0
   4caf8:	b110      	cbz	r0, 4cb00 <parse_ncellmeas_gci+0x334>
			LOG_ERR("Could not parse neighbor_count, error: %d", err);
   4cafa:	4b53      	ldr	r3, [pc, #332]	; (4cc48 <parse_ncellmeas_gci+0x47c>)
   4cafc:	9003      	str	r0, [sp, #12]
   4cafe:	e693      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
		if (is_serving_cell) {
   4cb00:	f1b9 0f00 	cmp.w	r9, #0
   4cb04:	f000 8087 	beq.w	4cc16 <parse_ncellmeas_gci+0x44a>
			cells->current_cell = parsed_cell;
   4cb08:	46b6      	mov	lr, r6
   4cb0a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
   4cb0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   4cb12:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   4cb16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   4cb1a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   4cb1e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   4cb22:	f89d 902a 	ldrb.w	r9, [sp, #42]	; 0x2a
			cells->current_cell = parsed_cell;
   4cb26:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   4cb2a:	f1b9 0f00 	cmp.w	r9, #0
   4cb2e:	d026      	beq.n	4cb7e <parse_ncellmeas_gci+0x3b2>
				if (parsed_ncells_count > CONFIG_LTE_NEIGHBOR_CELLS_MAX) {
   4cb30:	f1b9 0f11 	cmp.w	r9, #17
   4cb34:	d90e      	bls.n	4cb54 <parse_ncellmeas_gci+0x388>
					LOG_WRN("Cutting response, because received neigbor cell"
   4cb36:	f04f 0911 	mov.w	r9, #17
   4cb3a:	4b44      	ldr	r3, [pc, #272]	; (4cc4c <parse_ncellmeas_gci+0x480>)
   4cb3c:	2202      	movs	r2, #2
   4cb3e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4cb42:	4620      	mov	r0, r4
   4cb44:	4623      	mov	r3, r4
   4cb46:	4942      	ldr	r1, [pc, #264]	; (4cc50 <parse_ncellmeas_gci+0x484>)
   4cb48:	f8cd 900c 	str.w	r9, [sp, #12]
   4cb4c:	9400      	str	r4, [sp, #0]
   4cb4e:	f00a ff4a 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
					incomplete = true;
   4cb52:	9706      	str	r7, [sp, #24]
				ncells = k_calloc(
   4cb54:	2110      	movs	r1, #16
   4cb56:	4648      	mov	r0, r9
   4cb58:	f00e f94b 	bl	5adf2 <k_calloc>
					to_be_parsed_ncell_count = parsed_ncells_count;
   4cb5c:	464c      	mov	r4, r9
				ncells = k_calloc(
   4cb5e:	4603      	mov	r3, r0
				if (ncells == NULL) {
   4cb60:	b950      	cbnz	r0, 4cb78 <parse_ncellmeas_gci+0x3ac>
					LOG_WRN("Failed to allocate memory for the ncells"
   4cb62:	4a3c      	ldr	r2, [pc, #240]	; (4cc54 <parse_ncellmeas_gci+0x488>)
   4cb64:	493a      	ldr	r1, [pc, #232]	; (4cc50 <parse_ncellmeas_gci+0x484>)
   4cb66:	e9cd 0201 	strd	r0, r2, [sp, #4]
   4cb6a:	9000      	str	r0, [sp, #0]
   4cb6c:	2202      	movs	r2, #2
   4cb6e:	f00a ff3a 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
			i < params->gci_count; i++) {
   4cb72:	f108 0801 	add.w	r8, r8, #1
   4cb76:	e6bd      	b.n	4c8f4 <parse_ncellmeas_gci+0x128>
				cells->neighbor_cells = ncells;
   4cb78:	6370      	str	r0, [r6, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   4cb7a:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   4cb7e:	f04f 0900 	mov.w	r9, #0
   4cb82:	9408      	str	r4, [sp, #32]
   4cb84:	9b08      	ldr	r3, [sp, #32]
   4cb86:	454b      	cmp	r3, r9
   4cb88:	d0f3      	beq.n	4cb72 <parse_ncellmeas_gci+0x3a6>
							&cells->neighbor_cells[j].earfcn);
   4cb8a:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   4cb8c:	1c69      	adds	r1, r5, #1
   4cb8e:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   4cb92:	a811      	add	r0, sp, #68	; 0x44
   4cb94:	f00a feaa 	bl	578ec <at_params_int_get>
				if (err) {
   4cb98:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   4cb9c:	4604      	mov	r4, r0
   4cb9e:	b110      	cbz	r0, 4cba6 <parse_ncellmeas_gci+0x3da>
					LOG_ERR("Could not parse n_earfcn, error: %d", err);
   4cba0:	4b2d      	ldr	r3, [pc, #180]	; (4cc58 <parse_ncellmeas_gci+0x48c>)
   4cba2:	9003      	str	r0, [sp, #12]
   4cba4:	e640      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
							  &cells->neighbor_cells[j].phys_cell_id);
   4cba6:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   4cba8:	1ca9      	adds	r1, r5, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   4cbaa:	4452      	add	r2, sl
				err = at_params_short_get(&resp_list,
   4cbac:	3208      	adds	r2, #8
   4cbae:	a811      	add	r0, sp, #68	; 0x44
   4cbb0:	f00a fe68 	bl	57884 <at_params_short_get>
				if (err) {
   4cbb4:	4604      	mov	r4, r0
   4cbb6:	b110      	cbz	r0, 4cbbe <parse_ncellmeas_gci+0x3f2>
					LOG_ERR("Could not parse n_phys_cell_id, error: %d", err);
   4cbb8:	4b28      	ldr	r3, [pc, #160]	; (4cc5c <parse_ncellmeas_gci+0x490>)
   4cbba:	9003      	str	r0, [sp, #12]
   4cbbc:	e634      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   4cbbe:	aa0c      	add	r2, sp, #48	; 0x30
   4cbc0:	1ce9      	adds	r1, r5, #3
   4cbc2:	a811      	add	r0, sp, #68	; 0x44
   4cbc4:	f00a fe92 	bl	578ec <at_params_int_get>
				if (err) {
   4cbc8:	4604      	mov	r4, r0
   4cbca:	b110      	cbz	r0, 4cbd2 <parse_ncellmeas_gci+0x406>
					LOG_ERR("Could not parse n_rsrp, error: %d", err);
   4cbcc:	4b24      	ldr	r3, [pc, #144]	; (4cc60 <parse_ncellmeas_gci+0x494>)
   4cbce:	9003      	str	r0, [sp, #12]
   4cbd0:	e62a      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
				cells->neighbor_cells[j].rsrp = tmp_int;
   4cbd2:	6b73      	ldr	r3, [r6, #52]	; 0x34
   4cbd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   4cbd6:	4453      	add	r3, sl
   4cbd8:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   4cbda:	1d29      	adds	r1, r5, #4
   4cbdc:	aa0c      	add	r2, sp, #48	; 0x30
   4cbde:	a811      	add	r0, sp, #68	; 0x44
   4cbe0:	f00a fe84 	bl	578ec <at_params_int_get>
				if (err) {
   4cbe4:	4604      	mov	r4, r0
   4cbe6:	b110      	cbz	r0, 4cbee <parse_ncellmeas_gci+0x422>
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   4cbe8:	4b1e      	ldr	r3, [pc, #120]	; (4cc64 <parse_ncellmeas_gci+0x498>)
   4cbea:	9003      	str	r0, [sp, #12]
   4cbec:	e61c      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
				cells->neighbor_cells[j].rsrq = tmp_int;
   4cbee:	6b73      	ldr	r3, [r6, #52]	; 0x34
   4cbf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   4cbf2:	4453      	add	r3, sl
   4cbf4:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   4cbf6:	6b72      	ldr	r2, [r6, #52]	; 0x34
				curr_index++;
   4cbf8:	3505      	adds	r5, #5
							&cells->neighbor_cells[j].time_diff);
   4cbfa:	4452      	add	r2, sl
				err = at_params_int_get(&resp_list,
   4cbfc:	4629      	mov	r1, r5
   4cbfe:	3204      	adds	r2, #4
   4cc00:	a811      	add	r0, sp, #68	; 0x44
   4cc02:	f00a fe73 	bl	578ec <at_params_int_get>
				if (err) {
   4cc06:	4604      	mov	r4, r0
   4cc08:	b110      	cbz	r0, 4cc10 <parse_ncellmeas_gci+0x444>
					LOG_ERR("Could not parse time_diff, error: %d", err);
   4cc0a:	4b17      	ldr	r3, [pc, #92]	; (4cc68 <parse_ncellmeas_gci+0x49c>)
   4cc0c:	9003      	str	r0, [sp, #12]
   4cc0e:	e60b      	b.n	4c828 <parse_ncellmeas_gci+0x5c>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   4cc10:	f109 0901 	add.w	r9, r9, #1
   4cc14:	e7b6      	b.n	4cb84 <parse_ncellmeas_gci+0x3b8>
			cells->gci_cells[k] = parsed_cell;
   4cc16:	2230      	movs	r2, #48	; 0x30
   4cc18:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   4cc1a:	ac16      	add	r4, sp, #88	; 0x58
   4cc1c:	fb02 3c0b 	mla	ip, r2, fp, r3
   4cc20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   4cc22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   4cc26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   4cc28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   4cc2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4cc30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   4cc34:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			k++;
   4cc38:	f10b 0b01 	add.w	fp, fp, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   4cc3c:	3301      	adds	r3, #1
   4cc3e:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			k++;
   4cc42:	e796      	b.n	4cb72 <parse_ncellmeas_gci+0x3a6>
		err = 1;
   4cc44:	2401      	movs	r4, #1
   4cc46:	e5f8      	b.n	4c83a <parse_ncellmeas_gci+0x6e>
   4cc48:	0005f9d6 	.word	0x0005f9d6
   4cc4c:	0005fa00 	.word	0x0005fa00
   4cc50:	0005bf0c 	.word	0x0005bf0c
   4cc54:	0005fa58 	.word	0x0005fa58
   4cc58:	0005fa8c 	.word	0x0005fa8c
   4cc5c:	0005fab0 	.word	0x0005fab0
   4cc60:	0005fada 	.word	0x0005fada
   4cc64:	0005fafc 	.word	0x0005fafc
   4cc68:	0005fb1e 	.word	0x0005fb1e

0004cc6c <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   4cc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct at_param_list resp_list = {0};
   4cc6e:	2500      	movs	r5, #0
{
   4cc70:	b089      	sub	sp, #36	; 0x24
   4cc72:	4607      	mov	r7, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   4cc74:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   4cc76:	e9cd 5506 	strd	r5, r5, [sp, #24]
	if (modem_sleep == NULL || at_response == NULL) {
   4cc7a:	2900      	cmp	r1, #0
   4cc7c:	d05b      	beq.n	4cd36 <parse_xmodemsleep+0xca>
   4cc7e:	2800      	cmp	r0, #0
   4cc80:	d059      	beq.n	4cd36 <parse_xmodemsleep+0xca>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   4cc82:	2104      	movs	r1, #4
   4cc84:	a806      	add	r0, sp, #24
   4cc86:	f00a fd55 	bl	57734 <at_params_list_init>
	if (err) {
   4cc8a:	4604      	mov	r4, r0
   4cc8c:	b168      	cbz	r0, 4ccaa <parse_xmodemsleep+0x3e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   4cc8e:	4b2b      	ldr	r3, [pc, #172]	; (4cd3c <parse_xmodemsleep+0xd0>)
   4cc90:	9003      	str	r0, [sp, #12]
   4cc92:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4cc96:	2201      	movs	r2, #1
   4cc98:	462b      	mov	r3, r5
   4cc9a:	4628      	mov	r0, r5
   4cc9c:	4928      	ldr	r1, [pc, #160]	; (4cd40 <parse_xmodemsleep+0xd4>)
   4cc9e:	9500      	str	r5, [sp, #0]
   4cca0:	f00a fea1 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   4cca4:	4620      	mov	r0, r4
   4cca6:	b009      	add	sp, #36	; 0x24
   4cca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   4ccaa:	4601      	mov	r1, r0
   4ccac:	aa06      	add	r2, sp, #24
   4ccae:	4638      	mov	r0, r7
   4ccb0:	f00a fd27 	bl	57702 <at_parser_params_from_str>
	if (err) {
   4ccb4:	4604      	mov	r4, r0
   4ccb6:	b170      	cbz	r0, 4ccd6 <parse_xmodemsleep+0x6a>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   4ccb8:	4b22      	ldr	r3, [pc, #136]	; (4cd44 <parse_xmodemsleep+0xd8>)
   4ccba:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   4ccbc:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4ccc0:	2201      	movs	r2, #1
   4ccc2:	462b      	mov	r3, r5
   4ccc4:	4628      	mov	r0, r5
   4ccc6:	491e      	ldr	r1, [pc, #120]	; (4cd40 <parse_xmodemsleep+0xd4>)
   4ccc8:	9500      	str	r5, [sp, #0]
   4ccca:	f00a fe8c 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   4ccce:	a806      	add	r0, sp, #24
   4ccd0:	f00a fd5a 	bl	57788 <at_params_list_free>
	return err;
   4ccd4:	e7e6      	b.n	4cca4 <parse_xmodemsleep+0x38>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   4ccd6:	2101      	movs	r1, #1
   4ccd8:	f10d 0216 	add.w	r2, sp, #22
   4ccdc:	a806      	add	r0, sp, #24
   4ccde:	f00a fded 	bl	578bc <at_params_unsigned_short_get>
	if (err) {
   4cce2:	4604      	mov	r4, r0
   4cce4:	b110      	cbz	r0, 4ccec <parse_xmodemsleep+0x80>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   4cce6:	4b18      	ldr	r3, [pc, #96]	; (4cd48 <parse_xmodemsleep+0xdc>)
   4cce8:	9003      	str	r0, [sp, #12]
   4ccea:	e7e7      	b.n	4ccbc <parse_xmodemsleep+0x50>
	modem_sleep->type = type;
   4ccec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   4ccf0:	a806      	add	r0, sp, #24
	modem_sleep->type = type;
   4ccf2:	7033      	strb	r3, [r6, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   4ccf4:	f00a fe46 	bl	57984 <at_params_valid_count_get>
   4ccf8:	2802      	cmp	r0, #2
   4ccfa:	d806      	bhi.n	4cd0a <parse_xmodemsleep+0x9e>
		modem_sleep->time = -1;
   4ccfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4cd00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4cd04:	e9c6 2302 	strd	r2, r3, [r6, #8]
		goto clean_exit;
   4cd08:	e7e1      	b.n	4ccce <parse_xmodemsleep+0x62>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   4cd0a:	2102      	movs	r1, #2
   4cd0c:	f106 0208 	add.w	r2, r6, #8
   4cd10:	a806      	add	r0, sp, #24
   4cd12:	f00a fe03 	bl	5791c <at_params_int64_get>
	if (err) {
   4cd16:	4605      	mov	r5, r0
   4cd18:	2800      	cmp	r0, #0
   4cd1a:	d0d8      	beq.n	4ccce <parse_xmodemsleep+0x62>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   4cd1c:	4b0b      	ldr	r3, [pc, #44]	; (4cd4c <parse_xmodemsleep+0xe0>)
   4cd1e:	9003      	str	r0, [sp, #12]
   4cd20:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4cd24:	4620      	mov	r0, r4
   4cd26:	4623      	mov	r3, r4
   4cd28:	9400      	str	r4, [sp, #0]
   4cd2a:	2201      	movs	r2, #1
   4cd2c:	4904      	ldr	r1, [pc, #16]	; (4cd40 <parse_xmodemsleep+0xd4>)
   4cd2e:	f00a fe5a 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
		goto clean_exit;
   4cd32:	462c      	mov	r4, r5
   4cd34:	e7cb      	b.n	4ccce <parse_xmodemsleep+0x62>
		return -EINVAL;
   4cd36:	f06f 0415 	mvn.w	r4, #21
   4cd3a:	e7b3      	b.n	4cca4 <parse_xmodemsleep+0x38>
   4cd3c:	0005f399 	.word	0x0005f399
   4cd40:	0005bf0c 	.word	0x0005bf0c
   4cd44:	0005fb43 	.word	0x0005fb43
   4cd48:	0005fb75 	.word	0x0005fb75
   4cd4c:	0005fb9e 	.word	0x0005fb9e

0004cd50 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   4cd50:	b5f0      	push	{r4, r5, r6, r7, lr}
   4cd52:	460d      	mov	r5, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   4cd54:	4604      	mov	r4, r0
{
   4cd56:	b085      	sub	sp, #20
	if (at_response == NULL || modem_evt == NULL) {
   4cd58:	b318      	cbz	r0, 4cda2 <parse_mdmev+0x52>
   4cd5a:	b311      	cbz	r1, 4cda2 <parse_mdmev+0x52>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   4cd5c:	2108      	movs	r1, #8
   4cd5e:	4a12      	ldr	r2, [pc, #72]	; (4cda8 <parse_mdmev+0x58>)
   4cd60:	f7ff f934 	bl	4bfcc <response_is_valid>
   4cd64:	4603      	mov	r3, r0
   4cd66:	b958      	cbnz	r0, 4cd80 <parse_mdmev+0x30>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   4cd68:	4a10      	ldr	r2, [pc, #64]	; (4cdac <parse_mdmev+0x5c>)
   4cd6a:	9000      	str	r0, [sp, #0]
   4cd6c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   4cd70:	490f      	ldr	r1, [pc, #60]	; (4cdb0 <parse_mdmev+0x60>)
   4cd72:	2201      	movs	r2, #1
   4cd74:	f00a fe37 	bl	579e6 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   4cd78:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   4cd7c:	b005      	add	sp, #20
   4cd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   4cd80:	2600      	movs	r6, #0
   4cd82:	4f0c      	ldr	r7, [pc, #48]	; (4cdb4 <parse_mdmev+0x64>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   4cd84:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   4cd86:	4621      	mov	r1, r4
   4cd88:	f857 0b04 	ldr.w	r0, [r7], #4
   4cd8c:	f7f4 f828 	bl	40de0 <strcmp>
   4cd90:	b908      	cbnz	r0, 4cd96 <parse_mdmev+0x46>
			*modem_evt = i;
   4cd92:	702e      	strb	r6, [r5, #0]
			return 0;
   4cd94:	e7f2      	b.n	4cd7c <parse_mdmev+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   4cd96:	3601      	adds	r6, #1
   4cd98:	2e05      	cmp	r6, #5
   4cd9a:	d1f4      	bne.n	4cd86 <parse_mdmev+0x36>
	return -ENODATA;
   4cd9c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   4cda0:	e7ec      	b.n	4cd7c <parse_mdmev+0x2c>
		return -EINVAL;
   4cda2:	f06f 0015 	mvn.w	r0, #21
   4cda6:	e7e9      	b.n	4cd7c <parse_mdmev+0x2c>
   4cda8:	0005fbd3 	.word	0x0005fbd3
   4cdac:	0005fbdc 	.word	0x0005fbdc
   4cdb0:	0005bf0c 	.word	0x0005bf0c
   4cdb4:	0005c490 	.word	0x0005c490

0004cdb8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   4cdb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   4cdba:	ab0b      	add	r3, sp, #44	; 0x2c
   4cdbc:	9305      	str	r3, [sp, #20]
   4cdbe:	9303      	str	r3, [sp, #12]
   4cdc0:	4b05      	ldr	r3, [pc, #20]	; (4cdd8 <z_log_msg_runtime_create.constprop.0+0x20>)
   4cdc2:	2201      	movs	r2, #1
   4cdc4:	9302      	str	r3, [sp, #8]
   4cdc6:	2300      	movs	r3, #0
   4cdc8:	4618      	mov	r0, r3
   4cdca:	e9cd 3300 	strd	r3, r3, [sp]
   4cdce:	f7f8 f9eb 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   4cdd2:	b007      	add	sp, #28
   4cdd4:	f85d fb04 	ldr.w	pc, [sp], #4
   4cdd8:	0005fc54 	.word	0x0005fc54

0004cddc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   4cddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   4cdde:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   4cde0:	f7f8 f972 	bl	450c8 <z_impl_log_panic>
   4cde4:	4b06      	ldr	r3, [pc, #24]	; (4ce00 <k_sys_fatal_error_handler+0x24>)
   4cde6:	4620      	mov	r0, r4
   4cde8:	9302      	str	r3, [sp, #8]
   4cdea:	2201      	movs	r2, #1
   4cdec:	4623      	mov	r3, r4
   4cdee:	e9cd 4400 	strd	r4, r4, [sp]
   4cdf2:	4904      	ldr	r1, [pc, #16]	; (4ce04 <k_sys_fatal_error_handler+0x28>)
   4cdf4:	f7ff ffe0 	bl	4cdb8 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   4cdf8:	4620      	mov	r0, r4
   4cdfa:	f7f9 fc09 	bl	46610 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   4cdfe:	bf00      	nop
   4ce00:	0005fc54 	.word	0x0005fc54
   4ce04:	0005bedc 	.word	0x0005bedc

0004ce08 <translate_error>:
{
	cmee_control(DISABLE);
}

static int translate_error(int err)
{
   4ce08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (err < 0) {
   4ce0a:	2800      	cmp	r0, #0
   4ce0c:	db1d      	blt.n	4ce4a <translate_error+0x42>
		 */
		return err;
	}

	/* In case of CME error translate to an errno value */
	switch (nrf_modem_at_err(err)) {
   4ce0e:	f46f 7300 	mvn.w	r3, #512	; 0x200
 *
 * @returns int The CME or CMS error code.
 */
static inline int nrf_modem_at_err(int error)
{
	return (error & 0xff00ffff);
   4ce12:	f420 007f 	bic.w	r0, r0, #16711680	; 0xff0000
   4ce16:	18c2      	adds	r2, r0, r3
   4ce18:	2300      	movs	r3, #0
   4ce1a:	2a0f      	cmp	r2, #15
   4ce1c:	d859      	bhi.n	4ced2 <translate_error+0xca>
   4ce1e:	e8df f002 	tbb	[pc, r2]
   4ce22:	1708      	.short	0x1708
   4ce24:	31585824 	.word	0x31585824
   4ce28:	5858583e 	.word	0x5858583e
   4ce2c:	58585858 	.word	0x58585858
   4ce30:	4b58      	.short	0x4b58
	case 513: /* not found */
		LOG_WRN("Key not found");
   4ce32:	4a2e      	ldr	r2, [pc, #184]	; (4ceec <translate_error+0xe4>)
   4ce34:	9300      	str	r3, [sp, #0]
   4ce36:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4ce3a:	2300      	movs	r3, #0
   4ce3c:	2202      	movs	r2, #2
   4ce3e:	4618      	mov	r0, r3
   4ce40:	492b      	ldr	r1, [pc, #172]	; (4cef0 <translate_error+0xe8>)
   4ce42:	f00a fe22 	bl	57a8a <z_log_msg_runtime_create.constprop.0>
		return -ENOENT;
   4ce46:	f06f 0001 	mvn.w	r0, #1
		 */
		LOG_ERR("Untranslated CME error %d", nrf_modem_at_err(err));
		__ASSERT(false, "Untranslated CME error %d", nrf_modem_at_err(err));
		return 0xBAADBAAD;
	}
}
   4ce4a:	b005      	add	sp, #20
   4ce4c:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_WRN("Key access refused");
   4ce50:	4a28      	ldr	r2, [pc, #160]	; (4cef4 <translate_error+0xec>)
   4ce52:	9300      	str	r3, [sp, #0]
   4ce54:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4ce58:	2300      	movs	r3, #0
   4ce5a:	2202      	movs	r2, #2
   4ce5c:	4618      	mov	r0, r3
   4ce5e:	4924      	ldr	r1, [pc, #144]	; (4cef0 <translate_error+0xe8>)
   4ce60:	f00a fe13 	bl	57a8a <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
   4ce64:	f06f 000c 	mvn.w	r0, #12
   4ce68:	e7ef      	b.n	4ce4a <translate_error+0x42>
		LOG_WRN("Key storage memory full");
   4ce6a:	4a23      	ldr	r2, [pc, #140]	; (4cef8 <translate_error+0xf0>)
   4ce6c:	9300      	str	r3, [sp, #0]
   4ce6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4ce72:	2300      	movs	r3, #0
   4ce74:	2202      	movs	r2, #2
   4ce76:	4618      	mov	r0, r3
   4ce78:	491d      	ldr	r1, [pc, #116]	; (4cef0 <translate_error+0xe8>)
   4ce7a:	f00a fe06 	bl	57a8a <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   4ce7e:	f06f 000b 	mvn.w	r0, #11
   4ce82:	e7e2      	b.n	4ce4a <translate_error+0x42>
		LOG_WRN("Not allowed when LTE connection is active");
   4ce84:	4a1d      	ldr	r2, [pc, #116]	; (4cefc <translate_error+0xf4>)
   4ce86:	9300      	str	r3, [sp, #0]
   4ce88:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4ce8c:	2300      	movs	r3, #0
   4ce8e:	2202      	movs	r2, #2
   4ce90:	4618      	mov	r0, r3
   4ce92:	4917      	ldr	r1, [pc, #92]	; (4cef0 <translate_error+0xe8>)
   4ce94:	f00a fdf9 	bl	57a8a <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   4ce98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4ce9c:	e7d5      	b.n	4ce4a <translate_error+0x42>
		LOG_WRN("Key already exists");
   4ce9e:	4a18      	ldr	r2, [pc, #96]	; (4cf00 <translate_error+0xf8>)
   4cea0:	9300      	str	r3, [sp, #0]
   4cea2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4cea6:	2300      	movs	r3, #0
   4cea8:	2202      	movs	r2, #2
   4ceaa:	4618      	mov	r0, r3
   4ceac:	4910      	ldr	r1, [pc, #64]	; (4cef0 <translate_error+0xe8>)
   4ceae:	f00a fdec 	bl	57a8a <z_log_msg_runtime_create.constprop.0>
		return -EALREADY;
   4ceb2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   4ceb6:	e7c8      	b.n	4ce4a <translate_error+0x42>
		LOG_WRN("Not allowed when power off warning is active");
   4ceb8:	4a12      	ldr	r2, [pc, #72]	; (4cf04 <translate_error+0xfc>)
   4ceba:	9300      	str	r3, [sp, #0]
   4cebc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4cec0:	2300      	movs	r3, #0
   4cec2:	2202      	movs	r2, #2
   4cec4:	4618      	mov	r0, r3
   4cec6:	490a      	ldr	r1, [pc, #40]	; (4cef0 <translate_error+0xe8>)
   4cec8:	f00a fddf 	bl	57a8a <z_log_msg_runtime_create.constprop.0>
		return -ECANCELED;
   4cecc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   4ced0:	e7bb      	b.n	4ce4a <translate_error+0x42>
		LOG_ERR("Untranslated CME error %d", nrf_modem_at_err(err));
   4ced2:	4a0d      	ldr	r2, [pc, #52]	; (4cf08 <translate_error+0x100>)
   4ced4:	9300      	str	r3, [sp, #0]
   4ced6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4ceda:	2300      	movs	r3, #0
   4cedc:	9003      	str	r0, [sp, #12]
   4cede:	2201      	movs	r2, #1
   4cee0:	4618      	mov	r0, r3
   4cee2:	4903      	ldr	r1, [pc, #12]	; (4cef0 <translate_error+0xe8>)
   4cee4:	f00a fdd1 	bl	57a8a <z_log_msg_runtime_create.constprop.0>
		return 0xBAADBAAD;
   4cee8:	4808      	ldr	r0, [pc, #32]	; (4cf0c <translate_error+0x104>)
   4ceea:	e7ae      	b.n	4ce4a <translate_error+0x42>
   4ceec:	0005fc71 	.word	0x0005fc71
   4cef0:	0005bf24 	.word	0x0005bf24
   4cef4:	0005fc7f 	.word	0x0005fc7f
   4cef8:	0005fc92 	.word	0x0005fc92
   4cefc:	0005fcaa 	.word	0x0005fcaa
   4cf00:	0005fcd4 	.word	0x0005fcd4
   4cf04:	0005fce7 	.word	0x0005fce7
   4cf08:	0005fd14 	.word	0x0005fd14
   4cf0c:	baadbaad 	.word	0xbaadbaad

0004cf10 <cmee_enable>:
{
   4cf10:	b510      	push	{r4, lr}
   4cf12:	b086      	sub	sp, #24
   4cf14:	4604      	mov	r4, r0
	err = nrf_modem_at_scanf("AT+CMEE?", "+CMEE: %d", &active);
   4cf16:	4911      	ldr	r1, [pc, #68]	; (4cf5c <cmee_enable+0x4c>)
   4cf18:	4811      	ldr	r0, [pc, #68]	; (4cf60 <cmee_enable+0x50>)
   4cf1a:	aa05      	add	r2, sp, #20
   4cf1c:	f004 fbda 	bl	516d4 <nrf_modem_at_scanf>
	if (err < 0) {
   4cf20:	2800      	cmp	r0, #0
   4cf22:	da13      	bge.n	4cf4c <cmee_enable+0x3c>
		LOG_WRN("Failed to retrieve CMEE status, err %d", err);
   4cf24:	4b0f      	ldr	r3, [pc, #60]	; (4cf64 <cmee_enable+0x54>)
   4cf26:	9003      	str	r0, [sp, #12]
   4cf28:	9302      	str	r3, [sp, #8]
   4cf2a:	2300      	movs	r3, #0
   4cf2c:	2202      	movs	r2, #2
   4cf2e:	4618      	mov	r0, r3
   4cf30:	e9cd 3300 	strd	r3, r3, [sp]
   4cf34:	490c      	ldr	r1, [pc, #48]	; (4cf68 <cmee_enable+0x58>)
   4cf36:	f00a fda8 	bl	57a8a <z_log_msg_runtime_create.constprop.0>
		*was_enabled = false;
   4cf3a:	2300      	movs	r3, #0
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   4cf3c:	2101      	movs	r1, #1
   4cf3e:	480b      	ldr	r0, [pc, #44]	; (4cf6c <cmee_enable+0x5c>)
		*was_enabled = false;
   4cf40:	7023      	strb	r3, [r4, #0]
}
   4cf42:	b006      	add	sp, #24
   4cf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   4cf48:	f004 bae0 	b.w	5150c <nrf_modem_at_printf>
	return active ? true : false;
   4cf4c:	9b05      	ldr	r3, [sp, #20]
	if (!cmee_is_active()) {
   4cf4e:	2b00      	cmp	r3, #0
   4cf50:	d0f3      	beq.n	4cf3a <cmee_enable+0x2a>
		*was_enabled = true;
   4cf52:	2301      	movs	r3, #1
   4cf54:	7023      	strb	r3, [r4, #0]
}
   4cf56:	b006      	add	sp, #24
   4cf58:	bd10      	pop	{r4, pc}
   4cf5a:	bf00      	nop
   4cf5c:	0005fd2e 	.word	0x0005fd2e
   4cf60:	0005fd38 	.word	0x0005fd38
   4cf64:	0005fd41 	.word	0x0005fd41
   4cf68:	0005bf24 	.word	0x0005bf24
   4cf6c:	0005fd68 	.word	0x0005fd68

0004cf70 <cmee_disable>:
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   4cf70:	2100      	movs	r1, #0
   4cf72:	4801      	ldr	r0, [pc, #4]	; (4cf78 <cmee_disable+0x8>)
   4cf74:	f004 baca 	b.w	5150c <nrf_modem_at_printf>
   4cf78:	0005fd68 	.word	0x0005fd68

0004cf7c <modem_key_mgmt_write>:
}

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgmt_cred_type cred_type,
			 const void *buf, size_t len)
{
   4cf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4cf7e:	4606      	mov	r6, r0
   4cf80:	460f      	mov	r7, r1
   4cf82:	461c      	mov	r4, r3
	int err;
	bool cmee_was_enabled;

	if (buf == NULL || len == 0) {
   4cf84:	4615      	mov	r5, r2
{
   4cf86:	b085      	sub	sp, #20
	if (buf == NULL || len == 0) {
   4cf88:	b1c2      	cbz	r2, 4cfbc <modem_key_mgmt_write+0x40>
   4cf8a:	b1bb      	cbz	r3, 4cfbc <modem_key_mgmt_write+0x40>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_enabled);
   4cf8c:	f10d 000f 	add.w	r0, sp, #15
   4cf90:	f7ff ffbe 	bl	4cf10 <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=0,%u,%d,\"%.*s\"",
   4cf94:	4623      	mov	r3, r4
   4cf96:	463a      	mov	r2, r7
   4cf98:	4631      	mov	r1, r6
   4cf9a:	480b      	ldr	r0, [pc, #44]	; (4cfc8 <modem_key_mgmt_write+0x4c>)
   4cf9c:	9500      	str	r5, [sp, #0]
   4cf9e:	f004 fab5 	bl	5150c <nrf_modem_at_printf>
				  sec_tag, cred_type, len, (const char *)buf);

	if (!cmee_was_enabled) {
   4cfa2:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_printf("AT%%CMNG=0,%u,%d,\"%.*s\"",
   4cfa6:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   4cfa8:	b90b      	cbnz	r3, 4cfae <modem_key_mgmt_write+0x32>
		cmee_disable();
   4cfaa:	f7ff ffe1 	bl	4cf70 <cmee_disable>
	}

	if (err) {
   4cfae:	b13c      	cbz	r4, 4cfc0 <modem_key_mgmt_write+0x44>
		return translate_error(err);
   4cfb0:	4620      	mov	r0, r4
	}

	return 0;
}
   4cfb2:	b005      	add	sp, #20
   4cfb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return translate_error(err);
   4cfb8:	f7ff bf26 	b.w	4ce08 <translate_error>
		return -EINVAL;
   4cfbc:	f06f 0415 	mvn.w	r4, #21
}
   4cfc0:	4620      	mov	r0, r4
   4cfc2:	b005      	add	sp, #20
   4cfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4cfc6:	bf00      	nop
   4cfc8:	0005fd73 	.word	0x0005fd73

0004cfcc <modem_key_mgmt_delete>:
	return 0;
}

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type)
{
   4cfcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4cfce:	4604      	mov	r4, r0
   4cfd0:	460d      	mov	r5, r1
	int err;
	bool cmee_was_enabled;

	cmee_enable(&cmee_was_enabled);
   4cfd2:	f10d 0007 	add.w	r0, sp, #7
   4cfd6:	f7ff ff9b 	bl	4cf10 <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=3,%u,%d", sec_tag, cred_type);
   4cfda:	4621      	mov	r1, r4
   4cfdc:	462a      	mov	r2, r5
   4cfde:	4809      	ldr	r0, [pc, #36]	; (4d004 <modem_key_mgmt_delete+0x38>)
   4cfe0:	f004 fa94 	bl	5150c <nrf_modem_at_printf>

	if (!cmee_was_enabled) {
   4cfe4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	err = nrf_modem_at_printf("AT%%CMNG=3,%u,%d", sec_tag, cred_type);
   4cfe8:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   4cfea:	b90b      	cbnz	r3, 4cff0 <modem_key_mgmt_delete+0x24>
		cmee_disable();
   4cfec:	f7ff ffc0 	bl	4cf70 <cmee_disable>
	}

	if (err) {
		return translate_error(err);
   4cff0:	4620      	mov	r0, r4
	if (err) {
   4cff2:	b124      	cbz	r4, 4cffe <modem_key_mgmt_delete+0x32>
	}

	return 0;
}
   4cff4:	b003      	add	sp, #12
   4cff6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return translate_error(err);
   4cffa:	f7ff bf05 	b.w	4ce08 <translate_error>
}
   4cffe:	b003      	add	sp, #12
   4d000:	bd30      	pop	{r4, r5, pc}
   4d002:	bf00      	nop
   4d004:	0005fd8b 	.word	0x0005fd8b

0004d008 <modem_key_mgmt_exists>:

int modem_key_mgmt_exists(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type,
			  bool *exists)
{
   4d008:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   4d00a:	4604      	mov	r4, r0
   4d00c:	460d      	mov	r5, r1
	int err;
	bool cmee_was_active;

	if (exists == NULL) {
   4d00e:	4616      	mov	r6, r2
   4d010:	b34a      	cbz	r2, 4d066 <modem_key_mgmt_exists+0x5e>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_active);
   4d012:	f10d 000f 	add.w	r0, sp, #15
   4d016:	f7ff ff7b 	bl	4cf10 <cmee_enable>

	scratch_buf[0] = '\0';
   4d01a:	2300      	movs	r3, #0
   4d01c:	4813      	ldr	r0, [pc, #76]	; (4d06c <modem_key_mgmt_exists+0x64>)
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   4d01e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	scratch_buf[0] = '\0';
   4d022:	7003      	strb	r3, [r0, #0]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   4d024:	4a12      	ldr	r2, [pc, #72]	; (4d070 <modem_key_mgmt_exists+0x68>)
   4d026:	4623      	mov	r3, r4
   4d028:	9500      	str	r5, [sp, #0]
   4d02a:	f004 fab7 	bl	5159c <nrf_modem_at_cmd>
			       "AT%%CMNG=1,%u,%d", sec_tag, cred_type);

	if (!cmee_was_active) {
   4d02e:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   4d032:	4604      	mov	r4, r0
	if (!cmee_was_active) {
   4d034:	b90b      	cbnz	r3, 4d03a <modem_key_mgmt_exists+0x32>
		cmee_disable();
   4d036:	f7ff ff9b 	bl	4cf70 <cmee_disable>
	}

	if (err) {
   4d03a:	b12c      	cbz	r4, 4d048 <modem_key_mgmt_exists+0x40>
		return translate_error(err);
   4d03c:	4620      	mov	r0, r4
	} else {
		*exists = false;
	}

	return 0;
}
   4d03e:	b004      	add	sp, #16
   4d040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return translate_error(err);
   4d044:	f7ff bee0 	b.w	4ce08 <translate_error>
	if (strlen(scratch_buf) > strlen("OK\r\n")) {
   4d048:	4808      	ldr	r0, [pc, #32]	; (4d06c <modem_key_mgmt_exists+0x64>)
   4d04a:	f7f3 fed3 	bl	40df4 <strlen>
   4d04e:	4605      	mov	r5, r0
   4d050:	4808      	ldr	r0, [pc, #32]	; (4d074 <modem_key_mgmt_exists+0x6c>)
   4d052:	f7f3 fecf 	bl	40df4 <strlen>
   4d056:	4285      	cmp	r5, r0
   4d058:	bf94      	ite	ls
   4d05a:	2500      	movls	r5, #0
   4d05c:	2501      	movhi	r5, #1
   4d05e:	7035      	strb	r5, [r6, #0]
}
   4d060:	4620      	mov	r0, r4
   4d062:	b004      	add	sp, #16
   4d064:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   4d066:	f06f 0415 	mvn.w	r4, #21
   4d06a:	e7f9      	b.n	4d060 <modem_key_mgmt_exists+0x58>
   4d06c:	2001f3cd 	.word	0x2001f3cd
   4d070:	0005fd9c 	.word	0x0005fd9c
   4d074:	0005ea7b 	.word	0x0005ea7b

0004d078 <multicell_location_provision_certificate>:

	return 0;
}

int multicell_location_provision_certificate(bool overwrite)
{
   4d078:	b570      	push	{r4, r5, r6, lr}
   4d07a:	4605      	mov	r5, r0
   4d07c:	b086      	sub	sp, #24
	int ret = -ENOTSUP;

#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	ret = multicell_location_provision_service_certificate(
   4d07e:	2001      	movs	r0, #1
   4d080:	f00a fd21 	bl	57ac6 <location_service_get_certificate>
	if (certificate == NULL) {
   4d084:	4606      	mov	r6, r0
   4d086:	b968      	cbnz	r0, 4d0a4 <multicell_location_provision_certificate+0x2c>
		LOG_ERR("No certificate was provided by the location service");
   4d088:	4b2d      	ldr	r3, [pc, #180]	; (4d140 <multicell_location_provision_certificate+0xc8>)
   4d08a:	2201      	movs	r2, #1
   4d08c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   4d090:	492c      	ldr	r1, [pc, #176]	; (4d144 <multicell_location_provision_certificate+0xcc>)
   4d092:	4603      	mov	r3, r0
   4d094:	9000      	str	r0, [sp, #0]
   4d096:	f00a fd07 	bl	57aa8 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4d09a:	f06f 040d 	mvn.w	r4, #13
	if (ret) {
		return ret;
	}
#endif
	return ret;
}
   4d09e:	4620      	mov	r0, r4
   4d0a0:	b006      	add	sp, #24
   4d0a2:	bd70      	pop	{r4, r5, r6, pc}
	err = modem_key_mgmt_exists(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, &exists);
   4d0a4:	2100      	movs	r1, #0
   4d0a6:	4828      	ldr	r0, [pc, #160]	; (4d148 <multicell_location_provision_certificate+0xd0>)
   4d0a8:	f10d 0217 	add.w	r2, sp, #23
   4d0ac:	f7ff ffac 	bl	4d008 <modem_key_mgmt_exists>
	if (err) {
   4d0b0:	4604      	mov	r4, r0
   4d0b2:	b158      	cbz	r0, 4d0cc <multicell_location_provision_certificate+0x54>
		LOG_ERR("Failed to check for certificates err %d", err);
   4d0b4:	4b25      	ldr	r3, [pc, #148]	; (4d14c <multicell_location_provision_certificate+0xd4>)
   4d0b6:	9003      	str	r0, [sp, #12]
   4d0b8:	9302      	str	r3, [sp, #8]
   4d0ba:	2300      	movs	r3, #0
   4d0bc:	2201      	movs	r2, #1
   4d0be:	4618      	mov	r0, r3
   4d0c0:	e9cd 3300 	strd	r3, r3, [sp]
   4d0c4:	491f      	ldr	r1, [pc, #124]	; (4d144 <multicell_location_provision_certificate+0xcc>)
   4d0c6:	f00a fcef 	bl	57aa8 <z_log_msg_runtime_create.constprop.0>
		return err;
   4d0ca:	e7e8      	b.n	4d09e <multicell_location_provision_certificate+0x26>
	if (exists && overwrite) {
   4d0cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   4d0d0:	b18b      	cbz	r3, 4d0f6 <multicell_location_provision_certificate+0x7e>
   4d0d2:	2d00      	cmp	r5, #0
   4d0d4:	d0e3      	beq.n	4d09e <multicell_location_provision_certificate+0x26>
		err = modem_key_mgmt_delete(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN);
   4d0d6:	4601      	mov	r1, r0
   4d0d8:	481b      	ldr	r0, [pc, #108]	; (4d148 <multicell_location_provision_certificate+0xd0>)
   4d0da:	f7ff ff77 	bl	4cfcc <modem_key_mgmt_delete>
		if (err) {
   4d0de:	b150      	cbz	r0, 4d0f6 <multicell_location_provision_certificate+0x7e>
			LOG_ERR("Failed to delete existing certificate, err %d", err);
   4d0e0:	4b1b      	ldr	r3, [pc, #108]	; (4d150 <multicell_location_provision_certificate+0xd8>)
   4d0e2:	9003      	str	r0, [sp, #12]
   4d0e4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4d0e8:	2201      	movs	r2, #1
   4d0ea:	4623      	mov	r3, r4
   4d0ec:	4620      	mov	r0, r4
   4d0ee:	4915      	ldr	r1, [pc, #84]	; (4d144 <multicell_location_provision_certificate+0xcc>)
   4d0f0:	9400      	str	r4, [sp, #0]
   4d0f2:	f00a fcd9 	bl	57aa8 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("Provisioning certificate");
   4d0f6:	2500      	movs	r5, #0
   4d0f8:	4b16      	ldr	r3, [pc, #88]	; (4d154 <multicell_location_provision_certificate+0xdc>)
   4d0fa:	2203      	movs	r2, #3
   4d0fc:	4911      	ldr	r1, [pc, #68]	; (4d144 <multicell_location_provision_certificate+0xcc>)
   4d0fe:	4628      	mov	r0, r5
   4d100:	9302      	str	r3, [sp, #8]
   4d102:	e9cd 5500 	strd	r5, r5, [sp]
   4d106:	462b      	mov	r3, r5
   4d108:	f00a fcce 	bl	57aa8 <z_log_msg_runtime_create.constprop.0>
	err = modem_key_mgmt_write(sec_tag,
   4d10c:	4630      	mov	r0, r6
   4d10e:	f7f3 fe71 	bl	40df4 <strlen>
   4d112:	4632      	mov	r2, r6
   4d114:	4603      	mov	r3, r0
   4d116:	4629      	mov	r1, r5
   4d118:	480b      	ldr	r0, [pc, #44]	; (4d148 <multicell_location_provision_certificate+0xd0>)
   4d11a:	f7ff ff2f 	bl	4cf7c <modem_key_mgmt_write>
	if (err) {
   4d11e:	4606      	mov	r6, r0
   4d120:	2800      	cmp	r0, #0
   4d122:	d0bc      	beq.n	4d09e <multicell_location_provision_certificate+0x26>
		LOG_ERR("Failed to provision certificate, err %d", err);
   4d124:	4b0c      	ldr	r3, [pc, #48]	; (4d158 <multicell_location_provision_certificate+0xe0>)
   4d126:	9003      	str	r0, [sp, #12]
   4d128:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4d12c:	2201      	movs	r2, #1
   4d12e:	462b      	mov	r3, r5
   4d130:	4628      	mov	r0, r5
   4d132:	4904      	ldr	r1, [pc, #16]	; (4d144 <multicell_location_provision_certificate+0xcc>)
   4d134:	9500      	str	r5, [sp, #0]
   4d136:	f00a fcb7 	bl	57aa8 <z_log_msg_runtime_create.constprop.0>
		return err;
   4d13a:	4634      	mov	r4, r6
   4d13c:	e7af      	b.n	4d09e <multicell_location_provision_certificate+0x26>
   4d13e:	bf00      	nop
   4d140:	0005fdbc 	.word	0x0005fdbc
   4d144:	0005bf34 	.word	0x0005bf34
   4d148:	01010001 	.word	0x01010001
   4d14c:	0005fdf0 	.word	0x0005fdf0
   4d150:	0005fe18 	.word	0x0005fe18
   4d154:	0005fe46 	.word	0x0005fe46
   4d158:	0005fe5f 	.word	0x0005fe5f

0004d15c <location_service_get_certificate_nrf_cloud>:
	"-----END CERTIFICATE-----\n";

const char *location_service_get_certificate_nrf_cloud(void)
{
	return tls_certificate;
}
   4d15c:	4800      	ldr	r0, [pc, #0]	; (4d160 <location_service_get_certificate_nrf_cloud+0x4>)
   4d15e:	4770      	bx	lr
   4d160:	0005fe9a 	.word	0x0005fe9a

0004d164 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
   4d164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (ret != 0) {
   4d166:	4604      	mov	r4, r0
   4d168:	bb38      	cbnz	r0, 4d1ba <on_modem_lib_init+0x56>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   4d16a:	4815      	ldr	r0, [pc, #84]	; (4d1c0 <on_modem_lib_init+0x5c>)
   4d16c:	f7f3 fe42 	bl	40df4 <strlen>
   4d170:	b178      	cbz	r0, 4d192 <on_modem_lib_init+0x2e>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   4d172:	4913      	ldr	r1, [pc, #76]	; (4d1c0 <on_modem_lib_init+0x5c>)
   4d174:	4813      	ldr	r0, [pc, #76]	; (4d1c4 <on_modem_lib_init+0x60>)
   4d176:	f004 f9c9 	bl	5150c <nrf_modem_at_printf>
		if (err) {
   4d17a:	b150      	cbz	r0, 4d192 <on_modem_lib_init+0x2e>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   4d17c:	4b12      	ldr	r3, [pc, #72]	; (4d1c8 <on_modem_lib_init+0x64>)
   4d17e:	9003      	str	r0, [sp, #12]
   4d180:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4d184:	2201      	movs	r2, #1
   4d186:	4623      	mov	r3, r4
   4d188:	4620      	mov	r0, r4
   4d18a:	4910      	ldr	r1, [pc, #64]	; (4d1cc <on_modem_lib_init+0x68>)
   4d18c:	9400      	str	r4, [sp, #0]
   4d18e:	f00a fca0 	bl	57ad2 <z_log_msg_runtime_create.constprop.0>
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
   4d192:	480f      	ldr	r0, [pc, #60]	; (4d1d0 <on_modem_lib_init+0x6c>)
   4d194:	f7f3 fe2e 	bl	40df4 <strlen>
   4d198:	b178      	cbz	r0, 4d1ba <on_modem_lib_init+0x56>
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   4d19a:	490d      	ldr	r1, [pc, #52]	; (4d1d0 <on_modem_lib_init+0x6c>)
   4d19c:	4809      	ldr	r0, [pc, #36]	; (4d1c4 <on_modem_lib_init+0x60>)
   4d19e:	f004 f9b5 	bl	5150c <nrf_modem_at_printf>
		if (err) {
   4d1a2:	b150      	cbz	r0, 4d1ba <on_modem_lib_init+0x56>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   4d1a4:	4b0b      	ldr	r3, [pc, #44]	; (4d1d4 <on_modem_lib_init+0x70>)
   4d1a6:	9003      	str	r0, [sp, #12]
   4d1a8:	9302      	str	r3, [sp, #8]
   4d1aa:	2300      	movs	r3, #0
   4d1ac:	2201      	movs	r2, #1
   4d1ae:	4618      	mov	r0, r3
   4d1b0:	e9cd 3300 	strd	r3, r3, [sp]
   4d1b4:	4905      	ldr	r1, [pc, #20]	; (4d1cc <on_modem_lib_init+0x68>)
   4d1b6:	f00a fc8c 	bl	57ad2 <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   4d1ba:	b004      	add	sp, #16
   4d1bc:	bd10      	pop	{r4, pc}
   4d1be:	bf00      	nop
   4d1c0:	000604fe 	.word	0x000604fe
   4d1c4:	0005d298 	.word	0x0005d298
   4d1c8:	0006051d 	.word	0x0006051d
   4d1cc:	0005bf1c 	.word	0x0005bf1c
   4d1d0:	0006054a 	.word	0x0006054a
   4d1d4:	00060562 	.word	0x00060562

0004d1d8 <on_modem_lib_init>:
/* Initialized to value different than success (0) */
static int modem_lib_init_result = -1;

static void on_modem_lib_init(int ret, void *ctx)
{
	modem_lib_init_result = ret;
   4d1d8:	4b01      	ldr	r3, [pc, #4]	; (4d1e0 <on_modem_lib_init+0x8>)
   4d1da:	6018      	str	r0, [r3, #0]
}
   4d1dc:	4770      	bx	lr
   4d1de:	bf00      	nop
   4d1e0:	2001a78c 	.word	0x2001a78c

0004d1e4 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   4d1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4d1e8:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   4d1ea:	4b15      	ldr	r3, [pc, #84]	; (4d240 <tfm_ns_interface_dispatch+0x5c>)
   4d1ec:	4604      	mov	r4, r0
   4d1ee:	f893 8000 	ldrb.w	r8, [r3]
   4d1f2:	460d      	mov	r5, r1
   4d1f4:	4616      	mov	r6, r2
   4d1f6:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   4d1f8:	f1b8 0f00 	cmp.w	r8, #0
   4d1fc:	d115      	bne.n	4d22a <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   4d1fe:	4668      	mov	r0, sp
   4d200:	f008 fee4 	bl	55fcc <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   4d204:	463a      	mov	r2, r7
   4d206:	4631      	mov	r1, r6
   4d208:	4628      	mov	r0, r5
   4d20a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   4d20c:	47a0      	blx	r4
   4d20e:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   4d210:	4668      	mov	r0, sp
   4d212:	f008 fef3 	bl	55ffc <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   4d216:	f1b8 0f00 	cmp.w	r8, #0
   4d21a:	d002      	beq.n	4d222 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   4d21c:	4809      	ldr	r0, [pc, #36]	; (4d244 <tfm_ns_interface_dispatch+0x60>)
   4d21e:	f005 f9af 	bl	52580 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   4d222:	4620      	mov	r0, r4
   4d224:	b022      	add	sp, #136	; 0x88
   4d226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   4d22a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4d22e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4d232:	4804      	ldr	r0, [pc, #16]	; (4d244 <tfm_ns_interface_dispatch+0x60>)
   4d234:	f005 f92a 	bl	5248c <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   4d238:	2800      	cmp	r0, #0
   4d23a:	d0e0      	beq.n	4d1fe <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   4d23c:	241f      	movs	r4, #31
   4d23e:	e7f0      	b.n	4d222 <tfm_ns_interface_dispatch+0x3e>
   4d240:	2002083d 	.word	0x2002083d
   4d244:	2001abd4 	.word	0x2001abd4

0004d248 <psa_destroy_key>:

    return status;
}

psa_status_t psa_destroy_key(psa_key_id_t key)
{
   4d248:	b510      	push	{r4, lr}
   4d24a:	b092      	sub	sp, #72	; 0x48
   4d24c:	4604      	mov	r4, r0
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d24e:	2230      	movs	r2, #48	; 0x30
   4d250:	2100      	movs	r1, #0
   4d252:	a806      	add	r0, sp, #24
   4d254:	f00d fe3b 	bl	5aece <memset>
   4d258:	2305      	movs	r3, #5
   4d25a:	9305      	str	r3, [sp, #20]
        .srv_id = TFM_CRYPTO_DESTROY_KEY_SID,
        .key_id = key,
    };
    psa_invec in_vec[] = {
   4d25c:	ab05      	add	r3, sp, #20
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_destroy_key,
   4d25e:	2100      	movs	r1, #0
    psa_invec in_vec[] = {
   4d260:	9303      	str	r3, [sp, #12]
   4d262:	2334      	movs	r3, #52	; 0x34
    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_destroy_key,
   4d264:	e9cd 1100 	strd	r1, r1, [sp]
    psa_invec in_vec[] = {
   4d268:	9304      	str	r3, [sp, #16]
    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_destroy_key,
   4d26a:	aa03      	add	r2, sp, #12
   4d26c:	2301      	movs	r3, #1
   4d26e:	4803      	ldr	r0, [pc, #12]	; (4d27c <psa_destroy_key+0x34>)
    struct tfm_crypto_pack_iovec iov = {
   4d270:	9407      	str	r4, [sp, #28]
    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_destroy_key,
   4d272:	f000 f929 	bl	4d4c8 <psa_call>
                                    TFM_CRYPTO_DESTROY_KEY);

    return status;
}
   4d276:	b012      	add	sp, #72	; 0x48
   4d278:	bd10      	pop	{r4, pc}
   4d27a:	bf00      	nop
   4d27c:	40000100 	.word	0x40000100

0004d280 <psa_reset_key_attributes>:
                          TFM_CRYPTO_GET_KEY_ATTRIBUTES);
    return status;
}

void psa_reset_key_attributes(psa_key_attributes_t *attributes)
{
   4d280:	b510      	push	{r4, lr}
   4d282:	b094      	sub	sp, #80	; 0x50
   4d284:	4604      	mov	r4, r0
    struct tfm_crypto_pack_iovec iov = {
   4d286:	2230      	movs	r2, #48	; 0x30
   4d288:	2100      	movs	r1, #0
   4d28a:	a808      	add	r0, sp, #32
   4d28c:	f00d fe1f 	bl	5aece <memset>
        .srv_id = TFM_CRYPTO_RESET_KEY_ATTRIBUTES_SID,
    };
    psa_invec in_vec[] = {
   4d290:	aa07      	add	r2, sp, #28
   4d292:	9203      	str	r2, [sp, #12]
   4d294:	2234      	movs	r2, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
   4d296:	e9cd 2404 	strd	r2, r4, [sp, #16]
   4d29a:	2214      	movs	r2, #20
    struct tfm_crypto_pack_iovec iov = {
   4d29c:	2301      	movs	r3, #1
    psa_outvec out_vec[] = {
   4d29e:	9206      	str	r2, [sp, #24]
        {.base = attributes, .len = sizeof(psa_key_attributes_t)},
    };

    (void)API_DISPATCH(tfm_crypto_reset_key_attributes,
   4d2a0:	446a      	add	r2, sp
   4d2a2:	9200      	str	r2, [sp, #0]
   4d2a4:	2100      	movs	r1, #0
   4d2a6:	9301      	str	r3, [sp, #4]
   4d2a8:	aa03      	add	r2, sp, #12
   4d2aa:	4803      	ldr	r0, [pc, #12]	; (4d2b8 <psa_reset_key_attributes+0x38>)
    struct tfm_crypto_pack_iovec iov = {
   4d2ac:	9307      	str	r3, [sp, #28]
    (void)API_DISPATCH(tfm_crypto_reset_key_attributes,
   4d2ae:	f000 f90b 	bl	4d4c8 <psa_call>
                       TFM_CRYPTO_RESET_KEY_ATTRIBUTES);
    return;
}
   4d2b2:	b014      	add	sp, #80	; 0x50
   4d2b4:	bd10      	pop	{r4, pc}
   4d2b6:	bf00      	nop
   4d2b8:	40000100 	.word	0x40000100

0004d2bc <psa_export_key>:

psa_status_t psa_export_key(psa_key_id_t key,
                            uint8_t *data,
                            size_t data_size,
                            size_t *data_length)
{
   4d2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   4d2be:	b095      	sub	sp, #84	; 0x54
   4d2c0:	4607      	mov	r7, r0
   4d2c2:	460e      	mov	r6, r1
   4d2c4:	4615      	mov	r5, r2
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d2c6:	2100      	movs	r1, #0
   4d2c8:	2230      	movs	r2, #48	; 0x30
   4d2ca:	a808      	add	r0, sp, #32
{
   4d2cc:	461c      	mov	r4, r3
    struct tfm_crypto_pack_iovec iov = {
   4d2ce:	f00d fdfe 	bl	5aece <memset>
   4d2d2:	2306      	movs	r3, #6
   4d2d4:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_EXPORT_KEY_SID,
        .key_id = key,
    };
    psa_invec in_vec[] = {
   4d2d6:	ab07      	add	r3, sp, #28
   4d2d8:	9303      	str	r3, [sp, #12]
   4d2da:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
   4d2dc:	e9cd 3604 	strd	r3, r6, [sp, #16]
        {.base = data, .len = data_size}
    };

    status = API_DISPATCH(tfm_crypto_export_key,
   4d2e0:	2301      	movs	r3, #1
   4d2e2:	aa05      	add	r2, sp, #20
   4d2e4:	9301      	str	r3, [sp, #4]
   4d2e6:	9200      	str	r2, [sp, #0]
   4d2e8:	2100      	movs	r1, #0
   4d2ea:	aa03      	add	r2, sp, #12
   4d2ec:	4804      	ldr	r0, [pc, #16]	; (4d300 <psa_export_key+0x44>)
    struct tfm_crypto_pack_iovec iov = {
   4d2ee:	9709      	str	r7, [sp, #36]	; 0x24
    psa_outvec out_vec[] = {
   4d2f0:	9506      	str	r5, [sp, #24]
    status = API_DISPATCH(tfm_crypto_export_key,
   4d2f2:	f000 f8e9 	bl	4d4c8 <psa_call>
                          TFM_CRYPTO_EXPORT_KEY);

    *data_length = out_vec[0].len;
   4d2f6:	9b06      	ldr	r3, [sp, #24]
   4d2f8:	6023      	str	r3, [r4, #0]

    return status;
}
   4d2fa:	b015      	add	sp, #84	; 0x54
   4d2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4d2fe:	bf00      	nop
   4d300:	40000100 	.word	0x40000100

0004d304 <psa_aead_encrypt>:
                              const uint8_t *plaintext,
                              size_t plaintext_length,
                              uint8_t *ciphertext,
                              size_t ciphertext_size,
                              size_t *ciphertext_length)
{
   4d304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4d308:	4614      	mov	r4, r2
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d30a:	2230      	movs	r2, #48	; 0x30
{
   4d30c:	b099      	sub	sp, #100	; 0x64
   4d30e:	4680      	mov	r8, r0
   4d310:	e9dd 6920 	ldrd	r6, r9, [sp, #128]	; 0x80
   4d314:	460f      	mov	r7, r1
    struct tfm_crypto_pack_iovec iov = {
   4d316:	eb0d 0002 	add.w	r0, sp, r2
   4d31a:	2100      	movs	r1, #0
{
   4d31c:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
   4d31e:	f00d fdd6 	bl	5aece <memset>
   4d322:	2323      	movs	r3, #35	; 0x23
   4d324:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
   4d328:	930b      	str	r3, [sp, #44]	; 0x2c
        .alg = alg,
        .aead_in = {.nonce = {0}, .nonce_length = 0}
    };

    /* Sanitize the optional input */
    if ((additional_data == NULL) && (additional_data_length != 0)) {
   4d32a:	b93e      	cbnz	r6, 4d33c <psa_aead_encrypt+0x38>
   4d32c:	f1b9 0f00 	cmp.w	r9, #0
   4d330:	d004      	beq.n	4d33c <psa_aead_encrypt+0x38>
        return PSA_ERROR_INVALID_ARGUMENT;
   4d332:	f06f 0086 	mvn.w	r0, #134	; 0x86
                      out_vec, IOVEC_LEN(out_vec));

    *ciphertext_length = out_vec[0].len;

    return status;
}
   4d336:	b019      	add	sp, #100	; 0x64
   4d338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    psa_invec in_vec[] = {
   4d33c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
   4d33e:	2d10      	cmp	r5, #16
    psa_invec in_vec[] = {
   4d340:	9307      	str	r3, [sp, #28]
   4d342:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   4d344:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   4d348:	e9cd 3608 	strd	r3, r6, [sp, #32]
    psa_outvec out_vec[] = {
   4d34c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   4d34e:	9303      	str	r3, [sp, #12]
   4d350:	9b25      	ldr	r3, [sp, #148]	; 0x94
   4d352:	9304      	str	r3, [sp, #16]
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
   4d354:	d8ed      	bhi.n	4d332 <psa_aead_encrypt+0x2e>
    if (nonce != NULL) {
   4d356:	b134      	cbz	r4, 4d366 <psa_aead_encrypt+0x62>
   4d358:	4622      	mov	r2, r4
   4d35a:	f10d 034b 	add.w	r3, sp, #75	; 0x4b
   4d35e:	1961      	adds	r1, r4, r5
        for (size_t idx = 0; idx < nonce_length; idx++) {
   4d360:	428a      	cmp	r2, r1
   4d362:	d115      	bne.n	4d390 <psa_aead_encrypt+0x8c>
        iov.aead_in.nonce_length = nonce_length;
   4d364:	9517      	str	r5, [sp, #92]	; 0x5c
    in_vec[0].base = &iov;
   4d366:	ab0b      	add	r3, sp, #44	; 0x2c
   4d368:	9305      	str	r3, [sp, #20]
    in_vec[0].len = sizeof(struct tfm_crypto_pack_iovec);
   4d36a:	2334      	movs	r3, #52	; 0x34
   4d36c:	9306      	str	r3, [sp, #24]
    status = psa_call(TFM_CRYPTO_HANDLE, PSA_IPC_CALL, in_vec, in_len,
   4d36e:	2301      	movs	r3, #1
    size_t in_len = IOVEC_LEN(in_vec);
   4d370:	2e00      	cmp	r6, #0
    status = psa_call(TFM_CRYPTO_HANDLE, PSA_IPC_CALL, in_vec, in_len,
   4d372:	9301      	str	r3, [sp, #4]
   4d374:	ab03      	add	r3, sp, #12
   4d376:	9300      	str	r3, [sp, #0]
   4d378:	aa05      	add	r2, sp, #20
   4d37a:	bf0c      	ite	eq
   4d37c:	2302      	moveq	r3, #2
   4d37e:	2303      	movne	r3, #3
   4d380:	2100      	movs	r1, #0
   4d382:	4806      	ldr	r0, [pc, #24]	; (4d39c <psa_aead_encrypt+0x98>)
   4d384:	f000 f8a0 	bl	4d4c8 <psa_call>
    *ciphertext_length = out_vec[0].len;
   4d388:	9b26      	ldr	r3, [sp, #152]	; 0x98
   4d38a:	9a04      	ldr	r2, [sp, #16]
   4d38c:	601a      	str	r2, [r3, #0]
    return status;
   4d38e:	e7d2      	b.n	4d336 <psa_aead_encrypt+0x32>
            iov.aead_in.nonce[idx] = nonce[idx];
   4d390:	f812 0b01 	ldrb.w	r0, [r2], #1
   4d394:	f803 0f01 	strb.w	r0, [r3, #1]!
        for (size_t idx = 0; idx < nonce_length; idx++) {
   4d398:	e7e2      	b.n	4d360 <psa_aead_encrypt+0x5c>
   4d39a:	bf00      	nop
   4d39c:	40000100 	.word	0x40000100

0004d3a0 <psa_aead_decrypt>:
                              const uint8_t *ciphertext,
                              size_t ciphertext_length,
                              uint8_t *plaintext,
                              size_t plaintext_size,
                              size_t *plaintext_length)
{
   4d3a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4d3a4:	4614      	mov	r4, r2
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d3a6:	2230      	movs	r2, #48	; 0x30
{
   4d3a8:	b099      	sub	sp, #100	; 0x64
   4d3aa:	4680      	mov	r8, r0
   4d3ac:	e9dd 6920 	ldrd	r6, r9, [sp, #128]	; 0x80
   4d3b0:	460f      	mov	r7, r1
    struct tfm_crypto_pack_iovec iov = {
   4d3b2:	eb0d 0002 	add.w	r0, sp, r2
   4d3b6:	2100      	movs	r1, #0
{
   4d3b8:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
   4d3ba:	f00d fd88 	bl	5aece <memset>
   4d3be:	2324      	movs	r3, #36	; 0x24
   4d3c0:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
   4d3c4:	930b      	str	r3, [sp, #44]	; 0x2c
        .alg = alg,
        .aead_in = {.nonce = {0}, .nonce_length = 0}
    };

    /* Sanitize the optional input */
    if ((additional_data == NULL) && (additional_data_length != 0)) {
   4d3c6:	b93e      	cbnz	r6, 4d3d8 <psa_aead_decrypt+0x38>
   4d3c8:	f1b9 0f00 	cmp.w	r9, #0
   4d3cc:	d004      	beq.n	4d3d8 <psa_aead_decrypt+0x38>
        return PSA_ERROR_INVALID_ARGUMENT;
   4d3ce:	f06f 0086 	mvn.w	r0, #134	; 0x86
                      out_vec, IOVEC_LEN(out_vec));

    *plaintext_length = out_vec[0].len;

    return status;
}
   4d3d2:	b019      	add	sp, #100	; 0x64
   4d3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    psa_invec in_vec[] = {
   4d3d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
   4d3da:	2d10      	cmp	r5, #16
    psa_invec in_vec[] = {
   4d3dc:	9307      	str	r3, [sp, #28]
   4d3de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   4d3e0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   4d3e4:	e9cd 3608 	strd	r3, r6, [sp, #32]
    psa_outvec out_vec[] = {
   4d3e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   4d3ea:	9303      	str	r3, [sp, #12]
   4d3ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
   4d3ee:	9304      	str	r3, [sp, #16]
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
   4d3f0:	d8ed      	bhi.n	4d3ce <psa_aead_decrypt+0x2e>
    if (nonce != NULL) {
   4d3f2:	b134      	cbz	r4, 4d402 <psa_aead_decrypt+0x62>
   4d3f4:	4622      	mov	r2, r4
   4d3f6:	f10d 034b 	add.w	r3, sp, #75	; 0x4b
   4d3fa:	1961      	adds	r1, r4, r5
        for (size_t idx = 0; idx < nonce_length; idx++) {
   4d3fc:	428a      	cmp	r2, r1
   4d3fe:	d115      	bne.n	4d42c <psa_aead_decrypt+0x8c>
        iov.aead_in.nonce_length = nonce_length;
   4d400:	9517      	str	r5, [sp, #92]	; 0x5c
    in_vec[0].base = &iov;
   4d402:	ab0b      	add	r3, sp, #44	; 0x2c
   4d404:	9305      	str	r3, [sp, #20]
    in_vec[0].len = sizeof(struct tfm_crypto_pack_iovec);
   4d406:	2334      	movs	r3, #52	; 0x34
   4d408:	9306      	str	r3, [sp, #24]
    status = psa_call(TFM_CRYPTO_HANDLE, PSA_IPC_CALL, in_vec, in_len,
   4d40a:	2301      	movs	r3, #1
    size_t in_len = IOVEC_LEN(in_vec);
   4d40c:	2e00      	cmp	r6, #0
    status = psa_call(TFM_CRYPTO_HANDLE, PSA_IPC_CALL, in_vec, in_len,
   4d40e:	9301      	str	r3, [sp, #4]
   4d410:	ab03      	add	r3, sp, #12
   4d412:	9300      	str	r3, [sp, #0]
   4d414:	aa05      	add	r2, sp, #20
   4d416:	bf0c      	ite	eq
   4d418:	2302      	moveq	r3, #2
   4d41a:	2303      	movne	r3, #3
   4d41c:	2100      	movs	r1, #0
   4d41e:	4806      	ldr	r0, [pc, #24]	; (4d438 <psa_aead_decrypt+0x98>)
   4d420:	f000 f852 	bl	4d4c8 <psa_call>
    *plaintext_length = out_vec[0].len;
   4d424:	9b26      	ldr	r3, [sp, #152]	; 0x98
   4d426:	9a04      	ldr	r2, [sp, #16]
   4d428:	601a      	str	r2, [r3, #0]
    return status;
   4d42a:	e7d2      	b.n	4d3d2 <psa_aead_decrypt+0x32>
            iov.aead_in.nonce[idx] = nonce[idx];
   4d42c:	f812 0b01 	ldrb.w	r0, [r2], #1
   4d430:	f803 0f01 	strb.w	r0, [r3, #1]!
        for (size_t idx = 0; idx < nonce_length; idx++) {
   4d434:	e7e2      	b.n	4d3fc <psa_aead_decrypt+0x5c>
   4d436:	bf00      	nop
   4d438:	40000100 	.word	0x40000100

0004d43c <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   4d43c:	b530      	push	{r4, r5, lr}
   4d43e:	b095      	sub	sp, #84	; 0x54
   4d440:	4605      	mov	r5, r0
   4d442:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d444:	2230      	movs	r2, #48	; 0x30
   4d446:	2100      	movs	r1, #0
   4d448:	a808      	add	r0, sp, #32
   4d44a:	f00d fd40 	bl	5aece <memset>
   4d44e:	233f      	movs	r3, #63	; 0x3f
   4d450:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   4d452:	ab07      	add	r3, sp, #28
   4d454:	9303      	str	r3, [sp, #12]
   4d456:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   4d458:	9406      	str	r4, [sp, #24]
   4d45a:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   4d45e:	b154      	cbz	r4, 4d476 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   4d460:	2301      	movs	r3, #1
   4d462:	aa05      	add	r2, sp, #20
   4d464:	9200      	str	r2, [sp, #0]
   4d466:	2100      	movs	r1, #0
   4d468:	4804      	ldr	r0, [pc, #16]	; (4d47c <psa_generate_random+0x40>)
   4d46a:	9301      	str	r3, [sp, #4]
   4d46c:	aa03      	add	r2, sp, #12
   4d46e:	f000 f82b 	bl	4d4c8 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   4d472:	b015      	add	sp, #84	; 0x54
   4d474:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   4d476:	4620      	mov	r0, r4
   4d478:	e7fb      	b.n	4d472 <psa_generate_random+0x36>
   4d47a:	bf00      	nop
   4d47c:	40000100 	.word	0x40000100

0004d480 <psa_generate_key>:

psa_status_t psa_generate_key(const psa_key_attributes_t *attributes,
                              psa_key_id_t *key)
{
   4d480:	b530      	push	{r4, r5, lr}
   4d482:	b097      	sub	sp, #92	; 0x5c
   4d484:	4605      	mov	r5, r0
   4d486:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d488:	2230      	movs	r2, #48	; 0x30
   4d48a:	2100      	movs	r1, #0
   4d48c:	a80a      	add	r0, sp, #40	; 0x28
   4d48e:	f00d fd1e 	bl	5aece <memset>
   4d492:	2340      	movs	r3, #64	; 0x40
   4d494:	9309      	str	r3, [sp, #36]	; 0x24
        .srv_id = TFM_CRYPTO_GENERATE_KEY_SID,
    };

    psa_invec in_vec[] = {
   4d496:	ab09      	add	r3, sp, #36	; 0x24
   4d498:	9305      	str	r3, [sp, #20]
   4d49a:	2334      	movs	r3, #52	; 0x34
   4d49c:	e9cd 3506 	strd	r3, r5, [sp, #24]
   4d4a0:	2314      	movs	r3, #20
   4d4a2:	9308      	str	r3, [sp, #32]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = attributes, .len = sizeof(psa_key_attributes_t)},
    };

    psa_outvec out_vec[] = {
   4d4a4:	2304      	movs	r3, #4
   4d4a6:	9304      	str	r3, [sp, #16]
        {.base = key, .len = sizeof(psa_key_id_t)},
    };

    status = API_DISPATCH(tfm_crypto_generate_key,
   4d4a8:	2301      	movs	r3, #1
   4d4aa:	9301      	str	r3, [sp, #4]
   4d4ac:	ab03      	add	r3, sp, #12
   4d4ae:	9300      	str	r3, [sp, #0]
   4d4b0:	2100      	movs	r1, #0
   4d4b2:	2302      	movs	r3, #2
   4d4b4:	aa05      	add	r2, sp, #20
   4d4b6:	4803      	ldr	r0, [pc, #12]	; (4d4c4 <psa_generate_key+0x44>)
    psa_outvec out_vec[] = {
   4d4b8:	9403      	str	r4, [sp, #12]
    status = API_DISPATCH(tfm_crypto_generate_key,
   4d4ba:	f000 f805 	bl	4d4c8 <psa_call>
                          TFM_CRYPTO_GENERATE_KEY);

    return status;
}
   4d4be:	b017      	add	sp, #92	; 0x5c
   4d4c0:	bd30      	pop	{r4, r5, pc}
   4d4c2:	bf00      	nop
   4d4c4:	40000100 	.word	0x40000100

0004d4c8 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   4d4c8:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   4d4ca:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   4d4ce:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   4d4d2:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   4d4d4:	d20d      	bcs.n	4d4f2 <psa_call+0x2a>
        (type < INT16_MIN) ||
   4d4d6:	ea43 0504 	orr.w	r5, r3, r4
   4d4da:	2dff      	cmp	r5, #255	; 0xff
   4d4dc:	d809      	bhi.n	4d4f2 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   4d4de:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   4d4e2:	4613      	mov	r3, r2
   4d4e4:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   4d4e8:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   4d4ea:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   4d4ec:	4803      	ldr	r0, [pc, #12]	; (4d4fc <psa_call+0x34>)
   4d4ee:	f7ff be79 	b.w	4d1e4 <tfm_ns_interface_dispatch>
}
   4d4f2:	f06f 0080 	mvn.w	r0, #128	; 0x80
   4d4f6:	bc30      	pop	{r4, r5}
   4d4f8:	4770      	bx	lr
   4d4fa:	bf00      	nop
   4d4fc:	00037c21 	.word	0x00037c21

0004d500 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
   4d500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
   4d504:	6804      	ldr	r4, [r0, #0]
{
   4d506:	4605      	mov	r5, r0
	if (!tp) return vol;	/* Invalid path name? */
   4d508:	b374      	cbz	r4, 4d568 <get_ldnumber+0x68>
   4d50a:	4621      	mov	r1, r4
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
   4d50c:	f811 3b01 	ldrb.w	r3, [r1], #1
   4d510:	2b1f      	cmp	r3, #31
   4d512:	d937      	bls.n	4d584 <get_ldnumber+0x84>
   4d514:	2b3a      	cmp	r3, #58	; 0x3a
   4d516:	d1f9      	bne.n	4d50c <get_ldnumber+0xc>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
   4d518:	7820      	ldrb	r0, [r4, #0]
   4d51a:	3830      	subs	r0, #48	; 0x30
   4d51c:	b2c3      	uxtb	r3, r0
   4d51e:	2b09      	cmp	r3, #9
   4d520:	d91d      	bls.n	4d55e <get_ldnumber+0x5e>
   4d522:	2000      	movs	r0, #0
   4d524:	f8df c060 	ldr.w	ip, [pc, #96]	; 4d588 <get_ldnumber+0x88>
		}
#if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
		else {
			i = 0;
			do {
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
   4d528:	4627      	mov	r7, r4
   4d52a:	f85c eb04 	ldr.w	lr, [ip], #4
				do {	/* Compare the volume ID with path name */
					c = *sp++; tc = *tp++;
   4d52e:	f81e 2b01 	ldrb.w	r2, [lr], #1
   4d532:	f817 3b01 	ldrb.w	r3, [r7], #1
					if (IsLower(c)) c -= 0x20;
   4d536:	f1a2 0861 	sub.w	r8, r2, #97	; 0x61
					if (IsLower(tc)) tc -= 0x20;
   4d53a:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
					if (IsLower(c)) c -= 0x20;
   4d53e:	f1b8 0f19 	cmp.w	r8, #25
					if (IsLower(tc)) tc -= 0x20;
   4d542:	b2f6      	uxtb	r6, r6
					if (IsLower(c)) c -= 0x20;
   4d544:	d813      	bhi.n	4d56e <get_ldnumber+0x6e>
   4d546:	3a20      	subs	r2, #32
					if (IsLower(tc)) tc -= 0x20;
   4d548:	2e19      	cmp	r6, #25
					if (IsLower(c)) c -= 0x20;
   4d54a:	b2d2      	uxtb	r2, r2
					if (IsLower(tc)) tc -= 0x20;
   4d54c:	d801      	bhi.n	4d552 <get_ldnumber+0x52>
   4d54e:	3b20      	subs	r3, #32
   4d550:	b2db      	uxtb	r3, r3
				} while (c && (TCHAR)c == tc);
   4d552:	4293      	cmp	r3, r2
   4d554:	d0eb      	beq.n	4d52e <get_ldnumber+0x2e>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
   4d556:	3001      	adds	r0, #1
   4d558:	2808      	cmp	r0, #8
   4d55a:	d1e5      	bne.n	4d528 <get_ldnumber+0x28>
   4d55c:	e004      	b.n	4d568 <get_ldnumber+0x68>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
   4d55e:	1ca3      	adds	r3, r4, #2
   4d560:	4299      	cmp	r1, r3
   4d562:	d1de      	bne.n	4d522 <get_ldnumber+0x22>
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
   4d564:	2807      	cmp	r0, #7
   4d566:	dd0a      	ble.n	4d57e <get_ldnumber+0x7e>
	if (!tp) return vol;	/* Invalid path name? */
   4d568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4d56c:	e008      	b.n	4d580 <get_ldnumber+0x80>
					if (IsLower(tc)) tc -= 0x20;
   4d56e:	2e19      	cmp	r6, #25
   4d570:	bf9c      	itt	ls
   4d572:	3b20      	subls	r3, #32
   4d574:	b2db      	uxtbls	r3, r3
				} while (c && (TCHAR)c == tc);
   4d576:	2a00      	cmp	r2, #0
   4d578:	d1eb      	bne.n	4d552 <get_ldnumber+0x52>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
   4d57a:	42b9      	cmp	r1, r7
   4d57c:	d1eb      	bne.n	4d556 <get_ldnumber+0x56>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
   4d57e:	6029      	str	r1, [r5, #0]
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
   4d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return vol;		/* Return the default drive */
   4d584:	2000      	movs	r0, #0
   4d586:	e7fb      	b.n	4d580 <get_ldnumber+0x80>
   4d588:	0005c4f4 	.word	0x0005c4f4

0004d58c <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
   4d58c:	b538      	push	{r3, r4, r5, lr}
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
   4d58e:	2300      	movs	r3, #0
   4d590:	70c3      	strb	r3, [r0, #3]
   4d592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4d596:	6383      	str	r3, [r0, #56]	; 0x38
{
   4d598:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
   4d59a:	f00a fc6b 	bl	57e74 <move_window>
   4d59e:	2800      	cmp	r0, #0
   4d5a0:	d167      	bne.n	4d672 <check_fs+0xe6>
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
   4d5a2:	f64a 2355 	movw	r3, #43605	; 0xaa55
   4d5a6:	f8b4 523a 	ldrh.w	r5, [r4, #570]	; 0x23a
   4d5aa:	429d      	cmp	r5, r3
   4d5ac:	d048      	beq.n	4d640 <check_fs+0xb4>
#endif
	b = fs->win[BS_JmpBoot];
   4d5ae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
   4d5b2:	2beb      	cmp	r3, #235	; 0xeb
   4d5b4:	d13e      	bne.n	4d634 <check_fs+0xa8>
			return 0;	/* It is an FAT32 VBR */
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
		b = fs->win[BPB_SecPerClus];
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d5b6:	f8b4 2047 	ldrh.w	r2, [r4, #71]	; 0x47
		b = fs->win[BPB_SecPerClus];
   4d5ba:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d5be:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   4d5c2:	d13b      	bne.n	4d63c <check_fs+0xb0>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
   4d5c4:	b3d3      	cbz	r3, 4d63c <check_fs+0xb0>
   4d5c6:	1e5a      	subs	r2, r3, #1
   4d5c8:	421a      	tst	r2, r3
   4d5ca:	d00b      	beq.n	4d5e4 <check_fs+0x58>
   4d5cc:	e036      	b.n	4d63c <check_fs+0xb0>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d5ce:	f8b4 2047 	ldrh.w	r2, [r4, #71]	; 0x47
		b = fs->win[BPB_SecPerClus];
   4d5d2:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d5d6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   4d5da:	d120      	bne.n	4d61e <check_fs+0x92>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
   4d5dc:	b1fb      	cbz	r3, 4d61e <check_fs+0x92>
   4d5de:	1e5a      	subs	r2, r3, #1
   4d5e0:	421a      	tst	r2, r3
   4d5e2:	d118      	bne.n	4d616 <check_fs+0x8a>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
   4d5e4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   4d5e8:	b1ab      	cbz	r3, 4d616 <check_fs+0x8a>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
   4d5ea:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
   4d5ee:	3b01      	subs	r3, #1
   4d5f0:	2b01      	cmp	r3, #1
   4d5f2:	d810      	bhi.n	4d616 <check_fs+0x8a>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
   4d5f4:	f8b4 304d 	ldrh.w	r3, [r4, #77]	; 0x4d
   4d5f8:	b16b      	cbz	r3, 4d616 <check_fs+0x8a>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
   4d5fa:	f8b4 304f 	ldrh.w	r3, [r4, #79]	; 0x4f
   4d5fe:	2b7f      	cmp	r3, #127	; 0x7f
   4d600:	d806      	bhi.n	4d610 <check_fs+0x84>
   4d602:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   4d606:	f00a fa78 	bl	57afa <ld_dword>
   4d60a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   4d60e:	d302      	bcc.n	4d616 <check_fs+0x8a>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
   4d610:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   4d614:	bb5b      	cbnz	r3, 4d66e <check_fs+0xe2>
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
   4d616:	f64a 2355 	movw	r3, #43605	; 0xaa55
   4d61a:	429d      	cmp	r5, r3
   4d61c:	d10e      	bne.n	4d63c <check_fs+0xb0>
   4d61e:	2002      	movs	r0, #2
   4d620:	e00d      	b.n	4d63e <check_fs+0xb2>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d622:	f8b4 2047 	ldrh.w	r2, [r4, #71]	; 0x47
		b = fs->win[BPB_SecPerClus];
   4d626:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d62a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   4d62e:	d105      	bne.n	4d63c <check_fs+0xb0>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
   4d630:	b123      	cbz	r3, 4d63c <check_fs+0xb0>
   4d632:	e7d4      	b.n	4d5de <check_fs+0x52>
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
   4d634:	3318      	adds	r3, #24
   4d636:	b2db      	uxtb	r3, r3
   4d638:	2b01      	cmp	r3, #1
   4d63a:	d9f2      	bls.n	4d622 <check_fs+0x96>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
   4d63c:	2003      	movs	r0, #3
}
   4d63e:	bd38      	pop	{r3, r4, r5, pc}
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
   4d640:	220b      	movs	r2, #11
   4d642:	490e      	ldr	r1, [pc, #56]	; (4d67c <check_fs+0xf0>)
   4d644:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   4d648:	f00d fbf7 	bl	5ae3a <memcmp>
   4d64c:	b198      	cbz	r0, 4d676 <check_fs+0xea>
	b = fs->win[BS_JmpBoot];
   4d64e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
   4d652:	2beb      	cmp	r3, #235	; 0xeb
   4d654:	d003      	beq.n	4d65e <check_fs+0xd2>
   4d656:	3318      	adds	r3, #24
   4d658:	b2db      	uxtb	r3, r3
   4d65a:	2b01      	cmp	r3, #1
   4d65c:	d8df      	bhi.n	4d61e <check_fs+0x92>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
   4d65e:	2208      	movs	r2, #8
   4d660:	4907      	ldr	r1, [pc, #28]	; (4d680 <check_fs+0xf4>)
   4d662:	f104 008e 	add.w	r0, r4, #142	; 0x8e
   4d666:	f00d fbe8 	bl	5ae3a <memcmp>
   4d66a:	2800      	cmp	r0, #0
   4d66c:	d1af      	bne.n	4d5ce <check_fs+0x42>
			return 0;	/* It is an FAT32 VBR */
   4d66e:	2000      	movs	r0, #0
   4d670:	e7e5      	b.n	4d63e <check_fs+0xb2>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
   4d672:	2004      	movs	r0, #4
   4d674:	e7e3      	b.n	4d63e <check_fs+0xb2>
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
   4d676:	2001      	movs	r0, #1
   4d678:	e7e1      	b.n	4d63e <check_fs+0xb2>
   4d67a:	bf00      	nop
   4d67c:	000606ac 	.word	0x000606ac
   4d680:	000606df 	.word	0x000606df

0004d684 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
   4d684:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
   4d688:	2300      	movs	r3, #0
   4d68a:	600b      	str	r3, [r1, #0]
{
   4d68c:	460f      	mov	r7, r1
   4d68e:	4616      	mov	r6, r2
	vol = get_ldnumber(path);
   4d690:	f7ff ff36 	bl	4d500 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
   4d694:	1e05      	subs	r5, r0, #0
   4d696:	f2c0 81bf 	blt.w	4da18 <mount_volume+0x394>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
   4d69a:	4bb0      	ldr	r3, [pc, #704]	; (4d95c <mount_volume+0x2d8>)
   4d69c:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
   4d6a0:	2c00      	cmp	r4, #0
   4d6a2:	f000 81bb 	beq.w	4da1c <mount_volume+0x398>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
   4d6a6:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
   4d6a8:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
   4d6aa:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
   4d6ae:	b16b      	cbz	r3, 4d6cc <mount_volume+0x48>
		stat = disk_status(fs->pdrv);
   4d6b0:	7860      	ldrb	r0, [r4, #1]
   4d6b2:	f001 fce9 	bl	4f088 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
   4d6b6:	07c7      	lsls	r7, r0, #31
   4d6b8:	d408      	bmi.n	4d6cc <mount_volume+0x48>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
   4d6ba:	b10e      	cbz	r6, 4d6c0 <mount_volume+0x3c>
   4d6bc:	0741      	lsls	r1, r0, #29
   4d6be:	d403      	bmi.n	4d6c8 <mount_volume+0x44>
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The filesystem object is already valid */
   4d6c0:	2000      	movs	r0, #0
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
   4d6c2:	b004      	add	sp, #16
   4d6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_WRITE_PROTECTED;
   4d6c8:	200a      	movs	r0, #10
   4d6ca:	e7fa      	b.n	4d6c2 <mount_volume+0x3e>
	fs->fs_type = 0;					/* Clear the filesystem object */
   4d6cc:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
   4d6ce:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the filesystem object */
   4d6d0:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
   4d6d2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
   4d6d4:	f001 fce4 	bl	4f0a0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
   4d6d8:	07c2      	lsls	r2, r0, #31
   4d6da:	f100 81a1 	bmi.w	4da20 <mount_volume+0x39c>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
   4d6de:	b10e      	cbz	r6, 4d6e4 <mount_volume+0x60>
   4d6e0:	0743      	lsls	r3, r0, #29
   4d6e2:	d4f1      	bmi.n	4d6c8 <mount_volume+0x44>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
   4d6e4:	2100      	movs	r1, #0
   4d6e6:	4620      	mov	r0, r4
   4d6e8:	f7ff ff50 	bl	4d58c <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
   4d6ec:	2802      	cmp	r0, #2
   4d6ee:	f040 8095 	bne.w	4d81c <mount_volume+0x198>
   4d6f2:	466e      	mov	r6, sp
   4d6f4:	4632      	mov	r2, r6
   4d6f6:	f204 2302 	addw	r3, r4, #514	; 0x202
   4d6fa:	f204 2142 	addw	r1, r4, #578	; 0x242
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
   4d6fe:	4618      	mov	r0, r3
   4d700:	f00a f9fb 	bl	57afa <ld_dword>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   4d704:	3310      	adds	r3, #16
   4d706:	428b      	cmp	r3, r1
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
   4d708:	f842 0b04 	str.w	r0, [r2], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   4d70c:	d1f7      	bne.n	4d6fe <mount_volume+0x7a>
   4d70e:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
   4d710:	f856 1b04 	ldr.w	r1, [r6], #4
   4d714:	2900      	cmp	r1, #0
   4d716:	d078      	beq.n	4d80a <mount_volume+0x186>
   4d718:	4620      	mov	r0, r4
   4d71a:	f7ff ff37 	bl	4d58c <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
   4d71e:	2801      	cmp	r0, #1
   4d720:	d874      	bhi.n	4d80c <mount_volume+0x188>
	if (fmt == 1) {
   4d722:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume offset */
   4d724:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	if (fmt == 1) {
   4d726:	f040 80b6 	bne.w	4d896 <mount_volume+0x212>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
   4d72a:	230b      	movs	r3, #11
   4d72c:	f104 0146 	add.w	r1, r4, #70	; 0x46
   4d730:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   4d734:	2d00      	cmp	r5, #0
   4d736:	d176      	bne.n	4d826 <mount_volume+0x1a2>
   4d738:	3301      	adds	r3, #1
   4d73a:	2b40      	cmp	r3, #64	; 0x40
   4d73c:	d1f8      	bne.n	4d730 <mount_volume+0xac>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
   4d73e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   4d742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   4d746:	d16e      	bne.n	4d826 <mount_volume+0x1a2>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
   4d748:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   4d74c:	2b09      	cmp	r3, #9
   4d74e:	d16a      	bne.n	4d826 <mount_volume+0x1a2>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
   4d750:	f104 0084 	add.w	r0, r4, #132	; 0x84
   4d754:	f00a f9d3 	bl	57afe <ld_qword>
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
   4d758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
   4d75c:	1816      	adds	r6, r2, r0
   4d75e:	f141 0100 	adc.w	r1, r1, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
   4d762:	42b3      	cmp	r3, r6
   4d764:	eb75 0301 	sbcs.w	r3, r5, r1
   4d768:	d35d      	bcc.n	4d826 <mount_volume+0x1a2>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
   4d76a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   4d76e:	f00a f9c4 	bl	57afa <ld_dword>
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
   4d772:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
   4d776:	6220      	str	r0, [r4, #32]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
   4d778:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
   4d77a:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
   4d77c:	d153      	bne.n	4d826 <mount_volume+0x1a2>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
   4d77e:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   4d782:	4083      	lsls	r3, r0
   4d784:	b298      	uxth	r0, r3
   4d786:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
   4d788:	2800      	cmp	r0, #0
   4d78a:	d04c      	beq.n	4d826 <mount_volume+0x1a2>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
   4d78c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   4d790:	f00a f9b3 	bl	57afa <ld_dword>
   4d794:	4680      	mov	r8, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
   4d796:	4872      	ldr	r0, [pc, #456]	; (4d960 <mount_volume+0x2dc>)
   4d798:	4580      	cmp	r8, r0
   4d79a:	d844      	bhi.n	4d826 <mount_volume+0x1a2>
		fs->n_fatent = nclst + 2;
   4d79c:	f108 0002 	add.w	r0, r8, #2
   4d7a0:	61e0      	str	r0, [r4, #28]
		fs->volbase = bsect;
   4d7a2:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
   4d7a4:	f104 0094 	add.w	r0, r4, #148	; 0x94
   4d7a8:	f00a f9a7 	bl	57afa <ld_dword>
   4d7ac:	1887      	adds	r7, r0, r2
   4d7ae:	6327      	str	r7, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
   4d7b0:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   4d7b4:	f00a f9a1 	bl	57afa <ld_dword>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
   4d7b8:	b29b      	uxth	r3, r3
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
   4d7ba:	4402      	add	r2, r0
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
   4d7bc:	fb08 f003 	mul.w	r0, r8, r3
   4d7c0:	19c0      	adds	r0, r0, r7
   4d7c2:	eb45 0305 	adc.w	r3, r5, r5
   4d7c6:	4286      	cmp	r6, r0
   4d7c8:	eb71 0303 	sbcs.w	r3, r1, r3
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
   4d7cc:	62a2      	str	r2, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
   4d7ce:	d32a      	bcc.n	4d826 <mount_volume+0x1a2>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
   4d7d0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   4d7d4:	f00a f991 	bl	57afa <ld_dword>
		so = i = 0;
   4d7d8:	462e      	mov	r6, r5
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
   4d7da:	62e0      	str	r0, [r4, #44]	; 0x2c
			if (i == 0) {
   4d7dc:	b965      	cbnz	r5, 4d7f8 <mount_volume+0x174>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
   4d7de:	8963      	ldrh	r3, [r4, #10]
   4d7e0:	42b3      	cmp	r3, r6
   4d7e2:	d920      	bls.n	4d826 <mount_volume+0x1a2>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
   4d7e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   4d7e6:	4620      	mov	r0, r4
   4d7e8:	f00a f9a4 	bl	57b34 <clst2sect>
   4d7ec:	1981      	adds	r1, r0, r6
   4d7ee:	4620      	mov	r0, r4
   4d7f0:	f00a fb40 	bl	57e74 <move_window>
   4d7f4:	b980      	cbnz	r0, 4d818 <mount_volume+0x194>
				so++;
   4d7f6:	3601      	adds	r6, #1
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
   4d7f8:	1963      	adds	r3, r4, r5
   4d7fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   4d7fe:	2b81      	cmp	r3, #129	; 0x81
   4d800:	d013      	beq.n	4d82a <mount_volume+0x1a6>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
   4d802:	3520      	adds	r5, #32
   4d804:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (i == 0) {
   4d808:	e7e8      	b.n	4d7dc <mount_volume+0x158>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
   4d80a:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
   4d80c:	3501      	adds	r5, #1
   4d80e:	2d04      	cmp	r5, #4
   4d810:	f47f af7e 	bne.w	4d710 <mount_volume+0x8c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
   4d814:	2804      	cmp	r0, #4
   4d816:	d106      	bne.n	4d826 <mount_volume+0x1a2>
   4d818:	2001      	movs	r0, #1
   4d81a:	e752      	b.n	4d6c2 <mount_volume+0x3e>
   4d81c:	2804      	cmp	r0, #4
   4d81e:	d0fb      	beq.n	4d818 <mount_volume+0x194>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
   4d820:	2801      	cmp	r0, #1
   4d822:	f67f af7e 	bls.w	4d722 <mount_volume+0x9e>
   4d826:	200d      	movs	r0, #13
   4d828:	e74b      	b.n	4d6c2 <mount_volume+0x3e>
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
   4d82a:	f105 0014 	add.w	r0, r5, #20
   4d82e:	f104 063c 	add.w	r6, r4, #60	; 0x3c
   4d832:	4430      	add	r0, r6
   4d834:	f00a f961 	bl	57afa <ld_dword>
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
   4d838:	2801      	cmp	r0, #1
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
   4d83a:	4605      	mov	r5, r0
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
   4d83c:	d9f3      	bls.n	4d826 <mount_volume+0x1a2>
   4d83e:	69e3      	ldr	r3, [r4, #28]
   4d840:	4283      	cmp	r3, r0
   4d842:	d9f0      	bls.n	4d826 <mount_volume+0x1a2>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
   4d844:	8961      	ldrh	r1, [r4, #10]
   4d846:	6b23      	ldr	r3, [r4, #48]	; 0x30
   4d848:	1e82      	subs	r2, r0, #2
   4d84a:	fb02 3301 	mla	r3, r2, r1, r3
   4d84e:	6363      	str	r3, [r4, #52]	; 0x34
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
   4d850:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   4d852:	4620      	mov	r0, r4
   4d854:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
   4d858:	f00a fb0c 	bl	57e74 <move_window>
   4d85c:	2800      	cmp	r0, #0
   4d85e:	d1db      	bne.n	4d818 <mount_volume+0x194>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
   4d860:	f005 007f 	and.w	r0, r5, #127	; 0x7f
   4d864:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   4d868:	f00a f947 	bl	57afa <ld_dword>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
   4d86c:	1c47      	adds	r7, r0, #1
   4d86e:	d003      	beq.n	4d878 <mount_volume+0x1f4>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
   4d870:	3501      	adds	r5, #1
   4d872:	42a8      	cmp	r0, r5
   4d874:	d0ec      	beq.n	4d850 <mount_volume+0x1cc>
   4d876:	e7d6      	b.n	4d826 <mount_volume+0x1a2>
		fmt = FS_EXFAT;			/* FAT sub-type */
   4d878:	2504      	movs	r5, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
   4d87a:	e9c4 0005 	strd	r0, r0, [r4, #20]
	fs->id = ++Fsid;		/* Volume mount ID */
   4d87e:	4a39      	ldr	r2, [pc, #228]	; (4d964 <mount_volume+0x2e0>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
   4d880:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
   4d882:	8813      	ldrh	r3, [r2, #0]
   4d884:	3301      	adds	r3, #1
   4d886:	b29b      	uxth	r3, r3
   4d888:	8013      	strh	r3, [r2, #0]
   4d88a:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
   4d88c:	4b36      	ldr	r3, [pc, #216]	; (4d968 <mount_volume+0x2e4>)
   4d88e:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
   4d890:	4b36      	ldr	r3, [pc, #216]	; (4d96c <mount_volume+0x2e8>)
   4d892:	6123      	str	r3, [r4, #16]
	return FR_OK;
   4d894:	e714      	b.n	4d6c0 <mount_volume+0x3c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
   4d896:	f8b4 3047 	ldrh.w	r3, [r4, #71]	; 0x47
   4d89a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   4d89e:	d1c2      	bne.n	4d826 <mount_volume+0x1a2>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
   4d8a0:	f8b4 6052 	ldrh.w	r6, [r4, #82]	; 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
   4d8a4:	b926      	cbnz	r6, 4d8b0 <mount_volume+0x22c>
   4d8a6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   4d8aa:	f00a f926 	bl	57afa <ld_dword>
   4d8ae:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
   4d8b0:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
		fs->fsize = fasize;
   4d8b4:	6226      	str	r6, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
   4d8b6:	1e59      	subs	r1, r3, #1
   4d8b8:	2901      	cmp	r1, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
   4d8ba:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
   4d8bc:	d8b3      	bhi.n	4d826 <mount_volume+0x1a2>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
   4d8be:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
   4d8c2:	8161      	strh	r1, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   4d8c4:	2900      	cmp	r1, #0
   4d8c6:	d0ae      	beq.n	4d826 <mount_volume+0x1a2>
   4d8c8:	1e48      	subs	r0, r1, #1
   4d8ca:	4208      	tst	r0, r1
   4d8cc:	d1ab      	bne.n	4d826 <mount_volume+0x1a2>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
   4d8ce:	f8b4 704d 	ldrh.w	r7, [r4, #77]	; 0x4d
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
   4d8d2:	0738      	lsls	r0, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
   4d8d4:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
   4d8d6:	d1a6      	bne.n	4d826 <mount_volume+0x1a2>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
   4d8d8:	f8b4 004f 	ldrh.w	r0, [r4, #79]	; 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
   4d8dc:	b918      	cbnz	r0, 4d8e6 <mount_volume+0x262>
   4d8de:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   4d8e2:	f00a f90a 	bl	57afa <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
   4d8e6:	f8b4 e04a 	ldrh.w	lr, [r4, #74]	; 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
   4d8ea:	f1be 0f00 	cmp.w	lr, #0
   4d8ee:	d09a      	beq.n	4d826 <mount_volume+0x1a2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
   4d8f0:	fb06 fc03 	mul.w	ip, r6, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
   4d8f4:	eb0e 1517 	add.w	r5, lr, r7, lsr #4
   4d8f8:	4465      	add	r5, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
   4d8fa:	42a8      	cmp	r0, r5
   4d8fc:	d393      	bcc.n	4d826 <mount_volume+0x1a2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
   4d8fe:	1b43      	subs	r3, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   4d900:	428b      	cmp	r3, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
   4d902:	fbb3 f0f1 	udiv	r0, r3, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   4d906:	d38e      	bcc.n	4d826 <mount_volume+0x1a2>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
   4d908:	4b19      	ldr	r3, [pc, #100]	; (4d970 <mount_volume+0x2ec>)
   4d90a:	4298      	cmp	r0, r3
   4d90c:	d88b      	bhi.n	4d826 <mount_volume+0x1a2>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   4d90e:	eb0e 0102 	add.w	r1, lr, r2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
   4d912:	f64f 7ef5 	movw	lr, #65525	; 0xfff5
   4d916:	4570      	cmp	r0, lr
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   4d918:	f100 0302 	add.w	r3, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
   4d91c:	4415      	add	r5, r2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
   4d91e:	d829      	bhi.n	4d974 <mount_volume+0x2f0>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   4d920:	f640 7ef5 	movw	lr, #4085	; 0xff5
   4d924:	4570      	cmp	r0, lr
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   4d926:	e9c4 2109 	strd	r2, r1, [r4, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   4d92a:	61e3      	str	r3, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
   4d92c:	6325      	str	r5, [r4, #48]	; 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   4d92e:	d80c      	bhi.n	4d94a <mount_volume+0x2c6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   4d930:	2f00      	cmp	r7, #0
   4d932:	f43f af78 	beq.w	4d826 <mount_volume+0x1a2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
   4d936:	eb0c 0001 	add.w	r0, ip, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   4d93a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   4d93e:	f003 0301 	and.w	r3, r3, #1
   4d942:	2501      	movs	r5, #1
   4d944:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   4d948:	e023      	b.n	4d992 <mount_volume+0x30e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   4d94a:	2f00      	cmp	r7, #0
   4d94c:	f43f af6b 	beq.w	4d826 <mount_volume+0x1a2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
   4d950:	2502      	movs	r5, #2
   4d952:	eb0c 0001 	add.w	r0, ip, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   4d956:	005b      	lsls	r3, r3, #1
   4d958:	e01b      	b.n	4d992 <mount_volume+0x30e>
   4d95a:	bf00      	nop
   4d95c:	2001b874 	.word	0x2001b874
   4d960:	7ffffffd 	.word	0x7ffffffd
   4d964:	2001becc 	.word	0x2001becc
   4d968:	2001bccc 	.word	0x2001bccc
   4d96c:	200203cd 	.word	0x200203cd
   4d970:	0ffffff5 	.word	0x0ffffff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   4d974:	e9c4 2109 	strd	r2, r1, [r4, #36]	; 0x24
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   4d978:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   4d97c:	61e3      	str	r3, [r4, #28]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   4d97e:	4339      	orrs	r1, r7
		fs->database = bsect + sysect;					/* Data start sector */
   4d980:	6325      	str	r5, [r4, #48]	; 0x30
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   4d982:	f47f af50 	bne.w	4d826 <mount_volume+0x1a2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
   4d986:	f104 0068 	add.w	r0, r4, #104	; 0x68
   4d98a:	f00a f8b6 	bl	57afa <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
   4d98e:	2503      	movs	r5, #3
   4d990:	009b      	lsls	r3, r3, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
   4d992:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
   4d996:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
   4d99a:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
   4d99c:	f4ff af43 	bcc.w	4d826 <mount_volume+0x1a2>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
   4d9a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4d9a4:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;
   4d9a8:	2380      	movs	r3, #128	; 0x80
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
   4d9aa:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;
   4d9ac:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
   4d9ae:	f47f af66 	bne.w	4d87e <mount_volume+0x1fa>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
   4d9b2:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   4d9b6:	2b01      	cmp	r3, #1
   4d9b8:	f47f af61 	bne.w	4d87e <mount_volume+0x1fa>
			&& move_window(fs, bsect + 1) == FR_OK)
   4d9bc:	4620      	mov	r0, r4
   4d9be:	1c51      	adds	r1, r2, #1
   4d9c0:	f00a fa58 	bl	57e74 <move_window>
   4d9c4:	2800      	cmp	r0, #0
   4d9c6:	f47f af5a 	bne.w	4d87e <mount_volume+0x1fa>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
   4d9ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
   4d9ce:	f8b4 223a 	ldrh.w	r2, [r4, #570]	; 0x23a
			fs->fsi_flag = 0;
   4d9d2:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
   4d9d4:	429a      	cmp	r2, r3
   4d9d6:	f47f af52 	bne.w	4d87e <mount_volume+0x1fa>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
   4d9da:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   4d9de:	f00a f88c 	bl	57afa <ld_dword>
   4d9e2:	4b10      	ldr	r3, [pc, #64]	; (4da24 <mount_volume+0x3a0>)
   4d9e4:	4298      	cmp	r0, r3
   4d9e6:	f47f af4a 	bne.w	4d87e <mount_volume+0x1fa>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
   4d9ea:	f504 7008 	add.w	r0, r4, #544	; 0x220
   4d9ee:	f00a f884 	bl	57afa <ld_dword>
   4d9f2:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
   4d9f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   4d9fa:	3320      	adds	r3, #32
   4d9fc:	4298      	cmp	r0, r3
   4d9fe:	f47f af3e 	bne.w	4d87e <mount_volume+0x1fa>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
   4da02:	f504 7009 	add.w	r0, r4, #548	; 0x224
   4da06:	f00a f878 	bl	57afa <ld_dword>
   4da0a:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
   4da0c:	f504 700a 	add.w	r0, r4, #552	; 0x228
   4da10:	f00a f873 	bl	57afa <ld_dword>
   4da14:	6160      	str	r0, [r4, #20]
   4da16:	e732      	b.n	4d87e <mount_volume+0x1fa>
	if (vol < 0) return FR_INVALID_DRIVE;
   4da18:	200b      	movs	r0, #11
   4da1a:	e652      	b.n	4d6c2 <mount_volume+0x3e>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
   4da1c:	200c      	movs	r0, #12
   4da1e:	e650      	b.n	4d6c2 <mount_volume+0x3e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
   4da20:	2003      	movs	r0, #3
   4da22:	e64e      	b.n	4d6c2 <mount_volume+0x3e>
   4da24:	41615252 	.word	0x41615252

0004da28 <dir_read.constprop.0>:
static FRESULT dir_read (
   4da28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
   4da2c:	27ff      	movs	r7, #255	; 0xff
static FRESULT dir_read (
   4da2e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   4da30:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
   4da32:	463d      	mov	r5, r7
	FRESULT res = FR_NO_FILE;
   4da34:	2004      	movs	r0, #4
	while (dp->sect) {
   4da36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   4da38:	b911      	cbnz	r1, 4da40 <dir_read.constprop.0+0x18>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   4da3a:	b1d8      	cbz	r0, 4da74 <dir_read.constprop.0+0x4c>
   4da3c:	2004      	movs	r0, #4
   4da3e:	e062      	b.n	4db06 <dir_read.constprop.0+0xde>
		res = move_window(fs, dp->sect);
   4da40:	4630      	mov	r0, r6
   4da42:	f00a fa17 	bl	57e74 <move_window>
		if (res != FR_OK) break;
   4da46:	2800      	cmp	r0, #0
   4da48:	d15d      	bne.n	4db06 <dir_read.constprop.0+0xde>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
   4da4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   4da4c:	7803      	ldrb	r3, [r0, #0]
		if (b == 0) {
   4da4e:	2b00      	cmp	r3, #0
   4da50:	d0f4      	beq.n	4da3c <dir_read.constprop.0+0x14>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   4da52:	7832      	ldrb	r2, [r6, #0]
   4da54:	2a04      	cmp	r2, #4
   4da56:	d110      	bne.n	4da7a <dir_read.constprop.0+0x52>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
   4da58:	2b85      	cmp	r3, #133	; 0x85
   4da5a:	d14e      	bne.n	4dafa <dir_read.constprop.0+0xd2>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
   4da5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
					res = load_xdir(dp);	/* Load the entry block */
   4da5e:	4620      	mov	r0, r4
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
   4da60:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
   4da62:	f00a fe8a 	bl	5877a <load_xdir>
					if (res == FR_OK) {
   4da66:	2800      	cmp	r0, #0
   4da68:	d14d      	bne.n	4db06 <dir_read.constprop.0+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
   4da6a:	6933      	ldr	r3, [r6, #16]
   4da6c:	791b      	ldrb	r3, [r3, #4]
   4da6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4da72:	71a3      	strb	r3, [r4, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   4da74:	2000      	movs	r0, #0
}
   4da76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
   4da7a:	7ac2      	ldrb	r2, [r0, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
   4da7c:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
   4da7e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   4da82:	71a2      	strb	r2, [r4, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
   4da84:	d044      	beq.n	4db10 <dir_read.constprop.0+0xe8>
   4da86:	2b2e      	cmp	r3, #46	; 0x2e
   4da88:	d042      	beq.n	4db10 <dir_read.constprop.0+0xe8>
   4da8a:	f022 0120 	bic.w	r1, r2, #32
   4da8e:	2908      	cmp	r1, #8
   4da90:	d03e      	beq.n	4db10 <dir_read.constprop.0+0xe8>
				if (attr == AM_LFN) {	/* An LFN entry is found */
   4da92:	2a0f      	cmp	r2, #15
   4da94:	d141      	bne.n	4db1a <dir_read.constprop.0+0xf2>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
   4da96:	0659      	lsls	r1, r3, #25
   4da98:	d538      	bpl.n	4db0c <dir_read.constprop.0+0xe4>
						b &= (BYTE)~LLEF; ord = b;
   4da9a:	f003 05bf 	and.w	r5, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
   4da9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
   4daa0:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
   4daa2:	64e3      	str	r3, [r4, #76]	; 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4daa4:	7b43      	ldrb	r3, [r0, #13]
   4daa6:	42bb      	cmp	r3, r7
   4daa8:	d132      	bne.n	4db10 <dir_read.constprop.0+0xe8>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
   4daaa:	8b42      	ldrh	r2, [r0, #26]
   4daac:	bb82      	cbnz	r2, 4db10 <dir_read.constprop.0+0xe8>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
   4daae:	210d      	movs	r1, #13
   4dab0:	7803      	ldrb	r3, [r0, #0]
			if (uc != 0xFFFF) return 0;		/* Check filler */
   4dab2:	f64f 79ff 	movw	r9, #65535	; 0xffff
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
   4dab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   4daba:	3b01      	subs	r3, #1
   4dabc:	434b      	muls	r3, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4dabe:	2101      	movs	r1, #1
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4dac0:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4dac4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4db2c <dir_read.constprop.0+0x104>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
   4dac8:	f818 cb01 	ldrb.w	ip, [r8], #1
	rv = ptr[1];
   4dacc:	f830 c00c 	ldrh.w	ip, [r0, ip]
		if (wc != 0) {
   4dad0:	b301      	cbz	r1, 4db14 <dir_read.constprop.0+0xec>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
   4dad2:	2bff      	cmp	r3, #255	; 0xff
   4dad4:	d81c      	bhi.n	4db10 <dir_read.constprop.0+0xe8>
	rv = rv << 8 | ptr[0];
   4dad6:	4661      	mov	r1, ip
			lfnbuf[i++] = wc = uc;			/* Store it */
   4dad8:	f82e c013 	strh.w	ip, [lr, r3, lsl #1]
   4dadc:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4dade:	3201      	adds	r2, #1
   4dae0:	2a0d      	cmp	r2, #13
   4dae2:	d1f1      	bne.n	4dac8 <dir_read.constprop.0+0xa0>
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
   4dae4:	7802      	ldrb	r2, [r0, #0]
   4dae6:	0652      	lsls	r2, r2, #25
   4dae8:	d505      	bpl.n	4daf6 <dir_read.constprop.0+0xce>
   4daea:	b121      	cbz	r1, 4daf6 <dir_read.constprop.0+0xce>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
   4daec:	2bff      	cmp	r3, #255	; 0xff
   4daee:	d80f      	bhi.n	4db10 <dir_read.constprop.0+0xe8>
		lfnbuf[i] = 0;
   4daf0:	2200      	movs	r2, #0
   4daf2:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4daf6:	3d01      	subs	r5, #1
   4daf8:	b2ed      	uxtb	r5, r5
		res = dir_next(dp, 0);		/* Next entry */
   4dafa:	2100      	movs	r1, #0
   4dafc:	4620      	mov	r0, r4
   4dafe:	f00a fd8d 	bl	5861c <dir_next>
		if (res != FR_OK) break;
   4db02:	2800      	cmp	r0, #0
   4db04:	d097      	beq.n	4da36 <dir_read.constprop.0+0xe>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   4db06:	2300      	movs	r3, #0
   4db08:	63a3      	str	r3, [r4, #56]	; 0x38
	return res;
   4db0a:	e7b4      	b.n	4da76 <dir_read.constprop.0+0x4e>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4db0c:	42ab      	cmp	r3, r5
   4db0e:	d0c9      	beq.n	4daa4 <dir_read.constprop.0+0x7c>
				ord = 0xFF;
   4db10:	25ff      	movs	r5, #255	; 0xff
   4db12:	e7f2      	b.n	4dafa <dir_read.constprop.0+0xd2>
			if (uc != 0xFFFF) return 0;		/* Check filler */
   4db14:	45cc      	cmp	ip, r9
   4db16:	d0e2      	beq.n	4dade <dir_read.constprop.0+0xb6>
   4db18:	e7fa      	b.n	4db10 <dir_read.constprop.0+0xe8>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
   4db1a:	b91d      	cbnz	r5, 4db24 <dir_read.constprop.0+0xfc>
   4db1c:	f00a f815 	bl	57b4a <sum_sfn>
   4db20:	42b8      	cmp	r0, r7
   4db22:	d0a7      	beq.n	4da74 <dir_read.constprop.0+0x4c>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
   4db24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4db28:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   4db2a:	e7a3      	b.n	4da74 <dir_read.constprop.0+0x4c>
   4db2c:	0006077c 	.word	0x0006077c

0004db30 <dir_find>:
{
   4db30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
   4db34:	2100      	movs	r1, #0
{
   4db36:	b087      	sub	sp, #28
   4db38:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   4db3a:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
   4db3e:	f00a fa84 	bl	5804a <dir_sdi>
	if (res != FR_OK) return res;
   4db42:	4607      	mov	r7, r0
   4db44:	bb00      	cbnz	r0, 4db88 <dir_find+0x58>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   4db46:	f898 3000 	ldrb.w	r3, [r8]
   4db4a:	2b04      	cmp	r3, #4
   4db4c:	d13d      	bne.n	4dbca <dir_find+0x9a>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
   4db4e:	f8d8 000c 	ldr.w	r0, [r8, #12]
   4db52:	f00a f96a 	bl	57e2a <xname_sum>
   4db56:	4681      	mov	r9, r0
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
   4db58:	4620      	mov	r0, r4
   4db5a:	f7ff ff65 	bl	4da28 <dir_read.constprop.0>
   4db5e:	4605      	mov	r5, r0
   4db60:	b108      	cbz	r0, 4db66 <dir_find+0x36>
   4db62:	4607      	mov	r7, r0
   4db64:	e010      	b.n	4db88 <dir_find+0x58>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
   4db66:	f8d8 3010 	ldr.w	r3, [r8, #16]
   4db6a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   4db6c:	454a      	cmp	r2, r9
   4db6e:	d1f3      	bne.n	4db58 <dir_find+0x28>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
   4db70:	f04f 0a40 	mov.w	sl, #64	; 0x40
   4db74:	f893 6023 	ldrb.w	r6, [r3, #35]	; 0x23
   4db78:	42b5      	cmp	r5, r6
   4db7a:	d109      	bne.n	4db90 <dir_find+0x60>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
   4db7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   4db80:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   4db84:	2b00      	cmp	r3, #0
   4db86:	d1e7      	bne.n	4db58 <dir_find+0x28>
}
   4db88:	4638      	mov	r0, r7
   4db8a:	b007      	add	sp, #28
   4db8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((di % SZDIRE) == 0) di += 2;
   4db90:	f01a 0f1f 	tst.w	sl, #31
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
   4db94:	f8d8 3010 	ldr.w	r3, [r8, #16]
				if ((di % SZDIRE) == 0) di += 2;
   4db98:	bf08      	it	eq
   4db9a:	f10a 0a02 	addeq.w	sl, sl, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
   4db9e:	f833 000a 	ldrh.w	r0, [r3, sl]
   4dba2:	f001 fb01 	bl	4f1a8 <ff_wtoupper>
   4dba6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   4dbaa:	4683      	mov	fp, r0
   4dbac:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
   4dbb0:	f001 fafa 	bl	4f1a8 <ff_wtoupper>
   4dbb4:	4583      	cmp	fp, r0
   4dbb6:	d103      	bne.n	4dbc0 <dir_find+0x90>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
   4dbb8:	f10a 0a02 	add.w	sl, sl, #2
   4dbbc:	3501      	adds	r5, #1
   4dbbe:	e7db      	b.n	4db78 <dir_find+0x48>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
   4dbc0:	1b76      	subs	r6, r6, r5
   4dbc2:	b2f6      	uxtb	r6, r6
   4dbc4:	2e00      	cmp	r6, #0
   4dbc6:	d1c7      	bne.n	4db58 <dir_find+0x28>
   4dbc8:	e7d8      	b.n	4db7c <dir_find+0x4c>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   4dbca:	f04f 09ff 	mov.w	r9, #255	; 0xff
   4dbce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   4dbd2:	464d      	mov	r5, r9
   4dbd4:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		res = move_window(fs, dp->sect);
   4dbd8:	4640      	mov	r0, r8
   4dbda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   4dbdc:	f00a f94a 	bl	57e74 <move_window>
		if (res != FR_OK) break;
   4dbe0:	2800      	cmp	r0, #0
   4dbe2:	d15b      	bne.n	4dc9c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
   4dbe4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   4dbe6:	7833      	ldrb	r3, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   4dbe8:	2b00      	cmp	r3, #0
   4dbea:	d076      	beq.n	4dcda <dir_find+0x1aa>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
   4dbec:	7af1      	ldrb	r1, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   4dbee:	2be5      	cmp	r3, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
   4dbf0:	f001 023f 	and.w	r2, r1, #63	; 0x3f
   4dbf4:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   4dbf6:	d003      	beq.n	4dc00 <dir_find+0xd0>
   4dbf8:	0709      	lsls	r1, r1, #28
   4dbfa:	d504      	bpl.n	4dc06 <dir_find+0xd6>
   4dbfc:	2a0f      	cmp	r2, #15
   4dbfe:	d004      	beq.n	4dc0a <dir_find+0xda>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   4dc00:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
   4dc04:	e04e      	b.n	4dca4 <dir_find+0x174>
			if (a == AM_LFN) {			/* An LFN entry is found */
   4dc06:	2a0f      	cmp	r2, #15
   4dc08:	d153      	bne.n	4dcb2 <dir_find+0x182>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
   4dc0a:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
   4dc0e:	0650      	lsls	r0, r2, #25
   4dc10:	d43e      	bmi.n	4dc90 <dir_find+0x160>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
   4dc12:	0659      	lsls	r1, r3, #25
   4dc14:	d544      	bpl.n	4dca0 <dir_find+0x170>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
   4dc16:	6b22      	ldr	r2, [r4, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
   4dc18:	f896 900d 	ldrb.w	r9, [r6, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
   4dc1c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
   4dc20:	64e2      	str	r2, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4dc22:	7b72      	ldrb	r2, [r6, #13]
   4dc24:	454a      	cmp	r2, r9
   4dc26:	d13d      	bne.n	4dca4 <dir_find+0x174>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
   4dc28:	8b72      	ldrh	r2, [r6, #26]
   4dc2a:	2a00      	cmp	r2, #0
   4dc2c:	d13a      	bne.n	4dca4 <dir_find+0x174>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   4dc2e:	220d      	movs	r2, #13
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4dc30:	2001      	movs	r0, #1
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   4dc32:	7835      	ldrb	r5, [r6, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4dc34:	f8d8 b00c 	ldr.w	fp, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   4dc38:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   4dc3c:	3d01      	subs	r5, #1
   4dc3e:	4355      	muls	r5, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4dc40:	4a27      	ldr	r2, [pc, #156]	; (4dce0 <dir_find+0x1b0>)
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
   4dc42:	f812 1b01 	ldrb.w	r1, [r2], #1
	rv = ptr[1];
   4dc46:	5a71      	ldrh	r1, [r6, r1]
		if (wc != 0) {
   4dc48:	b370      	cbz	r0, 4dca8 <dir_find+0x178>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
   4dc4a:	2dff      	cmp	r5, #255	; 0xff
   4dc4c:	d82a      	bhi.n	4dca4 <dir_find+0x174>
   4dc4e:	4608      	mov	r0, r1
   4dc50:	e9cd 3204 	strd	r3, r2, [sp, #16]
   4dc54:	9103      	str	r1, [sp, #12]
   4dc56:	f001 faa7 	bl	4f1a8 <ff_wtoupper>
   4dc5a:	1c6b      	adds	r3, r5, #1
   4dc5c:	9001      	str	r0, [sp, #4]
   4dc5e:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
   4dc62:	9302      	str	r3, [sp, #8]
   4dc64:	f001 faa0 	bl	4f1a8 <ff_wtoupper>
   4dc68:	9b01      	ldr	r3, [sp, #4]
   4dc6a:	4283      	cmp	r3, r0
   4dc6c:	d11a      	bne.n	4dca4 <dir_find+0x174>
   4dc6e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
	rv = rv << 8 | ptr[0];
   4dc72:	9903      	ldr	r1, [sp, #12]
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
   4dc74:	9d02      	ldr	r5, [sp, #8]
	rv = rv << 8 | ptr[0];
   4dc76:	4608      	mov	r0, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4dc78:	491a      	ldr	r1, [pc, #104]	; (4dce4 <dir_find+0x1b4>)
   4dc7a:	428a      	cmp	r2, r1
   4dc7c:	d1e1      	bne.n	4dc42 <dir_find+0x112>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
   4dc7e:	7832      	ldrb	r2, [r6, #0]
   4dc80:	0652      	lsls	r2, r2, #25
   4dc82:	d503      	bpl.n	4dc8c <dir_find+0x15c>
   4dc84:	b110      	cbz	r0, 4dc8c <dir_find+0x15c>
   4dc86:	f83b 2015 	ldrh.w	r2, [fp, r5, lsl #1]
   4dc8a:	b95a      	cbnz	r2, 4dca4 <dir_find+0x174>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4dc8c:	3b01      	subs	r3, #1
   4dc8e:	b2dd      	uxtb	r5, r3
		res = dir_next(dp, 0);	/* Next entry */
   4dc90:	2100      	movs	r1, #0
   4dc92:	4620      	mov	r0, r4
   4dc94:	f00a fcc2 	bl	5861c <dir_next>
	} while (res == FR_OK);
   4dc98:	2800      	cmp	r0, #0
   4dc9a:	d09d      	beq.n	4dbd8 <dir_find+0xa8>
   4dc9c:	4607      	mov	r7, r0
   4dc9e:	e773      	b.n	4db88 <dir_find+0x58>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4dca0:	429d      	cmp	r5, r3
   4dca2:	d0be      	beq.n	4dc22 <dir_find+0xf2>
   4dca4:	25ff      	movs	r5, #255	; 0xff
   4dca6:	e7f3      	b.n	4dc90 <dir_find+0x160>
			if (uc != 0xFFFF) return 0;		/* Check filler */
   4dca8:	f64f 7cff 	movw	ip, #65535	; 0xffff
   4dcac:	4561      	cmp	r1, ip
   4dcae:	d0e3      	beq.n	4dc78 <dir_find+0x148>
   4dcb0:	e7f8      	b.n	4dca4 <dir_find+0x174>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
   4dcb2:	b92d      	cbnz	r5, 4dcc0 <dir_find+0x190>
   4dcb4:	4630      	mov	r0, r6
   4dcb6:	f009 ff48 	bl	57b4a <sum_sfn>
   4dcba:	4548      	cmp	r0, r9
   4dcbc:	f43f af64 	beq.w	4db88 <dir_find+0x58>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
   4dcc0:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   4dcc4:	07db      	lsls	r3, r3, #31
   4dcc6:	d49b      	bmi.n	4dc00 <dir_find+0xd0>
   4dcc8:	220b      	movs	r2, #11
   4dcca:	4630      	mov	r0, r6
   4dccc:	f104 0140 	add.w	r1, r4, #64	; 0x40
   4dcd0:	f00d f8b3 	bl	5ae3a <memcmp>
   4dcd4:	2800      	cmp	r0, #0
   4dcd6:	d193      	bne.n	4dc00 <dir_find+0xd0>
   4dcd8:	e756      	b.n	4db88 <dir_find+0x58>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   4dcda:	2704      	movs	r7, #4
   4dcdc:	e754      	b.n	4db88 <dir_find+0x58>
   4dcde:	bf00      	nop
   4dce0:	0006077c 	.word	0x0006077c
   4dce4:	00060789 	.word	0x00060789

0004dce8 <dir_register>:
{
   4dce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
   4dcec:	f890 b04b 	ldrb.w	fp, [r0, #75]	; 0x4b
{
   4dcf0:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
   4dcf2:	f01b 05a0 	ands.w	r5, fp, #160	; 0xa0
{
   4dcf6:	b099      	sub	sp, #100	; 0x64
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
   4dcf8:	f040 81c4 	bne.w	4e084 <dir_register+0x39c>
	FATFS *fs = dp->obj.fs;
   4dcfc:	6806      	ldr	r6, [r0, #0]
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
   4dcfe:	68f2      	ldr	r2, [r6, #12]
   4dd00:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   4dd04:	2b00      	cmp	r3, #0
   4dd06:	d160      	bne.n	4ddca <dir_register+0xe2>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   4dd08:	7833      	ldrb	r3, [r6, #0]
   4dd0a:	2b04      	cmp	r3, #4
   4dd0c:	f040 809c 	bne.w	4de48 <dir_register+0x160>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
   4dd10:	230f      	movs	r3, #15
   4dd12:	350e      	adds	r5, #14
   4dd14:	fbb5 f5f3 	udiv	r5, r5, r3
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
   4dd18:	4620      	mov	r0, r4
   4dd1a:	1ca9      	adds	r1, r5, #2
   4dd1c:	f00a fcdc 	bl	586d8 <dir_alloc>
		if (res != FR_OK) return res;
   4dd20:	4680      	mov	r8, r0
   4dd22:	2800      	cmp	r0, #0
   4dd24:	f040 808a 	bne.w	4de3c <dir_register+0x154>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
   4dd28:	6b23      	ldr	r3, [r4, #48]	; 0x30
   4dd2a:	3501      	adds	r5, #1
   4dd2c:	eba3 1345 	sub.w	r3, r3, r5, lsl #5
   4dd30:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
   4dd32:	79e3      	ldrb	r3, [r4, #7]
   4dd34:	075f      	lsls	r7, r3, #29
   4dd36:	d54a      	bpl.n	4ddce <dir_register+0xe6>
			dp->obj.stat &= ~4;
   4dd38:	f023 0304 	bic.w	r3, r3, #4
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
   4dd3c:	4620      	mov	r0, r4
			dp->obj.stat &= ~4;
   4dd3e:	71e3      	strb	r3, [r4, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
   4dd40:	f00a fa62 	bl	58208 <fill_first_frag>
			if (res != FR_OK) return res;
   4dd44:	2800      	cmp	r0, #0
   4dd46:	d13e      	bne.n	4ddc6 <dir_register+0xde>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
   4dd48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4dd4c:	4620      	mov	r0, r4
   4dd4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   4dd50:	f00a fa42 	bl	581d8 <fill_last_frag>
			if (res != FR_OK) return res;
   4dd54:	2800      	cmp	r0, #0
   4dd56:	d136      	bne.n	4ddc6 <dir_register+0xde>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
   4dd58:	68a3      	ldr	r3, [r4, #8]
   4dd5a:	2b00      	cmp	r3, #0
   4dd5c:	d037      	beq.n	4ddce <dir_register+0xe6>
	dp->obj.fs = obj->fs;
   4dd5e:	6823      	ldr	r3, [r4, #0]
	dp->blk_ofs = obj->c_ofs;
   4dd60:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	dp->obj.fs = obj->fs;
   4dd62:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
   4dd64:	6a23      	ldr	r3, [r4, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
   4dd66:	a804      	add	r0, sp, #16
	dp->obj.sclust = obj->c_scl;
   4dd68:	9306      	str	r3, [sp, #24]
	dp->obj.stat = (BYTE)obj->c_size;
   4dd6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	dp->obj.n_frag = 0;
   4dd6c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	dp->obj.stat = (BYTE)obj->c_size;
   4dd70:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
   4dd74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   4dd78:	e9cd 3808 	strd	r3, r8, [sp, #32]
	dp->blk_ofs = obj->c_ofs;
   4dd7c:	9117      	str	r1, [sp, #92]	; 0x5c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
   4dd7e:	f00a f964 	bl	5804a <dir_sdi>
	if (res == FR_OK) {
   4dd82:	bb00      	cbnz	r0, 4ddc6 <dir_register+0xde>
		res = load_xdir(dp);		/* Load the object's entry block */
   4dd84:	a804      	add	r0, sp, #16
   4dd86:	f00a fcf8 	bl	5877a <load_xdir>
				if (res != FR_OK) return res;
   4dd8a:	b9e0      	cbnz	r0, 4ddc6 <dir_register+0xde>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
   4dd8c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   4dd90:	f44f 7100 	mov.w	r1, #512	; 0x200
   4dd94:	8970      	ldrh	r0, [r6, #10]
   4dd96:	fbe0 2301 	umlal	r2, r3, r0, r1
   4dd9a:	e9c4 2304 	strd	r2, r3, [r4, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
   4dd9e:	6930      	ldr	r0, [r6, #16]
   4dda0:	3038      	adds	r0, #56	; 0x38
   4dda2:	f009 feb8 	bl	57b16 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
   4dda6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   4ddaa:	6930      	ldr	r0, [r6, #16]
   4ddac:	3028      	adds	r0, #40	; 0x28
   4ddae:	f009 feb2 	bl	57b16 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
   4ddb2:	79e3      	ldrb	r3, [r4, #7]
   4ddb4:	6932      	ldr	r2, [r6, #16]
   4ddb6:	f043 0301 	orr.w	r3, r3, #1
   4ddba:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
   4ddbe:	a804      	add	r0, sp, #16
   4ddc0:	f00a fd47 	bl	58852 <store_xdir>
				if (res != FR_OK) return res;
   4ddc4:	b118      	cbz	r0, 4ddce <dir_register+0xe6>
   4ddc6:	4680      	mov	r8, r0
   4ddc8:	e038      	b.n	4de3c <dir_register+0x154>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
   4ddca:	3501      	adds	r5, #1
   4ddcc:	e798      	b.n	4dd00 <dir_register+0x18>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
   4ddce:	e9d6 5403 	ldrd	r5, r4, [r6, #12]
   4ddd2:	1c67      	adds	r7, r4, #1
   4ddd4:	223f      	movs	r2, #63	; 0x3f
   4ddd6:	2100      	movs	r1, #0
   4ddd8:	4638      	mov	r0, r7
   4ddda:	f00d f878 	bl	5aece <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
   4ddde:	2385      	movs	r3, #133	; 0x85
   4dde0:	7023      	strb	r3, [r4, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
   4dde2:	23c0      	movs	r3, #192	; 0xc0
   4dde4:	f884 3020 	strb.w	r3, [r4, #32]
	nlen = nc1 = 0; wc = 1;
   4dde8:	2300      	movs	r3, #0
   4ddea:	2001      	movs	r0, #1
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
   4ddec:	4619      	mov	r1, r3
	i = SZDIRE * 2;	/* Top of file_name entries */
   4ddee:	2240      	movs	r2, #64	; 0x40
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
   4ddf0:	f04f 0ec1 	mov.w	lr, #193	; 0xc1
   4ddf4:	4699      	mov	r9, r3
   4ddf6:	1c56      	adds	r6, r2, #1
   4ddf8:	f804 e002 	strb.w	lr, [r4, r2]
   4ddfc:	f804 9006 	strb.w	r9, [r4, r6]
   4de00:	3202      	adds	r2, #2
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
   4de02:	b120      	cbz	r0, 4de0e <dir_register+0x126>
   4de04:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
   4de08:	b108      	cbz	r0, 4de0e <dir_register+0x126>
   4de0a:	3301      	adds	r3, #1
   4de0c:	b2db      	uxtb	r3, r3
	*ptr++ = (BYTE)val; val >>= 8;
   4de0e:	0a06      	lsrs	r6, r0, #8
   4de10:	54a0      	strb	r0, [r4, r2]
	*ptr++ = (BYTE)val;
   4de12:	54be      	strb	r6, [r7, r2]
			i += 2;
   4de14:	3202      	adds	r2, #2
		} while (i % SZDIRE != 0);
   4de16:	06d6      	lsls	r6, r2, #27
   4de18:	d1f3      	bne.n	4de02 <dir_register+0x11a>
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
   4de1a:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
   4de1e:	f101 0c01 	add.w	ip, r1, #1
   4de22:	b97e      	cbnz	r6, 4de44 <dir_register+0x15c>
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
   4de24:	3102      	adds	r1, #2
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
   4de26:	4628      	mov	r0, r5
	dirb[XDIR_NumName] = nlen;		/* Set name length */
   4de28:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
   4de2c:	7061      	strb	r1, [r4, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
   4de2e:	f009 fffc 	bl	57e2a <xname_sum>
	*ptr++ = (BYTE)val; val >>= 8;
   4de32:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
   4de36:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
   4de38:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
}
   4de3c:	4640      	mov	r0, r8
   4de3e:	b019      	add	sp, #100	; 0x64
   4de40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4de44:	4661      	mov	r1, ip
   4de46:	e7d6      	b.n	4ddf6 <dir_register+0x10e>
	memcpy(sn, dp->fn, 12);
   4de48:	f10d 0910 	add.w	r9, sp, #16
   4de4c:	f104 0740 	add.w	r7, r4, #64	; 0x40
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   4de50:	f01b 0f01 	tst.w	fp, #1
	memcpy(sn, dp->fn, 12);
   4de54:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   4de58:	e889 0007 	stmia.w	r9, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   4de5c:	d07b      	beq.n	4df56 <dir_register+0x26e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
   4de5e:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
   4de60:	f04f 0a01 	mov.w	sl, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
   4de64:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4de68:	46bc      	mov	ip, r7
   4de6a:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
   4de6e:	68f3      	ldr	r3, [r6, #12]
   4de70:	e8ac 0003 	stmia.w	ip!, {r0, r1}
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
   4de74:	f1ba 0f05 	cmp.w	sl, #5
   4de78:	f82c 2b02 	strh.w	r2, [ip], #2
   4de7c:	ea4f 4212 	mov.w	r2, r2, lsr #16
   4de80:	f88c 2000 	strb.w	r2, [ip]
   4de84:	d95e      	bls.n	4df44 <dir_register+0x25c>
   4de86:	4652      	mov	r2, sl
   4de88:	1e98      	subs	r0, r3, #2
		while (*lfn) {	/* Create a CRC as hash value */
   4de8a:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   4de8e:	2900      	cmp	r1, #0
   4de90:	d146      	bne.n	4df20 <dir_register+0x238>
   4de92:	46cc      	mov	ip, r9
   4de94:	2107      	movs	r1, #7
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
   4de96:	f002 0e0f 	and.w	lr, r2, #15
   4de9a:	f10e 0030 	add.w	r0, lr, #48	; 0x30
		if (c > '9') c += 7;
   4de9e:	2839      	cmp	r0, #57	; 0x39
   4dea0:	bf88      	it	hi
   4dea2:	f10e 0037 	addhi.w	r0, lr, #55	; 0x37
	} while (i && seq);
   4dea6:	3901      	subs	r1, #1
   4dea8:	4690      	mov	r8, r2
		ns[i--] = c;
   4deaa:	f80c 0d01 	strb.w	r0, [ip, #-1]!
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
   4deae:	ea4f 1212 	mov.w	r2, r2, lsr #4
	} while (i && seq);
   4deb2:	d002      	beq.n	4deba <dir_register+0x1d2>
   4deb4:	f1b8 0f0f 	cmp.w	r8, #15
   4deb8:	d8ed      	bhi.n	4de96 <dir_register+0x1ae>
	ns[i] = '~';
   4deba:	207e      	movs	r0, #126	; 0x7e
   4debc:	f101 0360 	add.w	r3, r1, #96	; 0x60
   4dec0:	eb0d 0203 	add.w	r2, sp, r3
   4dec4:	f802 0c58 	strb.w	r0, [r2, #-88]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
   4dec8:	2200      	movs	r2, #0
   4deca:	f104 003f 	add.w	r0, r4, #63	; 0x3f
   4dece:	428a      	cmp	r2, r1
   4ded0:	d006      	beq.n	4dee0 <dir_register+0x1f8>
   4ded2:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   4ded6:	f102 0e01 	add.w	lr, r2, #1
   4deda:	f1bc 0f20 	cmp.w	ip, #32
   4dede:	d133      	bne.n	4df48 <dir_register+0x260>
   4dee0:	323f      	adds	r2, #63	; 0x3f
   4dee2:	4422      	add	r2, r4
   4dee4:	f104 0c47 	add.w	ip, r4, #71	; 0x47
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   4dee8:	2907      	cmp	r1, #7
   4deea:	bf8f      	iteee	hi
   4deec:	2020      	movhi	r0, #32
   4deee:	f101 0360 	addls.w	r3, r1, #96	; 0x60
   4def2:	eb0d 0003 	addls.w	r0, sp, r3
   4def6:	f810 0c58 	ldrbls.w	r0, [r0, #-88]
   4defa:	bf98      	it	ls
   4defc:	3101      	addls	r1, #1
   4defe:	f802 0f01 	strb.w	r0, [r2, #1]!
	} while (j < 8);
   4df02:	4594      	cmp	ip, r2
   4df04:	d1f0      	bne.n	4dee8 <dir_register+0x200>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
   4df06:	4620      	mov	r0, r4
   4df08:	f7ff fe12 	bl	4db30 <dir_find>
			if (res != FR_OK) break;
   4df0c:	4680      	mov	r8, r0
   4df0e:	b9e8      	cbnz	r0, 4df4c <dir_register+0x264>
		for (n = 1; n < 100; n++) {
   4df10:	f10a 0a01 	add.w	sl, sl, #1
   4df14:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
   4df18:	d1a6      	bne.n	4de68 <dir_register+0x180>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   4df1a:	f04f 0807 	mov.w	r8, #7
   4df1e:	e78d      	b.n	4de3c <dir_register+0x154>
   4df20:	f04f 0c10 	mov.w	ip, #16
				sreg = (sreg << 1) + (wc & 1);
   4df24:	f001 0e01 	and.w	lr, r1, #1
   4df28:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
   4df2c:	03d3      	lsls	r3, r2, #15
   4df2e:	bf44      	itt	mi
   4df30:	f482 3288 	eormi.w	r2, r2, #69632	; 0x11000
   4df34:	f082 0221 	eormi.w	r2, r2, #33	; 0x21
			for (i = 0; i < 16; i++) {
   4df38:	f1bc 0c01 	subs.w	ip, ip, #1
				wc >>= 1;
   4df3c:	ea4f 0151 	mov.w	r1, r1, lsr #1
			for (i = 0; i < 16; i++) {
   4df40:	d1f0      	bne.n	4df24 <dir_register+0x23c>
   4df42:	e7a2      	b.n	4de8a <dir_register+0x1a2>
   4df44:	4652      	mov	r2, sl
   4df46:	e7a4      	b.n	4de92 <dir_register+0x1aa>
   4df48:	4672      	mov	r2, lr
   4df4a:	e7c0      	b.n	4dece <dir_register+0x1e6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   4df4c:	2804      	cmp	r0, #4
   4df4e:	f47f af75 	bne.w	4de3c <dir_register+0x154>
		dp->fn[NSFLAG] = sn[NSFLAG];
   4df52:	f884 b04b 	strb.w	fp, [r4, #75]	; 0x4b
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
   4df56:	f01b 0f02 	tst.w	fp, #2
   4df5a:	bf1d      	ittte	ne
   4df5c:	230d      	movne	r3, #13
   4df5e:	350c      	addne	r5, #12
   4df60:	fbb5 f5f3 	udivne	r5, r5, r3
   4df64:	2501      	moveq	r5, #1
   4df66:	bf18      	it	ne
   4df68:	3501      	addne	r5, #1
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
   4df6a:	4629      	mov	r1, r5
   4df6c:	4620      	mov	r0, r4
   4df6e:	f00a fbb3 	bl	586d8 <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
   4df72:	4680      	mov	r8, r0
   4df74:	2800      	cmp	r0, #0
   4df76:	f47f af61 	bne.w	4de3c <dir_register+0x154>
   4df7a:	3d01      	subs	r5, #1
   4df7c:	d11d      	bne.n	4dfba <dir_register+0x2d2>
		res = move_window(fs, dp->sect);
   4df7e:	4630      	mov	r0, r6
   4df80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   4df82:	f009 ff77 	bl	57e74 <move_window>
		if (res == FR_OK) {
   4df86:	4680      	mov	r8, r0
   4df88:	2800      	cmp	r0, #0
   4df8a:	f47f af57 	bne.w	4de3c <dir_register+0x154>
__ssp_bos_icheck3(memset, void *, int)
   4df8e:	4601      	mov	r1, r0
   4df90:	2220      	movs	r2, #32
   4df92:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   4df94:	f00c ff9b 	bl	5aece <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4df98:	cf03      	ldmia	r7!, {r0, r1}
   4df9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   4df9c:	6018      	str	r0, [r3, #0]
   4df9e:	6059      	str	r1, [r3, #4]
   4dfa0:	78ba      	ldrb	r2, [r7, #2]
   4dfa2:	8839      	ldrh	r1, [r7, #0]
   4dfa4:	729a      	strb	r2, [r3, #10]
   4dfa6:	8119      	strh	r1, [r3, #8]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
   4dfa8:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   4dfac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   4dfae:	f003 0318 	and.w	r3, r3, #24
   4dfb2:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
   4dfb4:	2301      	movs	r3, #1
   4dfb6:	70f3      	strb	r3, [r6, #3]
   4dfb8:	e740      	b.n	4de3c <dir_register+0x154>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
   4dfba:	6b21      	ldr	r1, [r4, #48]	; 0x30
   4dfbc:	4620      	mov	r0, r4
   4dfbe:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
   4dfc2:	f00a f842 	bl	5804a <dir_sdi>
		if (res == FR_OK) {
   4dfc6:	4680      	mov	r8, r0
   4dfc8:	2800      	cmp	r0, #0
   4dfca:	f47f af37 	bne.w	4de3c <dir_register+0x154>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
   4dfce:	4638      	mov	r0, r7
   4dfd0:	f009 fdbb 	bl	57b4a <sum_sfn>
   4dfd4:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
   4dfd6:	4630      	mov	r0, r6
   4dfd8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   4dfda:	f009 ff4b 	bl	57e74 <move_window>
   4dfde:	4680      	mov	r8, r0
				if (res != FR_OK) break;
   4dfe0:	2800      	cmp	r0, #0
   4dfe2:	f47f af2b 	bne.w	4de3c <dir_register+0x154>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
   4dfe6:	68f3      	ldr	r3, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
   4dfe8:	9a01      	ldr	r2, [sp, #4]
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
   4dfea:	9300      	str	r3, [sp, #0]
   4dfec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
   4dfee:	f04f 0c0d 	mov.w	ip, #13
	dir[LDIR_Chksum] = sum;			/* Set checksum */
   4dff2:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   4dff4:	f04f 020f 	mov.w	r2, #15
   4dff8:	b2e9      	uxtb	r1, r5
   4dffa:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
   4dffc:	1e4a      	subs	r2, r1, #1
   4dffe:	fb0c f202 	mul.w	r2, ip, r2
	*ptr++ = (BYTE)val; val >>= 8;
   4e002:	f04f 09ff 	mov.w	r9, #255	; 0xff
	s = wc = 0;
   4e006:	4684      	mov	ip, r0
   4e008:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4e08c <dir_register+0x3a4>
	dir[LDIR_Type] = 0;
   4e00c:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
   4e00e:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
   4e010:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
   4e012:	f64f 7aff 	movw	sl, #65535	; 0xffff
		st_word(dir + LfnOfs[s], wc);		/* Put it */
   4e016:	f818 eb01 	ldrb.w	lr, [r8], #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
   4e01a:	4550      	cmp	r0, sl
   4e01c:	eb03 0b0e 	add.w	fp, r3, lr
   4e020:	d120      	bne.n	4e064 <dir_register+0x37c>
	*ptr++ = (BYTE)val; val >>= 8;
   4e022:	f803 900e 	strb.w	r9, [r3, lr]
	*ptr++ = (BYTE)val;
   4e026:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
   4e02a:	f10c 0c01 	add.w	ip, ip, #1
   4e02e:	f1bc 0f0d 	cmp.w	ip, #13
   4e032:	d1ee      	bne.n	4e012 <dir_register+0x32a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
   4e034:	f64f 7cff 	movw	ip, #65535	; 0xffff
   4e038:	4560      	cmp	r0, ip
   4e03a:	d003      	beq.n	4e044 <dir_register+0x35c>
   4e03c:	9800      	ldr	r0, [sp, #0]
   4e03e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
   4e042:	b90a      	cbnz	r2, 4e048 <dir_register+0x360>
   4e044:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   4e048:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
   4e04a:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
   4e04c:	2100      	movs	r1, #0
   4e04e:	4620      	mov	r0, r4
				fs->wflag = 1;
   4e050:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
   4e052:	f00a fae3 	bl	5861c <dir_next>
			} while (res == FR_OK && --n_ent);
   4e056:	4680      	mov	r8, r0
   4e058:	2800      	cmp	r0, #0
   4e05a:	f47f aeef 	bne.w	4de3c <dir_register+0x154>
   4e05e:	3d01      	subs	r5, #1
   4e060:	d1b9      	bne.n	4dfd6 <dir_register+0x2ee>
   4e062:	e78c      	b.n	4df7e <dir_register+0x296>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
   4e064:	9800      	ldr	r0, [sp, #0]
   4e066:	f102 0a01 	add.w	sl, r2, #1
   4e06a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
   4e06e:	0a02      	lsrs	r2, r0, #8
   4e070:	f803 000e 	strb.w	r0, [r3, lr]
	*ptr++ = (BYTE)val;
   4e074:	f88b 2001 	strb.w	r2, [fp, #1]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
   4e078:	4652      	mov	r2, sl
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
   4e07a:	2800      	cmp	r0, #0
   4e07c:	d1d5      	bne.n	4e02a <dir_register+0x342>
   4e07e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   4e082:	e7d2      	b.n	4e02a <dir_register+0x342>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
   4e084:	f04f 0806 	mov.w	r8, #6
   4e088:	e6d8      	b.n	4de3c <dir_register+0x154>
   4e08a:	bf00      	nop
   4e08c:	0006077c 	.word	0x0006077c

0004e090 <follow_path>:
{
   4e090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e094:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
   4e096:	6803      	ldr	r3, [r0, #0]
{
   4e098:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
   4e09a:	9301      	str	r3, [sp, #4]
		while (IsSeparator(*path)) path++;	/* Strip separators */
   4e09c:	468a      	mov	sl, r1
   4e09e:	f811 3b01 	ldrb.w	r3, [r1], #1
   4e0a2:	2b2f      	cmp	r3, #47	; 0x2f
   4e0a4:	d0fa      	beq.n	4e09c <follow_path+0xc>
   4e0a6:	2b5c      	cmp	r3, #92	; 0x5c
   4e0a8:	d0f8      	beq.n	4e09c <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
   4e0aa:	2300      	movs	r3, #0
   4e0ac:	60ab      	str	r3, [r5, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
   4e0ae:	61eb      	str	r3, [r5, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
   4e0b0:	f89a 3000 	ldrb.w	r3, [sl]
   4e0b4:	2b1f      	cmp	r3, #31
   4e0b6:	f200 80e8 	bhi.w	4e28a <follow_path+0x1fa>
		dp->fn[NSFLAG] = NS_NONAME;
   4e0ba:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
   4e0bc:	2100      	movs	r1, #0
   4e0be:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
   4e0c0:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
}
   4e0c4:	b005      	add	sp, #20
   4e0c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
   4e0ca:	f009 bfbe 	b.w	5804a <dir_sdi>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
   4e0ce:	4601      	mov	r1, r0
   4e0d0:	48a9      	ldr	r0, [pc, #676]	; (4e378 <follow_path+0x2e8>)
   4e0d2:	f00d f89c 	bl	5b20e <strchr>
   4e0d6:	2800      	cmp	r0, #0
   4e0d8:	f000 80f0 	beq.w	4e2bc <follow_path+0x22c>
   4e0dc:	e0f1      	b.n	4e2c2 <follow_path+0x232>
		lfn[di++] = wc;				/* Store the Unicode character */
   4e0de:	f82b 4017 	strh.w	r4, [fp, r7, lsl #1]
	for (;;) {
   4e0e2:	3701      	adds	r7, #1
		uc = tchar2uni(&p);			/* Get a character */
   4e0e4:	e0d5      	b.n	4e292 <follow_path+0x202>
		cf = NS_LAST;			/* Last segment */
   4e0e6:	2404      	movs	r4, #4
   4e0e8:	e108      	b.n	4e2fc <follow_path+0x26c>
		wc = lfn[di - 1];
   4e0ea:	f832 3017 	ldrh.w	r3, [r2, r7, lsl #1]
		if (wc != ' ' && wc != '.') break;
   4e0ee:	2b20      	cmp	r3, #32
   4e0f0:	d002      	beq.n	4e0f8 <follow_path+0x68>
   4e0f2:	2b2e      	cmp	r3, #46	; 0x2e
   4e0f4:	f040 8107 	bne.w	4e306 <follow_path+0x276>
		di--;
   4e0f8:	3f01      	subs	r7, #1
   4e0fa:	e101      	b.n	4e300 <follow_path+0x270>
		if (i >= ni || si == di) {		/* End of field? */
   4e0fc:	4599      	cmp	r9, r3
   4e0fe:	d204      	bcs.n	4e10a <follow_path+0x7a>
   4e100:	42ba      	cmp	r2, r7
   4e102:	d148      	bne.n	4e196 <follow_path+0x106>
			if (ni == 11) {				/* Name extension overflow? */
   4e104:	2b0b      	cmp	r3, #11
   4e106:	d13d      	bne.n	4e184 <follow_path+0xf4>
   4e108:	e001      	b.n	4e10e <follow_path+0x7e>
   4e10a:	2b0b      	cmp	r3, #11
   4e10c:	d134      	bne.n	4e178 <follow_path+0xe8>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
   4e10e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   4e112:	2be5      	cmp	r3, #229	; 0xe5
   4e114:	d102      	bne.n	4e11c <follow_path+0x8c>
   4e116:	2305      	movs	r3, #5
   4e118:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
				cf |= NS_LOSS | NS_LFN;
   4e11c:	f044 0403 	orr.w	r4, r4, #3
   4e120:	b2e4      	uxtb	r4, r4
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
   4e122:	f008 030c 	and.w	r3, r8, #12
   4e126:	2b0c      	cmp	r3, #12
   4e128:	d003      	beq.n	4e132 <follow_path+0xa2>
   4e12a:	f008 0303 	and.w	r3, r8, #3
   4e12e:	2b03      	cmp	r3, #3
   4e130:	d102      	bne.n	4e138 <follow_path+0xa8>
   4e132:	f044 0402 	orr.w	r4, r4, #2
   4e136:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
   4e138:	07a1      	lsls	r1, r4, #30
   4e13a:	d40b      	bmi.n	4e154 <follow_path+0xc4>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
   4e13c:	f018 0f01 	tst.w	r8, #1
   4e140:	bf1c      	itt	ne
   4e142:	f044 0410 	orrne.w	r4, r4, #16
   4e146:	b2e4      	uxtbne	r4, r4
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
   4e148:	f018 0f04 	tst.w	r8, #4
   4e14c:	bf1c      	itt	ne
   4e14e:	f044 0408 	orrne.w	r4, r4, #8
   4e152:	b2e4      	uxtbne	r4, r4
			res = dir_find(dp);				/* Find an object with the segment name */
   4e154:	4628      	mov	r0, r5
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
   4e156:	f885 404b 	strb.w	r4, [r5, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
   4e15a:	f7ff fce9 	bl	4db30 <dir_find>
			ns = dp->fn[NSFLAG];
   4e15e:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
   4e162:	2800      	cmp	r0, #0
   4e164:	d07a      	beq.n	4e25c <follow_path+0x1cc>
				if (res == FR_NO_FILE) {	/* Object is not found */
   4e166:	2804      	cmp	r0, #4
   4e168:	d103      	bne.n	4e172 <follow_path+0xe2>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   4e16a:	f013 0f04 	tst.w	r3, #4
   4e16e:	bf08      	it	eq
   4e170:	2005      	moveq	r0, #5
}
   4e172:	b005      	add	sp, #20
   4e174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
   4e178:	42ba      	cmp	r2, r7
   4e17a:	d003      	beq.n	4e184 <follow_path+0xf4>
   4e17c:	f044 0403 	orr.w	r4, r4, #3
   4e180:	b2e4      	uxtb	r4, r4
			if (si > di) break;						/* No name extension? */
   4e182:	d85d      	bhi.n	4e240 <follow_path+0x1b0>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
   4e184:	ea4f 0888 	mov.w	r8, r8, lsl #2
			continue;
   4e188:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
   4e18a:	230b      	movs	r3, #11
   4e18c:	f04f 0908 	mov.w	r9, #8
   4e190:	fa5f f888 	uxtb.w	r8, r8
			continue;
   4e194:	e0ee      	b.n	4e374 <follow_path+0x2e4>
		if (wc >= 0x80) {	/* Is this an extended character? */
   4e196:	2e7f      	cmp	r6, #127	; 0x7f
   4e198:	d93e      	bls.n	4e218 <follow_path+0x188>
			cf |= NS_LFN;	/* LFN entry needs to be created */
   4e19a:	f044 0102 	orr.w	r1, r4, #2
   4e19e:	e9cd 2302 	strd	r2, r3, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
   4e1a2:	4630      	mov	r0, r6
			cf |= NS_LFN;	/* LFN entry needs to be created */
   4e1a4:	b2cb      	uxtb	r3, r1
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
   4e1a6:	f240 11b5 	movw	r1, #437	; 0x1b5
			cf |= NS_LFN;	/* LFN entry needs to be created */
   4e1aa:	9300      	str	r3, [sp, #0]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
   4e1ac:	f000 ffca 	bl	4f144 <ff_uni2oem>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
   4e1b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   4e1b4:	f010 0f80 	tst.w	r0, #128	; 0x80
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
   4e1b8:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
   4e1ba:	d014      	beq.n	4e1e6 <follow_path+0x156>
   4e1bc:	496f      	ldr	r1, [pc, #444]	; (4e37c <follow_path+0x2ec>)
   4e1be:	f000 067f 	and.w	r6, r0, #127	; 0x7f
   4e1c2:	5d8e      	ldrb	r6, [r1, r6]
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
   4e1c4:	b146      	cbz	r6, 4e1d8 <follow_path+0x148>
   4e1c6:	4631      	mov	r1, r6
   4e1c8:	486d      	ldr	r0, [pc, #436]	; (4e380 <follow_path+0x2f0>)
   4e1ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
   4e1ce:	f00d f81e 	bl	5b20e <strchr>
   4e1d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   4e1d6:	b308      	cbz	r0, 4e21c <follow_path+0x18c>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   4e1d8:	9900      	ldr	r1, [sp, #0]
   4e1da:	265f      	movs	r6, #95	; 0x5f
   4e1dc:	f041 0103 	orr.w	r1, r1, #3
   4e1e0:	b2c9      	uxtb	r1, r1
   4e1e2:	9100      	str	r1, [sp, #0]
   4e1e4:	e010      	b.n	4e208 <follow_path+0x178>
		if (wc >= 0x100) {				/* Is this a DBC? */
   4e1e6:	28ff      	cmp	r0, #255	; 0xff
   4e1e8:	d9ec      	bls.n	4e1c4 <follow_path+0x134>
			if (i >= ni - 1) {			/* Field overflow? */
   4e1ea:	1e59      	subs	r1, r3, #1
   4e1ec:	4589      	cmp	r9, r1
   4e1ee:	d304      	bcc.n	4e1fa <follow_path+0x16a>
				cf |= NS_LOSS | NS_LFN;
   4e1f0:	f044 0403 	orr.w	r4, r4, #3
				i = ni; continue;		/* Next field */
   4e1f4:	4699      	mov	r9, r3
				cf |= NS_LOSS | NS_LFN;
   4e1f6:	b2e4      	uxtb	r4, r4
				i = ni; continue;		/* Next field */
   4e1f8:	e0bc      	b.n	4e374 <follow_path+0x2e4>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
   4e1fa:	eb05 0109 	add.w	r1, r5, r9
   4e1fe:	0a00      	lsrs	r0, r0, #8
   4e200:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
   4e204:	f109 0901 	add.w	r9, r9, #1
		dp->fn[i++] = (BYTE)wc;
   4e208:	eb05 0109 	add.w	r1, r5, r9
   4e20c:	9c00      	ldr	r4, [sp, #0]
   4e20e:	f881 6040 	strb.w	r6, [r1, #64]	; 0x40
   4e212:	f109 0901 	add.w	r9, r9, #1
   4e216:	e0ad      	b.n	4e374 <follow_path+0x2e4>
   4e218:	9400      	str	r4, [sp, #0]
   4e21a:	e7d4      	b.n	4e1c6 <follow_path+0x136>
				if (IsUpper(wc)) {		/* ASCII upper case? */
   4e21c:	f1a6 0141 	sub.w	r1, r6, #65	; 0x41
   4e220:	b289      	uxth	r1, r1
   4e222:	2919      	cmp	r1, #25
   4e224:	d802      	bhi.n	4e22c <follow_path+0x19c>
					b |= 2;
   4e226:	f048 0802 	orr.w	r8, r8, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
   4e22a:	e7ed      	b.n	4e208 <follow_path+0x178>
   4e22c:	f1a6 0161 	sub.w	r1, r6, #97	; 0x61
   4e230:	b289      	uxth	r1, r1
   4e232:	2919      	cmp	r1, #25
					b |= 1; wc -= 0x20;
   4e234:	bf9e      	ittt	ls
   4e236:	3e20      	subls	r6, #32
   4e238:	f048 0801 	orrls.w	r8, r8, #1
   4e23c:	b2b6      	uxthls	r6, r6
   4e23e:	e7e3      	b.n	4e208 <follow_path+0x178>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
   4e240:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   4e244:	2ae5      	cmp	r2, #229	; 0xe5
   4e246:	bf04      	itt	eq
   4e248:	2205      	moveq	r2, #5
   4e24a:	f885 2040 	strbeq.w	r2, [r5, #64]	; 0x40
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
   4e24e:	2b08      	cmp	r3, #8
   4e250:	bf04      	itt	eq
   4e252:	ea4f 0888 	moveq.w	r8, r8, lsl #2
   4e256:	fa5f f888 	uxtbeq.w	r8, r8
   4e25a:	e762      	b.n	4e122 <follow_path+0x92>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
   4e25c:	075a      	lsls	r2, r3, #29
   4e25e:	d488      	bmi.n	4e172 <follow_path+0xe2>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
   4e260:	79ab      	ldrb	r3, [r5, #6]
   4e262:	06db      	lsls	r3, r3, #27
   4e264:	d53a      	bpl.n	4e2dc <follow_path+0x24c>
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
   4e266:	9b01      	ldr	r3, [sp, #4]
   4e268:	7818      	ldrb	r0, [r3, #0]
   4e26a:	2804      	cmp	r0, #4
   4e26c:	d12b      	bne.n	4e2c6 <follow_path+0x236>
				dp->obj.c_scl = dp->obj.sclust;
   4e26e:	68ab      	ldr	r3, [r5, #8]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   4e270:	79ea      	ldrb	r2, [r5, #7]
				dp->obj.c_scl = dp->obj.sclust;
   4e272:	622b      	str	r3, [r5, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   4e274:	692b      	ldr	r3, [r5, #16]
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
   4e276:	4629      	mov	r1, r5
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   4e278:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   4e27c:	4313      	orrs	r3, r2
   4e27e:	626b      	str	r3, [r5, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
   4e280:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
   4e282:	9801      	ldr	r0, [sp, #4]
				dp->obj.c_ofs = dp->blk_ofs;
   4e284:	62ab      	str	r3, [r5, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
   4e286:	f009 fc84 	bl	57b92 <init_alloc_info>
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
   4e28a:	2700      	movs	r7, #0
   4e28c:	682b      	ldr	r3, [r5, #0]
   4e28e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	wc = (BYTE)*p++;			/* Get a byte */
   4e292:	f81a 0b01 	ldrb.w	r0, [sl], #1
	if (wc != 0) {
   4e296:	2800      	cmp	r0, #0
   4e298:	f43f af25 	beq.w	4e0e6 <follow_path+0x56>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
   4e29c:	f240 11b5 	movw	r1, #437	; 0x1b5
   4e2a0:	f000 ff6e 	bl	4f180 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
   4e2a4:	4604      	mov	r4, r0
   4e2a6:	b160      	cbz	r0, 4e2c2 <follow_path+0x232>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
   4e2a8:	281f      	cmp	r0, #31
   4e2aa:	f67f af1c 	bls.w	4e0e6 <follow_path+0x56>
   4e2ae:	282f      	cmp	r0, #47	; 0x2f
   4e2b0:	d016      	beq.n	4e2e0 <follow_path+0x250>
   4e2b2:	285c      	cmp	r0, #92	; 0x5c
   4e2b4:	d014      	beq.n	4e2e0 <follow_path+0x250>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
   4e2b6:	287f      	cmp	r0, #127	; 0x7f
   4e2b8:	f67f af09 	bls.w	4e0ce <follow_path+0x3e>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
   4e2bc:	2fff      	cmp	r7, #255	; 0xff
   4e2be:	f47f af0e 	bne.w	4e0de <follow_path+0x4e>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   4e2c2:	2006      	movs	r0, #6
   4e2c4:	e755      	b.n	4e172 <follow_path+0xe2>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
   4e2c6:	9b01      	ldr	r3, [sp, #4]
   4e2c8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
   4e2cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   4e2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
   4e2d2:	4419      	add	r1, r3
   4e2d4:	f00a faec 	bl	588b0 <ld_clust.isra.0>
   4e2d8:	60a8      	str	r0, [r5, #8]
   4e2da:	e7d6      	b.n	4e28a <follow_path+0x1fa>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   4e2dc:	2005      	movs	r0, #5
	return res;
   4e2de:	e748      	b.n	4e172 <follow_path+0xe2>
	if (wc < ' ') {				/* Stopped at end of the path? */
   4e2e0:	4653      	mov	r3, sl
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
   4e2e2:	781c      	ldrb	r4, [r3, #0]
   4e2e4:	469a      	mov	sl, r3
   4e2e6:	2c2f      	cmp	r4, #47	; 0x2f
   4e2e8:	f103 0301 	add.w	r3, r3, #1
   4e2ec:	d0f9      	beq.n	4e2e2 <follow_path+0x252>
   4e2ee:	2c5c      	cmp	r4, #92	; 0x5c
   4e2f0:	d0f7      	beq.n	4e2e2 <follow_path+0x252>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
   4e2f2:	2c1f      	cmp	r4, #31
   4e2f4:	bf8c      	ite	hi
   4e2f6:	2400      	movhi	r4, #0
   4e2f8:	2401      	movls	r4, #1
   4e2fa:	00a4      	lsls	r4, r4, #2
		wc = lfn[di - 1];
   4e2fc:	f1ab 0202 	sub.w	r2, fp, #2
	while (di) {					/* Snip off trailing spaces and dots if exist */
   4e300:	2f00      	cmp	r7, #0
   4e302:	f47f aef2 	bne.w	4e0ea <follow_path+0x5a>
	lfn[di] = 0;							/* LFN is created into the working buffer */
   4e306:	f04f 0300 	mov.w	r3, #0
   4e30a:	f82b 3017 	strh.w	r3, [fp, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
   4e30e:	2f00      	cmp	r7, #0
   4e310:	d0d7      	beq.n	4e2c2 <follow_path+0x232>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
   4e312:	2300      	movs	r3, #0
   4e314:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
   4e318:	4619      	mov	r1, r3
   4e31a:	2a20      	cmp	r2, #32
   4e31c:	f103 0301 	add.w	r3, r3, #1
   4e320:	d0f8      	beq.n	4e314 <follow_path+0x284>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
   4e322:	b909      	cbnz	r1, 4e328 <follow_path+0x298>
   4e324:	2a2e      	cmp	r2, #46	; 0x2e
   4e326:	d102      	bne.n	4e32e <follow_path+0x29e>
   4e328:	f044 0403 	orr.w	r4, r4, #3
   4e32c:	b2e4      	uxtb	r4, r4
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
   4e32e:	f1ab 0202 	sub.w	r2, fp, #2
   4e332:	f832 3017 	ldrh.w	r3, [r2, r7, lsl #1]
   4e336:	2b2e      	cmp	r3, #46	; 0x2e
   4e338:	d001      	beq.n	4e33e <follow_path+0x2ae>
   4e33a:	3f01      	subs	r7, #1
   4e33c:	d1f9      	bne.n	4e332 <follow_path+0x2a2>
__ssp_bos_icheck3(memset, void *, int)
   4e33e:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   4e342:	f04f 0900 	mov.w	r9, #0
   4e346:	646b      	str	r3, [r5, #68]	; 0x44
   4e348:	642b      	str	r3, [r5, #64]	; 0x40
   4e34a:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
   4e34e:	46c8      	mov	r8, r9
   4e350:	2308      	movs	r3, #8
		wc = lfn[si++];					/* Get an LFN character */
   4e352:	f83b 6011 	ldrh.w	r6, [fp, r1, lsl #1]
   4e356:	1c4a      	adds	r2, r1, #1
		if (wc == 0) break;				/* Break on end of the LFN */
   4e358:	2e00      	cmp	r6, #0
   4e35a:	f43f af71 	beq.w	4e240 <follow_path+0x1b0>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
   4e35e:	2e20      	cmp	r6, #32
   4e360:	d005      	beq.n	4e36e <follow_path+0x2de>
   4e362:	2e2e      	cmp	r6, #46	; 0x2e
   4e364:	f47f aeca 	bne.w	4e0fc <follow_path+0x6c>
   4e368:	42ba      	cmp	r2, r7
   4e36a:	f43f aecb 	beq.w	4e104 <follow_path+0x74>
			cf |= NS_LOSS | NS_LFN;
   4e36e:	f044 0403 	orr.w	r4, r4, #3
   4e372:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)wc;
   4e374:	4611      	mov	r1, r2
   4e376:	e7ec      	b.n	4e352 <follow_path+0x2c2>
   4e378:	000606b8 	.word	0x000606b8
   4e37c:	000606fc 	.word	0x000606fc
   4e380:	000606c1 	.word	0x000606c1

0004e384 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
   4e384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   4e386:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
   4e38a:	a803      	add	r0, sp, #12
{
   4e38c:	4614      	mov	r4, r2
	const TCHAR *rp = path;
   4e38e:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
   4e390:	f7ff f8b6 	bl	4d500 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
   4e394:	2800      	cmp	r0, #0
   4e396:	db15      	blt.n	4e3c4 <f_mount+0x40>
	cfs = FatFs[vol];					/* Pointer to fs object */
   4e398:	4a0b      	ldr	r2, [pc, #44]	; (4e3c8 <f_mount+0x44>)
   4e39a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]

	if (cfs) {
   4e39e:	b10b      	cbz	r3, 4e3a4 <f_mount+0x20>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
   4e3a0:	2100      	movs	r1, #0
   4e3a2:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
   4e3a4:	9b01      	ldr	r3, [sp, #4]
   4e3a6:	b10b      	cbz	r3, 4e3ac <f_mount+0x28>
		fs->fs_type = 0;				/* Clear new fs object */
   4e3a8:	2100      	movs	r1, #0
   4e3aa:	7019      	strb	r1, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
   4e3ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
   4e3b0:	b12c      	cbz	r4, 4e3be <f_mount+0x3a>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
   4e3b2:	2200      	movs	r2, #0
   4e3b4:	4668      	mov	r0, sp
   4e3b6:	a901      	add	r1, sp, #4
   4e3b8:	f7ff f964 	bl	4d684 <mount_volume>
   4e3bc:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
   4e3be:	4620      	mov	r0, r4
   4e3c0:	b004      	add	sp, #16
   4e3c2:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
   4e3c4:	240b      	movs	r4, #11
   4e3c6:	e7fa      	b.n	4e3be <f_mount+0x3a>
   4e3c8:	2001b874 	.word	0x2001b874

0004e3cc <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
   4e3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e3d0:	b099      	sub	sp, #100	; 0x64
   4e3d2:	9011      	str	r0, [sp, #68]	; 0x44
	DSTATUS ds;
	FRESULT fr;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
   4e3d4:	a811      	add	r0, sp, #68	; 0x44
{
   4e3d6:	460d      	mov	r5, r1
   4e3d8:	4614      	mov	r4, r2
   4e3da:	9306      	str	r3, [sp, #24]
	vol = get_ldnumber(&path);					/* Get target logical drive */
   4e3dc:	f7ff f890 	bl	4d500 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
   4e3e0:	2800      	cmp	r0, #0
   4e3e2:	f2c0 863d 	blt.w	4f060 <f_mkfs+0xc94>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
   4e3e6:	4bad      	ldr	r3, [pc, #692]	; (4e69c <f_mkfs+0x2d0>)
   4e3e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   4e3ec:	b10b      	cbz	r3, 4e3f2 <f_mkfs+0x26>
   4e3ee:	2200      	movs	r2, #0
   4e3f0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);			/* Physical drive */
   4e3f2:	b2c3      	uxtb	r3, r0
   4e3f4:	9300      	str	r3, [sp, #0]
	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
   4e3f6:	4baa      	ldr	r3, [pc, #680]	; (4e6a0 <f_mkfs+0x2d4>)

	/* Get physical drive status (sz_drv, sz_blk, ss) */
	ds = disk_initialize(pdrv);
   4e3f8:	9800      	ldr	r0, [sp, #0]
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
   4e3fa:	2d00      	cmp	r5, #0
   4e3fc:	bf08      	it	eq
   4e3fe:	461d      	moveq	r5, r3
	ds = disk_initialize(pdrv);
   4e400:	f000 fe4e 	bl	4f0a0 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
   4e404:	07c1      	lsls	r1, r0, #31
   4e406:	f100 862e 	bmi.w	4f066 <f_mkfs+0xc9a>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
   4e40a:	0742      	lsls	r2, r0, #29
   4e40c:	f100 862e 	bmi.w	4f06c <f_mkfs+0xca0>
	sz_blk = opt->align;
   4e410:	686b      	ldr	r3, [r5, #4]
   4e412:	9312      	str	r3, [sp, #72]	; 0x48
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
   4e414:	b93b      	cbnz	r3, 4e426 <f_mkfs+0x5a>
   4e416:	2103      	movs	r1, #3
   4e418:	9800      	ldr	r0, [sp, #0]
   4e41a:	aa12      	add	r2, sp, #72	; 0x48
   4e41c:	f000 fe64 	bl	4f0e8 <disk_ioctl>
   4e420:	b108      	cbz	r0, 4e426 <f_mkfs+0x5a>
   4e422:	2301      	movs	r3, #1
   4e424:	9312      	str	r3, [sp, #72]	; 0x48
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
   4e426:	9a12      	ldr	r2, [sp, #72]	; 0x48
   4e428:	1e53      	subs	r3, r2, #1
   4e42a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   4e42e:	d201      	bcs.n	4e434 <f_mkfs+0x68>
   4e430:	421a      	tst	r2, r3
   4e432:	d001      	beq.n	4e438 <f_mkfs+0x6c>
   4e434:	2301      	movs	r3, #1
   4e436:	9312      	str	r3, [sp, #72]	; 0x48
#else
	ss = FF_MAX_SS;
#endif
	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
   4e438:	786b      	ldrb	r3, [r5, #1]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
   4e43a:	f8d5 9008 	ldr.w	r9, [r5, #8]
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
   4e43e:	9302      	str	r3, [sp, #8]
   4e440:	3b01      	subs	r3, #1
   4e442:	2b01      	cmp	r3, #1
   4e444:	9b02      	ldr	r3, [sp, #8]
   4e446:	bf88      	it	hi
   4e448:	2301      	movhi	r3, #1
   4e44a:	9302      	str	r3, [sp, #8]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
   4e44c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   4e450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   4e454:	d22b      	bcs.n	4e4ae <f_mkfs+0xe2>
   4e456:	f019 0f0f 	tst.w	r9, #15
   4e45a:	bf18      	it	ne
   4e45c:	f44f 7900 	movne.w	r9, #512	; 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
   4e460:	68ee      	ldr	r6, [r5, #12]
   4e462:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
   4e466:	d825      	bhi.n	4e4b4 <f_mkfs+0xe8>
   4e468:	1e73      	subs	r3, r6, #1
   4e46a:	4233      	tst	r3, r6
   4e46c:	bf18      	it	ne
   4e46e:	2600      	movne	r6, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
   4e470:	9b06      	ldr	r3, [sp, #24]
   4e472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   4e476:	f0c0 85fc 	bcc.w	4f072 <f_mkfs+0xca6>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
   4e47a:	2c00      	cmp	r4, #0
   4e47c:	f000 85f9 	beq.w	4f072 <f_mkfs+0xca6>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
   4e480:	2300      	movs	r3, #0
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e482:	2101      	movs	r1, #1
   4e484:	9800      	ldr	r0, [sp, #0]
   4e486:	aa13      	add	r2, sp, #76	; 0x4c
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
   4e488:	782f      	ldrb	r7, [r5, #0]
	b_vol = sz_vol = 0;
   4e48a:	9313      	str	r3, [sp, #76]	; 0x4c
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e48c:	f000 fe2c 	bl	4f0e8 <disk_ioctl>
   4e490:	2800      	cmp	r0, #0
   4e492:	f040 818f 	bne.w	4e7b4 <f_mkfs+0x3e8>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
   4e496:	f017 0308 	ands.w	r3, r7, #8
   4e49a:	9309      	str	r3, [sp, #36]	; 0x24
   4e49c:	d10c      	bne.n	4e4b8 <f_mkfs+0xec>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
   4e49e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   4e4a0:	2b3f      	cmp	r3, #63	; 0x3f
   4e4a2:	d924      	bls.n	4e4ee <f_mkfs+0x122>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
   4e4a4:	3b3f      	subs	r3, #63	; 0x3f
   4e4a6:	9313      	str	r3, [sp, #76]	; 0x4c
   4e4a8:	233f      	movs	r3, #63	; 0x3f
	b_vol = sz_vol = 0;
   4e4aa:	9301      	str	r3, [sp, #4]
   4e4ac:	e005      	b.n	4e4ba <f_mkfs+0xee>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
   4e4ae:	f44f 7900 	mov.w	r9, #512	; 0x200
   4e4b2:	e7d5      	b.n	4e460 <f_mkfs+0x94>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
   4e4b4:	2600      	movs	r6, #0
   4e4b6:	e7db      	b.n	4e470 <f_mkfs+0xa4>
	b_vol = sz_vol = 0;
   4e4b8:	9001      	str	r0, [sp, #4]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
   4e4ba:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   4e4be:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
   4e4c2:	d912      	bls.n	4e4ea <f_mkfs+0x11e>
	sz_buf = len / ss;		/* Size of working buffer [sector] */
   4e4c4:	9b06      	ldr	r3, [sp, #24]
	sz_au /= ss;	/* Byte --> Sector */
   4e4c6:	0a75      	lsrs	r5, r6, #9
	sz_buf = len / ss;		/* Size of working buffer [sector] */
   4e4c8:	0a5b      	lsrs	r3, r3, #9
   4e4ca:	9304      	str	r3, [sp, #16]

	/* Now start to create an FAT volume at b_vol and sz_vol */

	do {	/* Pre-determine the FAT type */
		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
   4e4cc:	077b      	lsls	r3, r7, #29
   4e4ce:	d57e      	bpl.n	4e5ce <f_mkfs+0x202>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64MS or sz_au > 128S ? */
   4e4d0:	f007 0307 	and.w	r3, r7, #7
   4e4d4:	2b04      	cmp	r3, #4
   4e4d6:	d10c      	bne.n	4e4f2 <f_mkfs+0x126>
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
		fsty = FS_FAT16;
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e4d8:	f108 43a0 	add.w	r3, r8, #1342177280	; 0x50000000
   4e4dc:	f503 1304 	add.w	r3, r3, #2162688	; 0x210000
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
		DWORD szb_bit, szb_case, sum, nbit, clu, clen[3];
		WCHAR ch, si;
		UINT j, st;

		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
   4e4e0:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e4e4:	9302      	str	r3, [sp, #8]
		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
   4e4e6:	f080 811a 	bcs.w	4e71e <f_mkfs+0x352>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
   4e4ea:	200e      	movs	r0, #14
   4e4ec:	e163      	b.n	4e7b6 <f_mkfs+0x3ea>
	b_vol = sz_vol = 0;
   4e4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   4e4f0:	e7db      	b.n	4e4aa <f_mkfs+0xde>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64MS or sz_au > 128S ? */
   4e4f2:	f1b8 6f80 	cmp.w	r8, #67108864	; 0x4000000
   4e4f6:	d35e      	bcc.n	4e5b6 <f_mkfs+0x1ea>
#endif
		/* Determine FAT location, data location and number of clusters */
		if (sz_au == 0) {	/* AU auto-selection */
			sz_au = 8;
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
   4e4f8:	2d00      	cmp	r5, #0
   4e4fa:	bf08      	it	eq
   4e4fc:	f44f 7580 	moveq.w	r5, #256	; 0x100
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e500:	f108 43a0 	add.w	r3, r8, #1342177280	; 0x50000000
   4e504:	f503 1304 	add.w	r3, r3, #2162688	; 0x210000
   4e508:	9302      	str	r3, [sp, #8]
		}
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
   4e50a:	9b01      	ldr	r3, [sp, #4]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
   4e50c:	9912      	ldr	r1, [sp, #72]	; 0x48
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
   4e50e:	3320      	adds	r3, #32
   4e510:	9307      	str	r3, [sp, #28]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
   4e512:	fbb8 f3f5 	udiv	r3, r8, r5
   4e516:	009b      	lsls	r3, r3, #2
   4e518:	f203 2307 	addw	r3, r3, #519	; 0x207
   4e51c:	0a5a      	lsrs	r2, r3, #9
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
   4e51e:	9807      	ldr	r0, [sp, #28]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
   4e520:	920e      	str	r2, [sp, #56]	; 0x38
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
   4e522:	1e4a      	subs	r2, r1, #1
   4e524:	4402      	add	r2, r0
   4e526:	eb02 2353 	add.w	r3, r2, r3, lsr #9
   4e52a:	4249      	negs	r1, r1
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   4e52c:	9a01      	ldr	r2, [sp, #4]
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
   4e52e:	400b      	ands	r3, r1
   4e530:	9303      	str	r3, [sp, #12]
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   4e532:	1a9b      	subs	r3, r3, r2
   4e534:	ebb3 0f58 	cmp.w	r3, r8, lsr #1
   4e538:	930d      	str	r3, [sp, #52]	; 0x34
   4e53a:	d2d6      	bcs.n	4e4ea <f_mkfs+0x11e>
		n_clst = (DWORD)(sz_vol - (b_data - b_vol)) / sz_au;	/* Number of clusters */
   4e53c:	9b03      	ldr	r3, [sp, #12]
   4e53e:	4490      	add	r8, r2
   4e540:	eba8 0803 	sub.w	r8, r8, r3
   4e544:	fbb8 f3f5 	udiv	r3, r8, r5
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
   4e548:	f1a3 0210 	sub.w	r2, r3, #16
		n_clst = (DWORD)(sz_vol - (b_data - b_vol)) / sz_au;	/* Number of clusters */
   4e54c:	930c      	str	r3, [sp, #48]	; 0x30
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
   4e54e:	4b55      	ldr	r3, [pc, #340]	; (4e6a4 <f_mkfs+0x2d8>)
   4e550:	429a      	cmp	r2, r3
   4e552:	d8ca      	bhi.n	4e4ea <f_mkfs+0x11e>
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */

		/* Create a compressed up-case table */
		sect = b_data + sz_au * clen[0];	/* Table start sector */
		sum = 0;							/* Table checksum to be stored in the 82 entry */
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
   4e554:	f04f 0800 	mov.w	r8, #0
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
   4e558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
   4e55a:	ea4f 2945 	mov.w	r9, r5, lsl #9
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
   4e55e:	3307      	adds	r3, #7
   4e560:	08da      	lsrs	r2, r3, #3
   4e562:	920f      	str	r2, [sp, #60]	; 0x3c
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
   4e564:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   4e568:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
   4e56c:	fbb3 f3f9 	udiv	r3, r3, r9
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
   4e570:	4647      	mov	r7, r8
   4e572:	4646      	mov	r6, r8
   4e574:	46c2      	mov	sl, r8
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
   4e576:	9305      	str	r3, [sp, #20]
   4e578:	9210      	str	r2, [sp, #64]	; 0x40
   4e57a:	9315      	str	r3, [sp, #84]	; 0x54
		sect = b_data + sz_au * clen[0];	/* Table start sector */
   4e57c:	9a05      	ldr	r2, [sp, #20]
   4e57e:	9b03      	ldr	r3, [sp, #12]
		sum = 0;							/* Table checksum to be stored in the 82 entry */
   4e580:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
		sect = b_data + sz_au * clen[0];	/* Table start sector */
   4e584:	fb05 3302 	mla	r3, r5, r2, r3
   4e588:	930a      	str	r3, [sp, #40]	; 0x28
				st = 0;
			}
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
			i += 2; szb_case += 2;
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4e58a:	9b06      	ldr	r3, [sp, #24]
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
   4e58c:	f8cd 8020 	str.w	r8, [sp, #32]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4e590:	f423 7bff 	bic.w	fp, r3, #510	; 0x1fe
   4e594:	f02b 0b01 	bic.w	fp, fp, #1
			switch (st) {
   4e598:	f1b8 0f00 	cmp.w	r8, #0
   4e59c:	f000 80ce 	beq.w	4e73c <f_mkfs+0x370>
   4e5a0:	f1b8 0f01 	cmp.w	r8, #1
   4e5a4:	f000 80dc 	beq.w	4e760 <f_mkfs+0x394>
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
   4e5a8:	fa16 f687 	uxtah	r6, r6, r7
				st = 0;
   4e5ac:	f04f 0800 	mov.w	r8, #0
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
   4e5b0:	b2b8      	uxth	r0, r7
   4e5b2:	b2b6      	uxth	r6, r6
				st = 0;
   4e5b4:	e0dd      	b.n	4e772 <f_mkfs+0x3a6>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64MS or sz_au > 128S ? */
   4e5b6:	f5b6 3f81 	cmp.w	r6, #66048	; 0x10200
   4e5ba:	d30c      	bcc.n	4e5d6 <f_mkfs+0x20a>
		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
   4e5bc:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
   4e5c0:	d393      	bcc.n	4e4ea <f_mkfs+0x11e>
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e5c2:	f108 43a0 	add.w	r3, r8, #1342177280	; 0x50000000
   4e5c6:	f503 1304 	add.w	r3, r3, #2162688	; 0x210000
   4e5ca:	9302      	str	r3, [sp, #8]
   4e5cc:	e79d      	b.n	4e50a <f_mkfs+0x13e>
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
   4e5ce:	f5b6 3f81 	cmp.w	r6, #66048	; 0x10200
   4e5d2:	bf28      	it	cs
   4e5d4:	2580      	movcs	r5, #128	; 0x80
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
   4e5d6:	f017 0202 	ands.w	r2, r7, #2
   4e5da:	f007 0301 	and.w	r3, r7, #1
   4e5de:	9208      	str	r2, [sp, #32]
   4e5e0:	d064      	beq.n	4e6ac <f_mkfs+0x2e0>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
   4e5e2:	2b00      	cmp	r3, #0
   4e5e4:	d165      	bne.n	4e6b2 <f_mkfs+0x2e6>
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e5e6:	9912      	ldr	r1, [sp, #72]	; 0x48
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e5e8:	f108 4ba0 	add.w	fp, r8, #1342177280	; 0x50000000
   4e5ec:	1e4b      	subs	r3, r1, #1
   4e5ee:	930b      	str	r3, [sp, #44]	; 0x2c
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e5f0:	424b      	negs	r3, r1
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e5f2:	f50b 1b04 	add.w	fp, fp, #2162688	; 0x210000
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
   4e5f6:	f3c9 1e16 	ubfx	lr, r9, #4, #23
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e5fa:	930a      	str	r3, [sp, #40]	; 0x28
				if (pau == 0) {	/* AU auto-selection */
   4e5fc:	2d00      	cmp	r5, #0
   4e5fe:	f000 82f2 	beq.w	4ebe6 <f_mkfs+0x81a>
			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
			if (fsty == FS_FAT32) {
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   4e602:	462a      	mov	r2, r5
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
   4e604:	fbb8 f3f5 	udiv	r3, r8, r5
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
   4e608:	0098      	lsls	r0, r3, #2
   4e60a:	f200 2007 	addw	r0, r0, #519	; 0x207
   4e60e:	0a41      	lsrs	r1, r0, #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
   4e610:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
   4e614:	4824      	ldr	r0, [pc, #144]	; (4e6a8 <f_mkfs+0x2dc>)
   4e616:	3bf6      	subs	r3, #246	; 0xf6
   4e618:	4283      	cmp	r3, r0
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
   4e61a:	9103      	str	r1, [sp, #12]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
   4e61c:	f63f af65 	bhi.w	4e4ea <f_mkfs+0x11e>
				sz_dir = 0;		/* No static directory */
   4e620:	2300      	movs	r3, #0
				sz_rsv = 32;	/* Number of reserved sectors */
   4e622:	f04f 0a20 	mov.w	sl, #32
   4e626:	2603      	movs	r6, #3
				sz_dir = 0;		/* No static directory */
   4e628:	9307      	str	r3, [sp, #28]
			b_fat = b_vol + sz_rsv;						/* FAT base */
   4e62a:	9b01      	ldr	r3, [sp, #4]
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
   4e62c:	2e03      	cmp	r6, #3
			b_fat = b_vol + sz_rsv;						/* FAT base */
   4e62e:	eb03 070a 	add.w	r7, r3, sl
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
   4e632:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   4e636:	fb01 7003 	mla	r0, r1, r3, r7
   4e63a:	9b07      	ldr	r3, [sp, #28]
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e63c:	990a      	ldr	r1, [sp, #40]	; 0x28
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
   4e63e:	4418      	add	r0, r3
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   4e642:	4403      	add	r3, r0
   4e644:	ea03 0301 	and.w	r3, r3, r1
   4e648:	eba3 0300 	sub.w	r3, r3, r0
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
   4e64c:	f040 82e0 	bne.w	4ec10 <f_mkfs+0x844>
				sz_rsv += n; b_fat += n;
   4e650:	449a      	add	sl, r3
   4e652:	441f      	add	r7, r3
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   4e654:	9b01      	ldr	r3, [sp, #4]
   4e656:	ebc3 1305 	rsb	r3, r3, r5, lsl #4
   4e65a:	4403      	add	r3, r0
   4e65c:	4598      	cmp	r8, r3
   4e65e:	f4ff af44 	bcc.w	4e4ea <f_mkfs+0x11e>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
   4e662:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   4e666:	9b07      	ldr	r3, [sp, #28]
			if (fsty == FS_FAT32) {
   4e668:	2e03      	cmp	r6, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
   4e66a:	eba8 0303 	sub.w	r3, r8, r3
   4e66e:	eba3 030a 	sub.w	r3, r3, sl
   4e672:	fb00 3311 	mls	r3, r0, r1, r3
   4e676:	fbb3 f3f5 	udiv	r3, r3, r5
   4e67a:	9305      	str	r3, [sp, #20]
			if (fsty == FS_FAT32) {
   4e67c:	f040 82db 	bne.w	4ec36 <f_mkfs+0x86a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
   4e680:	f64f 73f5 	movw	r3, #65525	; 0xfff5
   4e684:	9905      	ldr	r1, [sp, #20]
   4e686:	4299      	cmp	r1, r3
   4e688:	f200 8302 	bhi.w	4ec90 <f_mkfs+0x8c4>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   4e68c:	2a00      	cmp	r2, #0
   4e68e:	f47f af2c 	bne.w	4e4ea <f_mkfs+0x11e>
   4e692:	2d01      	cmp	r5, #1
   4e694:	f67f af29 	bls.w	4e4ea <f_mkfs+0x11e>
   4e698:	086d      	lsrs	r5, r5, #1
   4e69a:	e7b2      	b.n	4e602 <f_mkfs+0x236>
   4e69c:	2001b874 	.word	0x2001b874
   4e6a0:	0005c4e4 	.word	0x0005c4e4
   4e6a4:	7fffffed 	.word	0x7fffffed
   4e6a8:	0ffeffff 	.word	0x0ffeffff
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
   4e6ac:	2b00      	cmp	r3, #0
   4e6ae:	f000 84e3 	beq.w	4f078 <f_mkfs+0xcac>
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e6b2:	9912      	ldr	r1, [sp, #72]	; 0x48
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e6b4:	f108 4ba0 	add.w	fp, r8, #1342177280	; 0x50000000
   4e6b8:	1e4b      	subs	r3, r1, #1
   4e6ba:	930b      	str	r3, [sp, #44]	; 0x2c
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e6bc:	424b      	negs	r3, r1
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e6be:	f50b 1b04 	add.w	fp, fp, #2162688	; 0x210000
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
   4e6c2:	f3c9 1e16 	ubfx	lr, r9, #4, #23
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e6c6:	930a      	str	r3, [sp, #40]	; 0x28
				if (pau == 0) {	/* au auto-selection */
   4e6c8:	2d00      	cmp	r5, #0
   4e6ca:	f040 829f 	bne.w	4ec0c <f_mkfs+0x840>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   4e6ce:	2301      	movs	r3, #1
   4e6d0:	4878      	ldr	r0, [pc, #480]	; (4e8b4 <f_mkfs+0x4e8>)
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
   4e6d2:	ea4f 3618 	mov.w	r6, r8, lsr #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   4e6d6:	f830 2b02 	ldrh.w	r2, [r0], #2
   4e6da:	b112      	cbz	r2, 4e6e2 <f_mkfs+0x316>
   4e6dc:	42b2      	cmp	r2, r6
   4e6de:	f240 8293 	bls.w	4ec08 <f_mkfs+0x83c>
				n_clst = (DWORD)sz_vol / pau;
   4e6e2:	fbb8 f2f3 	udiv	r2, r8, r3
				if (n_clst > MAX_FAT12) {
   4e6e6:	f640 70f5 	movw	r0, #4085	; 0xff5
   4e6ea:	4282      	cmp	r2, r0
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   4e6ec:	bf9b      	ittet	ls
   4e6ee:	eb02 0242 	addls.w	r2, r2, r2, lsl #1
   4e6f2:	3201      	addls	r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
   4e6f4:	3202      	addhi	r2, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   4e6f6:	0852      	lsrls	r2, r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
   4e6f8:	bf8c      	ite	hi
   4e6fa:	0052      	lslhi	r2, r2, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   4e6fc:	3203      	addls	r2, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   4e6fe:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   4e702:	ea4f 2252 	mov.w	r2, r2, lsr #9
   4e706:	9203      	str	r2, [sp, #12]
   4e708:	bf88      	it	hi
   4e70a:	2602      	movhi	r6, #2
   4e70c:	462a      	mov	r2, r5
					fsty = FS_FAT12;
   4e70e:	bf98      	it	ls
   4e710:	2601      	movls	r6, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   4e712:	461d      	mov	r5, r3
				sz_rsv = 1;						/* Number of reserved sectors */
   4e714:	f04f 0a01 	mov.w	sl, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   4e718:	f8cd e01c 	str.w	lr, [sp, #28]
   4e71c:	e785      	b.n	4e62a <f_mkfs+0x25e>
		if (sz_au == 0) {	/* AU auto-selection */
   4e71e:	2d00      	cmp	r5, #0
   4e720:	f47f aef3 	bne.w	4e50a <f_mkfs+0x13e>
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
   4e724:	f5b8 2f00 	cmp.w	r8, #524288	; 0x80000
   4e728:	d306      	bcc.n	4e738 <f_mkfs+0x36c>
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
   4e72a:	f1b8 6f80 	cmp.w	r8, #67108864	; 0x4000000
   4e72e:	bf34      	ite	cc
   4e730:	2540      	movcc	r5, #64	; 0x40
   4e732:	f44f 7580 	movcs.w	r5, #256	; 0x100
   4e736:	e6e8      	b.n	4e50a <f_mkfs+0x13e>
			sz_au = 8;
   4e738:	2508      	movs	r5, #8
   4e73a:	e6e6      	b.n	4e50a <f_mkfs+0x13e>
				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
   4e73c:	4630      	mov	r0, r6
   4e73e:	f000 fd33 	bl	4f1a8 <ff_wtoupper>
   4e742:	b280      	uxth	r0, r0
					si++; break;		/* Store the up-case char if exist */
   4e744:	1c72      	adds	r2, r6, #1
				if (ch != si) {
   4e746:	4286      	cmp	r6, r0
					si++; break;		/* Store the up-case char if exist */
   4e748:	b292      	uxth	r2, r2
				if (ch != si) {
   4e74a:	d13e      	bne.n	4e7ca <f_mkfs+0x3fe>
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
   4e74c:	2701      	movs	r7, #1
   4e74e:	eb06 0807 	add.w	r8, r6, r7
   4e752:	fa1f f888 	uxth.w	r8, r8
   4e756:	f1b8 0f00 	cmp.w	r8, #0
   4e75a:	d12f      	bne.n	4e7bc <f_mkfs+0x3f0>
				if (j >= 128) {
   4e75c:	2f7f      	cmp	r7, #127	; 0x7f
   4e75e:	d836      	bhi.n	4e7ce <f_mkfs+0x402>
				if (--j == 0) st = 0;
   4e760:	3f01      	subs	r7, #1
   4e762:	bf14      	ite	ne
   4e764:	f04f 0801 	movne.w	r8, #1
   4e768:	f04f 0800 	moveq.w	r8, #0
				ch = si++;		/* Fill the short run */
   4e76c:	1c72      	adds	r2, r6, #1
				if (--j == 0) st = 0;
   4e76e:	4630      	mov	r0, r6
				ch = si++;		/* Fill the short run */
   4e770:	b296      	uxth	r6, r2
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4e772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
   4e774:	b2c2      	uxtb	r2, r0
   4e776:	f804 200a 	strb.w	r2, [r4, sl]
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
   4e77a:	f3c0 200f 	ubfx	r0, r0, #8, #16
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4e77e:	eb02 0273 	add.w	r2, r2, r3, ror #1
   4e782:	eb00 0372 	add.w	r3, r0, r2, ror #1
   4e786:	930b      	str	r3, [sp, #44]	; 0x2c
			i += 2; szb_case += 2;
   4e788:	9b08      	ldr	r3, [sp, #32]
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
   4e78a:	eb04 010a 	add.w	r1, r4, sl
			i += 2; szb_case += 2;
   4e78e:	3302      	adds	r3, #2
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
   4e790:	7048      	strb	r0, [r1, #1]
			i += 2; szb_case += 2;
   4e792:	9308      	str	r3, [sp, #32]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4e794:	b11e      	cbz	r6, 4e79e <f_mkfs+0x3d2>
			i += 2; szb_case += 2;
   4e796:	f10a 0002 	add.w	r0, sl, #2
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4e79a:	4558      	cmp	r0, fp
   4e79c:	d120      	bne.n	4e7e0 <f_mkfs+0x414>
				n = (i + ss - 1) / ss;
   4e79e:	f20a 2301 	addw	r3, sl, #513	; 0x201
   4e7a2:	ea4f 2a53 	mov.w	sl, r3, lsr #9
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e7a6:	4653      	mov	r3, sl
   4e7a8:	4621      	mov	r1, r4
   4e7aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   4e7ac:	9800      	ldr	r0, [sp, #0]
   4e7ae:	f000 fc8f 	bl	4f0d0 <disk_write>
   4e7b2:	b188      	cbz	r0, 4e7d8 <f_mkfs+0x40c>
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   4e7b4:	2001      	movs	r0, #1
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);

	LEAVE_MKFS(FR_OK);
}
   4e7b6:	b019      	add	sp, #100	; 0x64
   4e7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
   4e7bc:	4640      	mov	r0, r8
   4e7be:	f000 fcf3 	bl	4f1a8 <ff_wtoupper>
   4e7c2:	4580      	cmp	r8, r0
   4e7c4:	d1ca      	bne.n	4e75c <f_mkfs+0x390>
   4e7c6:	3701      	adds	r7, #1
   4e7c8:	e7c1      	b.n	4e74e <f_mkfs+0x382>
					si++; break;		/* Store the up-case char if exist */
   4e7ca:	4616      	mov	r6, r2
   4e7cc:	e7d1      	b.n	4e772 <f_mkfs+0x3a6>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 chars */
   4e7ce:	f04f 0802 	mov.w	r8, #2
   4e7d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   4e7d6:	e7cc      	b.n	4e772 <f_mkfs+0x3a6>
		} while (si);
   4e7d8:	b126      	cbz	r6, 4e7e4 <f_mkfs+0x418>
				sect += n; i = 0;
   4e7da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   4e7dc:	4453      	add	r3, sl
   4e7de:	930a      	str	r3, [sp, #40]	; 0x28
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
   4e7e0:	4682      	mov	sl, r0
   4e7e2:	e6d9      	b.n	4e598 <f_mkfs+0x1cc>
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
   4e7e4:	9a08      	ldr	r2, [sp, #32]
   4e7e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
		clen[2] = 1;	/* Number of root dir clusters */
   4e7e8:	f04f 0a01 	mov.w	sl, #1
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
   4e7ec:	4413      	add	r3, r2
   4e7ee:	fbb3 f3f9 	udiv	r3, r3, r9
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
   4e7f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
   4e7f4:	9316      	str	r3, [sp, #88]	; 0x58
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
   4e7f6:	f202 16ff 	addw	r6, r2, #511	; 0x1ff
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
   4e7fa:	9a05      	ldr	r2, [sp, #20]
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
   4e7fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
   4e800:	18d3      	adds	r3, r2, r3
   4e802:	930a      	str	r3, [sp, #40]	; 0x28
   4e804:	eb03 0b0a 	add.w	fp, r3, sl
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
   4e808:	9b06      	ldr	r3, [sp, #24]
		clen[2] = 1;	/* Number of root dir clusters */
   4e80a:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
   4e80e:	f423 78ff 	bic.w	r8, r3, #510	; 0x1fe
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
   4e812:	0a76      	lsrs	r6, r6, #9
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
   4e814:	f028 0801 	bic.w	r8, r8, #1
   4e818:	4642      	mov	r2, r8
   4e81a:	2100      	movs	r1, #0
   4e81c:	4620      	mov	r0, r4
   4e81e:	f00c fb56 	bl	5aece <memset>
   4e822:	465f      	mov	r7, fp
   4e824:	ebab 0307 	sub.w	r3, fp, r7
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
   4e828:	b127      	cbz	r7, 4e834 <f_mkfs+0x468>
   4e82a:	ebb8 0fd3 	cmp.w	r8, r3, lsr #3
   4e82e:	ea4f 02d3 	mov.w	r2, r3, lsr #3
   4e832:	d834      	bhi.n	4e89e <f_mkfs+0x4d2>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
   4e834:	9b04      	ldr	r3, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e836:	464a      	mov	r2, r9
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
   4e838:	42b3      	cmp	r3, r6
   4e83a:	bf28      	it	cs
   4e83c:	4633      	movcs	r3, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e83e:	4621      	mov	r1, r4
   4e840:	9800      	ldr	r0, [sp, #0]
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
   4e842:	469b      	mov	fp, r3
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e844:	f000 fc44 	bl	4f0d0 <disk_write>
   4e848:	2800      	cmp	r0, #0
   4e84a:	d1b3      	bne.n	4e7b4 <f_mkfs+0x3e8>
		} while (nsect);
   4e84c:	ebb6 060b 	subs.w	r6, r6, fp
			sect += n; nsect -= n;
   4e850:	44d9      	add	r9, fp
		} while (nsect);
   4e852:	d122      	bne.n	4e89a <f_mkfs+0x4ce>
		j = nbit = clu = 0;
   4e854:	46b3      	mov	fp, r6
   4e856:	46b2      	mov	sl, r6
	*ptr++ = (BYTE)val; val >>= 8;
   4e858:	f04f 09ff 	mov.w	r9, #255	; 0xff
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
   4e85c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   4e85e:	4642      	mov	r2, r8
   4e860:	2100      	movs	r1, #0
   4e862:	4620      	mov	r0, r4
   4e864:	f00c fb33 	bl	5aece <memset>
			if (clu == 0) {	/* Initialize FAT [0] and FAT[1] */
   4e868:	f1bb 0f00 	cmp.w	fp, #0
   4e86c:	d120      	bne.n	4e8b0 <f_mkfs+0x4e4>
	*ptr++ = (BYTE)val; val >>= 8;
   4e86e:	f06f 0307 	mvn.w	r3, #7
				st_dword(buf + i, 0xFFFFFFFF); i += 4; clu++;
   4e872:	f04f 0b02 	mov.w	fp, #2
   4e876:	2208      	movs	r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
   4e878:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   4e87a:	f884 9001 	strb.w	r9, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
   4e87e:	f884 9002 	strb.w	r9, [r4, #2]
	*ptr++ = (BYTE)val;
   4e882:	f884 9003 	strb.w	r9, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   4e886:	f884 9004 	strb.w	r9, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   4e88a:	f884 9005 	strb.w	r9, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
   4e88e:	f884 9006 	strb.w	r9, [r4, #6]
	*ptr++ = (BYTE)val;
   4e892:	f884 9007 	strb.w	r9, [r4, #7]
				st_dword(buf + i, 0xFFFFFFFF); i += 4; clu++;
   4e896:	4633      	mov	r3, r6
   4e898:	e02d      	b.n	4e8f6 <f_mkfs+0x52a>
   4e89a:	46bb      	mov	fp, r7
   4e89c:	e7bc      	b.n	4e818 <f_mkfs+0x44c>
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
   4e89e:	5ca1      	ldrb	r1, [r4, r2]
   4e8a0:	f003 0307 	and.w	r3, r3, #7
   4e8a4:	fa0a f303 	lsl.w	r3, sl, r3
   4e8a8:	430b      	orrs	r3, r1
   4e8aa:	54a3      	strb	r3, [r4, r2]
   4e8ac:	3f01      	subs	r7, #1
   4e8ae:	e7b9      	b.n	4e824 <f_mkfs+0x458>
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
   4e8b0:	2200      	movs	r2, #0
   4e8b2:	e7f0      	b.n	4e896 <f_mkfs+0x4ca>
   4e8b4:	0005c8e0 	.word	0x0005c8e0
				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
   4e8b8:	2e02      	cmp	r6, #2
   4e8ba:	d821      	bhi.n	4e900 <f_mkfs+0x534>
   4e8bc:	a918      	add	r1, sp, #96	; 0x60
   4e8be:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   4e8c2:	f853 ac0c 	ldr.w	sl, [r3, #-12]
   4e8c6:	3601      	adds	r6, #1
			} while (nbit != 0 && i < sz_buf * ss);
   4e8c8:	f1ba 0f00 	cmp.w	sl, #0
   4e8cc:	d018      	beq.n	4e900 <f_mkfs+0x534>
   4e8ce:	4590      	cmp	r8, r2
   4e8d0:	d916      	bls.n	4e900 <f_mkfs+0x534>
				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
   4e8d2:	4633      	mov	r3, r6
					st_dword(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
   4e8d4:	f1ba 0f01 	cmp.w	sl, #1
   4e8d8:	f10b 0b01 	add.w	fp, fp, #1
   4e8dc:	eb04 0002 	add.w	r0, r4, r2
   4e8e0:	bf14      	ite	ne
   4e8e2:	4659      	movne	r1, fp
   4e8e4:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   4e8e8:	9306      	str	r3, [sp, #24]
   4e8ea:	f009 f90c 	bl	57b06 <st_dword>
					i += 4; clu++; nbit--;
   4e8ee:	9b06      	ldr	r3, [sp, #24]
   4e8f0:	3204      	adds	r2, #4
   4e8f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				while (nbit != 0 && i < sz_buf * ss) {	/* Create a chain */
   4e8f6:	f1ba 0f00 	cmp.w	sl, #0
   4e8fa:	d0dd      	beq.n	4e8b8 <f_mkfs+0x4ec>
   4e8fc:	4590      	cmp	r8, r2
   4e8fe:	d8e9      	bhi.n	4e8d4 <f_mkfs+0x508>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
   4e900:	9b04      	ldr	r3, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e902:	4621      	mov	r1, r4
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
   4e904:	42bb      	cmp	r3, r7
   4e906:	bf28      	it	cs
   4e908:	463b      	movcs	r3, r7
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e90a:	9a07      	ldr	r2, [sp, #28]
   4e90c:	9800      	ldr	r0, [sp, #0]
   4e90e:	9306      	str	r3, [sp, #24]
   4e910:	f000 fbde 	bl	4f0d0 <disk_write>
   4e914:	2800      	cmp	r0, #0
   4e916:	f47f af4d 	bne.w	4e7b4 <f_mkfs+0x3e8>
			sect += n; nsect -= n;
   4e91a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   4e91e:	441a      	add	r2, r3
		} while (nsect);
   4e920:	1aff      	subs	r7, r7, r3
			sect += n; nsect -= n;
   4e922:	9207      	str	r2, [sp, #28]
		} while (nsect);
   4e924:	d19b      	bne.n	4e85e <f_mkfs+0x492>
   4e926:	4639      	mov	r1, r7
   4e928:	4642      	mov	r2, r8
   4e92a:	4620      	mov	r0, r4
   4e92c:	f00c facf 	bl	5aece <memset>
		buf[SZDIRE * 0 + 0] = ET_VLABEL;				/* Volume label entry (no label) */
   4e930:	2383      	movs	r3, #131	; 0x83
   4e932:	7023      	strb	r3, [r4, #0]
		buf[SZDIRE * 1 + 0] = ET_BITMAP;				/* Bitmap entry */
   4e934:	2381      	movs	r3, #129	; 0x81
   4e936:	f884 3020 	strb.w	r3, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
   4e93a:	2302      	movs	r3, #2
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
   4e93c:	990f      	ldr	r1, [sp, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
   4e93e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
   4e942:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
   4e946:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
   4e94a:	f884 7037 	strb.w	r7, [r4, #55]	; 0x37
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
   4e94e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   4e952:	f009 f8d8 	bl	57b06 <st_dword>
		buf[SZDIRE * 2 + 0] = ET_UPCASE;				/* Up-case table entry */
   4e956:	2382      	movs	r3, #130	; 0x82
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
   4e958:	462f      	mov	r7, r5
		st_dword(buf + SZDIRE * 2 + 4, sum);			/*  sum */
   4e95a:	990b      	ldr	r1, [sp, #44]	; 0x2c
		buf[SZDIRE * 2 + 0] = ET_UPCASE;				/* Up-case table entry */
   4e95c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		st_dword(buf + SZDIRE * 2 + 4, sum);			/*  sum */
   4e960:	f104 0044 	add.w	r0, r4, #68	; 0x44
   4e964:	f009 f8cf 	bl	57b06 <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + clen[0]);	/*  cluster */
   4e968:	9905      	ldr	r1, [sp, #20]
   4e96a:	f104 0354 	add.w	r3, r4, #84	; 0x54
   4e96e:	4618      	mov	r0, r3
   4e970:	3102      	adds	r1, #2
   4e972:	9306      	str	r3, [sp, #24]
   4e974:	f009 f8c7 	bl	57b06 <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);		/*  size */
   4e978:	f104 0358 	add.w	r3, r4, #88	; 0x58
   4e97c:	4618      	mov	r0, r3
   4e97e:	9908      	ldr	r1, [sp, #32]
   4e980:	9305      	str	r3, [sp, #20]
   4e982:	f009 f8c0 	bl	57b06 <st_dword>
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
   4e986:	9b03      	ldr	r3, [sp, #12]
   4e988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   4e98a:	fb05 3602 	mla	r6, r5, r2, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4e98e:	9b04      	ldr	r3, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e990:	4621      	mov	r1, r4
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4e992:	42bb      	cmp	r3, r7
   4e994:	bf28      	it	cs
   4e996:	463b      	movcs	r3, r7
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e998:	4632      	mov	r2, r6
   4e99a:	9800      	ldr	r0, [sp, #0]
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4e99c:	4698      	mov	r8, r3
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e99e:	f000 fb97 	bl	4f0d0 <disk_write>
   4e9a2:	4601      	mov	r1, r0
   4e9a4:	2800      	cmp	r0, #0
   4e9a6:	f47f af05 	bne.w	4e7b4 <f_mkfs+0x3e8>
   4e9aa:	f44f 7200 	mov.w	r2, #512	; 0x200
   4e9ae:	4620      	mov	r0, r4
   4e9b0:	f00c fa8d 	bl	5aece <memset>
		} while (nsect);
   4e9b4:	ebb7 0708 	subs.w	r7, r7, r8
			sect += n; nsect -= n;
   4e9b8:	4446      	add	r6, r8
		} while (nsect);
   4e9ba:	d1e8      	bne.n	4e98e <f_mkfs+0x5c2>
   4e9bc:	2302      	movs	r3, #2
		sect = b_vol;
   4e9be:	f8dd 9004 	ldr.w	r9, [sp, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4e9c2:	f8df b520 	ldr.w	fp, [pc, #1312]	; 4eee4 <f_mkfs+0xb18>
   4e9c6:	9307      	str	r3, [sp, #28]
__ssp_bos_icheck3(memset, void *, int)
   4e9c8:	2100      	movs	r1, #0
   4e9ca:	f44f 7200 	mov.w	r2, #512	; 0x200
   4e9ce:	4620      	mov	r0, r4
   4e9d0:	f00c fa7d 	bl	5aece <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4e9d4:	f8db 3000 	ldr.w	r3, [fp]
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
   4e9d8:	9a01      	ldr	r2, [sp, #4]
   4e9da:	6023      	str	r3, [r4, #0]
   4e9dc:	f8db 3004 	ldr.w	r3, [fp, #4]
   4e9e0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   4e9e4:	6063      	str	r3, [r4, #4]
   4e9e6:	f8bb 3008 	ldrh.w	r3, [fp, #8]
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
   4e9ea:	462e      	mov	r6, r5
   4e9ec:	8123      	strh	r3, [r4, #8]
   4e9ee:	f89b 300a 	ldrb.w	r3, [fp, #10]
   4e9f2:	72a3      	strb	r3, [r4, #10]
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
   4e9f4:	2300      	movs	r3, #0
   4e9f6:	f009 f88e 	bl	57b16 <st_qword>
			st_qword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
   4e9fa:	2300      	movs	r3, #0
   4e9fc:	f104 0048 	add.w	r0, r4, #72	; 0x48
   4ea00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   4ea02:	f009 f888 	bl	57b16 <st_qword>
	*ptr++ = (BYTE)val; val >>= 8;
   4ea06:	2320      	movs	r3, #32
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
   4ea08:	990e      	ldr	r1, [sp, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
   4ea0a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
   4ea0e:	9806      	ldr	r0, [sp, #24]
   4ea10:	f009 f879 	bl	57b06 <st_dword>
			st_dword(buf + BPB_DataOfsEx, (DWORD)(b_data - b_vol));	/* Data offset [sector] */
   4ea14:	990d      	ldr	r1, [sp, #52]	; 0x34
   4ea16:	9805      	ldr	r0, [sp, #20]
   4ea18:	f009 f875 	bl	57b06 <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
   4ea1c:	990c      	ldr	r1, [sp, #48]	; 0x30
   4ea1e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   4ea22:	f009 f870 	bl	57b06 <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + clen[0] + clen[1]);	/* Root dir cluster # */
   4ea26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   4ea28:	f104 0060 	add.w	r0, r4, #96	; 0x60
   4ea2c:	1c99      	adds	r1, r3, #2
   4ea2e:	f009 f86a 	bl	57b06 <st_dword>
			st_dword(buf + BPB_VolIDEx, vsn);						/* VSN */
   4ea32:	9902      	ldr	r1, [sp, #8]
   4ea34:	f104 0064 	add.w	r0, r4, #100	; 0x64
   4ea38:	f009 f865 	bl	57b06 <st_dword>
	*ptr++ = (BYTE)val;
   4ea3c:	f04f 0301 	mov.w	r3, #1
   4ea40:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
   4ea44:	2309      	movs	r3, #9
   4ea46:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
   4ea4a:	0876      	lsrs	r6, r6, #1
   4ea4c:	d11e      	bne.n	4ea8c <f_mkfs+0x6c0>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
   4ea4e:	f04f 0301 	mov.w	r3, #1
   4ea52:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
   4ea56:	2380      	movs	r3, #128	; 0x80
   4ea58:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
	*ptr++ = (BYTE)val; val >>= 8;
   4ea5c:	23eb      	movs	r3, #235	; 0xeb
   4ea5e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	*ptr++ = (BYTE)val;
   4ea62:	23fe      	movs	r3, #254	; 0xfe
   4ea64:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
	*ptr++ = (BYTE)val; val >>= 8;
   4ea68:	2355      	movs	r3, #85	; 0x55
   4ea6a:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   4ea6e:	23aa      	movs	r3, #170	; 0xaa
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4ea70:	4637      	mov	r7, r6
   4ea72:	46b0      	mov	r8, r6
	*ptr++ = (BYTE)val;
   4ea74:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
   4ea78:	f1a8 036a 	sub.w	r3, r8, #106	; 0x6a
   4ea7c:	2b01      	cmp	r3, #1
   4ea7e:	d80b      	bhi.n	4ea98 <f_mkfs+0x6cc>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4ea80:	f108 0801 	add.w	r8, r8, #1
   4ea84:	e7f8      	b.n	4ea78 <f_mkfs+0x6ac>
   4ea86:	2301      	movs	r3, #1
   4ea88:	9307      	str	r3, [sp, #28]
   4ea8a:	e79d      	b.n	4e9c8 <f_mkfs+0x5fc>
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
   4ea8c:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
   4ea90:	3301      	adds	r3, #1
   4ea92:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
   4ea96:	e7d8      	b.n	4ea4a <f_mkfs+0x67e>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4ea98:	f1b8 0f70 	cmp.w	r8, #112	; 0x70
   4ea9c:	bf08      	it	eq
   4ea9e:	f04f 0871 	moveq.w	r8, #113	; 0x71
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4eaa2:	f814 3008 	ldrb.w	r3, [r4, r8]
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4eaa6:	f108 0801 	add.w	r8, r8, #1
   4eaaa:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4eaae:	eb03 0777 	add.w	r7, r3, r7, ror #1
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4eab2:	d1e1      	bne.n	4ea78 <f_mkfs+0x6ac>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eab4:	4621      	mov	r1, r4
   4eab6:	2301      	movs	r3, #1
   4eab8:	464a      	mov	r2, r9
   4eaba:	9800      	ldr	r0, [sp, #0]
   4eabc:	f000 fb08 	bl	4f0d0 <disk_write>
   4eac0:	f109 0a01 	add.w	sl, r9, #1
   4eac4:	4601      	mov	r1, r0
   4eac6:	2800      	cmp	r0, #0
   4eac8:	f47f ae74 	bne.w	4e7b4 <f_mkfs+0x3e8>
__ssp_bos_icheck3(memset, void *, int)
   4eacc:	4642      	mov	r2, r8
   4eace:	4620      	mov	r0, r4
   4ead0:	f00c f9fd 	bl	5aece <memset>
	*ptr++ = (BYTE)val; val >>= 8;
   4ead4:	2355      	movs	r3, #85	; 0x55
   4ead6:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   4eada:	23aa      	movs	r3, #170	; 0xaa
   4eadc:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
			for (j = 1; j < 9; j++) {
   4eae0:	1e63      	subs	r3, r4, #1
   4eae2:	9304      	str	r3, [sp, #16]
   4eae4:	f204 13ff 	addw	r3, r4, #511	; 0x1ff
   4eae8:	f109 0809 	add.w	r8, r9, #9
   4eaec:	9303      	str	r3, [sp, #12]
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4eaee:	9b04      	ldr	r3, [sp, #16]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4eaf0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4eaf4:	eb02 0777 	add.w	r7, r2, r7, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
   4eaf8:	9a03      	ldr	r2, [sp, #12]
   4eafa:	429a      	cmp	r2, r3
   4eafc:	d1f8      	bne.n	4eaf0 <f_mkfs+0x724>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eafe:	4621      	mov	r1, r4
   4eb00:	2301      	movs	r3, #1
   4eb02:	4652      	mov	r2, sl
   4eb04:	9800      	ldr	r0, [sp, #0]
   4eb06:	f000 fae3 	bl	4f0d0 <disk_write>
   4eb0a:	f10a 0901 	add.w	r9, sl, #1
   4eb0e:	4601      	mov	r1, r0
   4eb10:	2800      	cmp	r0, #0
   4eb12:	f47f ae4f 	bne.w	4e7b4 <f_mkfs+0x3e8>
			for (j = 1; j < 9; j++) {
   4eb16:	45c1      	cmp	r9, r8
   4eb18:	d001      	beq.n	4eb1e <f_mkfs+0x752>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eb1a:	46ca      	mov	sl, r9
   4eb1c:	e7e7      	b.n	4eaee <f_mkfs+0x722>
   4eb1e:	f44f 7200 	mov.w	r2, #512	; 0x200
   4eb22:	4620      	mov	r0, r4
   4eb24:	f00c f9d3 	bl	5aece <memset>
			for ( ; j < 11; j++) {
   4eb28:	f10a 0a03 	add.w	sl, sl, #3
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eb2c:	9b04      	ldr	r3, [sp, #16]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4eb2e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4eb32:	eb02 0777 	add.w	r7, r2, r7, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
   4eb36:	9a03      	ldr	r2, [sp, #12]
   4eb38:	429a      	cmp	r2, r3
   4eb3a:	d1f8      	bne.n	4eb2e <f_mkfs+0x762>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eb3c:	2301      	movs	r3, #1
   4eb3e:	464a      	mov	r2, r9
   4eb40:	4621      	mov	r1, r4
   4eb42:	9800      	ldr	r0, [sp, #0]
   4eb44:	f109 0801 	add.w	r8, r9, #1
   4eb48:	f000 fac2 	bl	4f0d0 <disk_write>
   4eb4c:	2800      	cmp	r0, #0
   4eb4e:	f47f ae31 	bne.w	4e7b4 <f_mkfs+0x3e8>
			for ( ; j < 11; j++) {
   4eb52:	45d0      	cmp	r8, sl
   4eb54:	d001      	beq.n	4eb5a <f_mkfs+0x78e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eb56:	46c1      	mov	r9, r8
   4eb58:	e7e8      	b.n	4eb2c <f_mkfs+0x760>
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
   4eb5a:	19a0      	adds	r0, r4, r6
   4eb5c:	4639      	mov	r1, r7
   4eb5e:	3604      	adds	r6, #4
   4eb60:	f008 ffd1 	bl	57b06 <st_dword>
   4eb64:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   4eb68:	d1f7      	bne.n	4eb5a <f_mkfs+0x78e>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eb6a:	2301      	movs	r3, #1
   4eb6c:	4642      	mov	r2, r8
   4eb6e:	4621      	mov	r1, r4
   4eb70:	9800      	ldr	r0, [sp, #0]
   4eb72:	f109 0902 	add.w	r9, r9, #2
   4eb76:	f000 faab 	bl	4f0d0 <disk_write>
   4eb7a:	2800      	cmp	r0, #0
   4eb7c:	f47f ae1a 	bne.w	4e7b4 <f_mkfs+0x3e8>
		for (n = 0; n < 2; n++) {
   4eb80:	9b07      	ldr	r3, [sp, #28]
   4eb82:	2b01      	cmp	r3, #1
   4eb84:	f47f af7f 	bne.w	4ea86 <f_mkfs+0x6ba>
		sys = 0x07;			/* exFAT */
   4eb88:	f04f 0907 	mov.w	r9, #7
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD */
   4eb8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   4eb8e:	2b00      	cmp	r3, #0
   4eb90:	f040 8240 	bne.w	4f014 <f_mkfs+0xc48>
			lba[0] = sz_vol; lba[1] = 0;
   4eb94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   4eb96:	2101      	movs	r1, #1
			lba[0] = sz_vol; lba[1] = 0;
   4eb98:	9315      	str	r3, [sp, #84]	; 0x54
   4eb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   4eb9c:	9800      	ldr	r0, [sp, #0]
   4eb9e:	aa14      	add	r2, sp, #80	; 0x50
			lba[0] = sz_vol; lba[1] = 0;
   4eba0:	9316      	str	r3, [sp, #88]	; 0x58
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   4eba2:	f000 faa1 	bl	4f0e8 <disk_ioctl>
   4eba6:	2800      	cmp	r0, #0
   4eba8:	f47f ae04 	bne.w	4e7b4 <f_mkfs+0x3e8>
		sz_drv32 = (DWORD)sz_drv;
   4ebac:	9e14      	ldr	r6, [sp, #80]	; 0x50
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
   4ebae:	4bc8      	ldr	r3, [pc, #800]	; (4eed0 <f_mkfs+0xb04>)
   4ebb0:	429e      	cmp	r6, r3
   4ebb2:	f240 8218 	bls.w	4efe6 <f_mkfs+0xc1a>
   4ebb6:	2105      	movs	r1, #5
   4ebb8:	2708      	movs	r7, #8
   4ebba:	f64f 433e 	movw	r3, #64574	; 0xfc3e
   4ebbe:	007f      	lsls	r7, r7, #1
   4ebc0:	3901      	subs	r1, #1
   4ebc2:	b2ff      	uxtb	r7, r7
   4ebc4:	f000 825b 	beq.w	4f07e <f_mkfs+0xcb2>
   4ebc8:	fbb6 f2f7 	udiv	r2, r6, r7
   4ebcc:	429a      	cmp	r2, r3
   4ebce:	d8f6      	bhi.n	4ebbe <f_mkfs+0x7f2>
   4ebd0:	f44f 7200 	mov.w	r2, #512	; 0x200
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
   4ebd4:	2f00      	cmp	r7, #0
   4ebd6:	f040 81ad 	bne.w	4ef34 <f_mkfs+0xb68>
   4ebda:	4639      	mov	r1, r7
   4ebdc:	4620      	mov	r0, r4
   4ebde:	f00c f976 	bl	5aece <memset>
   4ebe2:	27ff      	movs	r7, #255	; 0xff
   4ebe4:	e1aa      	b.n	4ef3c <f_mkfs+0xb70>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   4ebe6:	2501      	movs	r5, #1
   4ebe8:	4bba      	ldr	r3, [pc, #744]	; (4eed4 <f_mkfs+0xb08>)
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
   4ebea:	ea4f 4058 	mov.w	r0, r8, lsr #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   4ebee:	f833 2b02 	ldrh.w	r2, [r3], #2
   4ebf2:	2a00      	cmp	r2, #0
   4ebf4:	f43f ad06 	beq.w	4e604 <f_mkfs+0x238>
   4ebf8:	4282      	cmp	r2, r0
   4ebfa:	d901      	bls.n	4ec00 <f_mkfs+0x834>
   4ebfc:	2200      	movs	r2, #0
   4ebfe:	e501      	b.n	4e604 <f_mkfs+0x238>
   4ec00:	006d      	lsls	r5, r5, #1
   4ec02:	e7f4      	b.n	4ebee <f_mkfs+0x822>
   4ec04:	461d      	mov	r5, r3
   4ec06:	e55f      	b.n	4e6c8 <f_mkfs+0x2fc>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   4ec08:	005b      	lsls	r3, r3, #1
   4ec0a:	e564      	b.n	4e6d6 <f_mkfs+0x30a>
   4ec0c:	462b      	mov	r3, r5
   4ec0e:	e568      	b.n	4e6e2 <f_mkfs+0x316>
				if (n % n_fat) {	/* Adjust fractional error if needed */
   4ec10:	9902      	ldr	r1, [sp, #8]
   4ec12:	fbb3 fcf1 	udiv	ip, r3, r1
   4ec16:	fb01 3c1c 	mls	ip, r1, ip, r3
   4ec1a:	f1bc 0f00 	cmp.w	ip, #0
   4ec1e:	d003      	beq.n	4ec28 <f_mkfs+0x85c>
					n--; sz_rsv++; b_fat++;
   4ec20:	3b01      	subs	r3, #1
   4ec22:	f10a 0a01 	add.w	sl, sl, #1
   4ec26:	3701      	adds	r7, #1
				sz_fat += n / n_fat;
   4ec28:	9902      	ldr	r1, [sp, #8]
   4ec2a:	fbb3 f3f1 	udiv	r3, r3, r1
   4ec2e:	9903      	ldr	r1, [sp, #12]
   4ec30:	4419      	add	r1, r3
   4ec32:	9103      	str	r1, [sp, #12]
   4ec34:	e50e      	b.n	4e654 <f_mkfs+0x288>
			if (fsty == FS_FAT16) {
   4ec36:	2e02      	cmp	r6, #2
   4ec38:	d123      	bne.n	4ec82 <f_mkfs+0x8b6>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
   4ec3a:	f64f 73f5 	movw	r3, #65525	; 0xfff5
   4ec3e:	9905      	ldr	r1, [sp, #20]
   4ec40:	4299      	cmp	r1, r3
   4ec42:	d911      	bls.n	4ec68 <f_mkfs+0x89c>
					if (sz_au == 0 && (pau * 2) <= 64) {
   4ec44:	b952      	cbnz	r2, 4ec5c <f_mkfs+0x890>
   4ec46:	006b      	lsls	r3, r5, #1
   4ec48:	2b40      	cmp	r3, #64	; 0x40
   4ec4a:	d9db      	bls.n	4ec04 <f_mkfs+0x838>
					if ((fsopt & FM_FAT32)) {
   4ec4c:	9a08      	ldr	r2, [sp, #32]
   4ec4e:	2a00      	cmp	r2, #0
   4ec50:	d1c9      	bne.n	4ebe6 <f_mkfs+0x81a>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   4ec52:	2b80      	cmp	r3, #128	; 0x80
   4ec54:	f63f ac49 	bhi.w	4e4ea <f_mkfs+0x11e>
   4ec58:	461d      	mov	r5, r3
   4ec5a:	e542      	b.n	4e6e2 <f_mkfs+0x316>
					if ((fsopt & FM_FAT32)) {
   4ec5c:	9b08      	ldr	r3, [sp, #32]
   4ec5e:	2b00      	cmp	r3, #0
   4ec60:	f43f ac43 	beq.w	4e4ea <f_mkfs+0x11e>
   4ec64:	4615      	mov	r5, r2
   4ec66:	e4cd      	b.n	4e604 <f_mkfs+0x238>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
   4ec68:	f640 73f5 	movw	r3, #4085	; 0xff5
   4ec6c:	9905      	ldr	r1, [sp, #20]
   4ec6e:	4299      	cmp	r1, r3
   4ec70:	d80e      	bhi.n	4ec90 <f_mkfs+0x8c4>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   4ec72:	2a00      	cmp	r2, #0
   4ec74:	f47f ac39 	bne.w	4e4ea <f_mkfs+0x11e>
   4ec78:	006d      	lsls	r5, r5, #1
   4ec7a:	2d80      	cmp	r5, #128	; 0x80
   4ec7c:	f67f ad24 	bls.w	4e6c8 <f_mkfs+0x2fc>
   4ec80:	e433      	b.n	4e4ea <f_mkfs+0x11e>
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
   4ec82:	f640 73f5 	movw	r3, #4085	; 0xff5
   4ec86:	9a05      	ldr	r2, [sp, #20]
   4ec88:	429a      	cmp	r2, r3
   4ec8a:	f63f ac2e 	bhi.w	4e4ea <f_mkfs+0x11e>
   4ec8e:	2601      	movs	r6, #1
   4ec90:	f44f 7200 	mov.w	r2, #512	; 0x200
   4ec94:	2100      	movs	r1, #0
   4ec96:	4620      	mov	r0, r4
   4ec98:	f00c f919 	bl	5aece <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4ec9c:	4b8e      	ldr	r3, [pc, #568]	; (4eed8 <f_mkfs+0xb0c>)
   4ec9e:	2e03      	cmp	r6, #3
   4eca0:	681a      	ldr	r2, [r3, #0]
   4eca2:	bf08      	it	eq
   4eca4:	f04f 0900 	moveq.w	r9, #0
   4eca8:	6022      	str	r2, [r4, #0]
   4ecaa:	685a      	ldr	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   4ecac:	f884 a00e 	strb.w	sl, [r4, #14]
   4ecb0:	6062      	str	r2, [r4, #4]
   4ecb2:	891a      	ldrh	r2, [r3, #8]
   4ecb4:	7a9b      	ldrb	r3, [r3, #10]
   4ecb6:	f3ca 2a07 	ubfx	sl, sl, #8, #8
   4ecba:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
   4ecbc:	2302      	movs	r3, #2
   4ecbe:	7323      	strb	r3, [r4, #12]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
   4ecc0:	9b02      	ldr	r3, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
   4ecc2:	f884 9011 	strb.w	r9, [r4, #17]
		if (sz_vol < 0x10000) {
   4ecc6:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
   4ecca:	f3c9 2907 	ubfx	r9, r9, #8, #8
   4ecce:	8122      	strh	r2, [r4, #8]
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
   4ecd0:	7365      	strb	r5, [r4, #13]
	*ptr++ = (BYTE)val;
   4ecd2:	f884 a00f 	strb.w	sl, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
   4ecd6:	7423      	strb	r3, [r4, #16]
	*ptr++ = (BYTE)val;
   4ecd8:	f884 9012 	strb.w	r9, [r4, #18]
		if (sz_vol < 0x10000) {
   4ecdc:	f080 80f1 	bcs.w	4eec2 <f_mkfs+0xaf6>
	*ptr++ = (BYTE)val; val >>= 8;
   4ece0:	f884 8013 	strb.w	r8, [r4, #19]
   4ece4:	f3c8 2807 	ubfx	r8, r8, #8, #8
	*ptr++ = (BYTE)val;
   4ece8:	f884 8014 	strb.w	r8, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
   4ecec:	23f8      	movs	r3, #248	; 0xf8
   4ecee:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
   4ecf0:	233f      	movs	r3, #63	; 0x3f
   4ecf2:	7623      	strb	r3, [r4, #24]
   4ecf4:	23ff      	movs	r3, #255	; 0xff
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
   4ecf6:	9901      	ldr	r1, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   4ecf8:	76a3      	strb	r3, [r4, #26]
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
   4ecfa:	f104 001c 	add.w	r0, r4, #28
   4ecfe:	f008 ff02 	bl	57b06 <st_dword>
		if (fsty == FS_FAT32) {
   4ed02:	2e03      	cmp	r6, #3
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
   4ed04:	4659      	mov	r1, fp
		if (fsty == FS_FAT32) {
   4ed06:	f040 80ef 	bne.w	4eee8 <f_mkfs+0xb1c>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
   4ed0a:	f104 0043 	add.w	r0, r4, #67	; 0x43
   4ed0e:	f008 fefa 	bl	57b06 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
   4ed12:	9903      	ldr	r1, [sp, #12]
   4ed14:	f104 0024 	add.w	r0, r4, #36	; 0x24
   4ed18:	f008 fef5 	bl	57b06 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   4ed1c:	2302      	movs	r3, #2
   4ed1e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
   4ed22:	2301      	movs	r3, #1
   4ed24:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   4ed28:	2306      	movs	r3, #6
   4ed2a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
   4ed2e:	2380      	movs	r3, #128	; 0x80
   4ed30:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
   4ed34:	2329      	movs	r3, #41	; 0x29
   4ed36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   4ed3a:	4b68      	ldr	r3, [pc, #416]	; (4eedc <f_mkfs+0xb10>)
   4ed3c:	f104 0247 	add.w	r2, r4, #71	; 0x47
   4ed40:	f103 0110 	add.w	r1, r3, #16
   4ed44:	f853 0b04 	ldr.w	r0, [r3], #4
   4ed48:	428b      	cmp	r3, r1
   4ed4a:	f842 0b04 	str.w	r0, [r2], #4
   4ed4e:	d1f9      	bne.n	4ed44 <f_mkfs+0x978>
	*ptr++ = (BYTE)val; val >>= 8;
   4ed50:	f04f 0b55 	mov.w	fp, #85	; 0x55
	*ptr++ = (BYTE)val;
   4ed54:	f04f 0aaa 	mov.w	sl, #170	; 0xaa
   4ed58:	8819      	ldrh	r1, [r3, #0]
   4ed5a:	789b      	ldrb	r3, [r3, #2]
   4ed5c:	8011      	strh	r1, [r2, #0]
   4ed5e:	7093      	strb	r3, [r2, #2]
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
   4ed60:	4621      	mov	r1, r4
   4ed62:	2301      	movs	r3, #1
   4ed64:	9a01      	ldr	r2, [sp, #4]
   4ed66:	9800      	ldr	r0, [sp, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   4ed68:	f884 b1fe 	strb.w	fp, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   4ed6c:	f884 a1ff 	strb.w	sl, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
   4ed70:	f000 f9ae 	bl	4f0d0 <disk_write>
   4ed74:	4681      	mov	r9, r0
   4ed76:	2800      	cmp	r0, #0
   4ed78:	f47f ad1c 	bne.w	4e7b4 <f_mkfs+0x3e8>
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4ed7c:	9b06      	ldr	r3, [sp, #24]
		if (fsty == FS_FAT32) {
   4ed7e:	2e03      	cmp	r6, #3
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4ed80:	f423 78ff 	bic.w	r8, r3, #510	; 0x1fe
   4ed84:	f028 0801 	bic.w	r8, r8, #1
		if (fsty == FS_FAT32) {
   4ed88:	d137      	bne.n	4edfa <f_mkfs+0xa2e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
   4ed8a:	9a01      	ldr	r2, [sp, #4]
   4ed8c:	2301      	movs	r3, #1
   4ed8e:	4621      	mov	r1, r4
   4ed90:	3206      	adds	r2, #6
   4ed92:	9800      	ldr	r0, [sp, #0]
   4ed94:	f000 f99c 	bl	4f0d0 <disk_write>
__ssp_bos_icheck3(memset, void *, int)
   4ed98:	f44f 7200 	mov.w	r2, #512	; 0x200
   4ed9c:	4649      	mov	r1, r9
   4ed9e:	4620      	mov	r0, r4
   4eda0:	f00c f895 	bl	5aece <memset>
	*ptr++ = (BYTE)val; val >>= 8;
   4eda4:	2352      	movs	r3, #82	; 0x52
   4eda6:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   4eda8:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
   4edaa:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val;
   4edac:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
   4edae:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
   4edb0:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
   4edb2:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   4edb6:	9b05      	ldr	r3, [sp, #20]
	*ptr++ = (BYTE)val;
   4edb8:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   4edba:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
   4edbe:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
   4edc2:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   4edc6:	1e59      	subs	r1, r3, #1
   4edc8:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
   4edcc:	f008 fe9b 	bl	57b06 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   4edd0:	2302      	movs	r3, #2
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   4edd2:	9a01      	ldr	r2, [sp, #4]
   4edd4:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
   4edd6:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   4edda:	3207      	adds	r2, #7
   4eddc:	2301      	movs	r3, #1
   4edde:	9800      	ldr	r0, [sp, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   4ede0:	f884 b1fe 	strb.w	fp, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   4ede4:	f884 a1ff 	strb.w	sl, [r4, #511]	; 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   4ede8:	f000 f972 	bl	4f0d0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
   4edec:	2301      	movs	r3, #1
   4edee:	9a01      	ldr	r2, [sp, #4]
   4edf0:	4621      	mov	r1, r4
   4edf2:	9800      	ldr	r0, [sp, #0]
   4edf4:	441a      	add	r2, r3
   4edf6:	f000 f96b 	bl	4f0d0 <disk_write>
   4edfa:	4649      	mov	r1, r9
   4edfc:	4642      	mov	r2, r8
   4edfe:	4620      	mov	r0, r4
   4ee00:	f00c f865 	bl	5aece <memset>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   4ee04:	4b36      	ldr	r3, [pc, #216]	; (4eee0 <f_mkfs+0xb14>)
   4ee06:	2e01      	cmp	r6, #1
   4ee08:	bf0c      	ite	eq
   4ee0a:	4699      	moveq	r9, r3
   4ee0c:	f06f 0907 	mvnne.w	r9, #7
   4ee10:	f04f 0a00 	mov.w	sl, #0
			if (fsty == FS_FAT32) {
   4ee14:	2e03      	cmp	r6, #3
   4ee16:	f040 8082 	bne.w	4ef1e <f_mkfs+0xb52>
	*ptr++ = (BYTE)val; val >>= 8;
   4ee1a:	23f8      	movs	r3, #248	; 0xf8
   4ee1c:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee1e:	23ff      	movs	r3, #255	; 0xff
   4ee20:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee22:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
   4ee24:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee26:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee28:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee2a:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
   4ee2c:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee2e:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee30:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee32:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
   4ee34:	230f      	movs	r3, #15
   4ee36:	72e3      	strb	r3, [r4, #11]
   4ee38:	f8dd 800c 	ldr.w	r8, [sp, #12]
				n = (nsect > sz_buf) ? sz_buf : nsect;
   4ee3c:	9b04      	ldr	r3, [sp, #16]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ee3e:	4621      	mov	r1, r4
				n = (nsect > sz_buf) ? sz_buf : nsect;
   4ee40:	4543      	cmp	r3, r8
   4ee42:	bf28      	it	cs
   4ee44:	4643      	movcs	r3, r8
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ee46:	463a      	mov	r2, r7
   4ee48:	9800      	ldr	r0, [sp, #0]
				n = (nsect > sz_buf) ? sz_buf : nsect;
   4ee4a:	469b      	mov	fp, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ee4c:	f000 f940 	bl	4f0d0 <disk_write>
   4ee50:	4601      	mov	r1, r0
   4ee52:	2800      	cmp	r0, #0
   4ee54:	f47f acae 	bne.w	4e7b4 <f_mkfs+0x3e8>
   4ee58:	f44f 7200 	mov.w	r2, #512	; 0x200
   4ee5c:	4620      	mov	r0, r4
   4ee5e:	f00c f836 	bl	5aece <memset>
			} while (nsect);
   4ee62:	ebb8 080b 	subs.w	r8, r8, fp
				sect += n; nsect -= n;
   4ee66:	445f      	add	r7, fp
			} while (nsect);
   4ee68:	d1e8      	bne.n	4ee3c <f_mkfs+0xa70>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   4ee6a:	f1ba 0f00 	cmp.w	sl, #0
   4ee6e:	bf0c      	ite	eq
   4ee70:	2301      	moveq	r3, #1
   4ee72:	2302      	movne	r3, #2
   4ee74:	9a02      	ldr	r2, [sp, #8]
   4ee76:	f04f 0a01 	mov.w	sl, #1
   4ee7a:	429a      	cmp	r2, r3
   4ee7c:	d8ca      	bhi.n	4ee14 <f_mkfs+0xa48>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
   4ee7e:	9b07      	ldr	r3, [sp, #28]
   4ee80:	2e03      	cmp	r6, #3
   4ee82:	bf18      	it	ne
   4ee84:	461d      	movne	r5, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4ee86:	9b04      	ldr	r3, [sp, #16]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ee88:	463a      	mov	r2, r7
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4ee8a:	42ab      	cmp	r3, r5
   4ee8c:	bf28      	it	cs
   4ee8e:	462b      	movcs	r3, r5
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ee90:	4621      	mov	r1, r4
   4ee92:	9800      	ldr	r0, [sp, #0]
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4ee94:	4698      	mov	r8, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ee96:	f000 f91b 	bl	4f0d0 <disk_write>
   4ee9a:	2800      	cmp	r0, #0
   4ee9c:	f47f ac8a 	bne.w	4e7b4 <f_mkfs+0x3e8>
		} while (nsect);
   4eea0:	ebb5 0508 	subs.w	r5, r5, r8
			sect += n; nsect -= n;
   4eea4:	4447      	add	r7, r8
		} while (nsect);
   4eea6:	d1ee      	bne.n	4ee86 <f_mkfs+0xaba>
		if (fsty == FS_FAT32) {
   4eea8:	2e03      	cmp	r6, #3
   4eeaa:	d03d      	beq.n	4ef28 <f_mkfs+0xb5c>
			if (sz_vol >= 0x10000) {
   4eeac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   4eeae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   4eeb2:	d23c      	bcs.n	4ef2e <f_mkfs+0xb62>
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
   4eeb4:	2e02      	cmp	r6, #2
   4eeb6:	bf14      	ite	ne
   4eeb8:	f04f 0901 	movne.w	r9, #1
   4eebc:	f04f 0904 	moveq.w	r9, #4
   4eec0:	e664      	b.n	4eb8c <f_mkfs+0x7c0>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
   4eec2:	4641      	mov	r1, r8
   4eec4:	f104 0020 	add.w	r0, r4, #32
   4eec8:	f008 fe1d 	bl	57b06 <st_dword>
   4eecc:	e70e      	b.n	4ecec <f_mkfs+0x920>
   4eece:	bf00      	nop
   4eed0:	0007e1f7 	.word	0x0007e1f7
   4eed4:	0005c8ee 	.word	0x0005c8ee
   4eed8:	000606c8 	.word	0x000606c8
   4eedc:	000606d4 	.word	0x000606d4
   4eee0:	00fffff8 	.word	0x00fffff8
   4eee4:	000606ac 	.word	0x000606ac
			st_dword(buf + BS_VolID, vsn);				/* VSN */
   4eee8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   4eeec:	f008 fe0b 	bl	57b06 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   4eef0:	9b03      	ldr	r3, [sp, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4eef2:	f104 022b 	add.w	r2, r4, #43	; 0x2b
   4eef6:	75a3      	strb	r3, [r4, #22]
   4eef8:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val;
   4eefc:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
   4eefe:	2380      	movs	r3, #128	; 0x80
   4ef00:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
   4ef04:	2329      	movs	r3, #41	; 0x29
   4ef06:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
   4ef0a:	4b5e      	ldr	r3, [pc, #376]	; (4f084 <f_mkfs+0xcb8>)
   4ef0c:	f103 0110 	add.w	r1, r3, #16
   4ef10:	f853 0b04 	ldr.w	r0, [r3], #4
   4ef14:	428b      	cmp	r3, r1
   4ef16:	f842 0b04 	str.w	r0, [r2], #4
   4ef1a:	d1f9      	bne.n	4ef10 <f_mkfs+0xb44>
   4ef1c:	e718      	b.n	4ed50 <f_mkfs+0x984>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
   4ef1e:	4649      	mov	r1, r9
   4ef20:	4620      	mov	r0, r4
   4ef22:	f008 fdf0 	bl	57b06 <st_dword>
   4ef26:	e787      	b.n	4ee38 <f_mkfs+0xa6c>
			sys = 0x0C;		/* FAT32X */
   4ef28:	f04f 090c 	mov.w	r9, #12
   4ef2c:	e62e      	b.n	4eb8c <f_mkfs+0x7c0>
				sys = 0x06;	/* FAT12/16 (large) */
   4ef2e:	f04f 0906 	mov.w	r9, #6
   4ef32:	e62b      	b.n	4eb8c <f_mkfs+0x7c0>
__ssp_bos_icheck3(memset, void *, int)
   4ef34:	2100      	movs	r1, #0
   4ef36:	4620      	mov	r0, r4
   4ef38:	f00b ffc9 	bl	5aece <memset>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   4ef3c:	223f      	movs	r2, #63	; 0x3f
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
   4ef3e:	4693      	mov	fp, r2
   4ef40:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
   4ef44:	f504 78e3 	add.w	r8, r4, #454	; 0x1c6
   4ef48:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
   4ef4c:	f85a 5b04 	ldr.w	r5, [sl], #4
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
   4ef50:	2d64      	cmp	r5, #100	; 0x64
   4ef52:	d96b      	bls.n	4f02c <f_mkfs+0xc60>
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
   4ef54:	18a8      	adds	r0, r5, r2
   4ef56:	bf2c      	ite	cs
   4ef58:	2101      	movcs	r1, #1
   4ef5a:	2100      	movcc	r1, #0
   4ef5c:	42b0      	cmp	r0, r6
   4ef5e:	d87a      	bhi.n	4f056 <f_mkfs+0xc8a>
   4ef60:	2900      	cmp	r1, #0
   4ef62:	d178      	bne.n	4f056 <f_mkfs+0xc8a>
			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
   4ef64:	4611      	mov	r1, r2
   4ef66:	4640      	mov	r0, r8
   4ef68:	9301      	str	r3, [sp, #4]
   4ef6a:	f008 fdcc 	bl	57b06 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
   4ef6e:	4629      	mov	r1, r5
   4ef70:	f108 0004 	add.w	r0, r8, #4
   4ef74:	f008 fdc7 	bl	57b06 <st_dword>
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
   4ef78:	fbb2 f1fb 	udiv	r1, r2, fp
   4ef7c:	fbb1 f0f7 	udiv	r0, r1, r7
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
   4ef80:	fb07 1c10 	mls	ip, r7, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
   4ef84:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
   4ef88:	1a51      	subs	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
   4ef8a:	f808 cc07 	strb.w	ip, [r8, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4ef8e:	ea4f 0c90 	mov.w	ip, r0, lsr #2
   4ef92:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
   4ef96:	3101      	adds	r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4ef98:	ea41 010c 	orr.w	r1, r1, ip
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
   4ef9c:	442a      	add	r2, r5
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4ef9e:	f808 1c06 	strb.w	r1, [r8, #-6]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
   4efa2:	1e51      	subs	r1, r2, #1
   4efa4:	fbb1 f5fb 	udiv	r5, r1, fp
			pte[PTE_StCyl] = (BYTE)cy;
   4efa8:	f808 0c05 	strb.w	r0, [r8, #-5]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
   4efac:	fbb5 f0f7 	udiv	r0, r5, r7
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
   4efb0:	fb07 5c10 	mls	ip, r7, r0, r5
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
   4efb4:	ebc5 1585 	rsb	r5, r5, r5, lsl #6
   4efb8:	1b49      	subs	r1, r1, r5
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   4efba:	9b01      	ldr	r3, [sp, #4]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4efbc:	0885      	lsrs	r5, r0, #2
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
   4efbe:	3101      	adds	r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4efc0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
   4efc4:	4329      	orrs	r1, r5
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   4efc6:	4543      	cmp	r3, r8
			pte[PTE_System] = sys;					/* System type */
   4efc8:	f808 9c04 	strb.w	r9, [r8, #-4]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
   4efcc:	f808 cc03 	strb.w	ip, [r8, #-3]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4efd0:	f808 1c02 	strb.w	r1, [r8, #-2]
			pte[PTE_EdCyl] = (BYTE)cy;
   4efd4:	f808 0c01 	strb.w	r0, [r8, #-1]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   4efd8:	d00d      	beq.n	4eff6 <f_mkfs+0xc2a>
   4efda:	b162      	cbz	r2, 4eff6 <f_mkfs+0xc2a>
   4efdc:	4296      	cmp	r6, r2
   4efde:	f108 0810 	add.w	r8, r8, #16
   4efe2:	d8b3      	bhi.n	4ef4c <f_mkfs+0xb80>
   4efe4:	e007      	b.n	4eff6 <f_mkfs+0xc2a>
   4efe6:	f44f 7200 	mov.w	r2, #512	; 0x200
   4efea:	4620      	mov	r0, r4
   4efec:	9909      	ldr	r1, [sp, #36]	; 0x24
   4efee:	f00b ff6e 	bl	5aece <memset>
   4eff2:	2e3f      	cmp	r6, #63	; 0x3f
   4eff4:	d818      	bhi.n	4f028 <f_mkfs+0xc5c>
	*ptr++ = (BYTE)val; val >>= 8;
   4eff6:	2355      	movs	r3, #85	; 0x55
   4eff8:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   4effc:	23aa      	movs	r3, #170	; 0xaa
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
   4effe:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val;
   4f000:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
   4f004:	4621      	mov	r1, r4
   4f006:	2301      	movs	r3, #1
   4f008:	9800      	ldr	r0, [sp, #0]
   4f00a:	f000 f861 	bl	4f0d0 <disk_write>
   4f00e:	2800      	cmp	r0, #0
   4f010:	f47f abd0 	bne.w	4e7b4 <f_mkfs+0x3e8>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4f014:	2200      	movs	r2, #0
   4f016:	9800      	ldr	r0, [sp, #0]
   4f018:	4611      	mov	r1, r2
   4f01a:	f000 f865 	bl	4f0e8 <disk_ioctl>
   4f01e:	3800      	subs	r0, #0
   4f020:	bf18      	it	ne
   4f022:	2001      	movne	r0, #1
   4f024:	f7ff bbc7 	b.w	4e7b6 <f_mkfs+0x3ea>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
   4f028:	2708      	movs	r7, #8
   4f02a:	e787      	b.n	4ef3c <f_mkfs+0xb70>
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
   4f02c:	d108      	bne.n	4f040 <f_mkfs+0xc74>
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
   4f02e:	18b0      	adds	r0, r6, r2
   4f030:	bf2c      	ite	cs
   4f032:	2101      	movcs	r1, #1
   4f034:	2100      	movcc	r1, #0
   4f036:	4286      	cmp	r6, r0
   4f038:	d30d      	bcc.n	4f056 <f_mkfs+0xc8a>
   4f03a:	b961      	cbnz	r1, 4f056 <f_mkfs+0xc8a>
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
   4f03c:	4635      	mov	r5, r6
   4f03e:	e791      	b.n	4ef64 <f_mkfs+0xb98>
   4f040:	2164      	movs	r1, #100	; 0x64
   4f042:	fbb6 f1f1 	udiv	r1, r6, r1
   4f046:	434d      	muls	r5, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
   4f048:	18a8      	adds	r0, r5, r2
   4f04a:	bf2c      	ite	cs
   4f04c:	2101      	movcs	r1, #1
   4f04e:	2100      	movcc	r1, #0
   4f050:	4286      	cmp	r6, r0
   4f052:	d300      	bcc.n	4f056 <f_mkfs+0xc8a>
   4f054:	b109      	cbz	r1, 4f05a <f_mkfs+0xc8e>
   4f056:	1ab5      	subs	r5, r6, r2
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
   4f058:	e784      	b.n	4ef64 <f_mkfs+0xb98>
   4f05a:	2d00      	cmp	r5, #0
   4f05c:	d182      	bne.n	4ef64 <f_mkfs+0xb98>
   4f05e:	e7ca      	b.n	4eff6 <f_mkfs+0xc2a>
	if (vol < 0) return FR_INVALID_DRIVE;
   4f060:	200b      	movs	r0, #11
   4f062:	f7ff bba8 	b.w	4e7b6 <f_mkfs+0x3ea>
	if (ds & STA_NOINIT) return FR_NOT_READY;
   4f066:	2003      	movs	r0, #3
   4f068:	f7ff bba5 	b.w	4e7b6 <f_mkfs+0x3ea>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
   4f06c:	200a      	movs	r0, #10
   4f06e:	f7ff bba2 	b.w	4e7b6 <f_mkfs+0x3ea>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
   4f072:	2011      	movs	r0, #17
   4f074:	f7ff bb9f 	b.w	4e7b6 <f_mkfs+0x3ea>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
   4f078:	2013      	movs	r0, #19
   4f07a:	f7ff bb9c 	b.w	4e7b6 <f_mkfs+0x3ea>
   4f07e:	f44f 7200 	mov.w	r2, #512	; 0x200
   4f082:	e5ab      	b.n	4ebdc <f_mkfs+0x810>
   4f084:	000606e8 	.word	0x000606e8

0004f088 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv)
{
   4f088:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_status(pdrv_str[pdrv]) != 0) {
   4f08a:	4b04      	ldr	r3, [pc, #16]	; (4f09c <disk_status+0x14>)
   4f08c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   4f090:	f006 fef9 	bl	55e86 <disk_access_status>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
   4f094:	3800      	subs	r0, #0
   4f096:	bf18      	it	ne
   4f098:	2001      	movne	r0, #1
   4f09a:	bd08      	pop	{r3, pc}
   4f09c:	0005c514 	.word	0x0005c514

0004f0a0 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv)
{
   4f0a0:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_init(pdrv_str[pdrv]) != 0) {
   4f0a2:	4b04      	ldr	r3, [pc, #16]	; (4f0b4 <disk_initialize+0x14>)
   4f0a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   4f0a8:	f006 fedf 	bl	55e6a <disk_access_init>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
   4f0ac:	3800      	subs	r0, #0
   4f0ae:	bf18      	it	ne
   4f0b0:	2001      	movne	r0, #1
   4f0b2:	bd08      	pop	{r3, pc}
   4f0b4:	0005c514 	.word	0x0005c514

0004f0b8 <disk_read>:
/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
   4f0b8:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_read(pdrv_str[pdrv], buff, sector, count) != 0) {
   4f0ba:	4c04      	ldr	r4, [pc, #16]	; (4f0cc <disk_read+0x14>)
   4f0bc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   4f0c0:	f006 feef 	bl	55ea2 <disk_access_read>
		return RES_ERROR;
	} else {
		return RES_OK;
	}

}
   4f0c4:	3800      	subs	r0, #0
   4f0c6:	bf18      	it	ne
   4f0c8:	2001      	movne	r0, #1
   4f0ca:	bd10      	pop	{r4, pc}
   4f0cc:	0005c514 	.word	0x0005c514

0004f0d0 <disk_write>:

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
   4f0d0:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if(disk_access_write(pdrv_str[pdrv], buff, sector, count) != 0) {
   4f0d2:	4c04      	ldr	r4, [pc, #16]	; (4f0e4 <disk_write+0x14>)
   4f0d4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   4f0d8:	f006 fefa 	bl	55ed0 <disk_access_write>
		return RES_ERROR;
	} else {
		return RES_OK;
	}
}
   4f0dc:	3800      	subs	r0, #0
   4f0de:	bf18      	it	ne
   4f0e0:	2001      	movne	r0, #1
   4f0e2:	bd10      	pop	{r4, pc}
   4f0e4:	0005c514 	.word	0x0005c514

0004f0e8 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
	int ret = RES_OK;
	uint32_t sector_size = 0;
   4f0e8:	2300      	movs	r3, #0
{
   4f0ea:	b513      	push	{r0, r1, r4, lr}
   4f0ec:	4614      	mov	r4, r2
	uint32_t sector_size = 0;
   4f0ee:	9301      	str	r3, [sp, #4]

	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	switch (cmd) {
   4f0f0:	2903      	cmp	r1, #3
   4f0f2:	d821      	bhi.n	4f138 <disk_ioctl+0x50>
   4f0f4:	e8df f001 	tbb	[pc, r1]
   4f0f8:	1e100e02 	.word	0x1e100e02
	case CTRL_SYNC:
		if(disk_access_ioctl(pdrv_str[pdrv],
   4f0fc:	2105      	movs	r1, #5
			ret = RES_ERROR;
		}
		break;

	case GET_SECTOR_COUNT:
		if (disk_access_ioctl(pdrv_str[pdrv],
   4f0fe:	4b10      	ldr	r3, [pc, #64]	; (4f140 <disk_ioctl+0x58>)
   4f100:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   4f104:	f006 fefb 	bl	55efe <disk_access_ioctl>
   4f108:	3800      	subs	r0, #0
   4f10a:	bf18      	it	ne
   4f10c:	2001      	movne	r0, #1
	default:
		ret = RES_PARERR;
		break;
	}
	return ret;
}
   4f10e:	b2c0      	uxtb	r0, r0
   4f110:	b002      	add	sp, #8
   4f112:	bd10      	pop	{r4, pc}
		if (disk_access_ioctl(pdrv_str[pdrv],
   4f114:	2101      	movs	r1, #1
   4f116:	e7f2      	b.n	4f0fe <disk_ioctl+0x16>
		if ((disk_access_ioctl(pdrv_str[pdrv],
   4f118:	4b09      	ldr	r3, [pc, #36]	; (4f140 <disk_ioctl+0x58>)
   4f11a:	2102      	movs	r1, #2
   4f11c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   4f120:	aa01      	add	r2, sp, #4
   4f122:	f006 feec 	bl	55efe <disk_access_ioctl>
   4f126:	b948      	cbnz	r0, 4f13c <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
   4f128:	9b01      	ldr	r3, [sp, #4]
				DISK_IOCTL_GET_SECTOR_SIZE, &sector_size) == 0) &&
   4f12a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   4f12e:	d205      	bcs.n	4f13c <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
   4f130:	8023      	strh	r3, [r4, #0]
			*(uint16_t *)buff = (uint16_t)sector_size;
   4f132:	e7ec      	b.n	4f10e <disk_ioctl+0x26>
		if (disk_access_ioctl(pdrv_str[pdrv],
   4f134:	2104      	movs	r1, #4
   4f136:	e7e2      	b.n	4f0fe <disk_ioctl+0x16>
	switch (cmd) {
   4f138:	2004      	movs	r0, #4
   4f13a:	e7e8      	b.n	4f10e <disk_ioctl+0x26>
			ret = RES_ERROR;
   4f13c:	2001      	movs	r0, #1
   4f13e:	e7e6      	b.n	4f10e <disk_ioctl+0x26>
   4f140:	0005c514 	.word	0x0005c514

0004f144 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
   4f144:	287f      	cmp	r0, #127	; 0x7f
   4f146:	d801      	bhi.n	4f14c <ff_uni2oem+0x8>
		c = (WCHAR)uni;
   4f148:	b280      	uxth	r0, r0
   4f14a:	4770      	bx	lr

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
   4f14c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   4f150:	d211      	bcs.n	4f176 <ff_uni2oem+0x32>
   4f152:	f240 13b5 	movw	r3, #437	; 0x1b5
   4f156:	4299      	cmp	r1, r3
   4f158:	d10d      	bne.n	4f176 <ff_uni2oem+0x32>
   4f15a:	2300      	movs	r3, #0
   4f15c:	4a07      	ldr	r2, [pc, #28]	; (4f17c <ff_uni2oem+0x38>)
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
   4f15e:	f832 1b02 	ldrh.w	r1, [r2], #2
   4f162:	4281      	cmp	r1, r0
   4f164:	d101      	bne.n	4f16a <ff_uni2oem+0x26>
   4f166:	b29b      	uxth	r3, r3
   4f168:	e002      	b.n	4f170 <ff_uni2oem+0x2c>
   4f16a:	3301      	adds	r3, #1
   4f16c:	2b80      	cmp	r3, #128	; 0x80
   4f16e:	d1f6      	bne.n	4f15e <ff_uni2oem+0x1a>
			c = (c + 0x80) & 0xFF;
   4f170:	3380      	adds	r3, #128	; 0x80
   4f172:	b2d8      	uxtb	r0, r3
   4f174:	4770      	bx	lr
	WCHAR c = 0;
   4f176:	2000      	movs	r0, #0
		}
	}

	return c;
}
   4f178:	4770      	bx	lr
   4f17a:	bf00      	nop
   4f17c:	0005cbaa 	.word	0x0005cbaa

0004f180 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
   4f180:	287f      	cmp	r0, #127	; 0x7f
   4f182:	d90d      	bls.n	4f1a0 <ff_oem2uni+0x20>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
   4f184:	f240 13b5 	movw	r3, #437	; 0x1b5
   4f188:	4299      	cmp	r1, r3
   4f18a:	d108      	bne.n	4f19e <ff_oem2uni+0x1e>
			if (oem < 0x100) c = p[oem - 0x80];
   4f18c:	28ff      	cmp	r0, #255	; 0xff
   4f18e:	d806      	bhi.n	4f19e <ff_oem2uni+0x1e>
   4f190:	4b04      	ldr	r3, [pc, #16]	; (4f1a4 <ff_oem2uni+0x24>)
   4f192:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   4f196:	3880      	subs	r0, #128	; 0x80
   4f198:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   4f19c:	4770      	bx	lr
	WCHAR c = 0;
   4f19e:	2000      	movs	r0, #0
		}
	}

	return c;
}
   4f1a0:	4770      	bx	lr
   4f1a2:	bf00      	nop
   4f1a4:	0005cbaa 	.word	0x0005cbaa

0004f1a8 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
   4f1a8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
   4f1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x10000) {	/* Is it in BMP? */
   4f1ae:	d222      	bcs.n	4f1f6 <ff_wtoupper+0x4e>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
   4f1b0:	4a1f      	ldr	r2, [pc, #124]	; (4f230 <ff_wtoupper+0x88>)
   4f1b2:	4920      	ldr	r1, [pc, #128]	; (4f234 <ff_wtoupper+0x8c>)
		uc = (WORD)uni;
   4f1b4:	b283      	uxth	r3, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
   4f1b6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   4f1ba:	bf28      	it	cs
   4f1bc:	460a      	movcs	r2, r1
   4f1be:	1d14      	adds	r4, r2, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
   4f1c0:	f834 2c04 	ldrh.w	r2, [r4, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
   4f1c4:	4621      	mov	r1, r4
   4f1c6:	b1aa      	cbz	r2, 4f1f4 <ff_wtoupper+0x4c>
   4f1c8:	4293      	cmp	r3, r2
   4f1ca:	d313      	bcc.n	4f1f4 <ff_wtoupper+0x4c>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
   4f1cc:	f834 5c02 	ldrh.w	r5, [r4, #-2]
   4f1d0:	0a2e      	lsrs	r6, r5, #8
   4f1d2:	b2ef      	uxtb	r7, r5
			if (uc < bc + nc) {	/* In the block? */
   4f1d4:	fa52 f585 	uxtab	r5, r2, r5
   4f1d8:	42a8      	cmp	r0, r5
   4f1da:	da23      	bge.n	4f224 <ff_wtoupper+0x7c>
				switch (cmd) {
   4f1dc:	2e08      	cmp	r6, #8
   4f1de:	d809      	bhi.n	4f1f4 <ff_wtoupper+0x4c>
   4f1e0:	e8df f006 	tbb	[pc, r6]
   4f1e4:	13100a05 	.word	0x13100a05
   4f1e8:	1b191715 	.word	0x1b191715
   4f1ec:	1d          	.byte	0x1d
   4f1ed:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
   4f1ee:	1a80      	subs	r0, r0, r2
   4f1f0:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
   4f1f4:	4618      	mov	r0, r3
	}

	return uni;
}
   4f1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
   4f1f8:	1a9a      	subs	r2, r3, r2
   4f1fa:	f002 0201 	and.w	r2, r2, #1
   4f1fe:	1a9a      	subs	r2, r3, r2
   4f200:	b293      	uxth	r3, r2
   4f202:	e7f7      	b.n	4f1f4 <ff_wtoupper+0x4c>
				case 2: uc -= 16; break;			/* Shift -16 */
   4f204:	3b10      	subs	r3, #16
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
   4f206:	b29b      	uxth	r3, r3
   4f208:	e7f4      	b.n	4f1f4 <ff_wtoupper+0x4c>
				case 3:	uc -= 32; break;			/* Shift -32 */
   4f20a:	3b20      	subs	r3, #32
   4f20c:	e7fb      	b.n	4f206 <ff_wtoupper+0x5e>
				case 4:	uc -= 48; break;			/* Shift -48 */
   4f20e:	3b30      	subs	r3, #48	; 0x30
   4f210:	e7f9      	b.n	4f206 <ff_wtoupper+0x5e>
				case 5:	uc -= 26; break;			/* Shift -26 */
   4f212:	3b1a      	subs	r3, #26
   4f214:	e7f7      	b.n	4f206 <ff_wtoupper+0x5e>
				case 6:	uc += 8; break;				/* Shift +8 */
   4f216:	3308      	adds	r3, #8
   4f218:	e7f5      	b.n	4f206 <ff_wtoupper+0x5e>
				case 7: uc -= 80; break;			/* Shift -80 */
   4f21a:	3b50      	subs	r3, #80	; 0x50
   4f21c:	e7f3      	b.n	4f206 <ff_wtoupper+0x5e>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
   4f21e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
   4f222:	e7f0      	b.n	4f206 <ff_wtoupper+0x5e>
			if (cmd == 0) p += nc;	/* Skip table if needed */
   4f224:	3404      	adds	r4, #4
   4f226:	2e00      	cmp	r6, #0
   4f228:	d1ca      	bne.n	4f1c0 <ff_wtoupper+0x18>
   4f22a:	eb01 0247 	add.w	r2, r1, r7, lsl #1
   4f22e:	e7c6      	b.n	4f1be <ff_wtoupper+0x16>
   4f230:	0005c9b8 	.word	0x0005c9b8
   4f234:	0005c8fc 	.word	0x0005c8fc

0004f238 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   4f238:	4a07      	ldr	r2, [pc, #28]	; (4f258 <SystemInit+0x20>)
   4f23a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   4f23e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   4f242:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   4f246:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   4f24a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   4f24e:	4b03      	ldr	r3, [pc, #12]	; (4f25c <SystemInit+0x24>)
   4f250:	4a03      	ldr	r2, [pc, #12]	; (4f260 <SystemInit+0x28>)
   4f252:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   4f254:	4770      	bx	lr
   4f256:	bf00      	nop
   4f258:	e000ed00 	.word	0xe000ed00
   4f25c:	2001a790 	.word	0x2001a790
   4f260:	03d09000 	.word	0x03d09000

0004f264 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   4f264:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   4f266:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   4f268:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   4f26a:	fab2 f382 	clz	r3, r2
   4f26e:	f1c3 031f 	rsb	r3, r3, #31
   4f272:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   4f274:	fa05 f403 	lsl.w	r4, r5, r3
   4f278:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   4f27c:	e8d0 6fef 	ldaex	r6, [r0]
   4f280:	4296      	cmp	r6, r2
   4f282:	d104      	bne.n	4f28e <nrfx_flag32_alloc+0x2a>
   4f284:	e8c0 4fec 	stlex	ip, r4, [r0]
   4f288:	f1bc 0f00 	cmp.w	ip, #0
   4f28c:	d1f6      	bne.n	4f27c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   4f28e:	d1eb      	bne.n	4f268 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   4f290:	4801      	ldr	r0, [pc, #4]	; (4f298 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   4f292:	700b      	strb	r3, [r1, #0]
}
   4f294:	bd70      	pop	{r4, r5, r6, pc}
   4f296:	bf00      	nop
   4f298:	0bad0000 	.word	0x0bad0000

0004f29c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   4f29c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   4f29e:	6803      	ldr	r3, [r0, #0]
   4f2a0:	40cb      	lsrs	r3, r1
   4f2a2:	07db      	lsls	r3, r3, #31
   4f2a4:	d410      	bmi.n	4f2c8 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   4f2a6:	2301      	movs	r3, #1
   4f2a8:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   4f2aa:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   4f2ac:	ea43 0102 	orr.w	r1, r3, r2
   4f2b0:	e8d0 4fef 	ldaex	r4, [r0]
   4f2b4:	4294      	cmp	r4, r2
   4f2b6:	d104      	bne.n	4f2c2 <nrfx_flag32_free+0x26>
   4f2b8:	e8c0 1fec 	stlex	ip, r1, [r0]
   4f2bc:	f1bc 0f00 	cmp.w	ip, #0
   4f2c0:	d1f6      	bne.n	4f2b0 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   4f2c2:	d1f2      	bne.n	4f2aa <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   4f2c4:	4801      	ldr	r0, [pc, #4]	; (4f2cc <nrfx_flag32_free+0x30>)
}
   4f2c6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   4f2c8:	4801      	ldr	r0, [pc, #4]	; (4f2d0 <nrfx_flag32_free+0x34>)
   4f2ca:	e7fc      	b.n	4f2c6 <nrfx_flag32_free+0x2a>
   4f2cc:	0bad0000 	.word	0x0bad0000
   4f2d0:	0bad0004 	.word	0x0bad0004

0004f2d4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   4f2d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   4f2d6:	4604      	mov	r4, r0
   4f2d8:	b118      	cbz	r0, 4f2e2 <clock_stop+0xe>
   4f2da:	2801      	cmp	r0, #1
   4f2dc:	d01e      	beq.n	4f31c <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   4f2de:	b003      	add	sp, #12
   4f2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   4f2e2:	2202      	movs	r2, #2
   4f2e4:	4b27      	ldr	r3, [pc, #156]	; (4f384 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   4f2e6:	4607      	mov	r7, r0
   4f2e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f2ec:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   4f2f0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4f2f4:	2201      	movs	r2, #1
   4f2f6:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   4f2f8:	2301      	movs	r3, #1
   4f2fa:	f242 7510 	movw	r5, #10000	; 0x2710
   4f2fe:	4e21      	ldr	r6, [pc, #132]	; (4f384 <clock_stop+0xb0>)
   4f300:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   4f304:	b1b4      	cbz	r4, 4f334 <clock_stop+0x60>
   4f306:	2c01      	cmp	r4, #1
   4f308:	d1e9      	bne.n	4f2de <clock_stop+0xa>
            if (p_clk_src != NULL)
   4f30a:	b387      	cbz	r7, 4f36e <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   4f30c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   4f310:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   4f314:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   4f316:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   4f31a:	e013      	b.n	4f344 <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f31c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   4f31e:	4b19      	ldr	r3, [pc, #100]	; (4f384 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   4f320:	f10d 0707 	add.w	r7, sp, #7
   4f324:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f328:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   4f32c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4f330:	6058      	str	r0, [r3, #4]
   4f332:	e7e1      	b.n	4f2f8 <clock_stop+0x24>
            if (p_clk_src != NULL)
   4f334:	b18f      	cbz	r7, 4f35a <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   4f336:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   4f33a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   4f33e:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   4f340:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   4f344:	03da      	lsls	r2, r3, #15
   4f346:	d5ca      	bpl.n	4f2de <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   4f348:	f89d 0007 	ldrb.w	r0, [sp, #7]
   4f34c:	2801      	cmp	r0, #1
   4f34e:	d1c6      	bne.n	4f2de <clock_stop+0xa>
   4f350:	f00a fa83 	bl	5985a <nrfx_busy_wait>
   4f354:	3d01      	subs	r5, #1
   4f356:	d1d5      	bne.n	4f304 <clock_stop+0x30>
   4f358:	e7c1      	b.n	4f2de <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   4f35a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   4f35e:	03d9      	lsls	r1, r3, #15
   4f360:	d5bd      	bpl.n	4f2de <clock_stop+0xa>
   4f362:	2001      	movs	r0, #1
   4f364:	f00a fa79 	bl	5985a <nrfx_busy_wait>
   4f368:	3d01      	subs	r5, #1
   4f36a:	d1f6      	bne.n	4f35a <clock_stop+0x86>
   4f36c:	e7b7      	b.n	4f2de <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   4f36e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   4f372:	03db      	lsls	r3, r3, #15
   4f374:	d5b3      	bpl.n	4f2de <clock_stop+0xa>
   4f376:	2001      	movs	r0, #1
   4f378:	f00a fa6f 	bl	5985a <nrfx_busy_wait>
   4f37c:	3d01      	subs	r5, #1
   4f37e:	d1f6      	bne.n	4f36e <clock_stop+0x9a>
   4f380:	e7ad      	b.n	4f2de <clock_stop+0xa>
   4f382:	bf00      	nop
   4f384:	40005000 	.word	0x40005000

0004f388 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   4f388:	4b04      	ldr	r3, [pc, #16]	; (4f39c <nrfx_clock_init+0x14>)
   4f38a:	791a      	ldrb	r2, [r3, #4]
   4f38c:	b922      	cbnz	r2, 4f398 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   4f38e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   4f390:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   4f392:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   4f394:	4802      	ldr	r0, [pc, #8]	; (4f3a0 <nrfx_clock_init+0x18>)
   4f396:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   4f398:	4802      	ldr	r0, [pc, #8]	; (4f3a4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   4f39a:	4770      	bx	lr
   4f39c:	2001b894 	.word	0x2001b894
   4f3a0:	0bad0000 	.word	0x0bad0000
   4f3a4:	0bad000c 	.word	0x0bad000c

0004f3a8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   4f3a8:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   4f3aa:	2005      	movs	r0, #5
   4f3ac:	f7f6 fcf2 	bl	45d94 <arch_irq_is_enabled>
   4f3b0:	b910      	cbnz	r0, 4f3b8 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   4f3b2:	2005      	movs	r0, #5
   4f3b4:	f7f6 fccc 	bl	45d50 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   4f3b8:	2201      	movs	r2, #1
   4f3ba:	4b02      	ldr	r3, [pc, #8]	; (4f3c4 <nrfx_clock_enable+0x1c>)
   4f3bc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   4f3c0:	bd08      	pop	{r3, pc}
   4f3c2:	bf00      	nop
   4f3c4:	40005000 	.word	0x40005000

0004f3c8 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   4f3c8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   4f3ca:	b110      	cbz	r0, 4f3d2 <nrfx_clock_start+0xa>
   4f3cc:	2801      	cmp	r0, #1
   4f3ce:	d02e      	beq.n	4f42e <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   4f3d0:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   4f3d2:	4a1c      	ldr	r2, [pc, #112]	; (4f444 <nrfx_clock_start+0x7c>)
   4f3d4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   4f3d8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   4f3dc:	03c9      	lsls	r1, r1, #15
   4f3de:	d40e      	bmi.n	4f3fe <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   4f3e0:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   4f3e4:	07db      	lsls	r3, r3, #31
   4f3e6:	d513      	bpl.n	4f410 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   4f3e8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   4f3ec:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   4f3f0:	3b01      	subs	r3, #1
   4f3f2:	2b01      	cmp	r3, #1
   4f3f4:	d809      	bhi.n	4f40a <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
   4f3f6:	2302      	movs	r3, #2
   4f3f8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   4f3fc:	e7e8      	b.n	4f3d0 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   4f3fe:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   4f402:	2b02      	cmp	r3, #2
   4f404:	d005      	beq.n	4f412 <nrfx_clock_start+0x4a>
   4f406:	2b01      	cmp	r3, #1
   4f408:	d002      	beq.n	4f410 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   4f40a:	2000      	movs	r0, #0
   4f40c:	f7ff ff62 	bl	4f2d4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   4f410:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   4f412:	4a0c      	ldr	r2, [pc, #48]	; (4f444 <nrfx_clock_start+0x7c>)
   4f414:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f418:	2300      	movs	r3, #0
   4f41a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   4f41e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   4f422:	2302      	movs	r3, #2
   4f424:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4f428:	2301      	movs	r3, #1
   4f42a:	6093      	str	r3, [r2, #8]
}
   4f42c:	e7d0      	b.n	4f3d0 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f42e:	2200      	movs	r2, #0
   4f430:	4b04      	ldr	r3, [pc, #16]	; (4f444 <nrfx_clock_start+0x7c>)
   4f432:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   4f436:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   4f43a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4f43e:	6018      	str	r0, [r3, #0]
}
   4f440:	e7c6      	b.n	4f3d0 <nrfx_clock_start+0x8>
   4f442:	bf00      	nop
   4f444:	40005000 	.word	0x40005000

0004f448 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   4f448:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   4f44a:	4b17      	ldr	r3, [pc, #92]	; (4f4a8 <nrfx_power_clock_irq_handler+0x60>)
   4f44c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   4f450:	b152      	cbz	r2, 4f468 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f452:	2000      	movs	r0, #0
   4f454:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   4f458:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   4f45c:	2201      	movs	r2, #1
   4f45e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   4f462:	4b12      	ldr	r3, [pc, #72]	; (4f4ac <nrfx_power_clock_irq_handler+0x64>)
   4f464:	681b      	ldr	r3, [r3, #0]
   4f466:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   4f468:	4b0f      	ldr	r3, [pc, #60]	; (4f4a8 <nrfx_power_clock_irq_handler+0x60>)
   4f46a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   4f46e:	b18a      	cbz	r2, 4f494 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f470:	2200      	movs	r2, #0
   4f472:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   4f476:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   4f47a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   4f47e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   4f482:	f002 0203 	and.w	r2, r2, #3
   4f486:	2a01      	cmp	r2, #1
   4f488:	f04f 0102 	mov.w	r1, #2
   4f48c:	d103      	bne.n	4f496 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   4f48e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4f492:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   4f494:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   4f496:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   4f49a:	4b04      	ldr	r3, [pc, #16]	; (4f4ac <nrfx_power_clock_irq_handler+0x64>)
   4f49c:	2001      	movs	r0, #1
}
   4f49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   4f4a2:	681b      	ldr	r3, [r3, #0]
   4f4a4:	4718      	bx	r3
   4f4a6:	bf00      	nop
   4f4a8:	40005000 	.word	0x40005000
   4f4ac:	2001b894 	.word	0x2001b894

0004f4b0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   4f4b0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   4f4b2:	4801      	ldr	r0, [pc, #4]	; (4f4b8 <nrfx_dppi_channel_alloc+0x8>)
   4f4b4:	f7ff bed6 	b.w	4f264 <nrfx_flag32_alloc>
   4f4b8:	2001a794 	.word	0x2001a794

0004f4bc <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4f4bc:	4a06      	ldr	r2, [pc, #24]	; (4f4d8 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   4f4be:	f000 001f 	and.w	r0, r0, #31
   4f4c2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4f4c6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
   4f4ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   4f4ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   4f4d2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   4f4d6:	4770      	bx	lr
   4f4d8:	40842500 	.word	0x40842500

0004f4dc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   4f4dc:	4b03      	ldr	r3, [pc, #12]	; (4f4ec <pin_in_use_by_te+0x10>)
   4f4de:	3008      	adds	r0, #8
   4f4e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   4f4e4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   4f4e8:	4770      	bx	lr
   4f4ea:	bf00      	nop
   4f4ec:	2001a798 	.word	0x2001a798

0004f4f0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   4f4f0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4f4f2:	4c0d      	ldr	r4, [pc, #52]	; (4f528 <call_handler+0x38>)
   4f4f4:	f100 0308 	add.w	r3, r0, #8
   4f4f8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   4f4fc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4f4fe:	05da      	lsls	r2, r3, #23
{
   4f500:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4f502:	d507      	bpl.n	4f514 <call_handler+0x24>
   4f504:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   4f508:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   4f50c:	6852      	ldr	r2, [r2, #4]
   4f50e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   4f512:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   4f514:	68a3      	ldr	r3, [r4, #8]
   4f516:	b12b      	cbz	r3, 4f524 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   4f518:	4631      	mov	r1, r6
   4f51a:	4628      	mov	r0, r5
   4f51c:	68e2      	ldr	r2, [r4, #12]
    }
}
   4f51e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   4f522:	4718      	bx	r3
}
   4f524:	bd70      	pop	{r4, r5, r6, pc}
   4f526:	bf00      	nop
   4f528:	2001a798 	.word	0x2001a798

0004f52c <release_handler>:
{
   4f52c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4f52e:	4a13      	ldr	r2, [pc, #76]	; (4f57c <release_handler+0x50>)
   4f530:	3008      	adds	r0, #8
   4f532:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   4f536:	05d9      	lsls	r1, r3, #23
   4f538:	d51c      	bpl.n	4f574 <release_handler+0x48>
   4f53a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   4f53e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   4f542:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   4f546:	2000      	movs	r0, #0
   4f548:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   4f54c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   4f550:	f413 7f80 	tst.w	r3, #256	; 0x100
   4f554:	d003      	beq.n	4f55e <release_handler+0x32>
   4f556:	f3c3 2343 	ubfx	r3, r3, #9, #4
   4f55a:	4299      	cmp	r1, r3
   4f55c:	d00a      	beq.n	4f574 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   4f55e:	3001      	adds	r0, #1
   4f560:	2820      	cmp	r0, #32
   4f562:	d1f3      	bne.n	4f54c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   4f564:	2300      	movs	r3, #0
   4f566:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   4f56a:	4805      	ldr	r0, [pc, #20]	; (4f580 <release_handler+0x54>)
}
   4f56c:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   4f570:	f7ff be94 	b.w	4f29c <nrfx_flag32_free>
}
   4f574:	f85d 4b04 	ldr.w	r4, [sp], #4
   4f578:	4770      	bx	lr
   4f57a:	bf00      	nop
   4f57c:	2001a798 	.word	0x2001a798
   4f580:	2001a7ec 	.word	0x2001a7ec

0004f584 <pin_handler_trigger_uninit>:
{
   4f584:	b538      	push	{r3, r4, r5, lr}
   4f586:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   4f588:	f7ff ffa8 	bl	4f4dc <pin_in_use_by_te>
   4f58c:	4c0b      	ldr	r4, [pc, #44]	; (4f5bc <pin_handler_trigger_uninit+0x38>)
   4f58e:	f102 0508 	add.w	r5, r2, #8
   4f592:	b160      	cbz	r0, 4f5ae <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   4f594:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   4f596:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   4f59a:	0b5b      	lsrs	r3, r3, #13
   4f59c:	009b      	lsls	r3, r3, #2
   4f59e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4f5a2:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   4f5a6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   4f5aa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   4f5ae:	4610      	mov	r0, r2
   4f5b0:	f7ff ffbc 	bl	4f52c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   4f5b4:	2300      	movs	r3, #0
   4f5b6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   4f5ba:	bd38      	pop	{r3, r4, r5, pc}
   4f5bc:	2001a798 	.word	0x2001a798

0004f5c0 <nrfx_gpiote_input_configure>:
{
   4f5c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4f5c4:	4604      	mov	r4, r0
   4f5c6:	461d      	mov	r5, r3
    if (p_input_config)
   4f5c8:	b309      	cbz	r1, 4f60e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f5ca:	4f4e      	ldr	r7, [pc, #312]	; (4f704 <nrfx_gpiote_input_configure+0x144>)
   4f5cc:	f100 0808 	add.w	r8, r0, #8
   4f5d0:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   4f5d4:	07b3      	lsls	r3, r6, #30
   4f5d6:	d506      	bpl.n	4f5e6 <nrfx_gpiote_input_configure+0x26>
   4f5d8:	f7ff ff80 	bl	4f4dc <pin_in_use_by_te>
   4f5dc:	b118      	cbz	r0, 4f5e6 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   4f5de:	484a      	ldr	r0, [pc, #296]	; (4f708 <nrfx_gpiote_input_configure+0x148>)
}
   4f5e0:	b002      	add	sp, #8
   4f5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4f5e6:	4849      	ldr	r0, [pc, #292]	; (4f70c <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
   4f5e8:	f004 031f 	and.w	r3, r4, #31
   4f5ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4f5f0:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   4f5f4:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   4f5f6:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   4f5fa:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   4f5fe:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   4f602:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   4f606:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   4f60a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
   4f60e:	b19a      	cbz	r2, 4f638 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f610:	4e3c      	ldr	r6, [pc, #240]	; (4f704 <nrfx_gpiote_input_configure+0x144>)
   4f612:	f104 0708 	add.w	r7, r4, #8
   4f616:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   4f61a:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
   4f61c:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   4f620:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
   4f622:	d00c      	beq.n	4f63e <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
   4f624:	2800      	cmp	r0, #0
   4f626:	d1da      	bne.n	4f5de <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   4f628:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
   4f62c:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   4f630:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
   4f634:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   4f638:	bbd5      	cbnz	r5, 4f6b0 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
   4f63a:	4835      	ldr	r0, [pc, #212]	; (4f710 <nrfx_gpiote_input_configure+0x150>)
   4f63c:	e7d0      	b.n	4f5e0 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   4f63e:	f021 0120 	bic.w	r1, r1, #32
   4f642:	04c9      	lsls	r1, r1, #19
   4f644:	0cc9      	lsrs	r1, r1, #19
   4f646:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   4f64a:	2800      	cmp	r0, #0
   4f64c:	d0ec      	beq.n	4f628 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   4f64e:	2b03      	cmp	r3, #3
   4f650:	d8c5      	bhi.n	4f5de <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   4f652:	6852      	ldr	r2, [r2, #4]
   4f654:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   4f658:	4662      	mov	r2, ip
   4f65a:	0092      	lsls	r2, r2, #2
   4f65c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   4f660:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   4f664:	b923      	cbnz	r3, 4f670 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
   4f666:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   4f66a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
   4f66e:	e7db      	b.n	4f628 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   4f670:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   4f674:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   4f678:	f020 0003 	bic.w	r0, r0, #3
   4f67c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   4f680:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   4f684:	f041 0120 	orr.w	r1, r1, #32
   4f688:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   4f68c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   4f690:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4f694:	0220      	lsls	r0, r4, #8
   4f696:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   4f69a:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   4f69e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   4f6a2:	ea40 000e 	orr.w	r0, r0, lr
   4f6a6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   4f6aa:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   4f6ae:	e7bb      	b.n	4f628 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
   4f6b0:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   4f6b2:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   4f6b6:	f7ff ff39 	bl	4f52c <release_handler>
    if (!handler)
   4f6ba:	2e00      	cmp	r6, #0
   4f6bc:	d0bd      	beq.n	4f63a <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   4f6be:	4d11      	ldr	r5, [pc, #68]	; (4f704 <nrfx_gpiote_input_configure+0x144>)
   4f6c0:	e9d5 2300 	ldrd	r2, r3, [r5]
   4f6c4:	4296      	cmp	r6, r2
   4f6c6:	d101      	bne.n	4f6cc <nrfx_gpiote_input_configure+0x10c>
   4f6c8:	429f      	cmp	r7, r3
   4f6ca:	d018      	beq.n	4f6fe <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   4f6cc:	4811      	ldr	r0, [pc, #68]	; (4f714 <nrfx_gpiote_input_configure+0x154>)
   4f6ce:	f10d 0107 	add.w	r1, sp, #7
   4f6d2:	f7ff fdc7 	bl	4f264 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   4f6d6:	4b0e      	ldr	r3, [pc, #56]	; (4f710 <nrfx_gpiote_input_configure+0x150>)
   4f6d8:	4298      	cmp	r0, r3
   4f6da:	d181      	bne.n	4f5e0 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   4f6dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   4f6e0:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   4f6e4:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   4f6e6:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   4f6e8:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   4f6ec:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   4f6f0:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   4f6f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   4f6f8:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   4f6fc:	e79d      	b.n	4f63a <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   4f6fe:	2200      	movs	r2, #0
   4f700:	e7ee      	b.n	4f6e0 <nrfx_gpiote_input_configure+0x120>
   4f702:	bf00      	nop
   4f704:	2001a798 	.word	0x2001a798
   4f708:	0bad0004 	.word	0x0bad0004
   4f70c:	40842500 	.word	0x40842500
   4f710:	0bad0000 	.word	0x0bad0000
   4f714:	2001a7ec 	.word	0x2001a7ec

0004f718 <nrfx_gpiote_output_configure>:
{
   4f718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4f71a:	4604      	mov	r4, r0
    if (p_config)
   4f71c:	b379      	cbz	r1, 4f77e <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f71e:	4e3a      	ldr	r6, [pc, #232]	; (4f808 <nrfx_gpiote_output_configure+0xf0>)
   4f720:	f100 0708 	add.w	r7, r0, #8
   4f724:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   4f728:	07ab      	lsls	r3, r5, #30
   4f72a:	d404      	bmi.n	4f736 <nrfx_gpiote_output_configure+0x1e>
   4f72c:	f7ff fed6 	bl	4f4dc <pin_in_use_by_te>
   4f730:	b108      	cbz	r0, 4f736 <nrfx_gpiote_output_configure+0x1e>
{
   4f732:	4836      	ldr	r0, [pc, #216]	; (4f80c <nrfx_gpiote_output_configure+0xf4>)
}
   4f734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   4f736:	f015 0f1c 	tst.w	r5, #28
   4f73a:	784b      	ldrb	r3, [r1, #1]
   4f73c:	d122      	bne.n	4f784 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   4f73e:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4f742:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 4f810 <nrfx_gpiote_output_configure+0xf8>
   4f746:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   4f74a:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   4f74e:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   4f752:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   4f754:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   4f758:	7809      	ldrb	r1, [r1, #0]
   4f75a:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
   4f75e:	f02c 0c07 	bic.w	ip, ip, #7
   4f762:	ea43 030c 	orr.w	r3, r3, ip
   4f766:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   4f76a:	4929      	ldr	r1, [pc, #164]	; (4f810 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   4f76c:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   4f770:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   4f772:	f045 0503 	orr.w	r5, r5, #3
   4f776:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   4f77a:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   4f77e:	b922      	cbnz	r2, 4f78a <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
   4f780:	4824      	ldr	r0, [pc, #144]	; (4f814 <nrfx_gpiote_output_configure+0xfc>)
   4f782:	e7d7      	b.n	4f734 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   4f784:	2b01      	cmp	r3, #1
   4f786:	d1da      	bne.n	4f73e <nrfx_gpiote_output_configure+0x26>
   4f788:	e7d3      	b.n	4f732 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f78a:	4e1f      	ldr	r6, [pc, #124]	; (4f808 <nrfx_gpiote_output_configure+0xf0>)
   4f78c:	f104 0708 	add.w	r7, r4, #8
   4f790:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   4f794:	0783      	lsls	r3, r0, #30
   4f796:	d5cc      	bpl.n	4f732 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   4f798:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   4f79c:	2300      	movs	r3, #0
   4f79e:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   4f7a0:	f020 0020 	bic.w	r0, r0, #32
   4f7a4:	0089      	lsls	r1, r1, #2
   4f7a6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   4f7aa:	04c0      	lsls	r0, r0, #19
   4f7ac:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   4f7b0:	0cc0      	lsrs	r0, r0, #19
   4f7b2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   4f7b6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   4f7ba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   4f7be:	7855      	ldrb	r5, [r2, #1]
   4f7c0:	2d00      	cmp	r5, #0
   4f7c2:	d0dd      	beq.n	4f780 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   4f7c4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   4f7c8:	7892      	ldrb	r2, [r2, #2]
   4f7ca:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   4f7ce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   4f7d2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4f7d6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   4f7da:	0223      	lsls	r3, r4, #8
   4f7dc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   4f7e0:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4f7e2:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   4f7e6:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   4f7ea:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4f7ec:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   4f7ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   4f7f2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4f7f6:	4313      	orrs	r3, r2
   4f7f8:	f040 0020 	orr.w	r0, r0, #32
   4f7fc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   4f800:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   4f804:	e7bc      	b.n	4f780 <nrfx_gpiote_output_configure+0x68>
   4f806:	bf00      	nop
   4f808:	2001a798 	.word	0x2001a798
   4f80c:	0bad0004 	.word	0x0bad0004
   4f810:	40842500 	.word	0x40842500
   4f814:	0bad0000 	.word	0x0bad0000

0004f818 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   4f818:	4b01      	ldr	r3, [pc, #4]	; (4f820 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   4f81a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   4f81e:	4770      	bx	lr
   4f820:	2001a798 	.word	0x2001a798

0004f824 <nrfx_gpiote_channel_get>:
{
   4f824:	b508      	push	{r3, lr}
   4f826:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   4f828:	f7ff fe58 	bl	4f4dc <pin_in_use_by_te>
   4f82c:	b138      	cbz	r0, 4f83e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   4f82e:	4b05      	ldr	r3, [pc, #20]	; (4f844 <nrfx_gpiote_channel_get+0x20>)
   4f830:	3208      	adds	r2, #8
   4f832:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   4f836:	4804      	ldr	r0, [pc, #16]	; (4f848 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   4f838:	0b5b      	lsrs	r3, r3, #13
   4f83a:	700b      	strb	r3, [r1, #0]
}
   4f83c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   4f83e:	4803      	ldr	r0, [pc, #12]	; (4f84c <nrfx_gpiote_channel_get+0x28>)
   4f840:	e7fc      	b.n	4f83c <nrfx_gpiote_channel_get+0x18>
   4f842:	bf00      	nop
   4f844:	2001a798 	.word	0x2001a798
   4f848:	0bad0000 	.word	0x0bad0000
   4f84c:	0bad0004 	.word	0x0bad0004

0004f850 <nrfx_gpiote_init>:
{
   4f850:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   4f852:	4c0f      	ldr	r4, [pc, #60]	; (4f890 <nrfx_gpiote_init+0x40>)
   4f854:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   4f858:	b9bd      	cbnz	r5, 4f88a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   4f85a:	2240      	movs	r2, #64	; 0x40
   4f85c:	4629      	mov	r1, r5
   4f85e:	f104 0010 	add.w	r0, r4, #16
   4f862:	f00b fb34 	bl	5aece <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   4f866:	2031      	movs	r0, #49	; 0x31
   4f868:	f7f6 fa72 	bl	45d50 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4f86c:	4b09      	ldr	r3, [pc, #36]	; (4f894 <nrfx_gpiote_init+0x44>)
    return err_code;
   4f86e:	480a      	ldr	r0, [pc, #40]	; (4f898 <nrfx_gpiote_init+0x48>)
   4f870:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   4f874:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   4f878:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   4f87c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   4f880:	2301      	movs	r3, #1
   4f882:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   4f886:	6563      	str	r3, [r4, #84]	; 0x54
}
   4f888:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   4f88a:	4804      	ldr	r0, [pc, #16]	; (4f89c <nrfx_gpiote_init+0x4c>)
   4f88c:	e7fc      	b.n	4f888 <nrfx_gpiote_init+0x38>
   4f88e:	bf00      	nop
   4f890:	2001a798 	.word	0x2001a798
   4f894:	40031000 	.word	0x40031000
   4f898:	0bad0000 	.word	0x0bad0000
   4f89c:	0bad0005 	.word	0x0bad0005

0004f8a0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   4f8a0:	4b03      	ldr	r3, [pc, #12]	; (4f8b0 <nrfx_gpiote_is_init+0x10>)
   4f8a2:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   4f8a6:	3800      	subs	r0, #0
   4f8a8:	bf18      	it	ne
   4f8aa:	2001      	movne	r0, #1
   4f8ac:	4770      	bx	lr
   4f8ae:	bf00      	nop
   4f8b0:	2001a798 	.word	0x2001a798

0004f8b4 <nrfx_gpiote_channel_free>:
{
   4f8b4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   4f8b6:	4801      	ldr	r0, [pc, #4]	; (4f8bc <nrfx_gpiote_channel_free+0x8>)
   4f8b8:	f7ff bcf0 	b.w	4f29c <nrfx_flag32_free>
   4f8bc:	2001a7e8 	.word	0x2001a7e8

0004f8c0 <nrfx_gpiote_channel_alloc>:
{
   4f8c0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   4f8c2:	4801      	ldr	r0, [pc, #4]	; (4f8c8 <nrfx_gpiote_channel_alloc+0x8>)
   4f8c4:	f7ff bcce 	b.w	4f264 <nrfx_flag32_alloc>
   4f8c8:	2001a7e8 	.word	0x2001a7e8

0004f8cc <nrfx_gpiote_trigger_enable>:
{
   4f8cc:	4602      	mov	r2, r0
   4f8ce:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   4f8d0:	f7ff fe04 	bl	4f4dc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f8d4:	4b1b      	ldr	r3, [pc, #108]	; (4f944 <nrfx_gpiote_trigger_enable+0x78>)
   4f8d6:	f102 0408 	add.w	r4, r2, #8
   4f8da:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   4f8de:	b1c8      	cbz	r0, 4f914 <nrfx_gpiote_trigger_enable+0x48>
   4f8e0:	f013 0402 	ands.w	r4, r3, #2
   4f8e4:	d116      	bne.n	4f914 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
   4f8e6:	4818      	ldr	r0, [pc, #96]	; (4f948 <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   4f8e8:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   4f8ea:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4f8ec:	5084      	str	r4, [r0, r2]
   4f8ee:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   4f8f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   4f8f4:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   4f8f8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   4f8fc:	f040 0001 	orr.w	r0, r0, #1
   4f900:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   4f904:	b129      	cbz	r1, 4f912 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   4f906:	2201      	movs	r2, #1
   4f908:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   4f90c:	4a0f      	ldr	r2, [pc, #60]	; (4f94c <nrfx_gpiote_trigger_enable+0x80>)
   4f90e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   4f912:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   4f914:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   4f918:	2b04      	cmp	r3, #4
   4f91a:	d00e      	beq.n	4f93a <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   4f91c:	2b05      	cmp	r3, #5
   4f91e:	d00e      	beq.n	4f93e <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
   4f920:	4b0b      	ldr	r3, [pc, #44]	; (4f950 <nrfx_gpiote_trigger_enable+0x84>)
   4f922:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   4f924:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   4f928:	40d9      	lsrs	r1, r3
   4f92a:	f001 0101 	and.w	r1, r1, #1
   4f92e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   4f930:	4610      	mov	r0, r2
}
   4f932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   4f936:	f7ff bdc1 	b.w	4f4bc <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   4f93a:	2103      	movs	r1, #3
   4f93c:	e7f8      	b.n	4f930 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   4f93e:	2102      	movs	r1, #2
   4f940:	e7f6      	b.n	4f930 <nrfx_gpiote_trigger_enable+0x64>
   4f942:	bf00      	nop
   4f944:	2001a798 	.word	0x2001a798
   4f948:	40031100 	.word	0x40031100
   4f94c:	40031000 	.word	0x40031000
   4f950:	40842500 	.word	0x40842500

0004f954 <nrfx_gpiote_trigger_disable>:
{
   4f954:	b508      	push	{r3, lr}
   4f956:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   4f958:	f7ff fdc0 	bl	4f4dc <pin_in_use_by_te>
   4f95c:	b1c0      	cbz	r0, 4f990 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f95e:	4b0f      	ldr	r3, [pc, #60]	; (4f99c <nrfx_gpiote_trigger_disable+0x48>)
   4f960:	f102 0108 	add.w	r1, r2, #8
   4f964:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   4f968:	0799      	lsls	r1, r3, #30
   4f96a:	d411      	bmi.n	4f990 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   4f96c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   4f96e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   4f970:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   4f972:	490b      	ldr	r1, [pc, #44]	; (4f9a0 <nrfx_gpiote_trigger_disable+0x4c>)
   4f974:	009b      	lsls	r3, r3, #2
   4f976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4f97a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   4f97e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   4f982:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   4f986:	f022 0203 	bic.w	r2, r2, #3
   4f98a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   4f98e:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   4f990:	2100      	movs	r1, #0
}
   4f992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   4f996:	4610      	mov	r0, r2
   4f998:	f7ff bd90 	b.w	4f4bc <nrf_gpio_cfg_sense_set>
   4f99c:	2001a798 	.word	0x2001a798
   4f9a0:	40031000 	.word	0x40031000

0004f9a4 <nrfx_gpiote_pin_uninit>:
{
   4f9a4:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   4f9a6:	4b0c      	ldr	r3, [pc, #48]	; (4f9d8 <nrfx_gpiote_pin_uninit+0x34>)
   4f9a8:	f100 0208 	add.w	r2, r0, #8
   4f9ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   4f9b0:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   4f9b2:	07db      	lsls	r3, r3, #31
   4f9b4:	d50d      	bpl.n	4f9d2 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   4f9b6:	f7ff ffcd 	bl	4f954 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   4f9ba:	4620      	mov	r0, r4
   4f9bc:	f7ff fde2 	bl	4f584 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   4f9c0:	2202      	movs	r2, #2
   4f9c2:	4b06      	ldr	r3, [pc, #24]	; (4f9dc <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   4f9c4:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   4f9c8:	3480      	adds	r4, #128	; 0x80
   4f9ca:	4805      	ldr	r0, [pc, #20]	; (4f9e0 <nrfx_gpiote_pin_uninit+0x3c>)
   4f9cc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   4f9d0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   4f9d2:	4804      	ldr	r0, [pc, #16]	; (4f9e4 <nrfx_gpiote_pin_uninit+0x40>)
   4f9d4:	e7fc      	b.n	4f9d0 <nrfx_gpiote_pin_uninit+0x2c>
   4f9d6:	bf00      	nop
   4f9d8:	2001a798 	.word	0x2001a798
   4f9dc:	40842500 	.word	0x40842500
   4f9e0:	0bad0000 	.word	0x0bad0000
   4f9e4:	0bad0004 	.word	0x0bad0004

0004f9e8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   4f9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   4f9ec:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   4f9ee:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4f9f0:	462c      	mov	r4, r5
{
   4f9f2:	4b4d      	ldr	r3, [pc, #308]	; (4fb28 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   4f9f4:	484d      	ldr	r0, [pc, #308]	; (4fb2c <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   4f9f6:	494e      	ldr	r1, [pc, #312]	; (4fb30 <nrfx_gpiote_irq_handler+0x148>)
{
   4f9f8:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4f9fa:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   4f9fc:	b136      	cbz	r6, 4fa0c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   4f9fe:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   4fa02:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4fa04:	bf1e      	ittt	ne
   4fa06:	601c      	strne	r4, [r3, #0]
   4fa08:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   4fa0a:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   4fa0c:	3304      	adds	r3, #4
   4fa0e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   4fa10:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   4fa14:	d1f1      	bne.n	4f9fa <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4fa16:	4f45      	ldr	r7, [pc, #276]	; (4fb2c <nrfx_gpiote_irq_handler+0x144>)
   4fa18:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   4fa1c:	b193      	cbz	r3, 4fa44 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
   4fa1e:	4e45      	ldr	r6, [pc, #276]	; (4fb34 <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   4fa20:	f10d 090c 	add.w	r9, sp, #12
   4fa24:	6a33      	ldr	r3, [r6, #32]
   4fa26:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   4fa28:	6233      	str	r3, [r6, #32]
   4fa2a:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
   4fa2e:	9803      	ldr	r0, [sp, #12]
   4fa30:	b970      	cbnz	r0, 4fa50 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4fa32:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
   4fa36:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   4fa3a:	6a33      	ldr	r3, [r6, #32]
   4fa3c:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   4fa3e:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
   4fa40:	2b00      	cmp	r3, #0
   4fa42:	d1f2      	bne.n	4fa2a <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   4fa44:	2401      	movs	r4, #1
    while (mask)
   4fa46:	2d00      	cmp	r5, #0
   4fa48:	d156      	bne.n	4faf8 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   4fa4a:	b005      	add	sp, #20
   4fa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   4fa50:	fa90 fba0 	rbit	fp, r0
   4fa54:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   4fa58:	4a37      	ldr	r2, [pc, #220]	; (4fb38 <nrfx_gpiote_irq_handler+0x150>)
   4fa5a:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   4fa5e:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
   4fa62:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   4fa66:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   4fa6a:	f819 300c 	ldrb.w	r3, [r9, ip]
   4fa6e:	fa0a f404 	lsl.w	r4, sl, r4
   4fa72:	ea23 0304 	bic.w	r3, r3, r4
   4fa76:	f809 300c 	strb.w	r3, [r9, ip]
   4fa7a:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   4fa7e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   4fa82:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
   4fa86:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   4fa88:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   4fa8a:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   4fa8e:	d518      	bpl.n	4fac2 <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
   4fa90:	4611      	mov	r1, r2
   4fa92:	4658      	mov	r0, fp
   4fa94:	9301      	str	r3, [sp, #4]
   4fa96:	f7ff fd2b 	bl	4f4f0 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   4fa9a:	9b01      	ldr	r3, [sp, #4]
   4fa9c:	b2e4      	uxtb	r4, r4
   4fa9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   4faa2:	f3c3 4301 	ubfx	r3, r3, #16, #2
   4faa6:	429c      	cmp	r4, r3
   4faa8:	d107      	bne.n	4faba <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   4faaa:	2100      	movs	r1, #0
   4faac:	4658      	mov	r0, fp
   4faae:	f7ff fd05 	bl	4f4bc <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   4fab2:	4621      	mov	r1, r4
   4fab4:	4658      	mov	r0, fp
   4fab6:	f7ff fd01 	bl	4f4bc <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   4faba:	fa0a f00b 	lsl.w	r0, sl, fp
   4fabe:	6230      	str	r0, [r6, #32]
}
   4fac0:	e7b5      	b.n	4fa2e <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   4fac2:	2c02      	cmp	r4, #2
   4fac4:	d10c      	bne.n	4fae0 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   4fac6:	2103      	movs	r1, #3
   4fac8:	4658      	mov	r0, fp
   4faca:	f7ff fcf7 	bl	4f4bc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   4face:	f008 0305 	and.w	r3, r8, #5
   4fad2:	2b01      	cmp	r3, #1
   4fad4:	d1f1      	bne.n	4faba <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
   4fad6:	4641      	mov	r1, r8
   4fad8:	4658      	mov	r0, fp
   4fada:	f7ff fd09 	bl	4f4f0 <call_handler>
   4fade:	e7ec      	b.n	4faba <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   4fae0:	2102      	movs	r1, #2
   4fae2:	4658      	mov	r0, fp
   4fae4:	9201      	str	r2, [sp, #4]
   4fae6:	f7ff fce9 	bl	4f4bc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   4faea:	9a01      	ldr	r2, [sp, #4]
   4faec:	2a03      	cmp	r2, #3
   4faee:	d0f2      	beq.n	4fad6 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   4faf0:	2c03      	cmp	r4, #3
   4faf2:	d1e2      	bne.n	4faba <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   4faf4:	428a      	cmp	r2, r1
   4faf6:	e7ed      	b.n	4fad4 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
   4faf8:	fa95 f3a5 	rbit	r3, r5
   4fafc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   4fb00:	fa04 f203 	lsl.w	r2, r4, r3
   4fb04:	009b      	lsls	r3, r3, #2
   4fb06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4fb0a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   4fb0e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   4fb12:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   4fb16:	f3c0 2004 	ubfx	r0, r0, #8, #5
   4fb1a:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   4fb1e:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   4fb22:	f7ff fce5 	bl	4f4f0 <call_handler>
   4fb26:	e78e      	b.n	4fa46 <nrfx_gpiote_irq_handler+0x5e>
   4fb28:	40031100 	.word	0x40031100
   4fb2c:	40031000 	.word	0x40031000
   4fb30:	40031120 	.word	0x40031120
   4fb34:	40842500 	.word	0x40842500
   4fb38:	2001a798 	.word	0x2001a798

0004fb3c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   4fb3c:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   4fb3e:	4c08      	ldr	r4, [pc, #32]	; (4fb60 <nrfx_ipc_init+0x24>)
{
   4fb40:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   4fb42:	7923      	ldrb	r3, [r4, #4]
{
   4fb44:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   4fb46:	b943      	cbnz	r3, 4fb5a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   4fb48:	202a      	movs	r0, #42	; 0x2a
   4fb4a:	f7f6 f901 	bl	45d50 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   4fb4e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   4fb50:	4804      	ldr	r0, [pc, #16]	; (4fb64 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   4fb52:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   4fb54:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   4fb56:	60a5      	str	r5, [r4, #8]
}
   4fb58:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   4fb5a:	4803      	ldr	r0, [pc, #12]	; (4fb68 <nrfx_ipc_init+0x2c>)
   4fb5c:	e7fc      	b.n	4fb58 <nrfx_ipc_init+0x1c>
   4fb5e:	bf00      	nop
   4fb60:	2001b89c 	.word	0x2001b89c
   4fb64:	0bad0000 	.word	0x0bad0000
   4fb68:	0bad000c 	.word	0x0bad000c

0004fb6c <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   4fb6c:	2300      	movs	r3, #0
{
   4fb6e:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   4fb70:	4a0d      	ldr	r2, [pc, #52]	; (4fba8 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   4fb72:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   4fb76:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   4fb7a:	3301      	adds	r3, #1
   4fb7c:	2b08      	cmp	r3, #8
   4fb7e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   4fb82:	d1f6      	bne.n	4fb72 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   4fb84:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   4fb86:	4a08      	ldr	r2, [pc, #32]	; (4fba8 <nrfx_ipc_config_load+0x3c>)
   4fb88:	f100 011c 	add.w	r1, r0, #28
   4fb8c:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   4fb90:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   4fb94:	3301      	adds	r3, #1
   4fb96:	2b08      	cmp	r3, #8
   4fb98:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   4fb9c:	d1f6      	bne.n	4fb8c <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   4fb9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   4fba0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   4fba4:	bd30      	pop	{r4, r5, pc}
   4fba6:	bf00      	nop
   4fba8:	4002a000 	.word	0x4002a000

0004fbac <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   4fbac:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   4fbae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->SEND_CNF[index] = channels_mask;
   4fbb2:	4a13      	ldr	r2, [pc, #76]	; (4fc00 <nrfx_ipc_uninit+0x54>)
   4fbb4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   4fbb8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   4fbbc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   4fbc0:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   4fbc4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   4fbc8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   4fbcc:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   4fbd0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   4fbd4:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   4fbd8:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   4fbdc:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   4fbe0:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   4fbe4:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   4fbe8:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   4fbec:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   4fbf0:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   4fbf4:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   4fbf8:	4a02      	ldr	r2, [pc, #8]	; (4fc04 <nrfx_ipc_uninit+0x58>)
   4fbfa:	7113      	strb	r3, [r2, #4]
}
   4fbfc:	4770      	bx	lr
   4fbfe:	bf00      	nop
   4fc00:	4002a000 	.word	0x4002a000
   4fc04:	2001b89c 	.word	0x2001b89c

0004fc08 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   4fc08:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   4fc0a:	4a02      	ldr	r2, [pc, #8]	; (4fc14 <nrfx_ipc_receive_event_enable+0xc>)
   4fc0c:	4083      	lsls	r3, r0
   4fc0e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   4fc12:	4770      	bx	lr
   4fc14:	4002a000 	.word	0x4002a000

0004fc18 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   4fc18:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   4fc1a:	4a02      	ldr	r2, [pc, #8]	; (4fc24 <nrfx_ipc_receive_event_disable+0xc>)
   4fc1c:	4083      	lsls	r3, r0
   4fc1e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   4fc22:	4770      	bx	lr
   4fc24:	4002a000 	.word	0x4002a000

0004fc28 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   4fc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   4fc2a:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4fc2c:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   4fc2e:	4b0b      	ldr	r3, [pc, #44]	; (4fc5c <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   4fc30:	4d0b      	ldr	r5, [pc, #44]	; (4fc60 <nrfx_ipc_irq_handler+0x38>)
   4fc32:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   4fc36:	b904      	cbnz	r4, 4fc3a <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   4fc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   4fc3a:	fa94 f0a4 	rbit	r0, r4
   4fc3e:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   4fc42:	fa06 f300 	lsl.w	r3, r6, r0
   4fc46:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4fc4a:	4b06      	ldr	r3, [pc, #24]	; (4fc64 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   4fc4c:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4fc4e:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   4fc50:	682b      	ldr	r3, [r5, #0]
   4fc52:	2b00      	cmp	r3, #0
   4fc54:	d0ef      	beq.n	4fc36 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   4fc56:	68a9      	ldr	r1, [r5, #8]
   4fc58:	4798      	blx	r3
   4fc5a:	e7ec      	b.n	4fc36 <nrfx_ipc_irq_handler+0xe>
   4fc5c:	4002a000 	.word	0x4002a000
   4fc60:	2001b89c 	.word	0x2001b89c
   4fc64:	4002a100 	.word	0x4002a100

0004fc68 <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   4fc68:	1c43      	adds	r3, r0, #1
   4fc6a:	d006      	beq.n	4fc7a <spim_pin_uninit+0x12>
    reg->PIN_CNF[pin_number] = cnf;
   4fc6c:	2202      	movs	r2, #2
   4fc6e:	4b03      	ldr	r3, [pc, #12]	; (4fc7c <spim_pin_uninit+0x14>)
    *p_pin = pin_number & 0x1F;
   4fc70:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
   4fc74:	3080      	adds	r0, #128	; 0x80
   4fc76:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
   4fc7a:	4770      	bx	lr
   4fc7c:	40842500 	.word	0x40842500

0004fc80 <nrf_gpio_pin_write>:
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   4fc80:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
   4fc82:	f000 001f 	and.w	r0, r0, #31
   4fc86:	4a03      	ldr	r2, [pc, #12]	; (4fc94 <nrf_gpio_pin_write+0x14>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   4fc88:	4083      	lsls	r3, r0
    if (value == 0)
   4fc8a:	b909      	cbnz	r1, 4fc90 <nrf_gpio_pin_write+0x10>
    p_reg->OUTCLR = clr_mask;
   4fc8c:	60d3      	str	r3, [r2, #12]
}
   4fc8e:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
   4fc90:	6093      	str	r3, [r2, #8]
}
   4fc92:	4770      	bx	lr
   4fc94:	40842500 	.word	0x40842500

0004fc98 <nrfx_spim_init>:
{
   4fc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4fc9c:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   4fc9e:	4d4e      	ldr	r5, [pc, #312]	; (4fdd8 <nrfx_spim_init+0x140>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   4fca0:	7901      	ldrb	r1, [r0, #4]
{
   4fca2:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   4fca4:	014f      	lsls	r7, r1, #5
   4fca6:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   4fcaa:	7f08      	ldrb	r0, [r1, #28]
   4fcac:	2800      	cmp	r0, #0
   4fcae:	f040 8090 	bne.w	4fdd2 <nrfx_spim_init+0x13a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   4fcb2:	f8d6 8000 	ldr.w	r8, [r6]
    p_cb->handler = handler;
   4fcb6:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
   4fcb8:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   4fcba:	7be0      	ldrb	r0, [r4, #15]
   4fcbc:	7f8a      	ldrb	r2, [r1, #30]
   4fcbe:	f360 0200 	bfi	r2, r0, #0, #1
   4fcc2:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   4fcc4:	7920      	ldrb	r0, [r4, #4]
   4fcc6:	b2d2      	uxtb	r2, r2
   4fcc8:	f360 0241 	bfi	r2, r0, #1, #1
   4fccc:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
   4fcce:	78e3      	ldrb	r3, [r4, #3]
   4fcd0:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
   4fcd2:	7be3      	ldrb	r3, [r4, #15]
   4fcd4:	f8d6 a000 	ldr.w	sl, [r6]
   4fcd8:	2b00      	cmp	r3, #0
   4fcda:	d138      	bne.n	4fd4e <nrfx_spim_init+0xb6>
        nrf_gpio_pin_write(p_config->sck_pin,
   4fcdc:	7b21      	ldrb	r1, [r4, #12]
   4fcde:	7820      	ldrb	r0, [r4, #0]
   4fce0:	2901      	cmp	r1, #1
   4fce2:	bf94      	ite	ls
   4fce4:	2100      	movls	r1, #0
   4fce6:	2101      	movhi	r1, #1
   4fce8:	f7ff ffca 	bl	4fc80 <nrf_gpio_pin_write>
    reg->PIN_CNF[pin_number] = cnf;
   4fcec:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   4fcee:	7823      	ldrb	r3, [r4, #0]
    reg->PIN_CNF[pin_number] = cnf;
   4fcf0:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 4fde4 <nrfx_spim_init+0x14c>
    *p_pin = pin_number & 0x1F;
   4fcf4:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   4fcf8:	3380      	adds	r3, #128	; 0x80
   4fcfa:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   4fcfe:	7863      	ldrb	r3, [r4, #1]
   4fd00:	2bff      	cmp	r3, #255	; 0xff
   4fd02:	d00b      	beq.n	4fd1c <nrfx_spim_init+0x84>
    *p_pin = pin_number & 0x1F;
   4fd04:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   4fd08:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
   4fd0a:	f8c9 200c 	str.w	r2, [r9, #12]
    reg->PIN_CNF[pin_number] = cnf;
   4fd0e:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   4fd10:	7863      	ldrb	r3, [r4, #1]
   4fd12:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   4fd16:	3380      	adds	r3, #128	; 0x80
   4fd18:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   4fd1c:	78a3      	ldrb	r3, [r4, #2]
   4fd1e:	2bff      	cmp	r3, #255	; 0xff
   4fd20:	d006      	beq.n	4fd30 <nrfx_spim_init+0x98>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   4fd22:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
   4fd24:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   4fd28:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
   4fd2a:	3380      	adds	r3, #128	; 0x80
   4fd2c:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   4fd30:	78e0      	ldrb	r0, [r4, #3]
   4fd32:	28ff      	cmp	r0, #255	; 0xff
   4fd34:	d00b      	beq.n	4fd4e <nrfx_spim_init+0xb6>
                               p_config->ss_active_high ? 0 : 1);
   4fd36:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   4fd38:	f081 0101 	eor.w	r1, r1, #1
   4fd3c:	f7ff ffa0 	bl	4fc80 <nrf_gpio_pin_write>
   4fd40:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   4fd42:	78e3      	ldrb	r3, [r4, #3]
   4fd44:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   4fd48:	3380      	adds	r3, #128	; 0x80
   4fd4a:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   4fd4e:	7c23      	ldrb	r3, [r4, #16]
   4fd50:	b993      	cbnz	r3, 4fd78 <nrfx_spim_init+0xe0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   4fd52:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   4fd54:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   4fd56:	2bff      	cmp	r3, #255	; 0xff
   4fd58:	bf18      	it	ne
   4fd5a:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   4fd5c:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   4fd5e:	bf08      	it	eq
   4fd60:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   4fd64:	2bff      	cmp	r3, #255	; 0xff
   4fd66:	bf08      	it	eq
   4fd68:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   4fd6c:	f8ca 1508 	str.w	r1, [sl, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   4fd70:	f8ca 250c 	str.w	r2, [sl, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   4fd74:	f8ca 3510 	str.w	r3, [sl, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   4fd78:	68a3      	ldr	r3, [r4, #8]
   4fd7a:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   4fd7e:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   4fd80:	7b22      	ldrb	r2, [r4, #12]
   4fd82:	3b00      	subs	r3, #0
   4fd84:	bf18      	it	ne
   4fd86:	2301      	movne	r3, #1
    switch (spi_mode)
   4fd88:	2a02      	cmp	r2, #2
   4fd8a:	d01c      	beq.n	4fdc6 <nrfx_spim_init+0x12e>
   4fd8c:	2a03      	cmp	r2, #3
   4fd8e:	d01d      	beq.n	4fdcc <nrfx_spim_init+0x134>
   4fd90:	2a01      	cmp	r2, #1
   4fd92:	d101      	bne.n	4fd98 <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   4fd94:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   4fd98:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   4fd9c:	79a3      	ldrb	r3, [r4, #6]
   4fd9e:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   4fda2:	2307      	movs	r3, #7
   4fda4:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    if (p_cb->handler)
   4fda8:	59eb      	ldr	r3, [r5, r7]
   4fdaa:	b123      	cbz	r3, 4fdb6 <nrfx_spim_init+0x11e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   4fdac:	6830      	ldr	r0, [r6, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   4fdae:	f340 3007 	sbfx	r0, r0, #12, #8
   4fdb2:	f7f5 ffcd 	bl	45d50 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   4fdb6:	2300      	movs	r3, #0
   4fdb8:	443d      	add	r5, r7
   4fdba:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   4fdbc:	2301      	movs	r3, #1
    return err_code;
   4fdbe:	4807      	ldr	r0, [pc, #28]	; (4fddc <nrfx_spim_init+0x144>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   4fdc0:	772b      	strb	r3, [r5, #28]
}
   4fdc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   4fdc6:	f043 0304 	orr.w	r3, r3, #4
        break;
   4fdca:	e7e5      	b.n	4fd98 <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   4fdcc:	f043 0306 	orr.w	r3, r3, #6
        break;
   4fdd0:	e7e2      	b.n	4fd98 <nrfx_spim_init+0x100>
        return err_code;
   4fdd2:	4803      	ldr	r0, [pc, #12]	; (4fde0 <nrfx_spim_init+0x148>)
   4fdd4:	e7f5      	b.n	4fdc2 <nrfx_spim_init+0x12a>
   4fdd6:	bf00      	nop
   4fdd8:	2001b8a8 	.word	0x2001b8a8
   4fddc:	0bad0000 	.word	0x0bad0000
   4fde0:	0bad0005 	.word	0x0bad0005
   4fde4:	40842500 	.word	0x40842500

0004fde8 <nrfx_spim_uninit>:

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   4fde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   4fdea:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   4fdec:	4d1f      	ldr	r5, [pc, #124]	; (4fe6c <nrfx_spim_uninit+0x84>)
   4fdee:	015e      	lsls	r6, r3, #5
   4fdf0:	eb05 1743 	add.w	r7, r5, r3, lsl #5
   4fdf4:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   4fdf6:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   4fdf8:	b1b3      	cbz	r3, 4fe28 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   4fdfa:	f344 3007 	sbfx	r0, r4, #12, #8
   4fdfe:	f7f5 ffb5 	bl	45d6c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   4fe02:	4b1b      	ldr	r3, [pc, #108]	; (4fe70 <nrfx_spim_uninit+0x88>)
   4fe04:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   4fe08:	7f7b      	ldrb	r3, [r7, #29]
   4fe0a:	b16b      	cbz	r3, 4fe28 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4fe0c:	2301      	movs	r3, #1
   4fe0e:	2764      	movs	r7, #100	; 0x64
   4fe10:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4fe12:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   4fe16:	b923      	cbnz	r3, 4fe22 <nrfx_spim_uninit+0x3a>
   4fe18:	2001      	movs	r0, #1
   4fe1a:	f009 fd1e 	bl	5985a <nrfx_busy_wait>
   4fe1e:	3f01      	subs	r7, #1
   4fe20:	d1f7      	bne.n	4fe12 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
   4fe22:	2200      	movs	r2, #0
   4fe24:	19ab      	adds	r3, r5, r6
   4fe26:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   4fe28:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   4fe2a:	19a9      	adds	r1, r5, r6
   4fe2c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   4fe30:	7f8b      	ldrb	r3, [r1, #30]
   4fe32:	07db      	lsls	r3, r3, #31
   4fe34:	d415      	bmi.n	4fe62 <nrfx_spim_uninit+0x7a>
    return p_reg->PSEL.SCK;
   4fe36:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   4fe3a:	f7ff ff15 	bl	4fc68 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   4fe3e:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   4fe42:	f7ff ff11 	bl	4fc68 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   4fe46:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   4fe4a:	f7ff ff0d 	bl	4fc68 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   4fe4e:	7fcb      	ldrb	r3, [r1, #31]
   4fe50:	2bff      	cmp	r3, #255	; 0xff
   4fe52:	d006      	beq.n	4fe62 <nrfx_spim_uninit+0x7a>
   4fe54:	2102      	movs	r1, #2
   4fe56:	4a07      	ldr	r2, [pc, #28]	; (4fe74 <nrfx_spim_uninit+0x8c>)
    *p_pin = pin_number & 0x1F;
   4fe58:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   4fe5c:	3380      	adds	r3, #128	; 0x80
   4fe5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   4fe62:	2300      	movs	r3, #0
   4fe64:	4435      	add	r5, r6
   4fe66:	772b      	strb	r3, [r5, #28]
}
   4fe68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4fe6a:	bf00      	nop
   4fe6c:	2001b8a8 	.word	0x2001b8a8
   4fe70:	00080152 	.word	0x00080152
   4fe74:	40842500 	.word	0x40842500

0004fe78 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   4fe78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   4fe7c:	4f38      	ldr	r7, [pc, #224]	; (4ff60 <nrfx_spim_xfer+0xe8>)
   4fe7e:	7903      	ldrb	r3, [r0, #4]
{
   4fe80:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   4fe82:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   4fe86:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   4fe8a:	4681      	mov	r9, r0
   4fe8c:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   4fe8e:	015e      	lsls	r6, r3, #5
   4fe90:	2a00      	cmp	r2, #0
   4fe92:	d163      	bne.n	4ff5c <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   4fe94:	59ba      	ldr	r2, [r7, r6]
   4fe96:	b12a      	cbz	r2, 4fea4 <nrfx_spim_xfer+0x2c>
   4fe98:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   4fe9c:	bf04      	itt	eq
   4fe9e:	2201      	moveq	r2, #1
   4fea0:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   4fea4:	eb07 0c06 	add.w	ip, r7, r6
   4fea8:	f10c 0c0c 	add.w	ip, ip, #12
   4feac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4feb0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   4feb4:	2101      	movs	r1, #1
   4feb6:	4640      	mov	r0, r8
   4feb8:	f009 fcd3 	bl	59862 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   4febc:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   4febe:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   4fec2:	b121      	cbz	r1, 4fece <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   4fec4:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   4fec8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   4fecc:	d106      	bne.n	4fedc <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   4fece:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   4fed0:	b152      	cbz	r2, 4fee8 <nrfx_spim_xfer+0x70>
   4fed2:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   4fed6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   4feda:	d005      	beq.n	4fee8 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   4fedc:	2300      	movs	r3, #0
   4fede:	443e      	add	r6, r7
        return err_code;
   4fee0:	4820      	ldr	r0, [pc, #128]	; (4ff64 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   4fee2:	7773      	strb	r3, [r6, #29]
}
   4fee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   4fee8:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   4feea:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   4feee:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   4fef2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   4fef6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   4fefa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4fefe:	2200      	movs	r2, #0
   4ff00:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   4ff04:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   4ff08:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   4ff0c:	bf18      	it	ne
   4ff0e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   4ff10:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   4ff14:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   4ff18:	bf18      	it	ne
   4ff1a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   4ff1c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   4ff20:	072a      	lsls	r2, r5, #28
   4ff22:	d507      	bpl.n	4ff34 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   4ff24:	59ba      	ldr	r2, [r7, r6]
   4ff26:	b972      	cbnz	r2, 4ff46 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   4ff28:	2100      	movs	r1, #0
   4ff2a:	4640      	mov	r0, r8
   4ff2c:	f009 fc99 	bl	59862 <set_ss_pin_state>
    return err_code;
   4ff30:	480d      	ldr	r0, [pc, #52]	; (4ff68 <nrfx_spim_xfer+0xf0>)
   4ff32:	e7d7      	b.n	4fee4 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4ff34:	2201      	movs	r2, #1
   4ff36:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   4ff38:	59ba      	ldr	r2, [r7, r6]
   4ff3a:	b922      	cbnz	r2, 4ff46 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4ff3c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   4ff40:	2a00      	cmp	r2, #0
   4ff42:	d0fb      	beq.n	4ff3c <nrfx_spim_xfer+0xc4>
   4ff44:	e7f0      	b.n	4ff28 <nrfx_spim_xfer+0xb0>
    if (!enable)
   4ff46:	f015 0f04 	tst.w	r5, #4
   4ff4a:	f04f 0240 	mov.w	r2, #64	; 0x40
   4ff4e:	d002      	beq.n	4ff56 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   4ff50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   4ff54:	e7ec      	b.n	4ff30 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   4ff56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   4ff5a:	e7e9      	b.n	4ff30 <nrfx_spim_xfer+0xb8>
        return err_code;
   4ff5c:	4803      	ldr	r0, [pc, #12]	; (4ff6c <nrfx_spim_xfer+0xf4>)
   4ff5e:	e7c1      	b.n	4fee4 <nrfx_spim_xfer+0x6c>
   4ff60:	2001b8a8 	.word	0x2001b8a8
   4ff64:	0bad000a 	.word	0x0bad000a
   4ff68:	0bad0000 	.word	0x0bad0000
   4ff6c:	0bad000b 	.word	0x0bad000b

0004ff70 <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   4ff70:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4ff72:	4b0c      	ldr	r3, [pc, #48]	; (4ffa4 <nrfx_spim_3_irq_handler+0x34>)
   4ff74:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   4ff78:	b192      	cbz	r2, 4ffa0 <nrfx_spim_3_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4ff7a:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
   4ff7c:	4c0a      	ldr	r4, [pc, #40]	; (4ffa8 <nrfx_spim_3_irq_handler+0x38>)
   4ff7e:	4629      	mov	r1, r5
   4ff80:	4620      	mov	r0, r4
   4ff82:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   4ff86:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   4ff8a:	f009 fc6a 	bl	59862 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   4ff8e:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   4ff92:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   4ff94:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   4ff96:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   4ff9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   4ff9e:	4718      	bx	r3
}
   4ffa0:	bd70      	pop	{r4, r5, r6, pc}
   4ffa2:	bf00      	nop
   4ffa4:	4000b000 	.word	0x4000b000
   4ffa8:	2001b8a8 	.word	0x2001b8a8

0004ffac <rpc_handle_ctrl_message>:
   4ffac:	2902      	cmp	r1, #2
   4ffae:	b510      	push	{r4, lr}
   4ffb0:	4604      	mov	r4, r0
   4ffb2:	d009      	beq.n	4ffc8 <rpc_handle_ctrl_message+0x1c>
   4ffb4:	2904      	cmp	r1, #4
   4ffb6:	d005      	beq.n	4ffc4 <rpc_handle_ctrl_message+0x18>
   4ffb8:	2901      	cmp	r1, #1
   4ffba:	d10b      	bne.n	4ffd4 <rpc_handle_ctrl_message+0x28>
   4ffbc:	4b09      	ldr	r3, [pc, #36]	; (4ffe4 <rpc_handle_ctrl_message+0x38>)
   4ffbe:	6818      	ldr	r0, [r3, #0]
   4ffc0:	f007 f963 	bl	5728a <nrf_modem_os_sem_give>
   4ffc4:	2000      	movs	r0, #0
   4ffc6:	bd10      	pop	{r4, pc}
   4ffc8:	6880      	ldr	r0, [r0, #8]
   4ffca:	2800      	cmp	r0, #0
   4ffcc:	d0fa      	beq.n	4ffc4 <rpc_handle_ctrl_message+0x18>
   4ffce:	f7f9 fe3d 	bl	49c4c <nrf_modem_os_shm_tx_free>
   4ffd2:	e7f7      	b.n	4ffc4 <rpc_handle_ctrl_message+0x18>
   4ffd4:	6880      	ldr	r0, [r0, #8]
   4ffd6:	b108      	cbz	r0, 4ffdc <rpc_handle_ctrl_message+0x30>
   4ffd8:	f7f9 fe38 	bl	49c4c <nrf_modem_os_shm_tx_free>
   4ffdc:	4620      	mov	r0, r4
   4ffde:	f000 f845 	bl	5006c <rpc_transport_msg_free>
   4ffe2:	e7ef      	b.n	4ffc4 <rpc_handle_ctrl_message+0x18>
   4ffe4:	2001b8c8 	.word	0x2001b8c8

0004ffe8 <rpc_handle_data_message>:
   4ffe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4ffec:	4604      	mov	r4, r0
   4ffee:	2504      	movs	r5, #4
   4fff0:	6807      	ldr	r7, [r0, #0]
   4fff2:	4e0d      	ldr	r6, [pc, #52]	; (50028 <CONFIG_FLASH_LOAD_OFFSET+0x28>)
   4fff4:	b2ff      	uxtb	r7, r7
   4fff6:	7833      	ldrb	r3, [r6, #0]
   4fff8:	42bb      	cmp	r3, r7
   4fffa:	d009      	beq.n	50010 <CONFIG_FLASH_LOAD_OFFSET+0x10>
   4fffc:	3d01      	subs	r5, #1
   4fffe:	f106 060c 	add.w	r6, r6, #12
   50002:	d1f8      	bne.n	4fff6 <rpc_handle_data_message+0xe>
   50004:	68a0      	ldr	r0, [r4, #8]
   50006:	b108      	cbz	r0, 5000c <CONFIG_FLASH_LOAD_OFFSET+0xc>
   50008:	f000 f836 	bl	50078 <rpc_transport_msg_data_rx_free>
   5000c:	4628      	mov	r0, r5
   5000e:	e009      	b.n	50024 <CONFIG_FLASH_LOAD_OFFSET+0x24>
   50010:	4620      	mov	r0, r4
   50012:	f8d6 8004 	ldr.w	r8, [r6, #4]
   50016:	f009 fc38 	bl	5988a <rpc_client_msg_from_rpc_msg_get>
   5001a:	6821      	ldr	r1, [r4, #0]
   5001c:	0c09      	lsrs	r1, r1, #16
   5001e:	47c0      	blx	r8
   50020:	2802      	cmp	r0, #2
   50022:	d0eb      	beq.n	4fffc <rpc_handle_data_message+0x14>
   50024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   50028:	0005c534 	.word	0x0005c534

0005002c <rpc_init>:
   5002c:	b538      	push	{r3, r4, r5, lr}
   5002e:	4d0b      	ldr	r5, [pc, #44]	; (5005c <rpc_init+0x30>)
   50030:	4604      	mov	r4, r0
   50032:	2201      	movs	r2, #1
   50034:	2100      	movs	r1, #0
   50036:	4628      	mov	r0, r5
   50038:	f7f9 fdc0 	bl	49bbc <nrf_modem_os_sem_init>
   5003c:	b950      	cbnz	r0, 50054 <rpc_init+0x28>
   5003e:	4620      	mov	r0, r4
   50040:	f000 f826 	bl	50090 <rpc_transport_init>
   50044:	b940      	cbnz	r0, 50058 <rpc_init+0x2c>
   50046:	6828      	ldr	r0, [r5, #0]
   50048:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   5004c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   50050:	f007 b91d 	b.w	5728e <nrf_modem_os_sem_take>
   50054:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   50058:	bd38      	pop	{r3, r4, r5, pc}
   5005a:	bf00      	nop
   5005c:	2001b8c8 	.word	0x2001b8c8

00050060 <rpc_transport_msg_alloc>:
   50060:	4b01      	ldr	r3, [pc, #4]	; (50068 <rpc_transport_msg_alloc+0x8>)
   50062:	681b      	ldr	r3, [r3, #0]
   50064:	4718      	bx	r3
   50066:	bf00      	nop
   50068:	2001a7f4 	.word	0x2001a7f4

0005006c <rpc_transport_msg_free>:
   5006c:	4b01      	ldr	r3, [pc, #4]	; (50074 <rpc_transport_msg_free+0x8>)
   5006e:	689b      	ldr	r3, [r3, #8]
   50070:	4718      	bx	r3
   50072:	bf00      	nop
   50074:	2001a7f4 	.word	0x2001a7f4

00050078 <rpc_transport_msg_data_rx_free>:
   50078:	4b01      	ldr	r3, [pc, #4]	; (50080 <rpc_transport_msg_data_rx_free+0x8>)
   5007a:	68db      	ldr	r3, [r3, #12]
   5007c:	4718      	bx	r3
   5007e:	bf00      	nop
   50080:	2001a7f4 	.word	0x2001a7f4

00050084 <rpc_transport_msg_send>:
   50084:	4b01      	ldr	r3, [pc, #4]	; (5008c <rpc_transport_msg_send+0x8>)
   50086:	685b      	ldr	r3, [r3, #4]
   50088:	4718      	bx	r3
   5008a:	bf00      	nop
   5008c:	2001a7f4 	.word	0x2001a7f4

00050090 <rpc_transport_init>:
   50090:	4b01      	ldr	r3, [pc, #4]	; (50098 <rpc_transport_init+0x8>)
   50092:	691b      	ldr	r3, [r3, #16]
   50094:	4718      	bx	r3
   50096:	bf00      	nop
   50098:	2001a7f4 	.word	0x2001a7f4

0005009c <rpc_transport_rx_data_suspend>:
   5009c:	4b01      	ldr	r3, [pc, #4]	; (500a4 <rpc_transport_rx_data_suspend+0x8>)
   5009e:	6a1b      	ldr	r3, [r3, #32]
   500a0:	4718      	bx	r3
   500a2:	bf00      	nop
   500a4:	2001a7f4 	.word	0x2001a7f4

000500a8 <rpc_transport_rx_data_resume>:
   500a8:	4b01      	ldr	r3, [pc, #4]	; (500b0 <rpc_transport_rx_data_resume+0x8>)
   500aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   500ac:	4718      	bx	r3
   500ae:	bf00      	nop
   500b0:	2001a7f4 	.word	0x2001a7f4

000500b4 <ipc_trace_init>:
   500b4:	2100      	movs	r1, #0
   500b6:	4b07      	ldr	r3, [pc, #28]	; (500d4 <ipc_trace_init+0x20>)
   500b8:	2201      	movs	r2, #1
   500ba:	7019      	strb	r1, [r3, #0]
   500bc:	4b06      	ldr	r3, [pc, #24]	; (500d8 <ipc_trace_init+0x24>)
   500be:	7019      	strb	r1, [r3, #0]
   500c0:	4b06      	ldr	r3, [pc, #24]	; (500dc <ipc_trace_init+0x28>)
   500c2:	6019      	str	r1, [r3, #0]
   500c4:	4b06      	ldr	r3, [pc, #24]	; (500e0 <ipc_trace_init+0x2c>)
   500c6:	6019      	str	r1, [r3, #0]
   500c8:	4b06      	ldr	r3, [pc, #24]	; (500e4 <ipc_trace_init+0x30>)
   500ca:	6018      	str	r0, [r3, #0]
   500cc:	4806      	ldr	r0, [pc, #24]	; (500e8 <ipc_trace_init+0x34>)
   500ce:	f7f9 bd75 	b.w	49bbc <nrf_modem_os_sem_init>
   500d2:	bf00      	nop
   500d4:	2002062e 	.word	0x2002062e
   500d8:	2002062d 	.word	0x2002062d
   500dc:	2001b8cc 	.word	0x2001b8cc
   500e0:	2001b8dc 	.word	0x2001b8dc
   500e4:	2001b8e0 	.word	0x2001b8e0
   500e8:	2001b8e4 	.word	0x2001b8e4

000500ec <ipc_trace_handle>:
   500ec:	b430      	push	{r4, r5}
   500ee:	4b2d      	ldr	r3, [pc, #180]	; (501a4 <ipc_trace_handle+0xb8>)
   500f0:	681b      	ldr	r3, [r3, #0]
   500f2:	6919      	ldr	r1, [r3, #16]
   500f4:	6958      	ldr	r0, [r3, #20]
   500f6:	7c1a      	ldrb	r2, [r3, #16]
   500f8:	2200      	movs	r2, #0
   500fa:	741a      	strb	r2, [r3, #16]
   500fc:	7c5c      	ldrb	r4, [r3, #17]
   500fe:	745a      	strb	r2, [r3, #17]
   50100:	7c9c      	ldrb	r4, [r3, #18]
   50102:	749a      	strb	r2, [r3, #18]
   50104:	7cdc      	ldrb	r4, [r3, #19]
   50106:	74da      	strb	r2, [r3, #19]
   50108:	7d1c      	ldrb	r4, [r3, #20]
   5010a:	751a      	strb	r2, [r3, #20]
   5010c:	7d5c      	ldrb	r4, [r3, #21]
   5010e:	755a      	strb	r2, [r3, #21]
   50110:	7d9c      	ldrb	r4, [r3, #22]
   50112:	2903      	cmp	r1, #3
   50114:	759a      	strb	r2, [r3, #22]
   50116:	7ddc      	ldrb	r4, [r3, #23]
   50118:	75da      	strb	r2, [r3, #23]
   5011a:	d029      	beq.n	50170 <ipc_trace_handle+0x84>
   5011c:	2904      	cmp	r1, #4
   5011e:	d033      	beq.n	50188 <ipc_trace_handle+0x9c>
   50120:	2901      	cmp	r1, #1
   50122:	d12f      	bne.n	50184 <ipc_trace_handle+0x98>
   50124:	4d20      	ldr	r5, [pc, #128]	; (501a8 <ipc_trace_handle+0xbc>)
   50126:	6881      	ldr	r1, [r0, #8]
   50128:	4291      	cmp	r1, r2
   5012a:	d810      	bhi.n	5014e <ipc_trace_handle+0x62>
   5012c:	2101      	movs	r1, #1
   5012e:	7a1a      	ldrb	r2, [r3, #8]
   50130:	2200      	movs	r2, #0
   50132:	7219      	strb	r1, [r3, #8]
   50134:	7a59      	ldrb	r1, [r3, #9]
   50136:	725a      	strb	r2, [r3, #9]
   50138:	7a99      	ldrb	r1, [r3, #10]
   5013a:	729a      	strb	r2, [r3, #10]
   5013c:	7ada      	ldrb	r2, [r3, #11]
   5013e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   50142:	72da      	strb	r2, [r3, #11]
   50144:	4b19      	ldr	r3, [pc, #100]	; (501ac <ipc_trace_handle+0xc0>)
   50146:	bc30      	pop	{r4, r5}
   50148:	6818      	ldr	r0, [r3, #0]
   5014a:	f007 b89e 	b.w	5728a <nrf_modem_os_sem_give>
   5014e:	1c91      	adds	r1, r2, #2
   50150:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   50154:	684c      	ldr	r4, [r1, #4]
   50156:	7821      	ldrb	r1, [r4, #0]
   50158:	2962      	cmp	r1, #98	; 0x62
   5015a:	d007      	beq.n	5016c <ipc_trace_handle+0x80>
   5015c:	2963      	cmp	r1, #99	; 0x63
   5015e:	bf14      	ite	ne
   50160:	2102      	movne	r1, #2
   50162:	2100      	moveq	r1, #0
   50164:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
   50168:	3201      	adds	r2, #1
   5016a:	e7dc      	b.n	50126 <ipc_trace_handle+0x3a>
   5016c:	2101      	movs	r1, #1
   5016e:	e7f9      	b.n	50164 <ipc_trace_handle+0x78>
   50170:	7a18      	ldrb	r0, [r3, #8]
   50172:	7219      	strb	r1, [r3, #8]
   50174:	7a59      	ldrb	r1, [r3, #9]
   50176:	725a      	strb	r2, [r3, #9]
   50178:	7a99      	ldrb	r1, [r3, #10]
   5017a:	729a      	strb	r2, [r3, #10]
   5017c:	7ada      	ldrb	r2, [r3, #11]
   5017e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   50182:	72da      	strb	r2, [r3, #11]
   50184:	bc30      	pop	{r4, r5}
   50186:	4770      	bx	lr
   50188:	7a18      	ldrb	r0, [r3, #8]
   5018a:	7219      	strb	r1, [r3, #8]
   5018c:	7a59      	ldrb	r1, [r3, #9]
   5018e:	725a      	strb	r2, [r3, #9]
   50190:	7a99      	ldrb	r1, [r3, #10]
   50192:	729a      	strb	r2, [r3, #10]
   50194:	7ada      	ldrb	r2, [r3, #11]
   50196:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   5019a:	72da      	strb	r2, [r3, #11]
   5019c:	2201      	movs	r2, #1
   5019e:	4b04      	ldr	r3, [pc, #16]	; (501b0 <ipc_trace_handle+0xc4>)
   501a0:	701a      	strb	r2, [r3, #0]
   501a2:	e7ef      	b.n	50184 <ipc_trace_handle+0x98>
   501a4:	2001b8e0 	.word	0x2001b8e0
   501a8:	2001b8d0 	.word	0x2001b8d0
   501ac:	2001b8e4 	.word	0x2001b8e4
   501b0:	2002062d 	.word	0x2002062d

000501b4 <rpc_transport_ipc_msg_free>:
   501b4:	2300      	movs	r3, #0
   501b6:	b530      	push	{r4, r5, lr}
   501b8:	4910      	ldr	r1, [pc, #64]	; (501fc <rpc_transport_ipc_msg_free+0x48>)
   501ba:	680a      	ldr	r2, [r1, #0]
   501bc:	6814      	ldr	r4, [r2, #0]
   501be:	42a3      	cmp	r3, r4
   501c0:	d10b      	bne.n	501da <rpc_transport_ipc_msg_free+0x26>
   501c2:	2300      	movs	r3, #0
   501c4:	684a      	ldr	r2, [r1, #4]
   501c6:	6811      	ldr	r1, [r2, #0]
   501c8:	428b      	cmp	r3, r1
   501ca:	d015      	beq.n	501f8 <rpc_transport_ipc_msg_free+0x44>
   501cc:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   501d0:	68a4      	ldr	r4, [r4, #8]
   501d2:	42a0      	cmp	r0, r4
   501d4:	d008      	beq.n	501e8 <rpc_transport_ipc_msg_free+0x34>
   501d6:	3301      	adds	r3, #1
   501d8:	e7f6      	b.n	501c8 <rpc_transport_ipc_msg_free+0x14>
   501da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   501de:	68ad      	ldr	r5, [r5, #8]
   501e0:	42a8      	cmp	r0, r5
   501e2:	d001      	beq.n	501e8 <rpc_transport_ipc_msg_free+0x34>
   501e4:	3301      	adds	r3, #1
   501e6:	e7ea      	b.n	501be <rpc_transport_ipc_msg_free+0xa>
   501e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   501ec:	685a      	ldr	r2, [r3, #4]
   501ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   501f2:	f042 0203 	orr.w	r2, r2, #3
   501f6:	605a      	str	r2, [r3, #4]
   501f8:	bd30      	pop	{r4, r5, pc}
   501fa:	bf00      	nop
   501fc:	2001b8f0 	.word	0x2001b8f0

00050200 <rpc_transport_ipc_shutdown_done>:
   50200:	4b02      	ldr	r3, [pc, #8]	; (5020c <rpc_transport_ipc_shutdown_done+0xc>)
   50202:	7818      	ldrb	r0, [r3, #0]
   50204:	1e83      	subs	r3, r0, #2
   50206:	4258      	negs	r0, r3
   50208:	4158      	adcs	r0, r3
   5020a:	4770      	bx	lr
   5020c:	2002062f 	.word	0x2002062f

00050210 <rpc_transport_ipc_data_msg_send>:
   50210:	b508      	push	{r3, lr}
   50212:	6842      	ldr	r2, [r0, #4]
   50214:	4b0d      	ldr	r3, [pc, #52]	; (5024c <rpc_transport_ipc_data_msg_send+0x3c>)
   50216:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   5021a:	f042 0202 	orr.w	r2, r2, #2
   5021e:	6042      	str	r2, [r0, #4]
   50220:	681b      	ldr	r3, [r3, #0]
   50222:	4a0b      	ldr	r2, [pc, #44]	; (50250 <rpc_transport_ipc_data_msg_send+0x40>)
   50224:	1ac3      	subs	r3, r0, r3
   50226:	6812      	ldr	r2, [r2, #0]
   50228:	f3c3 1389 	ubfx	r3, r3, #6, #10
   5022c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   50230:	6853      	ldr	r3, [r2, #4]
   50232:	2003      	movs	r0, #3
   50234:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   50238:	f043 0301 	orr.w	r3, r3, #1
   5023c:	6053      	str	r3, [r2, #4]
   5023e:	f007 f81a 	bl	57276 <nrf_modem_os_busywait>
   50242:	2201      	movs	r2, #1
   50244:	4b03      	ldr	r3, [pc, #12]	; (50254 <rpc_transport_ipc_data_msg_send+0x44>)
   50246:	60da      	str	r2, [r3, #12]
   50248:	bd08      	pop	{r3, pc}
   5024a:	bf00      	nop
   5024c:	2001b900 	.word	0x2001b900
   50250:	2001b904 	.word	0x2001b904
   50254:	4002a000 	.word	0x4002a000

00050258 <rpc_transport_ipc_ctrl_msg_send>:
   50258:	b508      	push	{r3, lr}
   5025a:	6842      	ldr	r2, [r0, #4]
   5025c:	4b0d      	ldr	r3, [pc, #52]	; (50294 <rpc_transport_ipc_ctrl_msg_send+0x3c>)
   5025e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   50262:	f042 0201 	orr.w	r2, r2, #1
   50266:	6042      	str	r2, [r0, #4]
   50268:	681b      	ldr	r3, [r3, #0]
   5026a:	4a0b      	ldr	r2, [pc, #44]	; (50298 <rpc_transport_ipc_ctrl_msg_send+0x40>)
   5026c:	1ac3      	subs	r3, r0, r3
   5026e:	6812      	ldr	r2, [r2, #0]
   50270:	f3c3 1389 	ubfx	r3, r3, #6, #10
   50274:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   50278:	6853      	ldr	r3, [r2, #4]
   5027a:	2003      	movs	r0, #3
   5027c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   50280:	f043 0301 	orr.w	r3, r3, #1
   50284:	6053      	str	r3, [r2, #4]
   50286:	f006 fff6 	bl	57276 <nrf_modem_os_busywait>
   5028a:	2201      	movs	r2, #1
   5028c:	4b03      	ldr	r3, [pc, #12]	; (5029c <rpc_transport_ipc_ctrl_msg_send+0x44>)
   5028e:	605a      	str	r2, [r3, #4]
   50290:	bd08      	pop	{r3, pc}
   50292:	bf00      	nop
   50294:	2001b8f8 	.word	0x2001b8f8
   50298:	2001b8fc 	.word	0x2001b8fc
   5029c:	4002a000 	.word	0x4002a000

000502a0 <rpc_transport_ipc_msg_alloc>:
   502a0:	2200      	movs	r2, #0
   502a2:	b538      	push	{r3, r4, r5, lr}
   502a4:	6803      	ldr	r3, [r0, #0]
   502a6:	4293      	cmp	r3, r2
   502a8:	d101      	bne.n	502ae <rpc_transport_ipc_msg_alloc+0xe>
   502aa:	2300      	movs	r3, #0
   502ac:	e01b      	b.n	502e6 <rpc_transport_ipc_msg_alloc+0x46>
   502ae:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
   502b2:	686c      	ldr	r4, [r5, #4]
   502b4:	b2e4      	uxtb	r4, r4
   502b6:	2c03      	cmp	r4, #3
   502b8:	d117      	bne.n	502ea <rpc_transport_ipc_msg_alloc+0x4a>
   502ba:	eb01 1382 	add.w	r3, r1, r2, lsl #6
   502be:	60ab      	str	r3, [r5, #8]
   502c0:	686a      	ldr	r2, [r5, #4]
   502c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   502c6:	606a      	str	r2, [r5, #4]
   502c8:	4a0b      	ldr	r2, [pc, #44]	; (502f8 <rpc_transport_ipc_msg_alloc+0x58>)
   502ca:	8811      	ldrh	r1, [r2, #0]
   502cc:	1c48      	adds	r0, r1, #1
   502ce:	8010      	strh	r0, [r2, #0]
   502d0:	686a      	ldr	r2, [r5, #4]
   502d2:	4618      	mov	r0, r3
   502d4:	b292      	uxth	r2, r2
   502d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   502da:	606a      	str	r2, [r5, #4]
   502dc:	2100      	movs	r1, #0
   502de:	2240      	movs	r2, #64	; 0x40
   502e0:	f00a fdf5 	bl	5aece <memset>
   502e4:	4603      	mov	r3, r0
   502e6:	4618      	mov	r0, r3
   502e8:	bd38      	pop	{r3, r4, r5, pc}
   502ea:	b914      	cbnz	r4, 502f2 <rpc_transport_ipc_msg_alloc+0x52>
   502ec:	68ac      	ldr	r4, [r5, #8]
   502ee:	2c00      	cmp	r4, #0
   502f0:	d0e3      	beq.n	502ba <rpc_transport_ipc_msg_alloc+0x1a>
   502f2:	3201      	adds	r2, #1
   502f4:	e7d7      	b.n	502a6 <rpc_transport_ipc_msg_alloc+0x6>
   502f6:	bf00      	nop
   502f8:	2001bed0 	.word	0x2001bed0

000502fc <rpc_transport_ipc_data_msg_alloc>:
   502fc:	4b05      	ldr	r3, [pc, #20]	; (50314 <rpc_transport_ipc_data_msg_alloc+0x18>)
   502fe:	781b      	ldrb	r3, [r3, #0]
   50300:	b92b      	cbnz	r3, 5030e <rpc_transport_ipc_data_msg_alloc+0x12>
   50302:	4b05      	ldr	r3, [pc, #20]	; (50318 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   50304:	6819      	ldr	r1, [r3, #0]
   50306:	4b05      	ldr	r3, [pc, #20]	; (5031c <rpc_transport_ipc_data_msg_alloc+0x20>)
   50308:	6818      	ldr	r0, [r3, #0]
   5030a:	f7ff bfc9 	b.w	502a0 <rpc_transport_ipc_msg_alloc>
   5030e:	2000      	movs	r0, #0
   50310:	4770      	bx	lr
   50312:	bf00      	nop
   50314:	20020630 	.word	0x20020630
   50318:	2001b900 	.word	0x2001b900
   5031c:	2001b904 	.word	0x2001b904

00050320 <rpc_transport_ipc_ctrl_msg_alloc>:
   50320:	230a      	movs	r3, #10
   50322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   50324:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   50328:	4e0c      	ldr	r6, [pc, #48]	; (5035c <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   5032a:	4f0d      	ldr	r7, [pc, #52]	; (50360 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   5032c:	9301      	str	r3, [sp, #4]
   5032e:	6831      	ldr	r1, [r6, #0]
   50330:	6838      	ldr	r0, [r7, #0]
   50332:	f7ff ffb5 	bl	502a0 <rpc_transport_ipc_msg_alloc>
   50336:	4604      	mov	r4, r0
   50338:	b938      	cbnz	r0, 5034a <rpc_transport_ipc_ctrl_msg_alloc+0x2a>
   5033a:	f006 ffa4 	bl	57286 <nrf_modem_os_is_in_isr>
   5033e:	b938      	cbnz	r0, 50350 <rpc_transport_ipc_ctrl_msg_alloc+0x30>
   50340:	a901      	add	r1, sp, #4
   50342:	f7f9 fb79 	bl	49a38 <nrf_modem_os_timedwait>
   50346:	306e      	adds	r0, #110	; 0x6e
   50348:	d1f1      	bne.n	5032e <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   5034a:	4620      	mov	r0, r4
   5034c:	b003      	add	sp, #12
   5034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   50350:	9801      	ldr	r0, [sp, #4]
   50352:	4368      	muls	r0, r5
   50354:	f006 ff8f 	bl	57276 <nrf_modem_os_busywait>
   50358:	e7e9      	b.n	5032e <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   5035a:	bf00      	nop
   5035c:	2001b8f8 	.word	0x2001b8f8
   50360:	2001b8fc 	.word	0x2001b8fc

00050364 <rpc_transport_ipc_request_shutdown>:
   50364:	b538      	push	{r3, r4, r5, lr}
   50366:	f7ff ffdb 	bl	50320 <rpc_transport_ipc_ctrl_msg_alloc>
   5036a:	2400      	movs	r4, #0
   5036c:	2203      	movs	r2, #3
   5036e:	2501      	movs	r5, #1
   50370:	7044      	strb	r4, [r0, #1]
   50372:	7005      	strb	r5, [r0, #0]
   50374:	7082      	strb	r2, [r0, #2]
   50376:	70c4      	strb	r4, [r0, #3]
   50378:	f7ff ff6e 	bl	50258 <rpc_transport_ipc_ctrl_msg_send>
   5037c:	4b02      	ldr	r3, [pc, #8]	; (50388 <rpc_transport_ipc_request_shutdown+0x24>)
   5037e:	701d      	strb	r5, [r3, #0]
   50380:	f009 fa7b 	bl	5987a <rpc_transport_ipc_rx_data_suspend>
   50384:	4620      	mov	r0, r4
   50386:	bd38      	pop	{r3, r4, r5, pc}
   50388:	20020630 	.word	0x20020630

0005038c <rpc_transport_ipc_init>:
   5038c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   50390:	2200      	movs	r2, #0
   50392:	b095      	sub	sp, #84	; 0x54
   50394:	4605      	mov	r5, r0
   50396:	4959      	ldr	r1, [pc, #356]	; (504fc <rpc_transport_ipc_init+0x170>)
   50398:	7900      	ldrb	r0, [r0, #4]
   5039a:	f7ff fbcf 	bl	4fb3c <nrfx_ipc_init>
   5039e:	2238      	movs	r2, #56	; 0x38
   503a0:	2100      	movs	r1, #0
   503a2:	a803      	add	r0, sp, #12
   503a4:	f00a fd93 	bl	5aece <memset>
   503a8:	2302      	movs	r3, #2
   503aa:	9304      	str	r3, [sp, #16]
   503ac:	2308      	movs	r3, #8
   503ae:	9306      	str	r3, [sp, #24]
   503b0:	2320      	movs	r3, #32
   503b2:	9308      	str	r3, [sp, #32]
   503b4:	2301      	movs	r3, #1
   503b6:	930b      	str	r3, [sp, #44]	; 0x2c
   503b8:	2304      	movs	r3, #4
   503ba:	930d      	str	r3, [sp, #52]	; 0x34
   503bc:	2310      	movs	r3, #16
   503be:	f04f 0c40 	mov.w	ip, #64	; 0x40
   503c2:	930f      	str	r3, [sp, #60]	; 0x3c
   503c4:	2380      	movs	r3, #128	; 0x80
   503c6:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   503ca:	23d5      	movs	r3, #213	; 0xd5
   503cc:	a803      	add	r0, sp, #12
   503ce:	9313      	str	r3, [sp, #76]	; 0x4c
   503d0:	f7ff fbcc 	bl	4fb6c <nrfx_ipc_config_load>
   503d4:	6828      	ldr	r0, [r5, #0]
   503d6:	6842      	ldr	r2, [r0, #4]
   503d8:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   503dc:	f040 8088 	bne.w	504f0 <rpc_transport_ipc_init+0x164>
   503e0:	6941      	ldr	r1, [r0, #20]
   503e2:	68c3      	ldr	r3, [r0, #12]
   503e4:	440b      	add	r3, r1
   503e6:	69c1      	ldr	r1, [r0, #28]
   503e8:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   503ec:	440b      	add	r3, r1
   503ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   503f2:	d87d      	bhi.n	504f0 <rpc_transport_ipc_init+0x164>
   503f4:	2100      	movs	r1, #0
   503f6:	6800      	ldr	r0, [r0, #0]
   503f8:	f00a fd69 	bl	5aece <memset>
   503fc:	682b      	ldr	r3, [r5, #0]
   503fe:	681c      	ldr	r4, [r3, #0]
   50400:	69da      	ldr	r2, [r3, #28]
   50402:	f104 0660 	add.w	r6, r4, #96	; 0x60
   50406:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   5040a:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   5040e:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   50412:	f104 0920 	add.w	r9, r4, #32
   50416:	2a00      	cmp	r2, #0
   50418:	d05f      	beq.n	504da <rpc_transport_ipc_init+0x14e>
   5041a:	f104 0840 	add.w	r8, r4, #64	; 0x40
   5041e:	4938      	ldr	r1, [pc, #224]	; (50500 <rpc_transport_ipc_init+0x174>)
   50420:	f8c1 9000 	str.w	r9, [r1]
   50424:	b14a      	cbz	r2, 5043a <rpc_transport_ipc_init+0xae>
   50426:	699b      	ldr	r3, [r3, #24]
   50428:	4640      	mov	r0, r8
   5042a:	f8c8 3004 	str.w	r3, [r8, #4]
   5042e:	682b      	ldr	r3, [r5, #0]
   50430:	69db      	ldr	r3, [r3, #28]
   50432:	f8c8 3000 	str.w	r3, [r8]
   50436:	f7ff fe3d 	bl	500b4 <ipc_trace_init>
   5043a:	2300      	movs	r3, #0
   5043c:	2101      	movs	r1, #1
   5043e:	7023      	strb	r3, [r4, #0]
   50440:	7063      	strb	r3, [r4, #1]
   50442:	70e3      	strb	r3, [r4, #3]
   50444:	70a1      	strb	r1, [r4, #2]
   50446:	682a      	ldr	r2, [r5, #0]
   50448:	6912      	ldr	r2, [r2, #16]
   5044a:	6062      	str	r2, [r4, #4]
   5044c:	682a      	ldr	r2, [r5, #0]
   5044e:	4d2d      	ldr	r5, [pc, #180]	; (50504 <rpc_transport_ipc_init+0x178>)
   50450:	6952      	ldr	r2, [r2, #20]
   50452:	60e6      	str	r6, [r4, #12]
   50454:	60a2      	str	r2, [r4, #8]
   50456:	4a2c      	ldr	r2, [pc, #176]	; (50508 <rpc_transport_ipc_init+0x17c>)
   50458:	6127      	str	r7, [r4, #16]
   5045a:	6017      	str	r7, [r2, #0]
   5045c:	4a2b      	ldr	r2, [pc, #172]	; (5050c <rpc_transport_ipc_init+0x180>)
   5045e:	f8c4 9014 	str.w	r9, [r4, #20]
   50462:	6016      	str	r6, [r2, #0]
   50464:	2208      	movs	r2, #8
   50466:	f8c4 8018 	str.w	r8, [r4, #24]
   5046a:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   5046e:	707b      	strb	r3, [r7, #1]
   50470:	70bb      	strb	r3, [r7, #2]
   50472:	70fb      	strb	r3, [r7, #3]
   50474:	270a      	movs	r7, #10
   50476:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   5047a:	4a25      	ldr	r2, [pc, #148]	; (50510 <rpc_transport_ipc_init+0x184>)
   5047c:	7073      	strb	r3, [r6, #1]
   5047e:	f8c2 b000 	str.w	fp, [r2]
   50482:	4a24      	ldr	r2, [pc, #144]	; (50514 <rpc_transport_ipc_init+0x188>)
   50484:	70b3      	strb	r3, [r6, #2]
   50486:	f8c2 a000 	str.w	sl, [r2]
   5048a:	4a23      	ldr	r2, [pc, #140]	; (50518 <rpc_transport_ipc_init+0x18c>)
   5048c:	70f3      	strb	r3, [r6, #3]
   5048e:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   50492:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   50496:	4a21      	ldr	r2, [pc, #132]	; (5051c <rpc_transport_ipc_init+0x190>)
   50498:	4c21      	ldr	r4, [pc, #132]	; (50520 <rpc_transport_ipc_init+0x194>)
   5049a:	8013      	strh	r3, [r2, #0]
   5049c:	4a21      	ldr	r2, [pc, #132]	; (50524 <rpc_transport_ipc_init+0x198>)
   5049e:	602b      	str	r3, [r5, #0]
   504a0:	8013      	strh	r3, [r2, #0]
   504a2:	4a21      	ldr	r2, [pc, #132]	; (50528 <rpc_transport_ipc_init+0x19c>)
   504a4:	7021      	strb	r1, [r4, #0]
   504a6:	9302      	str	r3, [sp, #8]
   504a8:	6113      	str	r3, [r2, #16]
   504aa:	6913      	ldr	r3, [r2, #16]
   504ac:	4e1f      	ldr	r6, [pc, #124]	; (5052c <rpc_transport_ipc_init+0x1a0>)
   504ae:	9302      	str	r3, [sp, #8]
   504b0:	9b02      	ldr	r3, [sp, #8]
   504b2:	7823      	ldrb	r3, [r4, #0]
   504b4:	2b01      	cmp	r3, #1
   504b6:	d100      	bne.n	504ba <rpc_transport_ipc_init+0x12e>
   504b8:	b98e      	cbnz	r6, 504de <rpc_transport_ipc_init+0x152>
   504ba:	7823      	ldrb	r3, [r4, #0]
   504bc:	2b01      	cmp	r3, #1
   504be:	bf01      	itttt	eq
   504c0:	f06f 0373 	mvneq.w	r3, #115	; 0x73
   504c4:	602b      	streq	r3, [r5, #0]
   504c6:	2303      	moveq	r3, #3
   504c8:	7023      	strbeq	r3, [r4, #0]
   504ca:	682c      	ldr	r4, [r5, #0]
   504cc:	b994      	cbnz	r4, 504f4 <rpc_transport_ipc_init+0x168>
   504ce:	4b18      	ldr	r3, [pc, #96]	; (50530 <rpc_transport_ipc_init+0x1a4>)
   504d0:	701c      	strb	r4, [r3, #0]
   504d2:	4620      	mov	r0, r4
   504d4:	b015      	add	sp, #84	; 0x54
   504d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   504da:	4690      	mov	r8, r2
   504dc:	e79f      	b.n	5041e <rpc_transport_ipc_init+0x92>
   504de:	2000      	movs	r0, #0
   504e0:	a901      	add	r1, sp, #4
   504e2:	9701      	str	r7, [sp, #4]
   504e4:	f7f9 faa8 	bl	49a38 <nrf_modem_os_timedwait>
   504e8:	9b01      	ldr	r3, [sp, #4]
   504ea:	3b0a      	subs	r3, #10
   504ec:	441e      	add	r6, r3
   504ee:	e7e0      	b.n	504b2 <rpc_transport_ipc_init+0x126>
   504f0:	f06f 0415 	mvn.w	r4, #21
   504f4:	f7ff fb5a 	bl	4fbac <nrfx_ipc_uninit>
   504f8:	e7eb      	b.n	504d2 <rpc_transport_ipc_init+0x146>
   504fa:	bf00      	nop
   504fc:	00050619 	.word	0x00050619
   50500:	2001b8ec 	.word	0x2001b8ec
   50504:	2001b8e8 	.word	0x2001b8e8
   50508:	2001b904 	.word	0x2001b904
   5050c:	2001b8fc 	.word	0x2001b8fc
   50510:	2001b900 	.word	0x2001b900
   50514:	2001b8f8 	.word	0x2001b8f8
   50518:	4002a000 	.word	0x4002a000
   5051c:	2001bed0 	.word	0x2001bed0
   50520:	2002062f 	.word	0x2002062f
   50524:	2001bece 	.word	0x2001bece
   50528:	40005600 	.word	0x40005600
   5052c:	000249f0 	.word	0x000249f0
   50530:	20020630 	.word	0x20020630

00050534 <handle_modem_rpc_msg.part.0>:
   50534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   50538:	2500      	movs	r5, #0
   5053a:	4606      	mov	r6, r0
   5053c:	460f      	mov	r7, r1
   5053e:	46a8      	mov	r8, r5
   50540:	f8df 9074 	ldr.w	r9, [pc, #116]	; 505b8 <handle_modem_rpc_msg.part.0+0x84>
   50544:	6833      	ldr	r3, [r6, #0]
   50546:	429d      	cmp	r5, r3
   50548:	d302      	bcc.n	50550 <handle_modem_rpc_msg.part.0+0x1c>
   5054a:	4640      	mov	r0, r8
   5054c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   50550:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   50554:	68a3      	ldr	r3, [r4, #8]
   50556:	b1fb      	cbz	r3, 50598 <handle_modem_rpc_msg.part.0+0x64>
   50558:	6863      	ldr	r3, [r4, #4]
   5055a:	b2db      	uxtb	r3, r3
   5055c:	2b01      	cmp	r3, #1
   5055e:	d11b      	bne.n	50598 <handle_modem_rpc_msg.part.0+0x64>
   50560:	6862      	ldr	r2, [r4, #4]
   50562:	f8b9 3000 	ldrh.w	r3, [r9]
   50566:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   5056a:	d115      	bne.n	50598 <handle_modem_rpc_msg.part.0+0x64>
   5056c:	2f02      	cmp	r7, #2
   5056e:	68a0      	ldr	r0, [r4, #8]
   50570:	d114      	bne.n	5059c <handle_modem_rpc_msg.part.0+0x68>
   50572:	f7ff fd39 	bl	4ffe8 <rpc_handle_data_message>
   50576:	2802      	cmp	r0, #2
   50578:	d00e      	beq.n	50598 <handle_modem_rpc_msg.part.0+0x64>
   5057a:	2801      	cmp	r0, #1
   5057c:	d113      	bne.n	505a6 <handle_modem_rpc_msg.part.0+0x72>
   5057e:	6863      	ldr	r3, [r4, #4]
   50580:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   50584:	f043 0302 	orr.w	r3, r3, #2
   50588:	6063      	str	r3, [r4, #4]
   5058a:	f04f 0801 	mov.w	r8, #1
   5058e:	f8b9 3000 	ldrh.w	r3, [r9]
   50592:	3301      	adds	r3, #1
   50594:	f8a9 3000 	strh.w	r3, [r9]
   50598:	3501      	adds	r5, #1
   5059a:	e7d3      	b.n	50544 <handle_modem_rpc_msg.part.0+0x10>
   5059c:	6801      	ldr	r1, [r0, #0]
   5059e:	0c09      	lsrs	r1, r1, #16
   505a0:	f7ff fd04 	bl	4ffac <rpc_handle_ctrl_message>
   505a4:	e7e7      	b.n	50576 <handle_modem_rpc_msg.part.0+0x42>
   505a6:	2800      	cmp	r0, #0
   505a8:	d1ef      	bne.n	5058a <handle_modem_rpc_msg.part.0+0x56>
   505aa:	6863      	ldr	r3, [r4, #4]
   505ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   505b0:	f043 0303 	orr.w	r3, r3, #3
   505b4:	e7e8      	b.n	50588 <handle_modem_rpc_msg.part.0+0x54>
   505b6:	bf00      	nop
   505b8:	2001bece 	.word	0x2001bece

000505bc <rpc_transport_ipc_msg_data_rx_free>:
   505bc:	b510      	push	{r4, lr}
   505be:	4b0a      	ldr	r3, [pc, #40]	; (505e8 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   505c0:	4604      	mov	r4, r0
   505c2:	781b      	ldrb	r3, [r3, #0]
   505c4:	2b03      	cmp	r3, #3
   505c6:	d00e      	beq.n	505e6 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   505c8:	f7ff feaa 	bl	50320 <rpc_transport_ipc_ctrl_msg_alloc>
   505cc:	b158      	cbz	r0, 505e6 <rpc_transport_ipc_msg_data_rx_free+0x2a>
   505ce:	2101      	movs	r1, #1
   505d0:	2200      	movs	r2, #0
   505d2:	7001      	strb	r1, [r0, #0]
   505d4:	2102      	movs	r1, #2
   505d6:	6084      	str	r4, [r0, #8]
   505d8:	7042      	strb	r2, [r0, #1]
   505da:	7081      	strb	r1, [r0, #2]
   505dc:	70c2      	strb	r2, [r0, #3]
   505de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   505e2:	f7ff be39 	b.w	50258 <rpc_transport_ipc_ctrl_msg_send>
   505e6:	bd10      	pop	{r4, pc}
   505e8:	2002062f 	.word	0x2002062f

000505ec <rpc_message_handler>:
   505ec:	b538      	push	{r3, r4, r5, lr}
   505ee:	4d09      	ldr	r5, [pc, #36]	; (50614 <rpc_message_handler+0x28>)
   505f0:	6828      	ldr	r0, [r5, #0]
   505f2:	b110      	cbz	r0, 505fa <rpc_message_handler+0xe>
   505f4:	2101      	movs	r1, #1
   505f6:	f7ff ff9d 	bl	50534 <handle_modem_rpc_msg.part.0>
   505fa:	4604      	mov	r4, r0
   505fc:	6868      	ldr	r0, [r5, #4]
   505fe:	b910      	cbnz	r0, 50606 <rpc_message_handler+0x1a>
   50600:	2c00      	cmp	r4, #0
   50602:	d1f5      	bne.n	505f0 <rpc_message_handler+0x4>
   50604:	bd38      	pop	{r3, r4, r5, pc}
   50606:	2102      	movs	r1, #2
   50608:	f7ff ff94 	bl	50534 <handle_modem_rpc_msg.part.0>
   5060c:	2800      	cmp	r0, #0
   5060e:	d0f7      	beq.n	50600 <rpc_message_handler+0x14>
   50610:	e7ee      	b.n	505f0 <rpc_message_handler+0x4>
   50612:	bf00      	nop
   50614:	2001b8f0 	.word	0x2001b8f0

00050618 <ipc_irq_handler>:
   50618:	b510      	push	{r4, lr}
   5061a:	2807      	cmp	r0, #7
   5061c:	d85e      	bhi.n	506dc <ipc_irq_handler+0xc4>
   5061e:	e8df f000 	tbb	[pc, r0]
   50622:	5d0a      	.short	0x5d0a
   50624:	5d555d3d 	.word	0x5d555d3d
   50628:	0436      	.short	0x0436
   5062a:	f7ff fd5f 	bl	500ec <ipc_trace_handle>
   5062e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   50632:	f7f9 badf 	b.w	49bf4 <nrf_modem_os_event_notify>
   50636:	2403      	movs	r4, #3
   50638:	4b29      	ldr	r3, [pc, #164]	; (506e0 <ipc_irq_handler+0xc8>)
   5063a:	f8d3 0614 	ldr.w	r0, [r3, #1556]	; 0x614
   5063e:	f8d3 1618 	ldr.w	r1, [r3, #1560]	; 0x618
   50642:	4b28      	ldr	r3, [pc, #160]	; (506e4 <ipc_irq_handler+0xcc>)
   50644:	781a      	ldrb	r2, [r3, #0]
   50646:	701c      	strb	r4, [r3, #0]
   50648:	2a01      	cmp	r2, #1
   5064a:	d11b      	bne.n	50684 <ipc_irq_handler+0x6c>
   5064c:	4b26      	ldr	r3, [pc, #152]	; (506e8 <ipc_irq_handler+0xd0>)
   5064e:	4298      	cmp	r0, r3
   50650:	d00f      	beq.n	50672 <ipc_irq_handler+0x5a>
   50652:	d808      	bhi.n	50666 <ipc_irq_handler+0x4e>
   50654:	3b02      	subs	r3, #2
   50656:	4298      	cmp	r0, r3
   50658:	d00e      	beq.n	50678 <ipc_irq_handler+0x60>
   5065a:	3301      	adds	r3, #1
   5065c:	4298      	cmp	r0, r3
   5065e:	d00e      	beq.n	5067e <ipc_irq_handler+0x66>
   50660:	4b22      	ldr	r3, [pc, #136]	; (506ec <ipc_irq_handler+0xd4>)
   50662:	6018      	str	r0, [r3, #0]
   50664:	e7e3      	b.n	5062e <ipc_irq_handler+0x16>
   50666:	4b22      	ldr	r3, [pc, #136]	; (506f0 <ipc_irq_handler+0xd8>)
   50668:	4298      	cmp	r0, r3
   5066a:	d1f9      	bne.n	50660 <ipc_irq_handler+0x48>
   5066c:	f06f 0004 	mvn.w	r0, #4
   50670:	e7f6      	b.n	50660 <ipc_irq_handler+0x48>
   50672:	f06f 000b 	mvn.w	r0, #11
   50676:	e7f3      	b.n	50660 <ipc_irq_handler+0x48>
   50678:	f06f 0015 	mvn.w	r0, #21
   5067c:	e7f0      	b.n	50660 <ipc_irq_handler+0x48>
   5067e:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   50682:	e7ed      	b.n	50660 <ipc_irq_handler+0x48>
   50684:	f3c0 000b 	ubfx	r0, r0, #0, #12
   50688:	f001 fade 	bl	51c48 <nrf_modem_fault_handler_internal>
   5068c:	e7cf      	b.n	5062e <ipc_irq_handler+0x16>
   5068e:	2202      	movs	r2, #2
   50690:	4b14      	ldr	r3, [pc, #80]	; (506e4 <ipc_irq_handler+0xcc>)
   50692:	2000      	movs	r0, #0
   50694:	701a      	strb	r2, [r3, #0]
   50696:	f001 fae7 	bl	51c68 <nrf_modem_state_set>
   5069a:	e7c8      	b.n	5062e <ipc_irq_handler+0x16>
   5069c:	4b11      	ldr	r3, [pc, #68]	; (506e4 <ipc_irq_handler+0xcc>)
   5069e:	781a      	ldrb	r2, [r3, #0]
   506a0:	2a01      	cmp	r2, #1
   506a2:	b2d0      	uxtb	r0, r2
   506a4:	d112      	bne.n	506cc <ipc_irq_handler+0xb4>
   506a6:	4a13      	ldr	r2, [pc, #76]	; (506f4 <ipc_irq_handler+0xdc>)
   506a8:	4c13      	ldr	r4, [pc, #76]	; (506f8 <ipc_irq_handler+0xe0>)
   506aa:	6812      	ldr	r2, [r2, #0]
   506ac:	6891      	ldr	r1, [r2, #8]
   506ae:	6061      	str	r1, [r4, #4]
   506b0:	6852      	ldr	r2, [r2, #4]
   506b2:	6022      	str	r2, [r4, #0]
   506b4:	b121      	cbz	r1, 506c0 <ipc_irq_handler+0xa8>
   506b6:	b11a      	cbz	r2, 506c0 <ipc_irq_handler+0xa8>
   506b8:	6809      	ldr	r1, [r1, #0]
   506ba:	b109      	cbz	r1, 506c0 <ipc_irq_handler+0xa8>
   506bc:	6812      	ldr	r2, [r2, #0]
   506be:	b942      	cbnz	r2, 506d2 <ipc_irq_handler+0xba>
   506c0:	f06f 0104 	mvn.w	r1, #4
   506c4:	4a09      	ldr	r2, [pc, #36]	; (506ec <ipc_irq_handler+0xd4>)
   506c6:	6011      	str	r1, [r2, #0]
   506c8:	2203      	movs	r2, #3
   506ca:	701a      	strb	r2, [r3, #0]
   506cc:	f7ff ff8e 	bl	505ec <rpc_message_handler>
   506d0:	e7ad      	b.n	5062e <ipc_irq_handler+0x16>
   506d2:	2200      	movs	r2, #0
   506d4:	701a      	strb	r2, [r3, #0]
   506d6:	f001 fac7 	bl	51c68 <nrf_modem_state_set>
   506da:	e7f7      	b.n	506cc <ipc_irq_handler+0xb4>
   506dc:	bd10      	pop	{r4, pc}
   506de:	bf00      	nop
   506e0:	4002a000 	.word	0x4002a000
   506e4:	2002062f 	.word	0x2002062f
   506e8:	00010022 	.word	0x00010022
   506ec:	2001b8e8 	.word	0x2001b8e8
   506f0:	00013032 	.word	0x00013032
   506f4:	2001b8ec 	.word	0x2001b8ec
   506f8:	2001b8f0 	.word	0x2001b8f0

000506fc <sock_init>:
   506fc:	f44f 7240 	mov.w	r2, #768	; 0x300
   50700:	2100      	movs	r1, #0
   50702:	b508      	push	{r3, lr}
   50704:	4808      	ldr	r0, [pc, #32]	; (50728 <sock_init+0x2c>)
   50706:	f00a fbe2 	bl	5aece <memset>
   5070a:	2100      	movs	r1, #0
   5070c:	2208      	movs	r2, #8
   5070e:	4b07      	ldr	r3, [pc, #28]	; (5072c <sock_init+0x30>)
   50710:	4807      	ldr	r0, [pc, #28]	; (50730 <sock_init+0x34>)
   50712:	7019      	strb	r1, [r3, #0]
   50714:	4b04      	ldr	r3, [pc, #16]	; (50728 <sock_init+0x2c>)
   50716:	3a01      	subs	r2, #1
   50718:	e9c3 0100 	strd	r0, r1, [r3]
   5071c:	6099      	str	r1, [r3, #8]
   5071e:	f103 0360 	add.w	r3, r3, #96	; 0x60
   50722:	d1f8      	bne.n	50716 <sock_init+0x1a>
   50724:	bd08      	pop	{r3, pc}
   50726:	bf00      	nop
   50728:	2001b908 	.word	0x2001b908
   5072c:	20020631 	.word	0x20020631
   50730:	1badf11e 	.word	0x1badf11e

00050734 <sock_open>:
   50734:	2300      	movs	r3, #0
   50736:	2060      	movs	r0, #96	; 0x60
   50738:	b530      	push	{r4, r5, lr}
   5073a:	4a0d      	ldr	r2, [pc, #52]	; (50770 <sock_open+0x3c>)
   5073c:	4c0d      	ldr	r4, [pc, #52]	; (50774 <sock_open+0x40>)
   5073e:	fb00 f103 	mul.w	r1, r0, r3
   50742:	588d      	ldr	r5, [r1, r2]
   50744:	42a5      	cmp	r5, r4
   50746:	d10e      	bne.n	50766 <sock_open+0x32>
   50748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   5074c:	1850      	adds	r0, r2, r1
   5074e:	5053      	str	r3, [r2, r1]
   50750:	4a09      	ldr	r2, [pc, #36]	; (50778 <sock_open+0x44>)
   50752:	7f03      	ldrb	r3, [r0, #28]
   50754:	7812      	ldrb	r2, [r2, #0]
   50756:	f362 1386 	bfi	r3, r2, #6, #1
   5075a:	7703      	strb	r3, [r0, #28]
   5075c:	2302      	movs	r3, #2
   5075e:	8783      	strh	r3, [r0, #60]	; 0x3c
   50760:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   50764:	bd30      	pop	{r4, r5, pc}
   50766:	3301      	adds	r3, #1
   50768:	2b08      	cmp	r3, #8
   5076a:	d1e8      	bne.n	5073e <sock_open+0xa>
   5076c:	2000      	movs	r0, #0
   5076e:	e7f9      	b.n	50764 <sock_open+0x30>
   50770:	2001b908 	.word	0x2001b908
   50774:	1badf11e 	.word	0x1badf11e
   50778:	20020631 	.word	0x20020631

0005077c <sock_find>:
   5077c:	b530      	push	{r4, r5, lr}
   5077e:	2200      	movs	r2, #0
   50780:	2460      	movs	r4, #96	; 0x60
   50782:	4b06      	ldr	r3, [pc, #24]	; (5079c <sock_find+0x20>)
   50784:	fb04 f102 	mul.w	r1, r4, r2
   50788:	58cd      	ldr	r5, [r1, r3]
   5078a:	4285      	cmp	r5, r0
   5078c:	d101      	bne.n	50792 <sock_find+0x16>
   5078e:	1858      	adds	r0, r3, r1
   50790:	bd30      	pop	{r4, r5, pc}
   50792:	3201      	adds	r2, #1
   50794:	2a08      	cmp	r2, #8
   50796:	d1f5      	bne.n	50784 <sock_find+0x8>
   50798:	2000      	movs	r0, #0
   5079a:	e7f9      	b.n	50790 <sock_find+0x14>
   5079c:	2001b908 	.word	0x2001b908

000507a0 <_sock_close>:
   507a0:	b538      	push	{r3, r4, r5, lr}
   507a2:	f7ff ffeb 	bl	5077c <sock_find>
   507a6:	4604      	mov	r4, r0
   507a8:	1d05      	adds	r5, r0, #4
   507aa:	4628      	mov	r0, r5
   507ac:	f009 f9c6 	bl	59b3c <pkt_flush>
   507b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   507b2:	b108      	cbz	r0, 507b8 <_sock_close+0x18>
   507b4:	f7f9 fa3c 	bl	49c30 <nrf_modem_os_free>
   507b8:	225c      	movs	r2, #92	; 0x5c
   507ba:	2100      	movs	r1, #0
   507bc:	4628      	mov	r0, r5
   507be:	f00a fb86 	bl	5aece <memset>
   507c2:	4b01      	ldr	r3, [pc, #4]	; (507c8 <_sock_close+0x28>)
   507c4:	6023      	str	r3, [r4, #0]
   507c6:	bd38      	pop	{r3, r4, r5, pc}
   507c8:	1badf11e 	.word	0x1badf11e

000507cc <sock_flow_control_set>:
   507cc:	1e02      	subs	r2, r0, #0
   507ce:	bf18      	it	ne
   507d0:	2201      	movne	r2, #1
   507d2:	4b0a      	ldr	r3, [pc, #40]	; (507fc <sock_flow_control_set+0x30>)
   507d4:	b570      	push	{r4, r5, r6, lr}
   507d6:	701a      	strb	r2, [r3, #0]
   507d8:	2560      	movs	r5, #96	; 0x60
   507da:	2200      	movs	r2, #0
   507dc:	4908      	ldr	r1, [pc, #32]	; (50800 <sock_flow_control_set+0x34>)
   507de:	4e09      	ldr	r6, [pc, #36]	; (50804 <sock_flow_control_set+0x38>)
   507e0:	fb05 f302 	mul.w	r3, r5, r2
   507e4:	585c      	ldr	r4, [r3, r1]
   507e6:	3201      	adds	r2, #1
   507e8:	42b4      	cmp	r4, r6
   507ea:	bf1f      	itttt	ne
   507ec:	185b      	addne	r3, r3, r1
   507ee:	7f1c      	ldrbne	r4, [r3, #28]
   507f0:	f360 1486 	bfine	r4, r0, #6, #1
   507f4:	771c      	strbne	r4, [r3, #28]
   507f6:	2a08      	cmp	r2, #8
   507f8:	d1f2      	bne.n	507e0 <sock_flow_control_set+0x14>
   507fa:	bd70      	pop	{r4, r5, r6, pc}
   507fc:	20020631 	.word	0x20020631
   50800:	2001b908 	.word	0x2001b908
   50804:	1badf11e 	.word	0x1badf11e

00050808 <on_getaddrinfo_res>:
   50808:	2301      	movs	r3, #1
   5080a:	4a03      	ldr	r2, [pc, #12]	; (50818 <on_getaddrinfo_res+0x10>)
   5080c:	7013      	strb	r3, [r2, #0]
   5080e:	4a03      	ldr	r2, [pc, #12]	; (5081c <on_getaddrinfo_res+0x14>)
   50810:	6010      	str	r0, [r2, #0]
   50812:	4618      	mov	r0, r3
   50814:	4770      	bx	lr
   50816:	bf00      	nop
   50818:	20020632 	.word	0x20020632
   5081c:	2001bc18 	.word	0x2001bc18

00050820 <addrinfo_init>:
   50820:	2201      	movs	r2, #1
   50822:	b508      	push	{r3, lr}
   50824:	4611      	mov	r1, r2
   50826:	4804      	ldr	r0, [pc, #16]	; (50838 <addrinfo_init+0x18>)
   50828:	f7f9 f9c8 	bl	49bbc <nrf_modem_os_sem_init>
   5082c:	2800      	cmp	r0, #0
   5082e:	bf18      	it	ne
   50830:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   50834:	bd08      	pop	{r3, pc}
   50836:	bf00      	nop
   50838:	2001bc08 	.word	0x2001bc08

0005083c <nrf_getaddrinfo>:
   5083c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   50840:	4604      	mov	r4, r0
   50842:	460e      	mov	r6, r1
   50844:	4617      	mov	r7, r2
   50846:	461d      	mov	r5, r3
   50848:	f001 fa14 	bl	51c74 <nrf_modem_state_is_initialized>
   5084c:	b928      	cbnz	r0, 5085a <nrf_getaddrinfo+0x1e>
   5084e:	2001      	movs	r0, #1
   50850:	f006 fd13 	bl	5727a <nrf_modem_os_errno_set>
   50854:	f06f 040a 	mvn.w	r4, #10
   50858:	e01c      	b.n	50894 <nrf_getaddrinfo+0x58>
   5085a:	ea54 0306 	orrs.w	r3, r4, r6
   5085e:	f000 817f 	beq.w	50b60 <nrf_getaddrinfo+0x324>
   50862:	b31f      	cbz	r7, 508ac <nrf_getaddrinfo+0x70>
   50864:	683b      	ldr	r3, [r7, #0]
   50866:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   5086a:	f023 0302 	bic.w	r3, r3, #2
   5086e:	2b00      	cmp	r3, #0
   50870:	f040 8179 	bne.w	50b66 <nrf_getaddrinfo+0x32a>
   50874:	6878      	ldr	r0, [r7, #4]
   50876:	b938      	cbnz	r0, 50888 <nrf_getaddrinfo+0x4c>
   50878:	68b8      	ldr	r0, [r7, #8]
   5087a:	b178      	cbz	r0, 5089c <nrf_getaddrinfo+0x60>
   5087c:	f009 f8ed 	bl	59a5a <sock_type_is_valid>
   50880:	b960      	cbnz	r0, 5089c <nrf_getaddrinfo+0x60>
   50882:	f06f 0406 	mvn.w	r4, #6
   50886:	e005      	b.n	50894 <nrf_getaddrinfo+0x58>
   50888:	f009 f8e1 	bl	59a4e <sock_family_is_valid>
   5088c:	2800      	cmp	r0, #0
   5088e:	d1f3      	bne.n	50878 <nrf_getaddrinfo+0x3c>
   50890:	f06f 0405 	mvn.w	r4, #5
   50894:	4620      	mov	r0, r4
   50896:	b003      	add	sp, #12
   50898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5089c:	68f8      	ldr	r0, [r7, #12]
   5089e:	b128      	cbz	r0, 508ac <nrf_getaddrinfo+0x70>
   508a0:	68b9      	ldr	r1, [r7, #8]
   508a2:	f009 f8ee 	bl	59a82 <sock_proto_supports_type>
   508a6:	b908      	cbnz	r0, 508ac <nrf_getaddrinfo+0x70>
   508a8:	206b      	movs	r0, #107	; 0x6b
   508aa:	e7d1      	b.n	50850 <nrf_getaddrinfo+0x14>
   508ac:	4bb1      	ldr	r3, [pc, #708]	; (50b74 <nrf_getaddrinfo+0x338>)
   508ae:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   508b2:	6818      	ldr	r0, [r3, #0]
   508b4:	f006 fceb 	bl	5728e <nrf_modem_os_sem_take>
   508b8:	4680      	mov	r8, r0
   508ba:	2800      	cmp	r0, #0
   508bc:	f040 8156 	bne.w	50b6c <nrf_getaddrinfo+0x330>
   508c0:	2e00      	cmp	r6, #0
   508c2:	d042      	beq.n	5094a <nrf_getaddrinfo+0x10e>
   508c4:	b31f      	cbz	r7, 5090e <nrf_getaddrinfo+0xd2>
   508c6:	683b      	ldr	r3, [r7, #0]
   508c8:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   508cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   508d0:	d11d      	bne.n	5090e <nrf_getaddrinfo+0xd2>
   508d2:	683b      	ldr	r3, [r7, #0]
   508d4:	04db      	lsls	r3, r3, #19
   508d6:	d53c      	bpl.n	50952 <nrf_getaddrinfo+0x116>
   508d8:	213a      	movs	r1, #58	; 0x3a
   508da:	4630      	mov	r0, r6
   508dc:	f00a fc97 	bl	5b20e <strchr>
   508e0:	4681      	mov	r9, r0
   508e2:	b120      	cbz	r0, 508ee <nrf_getaddrinfo+0xb2>
   508e4:	48a4      	ldr	r0, [pc, #656]	; (50b78 <nrf_getaddrinfo+0x33c>)
   508e6:	f7f0 fa85 	bl	40df4 <strlen>
   508ea:	eb09 0600 	add.w	r6, r9, r0
   508ee:	4630      	mov	r0, r6
   508f0:	49a2      	ldr	r1, [pc, #648]	; (50b7c <nrf_getaddrinfo+0x340>)
   508f2:	f00a fcee 	bl	5b2d2 <strstr>
   508f6:	4681      	mov	r9, r0
   508f8:	b318      	cbz	r0, 50942 <nrf_getaddrinfo+0x106>
   508fa:	48a0      	ldr	r0, [pc, #640]	; (50b7c <nrf_getaddrinfo+0x340>)
   508fc:	f7f0 fa7a 	bl	40df4 <strlen>
   50900:	220a      	movs	r2, #10
   50902:	2100      	movs	r1, #0
   50904:	4448      	add	r0, r9
   50906:	f003 f9d9 	bl	53cbc <strtol>
   5090a:	4606      	mov	r6, r0
   5090c:	e023      	b.n	50956 <nrf_getaddrinfo+0x11a>
   5090e:	220a      	movs	r2, #10
   50910:	2100      	movs	r1, #0
   50912:	4630      	mov	r0, r6
   50914:	f003 faec 	bl	53ef0 <strtoul>
   50918:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   5091c:	1e42      	subs	r2, r0, #1
   5091e:	429a      	cmp	r2, r3
   50920:	f200 8118 	bhi.w	50b54 <nrf_getaddrinfo+0x318>
   50924:	0203      	lsls	r3, r0, #8
   50926:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
   5092a:	4b95      	ldr	r3, [pc, #596]	; (50b80 <nrf_getaddrinfo+0x344>)
   5092c:	8018      	strh	r0, [r3, #0]
   5092e:	2f00      	cmp	r7, #0
   50930:	d1cf      	bne.n	508d2 <nrf_getaddrinfo+0x96>
   50932:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   50936:	2200      	movs	r2, #0
   50938:	4b92      	ldr	r3, [pc, #584]	; (50b84 <nrf_getaddrinfo+0x348>)
   5093a:	601a      	str	r2, [r3, #0]
   5093c:	b997      	cbnz	r7, 50964 <nrf_getaddrinfo+0x128>
   5093e:	2301      	movs	r3, #1
   50940:	e014      	b.n	5096c <nrf_getaddrinfo+0x130>
   50942:	4601      	mov	r1, r0
   50944:	220a      	movs	r2, #10
   50946:	4630      	mov	r0, r6
   50948:	e7dd      	b.n	50906 <nrf_getaddrinfo+0xca>
   5094a:	4b8d      	ldr	r3, [pc, #564]	; (50b80 <nrf_getaddrinfo+0x344>)
   5094c:	8018      	strh	r0, [r3, #0]
   5094e:	2f00      	cmp	r7, #0
   50950:	d0ef      	beq.n	50932 <nrf_getaddrinfo+0xf6>
   50952:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   50956:	6878      	ldr	r0, [r7, #4]
   50958:	2800      	cmp	r0, #0
   5095a:	d0ec      	beq.n	50936 <nrf_getaddrinfo+0xfa>
   5095c:	f000 fd0c 	bl	51378 <nrf_af_to_rpc_af>
   50960:	4b88      	ldr	r3, [pc, #544]	; (50b84 <nrf_getaddrinfo+0x348>)
   50962:	6018      	str	r0, [r3, #0]
   50964:	68bb      	ldr	r3, [r7, #8]
   50966:	2b00      	cmp	r3, #0
   50968:	bf08      	it	eq
   5096a:	2301      	moveq	r3, #1
   5096c:	f8df b224 	ldr.w	fp, [pc, #548]	; 50b94 <nrf_getaddrinfo+0x358>
   50970:	f8cb 3000 	str.w	r3, [fp]
   50974:	2f00      	cmp	r7, #0
   50976:	d04d      	beq.n	50a14 <nrf_getaddrinfo+0x1d8>
   50978:	68fb      	ldr	r3, [r7, #12]
   5097a:	2b00      	cmp	r3, #0
   5097c:	bf08      	it	eq
   5097e:	2306      	moveq	r3, #6
   50980:	f8df a214 	ldr.w	sl, [pc, #532]	; 50b98 <nrf_getaddrinfo+0x35c>
   50984:	f8ca 3000 	str.w	r3, [sl]
   50988:	b10f      	cbz	r7, 5098e <nrf_getaddrinfo+0x152>
   5098a:	f8d7 8000 	ldr.w	r8, [r7]
   5098e:	4f7e      	ldr	r7, [pc, #504]	; (50b88 <nrf_getaddrinfo+0x34c>)
   50990:	4620      	mov	r0, r4
   50992:	f8c7 8000 	str.w	r8, [r7]
   50996:	b10c      	cbz	r4, 5099c <nrf_getaddrinfo+0x160>
   50998:	f7f0 fa2c 	bl	40df4 <strlen>
   5099c:	f008 ff77 	bl	5988e <rpc_client_msg_alloc>
   509a0:	4680      	mov	r8, r0
   509a2:	2800      	cmp	r0, #0
   509a4:	f000 80d9 	beq.w	50b5a <nrf_getaddrinfo+0x31e>
   509a8:	6106      	str	r6, [r0, #16]
   509aa:	b144      	cbz	r4, 509be <nrf_getaddrinfo+0x182>
   509ac:	6806      	ldr	r6, [r0, #0]
   509ae:	4620      	mov	r0, r4
   509b0:	f7f0 fa20 	bl	40df4 <strlen>
   509b4:	4621      	mov	r1, r4
   509b6:	4602      	mov	r2, r0
   509b8:	4630      	mov	r0, r6
   509ba:	f00a fa4e 	bl	5ae5a <memcpy>
   509be:	4b71      	ldr	r3, [pc, #452]	; (50b84 <nrf_getaddrinfo+0x348>)
   509c0:	4642      	mov	r2, r8
   509c2:	681b      	ldr	r3, [r3, #0]
   509c4:	f247 010d 	movw	r1, #28685	; 0x700d
   509c8:	f8c8 3018 	str.w	r3, [r8, #24]
   509cc:	f8db 3000 	ldr.w	r3, [fp]
   509d0:	2004      	movs	r0, #4
   509d2:	f8c8 301c 	str.w	r3, [r8, #28]
   509d6:	f8da 3000 	ldr.w	r3, [sl]
   509da:	4e6c      	ldr	r6, [pc, #432]	; (50b8c <nrf_getaddrinfo+0x350>)
   509dc:	f8c8 3020 	str.w	r3, [r8, #32]
   509e0:	683b      	ldr	r3, [r7, #0]
   509e2:	f8c8 3014 	str.w	r3, [r8, #20]
   509e6:	f008 ff6d 	bl	598c4 <rpc_client_msg_send>
   509ea:	2300      	movs	r3, #0
   509ec:	7033      	strb	r3, [r6, #0]
   509ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   509f2:	9301      	str	r3, [sp, #4]
   509f4:	2000      	movs	r0, #0
   509f6:	a901      	add	r1, sp, #4
   509f8:	f7f9 f81e 	bl	49a38 <nrf_modem_os_timedwait>
   509fc:	4604      	mov	r4, r0
   509fe:	b158      	cbz	r0, 50a18 <nrf_getaddrinfo+0x1dc>
   50a00:	206e      	movs	r0, #110	; 0x6e
   50a02:	f006 fc3a 	bl	5727a <nrf_modem_os_errno_set>
   50a06:	f06f 040a 	mvn.w	r4, #10
   50a0a:	4b5a      	ldr	r3, [pc, #360]	; (50b74 <nrf_getaddrinfo+0x338>)
   50a0c:	6818      	ldr	r0, [r3, #0]
   50a0e:	f006 fc3c 	bl	5728a <nrf_modem_os_sem_give>
   50a12:	e73f      	b.n	50894 <nrf_getaddrinfo+0x58>
   50a14:	2306      	movs	r3, #6
   50a16:	e7b3      	b.n	50980 <nrf_getaddrinfo+0x144>
   50a18:	7833      	ldrb	r3, [r6, #0]
   50a1a:	2b01      	cmp	r3, #1
   50a1c:	d1ea      	bne.n	509f4 <nrf_getaddrinfo+0x1b8>
   50a1e:	4b5c      	ldr	r3, [pc, #368]	; (50b90 <nrf_getaddrinfo+0x354>)
   50a20:	681b      	ldr	r3, [r3, #0]
   50a22:	6958      	ldr	r0, [r3, #20]
   50a24:	2800      	cmp	r0, #0
   50a26:	f040 8091 	bne.w	50b4c <nrf_getaddrinfo+0x310>
   50a2a:	2020      	movs	r0, #32
   50a2c:	681e      	ldr	r6, [r3, #0]
   50a2e:	f7f9 f8f7 	bl	49c20 <nrf_modem_os_alloc>
   50a32:	6028      	str	r0, [r5, #0]
   50a34:	b1e0      	cbz	r0, 50a70 <nrf_getaddrinfo+0x234>
   50a36:	f8d6 8008 	ldr.w	r8, [r6, #8]
   50a3a:	f1b8 0f01 	cmp.w	r8, #1
   50a3e:	d00f      	beq.n	50a60 <nrf_getaddrinfo+0x224>
   50a40:	f1b8 0f02 	cmp.w	r8, #2
   50a44:	d036      	beq.n	50ab4 <nrf_getaddrinfo+0x278>
   50a46:	f06f 0405 	mvn.w	r4, #5
   50a4a:	4b51      	ldr	r3, [pc, #324]	; (50b90 <nrf_getaddrinfo+0x354>)
   50a4c:	681b      	ldr	r3, [r3, #0]
   50a4e:	6818      	ldr	r0, [r3, #0]
   50a50:	b108      	cbz	r0, 50a56 <nrf_getaddrinfo+0x21a>
   50a52:	f008 ff41 	bl	598d8 <rpc_client_msg_data_rx_free>
   50a56:	4b4e      	ldr	r3, [pc, #312]	; (50b90 <nrf_getaddrinfo+0x354>)
   50a58:	6818      	ldr	r0, [r3, #0]
   50a5a:	f008 ff3a 	bl	598d2 <rpc_client_msg_free>
   50a5e:	e7d4      	b.n	50a0a <nrf_getaddrinfo+0x1ce>
   50a60:	2010      	movs	r0, #16
   50a62:	f7f9 f8dd 	bl	49c20 <nrf_modem_os_alloc>
   50a66:	4681      	mov	r9, r0
   50a68:	b928      	cbnz	r0, 50a76 <nrf_getaddrinfo+0x23a>
   50a6a:	6828      	ldr	r0, [r5, #0]
   50a6c:	f7f9 f8e0 	bl	49c30 <nrf_modem_os_free>
   50a70:	f06f 0409 	mvn.w	r4, #9
   50a74:	e7e9      	b.n	50a4a <nrf_getaddrinfo+0x20e>
   50a76:	2210      	movs	r2, #16
   50a78:	4941      	ldr	r1, [pc, #260]	; (50b80 <nrf_getaddrinfo+0x344>)
   50a7a:	7002      	strb	r2, [r0, #0]
   50a7c:	8809      	ldrh	r1, [r1, #0]
   50a7e:	f8c0 8004 	str.w	r8, [r0, #4]
   50a82:	8101      	strh	r1, [r0, #8]
   50a84:	69b1      	ldr	r1, [r6, #24]
   50a86:	60c1      	str	r1, [r0, #12]
   50a88:	6829      	ldr	r1, [r5, #0]
   50a8a:	610a      	str	r2, [r1, #16]
   50a8c:	683a      	ldr	r2, [r7, #0]
   50a8e:	f8d5 8000 	ldr.w	r8, [r5]
   50a92:	f012 0202 	ands.w	r2, r2, #2
   50a96:	d056      	beq.n	50b46 <nrf_getaddrinfo+0x30a>
   50a98:	8af0      	ldrh	r0, [r6, #22]
   50a9a:	3001      	adds	r0, #1
   50a9c:	f7f9 f8c0 	bl	49c20 <nrf_modem_os_alloc>
   50aa0:	f8c8 0018 	str.w	r0, [r8, #24]
   50aa4:	682a      	ldr	r2, [r5, #0]
   50aa6:	6990      	ldr	r0, [r2, #24]
   50aa8:	bb38      	cbnz	r0, 50afa <nrf_getaddrinfo+0x2be>
   50aaa:	4628      	mov	r0, r5
   50aac:	f7f9 f8c0 	bl	49c30 <nrf_modem_os_free>
   50ab0:	4648      	mov	r0, r9
   50ab2:	e7db      	b.n	50a6c <nrf_getaddrinfo+0x230>
   50ab4:	2024      	movs	r0, #36	; 0x24
   50ab6:	f7f9 f8b3 	bl	49c20 <nrf_modem_os_alloc>
   50aba:	4681      	mov	r9, r0
   50abc:	2800      	cmp	r0, #0
   50abe:	d0d4      	beq.n	50a6a <nrf_getaddrinfo+0x22e>
   50ac0:	2224      	movs	r2, #36	; 0x24
   50ac2:	4621      	mov	r1, r4
   50ac4:	f00a fa03 	bl	5aece <memset>
   50ac8:	2224      	movs	r2, #36	; 0x24
   50aca:	f889 2000 	strb.w	r2, [r9]
   50ace:	4a2c      	ldr	r2, [pc, #176]	; (50b80 <nrf_getaddrinfo+0x344>)
   50ad0:	f8c9 8004 	str.w	r8, [r9, #4]
   50ad4:	8812      	ldrh	r2, [r2, #0]
   50ad6:	f109 0110 	add.w	r1, r9, #16
   50ada:	f8a9 2008 	strh.w	r2, [r9, #8]
   50ade:	f106 0028 	add.w	r0, r6, #40	; 0x28
   50ae2:	f106 0218 	add.w	r2, r6, #24
   50ae6:	f852 cb04 	ldr.w	ip, [r2], #4
   50aea:	4282      	cmp	r2, r0
   50aec:	f841 cb04 	str.w	ip, [r1], #4
   50af0:	d1f9      	bne.n	50ae6 <nrf_getaddrinfo+0x2aa>
   50af2:	2124      	movs	r1, #36	; 0x24
   50af4:	682a      	ldr	r2, [r5, #0]
   50af6:	6111      	str	r1, [r2, #16]
   50af8:	e7c8      	b.n	50a8c <nrf_getaddrinfo+0x250>
   50afa:	f8b6 c014 	ldrh.w	ip, [r6, #20]
   50afe:	f106 0118 	add.w	r1, r6, #24
   50b02:	8af2      	ldrh	r2, [r6, #22]
   50b04:	4461      	add	r1, ip
   50b06:	f00a f9a8 	bl	5ae5a <memcpy>
   50b0a:	2000      	movs	r0, #0
   50b0c:	6829      	ldr	r1, [r5, #0]
   50b0e:	8af2      	ldrh	r2, [r6, #22]
   50b10:	6989      	ldr	r1, [r1, #24]
   50b12:	5488      	strb	r0, [r1, r2]
   50b14:	68b0      	ldr	r0, [r6, #8]
   50b16:	f8d5 8000 	ldr.w	r8, [r5]
   50b1a:	f009 fd11 	bl	5a540 <rpc_af_to_nrf_af>
   50b1e:	f8c8 0004 	str.w	r0, [r8, #4]
   50b22:	682a      	ldr	r2, [r5, #0]
   50b24:	f8db 1000 	ldr.w	r1, [fp]
   50b28:	6091      	str	r1, [r2, #8]
   50b2a:	682a      	ldr	r2, [r5, #0]
   50b2c:	f8da 1000 	ldr.w	r1, [sl]
   50b30:	60d1      	str	r1, [r2, #12]
   50b32:	682a      	ldr	r2, [r5, #0]
   50b34:	6839      	ldr	r1, [r7, #0]
   50b36:	6011      	str	r1, [r2, #0]
   50b38:	682a      	ldr	r2, [r5, #0]
   50b3a:	f8c2 9014 	str.w	r9, [r2, #20]
   50b3e:	2200      	movs	r2, #0
   50b40:	682b      	ldr	r3, [r5, #0]
   50b42:	61da      	str	r2, [r3, #28]
   50b44:	e781      	b.n	50a4a <nrf_getaddrinfo+0x20e>
   50b46:	f8c8 2018 	str.w	r2, [r8, #24]
   50b4a:	e7e3      	b.n	50b14 <nrf_getaddrinfo+0x2d8>
   50b4c:	f009 fd40 	bl	5a5d0 <rpc_error_to_nrf_gai_errno>
   50b50:	4604      	mov	r4, r0
   50b52:	e77a      	b.n	50a4a <nrf_getaddrinfo+0x20e>
   50b54:	f06f 0407 	mvn.w	r4, #7
   50b58:	e757      	b.n	50a0a <nrf_getaddrinfo+0x1ce>
   50b5a:	f06f 0409 	mvn.w	r4, #9
   50b5e:	e754      	b.n	50a0a <nrf_getaddrinfo+0x1ce>
   50b60:	f06f 0401 	mvn.w	r4, #1
   50b64:	e696      	b.n	50894 <nrf_getaddrinfo+0x58>
   50b66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   50b6a:	e693      	b.n	50894 <nrf_getaddrinfo+0x58>
   50b6c:	f06f 0402 	mvn.w	r4, #2
   50b70:	e690      	b.n	50894 <nrf_getaddrinfo+0x58>
   50b72:	bf00      	nop
   50b74:	2001bc08 	.word	0x2001bc08
   50b78:	0005d054 	.word	0x0005d054
   50b7c:	000607a7 	.word	0x000607a7
   50b80:	2001bed2 	.word	0x2001bed2
   50b84:	2001bc0c 	.word	0x2001bc0c
   50b88:	2001bc10 	.word	0x2001bc10
   50b8c:	20020632 	.word	0x20020632
   50b90:	2001bc18 	.word	0x2001bc18
   50b94:	2001bc1c 	.word	0x2001bc1c
   50b98:	2001bc14 	.word	0x2001bc14

00050b9c <rpc_ip_event_handler>:
   50b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   50b9e:	f248 030f 	movw	r3, #32783	; 0x800f
   50ba2:	4299      	cmp	r1, r3
   50ba4:	4605      	mov	r5, r0
   50ba6:	460e      	mov	r6, r1
   50ba8:	d00b      	beq.n	50bc2 <rpc_ip_event_handler+0x26>
   50baa:	f249 0304 	movw	r3, #36868	; 0x9004
   50bae:	4299      	cmp	r1, r3
   50bb0:	d00a      	beq.n	50bc8 <rpc_ip_event_handler+0x2c>
   50bb2:	f248 030d 	movw	r3, #32781	; 0x800d
   50bb6:	4299      	cmp	r1, r3
   50bb8:	d117      	bne.n	50bea <rpc_ip_event_handler+0x4e>
   50bba:	f7ff fe25 	bl	50808 <on_getaddrinfo_res>
   50bbe:	b2c0      	uxtb	r0, r0
   50bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   50bc2:	f008 ffc9 	bl	59b58 <on_conf_dnssrv_res>
   50bc6:	e7fa      	b.n	50bbe <rpc_ip_event_handler+0x22>
   50bc8:	6903      	ldr	r3, [r0, #16]
   50bca:	2b03      	cmp	r3, #3
   50bcc:	d806      	bhi.n	50bdc <rpc_ip_event_handler+0x40>
   50bce:	e8df f003 	tbb	[pc, r3]
   50bd2:	0a02      	.short	0x0a02
   50bd4:	0702      	.short	0x0702
   50bd6:	2000      	movs	r0, #0
   50bd8:	f7ff fdf8 	bl	507cc <sock_flow_control_set>
   50bdc:	2000      	movs	r0, #0
   50bde:	e7ef      	b.n	50bc0 <rpc_ip_event_handler+0x24>
   50be0:	2201      	movs	r2, #1
   50be2:	4b70      	ldr	r3, [pc, #448]	; (50da4 <rpc_ip_event_handler+0x208>)
   50be4:	701a      	strb	r2, [r3, #0]
   50be6:	2001      	movs	r0, #1
   50be8:	e7f6      	b.n	50bd8 <rpc_ip_event_handler+0x3c>
   50bea:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   50bee:	bf8c      	ite	hi
   50bf0:	68c0      	ldrhi	r0, [r0, #12]
   50bf2:	6928      	ldrls	r0, [r5, #16]
   50bf4:	f7ff fdc2 	bl	5077c <sock_find>
   50bf8:	4604      	mov	r4, r0
   50bfa:	b928      	cbnz	r0, 50c08 <rpc_ip_event_handler+0x6c>
   50bfc:	6828      	ldr	r0, [r5, #0]
   50bfe:	2800      	cmp	r0, #0
   50c00:	d0ec      	beq.n	50bdc <rpc_ip_event_handler+0x40>
   50c02:	f008 fe69 	bl	598d8 <rpc_client_msg_data_rx_free>
   50c06:	e7e9      	b.n	50bdc <rpc_ip_event_handler+0x40>
   50c08:	f248 030c 	movw	r3, #32780	; 0x800c
   50c0c:	429e      	cmp	r6, r3
   50c0e:	d823      	bhi.n	50c58 <rpc_ip_event_handler+0xbc>
   50c10:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   50c14:	d9f2      	bls.n	50bfc <rpc_ip_event_handler+0x60>
   50c16:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   50c1a:	3e01      	subs	r6, #1
   50c1c:	2e0b      	cmp	r6, #11
   50c1e:	d8ed      	bhi.n	50bfc <rpc_ip_event_handler+0x60>
   50c20:	a301      	add	r3, pc, #4	; (adr r3, 50c28 <rpc_ip_event_handler+0x8c>)
   50c22:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   50c26:	bf00      	nop
   50c28:	00050ccf 	.word	0x00050ccf
   50c2c:	00050ceb 	.word	0x00050ceb
   50c30:	00050ccf 	.word	0x00050ccf
   50c34:	00050ccf 	.word	0x00050ccf
   50c38:	00050ccf 	.word	0x00050ccf
   50c3c:	00050ccf 	.word	0x00050ccf
   50c40:	00050ccf 	.word	0x00050ccf
   50c44:	00050ccf 	.word	0x00050ccf
   50c48:	00050cc3 	.word	0x00050cc3
   50c4c:	00050bfd 	.word	0x00050bfd
   50c50:	00050bfd 	.word	0x00050bfd
   50c54:	00050d2d 	.word	0x00050d2d
   50c58:	f249 0302 	movw	r3, #36866	; 0x9002
   50c5c:	429e      	cmp	r6, r3
   50c5e:	d069      	beq.n	50d34 <rpc_ip_event_handler+0x198>
   50c60:	d822      	bhi.n	50ca8 <rpc_ip_event_handler+0x10c>
   50c62:	f248 0381 	movw	r3, #32897	; 0x8081
   50c66:	429e      	cmp	r6, r3
   50c68:	f000 8097 	beq.w	50d9a <rpc_ip_event_handler+0x1fe>
   50c6c:	f249 0301 	movw	r3, #36865	; 0x9001
   50c70:	429e      	cmp	r6, r3
   50c72:	d1c3      	bne.n	50bfc <rpc_ip_event_handler+0x60>
   50c74:	2010      	movs	r0, #16
   50c76:	f7f8 ffd3 	bl	49c20 <nrf_modem_os_alloc>
   50c7a:	4606      	mov	r6, r0
   50c7c:	2800      	cmp	r0, #0
   50c7e:	d065      	beq.n	50d4c <rpc_ip_event_handler+0x1b0>
   50c80:	2710      	movs	r7, #16
   50c82:	2100      	movs	r1, #0
   50c84:	463a      	mov	r2, r7
   50c86:	f00a f922 	bl	5aece <memset>
   50c8a:	682b      	ldr	r3, [r5, #0]
   50c8c:	6073      	str	r3, [r6, #4]
   50c8e:	686b      	ldr	r3, [r5, #4]
   50c90:	8133      	strh	r3, [r6, #8]
   50c92:	8a6b      	ldrh	r3, [r5, #18]
   50c94:	2b04      	cmp	r3, #4
   50c96:	d051      	beq.n	50d3c <rpc_ip_event_handler+0x1a0>
   50c98:	42bb      	cmp	r3, r7
   50c9a:	d064      	beq.n	50d66 <rpc_ip_event_handler+0x1ca>
   50c9c:	4620      	mov	r0, r4
   50c9e:	4631      	mov	r1, r6
   50ca0:	f008 fe2a 	bl	598f8 <sock_pkt_append>
   50ca4:	2000      	movs	r0, #0
   50ca6:	e78a      	b.n	50bbe <rpc_ip_event_handler+0x22>
   50ca8:	f249 0303 	movw	r3, #36867	; 0x9003
   50cac:	429e      	cmp	r6, r3
   50cae:	d012      	beq.n	50cd6 <rpc_ip_event_handler+0x13a>
   50cb0:	f249 0382 	movw	r3, #36994	; 0x9082
   50cb4:	429e      	cmp	r6, r3
   50cb6:	d1a1      	bne.n	50bfc <rpc_ip_event_handler+0x60>
   50cb8:	4601      	mov	r1, r0
   50cba:	4628      	mov	r0, r5
   50cbc:	f000 facc 	bl	51258 <on_tls_handshake_ntf>
   50cc0:	e77d      	b.n	50bbe <rpc_ip_event_handler+0x22>
   50cc2:	7f03      	ldrb	r3, [r0, #28]
   50cc4:	f023 0303 	bic.w	r3, r3, #3
   50cc8:	f043 0303 	orr.w	r3, r3, #3
   50ccc:	7703      	strb	r3, [r0, #28]
   50cce:	4628      	mov	r0, r5
   50cd0:	f009 fc98 	bl	5a604 <res_forward>
   50cd4:	e773      	b.n	50bbe <rpc_ip_event_handler+0x22>
   50cd6:	7f03      	ldrb	r3, [r0, #28]
   50cd8:	f043 0302 	orr.w	r3, r3, #2
   50cdc:	7703      	strb	r3, [r0, #28]
   50cde:	6928      	ldr	r0, [r5, #16]
   50ce0:	2869      	cmp	r0, #105	; 0x69
   50ce2:	d109      	bne.n	50cf8 <rpc_ip_event_handler+0x15c>
   50ce4:	2368      	movs	r3, #104	; 0x68
   50ce6:	61a3      	str	r3, [r4, #24]
   50ce8:	e778      	b.n	50bdc <rpc_ip_event_handler+0x40>
   50cea:	7f03      	ldrb	r3, [r0, #28]
   50cec:	68ee      	ldr	r6, [r5, #12]
   50cee:	f36f 0382 	bfc	r3, #2, #1
   50cf2:	7703      	strb	r3, [r0, #28]
   50cf4:	6968      	ldr	r0, [r5, #20]
   50cf6:	b118      	cbz	r0, 50d00 <rpc_ip_event_handler+0x164>
   50cf8:	f000 fb52 	bl	513a0 <rpc_error_to_nrf_errno>
   50cfc:	61a0      	str	r0, [r4, #24]
   50cfe:	e76d      	b.n	50bdc <rpc_ip_event_handler+0x40>
   50d00:	4620      	mov	r0, r4
   50d02:	f008 fe28 	bl	59956 <sock_proto_is_secure>
   50d06:	b918      	cbnz	r0, 50d10 <rpc_ip_event_handler+0x174>
   50d08:	7f23      	ldrb	r3, [r4, #28]
   50d0a:	f043 0308 	orr.w	r3, r3, #8
   50d0e:	7723      	strb	r3, [r4, #28]
   50d10:	4620      	mov	r0, r4
   50d12:	f008 fe20 	bl	59956 <sock_proto_is_secure>
   50d16:	2800      	cmp	r0, #0
   50d18:	f43f af60 	beq.w	50bdc <rpc_ip_event_handler+0x40>
   50d1c:	2e00      	cmp	r6, #0
   50d1e:	f43f af5d 	beq.w	50bdc <rpc_ip_event_handler+0x40>
   50d22:	2100      	movs	r1, #0
   50d24:	4620      	mov	r0, r4
   50d26:	f000 fab1 	bl	5128c <tls_attach>
   50d2a:	e757      	b.n	50bdc <rpc_ip_event_handler+0x40>
   50d2c:	7f43      	ldrb	r3, [r0, #29]
   50d2e:	3b01      	subs	r3, #1
   50d30:	7743      	strb	r3, [r0, #29]
   50d32:	e7cc      	b.n	50cce <rpc_ip_event_handler+0x132>
   50d34:	7f43      	ldrb	r3, [r0, #29]
   50d36:	3301      	adds	r3, #1
   50d38:	7743      	strb	r3, [r0, #29]
   50d3a:	e74f      	b.n	50bdc <rpc_ip_event_handler+0x40>
   50d3c:	4638      	mov	r0, r7
   50d3e:	f7f8 ff6f 	bl	49c20 <nrf_modem_os_alloc>
   50d42:	60f0      	str	r0, [r6, #12]
   50d44:	b920      	cbnz	r0, 50d50 <rpc_ip_event_handler+0x1b4>
   50d46:	4630      	mov	r0, r6
   50d48:	f7f8 ff72 	bl	49c30 <nrf_modem_os_free>
   50d4c:	2002      	movs	r0, #2
   50d4e:	e736      	b.n	50bbe <rpc_ip_event_handler+0x22>
   50d50:	2201      	movs	r2, #1
   50d52:	7007      	strb	r7, [r0, #0]
   50d54:	68f3      	ldr	r3, [r6, #12]
   50d56:	605a      	str	r2, [r3, #4]
   50d58:	68f3      	ldr	r3, [r6, #12]
   50d5a:	8a2a      	ldrh	r2, [r5, #16]
   50d5c:	811a      	strh	r2, [r3, #8]
   50d5e:	68f3      	ldr	r3, [r6, #12]
   50d60:	696a      	ldr	r2, [r5, #20]
   50d62:	60da      	str	r2, [r3, #12]
   50d64:	e79a      	b.n	50c9c <rpc_ip_event_handler+0x100>
   50d66:	2024      	movs	r0, #36	; 0x24
   50d68:	f7f8 ff5a 	bl	49c20 <nrf_modem_os_alloc>
   50d6c:	60f0      	str	r0, [r6, #12]
   50d6e:	2800      	cmp	r0, #0
   50d70:	d0e9      	beq.n	50d46 <rpc_ip_event_handler+0x1aa>
   50d72:	2324      	movs	r3, #36	; 0x24
   50d74:	2202      	movs	r2, #2
   50d76:	7003      	strb	r3, [r0, #0]
   50d78:	68f3      	ldr	r3, [r6, #12]
   50d7a:	605a      	str	r2, [r3, #4]
   50d7c:	8a2a      	ldrh	r2, [r5, #16]
   50d7e:	68f3      	ldr	r3, [r6, #12]
   50d80:	811a      	strh	r2, [r3, #8]
   50d82:	68f3      	ldr	r3, [r6, #12]
   50d84:	f105 0214 	add.w	r2, r5, #20
   50d88:	3310      	adds	r3, #16
   50d8a:	3524      	adds	r5, #36	; 0x24
   50d8c:	f852 1b04 	ldr.w	r1, [r2], #4
   50d90:	42aa      	cmp	r2, r5
   50d92:	f843 1b04 	str.w	r1, [r3], #4
   50d96:	d1f9      	bne.n	50d8c <rpc_ip_event_handler+0x1f0>
   50d98:	e780      	b.n	50c9c <rpc_ip_event_handler+0x100>
   50d9a:	4601      	mov	r1, r0
   50d9c:	4628      	mov	r0, r5
   50d9e:	f000 fa47 	bl	51230 <on_tls_attach_res>
   50da2:	e70c      	b.n	50bbe <rpc_ip_event_handler+0x22>
   50da4:	20020633 	.word	0x20020633

00050da8 <nrf_close>:
   50da8:	b570      	push	{r4, r5, r6, lr}
   50daa:	4605      	mov	r5, r0
   50dac:	f7ff fce6 	bl	5077c <sock_find>
   50db0:	4606      	mov	r6, r0
   50db2:	b930      	cbnz	r0, 50dc2 <nrf_close+0x1a>
   50db4:	2009      	movs	r0, #9
   50db6:	f006 fa60 	bl	5727a <nrf_modem_os_errno_set>
   50dba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   50dbe:	4620      	mov	r0, r4
   50dc0:	bd70      	pop	{r4, r5, r6, pc}
   50dc2:	f000 ff57 	bl	51c74 <nrf_modem_state_is_initialized>
   50dc6:	b960      	cbnz	r0, 50de2 <nrf_close+0x3a>
   50dc8:	2400      	movs	r4, #0
   50dca:	4630      	mov	r0, r6
   50dcc:	f008 fdd7 	bl	5997e <sock_is_attaching>
   50dd0:	b118      	cbz	r0, 50dda <nrf_close+0x32>
   50dd2:	4b0f      	ldr	r3, [pc, #60]	; (50e10 <nrf_close+0x68>)
   50dd4:	6818      	ldr	r0, [r3, #0]
   50dd6:	f006 fa58 	bl	5728a <nrf_modem_os_sem_give>
   50dda:	4628      	mov	r0, r5
   50ddc:	f7ff fce0 	bl	507a0 <_sock_close>
   50de0:	e7ed      	b.n	50dbe <nrf_close+0x16>
   50de2:	2000      	movs	r0, #0
   50de4:	f008 fd53 	bl	5988e <rpc_client_msg_alloc>
   50de8:	4601      	mov	r1, r0
   50dea:	b908      	cbnz	r0, 50df0 <nrf_close+0x48>
   50dec:	2069      	movs	r0, #105	; 0x69
   50dee:	e7e2      	b.n	50db6 <nrf_close+0xe>
   50df0:	6105      	str	r5, [r0, #16]
   50df2:	2200      	movs	r2, #0
   50df4:	f247 0009 	movw	r0, #28681	; 0x7009
   50df8:	f000 fade 	bl	513b8 <req_forward>
   50dfc:	2800      	cmp	r0, #0
   50dfe:	d0e3      	beq.n	50dc8 <nrf_close+0x20>
   50e00:	2816      	cmp	r0, #22
   50e02:	d0e1      	beq.n	50dc8 <nrf_close+0x20>
   50e04:	f006 fa39 	bl	5727a <nrf_modem_os_errno_set>
   50e08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   50e0c:	e7dd      	b.n	50dca <nrf_close+0x22>
   50e0e:	bf00      	nop
   50e10:	2001bc20 	.word	0x2001bc20

00050e14 <nrf_sendto>:
   50e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   50e18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   50e1a:	4682      	mov	sl, r0
   50e1c:	4688      	mov	r8, r1
   50e1e:	4617      	mov	r7, r2
   50e20:	461e      	mov	r6, r3
   50e22:	f7ff fcab 	bl	5077c <sock_find>
   50e26:	4604      	mov	r4, r0
   50e28:	b928      	cbnz	r0, 50e36 <nrf_sendto+0x22>
   50e2a:	2009      	movs	r0, #9
   50e2c:	f006 fa25 	bl	5727a <nrf_modem_os_errno_set>
   50e30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   50e34:	e096      	b.n	50f64 <nrf_sendto+0x150>
   50e36:	f036 0340 	bics.w	r3, r6, #64	; 0x40
   50e3a:	d001      	beq.n	50e40 <nrf_sendto+0x2c>
   50e3c:	205f      	movs	r0, #95	; 0x5f
   50e3e:	e7f5      	b.n	50e2c <nrf_sendto+0x18>
   50e40:	f008 fda9 	bl	59996 <sock_is_closed>
   50e44:	b108      	cbz	r0, 50e4a <nrf_sendto+0x36>
   50e46:	69a0      	ldr	r0, [r4, #24]
   50e48:	e7f0      	b.n	50e2c <nrf_sendto+0x18>
   50e4a:	4620      	mov	r0, r4
   50e4c:	2d00      	cmp	r5, #0
   50e4e:	f000 80d2 	beq.w	50ff6 <nrf_sendto+0x1e2>
   50e52:	f008 fd71 	bl	59938 <sock_is_stream>
   50e56:	b9b8      	cbnz	r0, 50e88 <nrf_sendto+0x74>
   50e58:	4629      	mov	r1, r5
   50e5a:	4620      	mov	r0, r4
   50e5c:	f008 fe3f 	bl	59ade <sock_sockaddr_fam_is_valid>
   50e60:	b908      	cbnz	r0, 50e66 <nrf_sendto+0x52>
   50e62:	206a      	movs	r0, #106	; 0x6a
   50e64:	e7e2      	b.n	50e2c <nrf_sendto+0x18>
   50e66:	4628      	mov	r0, r5
   50e68:	990d      	ldr	r1, [sp, #52]	; 0x34
   50e6a:	f008 fe24 	bl	59ab6 <sock_sockaddr_len_is_valid>
   50e6e:	b908      	cbnz	r0, 50e74 <nrf_sendto+0x60>
   50e70:	2016      	movs	r0, #22
   50e72:	e7db      	b.n	50e2c <nrf_sendto+0x18>
   50e74:	4620      	mov	r0, r4
   50e76:	f008 fd64 	bl	59942 <sock_is_datagram>
   50e7a:	b128      	cbz	r0, 50e88 <nrf_sendto+0x74>
   50e7c:	4620      	mov	r0, r4
   50e7e:	f008 fd6a 	bl	59956 <sock_proto_is_secure>
   50e82:	b108      	cbz	r0, 50e88 <nrf_sendto+0x74>
   50e84:	207f      	movs	r0, #127	; 0x7f
   50e86:	e7d1      	b.n	50e2c <nrf_sendto+0x18>
   50e88:	4620      	mov	r0, r4
   50e8a:	f008 fdce 	bl	59a2a <sock_sndtimeo_ms_get>
   50e8e:	9000      	str	r0, [sp, #0]
   50e90:	4620      	mov	r0, r4
   50e92:	f008 fd78 	bl	59986 <sock_is_nonblock>
   50e96:	bb18      	cbnz	r0, 50ee0 <nrf_sendto+0xcc>
   50e98:	f3c6 1980 	ubfx	r9, r6, #6, #1
   50e9c:	4620      	mov	r0, r4
   50e9e:	f008 fd4b 	bl	59938 <sock_is_stream>
   50ea2:	b140      	cbz	r0, 50eb6 <nrf_sendto+0xa2>
   50ea4:	4620      	mov	r0, r4
   50ea6:	f008 fd56 	bl	59956 <sock_proto_is_secure>
   50eaa:	b120      	cbz	r0, 50eb6 <nrf_sendto+0xa2>
   50eac:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
   50eb0:	bf28      	it	cs
   50eb2:	f44f 6700 	movcs.w	r7, #2048	; 0x800
   50eb6:	4620      	mov	r0, r4
   50eb8:	f008 fd78 	bl	599ac <sock_has_flow_control>
   50ebc:	b118      	cbz	r0, 50ec6 <nrf_sendto+0xb2>
   50ebe:	4620      	mov	r0, r4
   50ec0:	f008 fd69 	bl	59996 <sock_is_closed>
   50ec4:	b178      	cbz	r0, 50ee6 <nrf_sendto+0xd2>
   50ec6:	4638      	mov	r0, r7
   50ec8:	f008 fce1 	bl	5988e <rpc_client_msg_alloc>
   50ecc:	4683      	mov	fp, r0
   50ece:	b9b8      	cbnz	r0, 50f00 <nrf_sendto+0xec>
   50ed0:	4669      	mov	r1, sp
   50ed2:	f7f8 fdb1 	bl	49a38 <nrf_modem_os_timedwait>
   50ed6:	b980      	cbnz	r0, 50efa <nrf_sendto+0xe6>
   50ed8:	f1b9 0f00 	cmp.w	r9, #0
   50edc:	d0f3      	beq.n	50ec6 <nrf_sendto+0xb2>
   50ede:	e005      	b.n	50eec <nrf_sendto+0xd8>
   50ee0:	f04f 0901 	mov.w	r9, #1
   50ee4:	e7da      	b.n	50e9c <nrf_sendto+0x88>
   50ee6:	f1b9 0f00 	cmp.w	r9, #0
   50eea:	d001      	beq.n	50ef0 <nrf_sendto+0xdc>
   50eec:	200b      	movs	r0, #11
   50eee:	e79d      	b.n	50e2c <nrf_sendto+0x18>
   50ef0:	4669      	mov	r1, sp
   50ef2:	f7f8 fda1 	bl	49a38 <nrf_modem_os_timedwait>
   50ef6:	2800      	cmp	r0, #0
   50ef8:	d0dd      	beq.n	50eb6 <nrf_sendto+0xa2>
   50efa:	f009 ff8c 	bl	5ae16 <abs>
   50efe:	e795      	b.n	50e2c <nrf_sendto+0x18>
   50f00:	f8c0 a010 	str.w	sl, [r0, #16]
   50f04:	f1b8 0f00 	cmp.w	r8, #0
   50f08:	d004      	beq.n	50f14 <nrf_sendto+0x100>
   50f0a:	463a      	mov	r2, r7
   50f0c:	4641      	mov	r1, r8
   50f0e:	6800      	ldr	r0, [r0, #0]
   50f10:	f009 ffa3 	bl	5ae5a <memcpy>
   50f14:	6b22      	ldr	r2, [r4, #48]	; 0x30
   50f16:	b112      	cbz	r2, 50f1e <nrf_sendto+0x10a>
   50f18:	4316      	orrs	r6, r2
   50f1a:	2200      	movs	r2, #0
   50f1c:	6322      	str	r2, [r4, #48]	; 0x30
   50f1e:	2d00      	cmp	r5, #0
   50f20:	d044      	beq.n	50fac <nrf_sendto+0x198>
   50f22:	4620      	mov	r0, r4
   50f24:	f008 fd08 	bl	59938 <sock_is_stream>
   50f28:	2800      	cmp	r0, #0
   50f2a:	d13f      	bne.n	50fac <nrf_sendto+0x198>
   50f2c:	2218      	movs	r2, #24
   50f2e:	f88b 0009 	strb.w	r0, [fp, #9]
   50f32:	f88b 2008 	strb.w	r2, [fp, #8]
   50f36:	f88b 000a 	strb.w	r0, [fp, #10]
   50f3a:	f88b 000b 	strb.w	r0, [fp, #11]
   50f3e:	f8cb 6014 	str.w	r6, [fp, #20]
   50f42:	686a      	ldr	r2, [r5, #4]
   50f44:	2a01      	cmp	r2, #1
   50f46:	d011      	beq.n	50f6c <nrf_sendto+0x158>
   50f48:	2a02      	cmp	r2, #2
   50f4a:	d01b      	beq.n	50f84 <nrf_sendto+0x170>
   50f4c:	f247 0007 	movw	r0, #28679	; 0x7007
   50f50:	4659      	mov	r1, fp
   50f52:	aa01      	add	r2, sp, #4
   50f54:	f000 fa30 	bl	513b8 <req_forward>
   50f58:	4603      	mov	r3, r0
   50f5a:	bbb0      	cbnz	r0, 50fca <nrf_sendto+0x1b6>
   50f5c:	9801      	ldr	r0, [sp, #4]
   50f5e:	6984      	ldr	r4, [r0, #24]
   50f60:	f008 fcb7 	bl	598d2 <rpc_client_msg_free>
   50f64:	4620      	mov	r0, r4
   50f66:	b003      	add	sp, #12
   50f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   50f6c:	892a      	ldrh	r2, [r5, #8]
   50f6e:	f88b 001b 	strb.w	r0, [fp, #27]
   50f72:	f8ab 2018 	strh.w	r2, [fp, #24]
   50f76:	2204      	movs	r2, #4
   50f78:	f88b 201a 	strb.w	r2, [fp, #26]
   50f7c:	68ea      	ldr	r2, [r5, #12]
   50f7e:	f8cb 201c 	str.w	r2, [fp, #28]
   50f82:	e7e3      	b.n	50f4c <nrf_sendto+0x138>
   50f84:	892a      	ldrh	r2, [r5, #8]
   50f86:	f10b 011c 	add.w	r1, fp, #28
   50f8a:	f8ab 2018 	strh.w	r2, [fp, #24]
   50f8e:	2210      	movs	r2, #16
   50f90:	f88b 001b 	strb.w	r0, [fp, #27]
   50f94:	f88b 201a 	strb.w	r2, [fp, #26]
   50f98:	f105 0020 	add.w	r0, r5, #32
   50f9c:	18aa      	adds	r2, r5, r2
   50f9e:	f852 cb04 	ldr.w	ip, [r2], #4
   50fa2:	4282      	cmp	r2, r0
   50fa4:	f841 cb04 	str.w	ip, [r1], #4
   50fa8:	d1f9      	bne.n	50f9e <nrf_sendto+0x18a>
   50faa:	e7cf      	b.n	50f4c <nrf_sendto+0x138>
   50fac:	2200      	movs	r2, #0
   50fae:	2104      	movs	r1, #4
   50fb0:	f247 0006 	movw	r0, #28678	; 0x7006
   50fb4:	f88b 1008 	strb.w	r1, [fp, #8]
   50fb8:	f88b 2009 	strb.w	r2, [fp, #9]
   50fbc:	f88b 200a 	strb.w	r2, [fp, #10]
   50fc0:	f88b 200b 	strb.w	r2, [fp, #11]
   50fc4:	f8cb 6014 	str.w	r6, [fp, #20]
   50fc8:	e7c2      	b.n	50f50 <nrf_sendto+0x13c>
   50fca:	280c      	cmp	r0, #12
   50fcc:	dc0e      	bgt.n	50fec <nrf_sendto+0x1d8>
   50fce:	280a      	cmp	r0, #10
   50fd0:	dd0f      	ble.n	50ff2 <nrf_sendto+0x1de>
   50fd2:	4b0f      	ldr	r3, [pc, #60]	; (51010 <nrf_sendto+0x1fc>)
   50fd4:	7818      	ldrb	r0, [r3, #0]
   50fd6:	b920      	cbnz	r0, 50fe2 <nrf_sendto+0x1ce>
   50fd8:	4669      	mov	r1, sp
   50fda:	f7f8 fd2d 	bl	49a38 <nrf_modem_os_timedwait>
   50fde:	2800      	cmp	r0, #0
   50fe0:	d18b      	bne.n	50efa <nrf_sendto+0xe6>
   50fe2:	f1b9 0f00 	cmp.w	r9, #0
   50fe6:	f43f af66 	beq.w	50eb6 <nrf_sendto+0xa2>
   50fea:	e77f      	b.n	50eec <nrf_sendto+0xd8>
   50fec:	288c      	cmp	r0, #140	; 0x8c
   50fee:	f43f af1d 	beq.w	50e2c <nrf_sendto+0x18>
   50ff2:	4618      	mov	r0, r3
   50ff4:	e71a      	b.n	50e2c <nrf_sendto+0x18>
   50ff6:	f008 fca4 	bl	59942 <sock_is_datagram>
   50ffa:	2800      	cmp	r0, #0
   50ffc:	f43f af44 	beq.w	50e88 <nrf_sendto+0x74>
   51000:	4620      	mov	r0, r4
   51002:	f008 fcb8 	bl	59976 <sock_is_connected>
   51006:	2800      	cmp	r0, #0
   51008:	f47f af3e 	bne.w	50e88 <nrf_sendto+0x74>
   5100c:	2079      	movs	r0, #121	; 0x79
   5100e:	e70d      	b.n	50e2c <nrf_sendto+0x18>
   51010:	20020633 	.word	0x20020633

00051014 <nrf_setsockopt>:
   51014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   51018:	b085      	sub	sp, #20
   5101a:	4680      	mov	r8, r0
   5101c:	4689      	mov	r9, r1
   5101e:	4617      	mov	r7, r2
   51020:	461d      	mov	r5, r3
   51022:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   51024:	f7ff fbaa 	bl	5077c <sock_find>
   51028:	b928      	cbnz	r0, 51036 <nrf_setsockopt+0x22>
   5102a:	2009      	movs	r0, #9
   5102c:	f006 f925 	bl	5727a <nrf_modem_os_errno_set>
   51030:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   51034:	e06f      	b.n	51116 <nrf_setsockopt+0x102>
   51036:	b915      	cbnz	r5, 5103e <nrf_setsockopt+0x2a>
   51038:	b10c      	cbz	r4, 5103e <nrf_setsockopt+0x2a>
   5103a:	2016      	movs	r0, #22
   5103c:	e7f6      	b.n	5102c <nrf_setsockopt+0x18>
   5103e:	f5b9 7f8d 	cmp.w	r9, #282	; 0x11a
   51042:	d12e      	bne.n	510a2 <nrf_setsockopt+0x8e>
   51044:	1e7b      	subs	r3, r7, #1
   51046:	2b0d      	cmp	r3, #13
   51048:	d82b      	bhi.n	510a2 <nrf_setsockopt+0x8e>
   5104a:	e8df f003 	tbb	[pc, r3]
   5104e:	230e      	.short	0x230e
   51050:	071c2aa9 	.word	0x071c2aa9
   51054:	2a2a2a2a 	.word	0x2a2a2a2a
   51058:	a9a9152a 	.word	0xa9a9152a
   5105c:	4622      	mov	r2, r4
   5105e:	4629      	mov	r1, r5
   51060:	b005      	add	sp, #20
   51062:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   51066:	f009 b94c 	b.w	5a302 <tls_setopt_role>
   5106a:	4622      	mov	r2, r4
   5106c:	4629      	mov	r1, r5
   5106e:	b005      	add	sp, #20
   51070:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   51074:	f009 b95b 	b.w	5a32e <tls_setopt_taglist>
   51078:	4622      	mov	r2, r4
   5107a:	4629      	mov	r1, r5
   5107c:	b005      	add	sp, #20
   5107e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   51082:	f009 b967 	b.w	5a354 <tls_setopt_sess_cache>
   51086:	4622      	mov	r2, r4
   51088:	4629      	mov	r1, r5
   5108a:	b005      	add	sp, #20
   5108c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   51090:	f009 b972 	b.w	5a378 <tls_setopt_peer_verify>
   51094:	4622      	mov	r2, r4
   51096:	4629      	mov	r1, r5
   51098:	b005      	add	sp, #20
   5109a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   5109e:	f009 b97a 	b.w	5a396 <tls_setopt_hostname>
   510a2:	2f37      	cmp	r7, #55	; 0x37
   510a4:	dc07      	bgt.n	510b6 <nrf_setsockopt+0xa2>
   510a6:	2f31      	cmp	r7, #49	; 0x31
   510a8:	dc07      	bgt.n	510ba <nrf_setsockopt+0xa6>
   510aa:	2f02      	cmp	r7, #2
   510ac:	d078      	beq.n	511a0 <nrf_setsockopt+0x18c>
   510ae:	f1a7 0314 	sub.w	r3, r7, #20
   510b2:	2b0c      	cmp	r3, #12
   510b4:	d90a      	bls.n	510cc <nrf_setsockopt+0xb8>
   510b6:	206d      	movs	r0, #109	; 0x6d
   510b8:	e7b8      	b.n	5102c <nrf_setsockopt+0x18>
   510ba:	f1a7 0333 	sub.w	r3, r7, #51	; 0x33
   510be:	2b04      	cmp	r3, #4
   510c0:	d849      	bhi.n	51156 <nrf_setsockopt+0x142>
   510c2:	e8df f003 	tbb	[pc, r3]
   510c6:	3f3b      	.short	0x3f3b
   510c8:	4542      	.short	0x4542
   510ca:	6d          	.byte	0x6d
   510cb:	00          	.byte	0x00
   510cc:	2b0c      	cmp	r3, #12
   510ce:	d8f2      	bhi.n	510b6 <nrf_setsockopt+0xa2>
   510d0:	a201      	add	r2, pc, #4	; (adr r2, 510d8 <nrf_setsockopt+0xc4>)
   510d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   510d6:	bf00      	nop
   510d8:	0005110d 	.word	0x0005110d
   510dc:	0005111f 	.word	0x0005111f
   510e0:	000510b7 	.word	0x000510b7
   510e4:	000510b7 	.word	0x000510b7
   510e8:	000510b7 	.word	0x000510b7
   510ec:	00051171 	.word	0x00051171
   510f0:	000510b7 	.word	0x000510b7
   510f4:	000510b7 	.word	0x000510b7
   510f8:	000510b7 	.word	0x000510b7
   510fc:	000510b7 	.word	0x000510b7
   51100:	000511a1 	.word	0x000511a1
   51104:	000511a1 	.word	0x000511a1
   51108:	000511a1 	.word	0x000511a1
   5110c:	f100 0320 	add.w	r3, r0, #32
   51110:	b954      	cbnz	r4, 51128 <nrf_setsockopt+0x114>
   51112:	6204      	str	r4, [r0, #32]
   51114:	605c      	str	r4, [r3, #4]
   51116:	4620      	mov	r0, r4
   51118:	b005      	add	sp, #20
   5111a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   5111e:	f100 0328 	add.w	r3, r0, #40	; 0x28
   51122:	b90c      	cbnz	r4, 51128 <nrf_setsockopt+0x114>
   51124:	6284      	str	r4, [r0, #40]	; 0x28
   51126:	e7f5      	b.n	51114 <nrf_setsockopt+0x100>
   51128:	2c08      	cmp	r4, #8
   5112a:	4622      	mov	r2, r4
   5112c:	4629      	mov	r1, r5
   5112e:	bf28      	it	cs
   51130:	2208      	movcs	r2, #8
   51132:	4618      	mov	r0, r3
   51134:	f009 fe91 	bl	5ae5a <memcpy>
   51138:	2400      	movs	r4, #0
   5113a:	e7ec      	b.n	51116 <nrf_setsockopt+0x102>
   5113c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   51140:	6303      	str	r3, [r0, #48]	; 0x30
   51142:	e7f9      	b.n	51138 <nrf_setsockopt+0x124>
   51144:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   51148:	e7fa      	b.n	51140 <nrf_setsockopt+0x12c>
   5114a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   5114e:	e7f7      	b.n	51140 <nrf_setsockopt+0x12c>
   51150:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   51154:	e7f4      	b.n	51140 <nrf_setsockopt+0x12c>
   51156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   5115a:	6303      	str	r3, [r0, #48]	; 0x30
   5115c:	2300      	movs	r3, #0
   5115e:	4640      	mov	r0, r8
   51160:	461a      	mov	r2, r3
   51162:	4619      	mov	r1, r3
   51164:	e9cd 3300 	strd	r3, r3, [sp]
   51168:	f7ff fe54 	bl	50e14 <nrf_sendto>
   5116c:	4604      	mov	r4, r0
   5116e:	e7d2      	b.n	51116 <nrf_setsockopt+0x102>
   51170:	2d00      	cmp	r5, #0
   51172:	f43f af62 	beq.w	5103a <nrf_setsockopt+0x26>
   51176:	4822      	ldr	r0, [pc, #136]	; (51200 <nrf_setsockopt+0x1ec>)
   51178:	f7ef fe3c 	bl	40df4 <strlen>
   5117c:	4920      	ldr	r1, [pc, #128]	; (51200 <nrf_setsockopt+0x1ec>)
   5117e:	4602      	mov	r2, r0
   51180:	4628      	mov	r0, r5
   51182:	f009 fe5a 	bl	5ae3a <memcmp>
   51186:	4604      	mov	r4, r0
   51188:	b988      	cbnz	r0, 511ae <nrf_setsockopt+0x19a>
   5118a:	481d      	ldr	r0, [pc, #116]	; (51200 <nrf_setsockopt+0x1ec>)
   5118c:	f7ef fe32 	bl	40df4 <strlen>
   51190:	220a      	movs	r2, #10
   51192:	4621      	mov	r1, r4
   51194:	4428      	add	r0, r5
   51196:	f002 feab 	bl	53ef0 <strtoul>
   5119a:	2404      	movs	r4, #4
   5119c:	9003      	str	r0, [sp, #12]
   5119e:	ad03      	add	r5, sp, #12
   511a0:	4620      	mov	r0, r4
   511a2:	f008 fb74 	bl	5988e <rpc_client_msg_alloc>
   511a6:	4606      	mov	r6, r0
   511a8:	b928      	cbnz	r0, 511b6 <nrf_setsockopt+0x1a2>
   511aa:	2069      	movs	r0, #105	; 0x69
   511ac:	e73e      	b.n	5102c <nrf_setsockopt+0x18>
   511ae:	220a      	movs	r2, #10
   511b0:	2100      	movs	r1, #0
   511b2:	4628      	mov	r0, r5
   511b4:	e7ef      	b.n	51196 <nrf_setsockopt+0x182>
   511b6:	2308      	movs	r3, #8
   511b8:	f8c0 8010 	str.w	r8, [r0, #16]
   511bc:	f04f 0800 	mov.w	r8, #0
   511c0:	7203      	strb	r3, [r0, #8]
   511c2:	f880 8009 	strb.w	r8, [r0, #9]
   511c6:	f880 800a 	strb.w	r8, [r0, #10]
   511ca:	f880 800b 	strb.w	r8, [r0, #11]
   511ce:	4648      	mov	r0, r9
   511d0:	f009 f9df 	bl	5a592 <nrf_sol_to_rpc_sol>
   511d4:	6170      	str	r0, [r6, #20]
   511d6:	4638      	mov	r0, r7
   511d8:	f000 f8d6 	bl	51388 <nrf_so_to_rpc_so>
   511dc:	4622      	mov	r2, r4
   511de:	4629      	mov	r1, r5
   511e0:	61b0      	str	r0, [r6, #24]
   511e2:	6830      	ldr	r0, [r6, #0]
   511e4:	f009 fe39 	bl	5ae5a <memcpy>
   511e8:	6074      	str	r4, [r6, #4]
   511ea:	4642      	mov	r2, r8
   511ec:	4631      	mov	r1, r6
   511ee:	f247 0003 	movw	r0, #28675	; 0x7003
   511f2:	f000 f8e1 	bl	513b8 <req_forward>
   511f6:	4604      	mov	r4, r0
   511f8:	2800      	cmp	r0, #0
   511fa:	d08c      	beq.n	51116 <nrf_setsockopt+0x102>
   511fc:	e716      	b.n	5102c <nrf_setsockopt+0x18>
   511fe:	bf00      	nop
   51200:	000607a7 	.word	0x000607a7

00051204 <rpc_ip_init>:
   51204:	b508      	push	{r3, lr}
   51206:	f7ff fa79 	bl	506fc <sock_init>
   5120a:	f7ff fb09 	bl	50820 <addrinfo_init>
   5120e:	2200      	movs	r2, #0
   51210:	4b05      	ldr	r3, [pc, #20]	; (51228 <rpc_ip_init+0x24>)
   51212:	4806      	ldr	r0, [pc, #24]	; (5122c <rpc_ip_init+0x28>)
   51214:	701a      	strb	r2, [r3, #0]
   51216:	2201      	movs	r2, #1
   51218:	4611      	mov	r1, r2
   5121a:	f7f8 fccf 	bl	49bbc <nrf_modem_os_sem_init>
   5121e:	2800      	cmp	r0, #0
   51220:	bf18      	it	ne
   51222:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   51226:	bd08      	pop	{r3, pc}
   51228:	20020633 	.word	0x20020633
   5122c:	2001bc20 	.word	0x2001bc20

00051230 <on_tls_attach_res>:
   51230:	b510      	push	{r4, lr}
   51232:	6943      	ldr	r3, [r0, #20]
   51234:	460c      	mov	r4, r1
   51236:	b15b      	cbz	r3, 51250 <on_tls_attach_res+0x20>
   51238:	7f0b      	ldrb	r3, [r1, #28]
   5123a:	f36f 1304 	bfc	r3, #4, #1
   5123e:	770b      	strb	r3, [r1, #28]
   51240:	6940      	ldr	r0, [r0, #20]
   51242:	f000 f8ad 	bl	513a0 <rpc_error_to_nrf_errno>
   51246:	4b03      	ldr	r3, [pc, #12]	; (51254 <on_tls_attach_res+0x24>)
   51248:	61a0      	str	r0, [r4, #24]
   5124a:	6818      	ldr	r0, [r3, #0]
   5124c:	f006 f81d 	bl	5728a <nrf_modem_os_sem_give>
   51250:	2000      	movs	r0, #0
   51252:	bd10      	pop	{r4, pc}
   51254:	2001bc20 	.word	0x2001bc20

00051258 <on_tls_handshake_ntf>:
   51258:	b510      	push	{r4, lr}
   5125a:	7f0b      	ldrb	r3, [r1, #28]
   5125c:	460c      	mov	r4, r1
   5125e:	f36f 1304 	bfc	r3, #4, #1
   51262:	770b      	strb	r3, [r1, #28]
   51264:	6900      	ldr	r0, [r0, #16]
   51266:	b958      	cbnz	r0, 51280 <on_tls_handshake_ntf+0x28>
   51268:	b2db      	uxtb	r3, r3
   5126a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   5126e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   51272:	770b      	strb	r3, [r1, #28]
   51274:	4b04      	ldr	r3, [pc, #16]	; (51288 <on_tls_handshake_ntf+0x30>)
   51276:	6818      	ldr	r0, [r3, #0]
   51278:	f006 f807 	bl	5728a <nrf_modem_os_sem_give>
   5127c:	2000      	movs	r0, #0
   5127e:	bd10      	pop	{r4, pc}
   51280:	f000 f88e 	bl	513a0 <rpc_error_to_nrf_errno>
   51284:	61a0      	str	r0, [r4, #24]
   51286:	e7f5      	b.n	51274 <on_tls_handshake_ntf+0x1c>
   51288:	2001bc20 	.word	0x2001bc20

0005128c <tls_attach>:
   5128c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   51290:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 51374 <tls_attach+0xe8>
   51294:	4605      	mov	r5, r0
   51296:	f8d8 0000 	ldr.w	r0, [r8]
   5129a:	9101      	str	r1, [sp, #4]
   5129c:	f005 fff7 	bl	5728e <nrf_modem_os_sem_take>
   512a0:	4607      	mov	r7, r0
   512a2:	b120      	cbz	r0, 512ae <tls_attach+0x22>
   512a4:	2310      	movs	r3, #16
   512a6:	61ab      	str	r3, [r5, #24]
   512a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   512ac:	e046      	b.n	5133c <tls_attach+0xb0>
   512ae:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   512b0:	b1a8      	cbz	r0, 512de <tls_attach+0x52>
   512b2:	f7ef fd9f 	bl	40df4 <strlen>
   512b6:	1c46      	adds	r6, r0, #1
   512b8:	4630      	mov	r0, r6
   512ba:	f008 fae8 	bl	5988e <rpc_client_msg_alloc>
   512be:	4604      	mov	r4, r0
   512c0:	b978      	cbnz	r0, 512e2 <tls_attach+0x56>
   512c2:	4628      	mov	r0, r5
   512c4:	f008 fb5f 	bl	59986 <sock_is_nonblock>
   512c8:	b108      	cbz	r0, 512ce <tls_attach+0x42>
   512ca:	2369      	movs	r3, #105	; 0x69
   512cc:	61ab      	str	r3, [r5, #24]
   512ce:	f8d8 0000 	ldr.w	r0, [r8]
   512d2:	f005 ffda 	bl	5728a <nrf_modem_os_sem_give>
   512d6:	2069      	movs	r0, #105	; 0x69
   512d8:	f005 ffcf 	bl	5727a <nrf_modem_os_errno_set>
   512dc:	e7e4      	b.n	512a8 <tls_attach+0x1c>
   512de:	463e      	mov	r6, r7
   512e0:	e7ea      	b.n	512b8 <tls_attach+0x2c>
   512e2:	682b      	ldr	r3, [r5, #0]
   512e4:	2204      	movs	r2, #4
   512e6:	6103      	str	r3, [r0, #16]
   512e8:	2300      	movs	r3, #0
   512ea:	7202      	strb	r2, [r0, #8]
   512ec:	7243      	strb	r3, [r0, #9]
   512ee:	7283      	strb	r3, [r0, #10]
   512f0:	72c3      	strb	r3, [r0, #11]
   512f2:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   512f6:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   512fa:	3201      	adds	r2, #1
   512fc:	0092      	lsls	r2, r2, #2
   512fe:	6082      	str	r2, [r0, #8]
   51300:	3014      	adds	r0, #20
   51302:	f009 fdaa 	bl	5ae5a <memcpy>
   51306:	b1ee      	cbz	r6, 51344 <tls_attach+0xb8>
   51308:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   5130a:	6820      	ldr	r0, [r4, #0]
   5130c:	f009 ff8c 	bl	5b228 <strcpy>
   51310:	6066      	str	r6, [r4, #4]
   51312:	7f2b      	ldrb	r3, [r5, #28]
   51314:	2004      	movs	r0, #4
   51316:	f043 0310 	orr.w	r3, r3, #16
   5131a:	4622      	mov	r2, r4
   5131c:	f247 0181 	movw	r1, #28801	; 0x7081
   51320:	772b      	strb	r3, [r5, #28]
   51322:	f008 facf 	bl	598c4 <rpc_client_msg_send>
   51326:	4628      	mov	r0, r5
   51328:	f008 fb2d 	bl	59986 <sock_is_nonblock>
   5132c:	b930      	cbnz	r0, 5133c <tls_attach+0xb0>
   5132e:	4628      	mov	r0, r5
   51330:	f008 fb25 	bl	5997e <sock_is_attaching>
   51334:	b978      	cbnz	r0, 51356 <tls_attach+0xca>
   51336:	69a8      	ldr	r0, [r5, #24]
   51338:	2800      	cmp	r0, #0
   5133a:	d1cd      	bne.n	512d8 <tls_attach+0x4c>
   5133c:	4638      	mov	r0, r7
   5133e:	b002      	add	sp, #8
   51340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   51344:	7026      	strb	r6, [r4, #0]
   51346:	7066      	strb	r6, [r4, #1]
   51348:	70a6      	strb	r6, [r4, #2]
   5134a:	70e6      	strb	r6, [r4, #3]
   5134c:	7126      	strb	r6, [r4, #4]
   5134e:	7166      	strb	r6, [r4, #5]
   51350:	71a6      	strb	r6, [r4, #6]
   51352:	71e6      	strb	r6, [r4, #7]
   51354:	e7dd      	b.n	51312 <tls_attach+0x86>
   51356:	2000      	movs	r0, #0
   51358:	a901      	add	r1, sp, #4
   5135a:	f7f8 fb6d 	bl	49a38 <nrf_modem_os_timedwait>
   5135e:	f110 0f0b 	cmn.w	r0, #11
   51362:	d004      	beq.n	5136e <tls_attach+0xe2>
   51364:	2800      	cmp	r0, #0
   51366:	d0e2      	beq.n	5132e <tls_attach+0xa2>
   51368:	f009 fd55 	bl	5ae16 <abs>
   5136c:	e7b4      	b.n	512d8 <tls_attach+0x4c>
   5136e:	2074      	movs	r0, #116	; 0x74
   51370:	e7b2      	b.n	512d8 <tls_attach+0x4c>
   51372:	bf00      	nop
   51374:	2001bc20 	.word	0x2001bc20

00051378 <nrf_af_to_rpc_af>:
   51378:	2803      	cmp	r0, #3
   5137a:	bf9c      	itt	ls
   5137c:	4b01      	ldrls	r3, [pc, #4]	; (51384 <nrf_af_to_rpc_af+0xc>)
   5137e:	5618      	ldrsbls	r0, [r3, r0]
   51380:	4770      	bx	lr
   51382:	bf00      	nop
   51384:	000607ab 	.word	0x000607ab

00051388 <nrf_so_to_rpc_so>:
   51388:	3802      	subs	r0, #2
   5138a:	2835      	cmp	r0, #53	; 0x35
   5138c:	bf9a      	itte	ls
   5138e:	4b03      	ldrls	r3, [pc, #12]	; (5139c <nrf_so_to_rpc_so+0x14>)
   51390:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   51394:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   51398:	4770      	bx	lr
   5139a:	bf00      	nop
   5139c:	0005c564 	.word	0x0005c564

000513a0 <rpc_error_to_nrf_errno>:
   513a0:	286c      	cmp	r0, #108	; 0x6c
   513a2:	bf9a      	itte	ls
   513a4:	4b02      	ldrls	r3, [pc, #8]	; (513b0 <rpc_error_to_nrf_errno+0x10>)
   513a6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   513aa:	4802      	ldrhi	r0, [pc, #8]	; (513b4 <rpc_error_to_nrf_errno+0x14>)
   513ac:	4770      	bx	lr
   513ae:	bf00      	nop
   513b0:	0005c63c 	.word	0x0005c63c
   513b4:	baadbaad 	.word	0xbaadbaad

000513b8 <req_forward>:
   513b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   513ba:	4616      	mov	r6, r2
   513bc:	b9aa      	cbnz	r2, 513ea <req_forward+0x32>
   513be:	ad01      	add	r5, sp, #4
   513c0:	2300      	movs	r3, #0
   513c2:	460a      	mov	r2, r1
   513c4:	602b      	str	r3, [r5, #0]
   513c6:	60cd      	str	r5, [r1, #12]
   513c8:	b281      	uxth	r1, r0
   513ca:	2004      	movs	r0, #4
   513cc:	f008 fa7a 	bl	598c4 <rpc_client_msg_send>
   513d0:	4c0c      	ldr	r4, [pc, #48]	; (51404 <req_forward+0x4c>)
   513d2:	6828      	ldr	r0, [r5, #0]
   513d4:	b158      	cbz	r0, 513ee <req_forward+0x36>
   513d6:	6940      	ldr	r0, [r0, #20]
   513d8:	f7ff ffe2 	bl	513a0 <rpc_error_to_nrf_errno>
   513dc:	4604      	mov	r4, r0
   513de:	b106      	cbz	r6, 513e2 <req_forward+0x2a>
   513e0:	b168      	cbz	r0, 513fe <req_forward+0x46>
   513e2:	6828      	ldr	r0, [r5, #0]
   513e4:	f008 fa75 	bl	598d2 <rpc_client_msg_free>
   513e8:	e009      	b.n	513fe <req_forward+0x46>
   513ea:	4615      	mov	r5, r2
   513ec:	e7e8      	b.n	513c0 <req_forward+0x8>
   513ee:	4621      	mov	r1, r4
   513f0:	f7f8 fb22 	bl	49a38 <nrf_modem_os_timedwait>
   513f4:	2800      	cmp	r0, #0
   513f6:	d0ec      	beq.n	513d2 <req_forward+0x1a>
   513f8:	f009 fd0d 	bl	5ae16 <abs>
   513fc:	4604      	mov	r4, r0
   513fe:	4620      	mov	r0, r4
   51400:	b002      	add	sp, #8
   51402:	bd70      	pop	{r4, r5, r6, pc}
   51404:	2001a81c 	.word	0x2001a81c

00051408 <at_cmd_send>:
   51408:	b5f0      	push	{r4, r5, r6, r7, lr}
   5140a:	4605      	mov	r5, r0
   5140c:	b085      	sub	sp, #20
   5140e:	2000      	movs	r0, #0
   51410:	460f      	mov	r7, r1
   51412:	9201      	str	r2, [sp, #4]
   51414:	461e      	mov	r6, r3
   51416:	f008 fa3a 	bl	5988e <rpc_client_msg_alloc>
   5141a:	9901      	ldr	r1, [sp, #4]
   5141c:	4602      	mov	r2, r0
   5141e:	b930      	cbnz	r0, 5142e <at_cmd_send+0x26>
   51420:	b115      	cbz	r5, 51428 <at_cmd_send+0x20>
   51422:	4628      	mov	r0, r5
   51424:	f008 fa5c 	bl	598e0 <rpc_client_msg_data_tx_free>
   51428:	f06f 000b 	mvn.w	r0, #11
   5142c:	e020      	b.n	51470 <at_cmd_send+0x68>
   5142e:	f06f 0358 	mvn.w	r3, #88	; 0x58
   51432:	2400      	movs	r4, #0
   51434:	7303      	strb	r3, [r0, #12]
   51436:	2304      	movs	r3, #4
   51438:	6005      	str	r5, [r0, #0]
   5143a:	4d0e      	ldr	r5, [pc, #56]	; (51474 <at_cmd_send+0x6c>)
   5143c:	7203      	strb	r3, [r0, #8]
   5143e:	7344      	strb	r4, [r0, #13]
   51440:	7384      	strb	r4, [r0, #14]
   51442:	73c4      	strb	r4, [r0, #15]
   51444:	7244      	strb	r4, [r0, #9]
   51446:	7284      	strb	r4, [r0, #10]
   51448:	72c4      	strb	r4, [r0, #11]
   5144a:	6047      	str	r7, [r0, #4]
   5144c:	2003      	movs	r0, #3
   5144e:	702c      	strb	r4, [r5, #0]
   51450:	f008 fa38 	bl	598c4 <rpc_client_msg_send>
   51454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   51458:	9303      	str	r3, [sp, #12]
   5145a:	782b      	ldrb	r3, [r5, #0]
   5145c:	42b3      	cmp	r3, r6
   5145e:	d101      	bne.n	51464 <at_cmd_send+0x5c>
   51460:	2000      	movs	r0, #0
   51462:	e005      	b.n	51470 <at_cmd_send+0x68>
   51464:	2000      	movs	r0, #0
   51466:	a903      	add	r1, sp, #12
   51468:	f7f8 fae6 	bl	49a38 <nrf_modem_os_timedwait>
   5146c:	2800      	cmp	r0, #0
   5146e:	d0f4      	beq.n	5145a <at_cmd_send+0x52>
   51470:	b005      	add	sp, #20
   51472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   51474:	20020634 	.word	0x20020634

00051478 <at_response_match>:
   51478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5147a:	4605      	mov	r5, r0
   5147c:	2400      	movs	r4, #0
   5147e:	4f0f      	ldr	r7, [pc, #60]	; (514bc <at_response_match+0x44>)
   51480:	f857 6b04 	ldr.w	r6, [r7], #4
   51484:	4628      	mov	r0, r5
   51486:	4631      	mov	r1, r6
   51488:	f009 ff23 	bl	5b2d2 <strstr>
   5148c:	b928      	cbnz	r0, 5149a <at_response_match+0x22>
   5148e:	3401      	adds	r4, #1
   51490:	2c04      	cmp	r4, #4
   51492:	d1f5      	bne.n	51480 <at_response_match+0x8>
   51494:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   51498:	e00d      	b.n	514b6 <at_response_match+0x3e>
   5149a:	b16c      	cbz	r4, 514b8 <at_response_match+0x40>
   5149c:	1ea3      	subs	r3, r4, #2
   5149e:	2b01      	cmp	r3, #1
   514a0:	d8f8      	bhi.n	51494 <at_response_match+0x1c>
   514a2:	4630      	mov	r0, r6
   514a4:	f7ef fca6 	bl	40df4 <strlen>
   514a8:	220a      	movs	r2, #10
   514aa:	2100      	movs	r1, #0
   514ac:	4428      	add	r0, r5
   514ae:	f002 fc05 	bl	53cbc <strtol>
   514b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   514b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   514b8:	4620      	mov	r0, r4
   514ba:	e7fc      	b.n	514b6 <at_response_match+0x3e>
   514bc:	0005c7f0 	.word	0x0005c7f0

000514c0 <at_vsprintf>:
   514c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   514c2:	4613      	mov	r3, r2
   514c4:	4607      	mov	r7, r0
   514c6:	9201      	str	r2, [sp, #4]
   514c8:	460e      	mov	r6, r1
   514ca:	4615      	mov	r5, r2
   514cc:	480b      	ldr	r0, [pc, #44]	; (514fc <at_vsprintf+0x3c>)
   514ce:	460a      	mov	r2, r1
   514d0:	2100      	movs	r1, #0
   514d2:	f002 fd17 	bl	53f04 <vsniprintf>
   514d6:	1c44      	adds	r4, r0, #1
   514d8:	4620      	mov	r0, r4
   514da:	f008 f9ff 	bl	598dc <rpc_client_msg_data_tx_alloc>
   514de:	6038      	str	r0, [r7, #0]
   514e0:	b140      	cbz	r0, 514f4 <at_vsprintf+0x34>
   514e2:	462b      	mov	r3, r5
   514e4:	4632      	mov	r2, r6
   514e6:	4621      	mov	r1, r4
   514e8:	9501      	str	r5, [sp, #4]
   514ea:	f002 fd0b 	bl	53f04 <vsniprintf>
   514ee:	4620      	mov	r0, r4
   514f0:	b003      	add	sp, #12
   514f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   514f4:	f06f 000b 	mvn.w	r0, #11
   514f8:	e7fa      	b.n	514f0 <at_vsprintf+0x30>
   514fa:	bf00      	nop
   514fc:	0005c015 	.word	0x0005c015

00051500 <nrf_modem_at_notif_handler_set>:
   51500:	4b01      	ldr	r3, [pc, #4]	; (51508 <nrf_modem_at_notif_handler_set+0x8>)
   51502:	6018      	str	r0, [r3, #0]
   51504:	2000      	movs	r0, #0
   51506:	4770      	bx	lr
   51508:	2001bc30 	.word	0x2001bc30

0005150c <nrf_modem_at_printf>:
   5150c:	b40f      	push	{r0, r1, r2, r3}
   5150e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   51510:	9c06      	ldr	r4, [sp, #24]
   51512:	f000 fbaf 	bl	51c74 <nrf_modem_state_is_initialized>
   51516:	2800      	cmp	r0, #0
   51518:	d032      	beq.n	51580 <nrf_modem_at_printf+0x74>
   5151a:	2c00      	cmp	r4, #0
   5151c:	d033      	beq.n	51586 <nrf_modem_at_printf+0x7a>
   5151e:	4621      	mov	r1, r4
   51520:	aa07      	add	r2, sp, #28
   51522:	a801      	add	r0, sp, #4
   51524:	9200      	str	r2, [sp, #0]
   51526:	f7ff ffcb 	bl	514c0 <at_vsprintf>
   5152a:	9b01      	ldr	r3, [sp, #4]
   5152c:	4604      	mov	r4, r0
   5152e:	b36b      	cbz	r3, 5158c <nrf_modem_at_printf+0x80>
   51530:	4e18      	ldr	r6, [pc, #96]	; (51594 <nrf_modem_at_printf+0x88>)
   51532:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   51536:	6830      	ldr	r0, [r6, #0]
   51538:	f005 fea9 	bl	5728e <nrf_modem_os_sem_take>
   5153c:	4621      	mov	r1, r4
   5153e:	2302      	movs	r3, #2
   51540:	2201      	movs	r2, #1
   51542:	9801      	ldr	r0, [sp, #4]
   51544:	f7ff ff60 	bl	51408 <at_cmd_send>
   51548:	4604      	mov	r4, r0
   5154a:	b140      	cbz	r0, 5155e <nrf_modem_at_printf+0x52>
   5154c:	6830      	ldr	r0, [r6, #0]
   5154e:	f005 fe9c 	bl	5728a <nrf_modem_os_sem_give>
   51552:	4620      	mov	r0, r4
   51554:	b002      	add	sp, #8
   51556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   5155a:	b004      	add	sp, #16
   5155c:	4770      	bx	lr
   5155e:	4d0e      	ldr	r5, [pc, #56]	; (51598 <nrf_modem_at_printf+0x8c>)
   51560:	682b      	ldr	r3, [r5, #0]
   51562:	6818      	ldr	r0, [r3, #0]
   51564:	f7ff ff88 	bl	51478 <at_response_match>
   51568:	4604      	mov	r4, r0
   5156a:	6830      	ldr	r0, [r6, #0]
   5156c:	f005 fe8d 	bl	5728a <nrf_modem_os_sem_give>
   51570:	682b      	ldr	r3, [r5, #0]
   51572:	6818      	ldr	r0, [r3, #0]
   51574:	f008 f9b0 	bl	598d8 <rpc_client_msg_data_rx_free>
   51578:	6828      	ldr	r0, [r5, #0]
   5157a:	f008 f9aa 	bl	598d2 <rpc_client_msg_free>
   5157e:	e7e8      	b.n	51552 <nrf_modem_at_printf+0x46>
   51580:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   51584:	e7e5      	b.n	51552 <nrf_modem_at_printf+0x46>
   51586:	f06f 040d 	mvn.w	r4, #13
   5158a:	e7e2      	b.n	51552 <nrf_modem_at_printf+0x46>
   5158c:	f06f 040b 	mvn.w	r4, #11
   51590:	e7df      	b.n	51552 <nrf_modem_at_printf+0x46>
   51592:	bf00      	nop
   51594:	2001bc24 	.word	0x2001bc24
   51598:	2001bc34 	.word	0x2001bc34

0005159c <nrf_modem_at_cmd>:
   5159c:	b40c      	push	{r2, r3}
   5159e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   515a2:	b085      	sub	sp, #20
   515a4:	4606      	mov	r6, r0
   515a6:	460d      	mov	r5, r1
   515a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   515aa:	f000 fb63 	bl	51c74 <nrf_modem_state_is_initialized>
   515ae:	2800      	cmp	r0, #0
   515b0:	d07b      	beq.n	516aa <nrf_modem_at_cmd+0x10e>
   515b2:	2e00      	cmp	r6, #0
   515b4:	d07c      	beq.n	516b0 <nrf_modem_at_cmd+0x114>
   515b6:	2c00      	cmp	r4, #0
   515b8:	d07a      	beq.n	516b0 <nrf_modem_at_cmd+0x114>
   515ba:	2d00      	cmp	r5, #0
   515bc:	d07b      	beq.n	516b6 <nrf_modem_at_cmd+0x11a>
   515be:	aa0f      	add	r2, sp, #60	; 0x3c
   515c0:	4621      	mov	r1, r4
   515c2:	a803      	add	r0, sp, #12
   515c4:	9202      	str	r2, [sp, #8]
   515c6:	f7ff ff7b 	bl	514c0 <at_vsprintf>
   515ca:	f8dd 900c 	ldr.w	r9, [sp, #12]
   515ce:	4607      	mov	r7, r0
   515d0:	f1b9 0f00 	cmp.w	r9, #0
   515d4:	d072      	beq.n	516bc <nrf_modem_at_cmd+0x120>
   515d6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 516c8 <nrf_modem_at_cmd+0x12c>
   515da:	f8d8 3000 	ldr.w	r3, [r8]
   515de:	b1d3      	cbz	r3, 51616 <nrf_modem_at_cmd+0x7a>
   515e0:	2400      	movs	r4, #0
   515e2:	f04f 0b0c 	mov.w	fp, #12
   515e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 516cc <nrf_modem_at_cmd+0x130>
   515ea:	f8da 3000 	ldr.w	r3, [sl]
   515ee:	429c      	cmp	r4, r3
   515f0:	d211      	bcs.n	51616 <nrf_modem_at_cmd+0x7a>
   515f2:	fb0b f204 	mul.w	r2, fp, r4
   515f6:	f8d8 3000 	ldr.w	r3, [r8]
   515fa:	4648      	mov	r0, r9
   515fc:	5899      	ldr	r1, [r3, r2]
   515fe:	9201      	str	r2, [sp, #4]
   51600:	f009 fe67 	bl	5b2d2 <strstr>
   51604:	b1e0      	cbz	r0, 51640 <nrf_modem_at_cmd+0xa4>
   51606:	9a01      	ldr	r2, [sp, #4]
   51608:	f8d8 3000 	ldr.w	r3, [r8]
   5160c:	4413      	add	r3, r2
   5160e:	7a1a      	ldrb	r2, [r3, #8]
   51610:	b9b2      	cbnz	r2, 51640 <nrf_modem_at_cmd+0xa4>
   51612:	685b      	ldr	r3, [r3, #4]
   51614:	b9b3      	cbnz	r3, 51644 <nrf_modem_at_cmd+0xa8>
   51616:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 516d0 <nrf_modem_at_cmd+0x134>
   5161a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   5161e:	f8d8 0000 	ldr.w	r0, [r8]
   51622:	f005 fe34 	bl	5728e <nrf_modem_os_sem_take>
   51626:	2302      	movs	r3, #2
   51628:	2201      	movs	r2, #1
   5162a:	4639      	mov	r1, r7
   5162c:	9803      	ldr	r0, [sp, #12]
   5162e:	f7ff feeb 	bl	51408 <at_cmd_send>
   51632:	4604      	mov	r4, r0
   51634:	b1c8      	cbz	r0, 5166a <nrf_modem_at_cmd+0xce>
   51636:	f8d8 0000 	ldr.w	r0, [r8]
   5163a:	f005 fe26 	bl	5728a <nrf_modem_os_sem_give>
   5163e:	e00e      	b.n	5165e <nrf_modem_at_cmd+0xc2>
   51640:	3401      	adds	r4, #1
   51642:	e7d2      	b.n	515ea <nrf_modem_at_cmd+0x4e>
   51644:	4629      	mov	r1, r5
   51646:	4630      	mov	r0, r6
   51648:	9a03      	ldr	r2, [sp, #12]
   5164a:	4798      	blx	r3
   5164c:	4604      	mov	r4, r0
   5164e:	b918      	cbnz	r0, 51658 <nrf_modem_at_cmd+0xbc>
   51650:	4630      	mov	r0, r6
   51652:	f7ff ff11 	bl	51478 <at_response_match>
   51656:	4604      	mov	r4, r0
   51658:	9803      	ldr	r0, [sp, #12]
   5165a:	f008 f941 	bl	598e0 <rpc_client_msg_data_tx_free>
   5165e:	4620      	mov	r0, r4
   51660:	b005      	add	sp, #20
   51662:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   51666:	b002      	add	sp, #8
   51668:	4770      	bx	lr
   5166a:	4f16      	ldr	r7, [pc, #88]	; (516c4 <nrf_modem_at_cmd+0x128>)
   5166c:	4630      	mov	r0, r6
   5166e:	683c      	ldr	r4, [r7, #0]
   51670:	6862      	ldr	r2, [r4, #4]
   51672:	6821      	ldr	r1, [r4, #0]
   51674:	42aa      	cmp	r2, r5
   51676:	bf28      	it	cs
   51678:	462a      	movcs	r2, r5
   5167a:	f009 fbee 	bl	5ae5a <memcpy>
   5167e:	6863      	ldr	r3, [r4, #4]
   51680:	42ab      	cmp	r3, r5
   51682:	d80f      	bhi.n	516a4 <nrf_modem_at_cmd+0x108>
   51684:	6820      	ldr	r0, [r4, #0]
   51686:	f7ff fef7 	bl	51478 <at_response_match>
   5168a:	4604      	mov	r4, r0
   5168c:	f8d8 0000 	ldr.w	r0, [r8]
   51690:	f005 fdfb 	bl	5728a <nrf_modem_os_sem_give>
   51694:	683b      	ldr	r3, [r7, #0]
   51696:	6818      	ldr	r0, [r3, #0]
   51698:	f008 f91e 	bl	598d8 <rpc_client_msg_data_rx_free>
   5169c:	6838      	ldr	r0, [r7, #0]
   5169e:	f008 f918 	bl	598d2 <rpc_client_msg_free>
   516a2:	e7dc      	b.n	5165e <nrf_modem_at_cmd+0xc2>
   516a4:	f06f 0406 	mvn.w	r4, #6
   516a8:	e7f0      	b.n	5168c <nrf_modem_at_cmd+0xf0>
   516aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   516ae:	e7d6      	b.n	5165e <nrf_modem_at_cmd+0xc2>
   516b0:	f06f 040d 	mvn.w	r4, #13
   516b4:	e7d3      	b.n	5165e <nrf_modem_at_cmd+0xc2>
   516b6:	f06f 0415 	mvn.w	r4, #21
   516ba:	e7d0      	b.n	5165e <nrf_modem_at_cmd+0xc2>
   516bc:	f06f 040b 	mvn.w	r4, #11
   516c0:	e7cd      	b.n	5165e <nrf_modem_at_cmd+0xc2>
   516c2:	bf00      	nop
   516c4:	2001bc34 	.word	0x2001bc34
   516c8:	2001bc28 	.word	0x2001bc28
   516cc:	2001bc2c 	.word	0x2001bc2c
   516d0:	2001bc24 	.word	0x2001bc24

000516d4 <nrf_modem_at_scanf>:
   516d4:	b40e      	push	{r1, r2, r3}
   516d6:	e92d 41f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, lr}
   516da:	9f09      	ldr	r7, [sp, #36]	; 0x24
   516dc:	4604      	mov	r4, r0
   516de:	f000 fac9 	bl	51c74 <nrf_modem_state_is_initialized>
   516e2:	2800      	cmp	r0, #0
   516e4:	d03c      	beq.n	51760 <nrf_modem_at_scanf+0x8c>
   516e6:	2c00      	cmp	r4, #0
   516e8:	d03d      	beq.n	51766 <nrf_modem_at_scanf+0x92>
   516ea:	2f00      	cmp	r7, #0
   516ec:	d03b      	beq.n	51766 <nrf_modem_at_scanf+0x92>
   516ee:	4620      	mov	r0, r4
   516f0:	f7ef fb80 	bl	40df4 <strlen>
   516f4:	1c46      	adds	r6, r0, #1
   516f6:	4630      	mov	r0, r6
   516f8:	f008 f8f0 	bl	598dc <rpc_client_msg_data_tx_alloc>
   516fc:	4605      	mov	r5, r0
   516fe:	b3a8      	cbz	r0, 5176c <nrf_modem_at_scanf+0x98>
   51700:	f8df 8074 	ldr.w	r8, [pc, #116]	; 51778 <nrf_modem_at_scanf+0xa4>
   51704:	4621      	mov	r1, r4
   51706:	f009 fd8f 	bl	5b228 <strcpy>
   5170a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   5170e:	f8d8 0000 	ldr.w	r0, [r8]
   51712:	f005 fdbc 	bl	5728e <nrf_modem_os_sem_take>
   51716:	2302      	movs	r3, #2
   51718:	2201      	movs	r2, #1
   5171a:	4631      	mov	r1, r6
   5171c:	4628      	mov	r0, r5
   5171e:	f7ff fe73 	bl	51408 <at_cmd_send>
   51722:	4604      	mov	r4, r0
   51724:	b990      	cbnz	r0, 5174c <nrf_modem_at_scanf+0x78>
   51726:	4d13      	ldr	r5, [pc, #76]	; (51774 <nrf_modem_at_scanf+0xa0>)
   51728:	aa0a      	add	r2, sp, #40	; 0x28
   5172a:	682b      	ldr	r3, [r5, #0]
   5172c:	4639      	mov	r1, r7
   5172e:	6818      	ldr	r0, [r3, #0]
   51730:	9201      	str	r2, [sp, #4]
   51732:	f002 fc39 	bl	53fa8 <vsiscanf>
   51736:	682b      	ldr	r3, [r5, #0]
   51738:	1e04      	subs	r4, r0, #0
   5173a:	6818      	ldr	r0, [r3, #0]
   5173c:	bf08      	it	eq
   5173e:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   51742:	f008 f8c9 	bl	598d8 <rpc_client_msg_data_rx_free>
   51746:	6828      	ldr	r0, [r5, #0]
   51748:	f008 f8c3 	bl	598d2 <rpc_client_msg_free>
   5174c:	f8d8 0000 	ldr.w	r0, [r8]
   51750:	f005 fd9b 	bl	5728a <nrf_modem_os_sem_give>
   51754:	4620      	mov	r0, r4
   51756:	b003      	add	sp, #12
   51758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   5175c:	b003      	add	sp, #12
   5175e:	4770      	bx	lr
   51760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   51764:	e7f6      	b.n	51754 <nrf_modem_at_scanf+0x80>
   51766:	f06f 040d 	mvn.w	r4, #13
   5176a:	e7f3      	b.n	51754 <nrf_modem_at_scanf+0x80>
   5176c:	f06f 040b 	mvn.w	r4, #11
   51770:	e7f0      	b.n	51754 <nrf_modem_at_scanf+0x80>
   51772:	bf00      	nop
   51774:	2001bc34 	.word	0x2001bc34
   51778:	2001bc24 	.word	0x2001bc24

0005177c <rpc_at_event_handler>:
   5177c:	b570      	push	{r4, r5, r6, lr}
   5177e:	68c3      	ldr	r3, [r0, #12]
   51780:	4605      	mov	r5, r0
   51782:	2ba7      	cmp	r3, #167	; 0xa7
   51784:	d003      	beq.n	5178e <rpc_at_event_handler+0x12>
   51786:	6828      	ldr	r0, [r5, #0]
   51788:	f008 f8a6 	bl	598d8 <rpc_client_msg_data_rx_free>
   5178c:	e008      	b.n	517a0 <rpc_at_event_handler+0x24>
   5178e:	2903      	cmp	r1, #3
   51790:	d008      	beq.n	517a4 <rpc_at_event_handler+0x28>
   51792:	2904      	cmp	r1, #4
   51794:	d019      	beq.n	517ca <rpc_at_event_handler+0x4e>
   51796:	2902      	cmp	r1, #2
   51798:	d102      	bne.n	517a0 <rpc_at_event_handler+0x24>
   5179a:	2201      	movs	r2, #1
   5179c:	4b0e      	ldr	r3, [pc, #56]	; (517d8 <rpc_at_event_handler+0x5c>)
   5179e:	701a      	strb	r2, [r3, #0]
   517a0:	2000      	movs	r0, #0
   517a2:	e00a      	b.n	517ba <rpc_at_event_handler+0x3e>
   517a4:	4e0d      	ldr	r6, [pc, #52]	; (517dc <rpc_at_event_handler+0x60>)
   517a6:	6833      	ldr	r3, [r6, #0]
   517a8:	b143      	cbz	r3, 517bc <rpc_at_event_handler+0x40>
   517aa:	2400      	movs	r4, #0
   517ac:	6800      	ldr	r0, [r0, #0]
   517ae:	4798      	blx	r3
   517b0:	6828      	ldr	r0, [r5, #0]
   517b2:	6034      	str	r4, [r6, #0]
   517b4:	f008 f890 	bl	598d8 <rpc_client_msg_data_rx_free>
   517b8:	b2e0      	uxtb	r0, r4
   517ba:	bd70      	pop	{r4, r5, r6, pc}
   517bc:	2202      	movs	r2, #2
   517be:	4b08      	ldr	r3, [pc, #32]	; (517e0 <rpc_at_event_handler+0x64>)
   517c0:	2401      	movs	r4, #1
   517c2:	6018      	str	r0, [r3, #0]
   517c4:	4b04      	ldr	r3, [pc, #16]	; (517d8 <rpc_at_event_handler+0x5c>)
   517c6:	701a      	strb	r2, [r3, #0]
   517c8:	e7f6      	b.n	517b8 <rpc_at_event_handler+0x3c>
   517ca:	4b06      	ldr	r3, [pc, #24]	; (517e4 <rpc_at_event_handler+0x68>)
   517cc:	681b      	ldr	r3, [r3, #0]
   517ce:	2b00      	cmp	r3, #0
   517d0:	d0d9      	beq.n	51786 <rpc_at_event_handler+0xa>
   517d2:	6800      	ldr	r0, [r0, #0]
   517d4:	4798      	blx	r3
   517d6:	e7d6      	b.n	51786 <rpc_at_event_handler+0xa>
   517d8:	20020634 	.word	0x20020634
   517dc:	2001bc38 	.word	0x2001bc38
   517e0:	2001bc34 	.word	0x2001bc34
   517e4:	2001bc30 	.word	0x2001bc30

000517e8 <rpc_at_init>:
   517e8:	2201      	movs	r2, #1
   517ea:	b510      	push	{r4, lr}
   517ec:	4611      	mov	r1, r2
   517ee:	4807      	ldr	r0, [pc, #28]	; (5180c <rpc_at_init+0x24>)
   517f0:	f7f8 f9e4 	bl	49bbc <nrf_modem_os_sem_init>
   517f4:	4601      	mov	r1, r0
   517f6:	b928      	cbnz	r0, 51804 <rpc_at_init+0x1c>
   517f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   517fc:	2301      	movs	r3, #1
   517fe:	2205      	movs	r2, #5
   51800:	f7ff be02 	b.w	51408 <at_cmd_send>
   51804:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   51808:	bd10      	pop	{r4, pc}
   5180a:	bf00      	nop
   5180c:	2001bc24 	.word	0x2001bc24

00051810 <rpc_gnss_event_handler>:
   51810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   51814:	6804      	ldr	r4, [r0, #0]
   51816:	4607      	mov	r7, r0
   51818:	460d      	mov	r5, r1
   5181a:	2c00      	cmp	r4, #0
   5181c:	f000 8086 	beq.w	5192c <rpc_gnss_event_handler+0x11c>
   51820:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   51824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   51828:	d142      	bne.n	518b0 <rpc_gnss_event_handler+0xa0>
   5182a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 519c8 <rpc_gnss_event_handler+0x1b8>
   5182e:	f898 3000 	ldrb.w	r3, [r8]
   51832:	2b01      	cmp	r3, #1
   51834:	d131      	bne.n	5189a <rpc_gnss_event_handler+0x8a>
   51836:	4b5c      	ldr	r3, [pc, #368]	; (519a8 <rpc_gnss_event_handler+0x198>)
   51838:	6822      	ldr	r2, [r4, #0]
   5183a:	881b      	ldrh	r3, [r3, #0]
   5183c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   51840:	d12b      	bne.n	5189a <rpc_gnss_event_handler+0x8a>
   51842:	6863      	ldr	r3, [r4, #4]
   51844:	bb6b      	cbnz	r3, 518a2 <rpc_gnss_event_handler+0x92>
   51846:	4b59      	ldr	r3, [pc, #356]	; (519ac <rpc_gnss_event_handler+0x19c>)
   51848:	681e      	ldr	r6, [r3, #0]
   5184a:	b31e      	cbz	r6, 51894 <rpc_gnss_event_handler+0x84>
   5184c:	f242 0309 	movw	r3, #8201	; 0x2009
   51850:	4299      	cmp	r1, r3
   51852:	d11f      	bne.n	51894 <rpc_gnss_event_handler+0x84>
   51854:	4630      	mov	r0, r6
   51856:	8923      	ldrh	r3, [r4, #8]
   51858:	2280      	movs	r2, #128	; 0x80
   5185a:	f840 3b04 	str.w	r3, [r0], #4
   5185e:	f104 010a 	add.w	r1, r4, #10
   51862:	f009 fafa 	bl	5ae5a <memcpy>
   51866:	2280      	movs	r2, #128	; 0x80
   51868:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   5186c:	f106 0084 	add.w	r0, r6, #132	; 0x84
   51870:	f009 faf3 	bl	5ae5a <memcpy>
   51874:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   51878:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   5187c:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   51880:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   51884:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   51888:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   5188c:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   51890:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   51894:	2300      	movs	r3, #0
   51896:	f888 3000 	strb.w	r3, [r8]
   5189a:	6838      	ldr	r0, [r7, #0]
   5189c:	f008 f81c 	bl	598d8 <rpc_client_msg_data_rx_free>
   518a0:	e044      	b.n	5192c <rpc_gnss_event_handler+0x11c>
   518a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
   518a6:	4293      	cmp	r3, r2
   518a8:	bf0c      	ite	eq
   518aa:	2303      	moveq	r3, #3
   518ac:	2302      	movne	r3, #2
   518ae:	e7f2      	b.n	51896 <rpc_gnss_event_handler+0x86>
   518b0:	4e3f      	ldr	r6, [pc, #252]	; (519b0 <rpc_gnss_event_handler+0x1a0>)
   518b2:	6833      	ldr	r3, [r6, #0]
   518b4:	2b00      	cmp	r3, #0
   518b6:	d0f0      	beq.n	5189a <rpc_gnss_event_handler+0x8a>
   518b8:	f244 0204 	movw	r2, #16388	; 0x4004
   518bc:	4291      	cmp	r1, r2
   518be:	d80b      	bhi.n	518d8 <rpc_gnss_event_handler+0xc8>
   518c0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   518c4:	d9e9      	bls.n	5189a <rpc_gnss_event_handler+0x8a>
   518c6:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   518ca:	3a02      	subs	r2, #2
   518cc:	2a02      	cmp	r2, #2
   518ce:	d80b      	bhi.n	518e8 <rpc_gnss_event_handler+0xd8>
   518d0:	e8df f002 	tbb	[pc, r2]
   518d4:	4f45      	.short	0x4f45
   518d6:	59          	.byte	0x59
   518d7:	00          	.byte	0x00
   518d8:	f244 1301 	movw	r3, #16641	; 0x4101
   518dc:	4299      	cmp	r1, r3
   518de:	d003      	beq.n	518e8 <rpc_gnss_event_handler+0xd8>
   518e0:	f244 2301 	movw	r3, #16897	; 0x4201
   518e4:	4299      	cmp	r1, r3
   518e6:	d1d8      	bne.n	5189a <rpc_gnss_event_handler+0x8a>
   518e8:	4f32      	ldr	r7, [pc, #200]	; (519b4 <rpc_gnss_event_handler+0x1a4>)
   518ea:	6838      	ldr	r0, [r7, #0]
   518ec:	b108      	cbz	r0, 518f2 <rpc_gnss_event_handler+0xe2>
   518ee:	f007 fff3 	bl	598d8 <rpc_client_msg_data_rx_free>
   518f2:	f244 2301 	movw	r3, #16897	; 0x4201
   518f6:	429d      	cmp	r5, r3
   518f8:	4b2f      	ldr	r3, [pc, #188]	; (519b8 <rpc_gnss_event_handler+0x1a8>)
   518fa:	d11a      	bne.n	51932 <rpc_gnss_event_handler+0x122>
   518fc:	2202      	movs	r2, #2
   518fe:	603c      	str	r4, [r7, #0]
   51900:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   51904:	701a      	strb	r2, [r3, #0]
   51906:	4d2d      	ldr	r5, [pc, #180]	; (519bc <rpc_gnss_event_handler+0x1ac>)
   51908:	f014 0708 	ands.w	r7, r4, #8
   5190c:	6833      	ldr	r3, [r6, #0]
   5190e:	782a      	ldrb	r2, [r5, #0]
   51910:	d01f      	beq.n	51952 <rpc_gnss_event_handler+0x142>
   51912:	b91a      	cbnz	r2, 5191c <rpc_gnss_event_handler+0x10c>
   51914:	2005      	movs	r0, #5
   51916:	4798      	blx	r3
   51918:	2301      	movs	r3, #1
   5191a:	702b      	strb	r3, [r5, #0]
   5191c:	07e3      	lsls	r3, r4, #31
   5191e:	d502      	bpl.n	51926 <rpc_gnss_event_handler+0x116>
   51920:	2002      	movs	r0, #2
   51922:	6833      	ldr	r3, [r6, #0]
   51924:	4798      	blx	r3
   51926:	2001      	movs	r0, #1
   51928:	6833      	ldr	r3, [r6, #0]
   5192a:	4798      	blx	r3
   5192c:	2000      	movs	r0, #0
   5192e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   51932:	f244 1201 	movw	r2, #16641	; 0x4101
   51936:	4295      	cmp	r5, r2
   51938:	bf0b      	itete	eq
   5193a:	2201      	moveq	r2, #1
   5193c:	2200      	movne	r2, #0
   5193e:	603c      	streq	r4, [r7, #0]
   51940:	603c      	strne	r4, [r7, #0]
   51942:	bf0b      	itete	eq
   51944:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   51948:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   5194c:	701a      	strbeq	r2, [r3, #0]
   5194e:	701a      	strbne	r2, [r3, #0]
   51950:	e7d9      	b.n	51906 <rpc_gnss_event_handler+0xf6>
   51952:	2a00      	cmp	r2, #0
   51954:	d0e2      	beq.n	5191c <rpc_gnss_event_handler+0x10c>
   51956:	2006      	movs	r0, #6
   51958:	4798      	blx	r3
   5195a:	702f      	strb	r7, [r5, #0]
   5195c:	e7de      	b.n	5191c <rpc_gnss_event_handler+0x10c>
   5195e:	4c18      	ldr	r4, [pc, #96]	; (519c0 <rpc_gnss_event_handler+0x1b0>)
   51960:	6820      	ldr	r0, [r4, #0]
   51962:	b108      	cbz	r0, 51968 <rpc_gnss_event_handler+0x158>
   51964:	f007 ffb8 	bl	598d8 <rpc_client_msg_data_rx_free>
   51968:	683b      	ldr	r3, [r7, #0]
   5196a:	2003      	movs	r0, #3
   5196c:	6023      	str	r3, [r4, #0]
   5196e:	6833      	ldr	r3, [r6, #0]
   51970:	e7db      	b.n	5192a <rpc_gnss_event_handler+0x11a>
   51972:	4c14      	ldr	r4, [pc, #80]	; (519c4 <rpc_gnss_event_handler+0x1b4>)
   51974:	6820      	ldr	r0, [r4, #0]
   51976:	b108      	cbz	r0, 5197c <rpc_gnss_event_handler+0x16c>
   51978:	f007 ffae 	bl	598d8 <rpc_client_msg_data_rx_free>
   5197c:	683b      	ldr	r3, [r7, #0]
   5197e:	2004      	movs	r0, #4
   51980:	6023      	str	r3, [r4, #0]
   51982:	6833      	ldr	r3, [r6, #0]
   51984:	e7d1      	b.n	5192a <rpc_gnss_event_handler+0x11a>
   51986:	7822      	ldrb	r2, [r4, #0]
   51988:	2a03      	cmp	r2, #3
   5198a:	d886      	bhi.n	5189a <rpc_gnss_event_handler+0x8a>
   5198c:	e8df f002 	tbb	[pc, r2]
   51990:	09070502 	.word	0x09070502
   51994:	2007      	movs	r0, #7
   51996:	4798      	blx	r3
   51998:	e77f      	b.n	5189a <rpc_gnss_event_handler+0x8a>
   5199a:	2008      	movs	r0, #8
   5199c:	e7fb      	b.n	51996 <rpc_gnss_event_handler+0x186>
   5199e:	2009      	movs	r0, #9
   519a0:	e7f9      	b.n	51996 <rpc_gnss_event_handler+0x186>
   519a2:	200a      	movs	r0, #10
   519a4:	e7f7      	b.n	51996 <rpc_gnss_event_handler+0x186>
   519a6:	bf00      	nop
   519a8:	2001bed4 	.word	0x2001bed4
   519ac:	2001bc4c 	.word	0x2001bc4c
   519b0:	2001bc40 	.word	0x2001bc40
   519b4:	2001bc48 	.word	0x2001bc48
   519b8:	20020636 	.word	0x20020636
   519bc:	20020635 	.word	0x20020635
   519c0:	2001bc44 	.word	0x2001bc44
   519c4:	2001bc3c 	.word	0x2001bc3c
   519c8:	20020637 	.word	0x20020637

000519cc <rpc_gnss_init>:
   519cc:	2000      	movs	r0, #0
   519ce:	4b08      	ldr	r3, [pc, #32]	; (519f0 <rpc_gnss_init+0x24>)
   519d0:	8018      	strh	r0, [r3, #0]
   519d2:	4b08      	ldr	r3, [pc, #32]	; (519f4 <rpc_gnss_init+0x28>)
   519d4:	7018      	strb	r0, [r3, #0]
   519d6:	4b08      	ldr	r3, [pc, #32]	; (519f8 <rpc_gnss_init+0x2c>)
   519d8:	7018      	strb	r0, [r3, #0]
   519da:	4b08      	ldr	r3, [pc, #32]	; (519fc <rpc_gnss_init+0x30>)
   519dc:	7018      	strb	r0, [r3, #0]
   519de:	4b08      	ldr	r3, [pc, #32]	; (51a00 <rpc_gnss_init+0x34>)
   519e0:	7018      	strb	r0, [r3, #0]
   519e2:	4b08      	ldr	r3, [pc, #32]	; (51a04 <rpc_gnss_init+0x38>)
   519e4:	7018      	strb	r0, [r3, #0]
   519e6:	4b08      	ldr	r3, [pc, #32]	; (51a08 <rpc_gnss_init+0x3c>)
   519e8:	6018      	str	r0, [r3, #0]
   519ea:	4b08      	ldr	r3, [pc, #32]	; (51a0c <rpc_gnss_init+0x40>)
   519ec:	6018      	str	r0, [r3, #0]
   519ee:	4770      	bx	lr
   519f0:	2001bed4 	.word	0x2001bed4
   519f4:	20020639 	.word	0x20020639
   519f8:	20020637 	.word	0x20020637
   519fc:	20020635 	.word	0x20020635
   51a00:	20020638 	.word	0x20020638
   51a04:	20020636 	.word	0x20020636
   51a08:	2001bc4c 	.word	0x2001bc4c
   51a0c:	2001bc40 	.word	0x2001bc40

00051a10 <full_dfu_ipc_irq_handler>:
   51a10:	b510      	push	{r4, lr}
   51a12:	4604      	mov	r4, r0
   51a14:	4b04      	ldr	r3, [pc, #16]	; (51a28 <full_dfu_ipc_irq_handler+0x18>)
   51a16:	6818      	ldr	r0, [r3, #0]
   51a18:	f005 fc37 	bl	5728a <nrf_modem_os_sem_give>
   51a1c:	b914      	cbnz	r4, 51a24 <full_dfu_ipc_irq_handler+0x14>
   51a1e:	2201      	movs	r2, #1
   51a20:	4b02      	ldr	r3, [pc, #8]	; (51a2c <full_dfu_ipc_irq_handler+0x1c>)
   51a22:	701a      	strb	r2, [r3, #0]
   51a24:	bd10      	pop	{r4, pc}
   51a26:	bf00      	nop
   51a28:	2001bc50 	.word	0x2001bc50
   51a2c:	2002063a 	.word	0x2002063a

00051a30 <modem_ipc_wait_for_event>:
   51a30:	b508      	push	{r3, lr}
   51a32:	4b08      	ldr	r3, [pc, #32]	; (51a54 <modem_ipc_wait_for_event+0x24>)
   51a34:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   51a38:	6818      	ldr	r0, [r3, #0]
   51a3a:	f005 fc28 	bl	5728e <nrf_modem_os_sem_take>
   51a3e:	b930      	cbnz	r0, 51a4e <modem_ipc_wait_for_event+0x1e>
   51a40:	4b05      	ldr	r3, [pc, #20]	; (51a58 <modem_ipc_wait_for_event+0x28>)
   51a42:	781b      	ldrb	r3, [r3, #0]
   51a44:	2b01      	cmp	r3, #1
   51a46:	bf08      	it	eq
   51a48:	f06f 0004 	mvneq.w	r0, #4
   51a4c:	bd08      	pop	{r3, pc}
   51a4e:	f06f 0073 	mvn.w	r0, #115	; 0x73
   51a52:	e7fb      	b.n	51a4c <modem_ipc_wait_for_event+0x1c>
   51a54:	2001bc50 	.word	0x2001bc50
   51a58:	2002063a 	.word	0x2002063a

00051a5c <nrf_modem_full_dfu_setup>:
   51a5c:	2200      	movs	r2, #0
   51a5e:	2300      	movs	r3, #0
   51a60:	b5f0      	push	{r4, r5, r6, r7, lr}
   51a62:	4d2e      	ldr	r5, [pc, #184]	; (51b1c <nrf_modem_full_dfu_setup+0xc0>)
   51a64:	4f2e      	ldr	r7, [pc, #184]	; (51b20 <nrf_modem_full_dfu_setup+0xc4>)
   51a66:	e9c5 2302 	strd	r2, r3, [r5, #8]
   51a6a:	e9c5 2304 	strd	r2, r3, [r5, #16]
   51a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   51a72:	4b2c      	ldr	r3, [pc, #176]	; (51b24 <nrf_modem_full_dfu_setup+0xc8>)
   51a74:	2400      	movs	r4, #0
   51a76:	601a      	str	r2, [r3, #0]
   51a78:	f100 031c 	add.w	r3, r0, #28
   51a7c:	603b      	str	r3, [r7, #0]
   51a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   51a82:	6043      	str	r3, [r0, #4]
   51a84:	231c      	movs	r3, #28
   51a86:	7203      	strb	r3, [r0, #8]
   51a88:	2320      	movs	r3, #32
   51a8a:	2601      	movs	r6, #1
   51a8c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   51a90:	468c      	mov	ip, r1
   51a92:	7243      	strb	r3, [r0, #9]
   51a94:	4b24      	ldr	r3, [pc, #144]	; (51b28 <nrf_modem_full_dfu_setup+0xcc>)
   51a96:	7004      	strb	r4, [r0, #0]
   51a98:	7044      	strb	r4, [r0, #1]
   51a9a:	70c2      	strb	r2, [r0, #3]
   51a9c:	7284      	strb	r4, [r0, #10]
   51a9e:	72c4      	strb	r4, [r0, #11]
   51aa0:	7086      	strb	r6, [r0, #2]
   51aa2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   51aa6:	702c      	strb	r4, [r5, #0]
   51aa8:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   51aac:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   51ab0:	4b1e      	ldr	r3, [pc, #120]	; (51b2c <nrf_modem_full_dfu_setup+0xd0>)
   51ab2:	b093      	sub	sp, #76	; 0x4c
   51ab4:	fa5f f08c 	uxtb.w	r0, ip
   51ab8:	4622      	mov	r2, r4
   51aba:	491d      	ldr	r1, [pc, #116]	; (51b30 <nrf_modem_full_dfu_setup+0xd4>)
   51abc:	701c      	strb	r4, [r3, #0]
   51abe:	f7fe f83d 	bl	4fb3c <nrfx_ipc_init>
   51ac2:	4621      	mov	r1, r4
   51ac4:	2240      	movs	r2, #64	; 0x40
   51ac6:	a801      	add	r0, sp, #4
   51ac8:	f009 fa01 	bl	5aece <memset>
   51acc:	2302      	movs	r3, #2
   51ace:	9302      	str	r3, [sp, #8]
   51ad0:	2304      	movs	r3, #4
   51ad2:	930b      	str	r3, [sp, #44]	; 0x2c
   51ad4:	2305      	movs	r3, #5
   51ad6:	a801      	add	r0, sp, #4
   51ad8:	9311      	str	r3, [sp, #68]	; 0x44
   51ada:	9609      	str	r6, [sp, #36]	; 0x24
   51adc:	f7fe f846 	bl	4fb6c <nrfx_ipc_config_load>
   51ae0:	4621      	mov	r1, r4
   51ae2:	4632      	mov	r2, r6
   51ae4:	4813      	ldr	r0, [pc, #76]	; (51b34 <nrf_modem_full_dfu_setup+0xd8>)
   51ae6:	683f      	ldr	r7, [r7, #0]
   51ae8:	f7f8 f868 	bl	49bbc <nrf_modem_os_sem_init>
   51aec:	4b12      	ldr	r3, [pc, #72]	; (51b38 <nrf_modem_full_dfu_setup+0xdc>)
   51aee:	9400      	str	r4, [sp, #0]
   51af0:	611c      	str	r4, [r3, #16]
   51af2:	691b      	ldr	r3, [r3, #16]
   51af4:	9300      	str	r3, [sp, #0]
   51af6:	9b00      	ldr	r3, [sp, #0]
   51af8:	f7ff ff9a 	bl	51a30 <modem_ipc_wait_for_event>
   51afc:	4604      	mov	r4, r0
   51afe:	b130      	cbz	r0, 51b0e <nrf_modem_full_dfu_setup+0xb2>
   51b00:	2303      	movs	r3, #3
   51b02:	702b      	strb	r3, [r5, #0]
   51b04:	f7fe f852 	bl	4fbac <nrfx_ipc_uninit>
   51b08:	4620      	mov	r0, r4
   51b0a:	b013      	add	sp, #76	; 0x4c
   51b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   51b0e:	683a      	ldr	r2, [r7, #0]
   51b10:	4b0a      	ldr	r3, [pc, #40]	; (51b3c <nrf_modem_full_dfu_setup+0xe0>)
   51b12:	429a      	cmp	r2, r3
   51b14:	d0f8      	beq.n	51b08 <nrf_modem_full_dfu_setup+0xac>
   51b16:	f06f 0404 	mvn.w	r4, #4
   51b1a:	e7f3      	b.n	51b04 <nrf_modem_full_dfu_setup+0xa8>
   51b1c:	2001add8 	.word	0x2001add8
   51b20:	2001bc54 	.word	0x2001bc54
   51b24:	2001bc58 	.word	0x2001bc58
   51b28:	4002a000 	.word	0x4002a000
   51b2c:	2002063a 	.word	0x2002063a
   51b30:	00051a11 	.word	0x00051a11
   51b34:	2001bc50 	.word	0x2001bc50
   51b38:	40005600 	.word	0x40005600
   51b3c:	a5000001 	.word	0xa5000001

00051b40 <modem_off>:
   51b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   51b42:	2501      	movs	r5, #1
   51b44:	4c07      	ldr	r4, [pc, #28]	; (51b64 <modem_off+0x24>)
   51b46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   51b4a:	6165      	str	r5, [r4, #20]
   51b4c:	f005 fb93 	bl	57276 <nrf_modem_os_busywait>
   51b50:	2300      	movs	r3, #0
   51b52:	6163      	str	r3, [r4, #20]
   51b54:	9301      	str	r3, [sp, #4]
   51b56:	6125      	str	r5, [r4, #16]
   51b58:	6923      	ldr	r3, [r4, #16]
   51b5a:	9301      	str	r3, [sp, #4]
   51b5c:	9b01      	ldr	r3, [sp, #4]
   51b5e:	b003      	add	sp, #12
   51b60:	bd30      	pop	{r4, r5, pc}
   51b62:	bf00      	nop
   51b64:	40005600 	.word	0x40005600

00051b68 <nrf_modem_init>:
   51b68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   51b6a:	460d      	mov	r5, r1
   51b6c:	4606      	mov	r6, r0
   51b6e:	2800      	cmp	r0, #0
   51b70:	d057      	beq.n	51c22 <nrf_modem_init+0xba>
   51b72:	6a43      	ldr	r3, [r0, #36]	; 0x24
   51b74:	2b00      	cmp	r3, #0
   51b76:	d057      	beq.n	51c28 <nrf_modem_init+0xc0>
   51b78:	2301      	movs	r3, #1
   51b7a:	4c2e      	ldr	r4, [pc, #184]	; (51c34 <nrf_modem_init+0xcc>)
   51b7c:	e8d4 2fef 	ldaex	r2, [r4]
   51b80:	2a00      	cmp	r2, #0
   51b82:	d103      	bne.n	51b8c <nrf_modem_init+0x24>
   51b84:	e8c4 3fe1 	stlex	r1, r3, [r4]
   51b88:	2900      	cmp	r1, #0
   51b8a:	d1f7      	bne.n	51b7c <nrf_modem_init+0x14>
   51b8c:	d14f      	bne.n	51c2e <nrf_modem_init+0xc6>
   51b8e:	6a70      	ldr	r0, [r6, #36]	; 0x24
   51b90:	f000 f854 	bl	51c3c <nrf_modem_fault_handler_set>
   51b94:	2d01      	cmp	r5, #1
   51b96:	d023      	beq.n	51be0 <nrf_modem_init+0x78>
   51b98:	f7f8 f85e 	bl	49c58 <nrf_modem_os_init>
   51b9c:	6a33      	ldr	r3, [r6, #32]
   51b9e:	4668      	mov	r0, sp
   51ba0:	9600      	str	r6, [sp, #0]
   51ba2:	f88d 3004 	strb.w	r3, [sp, #4]
   51ba6:	f7fe fa41 	bl	5002c <rpc_init>
   51baa:	4606      	mov	r6, r0
   51bac:	bb78      	cbnz	r0, 51c0e <nrf_modem_init+0xa6>
   51bae:	f7ff fe1b 	bl	517e8 <rpc_at_init>
   51bb2:	4606      	mov	r6, r0
   51bb4:	bb58      	cbnz	r0, 51c0e <nrf_modem_init+0xa6>
   51bb6:	f7ff fb25 	bl	51204 <rpc_ip_init>
   51bba:	4606      	mov	r6, r0
   51bbc:	bb38      	cbnz	r0, 51c0e <nrf_modem_init+0xa6>
   51bbe:	f7ff ff05 	bl	519cc <rpc_gnss_init>
   51bc2:	4606      	mov	r6, r0
   51bc4:	bb18      	cbnz	r0, 51c0e <nrf_modem_init+0xa6>
   51bc6:	4b1c      	ldr	r3, [pc, #112]	; (51c38 <nrf_modem_init+0xd0>)
   51bc8:	701d      	strb	r5, [r3, #0]
   51bca:	2302      	movs	r3, #2
   51bcc:	e8d4 2fef 	ldaex	r2, [r4]
   51bd0:	e8c4 3fe1 	stlex	r1, r3, [r4]
   51bd4:	2900      	cmp	r1, #0
   51bd6:	d1f9      	bne.n	51bcc <nrf_modem_init+0x64>
   51bd8:	2600      	movs	r6, #0
   51bda:	4630      	mov	r0, r6
   51bdc:	b002      	add	sp, #8
   51bde:	bd70      	pop	{r4, r5, r6, pc}
   51be0:	69f2      	ldr	r2, [r6, #28]
   51be2:	6873      	ldr	r3, [r6, #4]
   51be4:	4413      	add	r3, r2
   51be6:	68f2      	ldr	r2, [r6, #12]
   51be8:	4413      	add	r3, r2
   51bea:	6972      	ldr	r2, [r6, #20]
   51bec:	4413      	add	r3, r2
   51bee:	f242 021b 	movw	r2, #8219	; 0x201b
   51bf2:	4293      	cmp	r3, r2
   51bf4:	d909      	bls.n	51c0a <nrf_modem_init+0xa2>
   51bf6:	6a31      	ldr	r1, [r6, #32]
   51bf8:	6830      	ldr	r0, [r6, #0]
   51bfa:	f7ff ff2f 	bl	51a5c <nrf_modem_full_dfu_setup>
   51bfe:	4606      	mov	r6, r0
   51c00:	b928      	cbnz	r0, 51c0e <nrf_modem_init+0xa6>
   51c02:	2002      	movs	r0, #2
   51c04:	f000 f830 	bl	51c68 <nrf_modem_state_set>
   51c08:	e7dd      	b.n	51bc6 <nrf_modem_init+0x5e>
   51c0a:	f06f 060b 	mvn.w	r6, #11
   51c0e:	f7ff ff97 	bl	51b40 <modem_off>
   51c12:	2300      	movs	r3, #0
   51c14:	e8d4 2fef 	ldaex	r2, [r4]
   51c18:	e8c4 3fe1 	stlex	r1, r3, [r4]
   51c1c:	2900      	cmp	r1, #0
   51c1e:	d0dc      	beq.n	51bda <nrf_modem_init+0x72>
   51c20:	e7f8      	b.n	51c14 <nrf_modem_init+0xac>
   51c22:	f06f 060d 	mvn.w	r6, #13
   51c26:	e7d8      	b.n	51bda <nrf_modem_init+0x72>
   51c28:	f06f 0615 	mvn.w	r6, #21
   51c2c:	e7d5      	b.n	51bda <nrf_modem_init+0x72>
   51c2e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   51c32:	e7d2      	b.n	51bda <nrf_modem_init+0x72>
   51c34:	2001bc5c 	.word	0x2001bc5c
   51c38:	2002063b 	.word	0x2002063b

00051c3c <nrf_modem_fault_handler_set>:
   51c3c:	4b01      	ldr	r3, [pc, #4]	; (51c44 <nrf_modem_fault_handler_set+0x8>)
   51c3e:	6018      	str	r0, [r3, #0]
   51c40:	4770      	bx	lr
   51c42:	bf00      	nop
   51c44:	2001bc60 	.word	0x2001bc60

00051c48 <nrf_modem_fault_handler_internal>:
   51c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   51c4a:	460c      	mov	r4, r1
   51c4c:	4605      	mov	r5, r0
   51c4e:	2003      	movs	r0, #3
   51c50:	f000 f80a 	bl	51c68 <nrf_modem_state_set>
   51c54:	4b03      	ldr	r3, [pc, #12]	; (51c64 <nrf_modem_fault_handler_internal+0x1c>)
   51c56:	4668      	mov	r0, sp
   51c58:	e9cd 5400 	strd	r5, r4, [sp]
   51c5c:	681b      	ldr	r3, [r3, #0]
   51c5e:	4798      	blx	r3
   51c60:	b003      	add	sp, #12
   51c62:	bd30      	pop	{r4, r5, pc}
   51c64:	2001bc60 	.word	0x2001bc60

00051c68 <nrf_modem_state_set>:
   51c68:	4b01      	ldr	r3, [pc, #4]	; (51c70 <nrf_modem_state_set+0x8>)
   51c6a:	7018      	strb	r0, [r3, #0]
   51c6c:	4770      	bx	lr
   51c6e:	bf00      	nop
   51c70:	2002063c 	.word	0x2002063c

00051c74 <nrf_modem_state_is_initialized>:
   51c74:	4b02      	ldr	r3, [pc, #8]	; (51c80 <nrf_modem_state_is_initialized+0xc>)
   51c76:	7818      	ldrb	r0, [r3, #0]
   51c78:	1e43      	subs	r3, r0, #1
   51c7a:	4258      	negs	r0, r3
   51c7c:	4158      	adcs	r0, r3
   51c7e:	4770      	bx	lr
   51c80:	2002063c 	.word	0x2002063c

00051c84 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
   51c84:	4b02      	ldr	r3, [pc, #8]	; (51c90 <mbedtls_platform_set_calloc_free+0xc>)
   51c86:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
   51c88:	4b02      	ldr	r3, [pc, #8]	; (51c94 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
   51c8a:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
   51c8c:	6019      	str	r1, [r3, #0]
}
   51c8e:	4770      	bx	lr
   51c90:	2001a824 	.word	0x2001a824
   51c94:	2001a820 	.word	0x2001a820

00051c98 <_heap_init>:
 *
 * Not static in order to allow extern use.
 */
void _heap_init(void)
{
	mbedtls_memory_buffer_alloc_init(mbedtls_heap, sizeof(mbedtls_heap));
   51c98:	f44f 7100 	mov.w	r1, #512	; 0x200
   51c9c:	4801      	ldr	r0, [pc, #4]	; (51ca4 <_heap_init+0xc>)
   51c9e:	f000 b935 	b.w	51f0c <mbedtls_memory_buffer_alloc_init>
   51ca2:	bf00      	nop
   51ca4:	2002063d 	.word	0x2002063d

00051ca8 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
   51ca8:	6801      	ldr	r1, [r0, #0]
   51caa:	4a0e      	ldr	r2, [pc, #56]	; (51ce4 <verify_header+0x3c>)
{
   51cac:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
   51cae:	4291      	cmp	r1, r2
   51cb0:	d115      	bne.n	51cde <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
   51cb2:	69c1      	ldr	r1, [r0, #28]
   51cb4:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
   51cb8:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
   51cbc:	4291      	cmp	r1, r2
   51cbe:	d10e      	bne.n	51cde <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
   51cc0:	6882      	ldr	r2, [r0, #8]
   51cc2:	2a01      	cmp	r2, #1
   51cc4:	d80b      	bhi.n	51cde <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
   51cc6:	68c2      	ldr	r2, [r0, #12]
   51cc8:	b112      	cbz	r2, 51cd0 <verify_header+0x28>
   51cca:	6901      	ldr	r1, [r0, #16]
   51ccc:	428a      	cmp	r2, r1
   51cce:	d006      	beq.n	51cde <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
   51cd0:	6958      	ldr	r0, [r3, #20]
   51cd2:	b128      	cbz	r0, 51ce0 <verify_header+0x38>
   51cd4:	699b      	ldr	r3, [r3, #24]
   51cd6:	1a1b      	subs	r3, r3, r0
   51cd8:	4258      	negs	r0, r3
   51cda:	4158      	adcs	r0, r3
   51cdc:	4770      	bx	lr
        return( 1 );
   51cde:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
   51ce0:	4770      	bx	lr
   51ce2:	bf00      	nop
   51ce4:	ff00aa55 	.word	0xff00aa55

00051ce8 <verify_chain>:

static int verify_chain( void )
{
   51ce8:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
   51cea:	4b0d      	ldr	r3, [pc, #52]	; (51d20 <verify_chain+0x38>)
   51cec:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
   51cee:	b1a6      	cbz	r6, 51d1a <verify_chain+0x32>
   51cf0:	4630      	mov	r0, r6
   51cf2:	f7ff ffd9 	bl	51ca8 <verify_header>
   51cf6:	4604      	mov	r4, r0
   51cf8:	b978      	cbnz	r0, 51d1a <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
   51cfa:	68f3      	ldr	r3, [r6, #12]
   51cfc:	b96b      	cbnz	r3, 51d1a <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
   51cfe:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
   51d00:	b90d      	cbnz	r5, 51d06 <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
   51d02:	4620      	mov	r0, r4
   51d04:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
   51d06:	4628      	mov	r0, r5
   51d08:	f7ff ffce 	bl	51ca8 <verify_header>
   51d0c:	b928      	cbnz	r0, 51d1a <verify_chain+0x32>
        if( cur->prev != prv )
   51d0e:	68eb      	ldr	r3, [r5, #12]
   51d10:	42b3      	cmp	r3, r6
   51d12:	d102      	bne.n	51d1a <verify_chain+0x32>
        cur = cur->next;
   51d14:	462e      	mov	r6, r5
   51d16:	692d      	ldr	r5, [r5, #16]
   51d18:	e7f2      	b.n	51d00 <verify_chain+0x18>
        return( 1 );
   51d1a:	2401      	movs	r4, #1
   51d1c:	e7f1      	b.n	51d02 <verify_chain+0x1a>
   51d1e:	bf00      	nop
   51d20:	2001bc64 	.word	0x2001bc64

00051d24 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
   51d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memory_header *new, *cur = heap.first_free;
   51d26:	4d38      	ldr	r5, [pc, #224]	; (51e08 <buffer_alloc_calloc+0xe4>)
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
   51d28:	682b      	ldr	r3, [r5, #0]
    memory_header *new, *cur = heap.first_free;
   51d2a:	68ee      	ldr	r6, [r5, #12]
    if( heap.buf == NULL || heap.first == NULL )
   51d2c:	b1d3      	cbz	r3, 51d64 <buffer_alloc_calloc+0x40>
   51d2e:	68ab      	ldr	r3, [r5, #8]
   51d30:	b1c3      	cbz	r3, 51d64 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
   51d32:	2800      	cmp	r0, #0
   51d34:	d060      	beq.n	51df8 <buffer_alloc_calloc+0xd4>
   51d36:	2900      	cmp	r1, #0
   51d38:	d05e      	beq.n	51df8 <buffer_alloc_calloc+0xd4>
    original_len = len = n * size;
   51d3a:	fb01 f400 	mul.w	r4, r1, r0
    if( n == 0 || size == 0 || len / n != size )
   51d3e:	fbb4 f0f0 	udiv	r0, r4, r0
   51d42:	4288      	cmp	r0, r1
   51d44:	d158      	bne.n	51df8 <buffer_alloc_calloc+0xd4>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   51d46:	1d21      	adds	r1, r4, #4
   51d48:	d856      	bhi.n	51df8 <buffer_alloc_calloc+0xd4>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   51d4a:	07a2      	lsls	r2, r4, #30
   51d4c:	d00c      	beq.n	51d68 <buffer_alloc_calloc+0x44>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
   51d4e:	f024 0203 	bic.w	r2, r4, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
   51d52:	3204      	adds	r2, #4
   51d54:	4633      	mov	r3, r6
   51d56:	e003      	b.n	51d60 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
   51d58:	6858      	ldr	r0, [r3, #4]
   51d5a:	4290      	cmp	r0, r2
   51d5c:	d24e      	bcs.n	51dfc <buffer_alloc_calloc+0xd8>
            break;

        cur = cur->next_free;
   51d5e:	699b      	ldr	r3, [r3, #24]
    while( cur != NULL )
   51d60:	2b00      	cmp	r3, #0
   51d62:	d1f9      	bne.n	51d58 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
   51d64:	4618      	mov	r0, r3
   51d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   51d68:	4622      	mov	r2, r4
   51d6a:	e7f3      	b.n	51d54 <buffer_alloc_calloc+0x30>
    if( cur->size - len < sizeof(memory_header) +
   51d6c:	1a80      	subs	r0, r0, r2
   51d6e:	2823      	cmp	r0, #35	; 0x23
   51d70:	f103 0620 	add.w	r6, r3, #32
   51d74:	d81c      	bhi.n	51db0 <buffer_alloc_calloc+0x8c>
        cur->alloc = 1;
   51d76:	2201      	movs	r2, #1
   51d78:	609a      	str	r2, [r3, #8]
            cur->prev_free->next_free = cur->next_free;
   51d7a:	e9d3 1205 	ldrd	r1, r2, [r3, #20]
        if( cur->prev_free != NULL )
   51d7e:	b1a9      	cbz	r1, 51dac <buffer_alloc_calloc+0x88>
            cur->prev_free->next_free = cur->next_free;
   51d80:	618a      	str	r2, [r1, #24]
        if( cur->next_free != NULL )
   51d82:	699a      	ldr	r2, [r3, #24]
   51d84:	b10a      	cbz	r2, 51d8a <buffer_alloc_calloc+0x66>
            cur->next_free->prev_free = cur->prev_free;
   51d86:	6959      	ldr	r1, [r3, #20]
   51d88:	6151      	str	r1, [r2, #20]
    cur->prev_free = NULL;
   51d8a:	2200      	movs	r2, #0
    cur->next_free = NULL;
   51d8c:	e9c3 2205 	strd	r2, r2, [r3, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
   51d90:	692b      	ldr	r3, [r5, #16]
   51d92:	07db      	lsls	r3, r3, #31
   51d94:	d503      	bpl.n	51d9e <buffer_alloc_calloc+0x7a>
   51d96:	f7ff ffa7 	bl	51ce8 <verify_chain>
   51d9a:	2800      	cmp	r0, #0
   51d9c:	d131      	bne.n	51e02 <buffer_alloc_calloc+0xde>
   51d9e:	4622      	mov	r2, r4
   51da0:	2100      	movs	r1, #0
   51da2:	4630      	mov	r0, r6
   51da4:	f009 f893 	bl	5aece <memset>
   51da8:	4603      	mov	r3, r0
   51daa:	e7db      	b.n	51d64 <buffer_alloc_calloc+0x40>
            heap.first_free = cur->next_free;
   51dac:	60ea      	str	r2, [r5, #12]
   51dae:	e7e8      	b.n	51d82 <buffer_alloc_calloc+0x5e>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
   51db0:	f102 0c20 	add.w	ip, r2, #32
   51db4:	eb03 010c 	add.w	r1, r3, ip
    new->size = cur->size - len - sizeof(memory_header);
   51db8:	3820      	subs	r0, #32
    new->alloc = 0;
   51dba:	e9c1 0701 	strd	r0, r7, [r1, #4]
    new->prev = cur;
   51dbe:	60cb      	str	r3, [r1, #12]
    new->next = cur->next;
   51dc0:	6918      	ldr	r0, [r3, #16]
    new->magic1 = MAGIC1;
   51dc2:	4f12      	ldr	r7, [pc, #72]	; (51e0c <buffer_alloc_calloc+0xe8>)
    new->next = cur->next;
   51dc4:	6108      	str	r0, [r1, #16]
    new->magic1 = MAGIC1;
   51dc6:	f843 700c 	str.w	r7, [r3, ip]
    new->magic2 = MAGIC2;
   51dca:	f1a7 2710 	sub.w	r7, r7, #268439552	; 0x10001000
   51dce:	f1a7 17ef 	sub.w	r7, r7, #15663343	; 0xef00ef
   51dd2:	61cf      	str	r7, [r1, #28]
    if( new->next != NULL )
   51dd4:	b100      	cbz	r0, 51dd8 <buffer_alloc_calloc+0xb4>
        new->next->prev = new;
   51dd6:	60c1      	str	r1, [r0, #12]
    new->prev_free = cur->prev_free;
   51dd8:	6958      	ldr	r0, [r3, #20]
   51dda:	6148      	str	r0, [r1, #20]
    new->next_free = cur->next_free;
   51ddc:	699f      	ldr	r7, [r3, #24]
   51dde:	618f      	str	r7, [r1, #24]
    if( new->prev_free != NULL )
   51de0:	b140      	cbz	r0, 51df4 <buffer_alloc_calloc+0xd0>
        new->prev_free->next_free = new;
   51de2:	6181      	str	r1, [r0, #24]
    if( new->next_free != NULL )
   51de4:	6988      	ldr	r0, [r1, #24]
   51de6:	b100      	cbz	r0, 51dea <buffer_alloc_calloc+0xc6>
        new->next_free->prev_free = new;
   51de8:	6141      	str	r1, [r0, #20]
    cur->alloc = 1;
   51dea:	2001      	movs	r0, #1
    cur->next = new;
   51dec:	6119      	str	r1, [r3, #16]
    cur->size = len;
   51dee:	e9c3 2001 	strd	r2, r0, [r3, #4]
    cur->next = new;
   51df2:	e7ca      	b.n	51d8a <buffer_alloc_calloc+0x66>
        heap.first_free = new;
   51df4:	60e9      	str	r1, [r5, #12]
   51df6:	e7f5      	b.n	51de4 <buffer_alloc_calloc+0xc0>
        return( NULL );
   51df8:	2300      	movs	r3, #0
   51dfa:	e7b3      	b.n	51d64 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
   51dfc:	689f      	ldr	r7, [r3, #8]
   51dfe:	2f00      	cmp	r7, #0
   51e00:	d0b4      	beq.n	51d6c <buffer_alloc_calloc+0x48>
        mbedtls_exit( 1 );
   51e02:	2001      	movs	r0, #1
   51e04:	f001 faa2 	bl	5334c <exit>
   51e08:	2001bc64 	.word	0x2001bc64
   51e0c:	ff00aa55 	.word	0xff00aa55

00051e10 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
   51e10:	b570      	push	{r4, r5, r6, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
   51e12:	4605      	mov	r5, r0
   51e14:	2800      	cmp	r0, #0
   51e16:	d040      	beq.n	51e9a <buffer_alloc_free+0x8a>
   51e18:	4e3b      	ldr	r6, [pc, #236]	; (51f08 <buffer_alloc_free+0xf8>)
   51e1a:	6833      	ldr	r3, [r6, #0]
   51e1c:	2b00      	cmp	r3, #0
   51e1e:	d03c      	beq.n	51e9a <buffer_alloc_free+0x8a>
   51e20:	68b2      	ldr	r2, [r6, #8]
   51e22:	2a00      	cmp	r2, #0
   51e24:	d039      	beq.n	51e9a <buffer_alloc_free+0x8a>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
   51e26:	4283      	cmp	r3, r0
   51e28:	d803      	bhi.n	51e32 <buffer_alloc_free+0x22>
   51e2a:	6872      	ldr	r2, [r6, #4]
   51e2c:	4413      	add	r3, r2
   51e2e:	4298      	cmp	r0, r3
   51e30:	d302      	bcc.n	51e38 <buffer_alloc_free+0x28>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
   51e32:	2001      	movs	r0, #1
   51e34:	f001 fa8a 	bl	5334c <exit>
    }

    p -= sizeof(memory_header);
   51e38:	f1a0 0420 	sub.w	r4, r0, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
   51e3c:	4620      	mov	r0, r4
   51e3e:	f7ff ff33 	bl	51ca8 <verify_header>
   51e42:	2800      	cmp	r0, #0
   51e44:	d1f5      	bne.n	51e32 <buffer_alloc_free+0x22>
        mbedtls_exit( 1 );

    if( hdr->alloc != 1 )
   51e46:	f855 3c18 	ldr.w	r3, [r5, #-24]
   51e4a:	2b01      	cmp	r3, #1
   51e4c:	d1f1      	bne.n	51e32 <buffer_alloc_free+0x22>
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
   51e4e:	f855 3c14 	ldr.w	r3, [r5, #-20]
    hdr->alloc = 0;
   51e52:	f845 0c18 	str.w	r0, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
   51e56:	b30b      	cbz	r3, 51e9c <buffer_alloc_free+0x8c>
   51e58:	689a      	ldr	r2, [r3, #8]
   51e5a:	b9fa      	cbnz	r2, 51e9c <buffer_alloc_free+0x8c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
   51e5c:	f855 2c1c 	ldr.w	r2, [r5, #-28]
   51e60:	f102 0120 	add.w	r1, r2, #32
   51e64:	685a      	ldr	r2, [r3, #4]
   51e66:	440a      	add	r2, r1
   51e68:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
   51e6a:	e955 3205 	ldrd	r3, r2, [r5, #-20]
   51e6e:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
   51e70:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if( hdr->next != NULL )
   51e74:	692b      	ldr	r3, [r5, #16]
   51e76:	b103      	cbz	r3, 51e7a <buffer_alloc_free+0x6a>
            hdr->next->prev = hdr;
   51e78:	60dd      	str	r5, [r3, #12]
   51e7a:	2220      	movs	r2, #32
   51e7c:	2100      	movs	r1, #0
   51e7e:	4620      	mov	r0, r4
   51e80:	f009 f825 	bl	5aece <memset>
        memset( old, 0, sizeof(memory_header) );
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
   51e84:	6928      	ldr	r0, [r5, #16]
   51e86:	b108      	cbz	r0, 51e8c <buffer_alloc_free+0x7c>
   51e88:	6883      	ldr	r3, [r0, #8]
   51e8a:	b34b      	cbz	r3, 51ee0 <buffer_alloc_free+0xd0>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
   51e8c:	6933      	ldr	r3, [r6, #16]
   51e8e:	079b      	lsls	r3, r3, #30
   51e90:	d503      	bpl.n	51e9a <buffer_alloc_free+0x8a>
   51e92:	f7ff ff29 	bl	51ce8 <verify_chain>
   51e96:	2800      	cmp	r0, #0
   51e98:	d1cb      	bne.n	51e32 <buffer_alloc_free+0x22>
        mbedtls_exit( 1 );
}
   51e9a:	bd70      	pop	{r4, r5, r6, pc}
    if( hdr->next != NULL && hdr->next->alloc == 0 )
   51e9c:	f855 0c10 	ldr.w	r0, [r5, #-16]
   51ea0:	2800      	cmp	r0, #0
   51ea2:	d02a      	beq.n	51efa <buffer_alloc_free+0xea>
   51ea4:	6883      	ldr	r3, [r0, #8]
   51ea6:	bb43      	cbnz	r3, 51efa <buffer_alloc_free+0xea>
        hdr->size += sizeof(memory_header) + hdr->next->size;
   51ea8:	6842      	ldr	r2, [r0, #4]
   51eaa:	6863      	ldr	r3, [r4, #4]
   51eac:	4413      	add	r3, r2
   51eae:	3320      	adds	r3, #32
   51eb0:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
   51eb2:	6903      	ldr	r3, [r0, #16]
   51eb4:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
   51eb6:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   51eba:	b99a      	cbnz	r2, 51ee4 <buffer_alloc_free+0xd4>
   51ebc:	b9cb      	cbnz	r3, 51ef2 <buffer_alloc_free+0xe2>
        hdr->prev_free = old->prev_free;
   51ebe:	6943      	ldr	r3, [r0, #20]
   51ec0:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
   51ec2:	6982      	ldr	r2, [r0, #24]
   51ec4:	61a2      	str	r2, [r4, #24]
        if( hdr->prev_free != NULL )
   51ec6:	b1b3      	cbz	r3, 51ef6 <buffer_alloc_free+0xe6>
            hdr->prev_free->next_free = hdr;
   51ec8:	619c      	str	r4, [r3, #24]
        if( hdr->next_free != NULL )
   51eca:	69a3      	ldr	r3, [r4, #24]
   51ecc:	b103      	cbz	r3, 51ed0 <buffer_alloc_free+0xc0>
            hdr->next_free->prev_free = hdr;
   51ece:	615c      	str	r4, [r3, #20]
        if( hdr->next != NULL )
   51ed0:	6923      	ldr	r3, [r4, #16]
   51ed2:	b103      	cbz	r3, 51ed6 <buffer_alloc_free+0xc6>
            hdr->next->prev = hdr;
   51ed4:	60dc      	str	r4, [r3, #12]
   51ed6:	2220      	movs	r2, #32
   51ed8:	2100      	movs	r1, #0
   51eda:	f008 fff8 	bl	5aece <memset>
    if( old == NULL )
   51ede:	e7d5      	b.n	51e8c <buffer_alloc_free+0x7c>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
   51ee0:	462c      	mov	r4, r5
   51ee2:	e7e1      	b.n	51ea8 <buffer_alloc_free+0x98>
                hdr->prev_free->next_free = hdr->next_free;
   51ee4:	6193      	str	r3, [r2, #24]
            if( hdr->next_free != NULL )
   51ee6:	69a3      	ldr	r3, [r4, #24]
   51ee8:	2b00      	cmp	r3, #0
   51eea:	d0e8      	beq.n	51ebe <buffer_alloc_free+0xae>
                hdr->next_free->prev_free = hdr->prev_free;
   51eec:	6962      	ldr	r2, [r4, #20]
   51eee:	615a      	str	r2, [r3, #20]
   51ef0:	e7e5      	b.n	51ebe <buffer_alloc_free+0xae>
                heap.first_free = hdr->next_free;
   51ef2:	60f3      	str	r3, [r6, #12]
   51ef4:	e7f7      	b.n	51ee6 <buffer_alloc_free+0xd6>
            heap.first_free = hdr;
   51ef6:	60f4      	str	r4, [r6, #12]
   51ef8:	e7e7      	b.n	51eca <buffer_alloc_free+0xba>
        hdr->next_free = heap.first_free;
   51efa:	68f3      	ldr	r3, [r6, #12]
   51efc:	f845 3c08 	str.w	r3, [r5, #-8]
        if( heap.first_free != NULL )
   51f00:	b103      	cbz	r3, 51f04 <buffer_alloc_free+0xf4>
            heap.first_free->prev_free = hdr;
   51f02:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
   51f04:	60f4      	str	r4, [r6, #12]
   51f06:	e7c1      	b.n	51e8c <buffer_alloc_free+0x7c>
   51f08:	2001bc64 	.word	0x2001bc64

00051f0c <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
   51f0c:	b538      	push	{r3, r4, r5, lr}
   51f0e:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
   51f10:	2214      	movs	r2, #20
   51f12:	2100      	movs	r1, #0
{
   51f14:	4605      	mov	r5, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
   51f16:	4813      	ldr	r0, [pc, #76]	; (51f64 <mbedtls_memory_buffer_alloc_init+0x58>)
   51f18:	f008 ffd9 	bl	5aece <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
   51f1c:	4912      	ldr	r1, [pc, #72]	; (51f68 <mbedtls_memory_buffer_alloc_init+0x5c>)
   51f1e:	4813      	ldr	r0, [pc, #76]	; (51f6c <mbedtls_memory_buffer_alloc_init+0x60>)
   51f20:	f7ff feb0 	bl	51c84 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   51f24:	2c23      	cmp	r4, #35	; 0x23
   51f26:	d91c      	bls.n	51f62 <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   51f28:	f015 0303 	ands.w	r3, r5, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
   51f2c:	bf1f      	itttt	ne
   51f2e:	3c04      	subne	r4, #4
   51f30:	18e4      	addne	r4, r4, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
   51f32:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
   51f36:	18ed      	addne	r5, r5, r3
   51f38:	4622      	mov	r2, r4
   51f3a:	2100      	movs	r1, #0
   51f3c:	4628      	mov	r0, r5
   51f3e:	f008 ffc6 	bl	5aece <memset>
    }

    memset( buf, 0, len );

    heap.buf = buf;
   51f42:	4b08      	ldr	r3, [pc, #32]	; (51f64 <mbedtls_memory_buffer_alloc_init+0x58>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
   51f44:	490a      	ldr	r1, [pc, #40]	; (51f70 <mbedtls_memory_buffer_alloc_init+0x64>)
    heap.len = len;
   51f46:	e9c3 5400 	strd	r5, r4, [r3]
    heap.first->size = len - sizeof( memory_header );
   51f4a:	3c20      	subs	r4, #32
    heap.first = (memory_header *)buf;
   51f4c:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
   51f4e:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
   51f50:	689a      	ldr	r2, [r3, #8]
   51f52:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
   51f54:	689a      	ldr	r2, [r3, #8]
   51f56:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
   51f5a:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
   51f5e:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
   51f60:	60da      	str	r2, [r3, #12]
}
   51f62:	bd38      	pop	{r3, r4, r5, pc}
   51f64:	2001bc64 	.word	0x2001bc64
   51f68:	00051e11 	.word	0x00051e11
   51f6c:	00051d25 	.word	0x00051d25
   51f70:	ff00aa55 	.word	0xff00aa55

00051f74 <z_device_get_all_static>:
#include <syscalls/device_is_ready_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   51f74:	4a03      	ldr	r2, [pc, #12]	; (51f84 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   51f76:	4b04      	ldr	r3, [pc, #16]	; (51f88 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   51f78:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   51f7a:	1a9b      	subs	r3, r3, r2
}
   51f7c:	4803      	ldr	r0, [pc, #12]	; (51f8c <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   51f7e:	109b      	asrs	r3, r3, #2
}
   51f80:	4358      	muls	r0, r3
   51f82:	4770      	bx	lr
   51f84:	0005bb78 	.word	0x0005bb78
   51f88:	0005bc58 	.word	0x0005bc58
   51f8c:	b6db6db7 	.word	0xb6db6db7

00051f90 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   51f90:	4b01      	ldr	r3, [pc, #4]	; (51f98 <z_impl_z_errno+0x8>)
   51f92:	6898      	ldr	r0, [r3, #8]
}
   51f94:	3064      	adds	r0, #100	; 0x64
   51f96:	4770      	bx	lr
   51f98:	2001bc78 	.word	0x2001bc78

00051f9c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   51f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   51fa0:	4606      	mov	r6, r0
   51fa2:	b086      	sub	sp, #24
   51fa4:	460f      	mov	r7, r1
	__asm__ volatile(
   51fa6:	f04f 0320 	mov.w	r3, #32
   51faa:	f3ef 8811 	mrs	r8, BASEPRI
   51fae:	f383 8812 	msr	BASEPRI_MAX, r3
   51fb2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   51fb6:	f000 ff7f 	bl	52eb8 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   51fba:	2400      	movs	r4, #0
   51fbc:	2e04      	cmp	r6, #4
   51fbe:	bf96      	itet	ls
   51fc0:	4b21      	ldrls	r3, [pc, #132]	; (52048 <z_fatal_error+0xac>)
   51fc2:	4b22      	ldrhi	r3, [pc, #136]	; (5204c <z_fatal_error+0xb0>)
   51fc4:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
   51fc8:	4605      	mov	r5, r0
   51fca:	e9cd 3404 	strd	r3, r4, [sp, #16]
   51fce:	4b20      	ldr	r3, [pc, #128]	; (52050 <z_fatal_error+0xb4>)
   51fd0:	2201      	movs	r2, #1
   51fd2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   51fd6:	4620      	mov	r0, r4
   51fd8:	4623      	mov	r3, r4
   51fda:	491e      	ldr	r1, [pc, #120]	; (52054 <z_fatal_error+0xb8>)
   51fdc:	9603      	str	r6, [sp, #12]
   51fde:	9400      	str	r4, [sp, #0]
   51fe0:	f008 fb35 	bl	5a64e <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   51fe4:	b16f      	cbz	r7, 52002 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   51fe6:	69fb      	ldr	r3, [r7, #28]
   51fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   51fec:	b14b      	cbz	r3, 52002 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   51fee:	4b1a      	ldr	r3, [pc, #104]	; (52058 <z_fatal_error+0xbc>)
   51ff0:	2201      	movs	r2, #1
   51ff2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   51ff6:	4620      	mov	r0, r4
   51ff8:	4623      	mov	r3, r4
   51ffa:	4916      	ldr	r1, [pc, #88]	; (52054 <z_fatal_error+0xb8>)
   51ffc:	9400      	str	r4, [sp, #0]
   51ffe:	f008 fb26 	bl	5a64e <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   52002:	b12d      	cbz	r5, 52010 <z_fatal_error+0x74>
   52004:	4628      	mov	r0, r5
   52006:	f008 fbfb 	bl	5a800 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   5200a:	b108      	cbz	r0, 52010 <z_fatal_error+0x74>
   5200c:	7803      	ldrb	r3, [r0, #0]
   5200e:	b903      	cbnz	r3, 52012 <z_fatal_error+0x76>
		thread_name = "unknown";
   52010:	4812      	ldr	r0, [pc, #72]	; (5205c <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   52012:	4b13      	ldr	r3, [pc, #76]	; (52060 <z_fatal_error+0xc4>)
   52014:	2201      	movs	r2, #1
   52016:	9302      	str	r3, [sp, #8]
   52018:	2300      	movs	r3, #0
   5201a:	e9cd 5003 	strd	r5, r0, [sp, #12]
   5201e:	e9cd 3300 	strd	r3, r3, [sp]
   52022:	4618      	mov	r0, r3
   52024:	490b      	ldr	r1, [pc, #44]	; (52054 <z_fatal_error+0xb8>)
   52026:	f008 fb12 	bl	5a64e <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   5202a:	4639      	mov	r1, r7
   5202c:	4630      	mov	r0, r6
   5202e:	f7fa fed5 	bl	4cddc <k_sys_fatal_error_handler>
	__asm__ volatile(
   52032:	f388 8811 	msr	BASEPRI, r8
   52036:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   5203a:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   5203c:	b006      	add	sp, #24
   5203e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   52042:	f7f4 bb2f 	b.w	466a4 <z_impl_k_thread_abort>
   52046:	bf00      	nop
   52048:	0005c804 	.word	0x0005c804
   5204c:	000607c7 	.word	0x000607c7
   52050:	000607dd 	.word	0x000607dd
   52054:	0005bf84 	.word	0x0005bf84
   52058:	00060805 	.word	0x00060805
   5205c:	000607d5 	.word	0x000607d5
   52060:	00060826 	.word	0x00060826

00052064 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   52064:	4b0f      	ldr	r3, [pc, #60]	; (520a4 <z_sys_init_run_level+0x40>)
{
   52066:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   52068:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   5206c:	3001      	adds	r0, #1
   5206e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   52072:	42a6      	cmp	r6, r4
   52074:	d800      	bhi.n	52078 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   52076:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   52078:	e9d4 3500 	ldrd	r3, r5, [r4]
   5207c:	4628      	mov	r0, r5
   5207e:	4798      	blx	r3
		if (dev != NULL) {
   52080:	b16d      	cbz	r5, 5209e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   52082:	b138      	cbz	r0, 52094 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   52084:	2800      	cmp	r0, #0
   52086:	bfb8      	it	lt
   52088:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   5208a:	28ff      	cmp	r0, #255	; 0xff
   5208c:	bfa8      	it	ge
   5208e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   52090:	68eb      	ldr	r3, [r5, #12]
   52092:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   52094:	68ea      	ldr	r2, [r5, #12]
   52096:	7853      	ldrb	r3, [r2, #1]
   52098:	f043 0301 	orr.w	r3, r3, #1
   5209c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   5209e:	3408      	adds	r4, #8
   520a0:	e7e7      	b.n	52072 <z_sys_init_run_level+0xe>
   520a2:	bf00      	nop
   520a4:	0005c818 	.word	0x0005c818

000520a8 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   520a8:	2201      	movs	r2, #1
{
   520aa:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   520ac:	4b09      	ldr	r3, [pc, #36]	; (520d4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   520ae:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   520b0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   520b2:	f7ff ffd7 	bl	52064 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   520b6:	f001 f921 	bl	532fc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   520ba:	2004      	movs	r0, #4
   520bc:	f7ff ffd2 	bl	52064 <z_sys_init_run_level>

	z_init_static_threads();
   520c0:	f000 f96c 	bl	5239c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   520c4:	f7f1 ff90 	bl	43fe8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   520c8:	4a03      	ldr	r2, [pc, #12]	; (520d8 <bg_thread_main+0x30>)
   520ca:	7b13      	ldrb	r3, [r2, #12]
   520cc:	f023 0301 	bic.w	r3, r3, #1
   520d0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   520d2:	bd08      	pop	{r3, pc}
   520d4:	2002083d 	.word	0x2002083d
   520d8:	2001aeb8 	.word	0x2001aeb8

000520dc <z_bss_zero>:
{
   520dc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   520de:	4803      	ldr	r0, [pc, #12]	; (520ec <z_bss_zero+0x10>)
   520e0:	4a03      	ldr	r2, [pc, #12]	; (520f0 <z_bss_zero+0x14>)
   520e2:	2100      	movs	r1, #0
   520e4:	1a12      	subs	r2, r2, r0
   520e6:	f008 fac2 	bl	5a66e <z_early_memset>
}
   520ea:	bd08      	pop	{r3, pc}
   520ec:	2001ac70 	.word	0x2001ac70
   520f0:	20020840 	.word	0x20020840

000520f4 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   520f4:	23c8      	movs	r3, #200	; 0xc8
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   520f6:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   520f8:	4e13      	ldr	r6, [pc, #76]	; (52148 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   520fa:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   520fc:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   52100:	2300      	movs	r3, #0
{
   52102:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   52104:	e9cd 2304 	strd	r2, r3, [sp, #16]
   52108:	220f      	movs	r2, #15
   5210a:	9301      	str	r3, [sp, #4]
   5210c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   52110:	231c      	movs	r3, #28
	z_setup_new_thread(thread, stack,
   52112:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   52116:	4d0d      	ldr	r5, [pc, #52]	; (5214c <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   52118:	490d      	ldr	r1, [pc, #52]	; (52150 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   5211a:	fb03 5500 	mla	r5, r3, r0, r5
{
   5211e:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   52120:	fb02 1100 	mla	r1, r2, r0, r1
   52124:	4b0b      	ldr	r3, [pc, #44]	; (52154 <z_init_cpu+0x60>)
   52126:	4630      	mov	r0, r6
   52128:	9500      	str	r5, [sp, #0]
   5212a:	f000 f8db 	bl	522e4 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   5212e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   52130:	752c      	strb	r4, [r5, #20]
   52132:	f023 0304 	bic.w	r3, r3, #4
   52136:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   52138:	4b07      	ldr	r3, [pc, #28]	; (52158 <z_init_cpu+0x64>)
   5213a:	3401      	adds	r4, #1
   5213c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   52140:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   52142:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   52144:	b006      	add	sp, #24
   52146:	bd70      	pop	{r4, r5, r6, pc}
   52148:	2001adf0 	.word	0x2001adf0
   5214c:	2001bc78 	.word	0x2001bc78
   52150:	20021640 	.word	0x20021640
   52154:	00052455 	.word	0x00052455
   52158:	20020e40 	.word	0x20020e40

0005215c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   5215c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   5215e:	2000      	movs	r0, #0
{
   52160:	b0b8      	sub	sp, #224	; 0xe0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   52162:	f7ff ff7f 	bl	52064 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   52166:	4b2f      	ldr	r3, [pc, #188]	; (52224 <z_cstart+0xc8>)
	uint32_t msp =
   52168:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   5216c:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   52170:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   52174:	2400      	movs	r4, #0
   52176:	23e0      	movs	r3, #224	; 0xe0
   52178:	4d2b      	ldr	r5, [pc, #172]	; (52228 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   5217a:	4e2c      	ldr	r6, [pc, #176]	; (5222c <z_cstart+0xd0>)
   5217c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   52180:	77ec      	strb	r4, [r5, #31]
   52182:	762c      	strb	r4, [r5, #24]
   52184:	766c      	strb	r4, [r5, #25]
   52186:	76ac      	strb	r4, [r5, #26]
   52188:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   5218c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   5218e:	4f28      	ldr	r7, [pc, #160]	; (52230 <z_cstart+0xd4>)
   52190:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   52194:	626b      	str	r3, [r5, #36]	; 0x24
   52196:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   5219a:	f7f4 f9e7 	bl	4656c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   5219e:	f7f3 fd25 	bl	45bec <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   521a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   521a6:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   521a8:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   521aa:	f7f4 fc17 	bl	469dc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   521ae:	f7f4 fa8f 	bl	466d0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   521b2:	f7f2 ff79 	bl	450a8 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   521b6:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   521ba:	ad06      	add	r5, sp, #24
   521bc:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   521be:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   521c2:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   521c6:	f001 f87b 	bl	532c0 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   521ca:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   521cc:	f008 fa33 	bl	5a636 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   521d0:	2001      	movs	r0, #1
   521d2:	f7ff ff47 	bl	52064 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   521d6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   521d8:	4d16      	ldr	r5, [pc, #88]	; (52234 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   521da:	f7ff ff43 	bl	52064 <z_sys_init_run_level>
	z_sched_init();
   521de:	f000 fdc3 	bl	52d68 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   521e2:	4b15      	ldr	r3, [pc, #84]	; (52238 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   521e4:	6235      	str	r5, [r6, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   521e6:	9305      	str	r3, [sp, #20]
   521e8:	2301      	movs	r3, #1
   521ea:	4914      	ldr	r1, [pc, #80]	; (5223c <z_cstart+0xe0>)
   521ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   521f0:	e9cd 4303 	strd	r4, r3, [sp, #12]
   521f4:	4628      	mov	r0, r5
   521f6:	463b      	mov	r3, r7
   521f8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   521fc:	9400      	str	r4, [sp, #0]
   521fe:	f000 f871 	bl	522e4 <z_setup_new_thread>
   52202:	4606      	mov	r6, r0
   52204:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   52206:	4628      	mov	r0, r5
   52208:	f022 0204 	bic.w	r2, r2, #4
   5220c:	736a      	strb	r2, [r5, #13]
   5220e:	f008 fc73 	bl	5aaf8 <z_ready_thread>
	z_init_cpu(0);
   52212:	4620      	mov	r0, r4
   52214:	f7ff ff6e 	bl	520f4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   52218:	463a      	mov	r2, r7
   5221a:	4631      	mov	r1, r6
   5221c:	4628      	mov	r0, r5
   5221e:	f7f3 fea3 	bl	45f68 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   52222:	bf00      	nop
   52224:	20020e40 	.word	0x20020e40
   52228:	e000ed00 	.word	0xe000ed00
   5222c:	2001bc78 	.word	0x2001bc78
   52230:	000520a9 	.word	0x000520a9
   52234:	2001aeb8 	.word	0x2001aeb8
   52238:	0005d706 	.word	0x0005d706
   5223c:	20021780 	.word	0x20021780

00052240 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   52240:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   52242:	4c06      	ldr	r4, [pc, #24]	; (5225c <statics_init+0x1c>)
   52244:	4d06      	ldr	r5, [pc, #24]	; (52260 <statics_init+0x20>)
   52246:	42ac      	cmp	r4, r5
   52248:	d301      	bcc.n	5224e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   5224a:	2000      	movs	r0, #0
   5224c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   5224e:	4620      	mov	r0, r4
   52250:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   52254:	f008 fa0f 	bl	5a676 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   52258:	3414      	adds	r4, #20
   5225a:	e7f4      	b.n	52246 <statics_init+0x6>
   5225c:	2001aaf8 	.word	0x2001aaf8
   52260:	2001ab20 	.word	0x2001ab20

00052264 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   52264:	2000      	movs	r0, #0
{
   52266:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   52268:	4c05      	ldr	r4, [pc, #20]	; (52280 <init_mem_slab_module+0x1c>)
   5226a:	4d06      	ldr	r5, [pc, #24]	; (52284 <init_mem_slab_module+0x20>)
   5226c:	42ac      	cmp	r4, r5
   5226e:	d300      	bcc.n	52272 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   52270:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   52272:	4620      	mov	r0, r4
   52274:	f008 fa7c 	bl	5a770 <create_free_list>
		if (rc < 0) {
   52278:	2800      	cmp	r0, #0
   5227a:	dbf9      	blt.n	52270 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   5227c:	341c      	adds	r4, #28
   5227e:	e7f5      	b.n	5226c <init_mem_slab_module+0x8>
   52280:	2001aac0 	.word	0x2001aac0
   52284:	2001aaf8 	.word	0x2001aaf8

00052288 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   52288:	b573      	push	{r0, r1, r4, r5, r6, lr}
   5228a:	460c      	mov	r4, r1
	__asm__ volatile(
   5228c:	f04f 0520 	mov.w	r5, #32
   52290:	f3ef 8111 	mrs	r1, BASEPRI
   52294:	f385 8812 	msr	BASEPRI_MAX, r5
   52298:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   5229c:	6945      	ldr	r5, [r0, #20]
   5229e:	b15d      	cbz	r5, 522b8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   522a0:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   522a2:	682b      	ldr	r3, [r5, #0]
   522a4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   522a6:	6983      	ldr	r3, [r0, #24]
   522a8:	3301      	adds	r3, #1
   522aa:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   522ac:	2000      	movs	r0, #0
	__asm__ volatile(
   522ae:	f381 8811 	msr	BASEPRI, r1
   522b2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   522b6:	e011      	b.n	522dc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   522b8:	ea52 0603 	orrs.w	r6, r2, r3
   522bc:	d103      	bne.n	522c6 <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   522be:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   522c2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   522c4:	e7f3      	b.n	522ae <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   522c6:	e9cd 2300 	strd	r2, r3, [sp]
   522ca:	4602      	mov	r2, r0
   522cc:	3008      	adds	r0, #8
   522ce:	f000 fc55 	bl	52b7c <z_pend_curr>
		if (result == 0) {
   522d2:	b918      	cbnz	r0, 522dc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   522d4:	4b02      	ldr	r3, [pc, #8]	; (522e0 <k_mem_slab_alloc+0x58>)
   522d6:	689b      	ldr	r3, [r3, #8]
   522d8:	695b      	ldr	r3, [r3, #20]
   522da:	6023      	str	r3, [r4, #0]
}
   522dc:	b002      	add	sp, #8
   522de:	bd70      	pop	{r4, r5, r6, pc}
   522e0:	2001bc78 	.word	0x2001bc78

000522e4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   522e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   522e8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   522ea:	f100 0558 	add.w	r5, r0, #88	; 0x58
   522ee:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   522f0:	2604      	movs	r6, #4
	list->tail = (sys_dnode_t *)list;
   522f2:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   522f6:	2500      	movs	r5, #0
{
   522f8:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   522fa:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   522fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	node->prev = NULL;
   522fe:	e9c0 5506 	strd	r5, r5, [r0, #24]
   52302:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   52304:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   52306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   52308:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   5230c:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   52310:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   52312:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   52314:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   52316:	9202      	str	r2, [sp, #8]
   52318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   5231a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   5231e:	9201      	str	r2, [sp, #4]
   52320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   52322:	9200      	str	r2, [sp, #0]
   52324:	4642      	mov	r2, r8
   52326:	f7f3 fdff 	bl	45f28 <arch_new_thread>
	if (!_current) {
   5232a:	4b05      	ldr	r3, [pc, #20]	; (52340 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   5232c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   5232e:	689b      	ldr	r3, [r3, #8]
   52330:	b103      	cbz	r3, 52334 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   52332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   52334:	4640      	mov	r0, r8
   52336:	6763      	str	r3, [r4, #116]	; 0x74
   52338:	b004      	add	sp, #16
   5233a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   5233e:	bf00      	nop
   52340:	2001bc78 	.word	0x2001bc78

00052344 <z_impl_k_thread_create>:
{
   52344:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   52346:	2500      	movs	r5, #0
{
   52348:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   5234a:	9505      	str	r5, [sp, #20]
   5234c:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   5234e:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   52352:	9504      	str	r5, [sp, #16]
   52354:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   52356:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   52358:	9503      	str	r5, [sp, #12]
   5235a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   5235c:	9502      	str	r5, [sp, #8]
   5235e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   52360:	9501      	str	r5, [sp, #4]
   52362:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   52364:	9500      	str	r5, [sp, #0]
   52366:	f7ff ffbd 	bl	522e4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   5236a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   5236e:	bf08      	it	eq
   52370:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   52374:	d005      	beq.n	52382 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   52376:	ea56 0307 	orrs.w	r3, r6, r7
   5237a:	d105      	bne.n	52388 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   5237c:	4620      	mov	r0, r4
   5237e:	f000 fc73 	bl	52c68 <z_sched_start>
}
   52382:	4620      	mov	r0, r4
   52384:	b007      	add	sp, #28
   52386:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   52388:	463a      	mov	r2, r7
   5238a:	4633      	mov	r3, r6
   5238c:	4902      	ldr	r1, [pc, #8]	; (52398 <z_impl_k_thread_create+0x54>)
   5238e:	f104 0018 	add.w	r0, r4, #24
   52392:	f000 fe71 	bl	53078 <z_add_timeout>
   52396:	e7f4      	b.n	52382 <z_impl_k_thread_create+0x3e>
   52398:	0005aa65 	.word	0x0005aa65

0005239c <z_init_static_threads>:
{
   5239c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   523a0:	4c29      	ldr	r4, [pc, #164]	; (52448 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   523a2:	4d2a      	ldr	r5, [pc, #168]	; (5244c <z_init_static_threads+0xb0>)
{
   523a4:	b087      	sub	sp, #28
   523a6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   523a8:	42ae      	cmp	r6, r5
   523aa:	f104 0430 	add.w	r4, r4, #48	; 0x30
   523ae:	d30f      	bcc.n	523d0 <z_init_static_threads+0x34>
	k_sched_lock();
   523b0:	f000 fcaa 	bl	52d08 <k_sched_lock>
   523b4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   523b8:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   523bc:	4c22      	ldr	r4, [pc, #136]	; (52448 <z_init_static_threads+0xac>)
   523be:	f8df 9090 	ldr.w	r9, [pc, #144]	; 52450 <z_init_static_threads+0xb4>
   523c2:	42ac      	cmp	r4, r5
   523c4:	d320      	bcc.n	52408 <z_init_static_threads+0x6c>
}
   523c6:	b007      	add	sp, #28
   523c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   523cc:	f000 bcb0 	b.w	52d30 <k_sched_unlock>
		z_setup_new_thread(
   523d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   523d4:	9305      	str	r3, [sp, #20]
   523d6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   523da:	9304      	str	r3, [sp, #16]
   523dc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   523e0:	9303      	str	r3, [sp, #12]
   523e2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   523e6:	9302      	str	r3, [sp, #8]
   523e8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   523ec:	9301      	str	r3, [sp, #4]
   523ee:	f854 3c20 	ldr.w	r3, [r4, #-32]
   523f2:	9300      	str	r3, [sp, #0]
   523f4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   523f8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   523fc:	f7ff ff72 	bl	522e4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   52400:	f854 3c30 	ldr.w	r3, [r4, #-48]
   52404:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   52406:	e7ce      	b.n	523a6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   52408:	6a63      	ldr	r3, [r4, #36]	; 0x24
   5240a:	1c5a      	adds	r2, r3, #1
   5240c:	d00d      	beq.n	5242a <z_init_static_threads+0x8e>
   5240e:	2100      	movs	r1, #0
   52410:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   52412:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   52416:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   5241a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   5241e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   52422:	d104      	bne.n	5242e <z_init_static_threads+0x92>
	z_sched_start(thread);
   52424:	4640      	mov	r0, r8
   52426:	f000 fc1f 	bl	52c68 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   5242a:	3430      	adds	r4, #48	; 0x30
   5242c:	e7c9      	b.n	523c2 <z_init_static_threads+0x26>
   5242e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   52432:	2300      	movs	r3, #0
   52434:	f7ee fb6c 	bl	40b10 <__aeabi_uldivmod>
   52438:	4602      	mov	r2, r0
   5243a:	460b      	mov	r3, r1
   5243c:	f108 0018 	add.w	r0, r8, #24
   52440:	4649      	mov	r1, r9
   52442:	f000 fe19 	bl	53078 <z_add_timeout>
   52446:	e7f0      	b.n	5242a <z_init_static_threads+0x8e>
   52448:	0005be60 	.word	0x0005be60
   5244c:	0005be60 	.word	0x0005be60
   52450:	0005aa65 	.word	0x0005aa65

00052454 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   52454:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   52456:	4c0b      	ldr	r4, [pc, #44]	; (52484 <idle+0x30>)
   52458:	4d0b      	ldr	r5, [pc, #44]	; (52488 <idle+0x34>)
	__asm__ volatile(
   5245a:	f04f 0220 	mov.w	r2, #32
   5245e:	f3ef 8311 	mrs	r3, BASEPRI
   52462:	f382 8812 	msr	BASEPRI_MAX, r2
   52466:	f3bf 8f6f 	isb	sy
   5246a:	f008 fbe4 	bl	5ac36 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   5246e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   52470:	61e0      	str	r0, [r4, #28]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   52472:	b913      	cbnz	r3, 5247a <idle+0x26>
	arch_cpu_idle();
   52474:	f7f3 fbc0 	bl	45bf8 <arch_cpu_idle>
}
   52478:	e7ef      	b.n	5245a <idle+0x6>
   5247a:	f7f3 fa1b 	bl	458b4 <pm_system_suspend>
   5247e:	2800      	cmp	r0, #0
   52480:	d1eb      	bne.n	5245a <idle+0x6>
   52482:	e7f7      	b.n	52474 <idle+0x20>
   52484:	2001bc78 	.word	0x2001bc78
   52488:	2002083d 	.word	0x2002083d

0005248c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   5248c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   52490:	4604      	mov	r4, r0
   52492:	4617      	mov	r7, r2
   52494:	461e      	mov	r6, r3
   52496:	f04f 0320 	mov.w	r3, #32
   5249a:	f3ef 8811 	mrs	r8, BASEPRI
   5249e:	f383 8812 	msr	BASEPRI_MAX, r3
   524a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   524a6:	68c3      	ldr	r3, [r0, #12]
   524a8:	4a33      	ldr	r2, [pc, #204]	; (52578 <z_impl_k_mutex_lock+0xec>)
   524aa:	b17b      	cbz	r3, 524cc <z_impl_k_mutex_lock+0x40>
   524ac:	6880      	ldr	r0, [r0, #8]
   524ae:	6891      	ldr	r1, [r2, #8]
   524b0:	4288      	cmp	r0, r1
   524b2:	d019      	beq.n	524e8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   524b4:	ea57 0306 	orrs.w	r3, r7, r6
   524b8:	d118      	bne.n	524ec <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   524ba:	f388 8811 	msr	BASEPRI, r8
   524be:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   524c2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   524c6:	b002      	add	sp, #8
   524c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   524cc:	6891      	ldr	r1, [r2, #8]
   524ce:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   524d2:	3301      	adds	r3, #1
   524d4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   524d6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   524d8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   524da:	60a3      	str	r3, [r4, #8]
   524dc:	f388 8811 	msr	BASEPRI, r8
   524e0:	f3bf 8f6f 	isb	sy
		return 0;
   524e4:	2000      	movs	r0, #0
   524e6:	e7ee      	b.n	524c6 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   524e8:	6921      	ldr	r1, [r4, #16]
   524ea:	e7f2      	b.n	524d2 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   524ec:	f991 100e 	ldrsb.w	r1, [r1, #14]
   524f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   524f4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   524f8:	4299      	cmp	r1, r3
   524fa:	bfa8      	it	ge
   524fc:	4619      	movge	r1, r3
   524fe:	4291      	cmp	r1, r2
   52500:	bfb8      	it	lt
   52502:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   52504:	428b      	cmp	r3, r1
   52506:	dd2e      	ble.n	52566 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   52508:	f008 f985 	bl	5a816 <adjust_owner_prio.isra.0>
   5250c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   5250e:	4622      	mov	r2, r4
   52510:	4641      	mov	r1, r8
   52512:	e9cd 7600 	strd	r7, r6, [sp]
   52516:	4819      	ldr	r0, [pc, #100]	; (5257c <z_impl_k_mutex_lock+0xf0>)
   52518:	f000 fb30 	bl	52b7c <z_pend_curr>
	if (got_mutex == 0) {
   5251c:	2800      	cmp	r0, #0
   5251e:	d0e1      	beq.n	524e4 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   52520:	f04f 0320 	mov.w	r3, #32
   52524:	f3ef 8611 	mrs	r6, BASEPRI
   52528:	f383 8812 	msr	BASEPRI_MAX, r3
   5252c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   52530:	68a0      	ldr	r0, [r4, #8]
   52532:	b1d0      	cbz	r0, 5256a <z_impl_k_mutex_lock+0xde>
	return list->head == list;
   52534:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   52536:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52538:	429c      	cmp	r4, r3
   5253a:	d00a      	beq.n	52552 <z_impl_k_mutex_lock+0xc6>
   5253c:	b14b      	cbz	r3, 52552 <z_impl_k_mutex_lock+0xc6>
   5253e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   52542:	4299      	cmp	r1, r3
   52544:	bfa8      	it	ge
   52546:	4619      	movge	r1, r3
   52548:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   5254c:	4299      	cmp	r1, r3
   5254e:	bfb8      	it	lt
   52550:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   52552:	f008 f960 	bl	5a816 <adjust_owner_prio.isra.0>
   52556:	b140      	cbz	r0, 5256a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   52558:	4631      	mov	r1, r6
   5255a:	4808      	ldr	r0, [pc, #32]	; (5257c <z_impl_k_mutex_lock+0xf0>)
   5255c:	f000 fb72 	bl	52c44 <z_reschedule>
	return -EAGAIN;
   52560:	f06f 000a 	mvn.w	r0, #10
   52564:	e7af      	b.n	524c6 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   52566:	2500      	movs	r5, #0
   52568:	e7d1      	b.n	5250e <z_impl_k_mutex_lock+0x82>
	if (resched) {
   5256a:	2d00      	cmp	r5, #0
   5256c:	d1f4      	bne.n	52558 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   5256e:	f386 8811 	msr	BASEPRI, r6
   52572:	f3bf 8f6f 	isb	sy
   52576:	e7f3      	b.n	52560 <z_impl_k_mutex_lock+0xd4>
   52578:	2001bc78 	.word	0x2001bc78
   5257c:	2002083e 	.word	0x2002083e

00052580 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   52580:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   52582:	6883      	ldr	r3, [r0, #8]
{
   52584:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   52586:	b36b      	cbz	r3, 525e4 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   52588:	4a19      	ldr	r2, [pc, #100]	; (525f0 <z_impl_k_mutex_unlock+0x70>)
   5258a:	6892      	ldr	r2, [r2, #8]
   5258c:	4293      	cmp	r3, r2
   5258e:	d12c      	bne.n	525ea <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   52590:	68c3      	ldr	r3, [r0, #12]
   52592:	2b01      	cmp	r3, #1
   52594:	d903      	bls.n	5259e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   52596:	3b01      	subs	r3, #1
   52598:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   5259a:	2000      	movs	r0, #0
}
   5259c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   5259e:	f04f 0320 	mov.w	r3, #32
   525a2:	f3ef 8511 	mrs	r5, BASEPRI
   525a6:	f383 8812 	msr	BASEPRI_MAX, r3
   525aa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   525ae:	6901      	ldr	r1, [r0, #16]
   525b0:	6880      	ldr	r0, [r0, #8]
   525b2:	f008 f930 	bl	5a816 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   525b6:	4620      	mov	r0, r4
   525b8:	f008 faae 	bl	5ab18 <z_unpend_first_thread>
	mutex->owner = new_owner;
   525bc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   525be:	b158      	cbz	r0, 525d8 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   525c0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   525c4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   525c6:	2200      	movs	r2, #0
   525c8:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   525ca:	f008 fa95 	bl	5aaf8 <z_ready_thread>
		z_reschedule(&lock, key);
   525ce:	4629      	mov	r1, r5
   525d0:	4808      	ldr	r0, [pc, #32]	; (525f4 <z_impl_k_mutex_unlock+0x74>)
   525d2:	f000 fb37 	bl	52c44 <z_reschedule>
   525d6:	e7e0      	b.n	5259a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   525d8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   525da:	f385 8811 	msr	BASEPRI, r5
   525de:	f3bf 8f6f 	isb	sy
   525e2:	e7da      	b.n	5259a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   525e4:	f06f 0015 	mvn.w	r0, #21
   525e8:	e7d8      	b.n	5259c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   525ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   525ee:	e7d5      	b.n	5259c <z_impl_k_mutex_unlock+0x1c>
   525f0:	2001bc78 	.word	0x2001bc78
   525f4:	2002083e 	.word	0x2002083e

000525f8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   525f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   525fa:	4611      	mov	r1, r2
	__asm__ volatile(
   525fc:	f04f 0220 	mov.w	r2, #32
   52600:	f3ef 8511 	mrs	r5, BASEPRI
   52604:	f382 8812 	msr	BASEPRI_MAX, r2
   52608:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   5260c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   5260e:	b19c      	cbz	r4, 52638 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   52610:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   52612:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   52614:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   52618:	4294      	cmp	r4, r2
	list->head = node;
   5261a:	6003      	str	r3, [r0, #0]
	list->tail = node;
   5261c:	bf08      	it	eq
   5261e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   52620:	2101      	movs	r1, #1
   52622:	4620      	mov	r0, r4
   52624:	f008 f96c 	bl	5a900 <z_queue_node_peek>
   52628:	4604      	mov	r4, r0
	__asm__ volatile(
   5262a:	f385 8811 	msr	BASEPRI, r5
   5262e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   52632:	4620      	mov	r0, r4
   52634:	b003      	add	sp, #12
   52636:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   52638:	ea51 0203 	orrs.w	r2, r1, r3
   5263c:	d0f5      	beq.n	5262a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   5263e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   52642:	e9cd 1300 	strd	r1, r3, [sp]
   52646:	4610      	mov	r0, r2
   52648:	4629      	mov	r1, r5
   5264a:	f000 fa97 	bl	52b7c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   5264e:	2800      	cmp	r0, #0
   52650:	d1ef      	bne.n	52632 <z_impl_k_queue_get+0x3a>
   52652:	4b02      	ldr	r3, [pc, #8]	; (5265c <z_impl_k_queue_get+0x64>)
   52654:	689b      	ldr	r3, [r3, #8]
   52656:	695c      	ldr	r4, [r3, #20]
   52658:	e7eb      	b.n	52632 <z_impl_k_queue_get+0x3a>
   5265a:	bf00      	nop
   5265c:	2001bc78 	.word	0x2001bc78

00052660 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   52660:	b538      	push	{r3, r4, r5, lr}
   52662:	4604      	mov	r4, r0
	__asm__ volatile(
   52664:	f04f 0320 	mov.w	r3, #32
   52668:	f3ef 8511 	mrs	r5, BASEPRI
   5266c:	f383 8812 	msr	BASEPRI_MAX, r3
   52670:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   52674:	f008 fa50 	bl	5ab18 <z_unpend_first_thread>

	if (thread != NULL) {
   52678:	b148      	cbz	r0, 5268e <z_impl_k_sem_give+0x2e>
   5267a:	2200      	movs	r2, #0
   5267c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   5267e:	f008 fa3b 	bl	5aaf8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   52682:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   52684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   52688:	4807      	ldr	r0, [pc, #28]	; (526a8 <z_impl_k_sem_give+0x48>)
   5268a:	f000 badb 	b.w	52c44 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   5268e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   52692:	429a      	cmp	r2, r3
   52694:	bf18      	it	ne
   52696:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   52698:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   5269a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   5269c:	f104 0010 	add.w	r0, r4, #16
   526a0:	f008 fb7b 	bl	5ad9a <z_handle_obj_poll_events>
}
   526a4:	e7ed      	b.n	52682 <z_impl_k_sem_give+0x22>
   526a6:	bf00      	nop
   526a8:	2002083e 	.word	0x2002083e

000526ac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   526ac:	b513      	push	{r0, r1, r4, lr}
   526ae:	f04f 0420 	mov.w	r4, #32
   526b2:	f3ef 8111 	mrs	r1, BASEPRI
   526b6:	f384 8812 	msr	BASEPRI_MAX, r4
   526ba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   526be:	6884      	ldr	r4, [r0, #8]
   526c0:	b144      	cbz	r4, 526d4 <z_impl_k_sem_take+0x28>
		sem->count--;
   526c2:	3c01      	subs	r4, #1
   526c4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   526c6:	f381 8811 	msr	BASEPRI, r1
   526ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   526ce:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   526d0:	b002      	add	sp, #8
   526d2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   526d4:	ea52 0403 	orrs.w	r4, r2, r3
   526d8:	d106      	bne.n	526e8 <z_impl_k_sem_take+0x3c>
   526da:	f381 8811 	msr	BASEPRI, r1
   526de:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   526e2:	f06f 000f 	mvn.w	r0, #15
   526e6:	e7f3      	b.n	526d0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   526e8:	e9cd 2300 	strd	r2, r3, [sp]
   526ec:	4602      	mov	r2, r0
   526ee:	4802      	ldr	r0, [pc, #8]	; (526f8 <z_impl_k_sem_take+0x4c>)
   526f0:	f000 fa44 	bl	52b7c <z_pend_curr>
	return ret;
   526f4:	e7ec      	b.n	526d0 <z_impl_k_sem_take+0x24>
   526f6:	bf00      	nop
   526f8:	2002083e 	.word	0x2002083e

000526fc <submit_to_queue_locked>:
{
   526fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   526fe:	68c3      	ldr	r3, [r0, #12]
{
   52700:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   52702:	079a      	lsls	r2, r3, #30
{
   52704:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   52706:	f3c3 0640 	ubfx	r6, r3, #1, #1
   5270a:	d42c      	bmi.n	52766 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   5270c:	075b      	lsls	r3, r3, #29
   5270e:	d41a      	bmi.n	52746 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   52710:	680b      	ldr	r3, [r1, #0]
   52712:	b90b      	cbnz	r3, 52718 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   52714:	6883      	ldr	r3, [r0, #8]
   52716:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   52718:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   5271a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   5271c:	bf42      	ittt	mi
   5271e:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   52720:	2602      	movmi	r6, #2
			*queuep = work->queue;
   52722:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   52724:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   52726:	bf58      	it	pl
   52728:	2601      	movpl	r6, #1
	if (queue == NULL) {
   5272a:	2d00      	cmp	r5, #0
   5272c:	d03a      	beq.n	527a4 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   5272e:	4b1f      	ldr	r3, [pc, #124]	; (527ac <submit_to_queue_locked+0xb0>)
   52730:	689b      	ldr	r3, [r3, #8]
   52732:	42ab      	cmp	r3, r5
   52734:	d00a      	beq.n	5274c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   52736:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   5273a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   5273c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   52740:	d414      	bmi.n	5276c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   52742:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   52746:	2300      	movs	r3, #0
   52748:	603b      	str	r3, [r7, #0]
	return ret;
   5274a:	e025      	b.n	52798 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   5274c:	f008 f84f 	bl	5a7ee <k_is_in_isr>
   52750:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   52754:	2800      	cmp	r0, #0
   52756:	d1f0      	bne.n	5273a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   52758:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   5275a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   5275e:	d5f0      	bpl.n	52742 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   52760:	b152      	cbz	r2, 52778 <submit_to_queue_locked+0x7c>
   52762:	075b      	lsls	r3, r3, #29
   52764:	d408      	bmi.n	52778 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   52766:	f06f 060f 	mvn.w	r6, #15
   5276a:	e7ec      	b.n	52746 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   5276c:	2a00      	cmp	r2, #0
   5276e:	d1fa      	bne.n	52766 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   52770:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   52774:	2b00      	cmp	r3, #0
   52776:	d1f6      	bne.n	52766 <submit_to_queue_locked+0x6a>
	parent->next = child;
   52778:	2300      	movs	r3, #0
   5277a:	6023      	str	r3, [r4, #0]
	return list->tail;
   5277c:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   52780:	b963      	cbnz	r3, 5279c <submit_to_queue_locked+0xa0>
	list->head = node;
   52782:	e9c5 4432 	strd	r4, r4, [r5, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   52786:	4628      	mov	r0, r5
   52788:	f008 f8fa 	bl	5a980 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   5278c:	68e3      	ldr	r3, [r4, #12]
   5278e:	f043 0304 	orr.w	r3, r3, #4
   52792:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   52794:	683b      	ldr	r3, [r7, #0]
   52796:	60a3      	str	r3, [r4, #8]
}
   52798:	4630      	mov	r0, r6
   5279a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   5279c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   5279e:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
}
   527a2:	e7f0      	b.n	52786 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   527a4:	f06f 0615 	mvn.w	r6, #21
   527a8:	e7cd      	b.n	52746 <submit_to_queue_locked+0x4a>
   527aa:	bf00      	nop
   527ac:	2001bc78 	.word	0x2001bc78

000527b0 <k_work_submit>:
{
   527b0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   527b2:	4801      	ldr	r0, [pc, #4]	; (527b8 <k_work_submit+0x8>)
   527b4:	f008 b927 	b.w	5aa06 <k_work_submit_to_queue>
   527b8:	2001af88 	.word	0x2001af88

000527bc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   527bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   527be:	4604      	mov	r4, r0
	list->head = NULL;
   527c0:	2000      	movs	r0, #0
   527c2:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   527c4:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   527c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   527ca:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   527ce:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   527d2:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   527d6:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   527da:	b31d      	cbz	r5, 52824 <k_work_queue_start+0x68>
   527dc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   527de:	2800      	cmp	r0, #0
   527e0:	f240 1001 	movw	r0, #257	; 0x101
   527e4:	bf08      	it	eq
   527e6:	2001      	moveq	r0, #1
	*flagp = flags;
   527e8:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   527ec:	2000      	movs	r0, #0
   527ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   527f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   527f6:	e9cd 3003 	strd	r3, r0, [sp, #12]
   527fa:	e9cd 0001 	strd	r0, r0, [sp, #4]
   527fe:	e9cd 6706 	strd	r6, r7, [sp, #24]
   52802:	4620      	mov	r0, r4
   52804:	4b08      	ldr	r3, [pc, #32]	; (52828 <k_work_queue_start+0x6c>)
   52806:	9400      	str	r4, [sp, #0]
   52808:	f7ff fd9c 	bl	52344 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   5280c:	b125      	cbz	r5, 52818 <k_work_queue_start+0x5c>
   5280e:	6829      	ldr	r1, [r5, #0]
   52810:	b111      	cbz	r1, 52818 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   52812:	4620      	mov	r0, r4
   52814:	f007 fff1 	bl	5a7fa <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   52818:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   5281a:	b009      	add	sp, #36	; 0x24
   5281c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   52820:	f007 bff0 	b.w	5a804 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   52824:	2001      	movs	r0, #1
   52826:	e7df      	b.n	527e8 <k_work_queue_start+0x2c>
   52828:	00041cc9 	.word	0x00041cc9

0005282c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   5282c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   5282e:	9001      	str	r0, [sp, #4]
   52830:	4608      	mov	r0, r1
	__asm__ volatile(
   52832:	f04f 0120 	mov.w	r1, #32
   52836:	f3ef 8411 	mrs	r4, BASEPRI
   5283a:	f381 8812 	msr	BASEPRI_MAX, r1
   5283e:	f3bf 8f6f 	isb	sy
	return *flagp;
   52842:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   52844:	f011 0f0e 	tst.w	r1, #14
   52848:	d116      	bne.n	52878 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   5284a:	ea53 0502 	orrs.w	r5, r3, r2
   5284e:	d108      	bne.n	52862 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   52850:	a901      	add	r1, sp, #4
   52852:	f7ff ff53 	bl	526fc <submit_to_queue_locked>
	__asm__ volatile(
   52856:	f384 8811 	msr	BASEPRI, r4
   5285a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   5285e:	b003      	add	sp, #12
   52860:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   52862:	f041 0108 	orr.w	r1, r1, #8
   52866:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   52868:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   5286a:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   5286c:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   5286e:	4903      	ldr	r1, [pc, #12]	; (5287c <k_work_schedule_for_queue+0x50>)
   52870:	f000 fc02 	bl	53078 <z_add_timeout>
	return ret;
   52874:	2001      	movs	r0, #1
   52876:	e7ee      	b.n	52856 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   52878:	2000      	movs	r0, #0
   5287a:	e7ec      	b.n	52856 <k_work_schedule_for_queue+0x2a>
   5287c:	0005a98f 	.word	0x0005a98f

00052880 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   52880:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   52882:	4801      	ldr	r0, [pc, #4]	; (52888 <k_work_schedule+0x8>)
   52884:	f7ff bfd2 	b.w	5282c <k_work_schedule_for_queue>
   52888:	2001af88 	.word	0x2001af88

0005288c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   5288c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   5288e:	460c      	mov	r4, r1
   52890:	4616      	mov	r6, r2
   52892:	461d      	mov	r5, r3
   52894:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   52896:	f04f 0320 	mov.w	r3, #32
   5289a:	f3ef 8711 	mrs	r7, BASEPRI
   5289e:	f383 8812 	msr	BASEPRI_MAX, r3
   528a2:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   528a6:	4608      	mov	r0, r1
   528a8:	f008 f85c 	bl	5a964 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   528ac:	ea55 0306 	orrs.w	r3, r5, r6
   528b0:	d109      	bne.n	528c6 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   528b2:	4620      	mov	r0, r4
   528b4:	a901      	add	r1, sp, #4
   528b6:	f7ff ff21 	bl	526fc <submit_to_queue_locked>
	__asm__ volatile(
   528ba:	f387 8811 	msr	BASEPRI, r7
   528be:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   528c2:	b003      	add	sp, #12
   528c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   528c6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   528c8:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   528cc:	f043 0308 	orr.w	r3, r3, #8
   528d0:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   528d2:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   528d4:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   528d6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   528d8:	4902      	ldr	r1, [pc, #8]	; (528e4 <k_work_reschedule_for_queue+0x58>)
   528da:	462b      	mov	r3, r5
   528dc:	f000 fbcc 	bl	53078 <z_add_timeout>
	return ret;
   528e0:	2001      	movs	r0, #1
   528e2:	e7ea      	b.n	528ba <k_work_reschedule_for_queue+0x2e>
   528e4:	0005a98f 	.word	0x0005a98f

000528e8 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   528e8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   528ea:	4801      	ldr	r0, [pc, #4]	; (528f0 <k_work_reschedule+0x8>)
   528ec:	f7ff bfce 	b.w	5288c <k_work_reschedule_for_queue>
   528f0:	2001af88 	.word	0x2001af88

000528f4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   528f4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   528f6:	4d07      	ldr	r5, [pc, #28]	; (52914 <z_reset_time_slice+0x20>)
   528f8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   528fa:	b154      	cbz	r4, 52912 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   528fc:	f7f6 ff9a 	bl	49834 <sys_clock_elapsed>
   52900:	4b05      	ldr	r3, [pc, #20]	; (52918 <z_reset_time_slice+0x24>)
   52902:	4404      	add	r4, r0
   52904:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   52906:	6828      	ldr	r0, [r5, #0]
   52908:	2100      	movs	r1, #0
	}
}
   5290a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   5290e:	f008 b9a2 	b.w	5ac56 <z_set_timeout_expiry>
}
   52912:	bd38      	pop	{r3, r4, r5, pc}
   52914:	2001bcb8 	.word	0x2001bcb8
   52918:	2001bc78 	.word	0x2001bc78

0005291c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   5291c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   5291e:	4d0d      	ldr	r5, [pc, #52]	; (52954 <update_cache+0x38>)
   52920:	462b      	mov	r3, r5
   52922:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52926:	429c      	cmp	r4, r3
   52928:	d000      	beq.n	5292c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   5292a:	b904      	cbnz	r4, 5292e <update_cache+0x12>
   5292c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   5292e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   52930:	b938      	cbnz	r0, 52942 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   52932:	7b5a      	ldrb	r2, [r3, #13]
   52934:	06d2      	lsls	r2, r2, #27
   52936:	d104      	bne.n	52942 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   52938:	69a2      	ldr	r2, [r4, #24]
   5293a:	b912      	cbnz	r2, 52942 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   5293c:	89da      	ldrh	r2, [r3, #14]
   5293e:	2a7f      	cmp	r2, #127	; 0x7f
   52940:	d805      	bhi.n	5294e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   52942:	429c      	cmp	r4, r3
   52944:	d002      	beq.n	5294c <update_cache+0x30>
			z_reset_time_slice(thread);
   52946:	4620      	mov	r0, r4
   52948:	f7ff ffd4 	bl	528f4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   5294c:	4623      	mov	r3, r4
   5294e:	622b      	str	r3, [r5, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   52950:	bd38      	pop	{r3, r4, r5, pc}
   52952:	bf00      	nop
   52954:	2001bc78 	.word	0x2001bc78

00052958 <move_thread_to_end_of_prio_q>:
{
   52958:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   5295a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   5295e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   52960:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   52962:	7b43      	ldrb	r3, [r0, #13]
   52964:	da04      	bge.n	52970 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   5296a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   5296c:	f008 f868 	bl	5aa40 <sys_dlist_remove>
	return list->head == list;
   52970:	4a15      	ldr	r2, [pc, #84]	; (529c8 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   52972:	7b4b      	ldrb	r3, [r1, #13]
   52974:	4610      	mov	r0, r2
   52976:	f063 037f 	orn	r3, r3, #127	; 0x7f
   5297a:	734b      	strb	r3, [r1, #13]
   5297c:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return (node == list->tail) ? NULL : node->next;
   52980:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52982:	4283      	cmp	r3, r0
   52984:	bf08      	it	eq
   52986:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   52988:	b923      	cbnz	r3, 52994 <move_thread_to_end_of_prio_q+0x3c>
	node->prev = tail;
   5298a:	e9c1 0400 	strd	r0, r4, [r1]
	tail->next = node;
   5298e:	6021      	str	r1, [r4, #0]
	list->tail = node;
   52990:	6291      	str	r1, [r2, #40]	; 0x28
}
   52992:	e00c      	b.n	529ae <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   52994:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   52998:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   5299c:	42b5      	cmp	r5, r6
   5299e:	d00e      	beq.n	529be <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   529a0:	42ae      	cmp	r6, r5
   529a2:	dd0c      	ble.n	529be <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   529a4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   529a6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   529aa:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   529ac:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   529ae:	6890      	ldr	r0, [r2, #8]
}
   529b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   529b4:	1a43      	subs	r3, r0, r1
   529b6:	4258      	negs	r0, r3
   529b8:	4158      	adcs	r0, r3
   529ba:	f7ff bfaf 	b.w	5291c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   529be:	429c      	cmp	r4, r3
   529c0:	d0e3      	beq.n	5298a <move_thread_to_end_of_prio_q+0x32>
   529c2:	681b      	ldr	r3, [r3, #0]
   529c4:	e7e0      	b.n	52988 <move_thread_to_end_of_prio_q+0x30>
   529c6:	bf00      	nop
   529c8:	2001bc78 	.word	0x2001bc78

000529cc <ready_thread>:
{
   529cc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   529ce:	f990 300d 	ldrsb.w	r3, [r0, #13]
   529d2:	7b42      	ldrb	r2, [r0, #13]
   529d4:	2b00      	cmp	r3, #0
   529d6:	db29      	blt.n	52a2c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   529d8:	06d3      	lsls	r3, r2, #27
   529da:	d127      	bne.n	52a2c <ready_thread+0x60>
	return node->next != NULL;
   529dc:	6983      	ldr	r3, [r0, #24]
   529de:	bb2b      	cbnz	r3, 52a2c <ready_thread+0x60>
	return list->head == list;
   529e0:	4913      	ldr	r1, [pc, #76]	; (52a30 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   529e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   529e6:	7342      	strb	r2, [r0, #13]
   529e8:	460a      	mov	r2, r1
   529ea:	f852 4f24 	ldr.w	r4, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   529ee:	4294      	cmp	r4, r2
   529f0:	bf18      	it	ne
   529f2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   529f4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   529f6:	b923      	cbnz	r3, 52a02 <ready_thread+0x36>
	node->prev = tail;
   529f8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   529fc:	6020      	str	r0, [r4, #0]
	list->tail = node;
   529fe:	6288      	str	r0, [r1, #40]	; 0x28
}
   52a00:	e00c      	b.n	52a1c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   52a02:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   52a06:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   52a0a:	42b5      	cmp	r5, r6
   52a0c:	d00a      	beq.n	52a24 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   52a0e:	42ae      	cmp	r6, r5
   52a10:	dd08      	ble.n	52a24 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   52a12:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   52a14:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   52a18:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   52a1a:	6058      	str	r0, [r3, #4]
		update_cache(0);
   52a1c:	2000      	movs	r0, #0
}
   52a1e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   52a20:	f7ff bf7c 	b.w	5291c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   52a24:	42a3      	cmp	r3, r4
   52a26:	d0e7      	beq.n	529f8 <ready_thread+0x2c>
   52a28:	681b      	ldr	r3, [r3, #0]
   52a2a:	e7e4      	b.n	529f6 <ready_thread+0x2a>
}
   52a2c:	bc70      	pop	{r4, r5, r6}
   52a2e:	4770      	bx	lr
   52a30:	2001bc78 	.word	0x2001bc78

00052a34 <unready_thread>:
{
   52a34:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   52a36:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   52a3a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   52a3c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   52a3e:	7b43      	ldrb	r3, [r0, #13]
   52a40:	da04      	bge.n	52a4c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   52a46:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   52a48:	f007 fffa 	bl	5aa40 <sys_dlist_remove>
	update_cache(thread == _current);
   52a4c:	4b04      	ldr	r3, [pc, #16]	; (52a60 <unready_thread+0x2c>)
   52a4e:	6898      	ldr	r0, [r3, #8]
   52a50:	1a43      	subs	r3, r0, r1
   52a52:	4258      	negs	r0, r3
   52a54:	4158      	adcs	r0, r3
}
   52a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   52a5a:	f7ff bf5f 	b.w	5291c <update_cache>
   52a5e:	bf00      	nop
   52a60:	2001bc78 	.word	0x2001bc78

00052a64 <pend_locked>:
{
   52a64:	b570      	push	{r4, r5, r6, lr}
   52a66:	4615      	mov	r5, r2
   52a68:	461c      	mov	r4, r3
   52a6a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   52a6c:	f008 f81c 	bl	5aaa8 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   52a70:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   52a74:	bf08      	it	eq
   52a76:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   52a7a:	d008      	beq.n	52a8e <pend_locked+0x2a>
   52a7c:	462a      	mov	r2, r5
   52a7e:	4623      	mov	r3, r4
   52a80:	f106 0018 	add.w	r0, r6, #24
   52a84:	4902      	ldr	r1, [pc, #8]	; (52a90 <pend_locked+0x2c>)
}
   52a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   52a8a:	f000 baf5 	b.w	53078 <z_add_timeout>
   52a8e:	bd70      	pop	{r4, r5, r6, pc}
   52a90:	0005aa65 	.word	0x0005aa65

00052a94 <k_sched_time_slice_set>:
{
   52a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   52a96:	4604      	mov	r4, r0
   52a98:	460d      	mov	r5, r1
	__asm__ volatile(
   52a9a:	f04f 0320 	mov.w	r3, #32
   52a9e:	f3ef 8711 	mrs	r7, BASEPRI
   52aa2:	f383 8812 	msr	BASEPRI_MAX, r3
   52aa6:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   52aaa:	2600      	movs	r6, #0
   52aac:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   52ab0:	f240 30e7 	movw	r0, #999	; 0x3e7
   52ab4:	4631      	mov	r1, r6
   52ab6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   52aba:	2300      	movs	r3, #0
   52abc:	fbe4 010c 	umlal	r0, r1, r4, ip
   52ac0:	f7ee f826 	bl	40b10 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   52ac4:	42b4      	cmp	r4, r6
   52ac6:	dd02      	ble.n	52ace <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   52ac8:	2802      	cmp	r0, #2
   52aca:	bfb8      	it	lt
   52acc:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   52ace:	4a07      	ldr	r2, [pc, #28]	; (52aec <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   52ad0:	4b07      	ldr	r3, [pc, #28]	; (52af0 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   52ad2:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   52ad4:	4a07      	ldr	r2, [pc, #28]	; (52af4 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   52ad6:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   52ad8:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   52ada:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   52adc:	f7ff ff0a 	bl	528f4 <z_reset_time_slice>
	__asm__ volatile(
   52ae0:	f387 8811 	msr	BASEPRI, r7
   52ae4:	f3bf 8f6f 	isb	sy
}
   52ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   52aea:	bf00      	nop
   52aec:	2001bcb8 	.word	0x2001bcb8
   52af0:	2001bc78 	.word	0x2001bc78
   52af4:	2001bcb4 	.word	0x2001bcb4

00052af8 <z_time_slice>:
{
   52af8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   52afa:	f04f 0320 	mov.w	r3, #32
   52afe:	f3ef 8511 	mrs	r5, BASEPRI
   52b02:	f383 8812 	msr	BASEPRI_MAX, r3
   52b06:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   52b0a:	4b17      	ldr	r3, [pc, #92]	; (52b68 <z_time_slice+0x70>)
   52b0c:	4a17      	ldr	r2, [pc, #92]	; (52b6c <z_time_slice+0x74>)
   52b0e:	689c      	ldr	r4, [r3, #8]
   52b10:	6811      	ldr	r1, [r2, #0]
   52b12:	428c      	cmp	r4, r1
   52b14:	d107      	bne.n	52b26 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   52b16:	4620      	mov	r0, r4
   52b18:	f7ff feec 	bl	528f4 <z_reset_time_slice>
	__asm__ volatile(
   52b1c:	f385 8811 	msr	BASEPRI, r5
   52b20:	f3bf 8f6f 	isb	sy
}
   52b24:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   52b26:	2100      	movs	r1, #0
   52b28:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   52b2a:	4a11      	ldr	r2, [pc, #68]	; (52b70 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   52b2c:	6812      	ldr	r2, [r2, #0]
   52b2e:	b1c2      	cbz	r2, 52b62 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   52b30:	89e2      	ldrh	r2, [r4, #14]
   52b32:	2a7f      	cmp	r2, #127	; 0x7f
   52b34:	d815      	bhi.n	52b62 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   52b36:	7b62      	ldrb	r2, [r4, #13]
   52b38:	06d2      	lsls	r2, r2, #27
   52b3a:	d112      	bne.n	52b62 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   52b3c:	4a0d      	ldr	r2, [pc, #52]	; (52b74 <z_time_slice+0x7c>)
   52b3e:	f994 100e 	ldrsb.w	r1, [r4, #14]
   52b42:	6812      	ldr	r2, [r2, #0]
   52b44:	4291      	cmp	r1, r2
   52b46:	db0c      	blt.n	52b62 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   52b48:	4a0b      	ldr	r2, [pc, #44]	; (52b78 <z_time_slice+0x80>)
   52b4a:	4294      	cmp	r4, r2
   52b4c:	d009      	beq.n	52b62 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   52b4e:	691a      	ldr	r2, [r3, #16]
   52b50:	4282      	cmp	r2, r0
   52b52:	dc03      	bgt.n	52b5c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   52b54:	4620      	mov	r0, r4
   52b56:	f7ff feff 	bl	52958 <move_thread_to_end_of_prio_q>
   52b5a:	e7dc      	b.n	52b16 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   52b5c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   52b5e:	611a      	str	r2, [r3, #16]
   52b60:	e7dc      	b.n	52b1c <z_time_slice+0x24>
   52b62:	2200      	movs	r2, #0
   52b64:	e7fb      	b.n	52b5e <z_time_slice+0x66>
   52b66:	bf00      	nop
   52b68:	2001bc78 	.word	0x2001bc78
   52b6c:	2001bcb0 	.word	0x2001bcb0
   52b70:	2001bcb8 	.word	0x2001bcb8
   52b74:	2001bcb4 	.word	0x2001bcb4
   52b78:	2001adf0 	.word	0x2001adf0

00052b7c <z_pend_curr>:
{
   52b7c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   52b7e:	480c      	ldr	r0, [pc, #48]	; (52bb0 <z_pend_curr+0x34>)
   52b80:	4d0c      	ldr	r5, [pc, #48]	; (52bb4 <z_pend_curr+0x38>)
   52b82:	6886      	ldr	r6, [r0, #8]
{
   52b84:	460c      	mov	r4, r1
	pending_current = _current;
   52b86:	602e      	str	r6, [r5, #0]
{
   52b88:	4611      	mov	r1, r2
   52b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   52b8e:	f04f 0620 	mov.w	r6, #32
   52b92:	f3ef 8511 	mrs	r5, BASEPRI
   52b96:	f386 8812 	msr	BASEPRI_MAX, r6
   52b9a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   52b9e:	6880      	ldr	r0, [r0, #8]
   52ba0:	f7ff ff60 	bl	52a64 <pend_locked>
	ret = arch_swap(key);
   52ba4:	4620      	mov	r0, r4
}
   52ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   52baa:	f7f3 b949 	b.w	45e40 <arch_swap>
   52bae:	bf00      	nop
   52bb0:	2001bc78 	.word	0x2001bc78
   52bb4:	2001bcb0 	.word	0x2001bcb0

00052bb8 <z_set_prio>:
{
   52bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   52bba:	4604      	mov	r4, r0
   52bbc:	f04f 0320 	mov.w	r3, #32
   52bc0:	f3ef 8611 	mrs	r6, BASEPRI
   52bc4:	f383 8812 	msr	BASEPRI_MAX, r3
   52bc8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   52bcc:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   52bce:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   52bd0:	06da      	lsls	r2, r3, #27
   52bd2:	d119      	bne.n	52c08 <z_set_prio+0x50>
	return node->next != NULL;
   52bd4:	6985      	ldr	r5, [r0, #24]
   52bd6:	b9bd      	cbnz	r5, 52c08 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   52bdc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   52bde:	f007 ff2f 	bl	5aa40 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   52be2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   52be4:	4a16      	ldr	r2, [pc, #88]	; (52c40 <z_set_prio+0x88>)
   52be6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   52bea:	7343      	strb	r3, [r0, #13]
   52bec:	4613      	mov	r3, r2
				thread->base.prio = prio;
   52bee:	7381      	strb	r1, [r0, #14]
   52bf0:	f853 0f24 	ldr.w	r0, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52bf4:	4298      	cmp	r0, r3
   52bf6:	bf18      	it	ne
   52bf8:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   52bfa:	6a90      	ldr	r0, [r2, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   52bfc:	b95d      	cbnz	r5, 52c16 <z_set_prio+0x5e>
	node->prev = tail;
   52bfe:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   52c02:	6004      	str	r4, [r0, #0]
	list->tail = node;
   52c04:	6294      	str	r4, [r2, #40]	; 0x28
}
   52c06:	e011      	b.n	52c2c <z_set_prio+0x74>
   52c08:	2000      	movs	r0, #0
			thread->base.prio = prio;
   52c0a:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   52c0c:	f386 8811 	msr	BASEPRI, r6
   52c10:	f3bf 8f6f 	isb	sy
}
   52c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   52c16:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   52c1a:	42b9      	cmp	r1, r7
   52c1c:	d00b      	beq.n	52c36 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   52c1e:	428f      	cmp	r7, r1
   52c20:	dd09      	ble.n	52c36 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   52c22:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   52c24:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   52c28:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   52c2a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   52c2c:	2001      	movs	r0, #1
   52c2e:	f7ff fe75 	bl	5291c <update_cache>
   52c32:	2001      	movs	r0, #1
   52c34:	e7ea      	b.n	52c0c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   52c36:	42a8      	cmp	r0, r5
   52c38:	d0e1      	beq.n	52bfe <z_set_prio+0x46>
   52c3a:	682d      	ldr	r5, [r5, #0]
   52c3c:	e7de      	b.n	52bfc <z_set_prio+0x44>
   52c3e:	bf00      	nop
   52c40:	2001bc78 	.word	0x2001bc78

00052c44 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   52c44:	b949      	cbnz	r1, 52c5a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   52c46:	f3ef 8005 	mrs	r0, IPSR
   52c4a:	b930      	cbnz	r0, 52c5a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   52c4c:	4b05      	ldr	r3, [pc, #20]	; (52c64 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   52c4e:	6a1a      	ldr	r2, [r3, #32]
   52c50:	689b      	ldr	r3, [r3, #8]
   52c52:	429a      	cmp	r2, r3
   52c54:	d001      	beq.n	52c5a <z_reschedule+0x16>
   52c56:	f7f3 b8f3 	b.w	45e40 <arch_swap>
   52c5a:	f381 8811 	msr	BASEPRI, r1
   52c5e:	f3bf 8f6f 	isb	sy
}
   52c62:	4770      	bx	lr
   52c64:	2001bc78 	.word	0x2001bc78

00052c68 <z_sched_start>:
{
   52c68:	b510      	push	{r4, lr}
	__asm__ volatile(
   52c6a:	f04f 0220 	mov.w	r2, #32
   52c6e:	f3ef 8411 	mrs	r4, BASEPRI
   52c72:	f382 8812 	msr	BASEPRI_MAX, r2
   52c76:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   52c7a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   52c7c:	0751      	lsls	r1, r2, #29
   52c7e:	d404      	bmi.n	52c8a <z_sched_start+0x22>
	__asm__ volatile(
   52c80:	f384 8811 	msr	BASEPRI, r4
   52c84:	f3bf 8f6f 	isb	sy
}
   52c88:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   52c8a:	f022 0204 	bic.w	r2, r2, #4
   52c8e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   52c90:	f7ff fe9c 	bl	529cc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   52c94:	4621      	mov	r1, r4
}
   52c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   52c9a:	4801      	ldr	r0, [pc, #4]	; (52ca0 <z_sched_start+0x38>)
   52c9c:	f7ff bfd2 	b.w	52c44 <z_reschedule>
   52ca0:	2002083e 	.word	0x2002083e

00052ca4 <z_impl_k_thread_suspend>:
{
   52ca4:	b570      	push	{r4, r5, r6, lr}
   52ca6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   52ca8:	3018      	adds	r0, #24
   52caa:	f007 ffae 	bl	5ac0a <z_abort_timeout>
	__asm__ volatile(
   52cae:	f04f 0320 	mov.w	r3, #32
   52cb2:	f3ef 8611 	mrs	r6, BASEPRI
   52cb6:	f383 8812 	msr	BASEPRI_MAX, r3
   52cba:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   52cbe:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   52cc2:	7b63      	ldrb	r3, [r4, #13]
   52cc4:	2a00      	cmp	r2, #0
   52cc6:	da05      	bge.n	52cd4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   52ccc:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52cce:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   52cd0:	f007 feb6 	bl	5aa40 <sys_dlist_remove>
		update_cache(thread == _current);
   52cd4:	4d0b      	ldr	r5, [pc, #44]	; (52d04 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   52cd6:	7b63      	ldrb	r3, [r4, #13]
   52cd8:	68a8      	ldr	r0, [r5, #8]
   52cda:	f043 0310 	orr.w	r3, r3, #16
   52cde:	7363      	strb	r3, [r4, #13]
   52ce0:	1b03      	subs	r3, r0, r4
   52ce2:	4258      	negs	r0, r3
   52ce4:	4158      	adcs	r0, r3
   52ce6:	f7ff fe19 	bl	5291c <update_cache>
	__asm__ volatile(
   52cea:	f386 8811 	msr	BASEPRI, r6
   52cee:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   52cf2:	68ab      	ldr	r3, [r5, #8]
   52cf4:	42a3      	cmp	r3, r4
   52cf6:	d103      	bne.n	52d00 <z_impl_k_thread_suspend+0x5c>
}
   52cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   52cfc:	f007 bf48 	b.w	5ab90 <z_reschedule_unlocked>
}
   52d00:	bd70      	pop	{r4, r5, r6, pc}
   52d02:	bf00      	nop
   52d04:	2001bc78 	.word	0x2001bc78

00052d08 <k_sched_lock>:
	__asm__ volatile(
   52d08:	f04f 0320 	mov.w	r3, #32
   52d0c:	f3ef 8111 	mrs	r1, BASEPRI
   52d10:	f383 8812 	msr	BASEPRI_MAX, r3
   52d14:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   52d18:	4b04      	ldr	r3, [pc, #16]	; (52d2c <k_sched_lock+0x24>)
   52d1a:	689a      	ldr	r2, [r3, #8]
   52d1c:	7bd3      	ldrb	r3, [r2, #15]
   52d1e:	3b01      	subs	r3, #1
   52d20:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   52d22:	f381 8811 	msr	BASEPRI, r1
   52d26:	f3bf 8f6f 	isb	sy
}
   52d2a:	4770      	bx	lr
   52d2c:	2001bc78 	.word	0x2001bc78

00052d30 <k_sched_unlock>:
{
   52d30:	b510      	push	{r4, lr}
	__asm__ volatile(
   52d32:	f04f 0320 	mov.w	r3, #32
   52d36:	f3ef 8411 	mrs	r4, BASEPRI
   52d3a:	f383 8812 	msr	BASEPRI_MAX, r3
   52d3e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   52d42:	4b08      	ldr	r3, [pc, #32]	; (52d64 <k_sched_unlock+0x34>)
		update_cache(0);
   52d44:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   52d46:	689a      	ldr	r2, [r3, #8]
   52d48:	7bd3      	ldrb	r3, [r2, #15]
   52d4a:	3301      	adds	r3, #1
   52d4c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   52d4e:	f7ff fde5 	bl	5291c <update_cache>
	__asm__ volatile(
   52d52:	f384 8811 	msr	BASEPRI, r4
   52d56:	f3bf 8f6f 	isb	sy
}
   52d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   52d5e:	f007 bf17 	b.w	5ab90 <z_reschedule_unlocked>
   52d62:	bf00      	nop
   52d64:	2001bc78 	.word	0x2001bc78

00052d68 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   52d68:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   52d6a:	4b04      	ldr	r3, [pc, #16]	; (52d7c <z_sched_init+0x14>)
   52d6c:	4608      	mov	r0, r1
   52d6e:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
   52d72:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
   52d76:	f7ff be8d 	b.w	52a94 <k_sched_time_slice_set>
   52d7a:	bf00      	nop
   52d7c:	2001bc78 	.word	0x2001bc78

00052d80 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   52d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   52d82:	f04f 0320 	mov.w	r3, #32
   52d86:	f3ef 8511 	mrs	r5, BASEPRI
   52d8a:	f383 8812 	msr	BASEPRI_MAX, r3
   52d8e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   52d92:	4919      	ldr	r1, [pc, #100]	; (52df8 <z_impl_k_yield+0x78>)
   52d94:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52d96:	7b43      	ldrb	r3, [r0, #13]
   52d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   52d9c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   52d9e:	f007 fe4f 	bl	5aa40 <sys_dlist_remove>
	return list->head == list;
   52da2:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   52da4:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   52da6:	7b5a      	ldrb	r2, [r3, #13]
   52da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   52dac:	735a      	strb	r2, [r3, #13]
   52dae:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return (node == list->tail) ? NULL : node->next;
   52db2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52db4:	4282      	cmp	r2, r0
   52db6:	bf08      	it	eq
   52db8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   52dba:	b922      	cbnz	r2, 52dc6 <z_impl_k_yield+0x46>
	node->prev = tail;
   52dbc:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   52dc0:	6023      	str	r3, [r4, #0]
	list->tail = node;
   52dc2:	628b      	str	r3, [r1, #40]	; 0x28
}
   52dc4:	e00c      	b.n	52de0 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   52dc6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   52dca:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   52dce:	42be      	cmp	r6, r7
   52dd0:	d00e      	beq.n	52df0 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   52dd2:	42b7      	cmp	r7, r6
   52dd4:	dd0c      	ble.n	52df0 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   52dd6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   52dd8:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   52ddc:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   52dde:	6053      	str	r3, [r2, #4]
	update_cache(1);
   52de0:	2001      	movs	r0, #1
   52de2:	f7ff fd9b 	bl	5291c <update_cache>
   52de6:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   52de8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   52dec:	f7f3 b828 	b.w	45e40 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   52df0:	42a2      	cmp	r2, r4
   52df2:	d0e3      	beq.n	52dbc <z_impl_k_yield+0x3c>
   52df4:	6812      	ldr	r2, [r2, #0]
   52df6:	e7e0      	b.n	52dba <z_impl_k_yield+0x3a>
   52df8:	2001bc78 	.word	0x2001bc78

00052dfc <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   52dfc:	ea50 0301 	orrs.w	r3, r0, r1
{
   52e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   52e04:	4605      	mov	r5, r0
   52e06:	460e      	mov	r6, r1
	if (ticks == 0) {
   52e08:	d103      	bne.n	52e12 <z_tick_sleep+0x16>
	z_impl_k_yield();
   52e0a:	f7ff ffb9 	bl	52d80 <z_impl_k_yield>
		k_yield();
		return 0;
   52e0e:	2000      	movs	r0, #0
   52e10:	e02c      	b.n	52e6c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   52e12:	1c83      	adds	r3, r0, #2
   52e14:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   52e18:	db2a      	blt.n	52e70 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   52e1a:	f007 ff38 	bl	5ac8e <sys_clock_tick_get_32>
   52e1e:	1944      	adds	r4, r0, r5
   52e20:	f04f 0320 	mov.w	r3, #32
   52e24:	f3ef 8811 	mrs	r8, BASEPRI
   52e28:	f383 8812 	msr	BASEPRI_MAX, r3
   52e2c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   52e30:	4f11      	ldr	r7, [pc, #68]	; (52e78 <z_tick_sleep+0x7c>)
   52e32:	4b12      	ldr	r3, [pc, #72]	; (52e7c <z_tick_sleep+0x80>)
   52e34:	68b8      	ldr	r0, [r7, #8]
   52e36:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   52e38:	f7ff fdfc 	bl	52a34 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   52e3c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   52e3e:	4910      	ldr	r1, [pc, #64]	; (52e80 <z_tick_sleep+0x84>)
   52e40:	462a      	mov	r2, r5
   52e42:	4633      	mov	r3, r6
   52e44:	3018      	adds	r0, #24
   52e46:	f000 f917 	bl	53078 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   52e4a:	68ba      	ldr	r2, [r7, #8]
   52e4c:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   52e4e:	7b53      	ldrb	r3, [r2, #13]
   52e50:	f043 0310 	orr.w	r3, r3, #16
   52e54:	7353      	strb	r3, [r2, #13]
   52e56:	f7f2 fff3 	bl	45e40 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   52e5a:	f007 ff18 	bl	5ac8e <sys_clock_tick_get_32>
   52e5e:	1a20      	subs	r0, r4, r0
   52e60:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   52e64:	2801      	cmp	r0, #1
   52e66:	f173 0300 	sbcs.w	r3, r3, #0
   52e6a:	dbd0      	blt.n	52e0e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   52e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   52e70:	f06f 0401 	mvn.w	r4, #1
   52e74:	1a24      	subs	r4, r4, r0
   52e76:	e7d3      	b.n	52e20 <z_tick_sleep+0x24>
   52e78:	2001bc78 	.word	0x2001bc78
   52e7c:	2001bcb0 	.word	0x2001bcb0
   52e80:	0005aa65 	.word	0x0005aa65

00052e84 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   52e84:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   52e88:	bf08      	it	eq
   52e8a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   52e8e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   52e90:	d106      	bne.n	52ea0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   52e92:	4b08      	ldr	r3, [pc, #32]	; (52eb4 <z_impl_k_sleep+0x30>)
   52e94:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   52e96:	f7ff ff05 	bl	52ca4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   52e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   52e9e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   52ea0:	f7ff ffac 	bl	52dfc <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   52ea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   52ea8:	fb80 0303 	smull	r0, r3, r0, r3
   52eac:	0bc0      	lsrs	r0, r0, #15
   52eae:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   52eb2:	e7f4      	b.n	52e9e <z_impl_k_sleep+0x1a>
   52eb4:	2001bc78 	.word	0x2001bc78

00052eb8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   52eb8:	4b01      	ldr	r3, [pc, #4]	; (52ec0 <z_impl_z_current_get+0x8>)
   52eba:	6898      	ldr	r0, [r3, #8]
   52ebc:	4770      	bx	lr
   52ebe:	bf00      	nop
   52ec0:	2001bc78 	.word	0x2001bc78

00052ec4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   52ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   52ec8:	4604      	mov	r4, r0
   52eca:	f04f 0320 	mov.w	r3, #32
   52ece:	f3ef 8611 	mrs	r6, BASEPRI
   52ed2:	f383 8812 	msr	BASEPRI_MAX, r3
   52ed6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   52eda:	7b03      	ldrb	r3, [r0, #12]
   52edc:	07d9      	lsls	r1, r3, #31
   52ede:	d50b      	bpl.n	52ef8 <z_thread_abort+0x34>
	__asm__ volatile(
   52ee0:	f386 8811 	msr	BASEPRI, r6
   52ee4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   52ee8:	4040      	eors	r0, r0
   52eea:	f380 8811 	msr	BASEPRI, r0
   52eee:	f04f 0004 	mov.w	r0, #4
   52ef2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   52ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   52ef8:	7b43      	ldrb	r3, [r0, #13]
   52efa:	071a      	lsls	r2, r3, #28
   52efc:	d504      	bpl.n	52f08 <z_thread_abort+0x44>
   52efe:	f386 8811 	msr	BASEPRI, r6
   52f02:	f3bf 8f6f 	isb	sy
   52f06:	e7f5      	b.n	52ef4 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   52f08:	f023 0220 	bic.w	r2, r3, #32
   52f0c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   52f10:	09d2      	lsrs	r2, r2, #7
   52f12:	d120      	bne.n	52f56 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   52f14:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   52f16:	68a3      	ldr	r3, [r4, #8]
   52f18:	b113      	cbz	r3, 52f20 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   52f1a:	4620      	mov	r0, r4
   52f1c:	f007 fd98 	bl	5aa50 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   52f20:	f104 0018 	add.w	r0, r4, #24
   52f24:	f007 fe71 	bl	5ac0a <z_abort_timeout>
   52f28:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   52f2c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   52f30:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52f32:	42bd      	cmp	r5, r7
   52f34:	d000      	beq.n	52f38 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   52f36:	b9b5      	cbnz	r5, 52f66 <z_thread_abort+0xa2>
		update_cache(1);
   52f38:	2001      	movs	r0, #1
   52f3a:	f7ff fcef 	bl	5291c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   52f3e:	4b10      	ldr	r3, [pc, #64]	; (52f80 <z_thread_abort+0xbc>)
   52f40:	689b      	ldr	r3, [r3, #8]
   52f42:	42a3      	cmp	r3, r4
   52f44:	d1db      	bne.n	52efe <z_thread_abort+0x3a>
   52f46:	f3ef 8305 	mrs	r3, IPSR
   52f4a:	2b00      	cmp	r3, #0
   52f4c:	d1d7      	bne.n	52efe <z_thread_abort+0x3a>
   52f4e:	4630      	mov	r0, r6
   52f50:	f7f2 ff76 	bl	45e40 <arch_swap>
	return ret;
   52f54:	e7d3      	b.n	52efe <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52f56:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   52f5a:	f043 0308 	orr.w	r3, r3, #8
   52f5e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   52f60:	f007 fd6e 	bl	5aa40 <sys_dlist_remove>
}
   52f64:	e7d7      	b.n	52f16 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   52f66:	4628      	mov	r0, r5
   52f68:	f007 fd72 	bl	5aa50 <unpend_thread_no_timeout>
   52f6c:	f105 0018 	add.w	r0, r5, #24
   52f70:	f007 fe4b 	bl	5ac0a <z_abort_timeout>
		ready_thread(thread);
   52f74:	4628      	mov	r0, r5
   52f76:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   52f7a:	f7ff fd27 	bl	529cc <ready_thread>
   52f7e:	e7d7      	b.n	52f30 <z_thread_abort+0x6c>
   52f80:	2001bc78 	.word	0x2001bc78

00052f84 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   52f84:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   52f86:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   52f8a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   52f8c:	e9cd 6700 	strd	r6, r7, [sp]
   52f90:	f7ff fdf4 	bl	52b7c <z_pend_curr>

	if (data != NULL) {
   52f94:	b11c      	cbz	r4, 52f9e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   52f96:	4b03      	ldr	r3, [pc, #12]	; (52fa4 <z_sched_wait+0x20>)
   52f98:	689b      	ldr	r3, [r3, #8]
   52f9a:	695b      	ldr	r3, [r3, #20]
   52f9c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   52f9e:	b002      	add	sp, #8
   52fa0:	bdd0      	pop	{r4, r6, r7, pc}
   52fa2:	bf00      	nop
   52fa4:	2001bc78 	.word	0x2001bc78

00052fa8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   52fa8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   52faa:	4806      	ldr	r0, [pc, #24]	; (52fc4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   52fac:	4a06      	ldr	r2, [pc, #24]	; (52fc8 <z_data_copy+0x20>)
   52fae:	4907      	ldr	r1, [pc, #28]	; (52fcc <z_data_copy+0x24>)
   52fb0:	1a12      	subs	r2, r2, r0
   52fb2:	f007 fb5e 	bl	5a672 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   52fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   52fba:	4a05      	ldr	r2, [pc, #20]	; (52fd0 <z_data_copy+0x28>)
   52fbc:	4905      	ldr	r1, [pc, #20]	; (52fd4 <z_data_copy+0x2c>)
   52fbe:	4806      	ldr	r0, [pc, #24]	; (52fd8 <z_data_copy+0x30>)
   52fc0:	f007 bb57 	b.w	5a672 <z_early_memcpy>
   52fc4:	2001a500 	.word	0x2001a500
   52fc8:	2001ac70 	.word	0x2001ac70
   52fcc:	00060b84 	.word	0x00060b84
   52fd0:	00000000 	.word	0x00000000
   52fd4:	00060b6c 	.word	0x00060b6c
   52fd8:	2001a500 	.word	0x2001a500

00052fdc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   52fdc:	4b03      	ldr	r3, [pc, #12]	; (52fec <elapsed+0x10>)
   52fde:	681b      	ldr	r3, [r3, #0]
   52fe0:	b90b      	cbnz	r3, 52fe6 <elapsed+0xa>
   52fe2:	f7f6 bc27 	b.w	49834 <sys_clock_elapsed>
}
   52fe6:	2000      	movs	r0, #0
   52fe8:	4770      	bx	lr
   52fea:	bf00      	nop
   52fec:	2001bcbc 	.word	0x2001bcbc

00052ff0 <next_timeout>:

static int32_t next_timeout(void)
{
   52ff0:	b510      	push	{r4, lr}
	return list->head == list;
   52ff2:	4b11      	ldr	r3, [pc, #68]	; (53038 <next_timeout+0x48>)
   52ff4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52ff6:	429c      	cmp	r4, r3
   52ff8:	d10a      	bne.n	53010 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   52ffa:	f7ff ffef 	bl	52fdc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   52ffe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   53002:	4b0e      	ldr	r3, [pc, #56]	; (5303c <next_timeout+0x4c>)
   53004:	691b      	ldr	r3, [r3, #16]
   53006:	b113      	cbz	r3, 5300e <next_timeout+0x1e>
   53008:	4298      	cmp	r0, r3
   5300a:	bfa8      	it	ge
   5300c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   5300e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   53010:	f7ff ffe4 	bl	52fdc <elapsed>
	if ((to == NULL) ||
   53014:	2c00      	cmp	r4, #0
   53016:	d0f2      	beq.n	52ffe <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   53018:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   5301c:	1a1b      	subs	r3, r3, r0
   5301e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   53022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   53026:	f172 0100 	sbcs.w	r1, r2, #0
   5302a:	dae8      	bge.n	52ffe <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   5302c:	2a00      	cmp	r2, #0
   5302e:	bfac      	ite	ge
   53030:	4618      	movge	r0, r3
   53032:	2000      	movlt	r0, #0
   53034:	e7e5      	b.n	53002 <next_timeout+0x12>
   53036:	bf00      	nop
   53038:	2001a828 	.word	0x2001a828
   5303c:	2001bc78 	.word	0x2001bc78

00053040 <remove_timeout>:
{
   53040:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   53042:	b170      	cbz	r0, 53062 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   53044:	4b0b      	ldr	r3, [pc, #44]	; (53074 <remove_timeout+0x34>)
   53046:	685b      	ldr	r3, [r3, #4]
   53048:	4298      	cmp	r0, r3
   5304a:	d00a      	beq.n	53062 <remove_timeout+0x22>
   5304c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   5304e:	b143      	cbz	r3, 53062 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   53050:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   53054:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   53058:	1912      	adds	r2, r2, r4
   5305a:	eb41 0105 	adc.w	r1, r1, r5
   5305e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   53062:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   53066:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   53068:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   5306a:	2300      	movs	r3, #0
	node->prev = NULL;
   5306c:	e9c0 3300 	strd	r3, r3, [r0]
}
   53070:	bd30      	pop	{r4, r5, pc}
   53072:	bf00      	nop
   53074:	2001a828 	.word	0x2001a828

00053078 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   53078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   5307c:	bf08      	it	eq
   5307e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   53082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   53084:	4604      	mov	r4, r0
   53086:	461d      	mov	r5, r3
   53088:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   5308a:	d061      	beq.n	53150 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   5308c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   5308e:	f04f 0320 	mov.w	r3, #32
   53092:	f3ef 8711 	mrs	r7, BASEPRI
   53096:	f383 8812 	msr	BASEPRI_MAX, r3
   5309a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   5309e:	3201      	adds	r2, #1
   530a0:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   530a4:	da24      	bge.n	530f0 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   530a6:	f06f 0301 	mvn.w	r3, #1
   530aa:	492f      	ldr	r1, [pc, #188]	; (53168 <z_add_timeout+0xf0>)
   530ac:	e9d1 2000 	ldrd	r2, r0, [r1]
   530b0:	1a9b      	subs	r3, r3, r2
   530b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   530b6:	eb62 0000 	sbc.w	r0, r2, r0
   530ba:	1b9e      	subs	r6, r3, r6
   530bc:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   530c0:	2e01      	cmp	r6, #1
   530c2:	f170 0300 	sbcs.w	r3, r0, #0
   530c6:	da01      	bge.n	530cc <z_add_timeout+0x54>
   530c8:	2601      	movs	r6, #1
   530ca:	2000      	movs	r0, #0
   530cc:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   530d0:	4e26      	ldr	r6, [pc, #152]	; (5316c <z_add_timeout+0xf4>)
   530d2:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   530d6:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   530d8:	45b4      	cmp	ip, r6
   530da:	bf08      	it	eq
   530dc:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   530e0:	f1bc 0f00 	cmp.w	ip, #0
   530e4:	d10d      	bne.n	53102 <z_add_timeout+0x8a>
	node->prev = tail;
   530e6:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   530ea:	602c      	str	r4, [r5, #0]
	list->tail = node;
   530ec:	6074      	str	r4, [r6, #4]
}
   530ee:	e01c      	b.n	5312a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   530f0:	f7ff ff74 	bl	52fdc <elapsed>
   530f4:	3601      	adds	r6, #1
   530f6:	f145 0500 	adc.w	r5, r5, #0
   530fa:	1836      	adds	r6, r6, r0
   530fc:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   53100:	e7e4      	b.n	530cc <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   53102:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   53106:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   5310a:	4293      	cmp	r3, r2
   5310c:	eb71 0e00 	sbcs.w	lr, r1, r0
   53110:	da1f      	bge.n	53152 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   53112:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   53114:	f8dc 3004 	ldr.w	r3, [ip, #4]
   53118:	eb60 0001 	sbc.w	r0, r0, r1
   5311c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   53120:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   53124:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   53126:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   5312a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5312c:	42b3      	cmp	r3, r6
   5312e:	d00b      	beq.n	53148 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   53130:	429c      	cmp	r4, r3
   53132:	d109      	bne.n	53148 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   53134:	f7ff ff5c 	bl	52ff0 <next_timeout>

			if (next_time == 0 ||
   53138:	b118      	cbz	r0, 53142 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   5313a:	4b0d      	ldr	r3, [pc, #52]	; (53170 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   5313c:	691b      	ldr	r3, [r3, #16]
   5313e:	4283      	cmp	r3, r0
   53140:	d002      	beq.n	53148 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   53142:	2100      	movs	r1, #0
   53144:	f7f6 fb46 	bl	497d4 <sys_clock_set_timeout>
	__asm__ volatile(
   53148:	f387 8811 	msr	BASEPRI, r7
   5314c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   53150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   53152:	1a9b      	subs	r3, r3, r2
   53154:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   53158:	45ac      	cmp	ip, r5
   5315a:	e9c4 3104 	strd	r3, r1, [r4, #16]
   5315e:	d0c2      	beq.n	530e6 <z_add_timeout+0x6e>
   53160:	f8dc c000 	ldr.w	ip, [ip]
   53164:	e7bc      	b.n	530e0 <z_add_timeout+0x68>
   53166:	bf00      	nop
   53168:	2001af80 	.word	0x2001af80
   5316c:	2001a828 	.word	0x2001a828
   53170:	2001bc78 	.word	0x2001bc78

00053174 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   53174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   53178:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   5317a:	f7ff fcbd 	bl	52af8 <z_time_slice>
	__asm__ volatile(
   5317e:	f04f 0320 	mov.w	r3, #32
   53182:	f3ef 8611 	mrs	r6, BASEPRI
   53186:	f383 8812 	msr	BASEPRI_MAX, r3
   5318a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   5318e:	4f24      	ldr	r7, [pc, #144]	; (53220 <sys_clock_announce+0xac>)
	return list->head == list;
   53190:	f8df 8094 	ldr.w	r8, [pc, #148]	; 53228 <sys_clock_announce+0xb4>
   53194:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   53198:	4a22      	ldr	r2, [pc, #136]	; (53224 <sys_clock_announce+0xb0>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5319a:	4540      	cmp	r0, r8
	announce_remaining = ticks;
   5319c:	603c      	str	r4, [r7, #0]
	return list->head == list;
   5319e:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   531a2:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   531a6:	d00b      	beq.n	531c0 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   531a8:	b150      	cbz	r0, 531c0 <sys_clock_announce+0x4c>
   531aa:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   531ae:	42ac      	cmp	r4, r5
   531b0:	eb71 090c 	sbcs.w	r9, r1, ip
   531b4:	da17      	bge.n	531e6 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   531b6:	1b2d      	subs	r5, r5, r4
   531b8:	eb6c 0c01 	sbc.w	ip, ip, r1
   531bc:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   531c0:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   531c2:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   531c6:	eb4e 0101 	adc.w	r1, lr, r1
   531ca:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   531ce:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   531d0:	f7ff ff0e 	bl	52ff0 <next_timeout>
   531d4:	4621      	mov	r1, r4
   531d6:	f7f6 fafd 	bl	497d4 <sys_clock_set_timeout>
	__asm__ volatile(
   531da:	f386 8811 	msr	BASEPRI, r6
   531de:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   531e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   531e6:	18eb      	adds	r3, r5, r3
   531e8:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   531ec:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   531f0:	2200      	movs	r2, #0
   531f2:	2300      	movs	r3, #0
   531f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   531f8:	f7ff ff22 	bl	53040 <remove_timeout>
   531fc:	f386 8811 	msr	BASEPRI, r6
   53200:	f3bf 8f6f 	isb	sy
		t->fn(t);
   53204:	6883      	ldr	r3, [r0, #8]
   53206:	4798      	blx	r3
	__asm__ volatile(
   53208:	f04f 0320 	mov.w	r3, #32
   5320c:	f3ef 8611 	mrs	r6, BASEPRI
   53210:	f383 8812 	msr	BASEPRI_MAX, r3
   53214:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   53218:	683c      	ldr	r4, [r7, #0]
   5321a:	1b64      	subs	r4, r4, r5
   5321c:	e7ba      	b.n	53194 <sys_clock_announce+0x20>
   5321e:	bf00      	nop
   53220:	2001bcbc 	.word	0x2001bcbc
   53224:	2001af80 	.word	0x2001af80
   53228:	2001a828 	.word	0x2001a828

0005322c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   5322c:	b510      	push	{r4, lr}
   5322e:	f04f 0320 	mov.w	r3, #32
   53232:	f3ef 8411 	mrs	r4, BASEPRI
   53236:	f383 8812 	msr	BASEPRI_MAX, r3
   5323a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   5323e:	f7ff fecd 	bl	52fdc <elapsed>
   53242:	4603      	mov	r3, r0
   53244:	4a05      	ldr	r2, [pc, #20]	; (5325c <sys_clock_tick_get+0x30>)
   53246:	e9d2 0100 	ldrd	r0, r1, [r2]
   5324a:	1818      	adds	r0, r3, r0
   5324c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   53250:	f384 8811 	msr	BASEPRI, r4
   53254:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   53258:	bd10      	pop	{r4, pc}
   5325a:	bf00      	nop
   5325c:	2001af80 	.word	0x2001af80

00053260 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   53260:	b538      	push	{r3, r4, r5, lr}
   53262:	4603      	mov	r3, r0
	__asm__ volatile(
   53264:	f04f 0220 	mov.w	r2, #32
   53268:	f3ef 8511 	mrs	r5, BASEPRI
   5326c:	f382 8812 	msr	BASEPRI_MAX, r2
   53270:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   53274:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   53276:	2101      	movs	r1, #1
   53278:	6081      	str	r1, [r0, #8]
	return list->head == list;
   5327a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   5327c:	4283      	cmp	r3, r0
   5327e:	d106      	bne.n	5328e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   53280:	f385 8811 	msr	BASEPRI, r5
   53284:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   53288:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   5328a:	4620      	mov	r0, r4
   5328c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   5328e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   53292:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   53294:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   53296:	2300      	movs	r3, #0
	node->prev = NULL;
   53298:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   5329c:	f007 fd23 	bl	5ace6 <signal_poll_event>
	z_reschedule(&lock, key);
   532a0:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   532a2:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   532a4:	4801      	ldr	r0, [pc, #4]	; (532ac <z_impl_k_poll_signal_raise+0x4c>)
   532a6:	f7ff fccd 	bl	52c44 <z_reschedule>
	return rc;
   532aa:	e7ee      	b.n	5328a <z_impl_k_poll_signal_raise+0x2a>
   532ac:	2002083e 	.word	0x2002083e

000532b0 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   532b0:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   532b2:	4601      	mov	r1, r0
   532b4:	4801      	ldr	r0, [pc, #4]	; (532bc <k_aligned_alloc+0xc>)
   532b6:	f007 bd7e 	b.w	5adb6 <z_heap_aligned_alloc>
   532ba:	bf00      	nop
   532bc:	2001aaf8 	.word	0x2001aaf8

000532c0 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   532c0:	4b01      	ldr	r3, [pc, #4]	; (532c8 <k_thread_system_pool_assign+0x8>)
   532c2:	6743      	str	r3, [r0, #116]	; 0x74
}
   532c4:	4770      	bx	lr
   532c6:	bf00      	nop
   532c8:	2001aaf8 	.word	0x2001aaf8

000532cc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   532cc:	b538      	push	{r3, r4, r5, lr}
   532ce:	4604      	mov	r4, r0
   532d0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   532d2:	f007 fa8c 	bl	5a7ee <k_is_in_isr>
   532d6:	b920      	cbnz	r0, 532e2 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   532d8:	4b06      	ldr	r3, [pc, #24]	; (532f4 <z_thread_aligned_alloc+0x28>)
   532da:	689b      	ldr	r3, [r3, #8]
   532dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   532de:	b90b      	cbnz	r3, 532e4 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   532e0:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   532e2:	4b05      	ldr	r3, [pc, #20]	; (532f8 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   532e4:	462a      	mov	r2, r5
   532e6:	4621      	mov	r1, r4
   532e8:	4618      	mov	r0, r3
}
   532ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   532ee:	f007 bd62 	b.w	5adb6 <z_heap_aligned_alloc>
   532f2:	bf00      	nop
   532f4:	2001bc78 	.word	0x2001bc78
   532f8:	2001aaf8 	.word	0x2001aaf8

000532fc <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   532fc:	4801      	ldr	r0, [pc, #4]	; (53304 <boot_banner+0x8>)
   532fe:	f002 ba0a 	b.w	55716 <printk>
   53302:	bf00      	nop
   53304:	0006088b 	.word	0x0006088b

00053308 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   53308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   5330a:	2400      	movs	r4, #0
   5330c:	4b08      	ldr	r3, [pc, #32]	; (53330 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   5330e:	f44f 6290 	mov.w	r2, #1152	; 0x480
	struct k_work_queue_config cfg = {
   53312:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   53314:	ab02      	add	r3, sp, #8
   53316:	9300      	str	r3, [sp, #0]
   53318:	4906      	ldr	r1, [pc, #24]	; (53334 <k_sys_work_q_init+0x2c>)
   5331a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   5331e:	4806      	ldr	r0, [pc, #24]	; (53338 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   53320:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   53324:	f7ff fa4a 	bl	527bc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   53328:	4620      	mov	r0, r4
   5332a:	b004      	add	sp, #16
   5332c:	bd10      	pop	{r4, pc}
   5332e:	bf00      	nop
   53330:	000608b9 	.word	0x000608b9
   53334:	20024f80 	.word	0x20024f80
   53338:	2001af88 	.word	0x2001af88

0005333c <calloc>:
   5333c:	4b02      	ldr	r3, [pc, #8]	; (53348 <calloc+0xc>)
   5333e:	460a      	mov	r2, r1
   53340:	4601      	mov	r1, r0
   53342:	6818      	ldr	r0, [r3, #0]
   53344:	f007 bdcb 	b.w	5aede <_calloc_r>
   53348:	2001a830 	.word	0x2001a830

0005334c <exit>:
   5334c:	b508      	push	{r3, lr}
   5334e:	4b07      	ldr	r3, [pc, #28]	; (5336c <exit+0x20>)
   53350:	4604      	mov	r4, r0
   53352:	b113      	cbz	r3, 5335a <exit+0xe>
   53354:	2100      	movs	r1, #0
   53356:	f3af 8000 	nop.w
   5335a:	4b05      	ldr	r3, [pc, #20]	; (53370 <exit+0x24>)
   5335c:	6818      	ldr	r0, [r3, #0]
   5335e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   53360:	b103      	cbz	r3, 53364 <exit+0x18>
   53362:	4798      	blx	r3
   53364:	4620      	mov	r0, r4
   53366:	f7f3 fb91 	bl	46a8c <_exit>
   5336a:	bf00      	nop
   5336c:	00000000 	.word	0x00000000
   53370:	0005c830 	.word	0x0005c830

00053374 <malloc>:
   53374:	4b02      	ldr	r3, [pc, #8]	; (53380 <malloc+0xc>)
   53376:	4601      	mov	r1, r0
   53378:	6818      	ldr	r0, [r3, #0]
   5337a:	f000 b855 	b.w	53428 <_malloc_r>
   5337e:	bf00      	nop
   53380:	2001a830 	.word	0x2001a830

00053384 <free>:
   53384:	4b02      	ldr	r3, [pc, #8]	; (53390 <free+0xc>)
   53386:	4601      	mov	r1, r0
   53388:	6818      	ldr	r0, [r3, #0]
   5338a:	f000 b803 	b.w	53394 <_free_r>
   5338e:	bf00      	nop
   53390:	2001a830 	.word	0x2001a830

00053394 <_free_r>:
   53394:	b538      	push	{r3, r4, r5, lr}
   53396:	4605      	mov	r5, r0
   53398:	2900      	cmp	r1, #0
   5339a:	d041      	beq.n	53420 <_free_r+0x8c>
   5339c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   533a0:	1f0c      	subs	r4, r1, #4
   533a2:	2b00      	cmp	r3, #0
   533a4:	bfb8      	it	lt
   533a6:	18e4      	addlt	r4, r4, r3
   533a8:	f000 fe40 	bl	5402c <__malloc_lock>
   533ac:	4a1d      	ldr	r2, [pc, #116]	; (53424 <_free_r+0x90>)
   533ae:	6813      	ldr	r3, [r2, #0]
   533b0:	b933      	cbnz	r3, 533c0 <_free_r+0x2c>
   533b2:	6063      	str	r3, [r4, #4]
   533b4:	6014      	str	r4, [r2, #0]
   533b6:	4628      	mov	r0, r5
   533b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   533bc:	f000 be3c 	b.w	54038 <__malloc_unlock>
   533c0:	42a3      	cmp	r3, r4
   533c2:	d908      	bls.n	533d6 <_free_r+0x42>
   533c4:	6820      	ldr	r0, [r4, #0]
   533c6:	1821      	adds	r1, r4, r0
   533c8:	428b      	cmp	r3, r1
   533ca:	bf01      	itttt	eq
   533cc:	6819      	ldreq	r1, [r3, #0]
   533ce:	685b      	ldreq	r3, [r3, #4]
   533d0:	1809      	addeq	r1, r1, r0
   533d2:	6021      	streq	r1, [r4, #0]
   533d4:	e7ed      	b.n	533b2 <_free_r+0x1e>
   533d6:	461a      	mov	r2, r3
   533d8:	685b      	ldr	r3, [r3, #4]
   533da:	b10b      	cbz	r3, 533e0 <_free_r+0x4c>
   533dc:	42a3      	cmp	r3, r4
   533de:	d9fa      	bls.n	533d6 <_free_r+0x42>
   533e0:	6811      	ldr	r1, [r2, #0]
   533e2:	1850      	adds	r0, r2, r1
   533e4:	42a0      	cmp	r0, r4
   533e6:	d10b      	bne.n	53400 <_free_r+0x6c>
   533e8:	6820      	ldr	r0, [r4, #0]
   533ea:	4401      	add	r1, r0
   533ec:	1850      	adds	r0, r2, r1
   533ee:	6011      	str	r1, [r2, #0]
   533f0:	4283      	cmp	r3, r0
   533f2:	d1e0      	bne.n	533b6 <_free_r+0x22>
   533f4:	6818      	ldr	r0, [r3, #0]
   533f6:	685b      	ldr	r3, [r3, #4]
   533f8:	4408      	add	r0, r1
   533fa:	6053      	str	r3, [r2, #4]
   533fc:	6010      	str	r0, [r2, #0]
   533fe:	e7da      	b.n	533b6 <_free_r+0x22>
   53400:	d902      	bls.n	53408 <_free_r+0x74>
   53402:	230c      	movs	r3, #12
   53404:	602b      	str	r3, [r5, #0]
   53406:	e7d6      	b.n	533b6 <_free_r+0x22>
   53408:	6820      	ldr	r0, [r4, #0]
   5340a:	1821      	adds	r1, r4, r0
   5340c:	428b      	cmp	r3, r1
   5340e:	bf02      	ittt	eq
   53410:	6819      	ldreq	r1, [r3, #0]
   53412:	685b      	ldreq	r3, [r3, #4]
   53414:	1809      	addeq	r1, r1, r0
   53416:	6063      	str	r3, [r4, #4]
   53418:	bf08      	it	eq
   5341a:	6021      	streq	r1, [r4, #0]
   5341c:	6054      	str	r4, [r2, #4]
   5341e:	e7ca      	b.n	533b6 <_free_r+0x22>
   53420:	bd38      	pop	{r3, r4, r5, pc}
   53422:	bf00      	nop
   53424:	2001bcc4 	.word	0x2001bcc4

00053428 <_malloc_r>:
   53428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5342a:	1ccd      	adds	r5, r1, #3
   5342c:	4606      	mov	r6, r0
   5342e:	f025 0503 	bic.w	r5, r5, #3
   53432:	3508      	adds	r5, #8
   53434:	2d0c      	cmp	r5, #12
   53436:	bf38      	it	cc
   53438:	250c      	movcc	r5, #12
   5343a:	2d00      	cmp	r5, #0
   5343c:	db01      	blt.n	53442 <_malloc_r+0x1a>
   5343e:	42a9      	cmp	r1, r5
   53440:	d903      	bls.n	5344a <_malloc_r+0x22>
   53442:	230c      	movs	r3, #12
   53444:	6033      	str	r3, [r6, #0]
   53446:	2000      	movs	r0, #0
   53448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   5344a:	f000 fdef 	bl	5402c <__malloc_lock>
   5344e:	4921      	ldr	r1, [pc, #132]	; (534d4 <_malloc_r+0xac>)
   53450:	680a      	ldr	r2, [r1, #0]
   53452:	4614      	mov	r4, r2
   53454:	b99c      	cbnz	r4, 5347e <_malloc_r+0x56>
   53456:	4f20      	ldr	r7, [pc, #128]	; (534d8 <_malloc_r+0xb0>)
   53458:	683b      	ldr	r3, [r7, #0]
   5345a:	b923      	cbnz	r3, 53466 <_malloc_r+0x3e>
   5345c:	4621      	mov	r1, r4
   5345e:	4630      	mov	r0, r6
   53460:	f000 fb9e 	bl	53ba0 <_sbrk_r>
   53464:	6038      	str	r0, [r7, #0]
   53466:	4629      	mov	r1, r5
   53468:	4630      	mov	r0, r6
   5346a:	f000 fb99 	bl	53ba0 <_sbrk_r>
   5346e:	1c43      	adds	r3, r0, #1
   53470:	d123      	bne.n	534ba <_malloc_r+0x92>
   53472:	230c      	movs	r3, #12
   53474:	4630      	mov	r0, r6
   53476:	6033      	str	r3, [r6, #0]
   53478:	f000 fdde 	bl	54038 <__malloc_unlock>
   5347c:	e7e3      	b.n	53446 <_malloc_r+0x1e>
   5347e:	6823      	ldr	r3, [r4, #0]
   53480:	1b5b      	subs	r3, r3, r5
   53482:	d417      	bmi.n	534b4 <_malloc_r+0x8c>
   53484:	2b0b      	cmp	r3, #11
   53486:	d903      	bls.n	53490 <_malloc_r+0x68>
   53488:	6023      	str	r3, [r4, #0]
   5348a:	441c      	add	r4, r3
   5348c:	6025      	str	r5, [r4, #0]
   5348e:	e004      	b.n	5349a <_malloc_r+0x72>
   53490:	6863      	ldr	r3, [r4, #4]
   53492:	42a2      	cmp	r2, r4
   53494:	bf0c      	ite	eq
   53496:	600b      	streq	r3, [r1, #0]
   53498:	6053      	strne	r3, [r2, #4]
   5349a:	4630      	mov	r0, r6
   5349c:	f000 fdcc 	bl	54038 <__malloc_unlock>
   534a0:	f104 000b 	add.w	r0, r4, #11
   534a4:	1d23      	adds	r3, r4, #4
   534a6:	f020 0007 	bic.w	r0, r0, #7
   534aa:	1ac2      	subs	r2, r0, r3
   534ac:	bf1c      	itt	ne
   534ae:	1a1b      	subne	r3, r3, r0
   534b0:	50a3      	strne	r3, [r4, r2]
   534b2:	e7c9      	b.n	53448 <_malloc_r+0x20>
   534b4:	4622      	mov	r2, r4
   534b6:	6864      	ldr	r4, [r4, #4]
   534b8:	e7cc      	b.n	53454 <_malloc_r+0x2c>
   534ba:	1cc4      	adds	r4, r0, #3
   534bc:	f024 0403 	bic.w	r4, r4, #3
   534c0:	42a0      	cmp	r0, r4
   534c2:	d0e3      	beq.n	5348c <_malloc_r+0x64>
   534c4:	1a21      	subs	r1, r4, r0
   534c6:	4630      	mov	r0, r6
   534c8:	f000 fb6a 	bl	53ba0 <_sbrk_r>
   534cc:	3001      	adds	r0, #1
   534ce:	d1dd      	bne.n	5348c <_malloc_r+0x64>
   534d0:	e7cf      	b.n	53472 <_malloc_r+0x4a>
   534d2:	bf00      	nop
   534d4:	2001bcc4 	.word	0x2001bcc4
   534d8:	2001bcc0 	.word	0x2001bcc0

000534dc <_printf_float>:
   534dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   534e0:	b08d      	sub	sp, #52	; 0x34
   534e2:	460c      	mov	r4, r1
   534e4:	4616      	mov	r6, r2
   534e6:	461f      	mov	r7, r3
   534e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   534ec:	4605      	mov	r5, r0
   534ee:	f000 fd87 	bl	54000 <_localeconv_r>
   534f2:	6803      	ldr	r3, [r0, #0]
   534f4:	4618      	mov	r0, r3
   534f6:	9304      	str	r3, [sp, #16]
   534f8:	f7ed fc7c 	bl	40df4 <strlen>
   534fc:	2300      	movs	r3, #0
   534fe:	9005      	str	r0, [sp, #20]
   53500:	930a      	str	r3, [sp, #40]	; 0x28
   53502:	f8d8 3000 	ldr.w	r3, [r8]
   53506:	f894 a018 	ldrb.w	sl, [r4, #24]
   5350a:	3307      	adds	r3, #7
   5350c:	f8d4 b000 	ldr.w	fp, [r4]
   53510:	f023 0307 	bic.w	r3, r3, #7
   53514:	f103 0208 	add.w	r2, r3, #8
   53518:	f8c8 2000 	str.w	r2, [r8]
   5351c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   53520:	e9d3 8900 	ldrd	r8, r9, [r3]
   53524:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   53528:	f8cd 8018 	str.w	r8, [sp, #24]
   5352c:	9307      	str	r3, [sp, #28]
   5352e:	4b9c      	ldr	r3, [pc, #624]	; (537a0 <_printf_float+0x2c4>)
   53530:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   53534:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   53538:	f7ed fa5c 	bl	409f4 <__aeabi_dcmpun>
   5353c:	bb70      	cbnz	r0, 5359c <_printf_float+0xc0>
   5353e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   53542:	4b97      	ldr	r3, [pc, #604]	; (537a0 <_printf_float+0x2c4>)
   53544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   53548:	f7ed fa36 	bl	409b8 <__aeabi_dcmple>
   5354c:	bb30      	cbnz	r0, 5359c <_printf_float+0xc0>
   5354e:	2200      	movs	r2, #0
   53550:	2300      	movs	r3, #0
   53552:	4640      	mov	r0, r8
   53554:	4649      	mov	r1, r9
   53556:	f7ed fa25 	bl	409a4 <__aeabi_dcmplt>
   5355a:	b110      	cbz	r0, 53562 <_printf_float+0x86>
   5355c:	232d      	movs	r3, #45	; 0x2d
   5355e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   53562:	4a90      	ldr	r2, [pc, #576]	; (537a4 <_printf_float+0x2c8>)
   53564:	4b90      	ldr	r3, [pc, #576]	; (537a8 <_printf_float+0x2cc>)
   53566:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   5356a:	bf94      	ite	ls
   5356c:	4690      	movls	r8, r2
   5356e:	4698      	movhi	r8, r3
   53570:	2303      	movs	r3, #3
   53572:	f04f 0900 	mov.w	r9, #0
   53576:	6123      	str	r3, [r4, #16]
   53578:	f02b 0304 	bic.w	r3, fp, #4
   5357c:	6023      	str	r3, [r4, #0]
   5357e:	4633      	mov	r3, r6
   53580:	aa0b      	add	r2, sp, #44	; 0x2c
   53582:	4621      	mov	r1, r4
   53584:	4628      	mov	r0, r5
   53586:	9700      	str	r7, [sp, #0]
   53588:	f007 fd58 	bl	5b03c <_printf_common>
   5358c:	3001      	adds	r0, #1
   5358e:	f040 8096 	bne.w	536be <_printf_float+0x1e2>
   53592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   53596:	b00d      	add	sp, #52	; 0x34
   53598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5359c:	4642      	mov	r2, r8
   5359e:	464b      	mov	r3, r9
   535a0:	4640      	mov	r0, r8
   535a2:	4649      	mov	r1, r9
   535a4:	f7ed fa26 	bl	409f4 <__aeabi_dcmpun>
   535a8:	b140      	cbz	r0, 535bc <_printf_float+0xe0>
   535aa:	464b      	mov	r3, r9
   535ac:	4a7f      	ldr	r2, [pc, #508]	; (537ac <_printf_float+0x2d0>)
   535ae:	2b00      	cmp	r3, #0
   535b0:	bfbc      	itt	lt
   535b2:	232d      	movlt	r3, #45	; 0x2d
   535b4:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   535b8:	4b7d      	ldr	r3, [pc, #500]	; (537b0 <_printf_float+0x2d4>)
   535ba:	e7d4      	b.n	53566 <_printf_float+0x8a>
   535bc:	6863      	ldr	r3, [r4, #4]
   535be:	1c5a      	adds	r2, r3, #1
   535c0:	d126      	bne.n	53610 <_printf_float+0x134>
   535c2:	2306      	movs	r3, #6
   535c4:	6063      	str	r3, [r4, #4]
   535c6:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   535ca:	2300      	movs	r3, #0
   535cc:	4628      	mov	r0, r5
   535ce:	6022      	str	r2, [r4, #0]
   535d0:	9303      	str	r3, [sp, #12]
   535d2:	ab0a      	add	r3, sp, #40	; 0x28
   535d4:	e9cd a301 	strd	sl, r3, [sp, #4]
   535d8:	ab09      	add	r3, sp, #36	; 0x24
   535da:	ec49 8b10 	vmov	d0, r8, r9
   535de:	9300      	str	r3, [sp, #0]
   535e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   535e4:	6861      	ldr	r1, [r4, #4]
   535e6:	f007 fc88 	bl	5aefa <__cvt>
   535ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   535ee:	4680      	mov	r8, r0
   535f0:	9909      	ldr	r1, [sp, #36]	; 0x24
   535f2:	d115      	bne.n	53620 <_printf_float+0x144>
   535f4:	1ccb      	adds	r3, r1, #3
   535f6:	db3b      	blt.n	53670 <_printf_float+0x194>
   535f8:	6863      	ldr	r3, [r4, #4]
   535fa:	4299      	cmp	r1, r3
   535fc:	dc38      	bgt.n	53670 <_printf_float+0x194>
   535fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   53600:	4299      	cmp	r1, r3
   53602:	db55      	blt.n	536b0 <_printf_float+0x1d4>
   53604:	6823      	ldr	r3, [r4, #0]
   53606:	6121      	str	r1, [r4, #16]
   53608:	07d8      	lsls	r0, r3, #31
   5360a:	d545      	bpl.n	53698 <_printf_float+0x1bc>
   5360c:	1c4b      	adds	r3, r1, #1
   5360e:	e042      	b.n	53696 <_printf_float+0x1ba>
   53610:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   53614:	2a47      	cmp	r2, #71	; 0x47
   53616:	d1d6      	bne.n	535c6 <_printf_float+0xea>
   53618:	2b00      	cmp	r3, #0
   5361a:	d1d4      	bne.n	535c6 <_printf_float+0xea>
   5361c:	2301      	movs	r3, #1
   5361e:	e7d1      	b.n	535c4 <_printf_float+0xe8>
   53620:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   53624:	d107      	bne.n	53636 <_printf_float+0x15a>
   53626:	1cc8      	adds	r0, r1, #3
   53628:	db25      	blt.n	53676 <_printf_float+0x19a>
   5362a:	6863      	ldr	r3, [r4, #4]
   5362c:	428b      	cmp	r3, r1
   5362e:	db22      	blt.n	53676 <_printf_float+0x19a>
   53630:	f04f 0a67 	mov.w	sl, #103	; 0x67
   53634:	e7e3      	b.n	535fe <_printf_float+0x122>
   53636:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   5363a:	d81f      	bhi.n	5367c <_printf_float+0x1a0>
   5363c:	3901      	subs	r1, #1
   5363e:	4652      	mov	r2, sl
   53640:	f104 0050 	add.w	r0, r4, #80	; 0x50
   53644:	9109      	str	r1, [sp, #36]	; 0x24
   53646:	f007 fcc0 	bl	5afca <__exponent>
   5364a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   5364c:	4681      	mov	r9, r0
   5364e:	1813      	adds	r3, r2, r0
   53650:	2a01      	cmp	r2, #1
   53652:	6123      	str	r3, [r4, #16]
   53654:	dc02      	bgt.n	5365c <_printf_float+0x180>
   53656:	6822      	ldr	r2, [r4, #0]
   53658:	07d2      	lsls	r2, r2, #31
   5365a:	d501      	bpl.n	53660 <_printf_float+0x184>
   5365c:	3301      	adds	r3, #1
   5365e:	6123      	str	r3, [r4, #16]
   53660:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   53664:	2b00      	cmp	r3, #0
   53666:	d08a      	beq.n	5357e <_printf_float+0xa2>
   53668:	232d      	movs	r3, #45	; 0x2d
   5366a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   5366e:	e786      	b.n	5357e <_printf_float+0xa2>
   53670:	f04f 0a65 	mov.w	sl, #101	; 0x65
   53674:	e7e2      	b.n	5363c <_printf_float+0x160>
   53676:	f04f 0a45 	mov.w	sl, #69	; 0x45
   5367a:	e7df      	b.n	5363c <_printf_float+0x160>
   5367c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   53680:	d1bd      	bne.n	535fe <_printf_float+0x122>
   53682:	2900      	cmp	r1, #0
   53684:	6863      	ldr	r3, [r4, #4]
   53686:	dd0b      	ble.n	536a0 <_printf_float+0x1c4>
   53688:	6121      	str	r1, [r4, #16]
   5368a:	b913      	cbnz	r3, 53692 <_printf_float+0x1b6>
   5368c:	6822      	ldr	r2, [r4, #0]
   5368e:	07d0      	lsls	r0, r2, #31
   53690:	d502      	bpl.n	53698 <_printf_float+0x1bc>
   53692:	3301      	adds	r3, #1
   53694:	440b      	add	r3, r1
   53696:	6123      	str	r3, [r4, #16]
   53698:	f04f 0900 	mov.w	r9, #0
   5369c:	65a1      	str	r1, [r4, #88]	; 0x58
   5369e:	e7df      	b.n	53660 <_printf_float+0x184>
   536a0:	b913      	cbnz	r3, 536a8 <_printf_float+0x1cc>
   536a2:	6822      	ldr	r2, [r4, #0]
   536a4:	07d2      	lsls	r2, r2, #31
   536a6:	d501      	bpl.n	536ac <_printf_float+0x1d0>
   536a8:	3302      	adds	r3, #2
   536aa:	e7f4      	b.n	53696 <_printf_float+0x1ba>
   536ac:	2301      	movs	r3, #1
   536ae:	e7f2      	b.n	53696 <_printf_float+0x1ba>
   536b0:	2900      	cmp	r1, #0
   536b2:	bfd4      	ite	le
   536b4:	f1c1 0202 	rsble	r2, r1, #2
   536b8:	2201      	movgt	r2, #1
   536ba:	4413      	add	r3, r2
   536bc:	e7eb      	b.n	53696 <_printf_float+0x1ba>
   536be:	6823      	ldr	r3, [r4, #0]
   536c0:	055a      	lsls	r2, r3, #21
   536c2:	d407      	bmi.n	536d4 <_printf_float+0x1f8>
   536c4:	6923      	ldr	r3, [r4, #16]
   536c6:	4642      	mov	r2, r8
   536c8:	4631      	mov	r1, r6
   536ca:	4628      	mov	r0, r5
   536cc:	47b8      	blx	r7
   536ce:	3001      	adds	r0, #1
   536d0:	d12b      	bne.n	5372a <_printf_float+0x24e>
   536d2:	e75e      	b.n	53592 <_printf_float+0xb6>
   536d4:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   536d8:	f240 80dd 	bls.w	53896 <_printf_float+0x3ba>
   536dc:	2200      	movs	r2, #0
   536de:	2300      	movs	r3, #0
   536e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   536e4:	f7ed f954 	bl	40990 <__aeabi_dcmpeq>
   536e8:	2800      	cmp	r0, #0
   536ea:	d033      	beq.n	53754 <_printf_float+0x278>
   536ec:	2301      	movs	r3, #1
   536ee:	4a31      	ldr	r2, [pc, #196]	; (537b4 <_printf_float+0x2d8>)
   536f0:	4631      	mov	r1, r6
   536f2:	4628      	mov	r0, r5
   536f4:	47b8      	blx	r7
   536f6:	3001      	adds	r0, #1
   536f8:	f43f af4b 	beq.w	53592 <_printf_float+0xb6>
   536fc:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	; 0x24
   53700:	4543      	cmp	r3, r8
   53702:	db02      	blt.n	5370a <_printf_float+0x22e>
   53704:	6823      	ldr	r3, [r4, #0]
   53706:	07d8      	lsls	r0, r3, #31
   53708:	d50f      	bpl.n	5372a <_printf_float+0x24e>
   5370a:	4631      	mov	r1, r6
   5370c:	4628      	mov	r0, r5
   5370e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   53712:	47b8      	blx	r7
   53714:	3001      	adds	r0, #1
   53716:	f43f af3c 	beq.w	53592 <_printf_float+0xb6>
   5371a:	f04f 0900 	mov.w	r9, #0
   5371e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   53722:	f104 0a1a 	add.w	sl, r4, #26
   53726:	45c8      	cmp	r8, r9
   53728:	dc09      	bgt.n	5373e <_printf_float+0x262>
   5372a:	6823      	ldr	r3, [r4, #0]
   5372c:	079b      	lsls	r3, r3, #30
   5372e:	f100 8103 	bmi.w	53938 <_printf_float+0x45c>
   53732:	68e0      	ldr	r0, [r4, #12]
   53734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   53736:	4298      	cmp	r0, r3
   53738:	bfb8      	it	lt
   5373a:	4618      	movlt	r0, r3
   5373c:	e72b      	b.n	53596 <_printf_float+0xba>
   5373e:	2301      	movs	r3, #1
   53740:	4652      	mov	r2, sl
   53742:	4631      	mov	r1, r6
   53744:	4628      	mov	r0, r5
   53746:	47b8      	blx	r7
   53748:	3001      	adds	r0, #1
   5374a:	f43f af22 	beq.w	53592 <_printf_float+0xb6>
   5374e:	f109 0901 	add.w	r9, r9, #1
   53752:	e7e8      	b.n	53726 <_printf_float+0x24a>
   53754:	9b09      	ldr	r3, [sp, #36]	; 0x24
   53756:	2b00      	cmp	r3, #0
   53758:	dc39      	bgt.n	537ce <_printf_float+0x2f2>
   5375a:	2301      	movs	r3, #1
   5375c:	4a15      	ldr	r2, [pc, #84]	; (537b4 <_printf_float+0x2d8>)
   5375e:	4631      	mov	r1, r6
   53760:	4628      	mov	r0, r5
   53762:	47b8      	blx	r7
   53764:	3001      	adds	r0, #1
   53766:	f43f af14 	beq.w	53592 <_printf_float+0xb6>
   5376a:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	; 0x24
   5376e:	ea59 0303 	orrs.w	r3, r9, r3
   53772:	d102      	bne.n	5377a <_printf_float+0x29e>
   53774:	6823      	ldr	r3, [r4, #0]
   53776:	07d9      	lsls	r1, r3, #31
   53778:	d5d7      	bpl.n	5372a <_printf_float+0x24e>
   5377a:	4631      	mov	r1, r6
   5377c:	4628      	mov	r0, r5
   5377e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   53782:	47b8      	blx	r7
   53784:	3001      	adds	r0, #1
   53786:	f43f af04 	beq.w	53592 <_printf_float+0xb6>
   5378a:	f04f 0a00 	mov.w	sl, #0
   5378e:	f104 0b1a 	add.w	fp, r4, #26
   53792:	9b09      	ldr	r3, [sp, #36]	; 0x24
   53794:	425b      	negs	r3, r3
   53796:	4553      	cmp	r3, sl
   53798:	dc0e      	bgt.n	537b8 <_printf_float+0x2dc>
   5379a:	464b      	mov	r3, r9
   5379c:	e793      	b.n	536c6 <_printf_float+0x1ea>
   5379e:	bf00      	nop
   537a0:	7fefffff 	.word	0x7fefffff
   537a4:	000609c3 	.word	0x000609c3
   537a8:	0005d78a 	.word	0x0005d78a
   537ac:	000609c7 	.word	0x000609c7
   537b0:	000609cb 	.word	0x000609cb
   537b4:	0005f327 	.word	0x0005f327
   537b8:	2301      	movs	r3, #1
   537ba:	465a      	mov	r2, fp
   537bc:	4631      	mov	r1, r6
   537be:	4628      	mov	r0, r5
   537c0:	47b8      	blx	r7
   537c2:	3001      	adds	r0, #1
   537c4:	f43f aee5 	beq.w	53592 <_printf_float+0xb6>
   537c8:	f10a 0a01 	add.w	sl, sl, #1
   537cc:	e7e1      	b.n	53792 <_printf_float+0x2b6>
   537ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
   537d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   537d4:	4553      	cmp	r3, sl
   537d6:	bfa8      	it	ge
   537d8:	4653      	movge	r3, sl
   537da:	2b00      	cmp	r3, #0
   537dc:	4699      	mov	r9, r3
   537de:	dc36      	bgt.n	5384e <_printf_float+0x372>
   537e0:	f04f 0b00 	mov.w	fp, #0
   537e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   537e8:	f104 021a 	add.w	r2, r4, #26
   537ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
   537ee:	9306      	str	r3, [sp, #24]
   537f0:	eba3 0309 	sub.w	r3, r3, r9
   537f4:	455b      	cmp	r3, fp
   537f6:	dc31      	bgt.n	5385c <_printf_float+0x380>
   537f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   537fa:	459a      	cmp	sl, r3
   537fc:	dc3a      	bgt.n	53874 <_printf_float+0x398>
   537fe:	6823      	ldr	r3, [r4, #0]
   53800:	07da      	lsls	r2, r3, #31
   53802:	d437      	bmi.n	53874 <_printf_float+0x398>
   53804:	9b09      	ldr	r3, [sp, #36]	; 0x24
   53806:	ebaa 0903 	sub.w	r9, sl, r3
   5380a:	9b06      	ldr	r3, [sp, #24]
   5380c:	ebaa 0303 	sub.w	r3, sl, r3
   53810:	4599      	cmp	r9, r3
   53812:	bfa8      	it	ge
   53814:	4699      	movge	r9, r3
   53816:	f1b9 0f00 	cmp.w	r9, #0
   5381a:	dc33      	bgt.n	53884 <_printf_float+0x3a8>
   5381c:	f04f 0800 	mov.w	r8, #0
   53820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   53824:	f104 0b1a 	add.w	fp, r4, #26
   53828:	9b09      	ldr	r3, [sp, #36]	; 0x24
   5382a:	ebaa 0303 	sub.w	r3, sl, r3
   5382e:	eba3 0309 	sub.w	r3, r3, r9
   53832:	4543      	cmp	r3, r8
   53834:	f77f af79 	ble.w	5372a <_printf_float+0x24e>
   53838:	2301      	movs	r3, #1
   5383a:	465a      	mov	r2, fp
   5383c:	4631      	mov	r1, r6
   5383e:	4628      	mov	r0, r5
   53840:	47b8      	blx	r7
   53842:	3001      	adds	r0, #1
   53844:	f43f aea5 	beq.w	53592 <_printf_float+0xb6>
   53848:	f108 0801 	add.w	r8, r8, #1
   5384c:	e7ec      	b.n	53828 <_printf_float+0x34c>
   5384e:	4642      	mov	r2, r8
   53850:	4631      	mov	r1, r6
   53852:	4628      	mov	r0, r5
   53854:	47b8      	blx	r7
   53856:	3001      	adds	r0, #1
   53858:	d1c2      	bne.n	537e0 <_printf_float+0x304>
   5385a:	e69a      	b.n	53592 <_printf_float+0xb6>
   5385c:	2301      	movs	r3, #1
   5385e:	4631      	mov	r1, r6
   53860:	4628      	mov	r0, r5
   53862:	9206      	str	r2, [sp, #24]
   53864:	47b8      	blx	r7
   53866:	3001      	adds	r0, #1
   53868:	f43f ae93 	beq.w	53592 <_printf_float+0xb6>
   5386c:	f10b 0b01 	add.w	fp, fp, #1
   53870:	9a06      	ldr	r2, [sp, #24]
   53872:	e7bb      	b.n	537ec <_printf_float+0x310>
   53874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   53878:	4631      	mov	r1, r6
   5387a:	4628      	mov	r0, r5
   5387c:	47b8      	blx	r7
   5387e:	3001      	adds	r0, #1
   53880:	d1c0      	bne.n	53804 <_printf_float+0x328>
   53882:	e686      	b.n	53592 <_printf_float+0xb6>
   53884:	9a06      	ldr	r2, [sp, #24]
   53886:	464b      	mov	r3, r9
   53888:	4631      	mov	r1, r6
   5388a:	4628      	mov	r0, r5
   5388c:	4442      	add	r2, r8
   5388e:	47b8      	blx	r7
   53890:	3001      	adds	r0, #1
   53892:	d1c3      	bne.n	5381c <_printf_float+0x340>
   53894:	e67d      	b.n	53592 <_printf_float+0xb6>
   53896:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   5389a:	f1ba 0f01 	cmp.w	sl, #1
   5389e:	dc01      	bgt.n	538a4 <_printf_float+0x3c8>
   538a0:	07db      	lsls	r3, r3, #31
   538a2:	d536      	bpl.n	53912 <_printf_float+0x436>
   538a4:	2301      	movs	r3, #1
   538a6:	4642      	mov	r2, r8
   538a8:	4631      	mov	r1, r6
   538aa:	4628      	mov	r0, r5
   538ac:	47b8      	blx	r7
   538ae:	3001      	adds	r0, #1
   538b0:	f43f ae6f 	beq.w	53592 <_printf_float+0xb6>
   538b4:	4631      	mov	r1, r6
   538b6:	4628      	mov	r0, r5
   538b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   538bc:	47b8      	blx	r7
   538be:	3001      	adds	r0, #1
   538c0:	f43f ae67 	beq.w	53592 <_printf_float+0xb6>
   538c4:	2200      	movs	r2, #0
   538c6:	2300      	movs	r3, #0
   538c8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   538cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   538d0:	f7ed f85e 	bl	40990 <__aeabi_dcmpeq>
   538d4:	b9c0      	cbnz	r0, 53908 <_printf_float+0x42c>
   538d6:	4653      	mov	r3, sl
   538d8:	f108 0201 	add.w	r2, r8, #1
   538dc:	4631      	mov	r1, r6
   538de:	4628      	mov	r0, r5
   538e0:	47b8      	blx	r7
   538e2:	3001      	adds	r0, #1
   538e4:	d10c      	bne.n	53900 <_printf_float+0x424>
   538e6:	e654      	b.n	53592 <_printf_float+0xb6>
   538e8:	2301      	movs	r3, #1
   538ea:	465a      	mov	r2, fp
   538ec:	4631      	mov	r1, r6
   538ee:	4628      	mov	r0, r5
   538f0:	47b8      	blx	r7
   538f2:	3001      	adds	r0, #1
   538f4:	f43f ae4d 	beq.w	53592 <_printf_float+0xb6>
   538f8:	f108 0801 	add.w	r8, r8, #1
   538fc:	45d0      	cmp	r8, sl
   538fe:	dbf3      	blt.n	538e8 <_printf_float+0x40c>
   53900:	464b      	mov	r3, r9
   53902:	f104 0250 	add.w	r2, r4, #80	; 0x50
   53906:	e6df      	b.n	536c8 <_printf_float+0x1ec>
   53908:	f04f 0800 	mov.w	r8, #0
   5390c:	f104 0b1a 	add.w	fp, r4, #26
   53910:	e7f4      	b.n	538fc <_printf_float+0x420>
   53912:	2301      	movs	r3, #1
   53914:	4642      	mov	r2, r8
   53916:	e7e1      	b.n	538dc <_printf_float+0x400>
   53918:	2301      	movs	r3, #1
   5391a:	464a      	mov	r2, r9
   5391c:	4631      	mov	r1, r6
   5391e:	4628      	mov	r0, r5
   53920:	47b8      	blx	r7
   53922:	3001      	adds	r0, #1
   53924:	f43f ae35 	beq.w	53592 <_printf_float+0xb6>
   53928:	f108 0801 	add.w	r8, r8, #1
   5392c:	68e3      	ldr	r3, [r4, #12]
   5392e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   53930:	1a5b      	subs	r3, r3, r1
   53932:	4543      	cmp	r3, r8
   53934:	dcf0      	bgt.n	53918 <_printf_float+0x43c>
   53936:	e6fc      	b.n	53732 <_printf_float+0x256>
   53938:	f04f 0800 	mov.w	r8, #0
   5393c:	f104 0919 	add.w	r9, r4, #25
   53940:	e7f4      	b.n	5392c <_printf_float+0x450>
   53942:	bf00      	nop

00053944 <_printf_i>:
   53944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   53948:	7e0f      	ldrb	r7, [r1, #24]
   5394a:	4691      	mov	r9, r2
   5394c:	4680      	mov	r8, r0
   5394e:	460c      	mov	r4, r1
   53950:	2f78      	cmp	r7, #120	; 0x78
   53952:	469a      	mov	sl, r3
   53954:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   53956:	f101 0243 	add.w	r2, r1, #67	; 0x43
   5395a:	d807      	bhi.n	5396c <_printf_i+0x28>
   5395c:	2f62      	cmp	r7, #98	; 0x62
   5395e:	d80a      	bhi.n	53976 <_printf_i+0x32>
   53960:	2f00      	cmp	r7, #0
   53962:	f000 80e0 	beq.w	53b26 <_printf_i+0x1e2>
   53966:	2f58      	cmp	r7, #88	; 0x58
   53968:	f000 80bb 	beq.w	53ae2 <_printf_i+0x19e>
   5396c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   53970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   53974:	e03a      	b.n	539ec <_printf_i+0xa8>
   53976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   5397a:	2b15      	cmp	r3, #21
   5397c:	d8f6      	bhi.n	5396c <_printf_i+0x28>
   5397e:	a101      	add	r1, pc, #4	; (adr r1, 53984 <_printf_i+0x40>)
   53980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   53984:	000539dd 	.word	0x000539dd
   53988:	000539f1 	.word	0x000539f1
   5398c:	0005396d 	.word	0x0005396d
   53990:	0005396d 	.word	0x0005396d
   53994:	0005396d 	.word	0x0005396d
   53998:	0005396d 	.word	0x0005396d
   5399c:	000539f1 	.word	0x000539f1
   539a0:	0005396d 	.word	0x0005396d
   539a4:	0005396d 	.word	0x0005396d
   539a8:	0005396d 	.word	0x0005396d
   539ac:	0005396d 	.word	0x0005396d
   539b0:	00053b0d 	.word	0x00053b0d
   539b4:	00053a81 	.word	0x00053a81
   539b8:	00053ac3 	.word	0x00053ac3
   539bc:	0005396d 	.word	0x0005396d
   539c0:	0005396d 	.word	0x0005396d
   539c4:	00053b2f 	.word	0x00053b2f
   539c8:	0005396d 	.word	0x0005396d
   539cc:	00053a81 	.word	0x00053a81
   539d0:	0005396d 	.word	0x0005396d
   539d4:	0005396d 	.word	0x0005396d
   539d8:	00053acb 	.word	0x00053acb
   539dc:	682b      	ldr	r3, [r5, #0]
   539de:	f104 0642 	add.w	r6, r4, #66	; 0x42
   539e2:	1d1a      	adds	r2, r3, #4
   539e4:	681b      	ldr	r3, [r3, #0]
   539e6:	602a      	str	r2, [r5, #0]
   539e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   539ec:	2301      	movs	r3, #1
   539ee:	e0ab      	b.n	53b48 <_printf_i+0x204>
   539f0:	6823      	ldr	r3, [r4, #0]
   539f2:	6829      	ldr	r1, [r5, #0]
   539f4:	061f      	lsls	r7, r3, #24
   539f6:	f101 0004 	add.w	r0, r1, #4
   539fa:	6028      	str	r0, [r5, #0]
   539fc:	d501      	bpl.n	53a02 <_printf_i+0xbe>
   539fe:	680d      	ldr	r5, [r1, #0]
   53a00:	e003      	b.n	53a0a <_printf_i+0xc6>
   53a02:	065e      	lsls	r6, r3, #25
   53a04:	d5fb      	bpl.n	539fe <_printf_i+0xba>
   53a06:	f9b1 5000 	ldrsh.w	r5, [r1]
   53a0a:	2d00      	cmp	r5, #0
   53a0c:	6861      	ldr	r1, [r4, #4]
   53a0e:	da7a      	bge.n	53b06 <_printf_i+0x1c2>
   53a10:	202d      	movs	r0, #45	; 0x2d
   53a12:	2900      	cmp	r1, #0
   53a14:	60a1      	str	r1, [r4, #8]
   53a16:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   53a1a:	da2d      	bge.n	53a78 <_printf_i+0x134>
   53a1c:	426d      	negs	r5, r5
   53a1e:	485e      	ldr	r0, [pc, #376]	; (53b98 <_printf_i+0x254>)
   53a20:	230a      	movs	r3, #10
   53a22:	4616      	mov	r6, r2
   53a24:	fbb5 f1f3 	udiv	r1, r5, r3
   53a28:	fb03 5711 	mls	r7, r3, r1, r5
   53a2c:	5dc7      	ldrb	r7, [r0, r7]
   53a2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
   53a32:	462f      	mov	r7, r5
   53a34:	460d      	mov	r5, r1
   53a36:	42bb      	cmp	r3, r7
   53a38:	d9f4      	bls.n	53a24 <_printf_i+0xe0>
   53a3a:	2b08      	cmp	r3, #8
   53a3c:	d10b      	bne.n	53a56 <_printf_i+0x112>
   53a3e:	6823      	ldr	r3, [r4, #0]
   53a40:	07df      	lsls	r7, r3, #31
   53a42:	d508      	bpl.n	53a56 <_printf_i+0x112>
   53a44:	6923      	ldr	r3, [r4, #16]
   53a46:	6861      	ldr	r1, [r4, #4]
   53a48:	4299      	cmp	r1, r3
   53a4a:	bfde      	ittt	le
   53a4c:	2330      	movle	r3, #48	; 0x30
   53a4e:	f806 3c01 	strble.w	r3, [r6, #-1]
   53a52:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   53a56:	1b92      	subs	r2, r2, r6
   53a58:	6122      	str	r2, [r4, #16]
   53a5a:	464b      	mov	r3, r9
   53a5c:	aa03      	add	r2, sp, #12
   53a5e:	4621      	mov	r1, r4
   53a60:	4640      	mov	r0, r8
   53a62:	f8cd a000 	str.w	sl, [sp]
   53a66:	f007 fae9 	bl	5b03c <_printf_common>
   53a6a:	3001      	adds	r0, #1
   53a6c:	d171      	bne.n	53b52 <_printf_i+0x20e>
   53a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   53a72:	b004      	add	sp, #16
   53a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   53a78:	f023 0304 	bic.w	r3, r3, #4
   53a7c:	6023      	str	r3, [r4, #0]
   53a7e:	e7cd      	b.n	53a1c <_printf_i+0xd8>
   53a80:	682b      	ldr	r3, [r5, #0]
   53a82:	6820      	ldr	r0, [r4, #0]
   53a84:	1d19      	adds	r1, r3, #4
   53a86:	6029      	str	r1, [r5, #0]
   53a88:	0605      	lsls	r5, r0, #24
   53a8a:	d501      	bpl.n	53a90 <_printf_i+0x14c>
   53a8c:	681d      	ldr	r5, [r3, #0]
   53a8e:	e002      	b.n	53a96 <_printf_i+0x152>
   53a90:	0641      	lsls	r1, r0, #25
   53a92:	d5fb      	bpl.n	53a8c <_printf_i+0x148>
   53a94:	881d      	ldrh	r5, [r3, #0]
   53a96:	2f6f      	cmp	r7, #111	; 0x6f
   53a98:	483f      	ldr	r0, [pc, #252]	; (53b98 <_printf_i+0x254>)
   53a9a:	bf14      	ite	ne
   53a9c:	230a      	movne	r3, #10
   53a9e:	2308      	moveq	r3, #8
   53aa0:	2100      	movs	r1, #0
   53aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   53aa6:	6866      	ldr	r6, [r4, #4]
   53aa8:	2e00      	cmp	r6, #0
   53aaa:	60a6      	str	r6, [r4, #8]
   53aac:	dbb9      	blt.n	53a22 <_printf_i+0xde>
   53aae:	6821      	ldr	r1, [r4, #0]
   53ab0:	f021 0104 	bic.w	r1, r1, #4
   53ab4:	6021      	str	r1, [r4, #0]
   53ab6:	2d00      	cmp	r5, #0
   53ab8:	d1b3      	bne.n	53a22 <_printf_i+0xde>
   53aba:	2e00      	cmp	r6, #0
   53abc:	d1b1      	bne.n	53a22 <_printf_i+0xde>
   53abe:	4616      	mov	r6, r2
   53ac0:	e7bb      	b.n	53a3a <_printf_i+0xf6>
   53ac2:	6823      	ldr	r3, [r4, #0]
   53ac4:	f043 0320 	orr.w	r3, r3, #32
   53ac8:	6023      	str	r3, [r4, #0]
   53aca:	2778      	movs	r7, #120	; 0x78
   53acc:	4833      	ldr	r0, [pc, #204]	; (53b9c <_printf_i+0x258>)
   53ace:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   53ad2:	6829      	ldr	r1, [r5, #0]
   53ad4:	6823      	ldr	r3, [r4, #0]
   53ad6:	1d0e      	adds	r6, r1, #4
   53ad8:	602e      	str	r6, [r5, #0]
   53ada:	061e      	lsls	r6, r3, #24
   53adc:	d503      	bpl.n	53ae6 <_printf_i+0x1a2>
   53ade:	680d      	ldr	r5, [r1, #0]
   53ae0:	e004      	b.n	53aec <_printf_i+0x1a8>
   53ae2:	482d      	ldr	r0, [pc, #180]	; (53b98 <_printf_i+0x254>)
   53ae4:	e7f3      	b.n	53ace <_printf_i+0x18a>
   53ae6:	065d      	lsls	r5, r3, #25
   53ae8:	d5f9      	bpl.n	53ade <_printf_i+0x19a>
   53aea:	880d      	ldrh	r5, [r1, #0]
   53aec:	07d9      	lsls	r1, r3, #31
   53aee:	bf44      	itt	mi
   53af0:	f043 0320 	orrmi.w	r3, r3, #32
   53af4:	6023      	strmi	r3, [r4, #0]
   53af6:	b10d      	cbz	r5, 53afc <_printf_i+0x1b8>
   53af8:	2310      	movs	r3, #16
   53afa:	e7d1      	b.n	53aa0 <_printf_i+0x15c>
   53afc:	6823      	ldr	r3, [r4, #0]
   53afe:	f023 0320 	bic.w	r3, r3, #32
   53b02:	6023      	str	r3, [r4, #0]
   53b04:	e7f8      	b.n	53af8 <_printf_i+0x1b4>
   53b06:	4824      	ldr	r0, [pc, #144]	; (53b98 <_printf_i+0x254>)
   53b08:	230a      	movs	r3, #10
   53b0a:	e7cc      	b.n	53aa6 <_printf_i+0x162>
   53b0c:	682b      	ldr	r3, [r5, #0]
   53b0e:	6826      	ldr	r6, [r4, #0]
   53b10:	1d18      	adds	r0, r3, #4
   53b12:	6961      	ldr	r1, [r4, #20]
   53b14:	6028      	str	r0, [r5, #0]
   53b16:	0635      	lsls	r5, r6, #24
   53b18:	681b      	ldr	r3, [r3, #0]
   53b1a:	d501      	bpl.n	53b20 <_printf_i+0x1dc>
   53b1c:	6019      	str	r1, [r3, #0]
   53b1e:	e002      	b.n	53b26 <_printf_i+0x1e2>
   53b20:	0670      	lsls	r0, r6, #25
   53b22:	d5fb      	bpl.n	53b1c <_printf_i+0x1d8>
   53b24:	8019      	strh	r1, [r3, #0]
   53b26:	2300      	movs	r3, #0
   53b28:	4616      	mov	r6, r2
   53b2a:	6123      	str	r3, [r4, #16]
   53b2c:	e795      	b.n	53a5a <_printf_i+0x116>
   53b2e:	682b      	ldr	r3, [r5, #0]
   53b30:	2100      	movs	r1, #0
   53b32:	1d1a      	adds	r2, r3, #4
   53b34:	602a      	str	r2, [r5, #0]
   53b36:	681e      	ldr	r6, [r3, #0]
   53b38:	6862      	ldr	r2, [r4, #4]
   53b3a:	4630      	mov	r0, r6
   53b3c:	f007 f96f 	bl	5ae1e <memchr>
   53b40:	b108      	cbz	r0, 53b46 <_printf_i+0x202>
   53b42:	1b80      	subs	r0, r0, r6
   53b44:	6060      	str	r0, [r4, #4]
   53b46:	6863      	ldr	r3, [r4, #4]
   53b48:	6123      	str	r3, [r4, #16]
   53b4a:	2300      	movs	r3, #0
   53b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   53b50:	e783      	b.n	53a5a <_printf_i+0x116>
   53b52:	6923      	ldr	r3, [r4, #16]
   53b54:	4632      	mov	r2, r6
   53b56:	4649      	mov	r1, r9
   53b58:	4640      	mov	r0, r8
   53b5a:	47d0      	blx	sl
   53b5c:	3001      	adds	r0, #1
   53b5e:	d086      	beq.n	53a6e <_printf_i+0x12a>
   53b60:	6823      	ldr	r3, [r4, #0]
   53b62:	079b      	lsls	r3, r3, #30
   53b64:	d414      	bmi.n	53b90 <_printf_i+0x24c>
   53b66:	68e0      	ldr	r0, [r4, #12]
   53b68:	9b03      	ldr	r3, [sp, #12]
   53b6a:	4298      	cmp	r0, r3
   53b6c:	bfb8      	it	lt
   53b6e:	4618      	movlt	r0, r3
   53b70:	e77f      	b.n	53a72 <_printf_i+0x12e>
   53b72:	2301      	movs	r3, #1
   53b74:	4632      	mov	r2, r6
   53b76:	4649      	mov	r1, r9
   53b78:	4640      	mov	r0, r8
   53b7a:	47d0      	blx	sl
   53b7c:	3001      	adds	r0, #1
   53b7e:	f43f af76 	beq.w	53a6e <_printf_i+0x12a>
   53b82:	3501      	adds	r5, #1
   53b84:	68e3      	ldr	r3, [r4, #12]
   53b86:	9903      	ldr	r1, [sp, #12]
   53b88:	1a5b      	subs	r3, r3, r1
   53b8a:	42ab      	cmp	r3, r5
   53b8c:	dcf1      	bgt.n	53b72 <_printf_i+0x22e>
   53b8e:	e7ea      	b.n	53b66 <_printf_i+0x222>
   53b90:	2500      	movs	r5, #0
   53b92:	f104 0619 	add.w	r6, r4, #25
   53b96:	e7f5      	b.n	53b84 <_printf_i+0x240>
   53b98:	000609cf 	.word	0x000609cf
   53b9c:	000609e0 	.word	0x000609e0

00053ba0 <_sbrk_r>:
   53ba0:	b538      	push	{r3, r4, r5, lr}
   53ba2:	2300      	movs	r3, #0
   53ba4:	4d05      	ldr	r5, [pc, #20]	; (53bbc <_sbrk_r+0x1c>)
   53ba6:	4604      	mov	r4, r0
   53ba8:	4608      	mov	r0, r1
   53baa:	602b      	str	r3, [r5, #0]
   53bac:	f7f2 ff76 	bl	46a9c <_sbrk>
   53bb0:	1c43      	adds	r3, r0, #1
   53bb2:	d102      	bne.n	53bba <_sbrk_r+0x1a>
   53bb4:	682b      	ldr	r3, [r5, #0]
   53bb6:	b103      	cbz	r3, 53bba <_sbrk_r+0x1a>
   53bb8:	6023      	str	r3, [r4, #0]
   53bba:	bd38      	pop	{r3, r4, r5, pc}
   53bbc:	2001bcc8 	.word	0x2001bcc8

00053bc0 <_strtol_l.constprop.0>:
   53bc0:	2b24      	cmp	r3, #36	; 0x24
   53bc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   53bc6:	4686      	mov	lr, r0
   53bc8:	4690      	mov	r8, r2
   53bca:	d801      	bhi.n	53bd0 <_strtol_l.constprop.0+0x10>
   53bcc:	2b01      	cmp	r3, #1
   53bce:	d106      	bne.n	53bde <_strtol_l.constprop.0+0x1e>
   53bd0:	f002 fa90 	bl	560f4 <__errno>
   53bd4:	2316      	movs	r3, #22
   53bd6:	6003      	str	r3, [r0, #0]
   53bd8:	2000      	movs	r0, #0
   53bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   53bde:	460d      	mov	r5, r1
   53be0:	4835      	ldr	r0, [pc, #212]	; (53cb8 <_strtol_l.constprop.0+0xf8>)
   53be2:	462a      	mov	r2, r5
   53be4:	f815 4b01 	ldrb.w	r4, [r5], #1
   53be8:	5d06      	ldrb	r6, [r0, r4]
   53bea:	f016 0608 	ands.w	r6, r6, #8
   53bee:	d1f8      	bne.n	53be2 <_strtol_l.constprop.0+0x22>
   53bf0:	2c2d      	cmp	r4, #45	; 0x2d
   53bf2:	d124      	bne.n	53c3e <_strtol_l.constprop.0+0x7e>
   53bf4:	782c      	ldrb	r4, [r5, #0]
   53bf6:	2601      	movs	r6, #1
   53bf8:	1c95      	adds	r5, r2, #2
   53bfa:	bb2b      	cbnz	r3, 53c48 <_strtol_l.constprop.0+0x88>
   53bfc:	2c30      	cmp	r4, #48	; 0x30
   53bfe:	d030      	beq.n	53c62 <_strtol_l.constprop.0+0xa2>
   53c00:	230a      	movs	r3, #10
   53c02:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   53c06:	2200      	movs	r2, #0
   53c08:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   53c0c:	4610      	mov	r0, r2
   53c0e:	fbbc f9f3 	udiv	r9, ip, r3
   53c12:	fb03 ca19 	mls	sl, r3, r9, ip
   53c16:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   53c1a:	2f09      	cmp	r7, #9
   53c1c:	d828      	bhi.n	53c70 <_strtol_l.constprop.0+0xb0>
   53c1e:	463c      	mov	r4, r7
   53c20:	42a3      	cmp	r3, r4
   53c22:	dd34      	ble.n	53c8e <_strtol_l.constprop.0+0xce>
   53c24:	1c57      	adds	r7, r2, #1
   53c26:	d007      	beq.n	53c38 <_strtol_l.constprop.0+0x78>
   53c28:	4581      	cmp	r9, r0
   53c2a:	d32d      	bcc.n	53c88 <_strtol_l.constprop.0+0xc8>
   53c2c:	d101      	bne.n	53c32 <_strtol_l.constprop.0+0x72>
   53c2e:	45a2      	cmp	sl, r4
   53c30:	db2a      	blt.n	53c88 <_strtol_l.constprop.0+0xc8>
   53c32:	fb00 4003 	mla	r0, r0, r3, r4
   53c36:	2201      	movs	r2, #1
   53c38:	f815 4b01 	ldrb.w	r4, [r5], #1
   53c3c:	e7eb      	b.n	53c16 <_strtol_l.constprop.0+0x56>
   53c3e:	2c2b      	cmp	r4, #43	; 0x2b
   53c40:	bf04      	itt	eq
   53c42:	782c      	ldrbeq	r4, [r5, #0]
   53c44:	1c95      	addeq	r5, r2, #2
   53c46:	e7d8      	b.n	53bfa <_strtol_l.constprop.0+0x3a>
   53c48:	2b10      	cmp	r3, #16
   53c4a:	d1da      	bne.n	53c02 <_strtol_l.constprop.0+0x42>
   53c4c:	2c30      	cmp	r4, #48	; 0x30
   53c4e:	d1d8      	bne.n	53c02 <_strtol_l.constprop.0+0x42>
   53c50:	782a      	ldrb	r2, [r5, #0]
   53c52:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   53c56:	2a58      	cmp	r2, #88	; 0x58
   53c58:	d1d3      	bne.n	53c02 <_strtol_l.constprop.0+0x42>
   53c5a:	786c      	ldrb	r4, [r5, #1]
   53c5c:	2310      	movs	r3, #16
   53c5e:	3502      	adds	r5, #2
   53c60:	e7cf      	b.n	53c02 <_strtol_l.constprop.0+0x42>
   53c62:	782b      	ldrb	r3, [r5, #0]
   53c64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   53c68:	2b58      	cmp	r3, #88	; 0x58
   53c6a:	d0f6      	beq.n	53c5a <_strtol_l.constprop.0+0x9a>
   53c6c:	2308      	movs	r3, #8
   53c6e:	e7c8      	b.n	53c02 <_strtol_l.constprop.0+0x42>
   53c70:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   53c74:	2f19      	cmp	r7, #25
   53c76:	d801      	bhi.n	53c7c <_strtol_l.constprop.0+0xbc>
   53c78:	3c37      	subs	r4, #55	; 0x37
   53c7a:	e7d1      	b.n	53c20 <_strtol_l.constprop.0+0x60>
   53c7c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   53c80:	2f19      	cmp	r7, #25
   53c82:	d804      	bhi.n	53c8e <_strtol_l.constprop.0+0xce>
   53c84:	3c57      	subs	r4, #87	; 0x57
   53c86:	e7cb      	b.n	53c20 <_strtol_l.constprop.0+0x60>
   53c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   53c8c:	e7d4      	b.n	53c38 <_strtol_l.constprop.0+0x78>
   53c8e:	1c53      	adds	r3, r2, #1
   53c90:	d108      	bne.n	53ca4 <_strtol_l.constprop.0+0xe4>
   53c92:	2322      	movs	r3, #34	; 0x22
   53c94:	4660      	mov	r0, ip
   53c96:	f8ce 3000 	str.w	r3, [lr]
   53c9a:	f1b8 0f00 	cmp.w	r8, #0
   53c9e:	d09c      	beq.n	53bda <_strtol_l.constprop.0+0x1a>
   53ca0:	1e69      	subs	r1, r5, #1
   53ca2:	e006      	b.n	53cb2 <_strtol_l.constprop.0+0xf2>
   53ca4:	b106      	cbz	r6, 53ca8 <_strtol_l.constprop.0+0xe8>
   53ca6:	4240      	negs	r0, r0
   53ca8:	f1b8 0f00 	cmp.w	r8, #0
   53cac:	d095      	beq.n	53bda <_strtol_l.constprop.0+0x1a>
   53cae:	2a00      	cmp	r2, #0
   53cb0:	d1f6      	bne.n	53ca0 <_strtol_l.constprop.0+0xe0>
   53cb2:	f8c8 1000 	str.w	r1, [r8]
   53cb6:	e790      	b.n	53bda <_strtol_l.constprop.0+0x1a>
   53cb8:	000608c3 	.word	0x000608c3

00053cbc <strtol>:
   53cbc:	4613      	mov	r3, r2
   53cbe:	460a      	mov	r2, r1
   53cc0:	4601      	mov	r1, r0
   53cc2:	4802      	ldr	r0, [pc, #8]	; (53ccc <strtol+0x10>)
   53cc4:	6800      	ldr	r0, [r0, #0]
   53cc6:	f7ff bf7b 	b.w	53bc0 <_strtol_l.constprop.0>
   53cca:	bf00      	nop
   53ccc:	2001a830 	.word	0x2001a830

00053cd0 <_strtoll_l.constprop.0>:
   53cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   53cd4:	4690      	mov	r8, r2
   53cd6:	b085      	sub	sp, #20
   53cd8:	4689      	mov	r9, r1
   53cda:	461e      	mov	r6, r3
   53cdc:	460d      	mov	r5, r1
   53cde:	4a45      	ldr	r2, [pc, #276]	; (53df4 <_strtoll_l.constprop.0+0x124>)
   53ce0:	9002      	str	r0, [sp, #8]
   53ce2:	462b      	mov	r3, r5
   53ce4:	f815 4b01 	ldrb.w	r4, [r5], #1
   53ce8:	5d17      	ldrb	r7, [r2, r4]
   53cea:	f017 0708 	ands.w	r7, r7, #8
   53cee:	d1f8      	bne.n	53ce2 <_strtoll_l.constprop.0+0x12>
   53cf0:	2c2d      	cmp	r4, #45	; 0x2d
   53cf2:	d141      	bne.n	53d78 <_strtoll_l.constprop.0+0xa8>
   53cf4:	782c      	ldrb	r4, [r5, #0]
   53cf6:	2701      	movs	r7, #1
   53cf8:	1c9d      	adds	r5, r3, #2
   53cfa:	2e00      	cmp	r6, #0
   53cfc:	d141      	bne.n	53d82 <_strtoll_l.constprop.0+0xb2>
   53cfe:	2c30      	cmp	r4, #48	; 0x30
   53d00:	d04c      	beq.n	53d9c <_strtoll_l.constprop.0+0xcc>
   53d02:	260a      	movs	r6, #10
   53d04:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   53d08:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
   53d0c:	17f3      	asrs	r3, r6, #31
   53d0e:	4632      	mov	r2, r6
   53d10:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   53d14:	4658      	mov	r0, fp
   53d16:	9303      	str	r3, [sp, #12]
   53d18:	4651      	mov	r1, sl
   53d1a:	f7ec fef9 	bl	40b10 <__aeabi_uldivmod>
   53d1e:	9201      	str	r2, [sp, #4]
   53d20:	2200      	movs	r2, #0
   53d22:	468e      	mov	lr, r1
   53d24:	4684      	mov	ip, r0
   53d26:	4611      	mov	r1, r2
   53d28:	4610      	mov	r0, r2
   53d2a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   53d2e:	2b09      	cmp	r3, #9
   53d30:	d905      	bls.n	53d3e <_strtoll_l.constprop.0+0x6e>
   53d32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   53d36:	2b19      	cmp	r3, #25
   53d38:	d837      	bhi.n	53daa <_strtoll_l.constprop.0+0xda>
   53d3a:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   53d3e:	429e      	cmp	r6, r3
   53d40:	dd3d      	ble.n	53dbe <_strtoll_l.constprop.0+0xee>
   53d42:	1c54      	adds	r4, r2, #1
   53d44:	d015      	beq.n	53d72 <_strtoll_l.constprop.0+0xa2>
   53d46:	4584      	cmp	ip, r0
   53d48:	eb7e 0201 	sbcs.w	r2, lr, r1
   53d4c:	d334      	bcc.n	53db8 <_strtoll_l.constprop.0+0xe8>
   53d4e:	458e      	cmp	lr, r1
   53d50:	bf08      	it	eq
   53d52:	4584      	cmpeq	ip, r0
   53d54:	d102      	bne.n	53d5c <_strtoll_l.constprop.0+0x8c>
   53d56:	9a01      	ldr	r2, [sp, #4]
   53d58:	429a      	cmp	r2, r3
   53d5a:	db2d      	blt.n	53db8 <_strtoll_l.constprop.0+0xe8>
   53d5c:	9a03      	ldr	r2, [sp, #12]
   53d5e:	4371      	muls	r1, r6
   53d60:	fb00 1102 	mla	r1, r0, r2, r1
   53d64:	fba6 0200 	umull	r0, r2, r6, r0
   53d68:	440a      	add	r2, r1
   53d6a:	1818      	adds	r0, r3, r0
   53d6c:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   53d70:	2201      	movs	r2, #1
   53d72:	f815 4b01 	ldrb.w	r4, [r5], #1
   53d76:	e7d8      	b.n	53d2a <_strtoll_l.constprop.0+0x5a>
   53d78:	2c2b      	cmp	r4, #43	; 0x2b
   53d7a:	bf04      	itt	eq
   53d7c:	782c      	ldrbeq	r4, [r5, #0]
   53d7e:	1c9d      	addeq	r5, r3, #2
   53d80:	e7bb      	b.n	53cfa <_strtoll_l.constprop.0+0x2a>
   53d82:	2e10      	cmp	r6, #16
   53d84:	d1be      	bne.n	53d04 <_strtoll_l.constprop.0+0x34>
   53d86:	2c30      	cmp	r4, #48	; 0x30
   53d88:	d1bc      	bne.n	53d04 <_strtoll_l.constprop.0+0x34>
   53d8a:	782b      	ldrb	r3, [r5, #0]
   53d8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   53d90:	2b58      	cmp	r3, #88	; 0x58
   53d92:	d1b7      	bne.n	53d04 <_strtoll_l.constprop.0+0x34>
   53d94:	786c      	ldrb	r4, [r5, #1]
   53d96:	2610      	movs	r6, #16
   53d98:	3502      	adds	r5, #2
   53d9a:	e7b3      	b.n	53d04 <_strtoll_l.constprop.0+0x34>
   53d9c:	782b      	ldrb	r3, [r5, #0]
   53d9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   53da2:	2b58      	cmp	r3, #88	; 0x58
   53da4:	d0f6      	beq.n	53d94 <_strtoll_l.constprop.0+0xc4>
   53da6:	2608      	movs	r6, #8
   53da8:	e7ac      	b.n	53d04 <_strtoll_l.constprop.0+0x34>
   53daa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   53dae:	2b19      	cmp	r3, #25
   53db0:	d805      	bhi.n	53dbe <_strtoll_l.constprop.0+0xee>
   53db2:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   53db6:	e7c2      	b.n	53d3e <_strtoll_l.constprop.0+0x6e>
   53db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   53dbc:	e7d9      	b.n	53d72 <_strtoll_l.constprop.0+0xa2>
   53dbe:	1c53      	adds	r3, r2, #1
   53dc0:	d10a      	bne.n	53dd8 <_strtoll_l.constprop.0+0x108>
   53dc2:	2322      	movs	r3, #34	; 0x22
   53dc4:	9a02      	ldr	r2, [sp, #8]
   53dc6:	4658      	mov	r0, fp
   53dc8:	4651      	mov	r1, sl
   53dca:	6013      	str	r3, [r2, #0]
   53dcc:	f1b8 0f00 	cmp.w	r8, #0
   53dd0:	d10a      	bne.n	53de8 <_strtoll_l.constprop.0+0x118>
   53dd2:	b005      	add	sp, #20
   53dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53dd8:	b117      	cbz	r7, 53de0 <_strtoll_l.constprop.0+0x110>
   53dda:	4240      	negs	r0, r0
   53ddc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   53de0:	f1b8 0f00 	cmp.w	r8, #0
   53de4:	d0f5      	beq.n	53dd2 <_strtoll_l.constprop.0+0x102>
   53de6:	b10a      	cbz	r2, 53dec <_strtoll_l.constprop.0+0x11c>
   53de8:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   53dec:	f8c8 9000 	str.w	r9, [r8]
   53df0:	e7ef      	b.n	53dd2 <_strtoll_l.constprop.0+0x102>
   53df2:	bf00      	nop
   53df4:	000608c3 	.word	0x000608c3

00053df8 <strtoll>:
   53df8:	4613      	mov	r3, r2
   53dfa:	460a      	mov	r2, r1
   53dfc:	4601      	mov	r1, r0
   53dfe:	4802      	ldr	r0, [pc, #8]	; (53e08 <strtoll+0x10>)
   53e00:	6800      	ldr	r0, [r0, #0]
   53e02:	f7ff bf65 	b.w	53cd0 <_strtoll_l.constprop.0>
   53e06:	bf00      	nop
   53e08:	2001a830 	.word	0x2001a830

00053e0c <_strtoul_l.constprop.0>:
   53e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   53e10:	4686      	mov	lr, r0
   53e12:	460d      	mov	r5, r1
   53e14:	4e35      	ldr	r6, [pc, #212]	; (53eec <_strtoul_l.constprop.0+0xe0>)
   53e16:	4628      	mov	r0, r5
   53e18:	f815 4b01 	ldrb.w	r4, [r5], #1
   53e1c:	5d37      	ldrb	r7, [r6, r4]
   53e1e:	f017 0708 	ands.w	r7, r7, #8
   53e22:	d1f8      	bne.n	53e16 <_strtoul_l.constprop.0+0xa>
   53e24:	2c2d      	cmp	r4, #45	; 0x2d
   53e26:	d126      	bne.n	53e76 <_strtoul_l.constprop.0+0x6a>
   53e28:	782c      	ldrb	r4, [r5, #0]
   53e2a:	2701      	movs	r7, #1
   53e2c:	1c85      	adds	r5, r0, #2
   53e2e:	bb3b      	cbnz	r3, 53e80 <_strtoul_l.constprop.0+0x74>
   53e30:	2c30      	cmp	r4, #48	; 0x30
   53e32:	d032      	beq.n	53e9a <_strtoul_l.constprop.0+0x8e>
   53e34:	230a      	movs	r3, #10
   53e36:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   53e3a:	2600      	movs	r6, #0
   53e3c:	fbb8 f8f3 	udiv	r8, r8, r3
   53e40:	fb03 f908 	mul.w	r9, r3, r8
   53e44:	4630      	mov	r0, r6
   53e46:	ea6f 0909 	mvn.w	r9, r9
   53e4a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   53e4e:	f1bc 0f09 	cmp.w	ip, #9
   53e52:	d829      	bhi.n	53ea8 <_strtoul_l.constprop.0+0x9c>
   53e54:	4664      	mov	r4, ip
   53e56:	42a3      	cmp	r3, r4
   53e58:	dd37      	ble.n	53eca <_strtoul_l.constprop.0+0xbe>
   53e5a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   53e5e:	d007      	beq.n	53e70 <_strtoul_l.constprop.0+0x64>
   53e60:	4580      	cmp	r8, r0
   53e62:	d32f      	bcc.n	53ec4 <_strtoul_l.constprop.0+0xb8>
   53e64:	d101      	bne.n	53e6a <_strtoul_l.constprop.0+0x5e>
   53e66:	45a1      	cmp	r9, r4
   53e68:	db2c      	blt.n	53ec4 <_strtoul_l.constprop.0+0xb8>
   53e6a:	fb00 4003 	mla	r0, r0, r3, r4
   53e6e:	2601      	movs	r6, #1
   53e70:	f815 4b01 	ldrb.w	r4, [r5], #1
   53e74:	e7e9      	b.n	53e4a <_strtoul_l.constprop.0+0x3e>
   53e76:	2c2b      	cmp	r4, #43	; 0x2b
   53e78:	bf04      	itt	eq
   53e7a:	782c      	ldrbeq	r4, [r5, #0]
   53e7c:	1c85      	addeq	r5, r0, #2
   53e7e:	e7d6      	b.n	53e2e <_strtoul_l.constprop.0+0x22>
   53e80:	2b10      	cmp	r3, #16
   53e82:	d1d8      	bne.n	53e36 <_strtoul_l.constprop.0+0x2a>
   53e84:	2c30      	cmp	r4, #48	; 0x30
   53e86:	d1d6      	bne.n	53e36 <_strtoul_l.constprop.0+0x2a>
   53e88:	7828      	ldrb	r0, [r5, #0]
   53e8a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   53e8e:	2858      	cmp	r0, #88	; 0x58
   53e90:	d1d1      	bne.n	53e36 <_strtoul_l.constprop.0+0x2a>
   53e92:	786c      	ldrb	r4, [r5, #1]
   53e94:	2310      	movs	r3, #16
   53e96:	3502      	adds	r5, #2
   53e98:	e7cd      	b.n	53e36 <_strtoul_l.constprop.0+0x2a>
   53e9a:	782b      	ldrb	r3, [r5, #0]
   53e9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   53ea0:	2b58      	cmp	r3, #88	; 0x58
   53ea2:	d0f6      	beq.n	53e92 <_strtoul_l.constprop.0+0x86>
   53ea4:	2308      	movs	r3, #8
   53ea6:	e7c6      	b.n	53e36 <_strtoul_l.constprop.0+0x2a>
   53ea8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   53eac:	f1bc 0f19 	cmp.w	ip, #25
   53eb0:	d801      	bhi.n	53eb6 <_strtoul_l.constprop.0+0xaa>
   53eb2:	3c37      	subs	r4, #55	; 0x37
   53eb4:	e7cf      	b.n	53e56 <_strtoul_l.constprop.0+0x4a>
   53eb6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   53eba:	f1bc 0f19 	cmp.w	ip, #25
   53ebe:	d804      	bhi.n	53eca <_strtoul_l.constprop.0+0xbe>
   53ec0:	3c57      	subs	r4, #87	; 0x57
   53ec2:	e7c8      	b.n	53e56 <_strtoul_l.constprop.0+0x4a>
   53ec4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   53ec8:	e7d2      	b.n	53e70 <_strtoul_l.constprop.0+0x64>
   53eca:	1c73      	adds	r3, r6, #1
   53ecc:	d106      	bne.n	53edc <_strtoul_l.constprop.0+0xd0>
   53ece:	2322      	movs	r3, #34	; 0x22
   53ed0:	4630      	mov	r0, r6
   53ed2:	f8ce 3000 	str.w	r3, [lr]
   53ed6:	b932      	cbnz	r2, 53ee6 <_strtoul_l.constprop.0+0xda>
   53ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   53edc:	b107      	cbz	r7, 53ee0 <_strtoul_l.constprop.0+0xd4>
   53ede:	4240      	negs	r0, r0
   53ee0:	2a00      	cmp	r2, #0
   53ee2:	d0f9      	beq.n	53ed8 <_strtoul_l.constprop.0+0xcc>
   53ee4:	b106      	cbz	r6, 53ee8 <_strtoul_l.constprop.0+0xdc>
   53ee6:	1e69      	subs	r1, r5, #1
   53ee8:	6011      	str	r1, [r2, #0]
   53eea:	e7f5      	b.n	53ed8 <_strtoul_l.constprop.0+0xcc>
   53eec:	000608c3 	.word	0x000608c3

00053ef0 <strtoul>:
   53ef0:	4613      	mov	r3, r2
   53ef2:	460a      	mov	r2, r1
   53ef4:	4601      	mov	r1, r0
   53ef6:	4802      	ldr	r0, [pc, #8]	; (53f00 <strtoul+0x10>)
   53ef8:	6800      	ldr	r0, [r0, #0]
   53efa:	f7ff bf87 	b.w	53e0c <_strtoul_l.constprop.0>
   53efe:	bf00      	nop
   53f00:	2001a830 	.word	0x2001a830

00053f04 <vsniprintf>:
   53f04:	b507      	push	{r0, r1, r2, lr}
   53f06:	9300      	str	r3, [sp, #0]
   53f08:	4613      	mov	r3, r2
   53f0a:	460a      	mov	r2, r1
   53f0c:	4601      	mov	r1, r0
   53f0e:	4803      	ldr	r0, [pc, #12]	; (53f1c <vsniprintf+0x18>)
   53f10:	6800      	ldr	r0, [r0, #0]
   53f12:	f007 f9f8 	bl	5b306 <_vsniprintf_r>
   53f16:	b003      	add	sp, #12
   53f18:	f85d fb04 	ldr.w	pc, [sp], #4
   53f1c:	2001a830 	.word	0x2001a830

00053f20 <_vsiprintf_r>:
   53f20:	b500      	push	{lr}
   53f22:	b09b      	sub	sp, #108	; 0x6c
   53f24:	9100      	str	r1, [sp, #0]
   53f26:	9104      	str	r1, [sp, #16]
   53f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   53f2c:	9105      	str	r1, [sp, #20]
   53f2e:	9102      	str	r1, [sp, #8]
   53f30:	4905      	ldr	r1, [pc, #20]	; (53f48 <_vsiprintf_r+0x28>)
   53f32:	9103      	str	r1, [sp, #12]
   53f34:	4669      	mov	r1, sp
   53f36:	f000 fba5 	bl	54684 <_svfiprintf_r>
   53f3a:	9b00      	ldr	r3, [sp, #0]
   53f3c:	2200      	movs	r2, #0
   53f3e:	701a      	strb	r2, [r3, #0]
   53f40:	b01b      	add	sp, #108	; 0x6c
   53f42:	f85d fb04 	ldr.w	pc, [sp], #4
   53f46:	bf00      	nop
   53f48:	ffff0208 	.word	0xffff0208

00053f4c <vsiprintf>:
   53f4c:	4613      	mov	r3, r2
   53f4e:	460a      	mov	r2, r1
   53f50:	4601      	mov	r1, r0
   53f52:	4802      	ldr	r0, [pc, #8]	; (53f5c <vsiprintf+0x10>)
   53f54:	6800      	ldr	r0, [r0, #0]
   53f56:	f7ff bfe3 	b.w	53f20 <_vsiprintf_r>
   53f5a:	bf00      	nop
   53f5c:	2001a830 	.word	0x2001a830

00053f60 <_vsiscanf_r>:
   53f60:	b570      	push	{r4, r5, r6, lr}
   53f62:	461e      	mov	r6, r3
   53f64:	b09a      	sub	sp, #104	; 0x68
   53f66:	f44f 7301 	mov.w	r3, #516	; 0x204
   53f6a:	4604      	mov	r4, r0
   53f6c:	4608      	mov	r0, r1
   53f6e:	4615      	mov	r5, r2
   53f70:	f8ad 300c 	strh.w	r3, [sp, #12]
   53f74:	9100      	str	r1, [sp, #0]
   53f76:	9104      	str	r1, [sp, #16]
   53f78:	f7ec ff3c 	bl	40df4 <strlen>
   53f7c:	4b09      	ldr	r3, [pc, #36]	; (53fa4 <_vsiscanf_r+0x44>)
   53f7e:	462a      	mov	r2, r5
   53f80:	4669      	mov	r1, sp
   53f82:	9001      	str	r0, [sp, #4]
   53f84:	9309      	str	r3, [sp, #36]	; 0x24
   53f86:	2300      	movs	r3, #0
   53f88:	9005      	str	r0, [sp, #20]
   53f8a:	4620      	mov	r0, r4
   53f8c:	930d      	str	r3, [sp, #52]	; 0x34
   53f8e:	9312      	str	r3, [sp, #72]	; 0x48
   53f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
   53f94:	f8ad 300e 	strh.w	r3, [sp, #14]
   53f98:	4633      	mov	r3, r6
   53f9a:	f000 fc6f 	bl	5487c <__ssvfiscanf_r>
   53f9e:	b01a      	add	sp, #104	; 0x68
   53fa0:	bd70      	pop	{r4, r5, r6, pc}
   53fa2:	bf00      	nop
   53fa4:	0005b177 	.word	0x0005b177

00053fa8 <vsiscanf>:
   53fa8:	4613      	mov	r3, r2
   53faa:	460a      	mov	r2, r1
   53fac:	4601      	mov	r1, r0
   53fae:	4802      	ldr	r0, [pc, #8]	; (53fb8 <vsiscanf+0x10>)
   53fb0:	6800      	ldr	r0, [r0, #0]
   53fb2:	f7ff bfd5 	b.w	53f60 <_vsiscanf_r>
   53fb6:	bf00      	nop
   53fb8:	2001a830 	.word	0x2001a830

00053fbc <_write_r>:
   53fbc:	b538      	push	{r3, r4, r5, lr}
   53fbe:	4604      	mov	r4, r0
   53fc0:	4d06      	ldr	r5, [pc, #24]	; (53fdc <_write_r+0x20>)
   53fc2:	4608      	mov	r0, r1
   53fc4:	4611      	mov	r1, r2
   53fc6:	2200      	movs	r2, #0
   53fc8:	602a      	str	r2, [r5, #0]
   53fca:	461a      	mov	r2, r3
   53fcc:	f002 f869 	bl	560a2 <_write>
   53fd0:	1c43      	adds	r3, r0, #1
   53fd2:	d102      	bne.n	53fda <_write_r+0x1e>
   53fd4:	682b      	ldr	r3, [r5, #0]
   53fd6:	b103      	cbz	r3, 53fda <_write_r+0x1e>
   53fd8:	6023      	str	r3, [r4, #0]
   53fda:	bd38      	pop	{r3, r4, r5, pc}
   53fdc:	2001bcc8 	.word	0x2001bcc8

00053fe0 <_close_r>:
   53fe0:	b538      	push	{r3, r4, r5, lr}
   53fe2:	2300      	movs	r3, #0
   53fe4:	4d05      	ldr	r5, [pc, #20]	; (53ffc <_close_r+0x1c>)
   53fe6:	4604      	mov	r4, r0
   53fe8:	4608      	mov	r0, r1
   53fea:	602b      	str	r3, [r5, #0]
   53fec:	f002 f85d 	bl	560aa <_close>
   53ff0:	1c43      	adds	r3, r0, #1
   53ff2:	d102      	bne.n	53ffa <_close_r+0x1a>
   53ff4:	682b      	ldr	r3, [r5, #0]
   53ff6:	b103      	cbz	r3, 53ffa <_close_r+0x1a>
   53ff8:	6023      	str	r3, [r4, #0]
   53ffa:	bd38      	pop	{r3, r4, r5, pc}
   53ffc:	2001bcc8 	.word	0x2001bcc8

00054000 <_localeconv_r>:
   54000:	4800      	ldr	r0, [pc, #0]	; (54004 <_localeconv_r+0x4>)
   54002:	4770      	bx	lr
   54004:	2001a984 	.word	0x2001a984

00054008 <_lseek_r>:
   54008:	b538      	push	{r3, r4, r5, lr}
   5400a:	4604      	mov	r4, r0
   5400c:	4d06      	ldr	r5, [pc, #24]	; (54028 <_lseek_r+0x20>)
   5400e:	4608      	mov	r0, r1
   54010:	4611      	mov	r1, r2
   54012:	2200      	movs	r2, #0
   54014:	602a      	str	r2, [r5, #0]
   54016:	461a      	mov	r2, r3
   54018:	f002 f84a 	bl	560b0 <_lseek>
   5401c:	1c43      	adds	r3, r0, #1
   5401e:	d102      	bne.n	54026 <_lseek_r+0x1e>
   54020:	682b      	ldr	r3, [r5, #0]
   54022:	b103      	cbz	r3, 54026 <_lseek_r+0x1e>
   54024:	6023      	str	r3, [r4, #0]
   54026:	bd38      	pop	{r3, r4, r5, pc}
   54028:	2001bcc8 	.word	0x2001bcc8

0005402c <__malloc_lock>:
   5402c:	4801      	ldr	r0, [pc, #4]	; (54034 <__malloc_lock+0x8>)
   5402e:	f002 b859 	b.w	560e4 <__retarget_lock_acquire_recursive>
   54032:	bf00      	nop
   54034:	2001ab20 	.word	0x2001ab20

00054038 <__malloc_unlock>:
   54038:	4801      	ldr	r0, [pc, #4]	; (54040 <__malloc_unlock+0x8>)
   5403a:	f002 b859 	b.w	560f0 <__retarget_lock_release_recursive>
   5403e:	bf00      	nop
   54040:	2001ab20 	.word	0x2001ab20

00054044 <_Balloc>:
   54044:	b570      	push	{r4, r5, r6, lr}
   54046:	6a46      	ldr	r6, [r0, #36]	; 0x24
   54048:	4604      	mov	r4, r0
   5404a:	460d      	mov	r5, r1
   5404c:	b976      	cbnz	r6, 5406c <_Balloc+0x28>
   5404e:	2010      	movs	r0, #16
   54050:	f7ff f990 	bl	53374 <malloc>
   54054:	4602      	mov	r2, r0
   54056:	6260      	str	r0, [r4, #36]	; 0x24
   54058:	b920      	cbnz	r0, 54064 <_Balloc+0x20>
   5405a:	4b18      	ldr	r3, [pc, #96]	; (540bc <_Balloc+0x78>)
   5405c:	2166      	movs	r1, #102	; 0x66
   5405e:	4818      	ldr	r0, [pc, #96]	; (540c0 <_Balloc+0x7c>)
   54060:	f000 feee 	bl	54e40 <__assert_func>
   54064:	e9c0 6601 	strd	r6, r6, [r0, #4]
   54068:	6006      	str	r6, [r0, #0]
   5406a:	60c6      	str	r6, [r0, #12]
   5406c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   5406e:	68f3      	ldr	r3, [r6, #12]
   54070:	b183      	cbz	r3, 54094 <_Balloc+0x50>
   54072:	6a63      	ldr	r3, [r4, #36]	; 0x24
   54074:	68db      	ldr	r3, [r3, #12]
   54076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   5407a:	b9b8      	cbnz	r0, 540ac <_Balloc+0x68>
   5407c:	2101      	movs	r1, #1
   5407e:	4620      	mov	r0, r4
   54080:	fa01 f605 	lsl.w	r6, r1, r5
   54084:	1d72      	adds	r2, r6, #5
   54086:	0092      	lsls	r2, r2, #2
   54088:	f006 ff29 	bl	5aede <_calloc_r>
   5408c:	b160      	cbz	r0, 540a8 <_Balloc+0x64>
   5408e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   54092:	e00e      	b.n	540b2 <_Balloc+0x6e>
   54094:	2221      	movs	r2, #33	; 0x21
   54096:	2104      	movs	r1, #4
   54098:	4620      	mov	r0, r4
   5409a:	f006 ff20 	bl	5aede <_calloc_r>
   5409e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   540a0:	60f0      	str	r0, [r6, #12]
   540a2:	68db      	ldr	r3, [r3, #12]
   540a4:	2b00      	cmp	r3, #0
   540a6:	d1e4      	bne.n	54072 <_Balloc+0x2e>
   540a8:	2000      	movs	r0, #0
   540aa:	bd70      	pop	{r4, r5, r6, pc}
   540ac:	6802      	ldr	r2, [r0, #0]
   540ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   540b2:	2300      	movs	r3, #0
   540b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   540b8:	e7f7      	b.n	540aa <_Balloc+0x66>
   540ba:	bf00      	nop
   540bc:	000609fe 	.word	0x000609fe
   540c0:	00060a88 	.word	0x00060a88

000540c4 <_Bfree>:
   540c4:	b570      	push	{r4, r5, r6, lr}
   540c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   540c8:	4605      	mov	r5, r0
   540ca:	460c      	mov	r4, r1
   540cc:	b976      	cbnz	r6, 540ec <_Bfree+0x28>
   540ce:	2010      	movs	r0, #16
   540d0:	f7ff f950 	bl	53374 <malloc>
   540d4:	4602      	mov	r2, r0
   540d6:	6268      	str	r0, [r5, #36]	; 0x24
   540d8:	b920      	cbnz	r0, 540e4 <_Bfree+0x20>
   540da:	4b09      	ldr	r3, [pc, #36]	; (54100 <_Bfree+0x3c>)
   540dc:	218a      	movs	r1, #138	; 0x8a
   540de:	4809      	ldr	r0, [pc, #36]	; (54104 <_Bfree+0x40>)
   540e0:	f000 feae 	bl	54e40 <__assert_func>
   540e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   540e8:	6006      	str	r6, [r0, #0]
   540ea:	60c6      	str	r6, [r0, #12]
   540ec:	b13c      	cbz	r4, 540fe <_Bfree+0x3a>
   540ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   540f0:	6862      	ldr	r2, [r4, #4]
   540f2:	68db      	ldr	r3, [r3, #12]
   540f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   540f8:	6021      	str	r1, [r4, #0]
   540fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   540fe:	bd70      	pop	{r4, r5, r6, pc}
   54100:	000609fe 	.word	0x000609fe
   54104:	00060a88 	.word	0x00060a88

00054108 <__multadd>:
   54108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   5410c:	f101 0c14 	add.w	ip, r1, #20
   54110:	4607      	mov	r7, r0
   54112:	460c      	mov	r4, r1
   54114:	461e      	mov	r6, r3
   54116:	690d      	ldr	r5, [r1, #16]
   54118:	2000      	movs	r0, #0
   5411a:	f8dc 3000 	ldr.w	r3, [ip]
   5411e:	3001      	adds	r0, #1
   54120:	b299      	uxth	r1, r3
   54122:	4285      	cmp	r5, r0
   54124:	fb02 6101 	mla	r1, r2, r1, r6
   54128:	ea4f 4613 	mov.w	r6, r3, lsr #16
   5412c:	ea4f 4311 	mov.w	r3, r1, lsr #16
   54130:	b289      	uxth	r1, r1
   54132:	fb02 3306 	mla	r3, r2, r6, r3
   54136:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   5413a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   5413e:	f84c 1b04 	str.w	r1, [ip], #4
   54142:	dcea      	bgt.n	5411a <__multadd+0x12>
   54144:	b30e      	cbz	r6, 5418a <__multadd+0x82>
   54146:	68a3      	ldr	r3, [r4, #8]
   54148:	42ab      	cmp	r3, r5
   5414a:	dc19      	bgt.n	54180 <__multadd+0x78>
   5414c:	6861      	ldr	r1, [r4, #4]
   5414e:	4638      	mov	r0, r7
   54150:	3101      	adds	r1, #1
   54152:	f7ff ff77 	bl	54044 <_Balloc>
   54156:	4680      	mov	r8, r0
   54158:	b928      	cbnz	r0, 54166 <__multadd+0x5e>
   5415a:	4602      	mov	r2, r0
   5415c:	4b0c      	ldr	r3, [pc, #48]	; (54190 <__multadd+0x88>)
   5415e:	21b5      	movs	r1, #181	; 0xb5
   54160:	480c      	ldr	r0, [pc, #48]	; (54194 <__multadd+0x8c>)
   54162:	f000 fe6d 	bl	54e40 <__assert_func>
   54166:	6922      	ldr	r2, [r4, #16]
   54168:	f104 010c 	add.w	r1, r4, #12
   5416c:	300c      	adds	r0, #12
   5416e:	3202      	adds	r2, #2
   54170:	0092      	lsls	r2, r2, #2
   54172:	f006 fe72 	bl	5ae5a <memcpy>
   54176:	4621      	mov	r1, r4
   54178:	4644      	mov	r4, r8
   5417a:	4638      	mov	r0, r7
   5417c:	f7ff ffa2 	bl	540c4 <_Bfree>
   54180:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   54184:	3501      	adds	r5, #1
   54186:	615e      	str	r6, [r3, #20]
   54188:	6125      	str	r5, [r4, #16]
   5418a:	4620      	mov	r0, r4
   5418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   54190:	00060a71 	.word	0x00060a71
   54194:	00060a88 	.word	0x00060a88

00054198 <__i2b>:
   54198:	b510      	push	{r4, lr}
   5419a:	460c      	mov	r4, r1
   5419c:	2101      	movs	r1, #1
   5419e:	f7ff ff51 	bl	54044 <_Balloc>
   541a2:	4602      	mov	r2, r0
   541a4:	b928      	cbnz	r0, 541b2 <__i2b+0x1a>
   541a6:	4b05      	ldr	r3, [pc, #20]	; (541bc <__i2b+0x24>)
   541a8:	f44f 71a0 	mov.w	r1, #320	; 0x140
   541ac:	4804      	ldr	r0, [pc, #16]	; (541c0 <__i2b+0x28>)
   541ae:	f000 fe47 	bl	54e40 <__assert_func>
   541b2:	2301      	movs	r3, #1
   541b4:	6144      	str	r4, [r0, #20]
   541b6:	6103      	str	r3, [r0, #16]
   541b8:	bd10      	pop	{r4, pc}
   541ba:	bf00      	nop
   541bc:	00060a71 	.word	0x00060a71
   541c0:	00060a88 	.word	0x00060a88

000541c4 <__multiply>:
   541c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   541c8:	4614      	mov	r4, r2
   541ca:	690a      	ldr	r2, [r1, #16]
   541cc:	460f      	mov	r7, r1
   541ce:	b085      	sub	sp, #20
   541d0:	6923      	ldr	r3, [r4, #16]
   541d2:	429a      	cmp	r2, r3
   541d4:	bfa2      	ittt	ge
   541d6:	4623      	movge	r3, r4
   541d8:	460c      	movge	r4, r1
   541da:	461f      	movge	r7, r3
   541dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
   541e0:	68a3      	ldr	r3, [r4, #8]
   541e2:	f8d7 9010 	ldr.w	r9, [r7, #16]
   541e6:	6861      	ldr	r1, [r4, #4]
   541e8:	eb0a 0609 	add.w	r6, sl, r9
   541ec:	42b3      	cmp	r3, r6
   541ee:	bfb8      	it	lt
   541f0:	3101      	addlt	r1, #1
   541f2:	f7ff ff27 	bl	54044 <_Balloc>
   541f6:	b930      	cbnz	r0, 54206 <__multiply+0x42>
   541f8:	4602      	mov	r2, r0
   541fa:	4b45      	ldr	r3, [pc, #276]	; (54310 <__multiply+0x14c>)
   541fc:	f240 115d 	movw	r1, #349	; 0x15d
   54200:	4844      	ldr	r0, [pc, #272]	; (54314 <__multiply+0x150>)
   54202:	f000 fe1d 	bl	54e40 <__assert_func>
   54206:	f100 0514 	add.w	r5, r0, #20
   5420a:	2200      	movs	r2, #0
   5420c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   54210:	462b      	mov	r3, r5
   54212:	4543      	cmp	r3, r8
   54214:	d321      	bcc.n	5425a <__multiply+0x96>
   54216:	f107 0114 	add.w	r1, r7, #20
   5421a:	f104 0214 	add.w	r2, r4, #20
   5421e:	f104 0715 	add.w	r7, r4, #21
   54222:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   54226:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   5422a:	9302      	str	r3, [sp, #8]
   5422c:	1b13      	subs	r3, r2, r4
   5422e:	3b15      	subs	r3, #21
   54230:	f023 0303 	bic.w	r3, r3, #3
   54234:	3304      	adds	r3, #4
   54236:	42ba      	cmp	r2, r7
   54238:	bf38      	it	cc
   5423a:	2304      	movcc	r3, #4
   5423c:	9301      	str	r3, [sp, #4]
   5423e:	9b02      	ldr	r3, [sp, #8]
   54240:	9103      	str	r1, [sp, #12]
   54242:	428b      	cmp	r3, r1
   54244:	d80c      	bhi.n	54260 <__multiply+0x9c>
   54246:	2e00      	cmp	r6, #0
   54248:	dd03      	ble.n	54252 <__multiply+0x8e>
   5424a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   5424e:	2b00      	cmp	r3, #0
   54250:	d05b      	beq.n	5430a <__multiply+0x146>
   54252:	6106      	str	r6, [r0, #16]
   54254:	b005      	add	sp, #20
   54256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5425a:	f843 2b04 	str.w	r2, [r3], #4
   5425e:	e7d8      	b.n	54212 <__multiply+0x4e>
   54260:	f8b1 a000 	ldrh.w	sl, [r1]
   54264:	f1ba 0f00 	cmp.w	sl, #0
   54268:	d024      	beq.n	542b4 <__multiply+0xf0>
   5426a:	f104 0e14 	add.w	lr, r4, #20
   5426e:	46a9      	mov	r9, r5
   54270:	f04f 0c00 	mov.w	ip, #0
   54274:	f85e 7b04 	ldr.w	r7, [lr], #4
   54278:	f8d9 3000 	ldr.w	r3, [r9]
   5427c:	fa1f fb87 	uxth.w	fp, r7
   54280:	4572      	cmp	r2, lr
   54282:	b29b      	uxth	r3, r3
   54284:	fb0a 330b 	mla	r3, sl, fp, r3
   54288:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   5428c:	f8d9 7000 	ldr.w	r7, [r9]
   54290:	4463      	add	r3, ip
   54292:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   54296:	fb0a c70b 	mla	r7, sl, fp, ip
   5429a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   5429e:	b29b      	uxth	r3, r3
   542a0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   542a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   542a8:	f849 3b04 	str.w	r3, [r9], #4
   542ac:	d8e2      	bhi.n	54274 <__multiply+0xb0>
   542ae:	9b01      	ldr	r3, [sp, #4]
   542b0:	f845 c003 	str.w	ip, [r5, r3]
   542b4:	9b03      	ldr	r3, [sp, #12]
   542b6:	3104      	adds	r1, #4
   542b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   542bc:	f1b9 0f00 	cmp.w	r9, #0
   542c0:	d021      	beq.n	54306 <__multiply+0x142>
   542c2:	682b      	ldr	r3, [r5, #0]
   542c4:	f104 0c14 	add.w	ip, r4, #20
   542c8:	46ae      	mov	lr, r5
   542ca:	f04f 0a00 	mov.w	sl, #0
   542ce:	f8bc b000 	ldrh.w	fp, [ip]
   542d2:	b29b      	uxth	r3, r3
   542d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
   542d8:	fb09 770b 	mla	r7, r9, fp, r7
   542dc:	4457      	add	r7, sl
   542de:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   542e2:	f84e 3b04 	str.w	r3, [lr], #4
   542e6:	f85c 3b04 	ldr.w	r3, [ip], #4
   542ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   542ee:	f8be 3000 	ldrh.w	r3, [lr]
   542f2:	4562      	cmp	r2, ip
   542f4:	fb09 330a 	mla	r3, r9, sl, r3
   542f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   542fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   54300:	d8e5      	bhi.n	542ce <__multiply+0x10a>
   54302:	9f01      	ldr	r7, [sp, #4]
   54304:	51eb      	str	r3, [r5, r7]
   54306:	3504      	adds	r5, #4
   54308:	e799      	b.n	5423e <__multiply+0x7a>
   5430a:	3e01      	subs	r6, #1
   5430c:	e79b      	b.n	54246 <__multiply+0x82>
   5430e:	bf00      	nop
   54310:	00060a71 	.word	0x00060a71
   54314:	00060a88 	.word	0x00060a88

00054318 <__pow5mult>:
   54318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   5431c:	4615      	mov	r5, r2
   5431e:	f012 0203 	ands.w	r2, r2, #3
   54322:	4607      	mov	r7, r0
   54324:	460e      	mov	r6, r1
   54326:	d007      	beq.n	54338 <__pow5mult+0x20>
   54328:	3a01      	subs	r2, #1
   5432a:	4c25      	ldr	r4, [pc, #148]	; (543c0 <__pow5mult+0xa8>)
   5432c:	2300      	movs	r3, #0
   5432e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   54332:	f7ff fee9 	bl	54108 <__multadd>
   54336:	4606      	mov	r6, r0
   54338:	10ad      	asrs	r5, r5, #2
   5433a:	d03d      	beq.n	543b8 <__pow5mult+0xa0>
   5433c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   5433e:	b97c      	cbnz	r4, 54360 <__pow5mult+0x48>
   54340:	2010      	movs	r0, #16
   54342:	f7ff f817 	bl	53374 <malloc>
   54346:	4602      	mov	r2, r0
   54348:	6278      	str	r0, [r7, #36]	; 0x24
   5434a:	b928      	cbnz	r0, 54358 <__pow5mult+0x40>
   5434c:	4b1d      	ldr	r3, [pc, #116]	; (543c4 <__pow5mult+0xac>)
   5434e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   54352:	481d      	ldr	r0, [pc, #116]	; (543c8 <__pow5mult+0xb0>)
   54354:	f000 fd74 	bl	54e40 <__assert_func>
   54358:	e9c0 4401 	strd	r4, r4, [r0, #4]
   5435c:	6004      	str	r4, [r0, #0]
   5435e:	60c4      	str	r4, [r0, #12]
   54360:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   54364:	f8d8 4008 	ldr.w	r4, [r8, #8]
   54368:	b94c      	cbnz	r4, 5437e <__pow5mult+0x66>
   5436a:	f240 2171 	movw	r1, #625	; 0x271
   5436e:	4638      	mov	r0, r7
   54370:	f7ff ff12 	bl	54198 <__i2b>
   54374:	2300      	movs	r3, #0
   54376:	4604      	mov	r4, r0
   54378:	f8c8 0008 	str.w	r0, [r8, #8]
   5437c:	6003      	str	r3, [r0, #0]
   5437e:	f04f 0900 	mov.w	r9, #0
   54382:	07eb      	lsls	r3, r5, #31
   54384:	d50a      	bpl.n	5439c <__pow5mult+0x84>
   54386:	4631      	mov	r1, r6
   54388:	4622      	mov	r2, r4
   5438a:	4638      	mov	r0, r7
   5438c:	f7ff ff1a 	bl	541c4 <__multiply>
   54390:	4680      	mov	r8, r0
   54392:	4631      	mov	r1, r6
   54394:	4638      	mov	r0, r7
   54396:	4646      	mov	r6, r8
   54398:	f7ff fe94 	bl	540c4 <_Bfree>
   5439c:	106d      	asrs	r5, r5, #1
   5439e:	d00b      	beq.n	543b8 <__pow5mult+0xa0>
   543a0:	6820      	ldr	r0, [r4, #0]
   543a2:	b938      	cbnz	r0, 543b4 <__pow5mult+0x9c>
   543a4:	4622      	mov	r2, r4
   543a6:	4621      	mov	r1, r4
   543a8:	4638      	mov	r0, r7
   543aa:	f7ff ff0b 	bl	541c4 <__multiply>
   543ae:	6020      	str	r0, [r4, #0]
   543b0:	f8c0 9000 	str.w	r9, [r0]
   543b4:	4604      	mov	r4, r0
   543b6:	e7e4      	b.n	54382 <__pow5mult+0x6a>
   543b8:	4630      	mov	r0, r6
   543ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   543be:	bf00      	nop
   543c0:	0005c834 	.word	0x0005c834
   543c4:	000609fe 	.word	0x000609fe
   543c8:	00060a88 	.word	0x00060a88

000543cc <__lshift>:
   543cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   543d0:	460c      	mov	r4, r1
   543d2:	4607      	mov	r7, r0
   543d4:	4691      	mov	r9, r2
   543d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   543da:	6923      	ldr	r3, [r4, #16]
   543dc:	6849      	ldr	r1, [r1, #4]
   543de:	eb03 1862 	add.w	r8, r3, r2, asr #5
   543e2:	68a3      	ldr	r3, [r4, #8]
   543e4:	f108 0601 	add.w	r6, r8, #1
   543e8:	42b3      	cmp	r3, r6
   543ea:	db0b      	blt.n	54404 <__lshift+0x38>
   543ec:	4638      	mov	r0, r7
   543ee:	f7ff fe29 	bl	54044 <_Balloc>
   543f2:	4605      	mov	r5, r0
   543f4:	b948      	cbnz	r0, 5440a <__lshift+0x3e>
   543f6:	4602      	mov	r2, r0
   543f8:	4b28      	ldr	r3, [pc, #160]	; (5449c <__lshift+0xd0>)
   543fa:	f240 11d9 	movw	r1, #473	; 0x1d9
   543fe:	4828      	ldr	r0, [pc, #160]	; (544a0 <__lshift+0xd4>)
   54400:	f000 fd1e 	bl	54e40 <__assert_func>
   54404:	3101      	adds	r1, #1
   54406:	005b      	lsls	r3, r3, #1
   54408:	e7ee      	b.n	543e8 <__lshift+0x1c>
   5440a:	2300      	movs	r3, #0
   5440c:	f100 0114 	add.w	r1, r0, #20
   54410:	f100 0210 	add.w	r2, r0, #16
   54414:	4618      	mov	r0, r3
   54416:	4553      	cmp	r3, sl
   54418:	db33      	blt.n	54482 <__lshift+0xb6>
   5441a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   5441e:	f104 0314 	add.w	r3, r4, #20
   54422:	6920      	ldr	r0, [r4, #16]
   54424:	f019 091f 	ands.w	r9, r9, #31
   54428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   5442c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   54430:	d02b      	beq.n	5448a <__lshift+0xbe>
   54432:	f1c9 0e20 	rsb	lr, r9, #32
   54436:	468a      	mov	sl, r1
   54438:	2200      	movs	r2, #0
   5443a:	6818      	ldr	r0, [r3, #0]
   5443c:	fa00 f009 	lsl.w	r0, r0, r9
   54440:	4310      	orrs	r0, r2
   54442:	f84a 0b04 	str.w	r0, [sl], #4
   54446:	f853 2b04 	ldr.w	r2, [r3], #4
   5444a:	459c      	cmp	ip, r3
   5444c:	fa22 f20e 	lsr.w	r2, r2, lr
   54450:	d8f3      	bhi.n	5443a <__lshift+0x6e>
   54452:	ebac 0304 	sub.w	r3, ip, r4
   54456:	f104 0015 	add.w	r0, r4, #21
   5445a:	3b15      	subs	r3, #21
   5445c:	f023 0303 	bic.w	r3, r3, #3
   54460:	3304      	adds	r3, #4
   54462:	4584      	cmp	ip, r0
   54464:	bf38      	it	cc
   54466:	2304      	movcc	r3, #4
   54468:	50ca      	str	r2, [r1, r3]
   5446a:	b10a      	cbz	r2, 54470 <__lshift+0xa4>
   5446c:	f108 0602 	add.w	r6, r8, #2
   54470:	3e01      	subs	r6, #1
   54472:	4638      	mov	r0, r7
   54474:	4621      	mov	r1, r4
   54476:	612e      	str	r6, [r5, #16]
   54478:	f7ff fe24 	bl	540c4 <_Bfree>
   5447c:	4628      	mov	r0, r5
   5447e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   54482:	3301      	adds	r3, #1
   54484:	f842 0f04 	str.w	r0, [r2, #4]!
   54488:	e7c5      	b.n	54416 <__lshift+0x4a>
   5448a:	3904      	subs	r1, #4
   5448c:	f853 2b04 	ldr.w	r2, [r3], #4
   54490:	459c      	cmp	ip, r3
   54492:	f841 2f04 	str.w	r2, [r1, #4]!
   54496:	d8f9      	bhi.n	5448c <__lshift+0xc0>
   54498:	e7ea      	b.n	54470 <__lshift+0xa4>
   5449a:	bf00      	nop
   5449c:	00060a71 	.word	0x00060a71
   544a0:	00060a88 	.word	0x00060a88

000544a4 <__mdiff>:
   544a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   544a8:	4689      	mov	r9, r1
   544aa:	4606      	mov	r6, r0
   544ac:	4611      	mov	r1, r2
   544ae:	4614      	mov	r4, r2
   544b0:	4648      	mov	r0, r9
   544b2:	f007 f841 	bl	5b538 <__mcmp>
   544b6:	1e05      	subs	r5, r0, #0
   544b8:	d112      	bne.n	544e0 <__mdiff+0x3c>
   544ba:	4629      	mov	r1, r5
   544bc:	4630      	mov	r0, r6
   544be:	f7ff fdc1 	bl	54044 <_Balloc>
   544c2:	4602      	mov	r2, r0
   544c4:	b928      	cbnz	r0, 544d2 <__mdiff+0x2e>
   544c6:	4b41      	ldr	r3, [pc, #260]	; (545cc <__mdiff+0x128>)
   544c8:	f240 2132 	movw	r1, #562	; 0x232
   544cc:	4840      	ldr	r0, [pc, #256]	; (545d0 <__mdiff+0x12c>)
   544ce:	f000 fcb7 	bl	54e40 <__assert_func>
   544d2:	2301      	movs	r3, #1
   544d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   544d8:	4610      	mov	r0, r2
   544da:	b003      	add	sp, #12
   544dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   544e0:	bfbc      	itt	lt
   544e2:	464b      	movlt	r3, r9
   544e4:	46a1      	movlt	r9, r4
   544e6:	4630      	mov	r0, r6
   544e8:	bfb8      	it	lt
   544ea:	2501      	movlt	r5, #1
   544ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
   544f0:	bfb4      	ite	lt
   544f2:	461c      	movlt	r4, r3
   544f4:	2500      	movge	r5, #0
   544f6:	f7ff fda5 	bl	54044 <_Balloc>
   544fa:	4602      	mov	r2, r0
   544fc:	b918      	cbnz	r0, 54506 <__mdiff+0x62>
   544fe:	4b33      	ldr	r3, [pc, #204]	; (545cc <__mdiff+0x128>)
   54500:	f44f 7110 	mov.w	r1, #576	; 0x240
   54504:	e7e2      	b.n	544cc <__mdiff+0x28>
   54506:	f8d9 7010 	ldr.w	r7, [r9, #16]
   5450a:	f104 0e14 	add.w	lr, r4, #20
   5450e:	6926      	ldr	r6, [r4, #16]
   54510:	f100 0b14 	add.w	fp, r0, #20
   54514:	60c5      	str	r5, [r0, #12]
   54516:	f109 0514 	add.w	r5, r9, #20
   5451a:	f109 0310 	add.w	r3, r9, #16
   5451e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   54522:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   54526:	46d9      	mov	r9, fp
   54528:	f04f 0c00 	mov.w	ip, #0
   5452c:	9301      	str	r3, [sp, #4]
   5452e:	9b01      	ldr	r3, [sp, #4]
   54530:	f85e 0b04 	ldr.w	r0, [lr], #4
   54534:	f853 af04 	ldr.w	sl, [r3, #4]!
   54538:	4576      	cmp	r6, lr
   5453a:	9301      	str	r3, [sp, #4]
   5453c:	fa1f f38a 	uxth.w	r3, sl
   54540:	4619      	mov	r1, r3
   54542:	b283      	uxth	r3, r0
   54544:	ea4f 4010 	mov.w	r0, r0, lsr #16
   54548:	eba1 0303 	sub.w	r3, r1, r3
   5454c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   54550:	4463      	add	r3, ip
   54552:	eb00 4023 	add.w	r0, r0, r3, asr #16
   54556:	b29b      	uxth	r3, r3
   54558:	ea4f 4c20 	mov.w	ip, r0, asr #16
   5455c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   54560:	f849 3b04 	str.w	r3, [r9], #4
   54564:	d8e3      	bhi.n	5452e <__mdiff+0x8a>
   54566:	1b33      	subs	r3, r6, r4
   54568:	3415      	adds	r4, #21
   5456a:	3b15      	subs	r3, #21
   5456c:	f023 0303 	bic.w	r3, r3, #3
   54570:	3304      	adds	r3, #4
   54572:	42a6      	cmp	r6, r4
   54574:	bf38      	it	cc
   54576:	2304      	movcc	r3, #4
   54578:	441d      	add	r5, r3
   5457a:	445b      	add	r3, fp
   5457c:	462c      	mov	r4, r5
   5457e:	461e      	mov	r6, r3
   54580:	4544      	cmp	r4, r8
   54582:	d30e      	bcc.n	545a2 <__mdiff+0xfe>
   54584:	f108 0103 	add.w	r1, r8, #3
   54588:	1b49      	subs	r1, r1, r5
   5458a:	3d03      	subs	r5, #3
   5458c:	f021 0103 	bic.w	r1, r1, #3
   54590:	45a8      	cmp	r8, r5
   54592:	bf38      	it	cc
   54594:	2100      	movcc	r1, #0
   54596:	440b      	add	r3, r1
   54598:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   5459c:	b199      	cbz	r1, 545c6 <__mdiff+0x122>
   5459e:	6117      	str	r7, [r2, #16]
   545a0:	e79a      	b.n	544d8 <__mdiff+0x34>
   545a2:	f854 1b04 	ldr.w	r1, [r4], #4
   545a6:	46e6      	mov	lr, ip
   545a8:	fa1f fc81 	uxth.w	ip, r1
   545ac:	0c08      	lsrs	r0, r1, #16
   545ae:	4471      	add	r1, lr
   545b0:	44f4      	add	ip, lr
   545b2:	b289      	uxth	r1, r1
   545b4:	eb00 402c 	add.w	r0, r0, ip, asr #16
   545b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   545bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
   545c0:	f846 1b04 	str.w	r1, [r6], #4
   545c4:	e7dc      	b.n	54580 <__mdiff+0xdc>
   545c6:	3f01      	subs	r7, #1
   545c8:	e7e6      	b.n	54598 <__mdiff+0xf4>
   545ca:	bf00      	nop
   545cc:	00060a71 	.word	0x00060a71
   545d0:	00060a88 	.word	0x00060a88

000545d4 <__d2b>:
   545d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   545d8:	460f      	mov	r7, r1
   545da:	2101      	movs	r1, #1
   545dc:	4616      	mov	r6, r2
   545de:	ec59 8b10 	vmov	r8, r9, d0
   545e2:	f7ff fd2f 	bl	54044 <_Balloc>
   545e6:	4604      	mov	r4, r0
   545e8:	b930      	cbnz	r0, 545f8 <__d2b+0x24>
   545ea:	4602      	mov	r2, r0
   545ec:	4b23      	ldr	r3, [pc, #140]	; (5467c <__d2b+0xa8>)
   545ee:	f240 310a 	movw	r1, #778	; 0x30a
   545f2:	4823      	ldr	r0, [pc, #140]	; (54680 <__d2b+0xac>)
   545f4:	f000 fc24 	bl	54e40 <__assert_func>
   545f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
   545fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
   54600:	b10d      	cbz	r5, 54606 <__d2b+0x32>
   54602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   54606:	9301      	str	r3, [sp, #4]
   54608:	f1b8 0300 	subs.w	r3, r8, #0
   5460c:	d023      	beq.n	54656 <__d2b+0x82>
   5460e:	4668      	mov	r0, sp
   54610:	9300      	str	r3, [sp, #0]
   54612:	f006 ff64 	bl	5b4de <__lo0bits>
   54616:	e9dd 1200 	ldrd	r1, r2, [sp]
   5461a:	b1d0      	cbz	r0, 54652 <__d2b+0x7e>
   5461c:	f1c0 0320 	rsb	r3, r0, #32
   54620:	fa02 f303 	lsl.w	r3, r2, r3
   54624:	40c2      	lsrs	r2, r0
   54626:	430b      	orrs	r3, r1
   54628:	9201      	str	r2, [sp, #4]
   5462a:	6163      	str	r3, [r4, #20]
   5462c:	9b01      	ldr	r3, [sp, #4]
   5462e:	2b00      	cmp	r3, #0
   54630:	61a3      	str	r3, [r4, #24]
   54632:	bf0c      	ite	eq
   54634:	2201      	moveq	r2, #1
   54636:	2202      	movne	r2, #2
   54638:	6122      	str	r2, [r4, #16]
   5463a:	b1a5      	cbz	r5, 54666 <__d2b+0x92>
   5463c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   54640:	4405      	add	r5, r0
   54642:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   54646:	603d      	str	r5, [r7, #0]
   54648:	6030      	str	r0, [r6, #0]
   5464a:	4620      	mov	r0, r4
   5464c:	b003      	add	sp, #12
   5464e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   54652:	6161      	str	r1, [r4, #20]
   54654:	e7ea      	b.n	5462c <__d2b+0x58>
   54656:	a801      	add	r0, sp, #4
   54658:	f006 ff41 	bl	5b4de <__lo0bits>
   5465c:	9b01      	ldr	r3, [sp, #4]
   5465e:	3020      	adds	r0, #32
   54660:	2201      	movs	r2, #1
   54662:	6163      	str	r3, [r4, #20]
   54664:	e7e8      	b.n	54638 <__d2b+0x64>
   54666:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   5466a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   5466e:	6038      	str	r0, [r7, #0]
   54670:	6918      	ldr	r0, [r3, #16]
   54672:	f006 ff12 	bl	5b49a <__hi0bits>
   54676:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   5467a:	e7e5      	b.n	54648 <__d2b+0x74>
   5467c:	00060a71 	.word	0x00060a71
   54680:	00060a88 	.word	0x00060a88

00054684 <_svfiprintf_r>:
   54684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   54688:	4698      	mov	r8, r3
   5468a:	898b      	ldrh	r3, [r1, #12]
   5468c:	b09d      	sub	sp, #116	; 0x74
   5468e:	4607      	mov	r7, r0
   54690:	061b      	lsls	r3, r3, #24
   54692:	460d      	mov	r5, r1
   54694:	4614      	mov	r4, r2
   54696:	d510      	bpl.n	546ba <_svfiprintf_r+0x36>
   54698:	690b      	ldr	r3, [r1, #16]
   5469a:	b973      	cbnz	r3, 546ba <_svfiprintf_r+0x36>
   5469c:	2140      	movs	r1, #64	; 0x40
   5469e:	f7fe fec3 	bl	53428 <_malloc_r>
   546a2:	6028      	str	r0, [r5, #0]
   546a4:	6128      	str	r0, [r5, #16]
   546a6:	b930      	cbnz	r0, 546b6 <_svfiprintf_r+0x32>
   546a8:	230c      	movs	r3, #12
   546aa:	603b      	str	r3, [r7, #0]
   546ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   546b0:	b01d      	add	sp, #116	; 0x74
   546b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   546b6:	2340      	movs	r3, #64	; 0x40
   546b8:	616b      	str	r3, [r5, #20]
   546ba:	2300      	movs	r3, #0
   546bc:	f8cd 800c 	str.w	r8, [sp, #12]
   546c0:	f04f 0901 	mov.w	r9, #1
   546c4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 54868 <_svfiprintf_r+0x1e4>
   546c8:	9309      	str	r3, [sp, #36]	; 0x24
   546ca:	2320      	movs	r3, #32
   546cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   546d0:	2330      	movs	r3, #48	; 0x30
   546d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   546d6:	4623      	mov	r3, r4
   546d8:	469a      	mov	sl, r3
   546da:	f813 2b01 	ldrb.w	r2, [r3], #1
   546de:	b10a      	cbz	r2, 546e4 <_svfiprintf_r+0x60>
   546e0:	2a25      	cmp	r2, #37	; 0x25
   546e2:	d1f9      	bne.n	546d8 <_svfiprintf_r+0x54>
   546e4:	ebba 0b04 	subs.w	fp, sl, r4
   546e8:	d00b      	beq.n	54702 <_svfiprintf_r+0x7e>
   546ea:	465b      	mov	r3, fp
   546ec:	4622      	mov	r2, r4
   546ee:	4629      	mov	r1, r5
   546f0:	4638      	mov	r0, r7
   546f2:	f006 ff61 	bl	5b5b8 <__ssputs_r>
   546f6:	3001      	adds	r0, #1
   546f8:	f000 80a7 	beq.w	5484a <_svfiprintf_r+0x1c6>
   546fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   546fe:	445a      	add	r2, fp
   54700:	9209      	str	r2, [sp, #36]	; 0x24
   54702:	f89a 3000 	ldrb.w	r3, [sl]
   54706:	2b00      	cmp	r3, #0
   54708:	f000 809f 	beq.w	5484a <_svfiprintf_r+0x1c6>
   5470c:	2300      	movs	r3, #0
   5470e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   54712:	f10a 0a01 	add.w	sl, sl, #1
   54716:	9304      	str	r3, [sp, #16]
   54718:	9307      	str	r3, [sp, #28]
   5471a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   5471e:	931a      	str	r3, [sp, #104]	; 0x68
   54720:	e9cd 2305 	strd	r2, r3, [sp, #20]
   54724:	4654      	mov	r4, sl
   54726:	2205      	movs	r2, #5
   54728:	484f      	ldr	r0, [pc, #316]	; (54868 <_svfiprintf_r+0x1e4>)
   5472a:	f814 1b01 	ldrb.w	r1, [r4], #1
   5472e:	f006 fb76 	bl	5ae1e <memchr>
   54732:	9a04      	ldr	r2, [sp, #16]
   54734:	b9d8      	cbnz	r0, 5476e <_svfiprintf_r+0xea>
   54736:	06d0      	lsls	r0, r2, #27
   54738:	bf44      	itt	mi
   5473a:	2320      	movmi	r3, #32
   5473c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   54740:	0711      	lsls	r1, r2, #28
   54742:	bf44      	itt	mi
   54744:	232b      	movmi	r3, #43	; 0x2b
   54746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   5474a:	f89a 3000 	ldrb.w	r3, [sl]
   5474e:	2b2a      	cmp	r3, #42	; 0x2a
   54750:	d015      	beq.n	5477e <_svfiprintf_r+0xfa>
   54752:	9a07      	ldr	r2, [sp, #28]
   54754:	4654      	mov	r4, sl
   54756:	2000      	movs	r0, #0
   54758:	f04f 0c0a 	mov.w	ip, #10
   5475c:	4621      	mov	r1, r4
   5475e:	f811 3b01 	ldrb.w	r3, [r1], #1
   54762:	3b30      	subs	r3, #48	; 0x30
   54764:	2b09      	cmp	r3, #9
   54766:	d94b      	bls.n	54800 <_svfiprintf_r+0x17c>
   54768:	b1b0      	cbz	r0, 54798 <_svfiprintf_r+0x114>
   5476a:	9207      	str	r2, [sp, #28]
   5476c:	e014      	b.n	54798 <_svfiprintf_r+0x114>
   5476e:	eba0 0308 	sub.w	r3, r0, r8
   54772:	46a2      	mov	sl, r4
   54774:	fa09 f303 	lsl.w	r3, r9, r3
   54778:	4313      	orrs	r3, r2
   5477a:	9304      	str	r3, [sp, #16]
   5477c:	e7d2      	b.n	54724 <_svfiprintf_r+0xa0>
   5477e:	9b03      	ldr	r3, [sp, #12]
   54780:	1d19      	adds	r1, r3, #4
   54782:	681b      	ldr	r3, [r3, #0]
   54784:	2b00      	cmp	r3, #0
   54786:	9103      	str	r1, [sp, #12]
   54788:	bfbb      	ittet	lt
   5478a:	425b      	neglt	r3, r3
   5478c:	f042 0202 	orrlt.w	r2, r2, #2
   54790:	9307      	strge	r3, [sp, #28]
   54792:	9307      	strlt	r3, [sp, #28]
   54794:	bfb8      	it	lt
   54796:	9204      	strlt	r2, [sp, #16]
   54798:	7823      	ldrb	r3, [r4, #0]
   5479a:	2b2e      	cmp	r3, #46	; 0x2e
   5479c:	d10a      	bne.n	547b4 <_svfiprintf_r+0x130>
   5479e:	7863      	ldrb	r3, [r4, #1]
   547a0:	2b2a      	cmp	r3, #42	; 0x2a
   547a2:	d132      	bne.n	5480a <_svfiprintf_r+0x186>
   547a4:	9b03      	ldr	r3, [sp, #12]
   547a6:	3402      	adds	r4, #2
   547a8:	1d1a      	adds	r2, r3, #4
   547aa:	681b      	ldr	r3, [r3, #0]
   547ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   547b0:	9203      	str	r2, [sp, #12]
   547b2:	9305      	str	r3, [sp, #20]
   547b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 54878 <_svfiprintf_r+0x1f4>
   547b8:	2203      	movs	r2, #3
   547ba:	7821      	ldrb	r1, [r4, #0]
   547bc:	4650      	mov	r0, sl
   547be:	f006 fb2e 	bl	5ae1e <memchr>
   547c2:	b138      	cbz	r0, 547d4 <_svfiprintf_r+0x150>
   547c4:	eba0 000a 	sub.w	r0, r0, sl
   547c8:	2240      	movs	r2, #64	; 0x40
   547ca:	9b04      	ldr	r3, [sp, #16]
   547cc:	3401      	adds	r4, #1
   547ce:	4082      	lsls	r2, r0
   547d0:	4313      	orrs	r3, r2
   547d2:	9304      	str	r3, [sp, #16]
   547d4:	f814 1b01 	ldrb.w	r1, [r4], #1
   547d8:	2206      	movs	r2, #6
   547da:	4824      	ldr	r0, [pc, #144]	; (5486c <_svfiprintf_r+0x1e8>)
   547dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   547e0:	f006 fb1d 	bl	5ae1e <memchr>
   547e4:	2800      	cmp	r0, #0
   547e6:	d036      	beq.n	54856 <_svfiprintf_r+0x1d2>
   547e8:	4b21      	ldr	r3, [pc, #132]	; (54870 <_svfiprintf_r+0x1ec>)
   547ea:	bb1b      	cbnz	r3, 54834 <_svfiprintf_r+0x1b0>
   547ec:	9b03      	ldr	r3, [sp, #12]
   547ee:	3307      	adds	r3, #7
   547f0:	f023 0307 	bic.w	r3, r3, #7
   547f4:	3308      	adds	r3, #8
   547f6:	9303      	str	r3, [sp, #12]
   547f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   547fa:	4433      	add	r3, r6
   547fc:	9309      	str	r3, [sp, #36]	; 0x24
   547fe:	e76a      	b.n	546d6 <_svfiprintf_r+0x52>
   54800:	fb0c 3202 	mla	r2, ip, r2, r3
   54804:	460c      	mov	r4, r1
   54806:	2001      	movs	r0, #1
   54808:	e7a8      	b.n	5475c <_svfiprintf_r+0xd8>
   5480a:	2300      	movs	r3, #0
   5480c:	3401      	adds	r4, #1
   5480e:	f04f 0c0a 	mov.w	ip, #10
   54812:	4619      	mov	r1, r3
   54814:	9305      	str	r3, [sp, #20]
   54816:	4620      	mov	r0, r4
   54818:	f810 2b01 	ldrb.w	r2, [r0], #1
   5481c:	3a30      	subs	r2, #48	; 0x30
   5481e:	2a09      	cmp	r2, #9
   54820:	d903      	bls.n	5482a <_svfiprintf_r+0x1a6>
   54822:	2b00      	cmp	r3, #0
   54824:	d0c6      	beq.n	547b4 <_svfiprintf_r+0x130>
   54826:	9105      	str	r1, [sp, #20]
   54828:	e7c4      	b.n	547b4 <_svfiprintf_r+0x130>
   5482a:	fb0c 2101 	mla	r1, ip, r1, r2
   5482e:	4604      	mov	r4, r0
   54830:	2301      	movs	r3, #1
   54832:	e7f0      	b.n	54816 <_svfiprintf_r+0x192>
   54834:	ab03      	add	r3, sp, #12
   54836:	462a      	mov	r2, r5
   54838:	a904      	add	r1, sp, #16
   5483a:	4638      	mov	r0, r7
   5483c:	9300      	str	r3, [sp, #0]
   5483e:	4b0d      	ldr	r3, [pc, #52]	; (54874 <_svfiprintf_r+0x1f0>)
   54840:	f7fe fe4c 	bl	534dc <_printf_float>
   54844:	1c42      	adds	r2, r0, #1
   54846:	4606      	mov	r6, r0
   54848:	d1d6      	bne.n	547f8 <_svfiprintf_r+0x174>
   5484a:	89ab      	ldrh	r3, [r5, #12]
   5484c:	065b      	lsls	r3, r3, #25
   5484e:	f53f af2d 	bmi.w	546ac <_svfiprintf_r+0x28>
   54852:	9809      	ldr	r0, [sp, #36]	; 0x24
   54854:	e72c      	b.n	546b0 <_svfiprintf_r+0x2c>
   54856:	ab03      	add	r3, sp, #12
   54858:	462a      	mov	r2, r5
   5485a:	a904      	add	r1, sp, #16
   5485c:	4638      	mov	r0, r7
   5485e:	9300      	str	r3, [sp, #0]
   54860:	4b04      	ldr	r3, [pc, #16]	; (54874 <_svfiprintf_r+0x1f0>)
   54862:	f7ff f86f 	bl	53944 <_printf_i>
   54866:	e7ed      	b.n	54844 <_svfiprintf_r+0x1c0>
   54868:	00060ae5 	.word	0x00060ae5
   5486c:	00060aef 	.word	0x00060aef
   54870:	000534dd 	.word	0x000534dd
   54874:	0005b5b9 	.word	0x0005b5b9
   54878:	00060aeb 	.word	0x00060aeb

0005487c <__ssvfiscanf_r>:
   5487c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   54880:	460c      	mov	r4, r1
   54882:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   54886:	2100      	movs	r1, #0
   54888:	4606      	mov	r6, r0
   5488a:	f10d 0804 	add.w	r8, sp, #4
   5488e:	4fa7      	ldr	r7, [pc, #668]	; (54b2c <__ssvfiscanf_r+0x2b0>)
   54890:	9300      	str	r3, [sp, #0]
   54892:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   54896:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   5489a:	49a5      	ldr	r1, [pc, #660]	; (54b30 <__ssvfiscanf_r+0x2b4>)
   5489c:	91a0      	str	r1, [sp, #640]	; 0x280
   5489e:	49a5      	ldr	r1, [pc, #660]	; (54b34 <__ssvfiscanf_r+0x2b8>)
   548a0:	91a1      	str	r1, [sp, #644]	; 0x284
   548a2:	7813      	ldrb	r3, [r2, #0]
   548a4:	2b00      	cmp	r3, #0
   548a6:	f000 815c 	beq.w	54b62 <__ssvfiscanf_r+0x2e6>
   548aa:	5cf9      	ldrb	r1, [r7, r3]
   548ac:	1c55      	adds	r5, r2, #1
   548ae:	f011 0108 	ands.w	r1, r1, #8
   548b2:	d019      	beq.n	548e8 <__ssvfiscanf_r+0x6c>
   548b4:	6863      	ldr	r3, [r4, #4]
   548b6:	2b00      	cmp	r3, #0
   548b8:	dd0f      	ble.n	548da <__ssvfiscanf_r+0x5e>
   548ba:	6823      	ldr	r3, [r4, #0]
   548bc:	781a      	ldrb	r2, [r3, #0]
   548be:	5cba      	ldrb	r2, [r7, r2]
   548c0:	0712      	lsls	r2, r2, #28
   548c2:	d401      	bmi.n	548c8 <__ssvfiscanf_r+0x4c>
   548c4:	462a      	mov	r2, r5
   548c6:	e7ec      	b.n	548a2 <__ssvfiscanf_r+0x26>
   548c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
   548ca:	3301      	adds	r3, #1
   548cc:	3201      	adds	r2, #1
   548ce:	6023      	str	r3, [r4, #0]
   548d0:	9245      	str	r2, [sp, #276]	; 0x114
   548d2:	6862      	ldr	r2, [r4, #4]
   548d4:	3a01      	subs	r2, #1
   548d6:	6062      	str	r2, [r4, #4]
   548d8:	e7ec      	b.n	548b4 <__ssvfiscanf_r+0x38>
   548da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   548dc:	4621      	mov	r1, r4
   548de:	4630      	mov	r0, r6
   548e0:	4798      	blx	r3
   548e2:	2800      	cmp	r0, #0
   548e4:	d0e9      	beq.n	548ba <__ssvfiscanf_r+0x3e>
   548e6:	e7ed      	b.n	548c4 <__ssvfiscanf_r+0x48>
   548e8:	2b25      	cmp	r3, #37	; 0x25
   548ea:	d012      	beq.n	54912 <__ssvfiscanf_r+0x96>
   548ec:	4699      	mov	r9, r3
   548ee:	6863      	ldr	r3, [r4, #4]
   548f0:	2b00      	cmp	r3, #0
   548f2:	f340 8094 	ble.w	54a1e <__ssvfiscanf_r+0x1a2>
   548f6:	6822      	ldr	r2, [r4, #0]
   548f8:	7813      	ldrb	r3, [r2, #0]
   548fa:	454b      	cmp	r3, r9
   548fc:	f040 8131 	bne.w	54b62 <__ssvfiscanf_r+0x2e6>
   54900:	6863      	ldr	r3, [r4, #4]
   54902:	3201      	adds	r2, #1
   54904:	3b01      	subs	r3, #1
   54906:	6022      	str	r2, [r4, #0]
   54908:	6063      	str	r3, [r4, #4]
   5490a:	9b45      	ldr	r3, [sp, #276]	; 0x114
   5490c:	3301      	adds	r3, #1
   5490e:	9345      	str	r3, [sp, #276]	; 0x114
   54910:	e7d8      	b.n	548c4 <__ssvfiscanf_r+0x48>
   54912:	9141      	str	r1, [sp, #260]	; 0x104
   54914:	9143      	str	r1, [sp, #268]	; 0x10c
   54916:	7853      	ldrb	r3, [r2, #1]
   54918:	2b2a      	cmp	r3, #42	; 0x2a
   5491a:	bf04      	itt	eq
   5491c:	2310      	moveq	r3, #16
   5491e:	1c95      	addeq	r5, r2, #2
   54920:	f04f 020a 	mov.w	r2, #10
   54924:	bf08      	it	eq
   54926:	9341      	streq	r3, [sp, #260]	; 0x104
   54928:	46a9      	mov	r9, r5
   5492a:	f819 1b01 	ldrb.w	r1, [r9], #1
   5492e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   54932:	2b09      	cmp	r3, #9
   54934:	d91e      	bls.n	54974 <__ssvfiscanf_r+0xf8>
   54936:	f8df a200 	ldr.w	sl, [pc, #512]	; 54b38 <__ssvfiscanf_r+0x2bc>
   5493a:	2203      	movs	r2, #3
   5493c:	4650      	mov	r0, sl
   5493e:	f006 fa6e 	bl	5ae1e <memchr>
   54942:	b138      	cbz	r0, 54954 <__ssvfiscanf_r+0xd8>
   54944:	eba0 000a 	sub.w	r0, r0, sl
   54948:	2301      	movs	r3, #1
   5494a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   5494c:	464d      	mov	r5, r9
   5494e:	4083      	lsls	r3, r0
   54950:	4313      	orrs	r3, r2
   54952:	9341      	str	r3, [sp, #260]	; 0x104
   54954:	f815 3b01 	ldrb.w	r3, [r5], #1
   54958:	2b78      	cmp	r3, #120	; 0x78
   5495a:	d806      	bhi.n	5496a <__ssvfiscanf_r+0xee>
   5495c:	2b57      	cmp	r3, #87	; 0x57
   5495e:	d810      	bhi.n	54982 <__ssvfiscanf_r+0x106>
   54960:	2b25      	cmp	r3, #37	; 0x25
   54962:	d0c3      	beq.n	548ec <__ssvfiscanf_r+0x70>
   54964:	d856      	bhi.n	54a14 <__ssvfiscanf_r+0x198>
   54966:	2b00      	cmp	r3, #0
   54968:	d064      	beq.n	54a34 <__ssvfiscanf_r+0x1b8>
   5496a:	2303      	movs	r3, #3
   5496c:	9347      	str	r3, [sp, #284]	; 0x11c
   5496e:	230a      	movs	r3, #10
   54970:	9342      	str	r3, [sp, #264]	; 0x108
   54972:	e06a      	b.n	54a4a <__ssvfiscanf_r+0x1ce>
   54974:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   54976:	464d      	mov	r5, r9
   54978:	fb02 1103 	mla	r1, r2, r3, r1
   5497c:	3930      	subs	r1, #48	; 0x30
   5497e:	9143      	str	r1, [sp, #268]	; 0x10c
   54980:	e7d2      	b.n	54928 <__ssvfiscanf_r+0xac>
   54982:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   54986:	2a20      	cmp	r2, #32
   54988:	d8ef      	bhi.n	5496a <__ssvfiscanf_r+0xee>
   5498a:	a101      	add	r1, pc, #4	; (adr r1, 54990 <__ssvfiscanf_r+0x114>)
   5498c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   54990:	00054a7f 	.word	0x00054a7f
   54994:	0005496b 	.word	0x0005496b
   54998:	0005496b 	.word	0x0005496b
   5499c:	00054aa1 	.word	0x00054aa1
   549a0:	0005496b 	.word	0x0005496b
   549a4:	0005496b 	.word	0x0005496b
   549a8:	0005496b 	.word	0x0005496b
   549ac:	0005496b 	.word	0x0005496b
   549b0:	0005496b 	.word	0x0005496b
   549b4:	0005496b 	.word	0x0005496b
   549b8:	0005496b 	.word	0x0005496b
   549bc:	00054ab7 	.word	0x00054ab7
   549c0:	00054a9d 	.word	0x00054a9d
   549c4:	00054a1b 	.word	0x00054a1b
   549c8:	00054a1b 	.word	0x00054a1b
   549cc:	00054a1b 	.word	0x00054a1b
   549d0:	0005496b 	.word	0x0005496b
   549d4:	00054a91 	.word	0x00054a91
   549d8:	0005496b 	.word	0x0005496b
   549dc:	0005496b 	.word	0x0005496b
   549e0:	0005496b 	.word	0x0005496b
   549e4:	0005496b 	.word	0x0005496b
   549e8:	00054ac7 	.word	0x00054ac7
   549ec:	00054a99 	.word	0x00054a99
   549f0:	00054a3b 	.word	0x00054a3b
   549f4:	0005496b 	.word	0x0005496b
   549f8:	0005496b 	.word	0x0005496b
   549fc:	00054ac3 	.word	0x00054ac3
   54a00:	0005496b 	.word	0x0005496b
   54a04:	00054a9d 	.word	0x00054a9d
   54a08:	0005496b 	.word	0x0005496b
   54a0c:	0005496b 	.word	0x0005496b
   54a10:	00054a7f 	.word	0x00054a7f
   54a14:	3b45      	subs	r3, #69	; 0x45
   54a16:	2b02      	cmp	r3, #2
   54a18:	d8a7      	bhi.n	5496a <__ssvfiscanf_r+0xee>
   54a1a:	2305      	movs	r3, #5
   54a1c:	e014      	b.n	54a48 <__ssvfiscanf_r+0x1cc>
   54a1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   54a20:	4621      	mov	r1, r4
   54a22:	4630      	mov	r0, r6
   54a24:	4798      	blx	r3
   54a26:	2800      	cmp	r0, #0
   54a28:	f43f af65 	beq.w	548f6 <__ssvfiscanf_r+0x7a>
   54a2c:	9844      	ldr	r0, [sp, #272]	; 0x110
   54a2e:	2800      	cmp	r0, #0
   54a30:	f040 808f 	bne.w	54b52 <__ssvfiscanf_r+0x2d6>
   54a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   54a38:	e08f      	b.n	54b5a <__ssvfiscanf_r+0x2de>
   54a3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   54a3c:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   54a40:	9341      	str	r3, [sp, #260]	; 0x104
   54a42:	2310      	movs	r3, #16
   54a44:	9342      	str	r3, [sp, #264]	; 0x108
   54a46:	2304      	movs	r3, #4
   54a48:	9347      	str	r3, [sp, #284]	; 0x11c
   54a4a:	6863      	ldr	r3, [r4, #4]
   54a4c:	2b00      	cmp	r3, #0
   54a4e:	dd4a      	ble.n	54ae6 <__ssvfiscanf_r+0x26a>
   54a50:	9b41      	ldr	r3, [sp, #260]	; 0x104
   54a52:	0659      	lsls	r1, r3, #25
   54a54:	d404      	bmi.n	54a60 <__ssvfiscanf_r+0x1e4>
   54a56:	6823      	ldr	r3, [r4, #0]
   54a58:	781a      	ldrb	r2, [r3, #0]
   54a5a:	5cba      	ldrb	r2, [r7, r2]
   54a5c:	0712      	lsls	r2, r2, #28
   54a5e:	d449      	bmi.n	54af4 <__ssvfiscanf_r+0x278>
   54a60:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   54a62:	2b02      	cmp	r3, #2
   54a64:	dc58      	bgt.n	54b18 <__ssvfiscanf_r+0x29c>
   54a66:	466b      	mov	r3, sp
   54a68:	4622      	mov	r2, r4
   54a6a:	a941      	add	r1, sp, #260	; 0x104
   54a6c:	4630      	mov	r0, r6
   54a6e:	f000 f87d 	bl	54b6c <_scanf_chars>
   54a72:	2801      	cmp	r0, #1
   54a74:	d075      	beq.n	54b62 <__ssvfiscanf_r+0x2e6>
   54a76:	2802      	cmp	r0, #2
   54a78:	f47f af24 	bne.w	548c4 <__ssvfiscanf_r+0x48>
   54a7c:	e7d6      	b.n	54a2c <__ssvfiscanf_r+0x1b0>
   54a7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
   54a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   54a84:	9241      	str	r2, [sp, #260]	; 0x104
   54a86:	2210      	movs	r2, #16
   54a88:	2b6e      	cmp	r3, #110	; 0x6e
   54a8a:	9242      	str	r2, [sp, #264]	; 0x108
   54a8c:	d902      	bls.n	54a94 <__ssvfiscanf_r+0x218>
   54a8e:	e7da      	b.n	54a46 <__ssvfiscanf_r+0x1ca>
   54a90:	2300      	movs	r3, #0
   54a92:	9342      	str	r3, [sp, #264]	; 0x108
   54a94:	2303      	movs	r3, #3
   54a96:	e7d7      	b.n	54a48 <__ssvfiscanf_r+0x1cc>
   54a98:	2308      	movs	r3, #8
   54a9a:	e7d3      	b.n	54a44 <__ssvfiscanf_r+0x1c8>
   54a9c:	220a      	movs	r2, #10
   54a9e:	e7f3      	b.n	54a88 <__ssvfiscanf_r+0x20c>
   54aa0:	4629      	mov	r1, r5
   54aa2:	4640      	mov	r0, r8
   54aa4:	f006 fe3b 	bl	5b71e <__sccl>
   54aa8:	9b41      	ldr	r3, [sp, #260]	; 0x104
   54aaa:	4605      	mov	r5, r0
   54aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   54ab0:	9341      	str	r3, [sp, #260]	; 0x104
   54ab2:	2301      	movs	r3, #1
   54ab4:	e7c8      	b.n	54a48 <__ssvfiscanf_r+0x1cc>
   54ab6:	9b41      	ldr	r3, [sp, #260]	; 0x104
   54ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   54abc:	9341      	str	r3, [sp, #260]	; 0x104
   54abe:	2300      	movs	r3, #0
   54ac0:	e7c2      	b.n	54a48 <__ssvfiscanf_r+0x1cc>
   54ac2:	2302      	movs	r3, #2
   54ac4:	e7c0      	b.n	54a48 <__ssvfiscanf_r+0x1cc>
   54ac6:	9841      	ldr	r0, [sp, #260]	; 0x104
   54ac8:	06c3      	lsls	r3, r0, #27
   54aca:	f53f aefb 	bmi.w	548c4 <__ssvfiscanf_r+0x48>
   54ace:	9b00      	ldr	r3, [sp, #0]
   54ad0:	f010 0f01 	tst.w	r0, #1
   54ad4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   54ad6:	f103 0104 	add.w	r1, r3, #4
   54ada:	9100      	str	r1, [sp, #0]
   54adc:	681b      	ldr	r3, [r3, #0]
   54ade:	bf14      	ite	ne
   54ae0:	801a      	strhne	r2, [r3, #0]
   54ae2:	601a      	streq	r2, [r3, #0]
   54ae4:	e6ee      	b.n	548c4 <__ssvfiscanf_r+0x48>
   54ae6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   54ae8:	4621      	mov	r1, r4
   54aea:	4630      	mov	r0, r6
   54aec:	4798      	blx	r3
   54aee:	2800      	cmp	r0, #0
   54af0:	d0ae      	beq.n	54a50 <__ssvfiscanf_r+0x1d4>
   54af2:	e79b      	b.n	54a2c <__ssvfiscanf_r+0x1b0>
   54af4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   54af6:	3201      	adds	r2, #1
   54af8:	9245      	str	r2, [sp, #276]	; 0x114
   54afa:	6862      	ldr	r2, [r4, #4]
   54afc:	3a01      	subs	r2, #1
   54afe:	2a00      	cmp	r2, #0
   54b00:	6062      	str	r2, [r4, #4]
   54b02:	dd02      	ble.n	54b0a <__ssvfiscanf_r+0x28e>
   54b04:	3301      	adds	r3, #1
   54b06:	6023      	str	r3, [r4, #0]
   54b08:	e7a5      	b.n	54a56 <__ssvfiscanf_r+0x1da>
   54b0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   54b0c:	4621      	mov	r1, r4
   54b0e:	4630      	mov	r0, r6
   54b10:	4798      	blx	r3
   54b12:	2800      	cmp	r0, #0
   54b14:	d09f      	beq.n	54a56 <__ssvfiscanf_r+0x1da>
   54b16:	e789      	b.n	54a2c <__ssvfiscanf_r+0x1b0>
   54b18:	2b04      	cmp	r3, #4
   54b1a:	dc0f      	bgt.n	54b3c <__ssvfiscanf_r+0x2c0>
   54b1c:	466b      	mov	r3, sp
   54b1e:	4622      	mov	r2, r4
   54b20:	a941      	add	r1, sp, #260	; 0x104
   54b22:	4630      	mov	r0, r6
   54b24:	f000 f87c 	bl	54c20 <_scanf_i>
   54b28:	e7a3      	b.n	54a72 <__ssvfiscanf_r+0x1f6>
   54b2a:	bf00      	nop
   54b2c:	000608c3 	.word	0x000608c3
   54b30:	0005b66f 	.word	0x0005b66f
   54b34:	0005b6e5 	.word	0x0005b6e5
   54b38:	00060aeb 	.word	0x00060aeb
   54b3c:	4b0a      	ldr	r3, [pc, #40]	; (54b68 <__ssvfiscanf_r+0x2ec>)
   54b3e:	2b00      	cmp	r3, #0
   54b40:	f43f aec0 	beq.w	548c4 <__ssvfiscanf_r+0x48>
   54b44:	466b      	mov	r3, sp
   54b46:	4622      	mov	r2, r4
   54b48:	a941      	add	r1, sp, #260	; 0x104
   54b4a:	4630      	mov	r0, r6
   54b4c:	f3af 8000 	nop.w
   54b50:	e78f      	b.n	54a72 <__ssvfiscanf_r+0x1f6>
   54b52:	89a3      	ldrh	r3, [r4, #12]
   54b54:	065b      	lsls	r3, r3, #25
   54b56:	f53f af6d 	bmi.w	54a34 <__ssvfiscanf_r+0x1b8>
   54b5a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   54b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   54b62:	9844      	ldr	r0, [sp, #272]	; 0x110
   54b64:	e7f9      	b.n	54b5a <__ssvfiscanf_r+0x2de>
   54b66:	bf00      	nop
   54b68:	00000000 	.word	0x00000000

00054b6c <_scanf_chars>:
   54b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   54b70:	4615      	mov	r5, r2
   54b72:	688a      	ldr	r2, [r1, #8]
   54b74:	4680      	mov	r8, r0
   54b76:	460c      	mov	r4, r1
   54b78:	b932      	cbnz	r2, 54b88 <_scanf_chars+0x1c>
   54b7a:	698a      	ldr	r2, [r1, #24]
   54b7c:	2a00      	cmp	r2, #0
   54b7e:	bf14      	ite	ne
   54b80:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   54b84:	2201      	moveq	r2, #1
   54b86:	608a      	str	r2, [r1, #8]
   54b88:	6822      	ldr	r2, [r4, #0]
   54b8a:	2700      	movs	r7, #0
   54b8c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 54c1c <_scanf_chars+0xb0>
   54b90:	06d1      	lsls	r1, r2, #27
   54b92:	bf5f      	itttt	pl
   54b94:	681a      	ldrpl	r2, [r3, #0]
   54b96:	1d11      	addpl	r1, r2, #4
   54b98:	6019      	strpl	r1, [r3, #0]
   54b9a:	6816      	ldrpl	r6, [r2, #0]
   54b9c:	69a0      	ldr	r0, [r4, #24]
   54b9e:	b188      	cbz	r0, 54bc4 <_scanf_chars+0x58>
   54ba0:	2801      	cmp	r0, #1
   54ba2:	d107      	bne.n	54bb4 <_scanf_chars+0x48>
   54ba4:	682b      	ldr	r3, [r5, #0]
   54ba6:	781a      	ldrb	r2, [r3, #0]
   54ba8:	6963      	ldr	r3, [r4, #20]
   54baa:	5c9b      	ldrb	r3, [r3, r2]
   54bac:	b953      	cbnz	r3, 54bc4 <_scanf_chars+0x58>
   54bae:	2f00      	cmp	r7, #0
   54bb0:	d031      	beq.n	54c16 <_scanf_chars+0xaa>
   54bb2:	e022      	b.n	54bfa <_scanf_chars+0x8e>
   54bb4:	2802      	cmp	r0, #2
   54bb6:	d120      	bne.n	54bfa <_scanf_chars+0x8e>
   54bb8:	682b      	ldr	r3, [r5, #0]
   54bba:	781b      	ldrb	r3, [r3, #0]
   54bbc:	f819 3003 	ldrb.w	r3, [r9, r3]
   54bc0:	071b      	lsls	r3, r3, #28
   54bc2:	d41a      	bmi.n	54bfa <_scanf_chars+0x8e>
   54bc4:	6823      	ldr	r3, [r4, #0]
   54bc6:	3701      	adds	r7, #1
   54bc8:	06da      	lsls	r2, r3, #27
   54bca:	bf5e      	ittt	pl
   54bcc:	682b      	ldrpl	r3, [r5, #0]
   54bce:	781b      	ldrbpl	r3, [r3, #0]
   54bd0:	f806 3b01 	strbpl.w	r3, [r6], #1
   54bd4:	682a      	ldr	r2, [r5, #0]
   54bd6:	686b      	ldr	r3, [r5, #4]
   54bd8:	3201      	adds	r2, #1
   54bda:	3b01      	subs	r3, #1
   54bdc:	602a      	str	r2, [r5, #0]
   54bde:	68a2      	ldr	r2, [r4, #8]
   54be0:	606b      	str	r3, [r5, #4]
   54be2:	3a01      	subs	r2, #1
   54be4:	60a2      	str	r2, [r4, #8]
   54be6:	b142      	cbz	r2, 54bfa <_scanf_chars+0x8e>
   54be8:	2b00      	cmp	r3, #0
   54bea:	dcd7      	bgt.n	54b9c <_scanf_chars+0x30>
   54bec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   54bf0:	4629      	mov	r1, r5
   54bf2:	4640      	mov	r0, r8
   54bf4:	4798      	blx	r3
   54bf6:	2800      	cmp	r0, #0
   54bf8:	d0d0      	beq.n	54b9c <_scanf_chars+0x30>
   54bfa:	6823      	ldr	r3, [r4, #0]
   54bfc:	f013 0310 	ands.w	r3, r3, #16
   54c00:	d105      	bne.n	54c0e <_scanf_chars+0xa2>
   54c02:	68e2      	ldr	r2, [r4, #12]
   54c04:	3201      	adds	r2, #1
   54c06:	60e2      	str	r2, [r4, #12]
   54c08:	69a2      	ldr	r2, [r4, #24]
   54c0a:	b102      	cbz	r2, 54c0e <_scanf_chars+0xa2>
   54c0c:	7033      	strb	r3, [r6, #0]
   54c0e:	6923      	ldr	r3, [r4, #16]
   54c10:	2000      	movs	r0, #0
   54c12:	443b      	add	r3, r7
   54c14:	6123      	str	r3, [r4, #16]
   54c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   54c1a:	bf00      	nop
   54c1c:	000608c3 	.word	0x000608c3

00054c20 <_scanf_i>:
   54c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   54c24:	4698      	mov	r8, r3
   54c26:	b087      	sub	sp, #28
   54c28:	4b78      	ldr	r3, [pc, #480]	; (54e0c <_scanf_i+0x1ec>)
   54c2a:	460c      	mov	r4, r1
   54c2c:	4682      	mov	sl, r0
   54c2e:	4616      	mov	r6, r2
   54c30:	4627      	mov	r7, r4
   54c32:	f04f 0b00 	mov.w	fp, #0
   54c36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   54c3a:	ab03      	add	r3, sp, #12
   54c3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   54c40:	4b73      	ldr	r3, [pc, #460]	; (54e10 <_scanf_i+0x1f0>)
   54c42:	69a1      	ldr	r1, [r4, #24]
   54c44:	4a73      	ldr	r2, [pc, #460]	; (54e14 <_scanf_i+0x1f4>)
   54c46:	2903      	cmp	r1, #3
   54c48:	bf08      	it	eq
   54c4a:	461a      	moveq	r2, r3
   54c4c:	68a3      	ldr	r3, [r4, #8]
   54c4e:	9201      	str	r2, [sp, #4]
   54c50:	1e5a      	subs	r2, r3, #1
   54c52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   54c56:	bf89      	itett	hi
   54c58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   54c5c:	f04f 0900 	movls.w	r9, #0
   54c60:	eb03 0905 	addhi.w	r9, r3, r5
   54c64:	f240 135d 	movwhi	r3, #349	; 0x15d
   54c68:	bf88      	it	hi
   54c6a:	60a3      	strhi	r3, [r4, #8]
   54c6c:	f857 3b1c 	ldr.w	r3, [r7], #28
   54c70:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   54c74:	463d      	mov	r5, r7
   54c76:	6023      	str	r3, [r4, #0]
   54c78:	6831      	ldr	r1, [r6, #0]
   54c7a:	ab03      	add	r3, sp, #12
   54c7c:	2202      	movs	r2, #2
   54c7e:	7809      	ldrb	r1, [r1, #0]
   54c80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   54c84:	f006 f8cb 	bl	5ae1e <memchr>
   54c88:	2800      	cmp	r0, #0
   54c8a:	d040      	beq.n	54d0e <_scanf_i+0xee>
   54c8c:	f1bb 0f01 	cmp.w	fp, #1
   54c90:	d112      	bne.n	54cb8 <_scanf_i+0x98>
   54c92:	6862      	ldr	r2, [r4, #4]
   54c94:	b92a      	cbnz	r2, 54ca2 <_scanf_i+0x82>
   54c96:	6822      	ldr	r2, [r4, #0]
   54c98:	2108      	movs	r1, #8
   54c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   54c9e:	6061      	str	r1, [r4, #4]
   54ca0:	6022      	str	r2, [r4, #0]
   54ca2:	6822      	ldr	r2, [r4, #0]
   54ca4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   54ca8:	6022      	str	r2, [r4, #0]
   54caa:	68a2      	ldr	r2, [r4, #8]
   54cac:	1e51      	subs	r1, r2, #1
   54cae:	60a1      	str	r1, [r4, #8]
   54cb0:	b9da      	cbnz	r2, 54cea <_scanf_i+0xca>
   54cb2:	f04f 0b02 	mov.w	fp, #2
   54cb6:	e7df      	b.n	54c78 <_scanf_i+0x58>
   54cb8:	f1bb 0f02 	cmp.w	fp, #2
   54cbc:	d006      	beq.n	54ccc <_scanf_i+0xac>
   54cbe:	68a2      	ldr	r2, [r4, #8]
   54cc0:	1e51      	subs	r1, r2, #1
   54cc2:	60a1      	str	r1, [r4, #8]
   54cc4:	b98a      	cbnz	r2, 54cea <_scanf_i+0xca>
   54cc6:	f04f 0b01 	mov.w	fp, #1
   54cca:	e7d5      	b.n	54c78 <_scanf_i+0x58>
   54ccc:	6822      	ldr	r2, [r4, #0]
   54cce:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   54cd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   54cd6:	d11f      	bne.n	54d18 <_scanf_i+0xf8>
   54cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   54cdc:	2110      	movs	r1, #16
   54cde:	6022      	str	r2, [r4, #0]
   54ce0:	68a2      	ldr	r2, [r4, #8]
   54ce2:	6061      	str	r1, [r4, #4]
   54ce4:	1e51      	subs	r1, r2, #1
   54ce6:	60a1      	str	r1, [r4, #8]
   54ce8:	b1b2      	cbz	r2, 54d18 <_scanf_i+0xf8>
   54cea:	6832      	ldr	r2, [r6, #0]
   54cec:	1c51      	adds	r1, r2, #1
   54cee:	6031      	str	r1, [r6, #0]
   54cf0:	7812      	ldrb	r2, [r2, #0]
   54cf2:	f805 2b01 	strb.w	r2, [r5], #1
   54cf6:	6872      	ldr	r2, [r6, #4]
   54cf8:	3a01      	subs	r2, #1
   54cfa:	2a00      	cmp	r2, #0
   54cfc:	6072      	str	r2, [r6, #4]
   54cfe:	dc06      	bgt.n	54d0e <_scanf_i+0xee>
   54d00:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   54d04:	4631      	mov	r1, r6
   54d06:	4650      	mov	r0, sl
   54d08:	4790      	blx	r2
   54d0a:	2800      	cmp	r0, #0
   54d0c:	d174      	bne.n	54df8 <_scanf_i+0x1d8>
   54d0e:	f10b 0b01 	add.w	fp, fp, #1
   54d12:	f1bb 0f03 	cmp.w	fp, #3
   54d16:	d1af      	bne.n	54c78 <_scanf_i+0x58>
   54d18:	6863      	ldr	r3, [r4, #4]
   54d1a:	b90b      	cbnz	r3, 54d20 <_scanf_i+0x100>
   54d1c:	230a      	movs	r3, #10
   54d1e:	6063      	str	r3, [r4, #4]
   54d20:	6863      	ldr	r3, [r4, #4]
   54d22:	f04f 0b00 	mov.w	fp, #0
   54d26:	493c      	ldr	r1, [pc, #240]	; (54e18 <_scanf_i+0x1f8>)
   54d28:	6960      	ldr	r0, [r4, #20]
   54d2a:	1ac9      	subs	r1, r1, r3
   54d2c:	f006 fcf7 	bl	5b71e <__sccl>
   54d30:	68a3      	ldr	r3, [r4, #8]
   54d32:	6822      	ldr	r2, [r4, #0]
   54d34:	b373      	cbz	r3, 54d94 <_scanf_i+0x174>
   54d36:	6831      	ldr	r1, [r6, #0]
   54d38:	6960      	ldr	r0, [r4, #20]
   54d3a:	f891 c000 	ldrb.w	ip, [r1]
   54d3e:	f810 000c 	ldrb.w	r0, [r0, ip]
   54d42:	b338      	cbz	r0, 54d94 <_scanf_i+0x174>
   54d44:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   54d48:	d116      	bne.n	54d78 <_scanf_i+0x158>
   54d4a:	0510      	lsls	r0, r2, #20
   54d4c:	d514      	bpl.n	54d78 <_scanf_i+0x158>
   54d4e:	f10b 0b01 	add.w	fp, fp, #1
   54d52:	f1b9 0f00 	cmp.w	r9, #0
   54d56:	d003      	beq.n	54d60 <_scanf_i+0x140>
   54d58:	3301      	adds	r3, #1
   54d5a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   54d5e:	60a3      	str	r3, [r4, #8]
   54d60:	6873      	ldr	r3, [r6, #4]
   54d62:	3b01      	subs	r3, #1
   54d64:	2b00      	cmp	r3, #0
   54d66:	6073      	str	r3, [r6, #4]
   54d68:	dd0d      	ble.n	54d86 <_scanf_i+0x166>
   54d6a:	6833      	ldr	r3, [r6, #0]
   54d6c:	3301      	adds	r3, #1
   54d6e:	6033      	str	r3, [r6, #0]
   54d70:	68a3      	ldr	r3, [r4, #8]
   54d72:	3b01      	subs	r3, #1
   54d74:	60a3      	str	r3, [r4, #8]
   54d76:	e7db      	b.n	54d30 <_scanf_i+0x110>
   54d78:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   54d7c:	6022      	str	r2, [r4, #0]
   54d7e:	780b      	ldrb	r3, [r1, #0]
   54d80:	f805 3b01 	strb.w	r3, [r5], #1
   54d84:	e7ec      	b.n	54d60 <_scanf_i+0x140>
   54d86:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   54d8a:	4631      	mov	r1, r6
   54d8c:	4650      	mov	r0, sl
   54d8e:	4798      	blx	r3
   54d90:	2800      	cmp	r0, #0
   54d92:	d0ed      	beq.n	54d70 <_scanf_i+0x150>
   54d94:	6823      	ldr	r3, [r4, #0]
   54d96:	05d9      	lsls	r1, r3, #23
   54d98:	d50d      	bpl.n	54db6 <_scanf_i+0x196>
   54d9a:	42bd      	cmp	r5, r7
   54d9c:	d909      	bls.n	54db2 <_scanf_i+0x192>
   54d9e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   54da2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   54da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   54daa:	4632      	mov	r2, r6
   54dac:	464d      	mov	r5, r9
   54dae:	4650      	mov	r0, sl
   54db0:	4798      	blx	r3
   54db2:	42bd      	cmp	r5, r7
   54db4:	d028      	beq.n	54e08 <_scanf_i+0x1e8>
   54db6:	6822      	ldr	r2, [r4, #0]
   54db8:	f012 0210 	ands.w	r2, r2, #16
   54dbc:	d113      	bne.n	54de6 <_scanf_i+0x1c6>
   54dbe:	702a      	strb	r2, [r5, #0]
   54dc0:	4639      	mov	r1, r7
   54dc2:	6863      	ldr	r3, [r4, #4]
   54dc4:	4650      	mov	r0, sl
   54dc6:	9e01      	ldr	r6, [sp, #4]
   54dc8:	47b0      	blx	r6
   54dca:	f8d8 3000 	ldr.w	r3, [r8]
   54dce:	6821      	ldr	r1, [r4, #0]
   54dd0:	1d1a      	adds	r2, r3, #4
   54dd2:	f011 0f20 	tst.w	r1, #32
   54dd6:	f8c8 2000 	str.w	r2, [r8]
   54dda:	681b      	ldr	r3, [r3, #0]
   54ddc:	d00f      	beq.n	54dfe <_scanf_i+0x1de>
   54dde:	6018      	str	r0, [r3, #0]
   54de0:	68e3      	ldr	r3, [r4, #12]
   54de2:	3301      	adds	r3, #1
   54de4:	60e3      	str	r3, [r4, #12]
   54de6:	1bed      	subs	r5, r5, r7
   54de8:	6923      	ldr	r3, [r4, #16]
   54dea:	2000      	movs	r0, #0
   54dec:	445d      	add	r5, fp
   54dee:	442b      	add	r3, r5
   54df0:	6123      	str	r3, [r4, #16]
   54df2:	b007      	add	sp, #28
   54df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   54df8:	f04f 0b00 	mov.w	fp, #0
   54dfc:	e7ca      	b.n	54d94 <_scanf_i+0x174>
   54dfe:	07ca      	lsls	r2, r1, #31
   54e00:	bf4c      	ite	mi
   54e02:	8018      	strhmi	r0, [r3, #0]
   54e04:	6018      	strpl	r0, [r3, #0]
   54e06:	e7eb      	b.n	54de0 <_scanf_i+0x1c0>
   54e08:	2001      	movs	r0, #1
   54e0a:	e7f2      	b.n	54df2 <_scanf_i+0x1d2>
   54e0c:	0005bff0 	.word	0x0005bff0
   54e10:	0005b2ff 	.word	0x0005b2ff
   54e14:	0005b303 	.word	0x0005b303
   54e18:	00060b06 	.word	0x00060b06

00054e1c <_read_r>:
   54e1c:	b538      	push	{r3, r4, r5, lr}
   54e1e:	4604      	mov	r4, r0
   54e20:	4d06      	ldr	r5, [pc, #24]	; (54e3c <_read_r+0x20>)
   54e22:	4608      	mov	r0, r1
   54e24:	4611      	mov	r1, r2
   54e26:	2200      	movs	r2, #0
   54e28:	602a      	str	r2, [r5, #0]
   54e2a:	461a      	mov	r2, r3
   54e2c:	f001 f935 	bl	5609a <_read>
   54e30:	1c43      	adds	r3, r0, #1
   54e32:	d102      	bne.n	54e3a <_read_r+0x1e>
   54e34:	682b      	ldr	r3, [r5, #0]
   54e36:	b103      	cbz	r3, 54e3a <_read_r+0x1e>
   54e38:	6023      	str	r3, [r4, #0]
   54e3a:	bd38      	pop	{r3, r4, r5, pc}
   54e3c:	2001bcc8 	.word	0x2001bcc8

00054e40 <__assert_func>:
   54e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   54e42:	4614      	mov	r4, r2
   54e44:	461a      	mov	r2, r3
   54e46:	4b09      	ldr	r3, [pc, #36]	; (54e6c <__assert_func+0x2c>)
   54e48:	4605      	mov	r5, r0
   54e4a:	681b      	ldr	r3, [r3, #0]
   54e4c:	68d8      	ldr	r0, [r3, #12]
   54e4e:	b954      	cbnz	r4, 54e66 <__assert_func+0x26>
   54e50:	4b07      	ldr	r3, [pc, #28]	; (54e70 <__assert_func+0x30>)
   54e52:	461c      	mov	r4, r3
   54e54:	9100      	str	r1, [sp, #0]
   54e56:	4907      	ldr	r1, [pc, #28]	; (54e74 <__assert_func+0x34>)
   54e58:	e9cd 3401 	strd	r3, r4, [sp, #4]
   54e5c:	462b      	mov	r3, r5
   54e5e:	f000 f909 	bl	55074 <fiprintf>
   54e62:	f006 fdc2 	bl	5b9ea <abort>
   54e66:	4b04      	ldr	r3, [pc, #16]	; (54e78 <__assert_func+0x38>)
   54e68:	e7f4      	b.n	54e54 <__assert_func+0x14>
   54e6a:	bf00      	nop
   54e6c:	2001a830 	.word	0x2001a830
   54e70:	0005fc04 	.word	0x0005fc04
   54e74:	00060b1b 	.word	0x00060b1b
   54e78:	00060b0e 	.word	0x00060b0e

00054e7c <_fflush_r>:
   54e7c:	b538      	push	{r3, r4, r5, lr}
   54e7e:	690b      	ldr	r3, [r1, #16]
   54e80:	4605      	mov	r5, r0
   54e82:	460c      	mov	r4, r1
   54e84:	b913      	cbnz	r3, 54e8c <_fflush_r+0x10>
   54e86:	2500      	movs	r5, #0
   54e88:	4628      	mov	r0, r5
   54e8a:	bd38      	pop	{r3, r4, r5, pc}
   54e8c:	b118      	cbz	r0, 54e96 <_fflush_r+0x1a>
   54e8e:	6983      	ldr	r3, [r0, #24]
   54e90:	b90b      	cbnz	r3, 54e96 <_fflush_r+0x1a>
   54e92:	f000 f871 	bl	54f78 <__sinit>
   54e96:	4b14      	ldr	r3, [pc, #80]	; (54ee8 <_fflush_r+0x6c>)
   54e98:	429c      	cmp	r4, r3
   54e9a:	d11b      	bne.n	54ed4 <_fflush_r+0x58>
   54e9c:	686c      	ldr	r4, [r5, #4]
   54e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   54ea2:	2b00      	cmp	r3, #0
   54ea4:	d0ef      	beq.n	54e86 <_fflush_r+0xa>
   54ea6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   54ea8:	07d0      	lsls	r0, r2, #31
   54eaa:	d404      	bmi.n	54eb6 <_fflush_r+0x3a>
   54eac:	0599      	lsls	r1, r3, #22
   54eae:	d402      	bmi.n	54eb6 <_fflush_r+0x3a>
   54eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   54eb2:	f001 f917 	bl	560e4 <__retarget_lock_acquire_recursive>
   54eb6:	4628      	mov	r0, r5
   54eb8:	4621      	mov	r1, r4
   54eba:	f006 fcad 	bl	5b818 <__sflush_r>
   54ebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
   54ec0:	4605      	mov	r5, r0
   54ec2:	07da      	lsls	r2, r3, #31
   54ec4:	d4e0      	bmi.n	54e88 <_fflush_r+0xc>
   54ec6:	89a3      	ldrh	r3, [r4, #12]
   54ec8:	059b      	lsls	r3, r3, #22
   54eca:	d4dd      	bmi.n	54e88 <_fflush_r+0xc>
   54ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   54ece:	f001 f90f 	bl	560f0 <__retarget_lock_release_recursive>
   54ed2:	e7d9      	b.n	54e88 <_fflush_r+0xc>
   54ed4:	4b05      	ldr	r3, [pc, #20]	; (54eec <_fflush_r+0x70>)
   54ed6:	429c      	cmp	r4, r3
   54ed8:	d101      	bne.n	54ede <_fflush_r+0x62>
   54eda:	68ac      	ldr	r4, [r5, #8]
   54edc:	e7df      	b.n	54e9e <_fflush_r+0x22>
   54ede:	4b04      	ldr	r3, [pc, #16]	; (54ef0 <_fflush_r+0x74>)
   54ee0:	429c      	cmp	r4, r3
   54ee2:	bf08      	it	eq
   54ee4:	68ec      	ldreq	r4, [r5, #12]
   54ee6:	e7da      	b.n	54e9e <_fflush_r+0x22>
   54ee8:	0005c880 	.word	0x0005c880
   54eec:	0005c860 	.word	0x0005c860
   54ef0:	0005c840 	.word	0x0005c840

00054ef4 <std>:
   54ef4:	2300      	movs	r3, #0
   54ef6:	b510      	push	{r4, lr}
   54ef8:	4604      	mov	r4, r0
   54efa:	6083      	str	r3, [r0, #8]
   54efc:	8181      	strh	r1, [r0, #12]
   54efe:	4619      	mov	r1, r3
   54f00:	6643      	str	r3, [r0, #100]	; 0x64
   54f02:	81c2      	strh	r2, [r0, #14]
   54f04:	2208      	movs	r2, #8
   54f06:	6183      	str	r3, [r0, #24]
   54f08:	e9c0 3300 	strd	r3, r3, [r0]
   54f0c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   54f10:	305c      	adds	r0, #92	; 0x5c
   54f12:	f005 ffdc 	bl	5aece <memset>
   54f16:	4b05      	ldr	r3, [pc, #20]	; (54f2c <std+0x38>)
   54f18:	6224      	str	r4, [r4, #32]
   54f1a:	6263      	str	r3, [r4, #36]	; 0x24
   54f1c:	4b04      	ldr	r3, [pc, #16]	; (54f30 <std+0x3c>)
   54f1e:	62a3      	str	r3, [r4, #40]	; 0x28
   54f20:	4b04      	ldr	r3, [pc, #16]	; (54f34 <std+0x40>)
   54f22:	62e3      	str	r3, [r4, #44]	; 0x2c
   54f24:	4b04      	ldr	r3, [pc, #16]	; (54f38 <std+0x44>)
   54f26:	6323      	str	r3, [r4, #48]	; 0x30
   54f28:	bd10      	pop	{r4, pc}
   54f2a:	bf00      	nop
   54f2c:	0005b155 	.word	0x0005b155
   54f30:	0005b17b 	.word	0x0005b17b
   54f34:	0005b1b3 	.word	0x0005b1b3
   54f38:	0005b1d7 	.word	0x0005b1d7

00054f3c <_cleanup_r>:
   54f3c:	4901      	ldr	r1, [pc, #4]	; (54f44 <_cleanup_r+0x8>)
   54f3e:	f006 bd04 	b.w	5b94a <_fwalk_reent>
   54f42:	bf00      	nop
   54f44:	00054e7d 	.word	0x00054e7d

00054f48 <__sfp_lock_acquire>:
   54f48:	4801      	ldr	r0, [pc, #4]	; (54f50 <__sfp_lock_acquire+0x8>)
   54f4a:	f001 b8cb 	b.w	560e4 <__retarget_lock_acquire_recursive>
   54f4e:	bf00      	nop
   54f50:	2001ab34 	.word	0x2001ab34

00054f54 <__sfp_lock_release>:
   54f54:	4801      	ldr	r0, [pc, #4]	; (54f5c <__sfp_lock_release+0x8>)
   54f56:	f001 b8cb 	b.w	560f0 <__retarget_lock_release_recursive>
   54f5a:	bf00      	nop
   54f5c:	2001ab34 	.word	0x2001ab34

00054f60 <__sinit_lock_acquire>:
   54f60:	4801      	ldr	r0, [pc, #4]	; (54f68 <__sinit_lock_acquire+0x8>)
   54f62:	f001 b8bf 	b.w	560e4 <__retarget_lock_acquire_recursive>
   54f66:	bf00      	nop
   54f68:	2001ab48 	.word	0x2001ab48

00054f6c <__sinit_lock_release>:
   54f6c:	4801      	ldr	r0, [pc, #4]	; (54f74 <__sinit_lock_release+0x8>)
   54f6e:	f001 b8bf 	b.w	560f0 <__retarget_lock_release_recursive>
   54f72:	bf00      	nop
   54f74:	2001ab48 	.word	0x2001ab48

00054f78 <__sinit>:
   54f78:	b510      	push	{r4, lr}
   54f7a:	4604      	mov	r4, r0
   54f7c:	f7ff fff0 	bl	54f60 <__sinit_lock_acquire>
   54f80:	69a3      	ldr	r3, [r4, #24]
   54f82:	b11b      	cbz	r3, 54f8c <__sinit+0x14>
   54f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   54f88:	f7ff bff0 	b.w	54f6c <__sinit_lock_release>
   54f8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   54f90:	6523      	str	r3, [r4, #80]	; 0x50
   54f92:	4620      	mov	r0, r4
   54f94:	4b12      	ldr	r3, [pc, #72]	; (54fe0 <__sinit+0x68>)
   54f96:	4a13      	ldr	r2, [pc, #76]	; (54fe4 <__sinit+0x6c>)
   54f98:	681b      	ldr	r3, [r3, #0]
   54f9a:	62a2      	str	r2, [r4, #40]	; 0x28
   54f9c:	42a3      	cmp	r3, r4
   54f9e:	bf04      	itt	eq
   54fa0:	2301      	moveq	r3, #1
   54fa2:	61a3      	streq	r3, [r4, #24]
   54fa4:	f000 f820 	bl	54fe8 <__sfp>
   54fa8:	6060      	str	r0, [r4, #4]
   54faa:	4620      	mov	r0, r4
   54fac:	f000 f81c 	bl	54fe8 <__sfp>
   54fb0:	60a0      	str	r0, [r4, #8]
   54fb2:	4620      	mov	r0, r4
   54fb4:	f000 f818 	bl	54fe8 <__sfp>
   54fb8:	2200      	movs	r2, #0
   54fba:	2104      	movs	r1, #4
   54fbc:	60e0      	str	r0, [r4, #12]
   54fbe:	6860      	ldr	r0, [r4, #4]
   54fc0:	f7ff ff98 	bl	54ef4 <std>
   54fc4:	2201      	movs	r2, #1
   54fc6:	2109      	movs	r1, #9
   54fc8:	68a0      	ldr	r0, [r4, #8]
   54fca:	f7ff ff93 	bl	54ef4 <std>
   54fce:	2202      	movs	r2, #2
   54fd0:	2112      	movs	r1, #18
   54fd2:	68e0      	ldr	r0, [r4, #12]
   54fd4:	f7ff ff8e 	bl	54ef4 <std>
   54fd8:	2301      	movs	r3, #1
   54fda:	61a3      	str	r3, [r4, #24]
   54fdc:	e7d2      	b.n	54f84 <__sinit+0xc>
   54fde:	bf00      	nop
   54fe0:	0005c830 	.word	0x0005c830
   54fe4:	00054f3d 	.word	0x00054f3d

00054fe8 <__sfp>:
   54fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   54fea:	4607      	mov	r7, r0
   54fec:	f7ff ffac 	bl	54f48 <__sfp_lock_acquire>
   54ff0:	4b1e      	ldr	r3, [pc, #120]	; (5506c <__sfp+0x84>)
   54ff2:	681e      	ldr	r6, [r3, #0]
   54ff4:	69b3      	ldr	r3, [r6, #24]
   54ff6:	b913      	cbnz	r3, 54ffe <__sfp+0x16>
   54ff8:	4630      	mov	r0, r6
   54ffa:	f7ff ffbd 	bl	54f78 <__sinit>
   54ffe:	3648      	adds	r6, #72	; 0x48
   55000:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   55004:	3b01      	subs	r3, #1
   55006:	d503      	bpl.n	55010 <__sfp+0x28>
   55008:	6833      	ldr	r3, [r6, #0]
   5500a:	b30b      	cbz	r3, 55050 <__sfp+0x68>
   5500c:	6836      	ldr	r6, [r6, #0]
   5500e:	e7f7      	b.n	55000 <__sfp+0x18>
   55010:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   55014:	b9d5      	cbnz	r5, 5504c <__sfp+0x64>
   55016:	4b16      	ldr	r3, [pc, #88]	; (55070 <__sfp+0x88>)
   55018:	f104 0058 	add.w	r0, r4, #88	; 0x58
   5501c:	6665      	str	r5, [r4, #100]	; 0x64
   5501e:	60e3      	str	r3, [r4, #12]
   55020:	f001 f856 	bl	560d0 <__retarget_lock_init_recursive>
   55024:	f7ff ff96 	bl	54f54 <__sfp_lock_release>
   55028:	2208      	movs	r2, #8
   5502a:	4629      	mov	r1, r5
   5502c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   55030:	6025      	str	r5, [r4, #0]
   55032:	61a5      	str	r5, [r4, #24]
   55034:	e9c4 5501 	strd	r5, r5, [r4, #4]
   55038:	e9c4 5504 	strd	r5, r5, [r4, #16]
   5503c:	f005 ff47 	bl	5aece <memset>
   55040:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   55044:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   55048:	4620      	mov	r0, r4
   5504a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   5504c:	3468      	adds	r4, #104	; 0x68
   5504e:	e7d9      	b.n	55004 <__sfp+0x1c>
   55050:	2104      	movs	r1, #4
   55052:	4638      	mov	r0, r7
   55054:	f006 fc63 	bl	5b91e <__sfmoreglue>
   55058:	4604      	mov	r4, r0
   5505a:	6030      	str	r0, [r6, #0]
   5505c:	2800      	cmp	r0, #0
   5505e:	d1d5      	bne.n	5500c <__sfp+0x24>
   55060:	f7ff ff78 	bl	54f54 <__sfp_lock_release>
   55064:	230c      	movs	r3, #12
   55066:	603b      	str	r3, [r7, #0]
   55068:	e7ee      	b.n	55048 <__sfp+0x60>
   5506a:	bf00      	nop
   5506c:	0005c830 	.word	0x0005c830
   55070:	ffff0001 	.word	0xffff0001

00055074 <fiprintf>:
   55074:	b40e      	push	{r1, r2, r3}
   55076:	b503      	push	{r0, r1, lr}
   55078:	ab03      	add	r3, sp, #12
   5507a:	4601      	mov	r1, r0
   5507c:	4805      	ldr	r0, [pc, #20]	; (55094 <fiprintf+0x20>)
   5507e:	f853 2b04 	ldr.w	r2, [r3], #4
   55082:	6800      	ldr	r0, [r0, #0]
   55084:	9301      	str	r3, [sp, #4]
   55086:	f000 f807 	bl	55098 <_vfiprintf_r>
   5508a:	b002      	add	sp, #8
   5508c:	f85d eb04 	ldr.w	lr, [sp], #4
   55090:	b003      	add	sp, #12
   55092:	4770      	bx	lr
   55094:	2001a830 	.word	0x2001a830

00055098 <_vfiprintf_r>:
   55098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5509c:	460d      	mov	r5, r1
   5509e:	b09d      	sub	sp, #116	; 0x74
   550a0:	4614      	mov	r4, r2
   550a2:	4698      	mov	r8, r3
   550a4:	4606      	mov	r6, r0
   550a6:	b118      	cbz	r0, 550b0 <_vfiprintf_r+0x18>
   550a8:	6983      	ldr	r3, [r0, #24]
   550aa:	b90b      	cbnz	r3, 550b0 <_vfiprintf_r+0x18>
   550ac:	f7ff ff64 	bl	54f78 <__sinit>
   550b0:	4b87      	ldr	r3, [pc, #540]	; (552d0 <_vfiprintf_r+0x238>)
   550b2:	429d      	cmp	r5, r3
   550b4:	d11b      	bne.n	550ee <_vfiprintf_r+0x56>
   550b6:	6875      	ldr	r5, [r6, #4]
   550b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   550ba:	07d9      	lsls	r1, r3, #31
   550bc:	d405      	bmi.n	550ca <_vfiprintf_r+0x32>
   550be:	89ab      	ldrh	r3, [r5, #12]
   550c0:	059a      	lsls	r2, r3, #22
   550c2:	d402      	bmi.n	550ca <_vfiprintf_r+0x32>
   550c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   550c6:	f001 f80d 	bl	560e4 <__retarget_lock_acquire_recursive>
   550ca:	89ab      	ldrh	r3, [r5, #12]
   550cc:	071b      	lsls	r3, r3, #28
   550ce:	d501      	bpl.n	550d4 <_vfiprintf_r+0x3c>
   550d0:	692b      	ldr	r3, [r5, #16]
   550d2:	b9eb      	cbnz	r3, 55110 <_vfiprintf_r+0x78>
   550d4:	4629      	mov	r1, r5
   550d6:	4630      	mov	r0, r6
   550d8:	f000 f95c 	bl	55394 <__swsetup_r>
   550dc:	b1c0      	cbz	r0, 55110 <_vfiprintf_r+0x78>
   550de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   550e0:	07dc      	lsls	r4, r3, #31
   550e2:	d50e      	bpl.n	55102 <_vfiprintf_r+0x6a>
   550e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   550e8:	b01d      	add	sp, #116	; 0x74
   550ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   550ee:	4b79      	ldr	r3, [pc, #484]	; (552d4 <_vfiprintf_r+0x23c>)
   550f0:	429d      	cmp	r5, r3
   550f2:	d101      	bne.n	550f8 <_vfiprintf_r+0x60>
   550f4:	68b5      	ldr	r5, [r6, #8]
   550f6:	e7df      	b.n	550b8 <_vfiprintf_r+0x20>
   550f8:	4b77      	ldr	r3, [pc, #476]	; (552d8 <_vfiprintf_r+0x240>)
   550fa:	429d      	cmp	r5, r3
   550fc:	bf08      	it	eq
   550fe:	68f5      	ldreq	r5, [r6, #12]
   55100:	e7da      	b.n	550b8 <_vfiprintf_r+0x20>
   55102:	89ab      	ldrh	r3, [r5, #12]
   55104:	0598      	lsls	r0, r3, #22
   55106:	d4ed      	bmi.n	550e4 <_vfiprintf_r+0x4c>
   55108:	6da8      	ldr	r0, [r5, #88]	; 0x58
   5510a:	f000 fff1 	bl	560f0 <__retarget_lock_release_recursive>
   5510e:	e7e9      	b.n	550e4 <_vfiprintf_r+0x4c>
   55110:	2300      	movs	r3, #0
   55112:	f8cd 800c 	str.w	r8, [sp, #12]
   55116:	f04f 0901 	mov.w	r9, #1
   5511a:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 552dc <_vfiprintf_r+0x244>
   5511e:	9309      	str	r3, [sp, #36]	; 0x24
   55120:	2320      	movs	r3, #32
   55122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   55126:	2330      	movs	r3, #48	; 0x30
   55128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   5512c:	4623      	mov	r3, r4
   5512e:	469a      	mov	sl, r3
   55130:	f813 2b01 	ldrb.w	r2, [r3], #1
   55134:	b10a      	cbz	r2, 5513a <_vfiprintf_r+0xa2>
   55136:	2a25      	cmp	r2, #37	; 0x25
   55138:	d1f9      	bne.n	5512e <_vfiprintf_r+0x96>
   5513a:	ebba 0b04 	subs.w	fp, sl, r4
   5513e:	d00b      	beq.n	55158 <_vfiprintf_r+0xc0>
   55140:	465b      	mov	r3, fp
   55142:	4622      	mov	r2, r4
   55144:	4629      	mov	r1, r5
   55146:	4630      	mov	r0, r6
   55148:	f006 fc3d 	bl	5b9c6 <__sfputs_r>
   5514c:	3001      	adds	r0, #1
   5514e:	f000 80a6 	beq.w	5529e <_vfiprintf_r+0x206>
   55152:	9a09      	ldr	r2, [sp, #36]	; 0x24
   55154:	445a      	add	r2, fp
   55156:	9209      	str	r2, [sp, #36]	; 0x24
   55158:	f89a 3000 	ldrb.w	r3, [sl]
   5515c:	2b00      	cmp	r3, #0
   5515e:	f000 809e 	beq.w	5529e <_vfiprintf_r+0x206>
   55162:	2300      	movs	r3, #0
   55164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   55168:	f10a 0a01 	add.w	sl, sl, #1
   5516c:	9304      	str	r3, [sp, #16]
   5516e:	9307      	str	r3, [sp, #28]
   55170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   55174:	931a      	str	r3, [sp, #104]	; 0x68
   55176:	e9cd 2305 	strd	r2, r3, [sp, #20]
   5517a:	4654      	mov	r4, sl
   5517c:	2205      	movs	r2, #5
   5517e:	4857      	ldr	r0, [pc, #348]	; (552dc <_vfiprintf_r+0x244>)
   55180:	f814 1b01 	ldrb.w	r1, [r4], #1
   55184:	f005 fe4b 	bl	5ae1e <memchr>
   55188:	9b04      	ldr	r3, [sp, #16]
   5518a:	b9d0      	cbnz	r0, 551c2 <_vfiprintf_r+0x12a>
   5518c:	06d9      	lsls	r1, r3, #27
   5518e:	bf44      	itt	mi
   55190:	2220      	movmi	r2, #32
   55192:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   55196:	071a      	lsls	r2, r3, #28
   55198:	bf44      	itt	mi
   5519a:	222b      	movmi	r2, #43	; 0x2b
   5519c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   551a0:	f89a 2000 	ldrb.w	r2, [sl]
   551a4:	2a2a      	cmp	r2, #42	; 0x2a
   551a6:	d014      	beq.n	551d2 <_vfiprintf_r+0x13a>
   551a8:	9a07      	ldr	r2, [sp, #28]
   551aa:	4654      	mov	r4, sl
   551ac:	2000      	movs	r0, #0
   551ae:	f04f 0c0a 	mov.w	ip, #10
   551b2:	4621      	mov	r1, r4
   551b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   551b8:	3b30      	subs	r3, #48	; 0x30
   551ba:	2b09      	cmp	r3, #9
   551bc:	d94a      	bls.n	55254 <_vfiprintf_r+0x1bc>
   551be:	b970      	cbnz	r0, 551de <_vfiprintf_r+0x146>
   551c0:	e014      	b.n	551ec <_vfiprintf_r+0x154>
   551c2:	eba0 0008 	sub.w	r0, r0, r8
   551c6:	46a2      	mov	sl, r4
   551c8:	fa09 f000 	lsl.w	r0, r9, r0
   551cc:	4318      	orrs	r0, r3
   551ce:	9004      	str	r0, [sp, #16]
   551d0:	e7d3      	b.n	5517a <_vfiprintf_r+0xe2>
   551d2:	9a03      	ldr	r2, [sp, #12]
   551d4:	1d11      	adds	r1, r2, #4
   551d6:	6812      	ldr	r2, [r2, #0]
   551d8:	2a00      	cmp	r2, #0
   551da:	9103      	str	r1, [sp, #12]
   551dc:	db01      	blt.n	551e2 <_vfiprintf_r+0x14a>
   551de:	9207      	str	r2, [sp, #28]
   551e0:	e004      	b.n	551ec <_vfiprintf_r+0x154>
   551e2:	4252      	negs	r2, r2
   551e4:	f043 0302 	orr.w	r3, r3, #2
   551e8:	9207      	str	r2, [sp, #28]
   551ea:	9304      	str	r3, [sp, #16]
   551ec:	7823      	ldrb	r3, [r4, #0]
   551ee:	2b2e      	cmp	r3, #46	; 0x2e
   551f0:	d10a      	bne.n	55208 <_vfiprintf_r+0x170>
   551f2:	7863      	ldrb	r3, [r4, #1]
   551f4:	2b2a      	cmp	r3, #42	; 0x2a
   551f6:	d132      	bne.n	5525e <_vfiprintf_r+0x1c6>
   551f8:	9b03      	ldr	r3, [sp, #12]
   551fa:	3402      	adds	r4, #2
   551fc:	1d1a      	adds	r2, r3, #4
   551fe:	681b      	ldr	r3, [r3, #0]
   55200:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   55204:	9203      	str	r2, [sp, #12]
   55206:	9305      	str	r3, [sp, #20]
   55208:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 552ec <_vfiprintf_r+0x254>
   5520c:	2203      	movs	r2, #3
   5520e:	7821      	ldrb	r1, [r4, #0]
   55210:	4650      	mov	r0, sl
   55212:	f005 fe04 	bl	5ae1e <memchr>
   55216:	b138      	cbz	r0, 55228 <_vfiprintf_r+0x190>
   55218:	eba0 000a 	sub.w	r0, r0, sl
   5521c:	2240      	movs	r2, #64	; 0x40
   5521e:	9b04      	ldr	r3, [sp, #16]
   55220:	3401      	adds	r4, #1
   55222:	4082      	lsls	r2, r0
   55224:	4313      	orrs	r3, r2
   55226:	9304      	str	r3, [sp, #16]
   55228:	f814 1b01 	ldrb.w	r1, [r4], #1
   5522c:	2206      	movs	r2, #6
   5522e:	482c      	ldr	r0, [pc, #176]	; (552e0 <_vfiprintf_r+0x248>)
   55230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   55234:	f005 fdf3 	bl	5ae1e <memchr>
   55238:	2800      	cmp	r0, #0
   5523a:	d03f      	beq.n	552bc <_vfiprintf_r+0x224>
   5523c:	4b29      	ldr	r3, [pc, #164]	; (552e4 <_vfiprintf_r+0x24c>)
   5523e:	bb1b      	cbnz	r3, 55288 <_vfiprintf_r+0x1f0>
   55240:	9b03      	ldr	r3, [sp, #12]
   55242:	3307      	adds	r3, #7
   55244:	f023 0307 	bic.w	r3, r3, #7
   55248:	3308      	adds	r3, #8
   5524a:	9303      	str	r3, [sp, #12]
   5524c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   5524e:	443b      	add	r3, r7
   55250:	9309      	str	r3, [sp, #36]	; 0x24
   55252:	e76b      	b.n	5512c <_vfiprintf_r+0x94>
   55254:	fb0c 3202 	mla	r2, ip, r2, r3
   55258:	460c      	mov	r4, r1
   5525a:	2001      	movs	r0, #1
   5525c:	e7a9      	b.n	551b2 <_vfiprintf_r+0x11a>
   5525e:	2300      	movs	r3, #0
   55260:	3401      	adds	r4, #1
   55262:	f04f 0c0a 	mov.w	ip, #10
   55266:	4619      	mov	r1, r3
   55268:	9305      	str	r3, [sp, #20]
   5526a:	4620      	mov	r0, r4
   5526c:	f810 2b01 	ldrb.w	r2, [r0], #1
   55270:	3a30      	subs	r2, #48	; 0x30
   55272:	2a09      	cmp	r2, #9
   55274:	d903      	bls.n	5527e <_vfiprintf_r+0x1e6>
   55276:	2b00      	cmp	r3, #0
   55278:	d0c6      	beq.n	55208 <_vfiprintf_r+0x170>
   5527a:	9105      	str	r1, [sp, #20]
   5527c:	e7c4      	b.n	55208 <_vfiprintf_r+0x170>
   5527e:	fb0c 2101 	mla	r1, ip, r1, r2
   55282:	4604      	mov	r4, r0
   55284:	2301      	movs	r3, #1
   55286:	e7f0      	b.n	5526a <_vfiprintf_r+0x1d2>
   55288:	ab03      	add	r3, sp, #12
   5528a:	462a      	mov	r2, r5
   5528c:	a904      	add	r1, sp, #16
   5528e:	4630      	mov	r0, r6
   55290:	9300      	str	r3, [sp, #0]
   55292:	4b15      	ldr	r3, [pc, #84]	; (552e8 <_vfiprintf_r+0x250>)
   55294:	f7fe f922 	bl	534dc <_printf_float>
   55298:	4607      	mov	r7, r0
   5529a:	1c78      	adds	r0, r7, #1
   5529c:	d1d6      	bne.n	5524c <_vfiprintf_r+0x1b4>
   5529e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   552a0:	07d9      	lsls	r1, r3, #31
   552a2:	d405      	bmi.n	552b0 <_vfiprintf_r+0x218>
   552a4:	89ab      	ldrh	r3, [r5, #12]
   552a6:	059a      	lsls	r2, r3, #22
   552a8:	d402      	bmi.n	552b0 <_vfiprintf_r+0x218>
   552aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
   552ac:	f000 ff20 	bl	560f0 <__retarget_lock_release_recursive>
   552b0:	89ab      	ldrh	r3, [r5, #12]
   552b2:	065b      	lsls	r3, r3, #25
   552b4:	f53f af16 	bmi.w	550e4 <_vfiprintf_r+0x4c>
   552b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   552ba:	e715      	b.n	550e8 <_vfiprintf_r+0x50>
   552bc:	ab03      	add	r3, sp, #12
   552be:	462a      	mov	r2, r5
   552c0:	a904      	add	r1, sp, #16
   552c2:	4630      	mov	r0, r6
   552c4:	9300      	str	r3, [sp, #0]
   552c6:	4b08      	ldr	r3, [pc, #32]	; (552e8 <_vfiprintf_r+0x250>)
   552c8:	f7fe fb3c 	bl	53944 <_printf_i>
   552cc:	e7e4      	b.n	55298 <_vfiprintf_r+0x200>
   552ce:	bf00      	nop
   552d0:	0005c880 	.word	0x0005c880
   552d4:	0005c860 	.word	0x0005c860
   552d8:	0005c840 	.word	0x0005c840
   552dc:	00060ae5 	.word	0x00060ae5
   552e0:	00060aef 	.word	0x00060aef
   552e4:	000534dd 	.word	0x000534dd
   552e8:	0005b9c7 	.word	0x0005b9c7
   552ec:	00060aeb 	.word	0x00060aeb

000552f0 <__swbuf_r>:
   552f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   552f2:	460e      	mov	r6, r1
   552f4:	4614      	mov	r4, r2
   552f6:	4605      	mov	r5, r0
   552f8:	b118      	cbz	r0, 55302 <__swbuf_r+0x12>
   552fa:	6983      	ldr	r3, [r0, #24]
   552fc:	b90b      	cbnz	r3, 55302 <__swbuf_r+0x12>
   552fe:	f7ff fe3b 	bl	54f78 <__sinit>
   55302:	4b21      	ldr	r3, [pc, #132]	; (55388 <__swbuf_r+0x98>)
   55304:	429c      	cmp	r4, r3
   55306:	d110      	bne.n	5532a <__swbuf_r+0x3a>
   55308:	686c      	ldr	r4, [r5, #4]
   5530a:	69a3      	ldr	r3, [r4, #24]
   5530c:	60a3      	str	r3, [r4, #8]
   5530e:	89a3      	ldrh	r3, [r4, #12]
   55310:	071a      	lsls	r2, r3, #28
   55312:	d501      	bpl.n	55318 <__swbuf_r+0x28>
   55314:	6923      	ldr	r3, [r4, #16]
   55316:	b993      	cbnz	r3, 5533e <__swbuf_r+0x4e>
   55318:	4621      	mov	r1, r4
   5531a:	4628      	mov	r0, r5
   5531c:	f000 f83a 	bl	55394 <__swsetup_r>
   55320:	b168      	cbz	r0, 5533e <__swbuf_r+0x4e>
   55322:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   55326:	4638      	mov	r0, r7
   55328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   5532a:	4b18      	ldr	r3, [pc, #96]	; (5538c <__swbuf_r+0x9c>)
   5532c:	429c      	cmp	r4, r3
   5532e:	d101      	bne.n	55334 <__swbuf_r+0x44>
   55330:	68ac      	ldr	r4, [r5, #8]
   55332:	e7ea      	b.n	5530a <__swbuf_r+0x1a>
   55334:	4b16      	ldr	r3, [pc, #88]	; (55390 <__swbuf_r+0xa0>)
   55336:	429c      	cmp	r4, r3
   55338:	bf08      	it	eq
   5533a:	68ec      	ldreq	r4, [r5, #12]
   5533c:	e7e5      	b.n	5530a <__swbuf_r+0x1a>
   5533e:	6923      	ldr	r3, [r4, #16]
   55340:	b2f6      	uxtb	r6, r6
   55342:	6820      	ldr	r0, [r4, #0]
   55344:	4637      	mov	r7, r6
   55346:	1ac0      	subs	r0, r0, r3
   55348:	6963      	ldr	r3, [r4, #20]
   5534a:	4283      	cmp	r3, r0
   5534c:	dc05      	bgt.n	5535a <__swbuf_r+0x6a>
   5534e:	4621      	mov	r1, r4
   55350:	4628      	mov	r0, r5
   55352:	f7ff fd93 	bl	54e7c <_fflush_r>
   55356:	2800      	cmp	r0, #0
   55358:	d1e3      	bne.n	55322 <__swbuf_r+0x32>
   5535a:	68a3      	ldr	r3, [r4, #8]
   5535c:	3001      	adds	r0, #1
   5535e:	3b01      	subs	r3, #1
   55360:	60a3      	str	r3, [r4, #8]
   55362:	6823      	ldr	r3, [r4, #0]
   55364:	1c5a      	adds	r2, r3, #1
   55366:	6022      	str	r2, [r4, #0]
   55368:	701e      	strb	r6, [r3, #0]
   5536a:	6963      	ldr	r3, [r4, #20]
   5536c:	4283      	cmp	r3, r0
   5536e:	d004      	beq.n	5537a <__swbuf_r+0x8a>
   55370:	89a3      	ldrh	r3, [r4, #12]
   55372:	07db      	lsls	r3, r3, #31
   55374:	d5d7      	bpl.n	55326 <__swbuf_r+0x36>
   55376:	2e0a      	cmp	r6, #10
   55378:	d1d5      	bne.n	55326 <__swbuf_r+0x36>
   5537a:	4621      	mov	r1, r4
   5537c:	4628      	mov	r0, r5
   5537e:	f7ff fd7d 	bl	54e7c <_fflush_r>
   55382:	2800      	cmp	r0, #0
   55384:	d0cf      	beq.n	55326 <__swbuf_r+0x36>
   55386:	e7cc      	b.n	55322 <__swbuf_r+0x32>
   55388:	0005c880 	.word	0x0005c880
   5538c:	0005c860 	.word	0x0005c860
   55390:	0005c840 	.word	0x0005c840

00055394 <__swsetup_r>:
   55394:	4b31      	ldr	r3, [pc, #196]	; (5545c <__swsetup_r+0xc8>)
   55396:	b570      	push	{r4, r5, r6, lr}
   55398:	681d      	ldr	r5, [r3, #0]
   5539a:	4606      	mov	r6, r0
   5539c:	460c      	mov	r4, r1
   5539e:	b125      	cbz	r5, 553aa <__swsetup_r+0x16>
   553a0:	69ab      	ldr	r3, [r5, #24]
   553a2:	b913      	cbnz	r3, 553aa <__swsetup_r+0x16>
   553a4:	4628      	mov	r0, r5
   553a6:	f7ff fde7 	bl	54f78 <__sinit>
   553aa:	4b2d      	ldr	r3, [pc, #180]	; (55460 <__swsetup_r+0xcc>)
   553ac:	429c      	cmp	r4, r3
   553ae:	d10e      	bne.n	553ce <__swsetup_r+0x3a>
   553b0:	686c      	ldr	r4, [r5, #4]
   553b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   553b6:	071a      	lsls	r2, r3, #28
   553b8:	d42c      	bmi.n	55414 <__swsetup_r+0x80>
   553ba:	06dd      	lsls	r5, r3, #27
   553bc:	d411      	bmi.n	553e2 <__swsetup_r+0x4e>
   553be:	2209      	movs	r2, #9
   553c0:	6032      	str	r2, [r6, #0]
   553c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   553c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   553ca:	81a3      	strh	r3, [r4, #12]
   553cc:	e03d      	b.n	5544a <__swsetup_r+0xb6>
   553ce:	4b25      	ldr	r3, [pc, #148]	; (55464 <__swsetup_r+0xd0>)
   553d0:	429c      	cmp	r4, r3
   553d2:	d101      	bne.n	553d8 <__swsetup_r+0x44>
   553d4:	68ac      	ldr	r4, [r5, #8]
   553d6:	e7ec      	b.n	553b2 <__swsetup_r+0x1e>
   553d8:	4b23      	ldr	r3, [pc, #140]	; (55468 <__swsetup_r+0xd4>)
   553da:	429c      	cmp	r4, r3
   553dc:	bf08      	it	eq
   553de:	68ec      	ldreq	r4, [r5, #12]
   553e0:	e7e7      	b.n	553b2 <__swsetup_r+0x1e>
   553e2:	0758      	lsls	r0, r3, #29
   553e4:	d512      	bpl.n	5540c <__swsetup_r+0x78>
   553e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   553e8:	b141      	cbz	r1, 553fc <__swsetup_r+0x68>
   553ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
   553ee:	4299      	cmp	r1, r3
   553f0:	d002      	beq.n	553f8 <__swsetup_r+0x64>
   553f2:	4630      	mov	r0, r6
   553f4:	f7fd ffce 	bl	53394 <_free_r>
   553f8:	2300      	movs	r3, #0
   553fa:	6363      	str	r3, [r4, #52]	; 0x34
   553fc:	89a3      	ldrh	r3, [r4, #12]
   553fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   55402:	81a3      	strh	r3, [r4, #12]
   55404:	2300      	movs	r3, #0
   55406:	6063      	str	r3, [r4, #4]
   55408:	6923      	ldr	r3, [r4, #16]
   5540a:	6023      	str	r3, [r4, #0]
   5540c:	89a3      	ldrh	r3, [r4, #12]
   5540e:	f043 0308 	orr.w	r3, r3, #8
   55412:	81a3      	strh	r3, [r4, #12]
   55414:	6923      	ldr	r3, [r4, #16]
   55416:	b94b      	cbnz	r3, 5542c <__swsetup_r+0x98>
   55418:	89a3      	ldrh	r3, [r4, #12]
   5541a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   5541e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   55422:	d003      	beq.n	5542c <__swsetup_r+0x98>
   55424:	4621      	mov	r1, r4
   55426:	4630      	mov	r0, r6
   55428:	f000 f820 	bl	5546c <__smakebuf_r>
   5542c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   55430:	f013 0201 	ands.w	r2, r3, #1
   55434:	d00a      	beq.n	5544c <__swsetup_r+0xb8>
   55436:	2200      	movs	r2, #0
   55438:	60a2      	str	r2, [r4, #8]
   5543a:	6962      	ldr	r2, [r4, #20]
   5543c:	4252      	negs	r2, r2
   5543e:	61a2      	str	r2, [r4, #24]
   55440:	6922      	ldr	r2, [r4, #16]
   55442:	b942      	cbnz	r2, 55456 <__swsetup_r+0xc2>
   55444:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   55448:	d1bb      	bne.n	553c2 <__swsetup_r+0x2e>
   5544a:	bd70      	pop	{r4, r5, r6, pc}
   5544c:	0799      	lsls	r1, r3, #30
   5544e:	bf58      	it	pl
   55450:	6962      	ldrpl	r2, [r4, #20]
   55452:	60a2      	str	r2, [r4, #8]
   55454:	e7f4      	b.n	55440 <__swsetup_r+0xac>
   55456:	2000      	movs	r0, #0
   55458:	e7f7      	b.n	5544a <__swsetup_r+0xb6>
   5545a:	bf00      	nop
   5545c:	2001a830 	.word	0x2001a830
   55460:	0005c880 	.word	0x0005c880
   55464:	0005c860 	.word	0x0005c860
   55468:	0005c840 	.word	0x0005c840

0005546c <__smakebuf_r>:
   5546c:	898b      	ldrh	r3, [r1, #12]
   5546e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   55470:	079d      	lsls	r5, r3, #30
   55472:	4606      	mov	r6, r0
   55474:	460c      	mov	r4, r1
   55476:	d507      	bpl.n	55488 <__smakebuf_r+0x1c>
   55478:	f104 0347 	add.w	r3, r4, #71	; 0x47
   5547c:	6023      	str	r3, [r4, #0]
   5547e:	6123      	str	r3, [r4, #16]
   55480:	2301      	movs	r3, #1
   55482:	6163      	str	r3, [r4, #20]
   55484:	b003      	add	sp, #12
   55486:	bdf0      	pop	{r4, r5, r6, r7, pc}
   55488:	ab01      	add	r3, sp, #4
   5548a:	466a      	mov	r2, sp
   5548c:	f006 fab4 	bl	5b9f8 <__swhatbuf_r>
   55490:	9f00      	ldr	r7, [sp, #0]
   55492:	4605      	mov	r5, r0
   55494:	4630      	mov	r0, r6
   55496:	4639      	mov	r1, r7
   55498:	f7fd ffc6 	bl	53428 <_malloc_r>
   5549c:	b948      	cbnz	r0, 554b2 <__smakebuf_r+0x46>
   5549e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   554a2:	059a      	lsls	r2, r3, #22
   554a4:	d4ee      	bmi.n	55484 <__smakebuf_r+0x18>
   554a6:	f023 0303 	bic.w	r3, r3, #3
   554aa:	f043 0302 	orr.w	r3, r3, #2
   554ae:	81a3      	strh	r3, [r4, #12]
   554b0:	e7e2      	b.n	55478 <__smakebuf_r+0xc>
   554b2:	4b0d      	ldr	r3, [pc, #52]	; (554e8 <__smakebuf_r+0x7c>)
   554b4:	62b3      	str	r3, [r6, #40]	; 0x28
   554b6:	89a3      	ldrh	r3, [r4, #12]
   554b8:	6020      	str	r0, [r4, #0]
   554ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   554be:	81a3      	strh	r3, [r4, #12]
   554c0:	9b01      	ldr	r3, [sp, #4]
   554c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
   554c6:	b15b      	cbz	r3, 554e0 <__smakebuf_r+0x74>
   554c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   554cc:	4630      	mov	r0, r6
   554ce:	f000 f839 	bl	55544 <_isatty_r>
   554d2:	b128      	cbz	r0, 554e0 <__smakebuf_r+0x74>
   554d4:	89a3      	ldrh	r3, [r4, #12]
   554d6:	f023 0303 	bic.w	r3, r3, #3
   554da:	f043 0301 	orr.w	r3, r3, #1
   554de:	81a3      	strh	r3, [r4, #12]
   554e0:	89a3      	ldrh	r3, [r4, #12]
   554e2:	431d      	orrs	r5, r3
   554e4:	81a5      	strh	r5, [r4, #12]
   554e6:	e7cd      	b.n	55484 <__smakebuf_r+0x18>
   554e8:	00054f3d 	.word	0x00054f3d

000554ec <raise>:
   554ec:	4b02      	ldr	r3, [pc, #8]	; (554f8 <raise+0xc>)
   554ee:	4601      	mov	r1, r0
   554f0:	6818      	ldr	r0, [r3, #0]
   554f2:	f006 baa6 	b.w	5ba42 <_raise_r>
   554f6:	bf00      	nop
   554f8:	2001a830 	.word	0x2001a830

000554fc <_kill_r>:
   554fc:	b538      	push	{r3, r4, r5, lr}
   554fe:	2300      	movs	r3, #0
   55500:	4d06      	ldr	r5, [pc, #24]	; (5551c <_kill_r+0x20>)
   55502:	4604      	mov	r4, r0
   55504:	4608      	mov	r0, r1
   55506:	4611      	mov	r1, r2
   55508:	602b      	str	r3, [r5, #0]
   5550a:	f000 fdd8 	bl	560be <_kill>
   5550e:	1c43      	adds	r3, r0, #1
   55510:	d102      	bne.n	55518 <_kill_r+0x1c>
   55512:	682b      	ldr	r3, [r5, #0]
   55514:	b103      	cbz	r3, 55518 <_kill_r+0x1c>
   55516:	6023      	str	r3, [r4, #0]
   55518:	bd38      	pop	{r3, r4, r5, pc}
   5551a:	bf00      	nop
   5551c:	2001bcc8 	.word	0x2001bcc8

00055520 <_fstat_r>:
   55520:	b538      	push	{r3, r4, r5, lr}
   55522:	2300      	movs	r3, #0
   55524:	4d06      	ldr	r5, [pc, #24]	; (55540 <_fstat_r+0x20>)
   55526:	4604      	mov	r4, r0
   55528:	4608      	mov	r0, r1
   5552a:	4611      	mov	r1, r2
   5552c:	602b      	str	r3, [r5, #0]
   5552e:	f000 fdca 	bl	560c6 <_fstat>
   55532:	1c43      	adds	r3, r0, #1
   55534:	d102      	bne.n	5553c <_fstat_r+0x1c>
   55536:	682b      	ldr	r3, [r5, #0]
   55538:	b103      	cbz	r3, 5553c <_fstat_r+0x1c>
   5553a:	6023      	str	r3, [r4, #0]
   5553c:	bd38      	pop	{r3, r4, r5, pc}
   5553e:	bf00      	nop
   55540:	2001bcc8 	.word	0x2001bcc8

00055544 <_isatty_r>:
   55544:	b538      	push	{r3, r4, r5, lr}
   55546:	2300      	movs	r3, #0
   55548:	4d05      	ldr	r5, [pc, #20]	; (55560 <_isatty_r+0x1c>)
   5554a:	4604      	mov	r4, r0
   5554c:	4608      	mov	r0, r1
   5554e:	602b      	str	r3, [r5, #0]
   55550:	f000 fdb0 	bl	560b4 <_isatty>
   55554:	1c43      	adds	r3, r0, #1
   55556:	d102      	bne.n	5555e <_isatty_r+0x1a>
   55558:	682b      	ldr	r3, [r5, #0]
   5555a:	b103      	cbz	r3, 5555e <_isatty_r+0x1a>
   5555c:	6023      	str	r3, [r4, #0]
   5555e:	bd38      	pop	{r3, r4, r5, pc}
   55560:	2001bcc8 	.word	0x2001bcc8

00055564 <disable_ds_1>:
{
   55564:	b508      	push	{r3, lr}
	pm_policy_state_lock_get(PM_STATE_SOFT_OFF, PM_ALL_SUBSTATES);
   55566:	21ff      	movs	r1, #255	; 0xff
   55568:	2006      	movs	r0, #6
   5556a:	f000 fcda 	bl	55f22 <pm_policy_state_lock_get>
}
   5556e:	2000      	movs	r0, #0
   55570:	bd08      	pop	{r3, pc}

00055572 <gpio_pin_configure_dt.constprop.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   55572:	4603      	mov	r3, r0
   55574:	b4f0      	push	{r4, r5, r6, r7}
				  spec->pin,
   55576:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   55578:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
   5557a:	88db      	ldrh	r3, [r3, #6]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   5557c:	2501      	movs	r5, #1
	struct gpio_driver_data *data =
   5557e:	6906      	ldr	r6, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   55580:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   55582:	6834      	ldr	r4, [r6, #0]
	return gpio_pin_configure(spec->port,
   55584:	bf54      	ite	pl
   55586:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   5558a:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   5558e:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   55590:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   55594:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
   55596:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   55598:	bf4c      	ite	mi
   5559a:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   5559c:	43ac      	bicpl	r4, r5
   5559e:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   555a0:	683b      	ldr	r3, [r7, #0]
}
   555a2:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   555a4:	4718      	bx	r3

000555a6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   555a6:	b510      	push	{r4, lr}
   555a8:	b086      	sub	sp, #24
	va_start(ap, fmt);
   555aa:	a80b      	add	r0, sp, #44	; 0x2c
   555ac:	9005      	str	r0, [sp, #20]
   555ae:	9003      	str	r0, [sp, #12]
   555b0:	980a      	ldr	r0, [sp, #40]	; 0x28
   555b2:	9c08      	ldr	r4, [sp, #32]
   555b4:	9002      	str	r0, [sp, #8]
   555b6:	2000      	movs	r0, #0
   555b8:	9400      	str	r4, [sp, #0]
   555ba:	9001      	str	r0, [sp, #4]
   555bc:	f7ef fdf4 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   555c0:	b006      	add	sp, #24
   555c2:	bd10      	pop	{r4, pc}

000555c4 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   555c4:	4603      	mov	r3, r0
   555c6:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   555c8:	7919      	ldrb	r1, [r3, #4]
   555ca:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   555cc:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   555ce:	fa03 f101 	lsl.w	r1, r3, r1
   555d2:	6903      	ldr	r3, [r0, #16]
   555d4:	681b      	ldr	r3, [r3, #0]
   555d6:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   555d8:	bf18      	it	ne
   555da:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   555de:	b112      	cbz	r2, 555e6 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   555e0:	6883      	ldr	r3, [r0, #8]
   555e2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   555e4:	4718      	bx	r3
   555e6:	6883      	ldr	r3, [r0, #8]
   555e8:	691b      	ldr	r3, [r3, #16]
   555ea:	e7fb      	b.n	555e4 <gpio_pin_set_dt.isra.0+0x20>

000555ec <k_msleep.constprop.0.isra.0>:
	return z_impl_k_sleep(timeout);
   555ec:	f240 6067 	movw	r0, #1639	; 0x667
   555f0:	2100      	movs	r1, #0
   555f2:	f7fd bc47 	b.w	52e84 <z_impl_k_sleep>

000555f6 <crypto_init>:
{
   555f6:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   555f8:	f002 fa7d 	bl	57af6 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
   555fc:	3800      	subs	r0, #0
   555fe:	bf18      	it	ne
   55600:	2001      	movne	r0, #1
}
   55602:	4240      	negs	r0, r0
   55604:	bd08      	pop	{r3, pc}

00055606 <startCrypto>:
{
   55606:	b508      	push	{r3, lr}
	status = crypto_init();
   55608:	f7ff fff5 	bl	555f6 <crypto_init>
	status = generate_key();
   5560c:	f7ed fd8a 	bl	43124 <generate_key>
}
   55610:	2000      	movs	r0, #0
   55612:	bd08      	pop	{r3, pc}

00055614 <cryptoEnd>:
{
   55614:	b508      	push	{r3, lr}
	status = crypto_finish();
   55616:	f7ed fd79 	bl	4310c <crypto_finish>
	if (status != 0) {
   5561a:	3800      	subs	r0, #0
   5561c:	bf18      	it	ne
   5561e:	2001      	movne	r0, #1
}
   55620:	4240      	negs	r0, r0
   55622:	bd08      	pop	{r3, pc}

00055624 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   55624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   55628:	4606      	mov	r6, r0
   5562a:	460d      	mov	r5, r1
   5562c:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   5562e:	4698      	mov	r8, r3
   55630:	b32b      	cbz	r3, 5567e <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   55632:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   55636:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   5563a:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   5563e:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   55640:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   55642:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   55646:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   5564a:	441c      	add	r4, r3
   5564c:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   5564e:	45ca      	cmp	sl, r9
   55650:	d309      	bcc.n	55666 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   55652:	4639      	mov	r1, r7
   55654:	4630      	mov	r0, r6
   55656:	46ac      	mov	ip, r5
   55658:	f8d8 2004 	ldr.w	r2, [r8, #4]
   5565c:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   55660:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   55664:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   55666:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   5566a:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   5566e:	4620      	mov	r0, r4
		*ps = s;
   55670:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   55674:	f7eb fbbe 	bl	40df4 <strlen>
   55678:	3001      	adds	r0, #1
   5567a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   5567c:	e7e7      	b.n	5564e <cbpprintf_external+0x2a>
}
   5567e:	f06f 0015 	mvn.w	r0, #21
   55682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00055686 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
   55686:	440a      	add	r2, r1
   55688:	428a      	cmp	r2, r1
   5568a:	d100      	bne.n	5568e <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
   5568c:	4770      	bx	lr
		seed ^= *src++;
   5568e:	f811 3b01 	ldrb.w	r3, [r1], #1
   55692:	ba40      	rev16	r0, r0
   55694:	b280      	uxth	r0, r0
   55696:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
   55698:	f3c0 1303 	ubfx	r3, r0, #4, #4
   5569c:	4043      	eors	r3, r0
		seed ^= seed << 12U;
   5569e:	0318      	lsls	r0, r3, #12
   556a0:	b280      	uxth	r0, r0
   556a2:	4043      	eors	r3, r0
		seed ^= (seed & 0xffU) << 5U;
   556a4:	0158      	lsls	r0, r3, #5
   556a6:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
   556aa:	4058      	eors	r0, r3
	for (; len > 0; len--) {
   556ac:	e7ec      	b.n	55688 <crc16_itu_t+0x2>

000556ae <crc7_be>:

#include <zephyr/sys/crc.h>

uint8_t crc7_be(uint8_t seed, const uint8_t *src, size_t len)
{
	while (len--) {
   556ae:	440a      	add	r2, r1
   556b0:	4291      	cmp	r1, r2
   556b2:	d100      	bne.n	556b6 <crc7_be+0x8>

		seed = (f << 1) ^ (f << 4);
	}

	return seed;
}
   556b4:	4770      	bx	lr
		uint8_t e = seed ^ *src++;
   556b6:	f811 3b01 	ldrb.w	r3, [r1], #1
   556ba:	4058      	eors	r0, r3
		uint8_t f = e ^ (e >> 4) ^ (e >> 7);
   556bc:	09c3      	lsrs	r3, r0, #7
   556be:	ea83 1310 	eor.w	r3, r3, r0, lsr #4
		seed = (f << 1) ^ (f << 4);
   556c2:	4058      	eors	r0, r3
   556c4:	0103      	lsls	r3, r0, #4
   556c6:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
   556ca:	b2d8      	uxtb	r0, r3
   556cc:	e7f0      	b.n	556b0 <crc7_be+0x2>

000556ce <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   556ce:	b40c      	push	{r2, r3}
   556d0:	4603      	mov	r3, r0
   556d2:	b507      	push	{r0, r1, r2, lr}
   556d4:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   556d6:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   556d8:	f240 1105 	movw	r1, #261	; 0x105
   556dc:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   556de:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   556e0:	4798      	blx	r3
	va_end(args);

	return res;
}
   556e2:	b003      	add	sp, #12
   556e4:	f85d eb04 	ldr.w	lr, [sp], #4
   556e8:	b002      	add	sp, #8
   556ea:	4770      	bx	lr

000556ec <arch_printk_char_out>:
}
   556ec:	2000      	movs	r0, #0
   556ee:	4770      	bx	lr

000556f0 <str_out>:
{
   556f0:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   556f2:	688a      	ldr	r2, [r1, #8]
   556f4:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   556f6:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   556f8:	b114      	cbz	r4, 55700 <str_out+0x10>
   556fa:	684b      	ldr	r3, [r1, #4]
   556fc:	4293      	cmp	r3, r2
   556fe:	dc01      	bgt.n	55704 <str_out+0x14>
		ctx->count++;
   55700:	608d      	str	r5, [r1, #8]
}
   55702:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   55704:	3b01      	subs	r3, #1
   55706:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   55708:	bf08      	it	eq
   5570a:	2200      	moveq	r2, #0
   5570c:	608d      	str	r5, [r1, #8]
   5570e:	bf0c      	ite	eq
   55710:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   55712:	54a0      	strbne	r0, [r4, r2]
   55714:	e7f5      	b.n	55702 <str_out+0x12>

00055716 <printk>:
{
   55716:	b40f      	push	{r0, r1, r2, r3}
   55718:	b507      	push	{r0, r1, r2, lr}
   5571a:	a904      	add	r1, sp, #16
   5571c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   55720:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   55722:	f7ef fa8f 	bl	44c44 <vprintk>
}
   55726:	b003      	add	sp, #12
   55728:	f85d eb04 	ldr.w	lr, [sp], #4
   5572c:	b004      	add	sp, #16
   5572e:	4770      	bx	lr

00055730 <snprintk>:
{
   55730:	b40c      	push	{r2, r3}
   55732:	b507      	push	{r0, r1, r2, lr}
   55734:	ab04      	add	r3, sp, #16
   55736:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   5573a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   5573c:	f7ef fa90 	bl	44c60 <vsnprintk>
}
   55740:	b003      	add	sp, #12
   55742:	f85d eb04 	ldr.w	lr, [sp], #4
   55746:	b002      	add	sp, #8
   55748:	4770      	bx	lr

0005574a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   5574a:	4604      	mov	r4, r0
   5574c:	b508      	push	{r3, lr}
   5574e:	4608      	mov	r0, r1
   55750:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   55752:	461a      	mov	r2, r3
   55754:	47a0      	blx	r4
	return z_impl_z_current_get();
   55756:	f7fd fbaf 	bl	52eb8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   5575a:	f7f0 ffa3 	bl	466a4 <z_impl_k_thread_abort>

0005575e <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   5575e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   55762:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   55764:	0840      	lsrs	r0, r0, #1
   55766:	4770      	bx	lr

00055768 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   55768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5576a:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   5576c:	f7ff fff7 	bl	5575e <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   55770:	fab0 f080 	clz	r0, r0
   55774:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   55778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   5577c:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   55780:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   55782:	1d17      	adds	r7, r2, #4
{
   55784:	460c      	mov	r4, r1
   55786:	3206      	adds	r2, #6
   55788:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   5578a:	b956      	cbnz	r6, 557a2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   5578c:	2101      	movs	r1, #1
   5578e:	fa01 f000 	lsl.w	r0, r1, r0
   55792:	68d9      	ldr	r1, [r3, #12]
   55794:	4301      	orrs	r1, r0
   55796:	60d9      	str	r1, [r3, #12]
		b->next = c;
   55798:	f8cc 4010 	str.w	r4, [ip, #16]
   5579c:	53dd      	strh	r5, [r3, r7]
   5579e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   557a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   557a2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   557a4:	3104      	adds	r1, #4
   557a6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   557a8:	53d8      	strh	r0, [r3, r7]
   557aa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   557ae:	529e      	strh	r6, [r3, r2]
   557b0:	80c5      	strh	r5, [r0, #6]
   557b2:	525d      	strh	r5, [r3, r1]
   557b4:	e7f4      	b.n	557a0 <free_list_add+0x38>

000557b6 <free_list_remove_bidx>:
{
   557b6:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   557b8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   557bc:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   557be:	4299      	cmp	r1, r3
   557c0:	f102 0104 	add.w	r1, r2, #4
   557c4:	d10a      	bne.n	557dc <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   557c6:	2301      	movs	r3, #1
   557c8:	fa03 f202 	lsl.w	r2, r3, r2
   557cc:	68c3      	ldr	r3, [r0, #12]
   557ce:	ea23 0302 	bic.w	r3, r3, r2
   557d2:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   557d4:	2300      	movs	r3, #0
   557d6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   557da:	bd10      	pop	{r4, pc}
   557dc:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   557de:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   557e2:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   557e6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   557ea:	80cb      	strh	r3, [r1, #6]
   557ec:	8082      	strh	r2, [r0, #4]
}
   557ee:	e7f4      	b.n	557da <free_list_remove_bidx+0x24>

000557f0 <free_list_remove>:
{
   557f0:	b508      	push	{r3, lr}
   557f2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   557f4:	f7ff ffb3 	bl	5575e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   557f8:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   557fc:	4618      	mov	r0, r3
}
   557fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   55802:	f1c2 021f 	rsb	r2, r2, #31
   55806:	f7ff bfd6 	b.w	557b6 <free_list_remove_bidx>

0005580a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   5580a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   5580e:	fab1 f581 	clz	r5, r1
   55812:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   55816:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   5581a:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   5581e:	4603      	mov	r3, r0
   55820:	460e      	mov	r6, r1
	if (b->next) {
   55822:	b1c2      	cbz	r2, 55856 <alloc_chunk+0x4c>
   55824:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   55826:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   5582a:	4618      	mov	r0, r3
   5582c:	4621      	mov	r1, r4
   5582e:	f7ff ff96 	bl	5575e <chunk_size>
   55832:	42b0      	cmp	r0, r6
   55834:	d306      	bcc.n	55844 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   55836:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   55838:	4618      	mov	r0, r3
   5583a:	f7ff ffbc 	bl	557b6 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   5583e:	4620      	mov	r0, r4
   55840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   55844:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   55848:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   5584a:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   5584c:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   55850:	d001      	beq.n	55856 <alloc_chunk+0x4c>
   55852:	4282      	cmp	r2, r0
   55854:	d1e7      	bne.n	55826 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   55856:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   5585a:	f1c5 0220 	rsb	r2, r5, #32
   5585e:	4094      	lsls	r4, r2
   55860:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   55862:	4014      	ands	r4, r2
   55864:	d0eb      	beq.n	5583e <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   55866:	fa94 f2a4 	rbit	r2, r4
   5586a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   5586e:	1d11      	adds	r1, r2, #4
   55870:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   55874:	4621      	mov	r1, r4
   55876:	e7df      	b.n	55838 <alloc_chunk+0x2e>

00055878 <merge_chunks>:
{
   55878:	b538      	push	{r3, r4, r5, lr}
   5587a:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   5587c:	f7ff ff6f 	bl	5575e <chunk_size>
{
   55880:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   55882:	4604      	mov	r4, r0
   55884:	4611      	mov	r1, r2
   55886:	4618      	mov	r0, r3
   55888:	f7ff ff69 	bl	5575e <chunk_size>
   5588c:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   5588e:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   55890:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   55894:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   55896:	4618      	mov	r0, r3
   55898:	f7ff ff61 	bl	5575e <chunk_size>
	void *cmem = &buf[c];
   5589c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   5589e:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   558a2:	bd38      	pop	{r3, r4, r5, pc}

000558a4 <split_chunks>:
{
   558a4:	b538      	push	{r3, r4, r5, lr}
   558a6:	460c      	mov	r4, r1
   558a8:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   558aa:	f7ff ff58 	bl	5575e <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   558ae:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   558b0:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   558b2:	4405      	add	r5, r0
   558b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   558b8:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   558ba:	8060      	strh	r0, [r4, #2]
   558bc:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   558c0:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   558c2:	8044      	strh	r4, [r0, #2]
   558c4:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   558c8:	4618      	mov	r0, r3
   558ca:	4611      	mov	r1, r2
   558cc:	f7ff ff47 	bl	5575e <chunk_size>
	void *cmem = &buf[c];
   558d0:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   558d2:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   558d6:	bd38      	pop	{r3, r4, r5, pc}

000558d8 <free_chunk>:
{
   558d8:	b538      	push	{r3, r4, r5, lr}
   558da:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   558dc:	f7ff ff3f 	bl	5575e <chunk_size>
   558e0:	460c      	mov	r4, r1
   558e2:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   558e4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   558e8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   558ea:	07da      	lsls	r2, r3, #31
   558ec:	d40a      	bmi.n	55904 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   558ee:	4628      	mov	r0, r5
   558f0:	f7ff ff7e 	bl	557f0 <free_list_remove>
	return c + chunk_size(h, c);
   558f4:	4621      	mov	r1, r4
   558f6:	4628      	mov	r0, r5
   558f8:	f7ff ff31 	bl	5575e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   558fc:	1822      	adds	r2, r4, r0
   558fe:	4628      	mov	r0, r5
   55900:	f7ff ffba 	bl	55878 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   55904:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   55908:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   5590a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   5590e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   55910:	07db      	lsls	r3, r3, #31
   55912:	d40c      	bmi.n	5592e <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   55914:	4628      	mov	r0, r5
   55916:	f7ff ff6b 	bl	557f0 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   5591a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   5591e:	4622      	mov	r2, r4
   55920:	1a61      	subs	r1, r4, r1
   55922:	4628      	mov	r0, r5
   55924:	f7ff ffa8 	bl	55878 <merge_chunks>
   55928:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   5592c:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   5592e:	4621      	mov	r1, r4
   55930:	4628      	mov	r0, r5
}
   55932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   55936:	f7ff bf17 	b.w	55768 <free_list_add>

0005593a <sys_heap_free>:
	if (mem == NULL) {
   5593a:	b161      	cbz	r1, 55956 <sys_heap_free+0x1c>
   5593c:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   5593e:	3904      	subs	r1, #4
   55940:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   55942:	f021 0307 	bic.w	r3, r1, #7
   55946:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   55948:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   5594a:	08c9      	lsrs	r1, r1, #3
   5594c:	f022 0201 	bic.w	r2, r2, #1
   55950:	805a      	strh	r2, [r3, #2]
   55952:	f7ff bfc1 	b.w	558d8 <free_chunk>
}
   55956:	4770      	bx	lr

00055958 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   55958:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   5595a:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   5595c:	b909      	cbnz	r1, 55962 <sys_heap_alloc+0xa>
		return NULL;
   5595e:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   55960:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   55962:	68ab      	ldr	r3, [r5, #8]
   55964:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   55968:	d9f9      	bls.n	5595e <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   5596a:	310b      	adds	r1, #11
   5596c:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   5596e:	4621      	mov	r1, r4
   55970:	4628      	mov	r0, r5
   55972:	f7ff ff4a 	bl	5580a <alloc_chunk>
	if (c == 0U) {
   55976:	4606      	mov	r6, r0
   55978:	2800      	cmp	r0, #0
   5597a:	d0f0      	beq.n	5595e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   5597c:	4601      	mov	r1, r0
   5597e:	4628      	mov	r0, r5
   55980:	f7ff feed 	bl	5575e <chunk_size>
   55984:	42a0      	cmp	r0, r4
   55986:	d907      	bls.n	55998 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   55988:	4628      	mov	r0, r5
   5598a:	1932      	adds	r2, r6, r4
   5598c:	f7ff ff8a 	bl	558a4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   55990:	4611      	mov	r1, r2
   55992:	4628      	mov	r0, r5
   55994:	f7ff fee8 	bl	55768 <free_list_add>
	void *cmem = &buf[c];
   55998:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   5599c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   5599e:	8853      	ldrh	r3, [r2, #2]
   559a0:	3004      	adds	r0, #4
   559a2:	f043 0301 	orr.w	r3, r3, #1
   559a6:	8053      	strh	r3, [r2, #2]
	return mem;
   559a8:	e7da      	b.n	55960 <sys_heap_alloc+0x8>

000559aa <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   559aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   559ae:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   559b2:	ea19 0901 	ands.w	r9, r9, r1
{
   559b6:	460f      	mov	r7, r1
   559b8:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   559ba:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   559bc:	d00c      	beq.n	559d8 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   559be:	424b      	negs	r3, r1
   559c0:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   559c2:	2b04      	cmp	r3, #4
   559c4:	461a      	mov	r2, r3
   559c6:	464f      	mov	r7, r9
   559c8:	bf28      	it	cs
   559ca:	2204      	movcs	r2, #4
	rew = align & -align;
   559cc:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   559ce:	b964      	cbnz	r4, 559ea <sys_heap_aligned_alloc+0x40>
		return NULL;
   559d0:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   559d2:	4628      	mov	r0, r5
   559d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   559d8:	2904      	cmp	r1, #4
   559da:	d804      	bhi.n	559e6 <sys_heap_aligned_alloc+0x3c>
}
   559dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   559e0:	4611      	mov	r1, r2
   559e2:	f7ff bfb9 	b.w	55958 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   559e6:	2204      	movs	r2, #4
   559e8:	e7f1      	b.n	559ce <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   559ea:	68b3      	ldr	r3, [r6, #8]
   559ec:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   559f0:	d9ee      	bls.n	559d0 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   559f2:	f104 010b 	add.w	r1, r4, #11
   559f6:	4439      	add	r1, r7
   559f8:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   559fa:	4630      	mov	r0, r6
   559fc:	08c9      	lsrs	r1, r1, #3
   559fe:	f7ff ff04 	bl	5580a <alloc_chunk>
	if (c0 == 0) {
   55a02:	4680      	mov	r8, r0
   55a04:	2800      	cmp	r0, #0
   55a06:	d0e3      	beq.n	559d0 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   55a08:	f109 0504 	add.w	r5, r9, #4
   55a0c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   55a10:	1e7b      	subs	r3, r7, #1
   55a12:	4435      	add	r5, r6
   55a14:	441d      	add	r5, r3
   55a16:	427f      	negs	r7, r7
   55a18:	403d      	ands	r5, r7
   55a1a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   55a1e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   55a20:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   55a22:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   55a24:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   55a26:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   55a2a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   55a2c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   55a30:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   55a34:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   55a38:	d208      	bcs.n	55a4c <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   55a3a:	4601      	mov	r1, r0
   55a3c:	463a      	mov	r2, r7
   55a3e:	4630      	mov	r0, r6
   55a40:	f7ff ff30 	bl	558a4 <split_chunks>
		free_list_add(h, c0);
   55a44:	4641      	mov	r1, r8
   55a46:	4630      	mov	r0, r6
   55a48:	f7ff fe8e 	bl	55768 <free_list_add>
	return c + chunk_size(h, c);
   55a4c:	4639      	mov	r1, r7
   55a4e:	4630      	mov	r0, r6
   55a50:	f7ff fe85 	bl	5575e <chunk_size>
   55a54:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   55a56:	4284      	cmp	r4, r0
   55a58:	d207      	bcs.n	55a6a <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   55a5a:	4630      	mov	r0, r6
   55a5c:	4622      	mov	r2, r4
   55a5e:	f7ff ff21 	bl	558a4 <split_chunks>
		free_list_add(h, c_end);
   55a62:	4621      	mov	r1, r4
   55a64:	4630      	mov	r0, r6
   55a66:	f7ff fe7f 	bl	55768 <free_list_add>
	void *cmem = &buf[c];
   55a6a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   55a6e:	8873      	ldrh	r3, [r6, #2]
   55a70:	f043 0301 	orr.w	r3, r3, #1
   55a74:	8073      	strh	r3, [r6, #2]
   55a76:	e7ac      	b.n	559d2 <sys_heap_aligned_alloc+0x28>

00055a78 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   55a78:	b4f0      	push	{r4, r5, r6, r7}
   55a7a:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   55a7c:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   55a7e:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   55a80:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   55a82:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   55a86:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   55a8a:	1a0e      	subs	r6, r1, r0
   55a8c:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   55a8e:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   55a92:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   55a94:	2700      	movs	r7, #0
   55a96:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   55a98:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   55a9c:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   55a9e:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   55aa0:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   55aa2:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   55aa6:	f1c2 0220 	rsb	r2, r2, #32
   55aaa:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   55aac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   55ab0:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   55ab4:	4294      	cmp	r4, r2
   55ab6:	d1fb      	bne.n	55ab0 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   55ab8:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   55aba:	f042 0201 	orr.w	r2, r2, #1
   55abe:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   55ac0:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   55ac2:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   55ac4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   55ac8:	8007      	strh	r7, [r0, #0]
   55aca:	8065      	strh	r5, [r4, #2]
   55acc:	1984      	adds	r4, r0, r6
   55ace:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   55ad2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   55ad6:	8067      	strh	r7, [r4, #2]
   55ad8:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   55ada:	885a      	ldrh	r2, [r3, #2]
   55adc:	f042 0201 	orr.w	r2, r2, #1
   55ae0:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   55ae2:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   55ae4:	f7ff be40 	b.w	55768 <free_list_add>

00055ae8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   55ae8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   55aea:	f013 0307 	ands.w	r3, r3, #7
   55aee:	d105      	bne.n	55afc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   55af0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   55af2:	2b00      	cmp	r3, #0
   55af4:	bf0c      	ite	eq
   55af6:	2000      	moveq	r0, #0
   55af8:	2003      	movne	r0, #3
   55afa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   55afc:	2b02      	cmp	r3, #2
   55afe:	d105      	bne.n	55b0c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   55b00:	8b40      	ldrh	r0, [r0, #26]
   55b02:	fab0 f080 	clz	r0, r0
   55b06:	0940      	lsrs	r0, r0, #5
   55b08:	0080      	lsls	r0, r0, #2
   55b0a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   55b0c:	2b01      	cmp	r3, #1
   55b0e:	d105      	bne.n	55b1c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   55b10:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   55b12:	2b00      	cmp	r3, #0
   55b14:	bf0c      	ite	eq
   55b16:	2000      	moveq	r0, #0
   55b18:	2005      	movne	r0, #5
   55b1a:	4770      	bx	lr
	int evt = EVT_NOP;
   55b1c:	2000      	movs	r0, #0
}
   55b1e:	4770      	bx	lr

00055b20 <validate_args>:
{
   55b20:	b510      	push	{r4, lr}
   55b22:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   55b24:	b100      	cbz	r0, 55b28 <validate_args+0x8>
   55b26:	b911      	cbnz	r1, 55b2e <validate_args+0xe>
		return -EINVAL;
   55b28:	f06f 0015 	mvn.w	r0, #21
}
   55b2c:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   55b2e:	1d08      	adds	r0, r1, #4
   55b30:	f000 f896 	bl	55c60 <sys_notify_validate>
	if ((rv == 0)
   55b34:	2800      	cmp	r0, #0
   55b36:	d1f9      	bne.n	55b2c <validate_args+0xc>
	    && ((cli->notify.flags
   55b38:	68a3      	ldr	r3, [r4, #8]
   55b3a:	2b03      	cmp	r3, #3
   55b3c:	d9f6      	bls.n	55b2c <validate_args+0xc>
   55b3e:	e7f3      	b.n	55b28 <validate_args+0x8>

00055b40 <notify_one>:
{
   55b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   55b44:	460d      	mov	r5, r1
   55b46:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   55b48:	4619      	mov	r1, r3
   55b4a:	1d28      	adds	r0, r5, #4
{
   55b4c:	4690      	mov	r8, r2
   55b4e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   55b50:	f000 f89a 	bl	55c88 <sys_notify_finalize>
	if (cb) {
   55b54:	4604      	mov	r4, r0
   55b56:	b138      	cbz	r0, 55b68 <notify_one+0x28>
		cb(mgr, cli, state, res);
   55b58:	4633      	mov	r3, r6
   55b5a:	4642      	mov	r2, r8
   55b5c:	4629      	mov	r1, r5
   55b5e:	4638      	mov	r0, r7
   55b60:	46a4      	mov	ip, r4
}
   55b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   55b66:	4760      	bx	ip
}
   55b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00055b6c <transition_complete>:
{
   55b6c:	b410      	push	{r4}
	__asm__ volatile(
   55b6e:	f04f 0420 	mov.w	r4, #32
   55b72:	f3ef 8211 	mrs	r2, BASEPRI
   55b76:	f384 8812 	msr	BASEPRI_MAX, r4
   55b7a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   55b7e:	6141      	str	r1, [r0, #20]
}
   55b80:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   55b84:	2101      	movs	r1, #1
   55b86:	f7ef b881 	b.w	44c8c <process_event>

00055b8a <onoff_manager_init>:
{
   55b8a:	b538      	push	{r3, r4, r5, lr}
   55b8c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   55b8e:	4605      	mov	r5, r0
   55b90:	b158      	cbz	r0, 55baa <onoff_manager_init+0x20>
	    || (transitions == NULL)
   55b92:	b151      	cbz	r1, 55baa <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   55b94:	680b      	ldr	r3, [r1, #0]
   55b96:	b143      	cbz	r3, 55baa <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   55b98:	684b      	ldr	r3, [r1, #4]
   55b9a:	b133      	cbz	r3, 55baa <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   55b9c:	221c      	movs	r2, #28
   55b9e:	2100      	movs	r1, #0
   55ba0:	f005 f995 	bl	5aece <memset>
	return 0;
   55ba4:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   55ba6:	612c      	str	r4, [r5, #16]
}
   55ba8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   55baa:	f06f 0015 	mvn.w	r0, #21
   55bae:	e7fb      	b.n	55ba8 <onoff_manager_init+0x1e>

00055bb0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   55bb0:	b570      	push	{r4, r5, r6, lr}
   55bb2:	4605      	mov	r5, r0
   55bb4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   55bb6:	f7ff ffb3 	bl	55b20 <validate_args>

	if (rv < 0) {
   55bba:	1e04      	subs	r4, r0, #0
   55bbc:	db15      	blt.n	55bea <onoff_request+0x3a>
   55bbe:	f04f 0320 	mov.w	r3, #32
   55bc2:	f3ef 8211 	mrs	r2, BASEPRI
   55bc6:	f383 8812 	msr	BASEPRI_MAX, r3
   55bca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   55bce:	f64f 71ff 	movw	r1, #65535	; 0xffff
   55bd2:	8b6b      	ldrh	r3, [r5, #26]
   55bd4:	8b2c      	ldrh	r4, [r5, #24]
   55bd6:	428b      	cmp	r3, r1
   55bd8:	f004 0407 	and.w	r4, r4, #7
   55bdc:	d107      	bne.n	55bee <onoff_request+0x3e>
	__asm__ volatile(
   55bde:	f382 8811 	msr	BASEPRI, r2
   55be2:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   55be6:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   55bea:	4620      	mov	r0, r4
   55bec:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   55bee:	2c02      	cmp	r4, #2
   55bf0:	d10c      	bne.n	55c0c <onoff_request+0x5c>
		mgr->refs += 1U;
   55bf2:	3301      	adds	r3, #1
   55bf4:	836b      	strh	r3, [r5, #26]
   55bf6:	f382 8811 	msr	BASEPRI, r2
   55bfa:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   55bfe:	2300      	movs	r3, #0
   55c00:	4622      	mov	r2, r4
   55c02:	4631      	mov	r1, r6
   55c04:	4628      	mov	r0, r5
   55c06:	f7ff ff9b 	bl	55b40 <notify_one>
   55c0a:	e7ee      	b.n	55bea <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   55c0c:	2c06      	cmp	r4, #6
   55c0e:	d814      	bhi.n	55c3a <onoff_request+0x8a>
   55c10:	e8df f004 	tbb	[pc, r4]
   55c14:	13131304 	.word	0x13131304
   55c18:	1a04      	.short	0x1a04
   55c1a:	04          	.byte	0x04
   55c1b:	00          	.byte	0x00
	parent->next = child;
   55c1c:	2300      	movs	r3, #0
   55c1e:	6033      	str	r3, [r6, #0]
	return list->tail;
   55c20:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   55c22:	b93b      	cbnz	r3, 55c34 <onoff_request+0x84>
	list->head = node;
   55c24:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   55c28:	b9ac      	cbnz	r4, 55c56 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   55c2a:	2102      	movs	r1, #2
   55c2c:	4628      	mov	r0, r5
   55c2e:	f7ef f82d 	bl	44c8c <process_event>
   55c32:	e7da      	b.n	55bea <onoff_request+0x3a>
	parent->next = child;
   55c34:	601e      	str	r6, [r3, #0]
	list->tail = node;
   55c36:	606e      	str	r6, [r5, #4]
}
   55c38:	e7f6      	b.n	55c28 <onoff_request+0x78>
   55c3a:	f382 8811 	msr	BASEPRI, r2
   55c3e:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   55c42:	f06f 0404 	mvn.w	r4, #4
   55c46:	e7d0      	b.n	55bea <onoff_request+0x3a>
   55c48:	f382 8811 	msr	BASEPRI, r2
   55c4c:	f3bf 8f6f 	isb	sy
   55c50:	f06f 0485 	mvn.w	r4, #133	; 0x85
   55c54:	e7c9      	b.n	55bea <onoff_request+0x3a>
   55c56:	f382 8811 	msr	BASEPRI, r2
   55c5a:	f3bf 8f6f 	isb	sy
		if (notify) {
   55c5e:	e7c4      	b.n	55bea <onoff_request+0x3a>

00055c60 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   55c60:	4603      	mov	r3, r0
   55c62:	b140      	cbz	r0, 55c76 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   55c64:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   55c66:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   55c6a:	2a02      	cmp	r2, #2
   55c6c:	d006      	beq.n	55c7c <sys_notify_validate+0x1c>
   55c6e:	2a03      	cmp	r2, #3
   55c70:	d004      	beq.n	55c7c <sys_notify_validate+0x1c>
   55c72:	2a01      	cmp	r2, #1
   55c74:	d005      	beq.n	55c82 <sys_notify_validate+0x22>
   55c76:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   55c7a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   55c7c:	681a      	ldr	r2, [r3, #0]
   55c7e:	2a00      	cmp	r2, #0
   55c80:	d0f9      	beq.n	55c76 <sys_notify_validate+0x16>
		notify->result = 0;
   55c82:	2000      	movs	r0, #0
   55c84:	6098      	str	r0, [r3, #8]
   55c86:	4770      	bx	lr

00055c88 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   55c88:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   55c8a:	6842      	ldr	r2, [r0, #4]
   55c8c:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   55c8e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   55c92:	2a02      	cmp	r2, #2
   55c94:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   55c98:	6081      	str	r1, [r0, #8]
	switch (method) {
   55c9a:	d007      	beq.n	55cac <sys_notify_finalize+0x24>
   55c9c:	2a03      	cmp	r2, #3
   55c9e:	d002      	beq.n	55ca6 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   55ca0:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   55ca2:	2000      	movs	r0, #0
   55ca4:	e001      	b.n	55caa <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   55ca6:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   55ca8:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   55caa:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   55cac:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   55cae:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   55cb0:	2800      	cmp	r0, #0
   55cb2:	d0f6      	beq.n	55ca2 <sys_notify_finalize+0x1a>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   55cb4:	f7fd fad4 	bl	53260 <z_impl_k_poll_signal_raise>
   55cb8:	e7f3      	b.n	55ca2 <sys_notify_finalize+0x1a>

00055cba <_ldiv5>:
	uint32_t v_lo = *v;
   55cba:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   55cbe:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   55cc0:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   55cc4:	fba2 2403 	umull	r2, r4, r2, r3
   55cc8:	18d5      	adds	r5, r2, r3
   55cca:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   55cce:	fba1 1303 	umull	r1, r3, r1, r3
   55cd2:	1852      	adds	r2, r2, r1
   55cd4:	eb44 0403 	adc.w	r4, r4, r3
   55cd8:	1952      	adds	r2, r2, r5
   55cda:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   55cde:	1889      	adds	r1, r1, r2
   55ce0:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   55ce4:	e9c0 1300 	strd	r1, r3, [r0]
}
   55ce8:	bd30      	pop	{r4, r5, pc}

00055cea <_get_digit>:
{
   55cea:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   55cec:	680a      	ldr	r2, [r1, #0]
{
   55cee:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   55cf0:	2a00      	cmp	r2, #0
   55cf2:	dd0f      	ble.n	55d14 <_get_digit+0x2a>
		--*digit_count;
   55cf4:	3a01      	subs	r2, #1
   55cf6:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   55cf8:	6844      	ldr	r4, [r0, #4]
   55cfa:	200a      	movs	r0, #10
   55cfc:	681a      	ldr	r2, [r3, #0]
   55cfe:	fba2 1200 	umull	r1, r2, r2, r0
   55d02:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   55d06:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   55d08:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   55d0c:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   55d10:	3030      	adds	r0, #48	; 0x30
}
   55d12:	bd10      	pop	{r4, pc}
		rval = '0';
   55d14:	2030      	movs	r0, #48	; 0x30
   55d16:	e7fc      	b.n	55d12 <_get_digit+0x28>

00055d18 <outs>:
{
   55d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   55d1c:	4607      	mov	r7, r0
   55d1e:	4688      	mov	r8, r1
   55d20:	4615      	mov	r5, r2
   55d22:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   55d24:	4614      	mov	r4, r2
   55d26:	42b4      	cmp	r4, r6
   55d28:	d305      	bcc.n	55d36 <outs+0x1e>
   55d2a:	b10e      	cbz	r6, 55d30 <outs+0x18>
	return (int)count;
   55d2c:	1b60      	subs	r0, r4, r5
   55d2e:	e008      	b.n	55d42 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   55d30:	7823      	ldrb	r3, [r4, #0]
   55d32:	2b00      	cmp	r3, #0
   55d34:	d0fa      	beq.n	55d2c <outs+0x14>
		int rc = out((int)*sp++, ctx);
   55d36:	4641      	mov	r1, r8
   55d38:	f814 0b01 	ldrb.w	r0, [r4], #1
   55d3c:	47b8      	blx	r7
		if (rc < 0) {
   55d3e:	2800      	cmp	r0, #0
   55d40:	daf1      	bge.n	55d26 <outs+0xe>
}
   55d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00055d46 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   55d46:	4770      	bx	lr

00055d48 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   55d48:	2806      	cmp	r0, #6
   55d4a:	d108      	bne.n	55d5e <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   55d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   55d50:	2201      	movs	r2, #1
   55d52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   55d56:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   55d5a:	bf20      	wfe
    while (true)
   55d5c:	e7fd      	b.n	55d5a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   55d5e:	4770      	bx	lr

00055d60 <pm_state_exit_post_ops>:
   55d60:	2300      	movs	r3, #0
   55d62:	f383 8811 	msr	BASEPRI, r3
   55d66:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   55d6a:	4770      	bx	lr

00055d6c <dummy_timestamp>:
}
   55d6c:	2000      	movs	r0, #0
   55d6e:	4770      	bx	lr

00055d70 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   55d70:	f001 ba67 	b.w	57242 <sys_clock_cycle_get_32>

00055d74 <atomic_inc>:
{
   55d74:	4603      	mov	r3, r0
}
   55d76:	e8d3 0fef 	ldaex	r0, [r3]
   55d7a:	1c42      	adds	r2, r0, #1
   55d7c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   55d80:	2900      	cmp	r1, #0
   55d82:	d1f8      	bne.n	55d76 <atomic_inc+0x2>
   55d84:	4770      	bx	lr

00055d86 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   55d86:	2100      	movs	r1, #0
{
   55d88:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   55d8a:	4608      	mov	r0, r1
   55d8c:	f7ef f90e 	bl	44fac <z_log_init.isra.0>
	}

	return 0;
}
   55d90:	2000      	movs	r0, #0
   55d92:	bd08      	pop	{r3, pc}

00055d94 <z_log_notify_backend_enabled>:
}
   55d94:	4770      	bx	lr

00055d96 <z_log_get_tag>:
}
   55d96:	2000      	movs	r0, #0
   55d98:	4770      	bx	lr

00055d9a <z_log_msg_finalize>:
{
   55d9a:	b570      	push	{r4, r5, r6, lr}
   55d9c:	460e      	mov	r6, r1
   55d9e:	4615      	mov	r5, r2
   55da0:	4619      	mov	r1, r3
	if (!msg) {
   55da2:	4604      	mov	r4, r0
   55da4:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   55da8:	b918      	cbnz	r0, 55db2 <z_log_msg_finalize+0x18>
}
   55daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   55dae:	f7ef b9a9 	b.w	45104 <z_log_dropped>
	if (data) {
   55db2:	b12b      	cbz	r3, 55dc0 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   55db4:	3010      	adds	r0, #16
   55db6:	f3c5 2349 	ubfx	r3, r5, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   55dba:	4418      	add	r0, r3
   55dbc:	f005 f84d 	bl	5ae5a <memcpy>
	msg->hdr.source = source;
   55dc0:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   55dc4:	4620      	mov	r0, r4
}
   55dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   55dca:	f7ef b9af 	b.w	4512c <z_log_msg_commit>

00055dce <out_func>:
{
   55dce:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   55dd0:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   55dd4:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   55dd8:	2101      	movs	r1, #1
   55dda:	6852      	ldr	r2, [r2, #4]
   55ddc:	f10d 0007 	add.w	r0, sp, #7
   55de0:	4798      	blx	r3
}
   55de2:	2000      	movs	r0, #0
   55de4:	b003      	add	sp, #12
   55de6:	f85d fb04 	ldr.w	pc, [sp], #4

00055dea <cr_out_func>:
	if (c == '\n') {
   55dea:	280a      	cmp	r0, #10
{
   55dec:	b538      	push	{r3, r4, r5, lr}
   55dee:	4604      	mov	r4, r0
   55df0:	460d      	mov	r5, r1
	if (c == '\n') {
   55df2:	d102      	bne.n	55dfa <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   55df4:	200d      	movs	r0, #13
   55df6:	f7ff ffea 	bl	55dce <out_func>
	out_func(c, ctx);
   55dfa:	4629      	mov	r1, r5
   55dfc:	4620      	mov	r0, r4
   55dfe:	f7ff ffe6 	bl	55dce <out_func>
}
   55e02:	2000      	movs	r0, #0
   55e04:	bd38      	pop	{r3, r4, r5, pc}

00055e06 <buffer_write>:
{
   55e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   55e08:	4606      	mov	r6, r0
   55e0a:	460d      	mov	r5, r1
   55e0c:	4614      	mov	r4, r2
   55e0e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   55e10:	4621      	mov	r1, r4
   55e12:	4628      	mov	r0, r5
   55e14:	463a      	mov	r2, r7
   55e16:	47b0      	blx	r6
	} while (len != 0);
   55e18:	1a24      	subs	r4, r4, r0
		buf += processed;
   55e1a:	4405      	add	r5, r0
	} while (len != 0);
   55e1c:	d1f8      	bne.n	55e10 <buffer_write+0xa>
}
   55e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00055e20 <cbvprintf>:
{
   55e20:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   55e22:	2400      	movs	r4, #0
   55e24:	9400      	str	r4, [sp, #0]
   55e26:	f7ea ffef 	bl	40e08 <z_cbvprintf_impl>
}
   55e2a:	b002      	add	sp, #8
   55e2c:	bd10      	pop	{r4, pc}

00055e2e <log_output_flush>:
{
   55e2e:	b510      	push	{r4, lr}
		     output->control_block->offset,
   55e30:	6842      	ldr	r2, [r0, #4]
{
   55e32:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   55e34:	e9d2 2300 	ldrd	r2, r3, [r2]
   55e38:	6881      	ldr	r1, [r0, #8]
   55e3a:	6800      	ldr	r0, [r0, #0]
   55e3c:	f7ff ffe3 	bl	55e06 <buffer_write>
	output->control_block->offset = 0;
   55e40:	2200      	movs	r2, #0
   55e42:	6863      	ldr	r3, [r4, #4]
   55e44:	601a      	str	r2, [r3, #0]
}
   55e46:	bd10      	pop	{r4, pc}

00055e48 <log_backend_uart_init>:
}
   55e48:	4770      	bx	lr

00055e4a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   55e4a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   55e4c:	ab0b      	add	r3, sp, #44	; 0x2c
   55e4e:	9305      	str	r3, [sp, #20]
   55e50:	9303      	str	r3, [sp, #12]
   55e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   55e54:	2201      	movs	r2, #1
   55e56:	9302      	str	r3, [sp, #8]
   55e58:	2300      	movs	r3, #0
   55e5a:	4618      	mov	r0, r3
   55e5c:	e9cd 3300 	strd	r3, r3, [sp]
   55e60:	f7ef f9a2 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   55e64:	b007      	add	sp, #28
   55e66:	f85d fb04 	ldr.w	pc, [sp], #4

00055e6a <disk_access_init>:
{
   55e6a:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   55e6c:	f7ef fbe8 	bl	45640 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   55e70:	b130      	cbz	r0, 55e80 <disk_access_init+0x16>
   55e72:	68c3      	ldr	r3, [r0, #12]
   55e74:	b123      	cbz	r3, 55e80 <disk_access_init+0x16>
				(disk->ops->init != NULL)) {
   55e76:	681b      	ldr	r3, [r3, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
   55e78:	b113      	cbz	r3, 55e80 <disk_access_init+0x16>
}
   55e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->init(disk);
   55e7e:	4718      	bx	r3
}
   55e80:	f06f 0015 	mvn.w	r0, #21
   55e84:	bd10      	pop	{r4, pc}

00055e86 <disk_access_status>:
{
   55e86:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   55e88:	f7ef fbda 	bl	45640 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   55e8c:	b130      	cbz	r0, 55e9c <disk_access_status+0x16>
   55e8e:	68c3      	ldr	r3, [r0, #12]
   55e90:	b123      	cbz	r3, 55e9c <disk_access_status+0x16>
				(disk->ops->status != NULL)) {
   55e92:	685b      	ldr	r3, [r3, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
   55e94:	b113      	cbz	r3, 55e9c <disk_access_status+0x16>
}
   55e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->status(disk);
   55e9a:	4718      	bx	r3
}
   55e9c:	f06f 0015 	mvn.w	r0, #21
   55ea0:	bd10      	pop	{r4, pc}

00055ea2 <disk_access_read>:
{
   55ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   55ea6:	460d      	mov	r5, r1
   55ea8:	4616      	mov	r6, r2
   55eaa:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   55eac:	f7ef fbc8 	bl	45640 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   55eb0:	b150      	cbz	r0, 55ec8 <disk_access_read+0x26>
   55eb2:	68c3      	ldr	r3, [r0, #12]
   55eb4:	b143      	cbz	r3, 55ec8 <disk_access_read+0x26>
				(disk->ops->read != NULL)) {
   55eb6:	689c      	ldr	r4, [r3, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
   55eb8:	b134      	cbz	r4, 55ec8 <disk_access_read+0x26>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
   55eba:	463b      	mov	r3, r7
   55ebc:	4632      	mov	r2, r6
   55ebe:	4629      	mov	r1, r5
   55ec0:	46a4      	mov	ip, r4
}
   55ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
   55ec6:	4760      	bx	ip
}
   55ec8:	f06f 0015 	mvn.w	r0, #21
   55ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00055ed0 <disk_access_write>:
{
   55ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   55ed4:	460d      	mov	r5, r1
   55ed6:	4616      	mov	r6, r2
   55ed8:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   55eda:	f7ef fbb1 	bl	45640 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   55ede:	b150      	cbz	r0, 55ef6 <disk_access_write+0x26>
   55ee0:	68c3      	ldr	r3, [r0, #12]
   55ee2:	b143      	cbz	r3, 55ef6 <disk_access_write+0x26>
				(disk->ops->write != NULL)) {
   55ee4:	68dc      	ldr	r4, [r3, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
   55ee6:	b134      	cbz	r4, 55ef6 <disk_access_write+0x26>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
   55ee8:	463b      	mov	r3, r7
   55eea:	4632      	mov	r2, r6
   55eec:	4629      	mov	r1, r5
   55eee:	46a4      	mov	ip, r4
}
   55ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
   55ef4:	4760      	bx	ip
}
   55ef6:	f06f 0015 	mvn.w	r0, #21
   55efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00055efe <disk_access_ioctl>:
{
   55efe:	b570      	push	{r4, r5, r6, lr}
   55f00:	460c      	mov	r4, r1
   55f02:	4615      	mov	r5, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
   55f04:	f7ef fb9c 	bl	45640 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   55f08:	b140      	cbz	r0, 55f1c <disk_access_ioctl+0x1e>
   55f0a:	68c3      	ldr	r3, [r0, #12]
   55f0c:	b133      	cbz	r3, 55f1c <disk_access_ioctl+0x1e>
				(disk->ops->ioctl != NULL)) {
   55f0e:	691b      	ldr	r3, [r3, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
   55f10:	b123      	cbz	r3, 55f1c <disk_access_ioctl+0x1e>
		rc = disk->ops->ioctl(disk, cmd, buf);
   55f12:	462a      	mov	r2, r5
   55f14:	4621      	mov	r1, r4
}
   55f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc = disk->ops->ioctl(disk, cmd, buf);
   55f1a:	4718      	bx	r3
}
   55f1c:	f06f 0015 	mvn.w	r0, #21
   55f20:	bd70      	pop	{r4, r5, r6, pc}

00055f22 <pm_policy_state_lock_get>:
		   (substate_lock_t[i].substate_id == substate_id ||
		    substate_id == PM_ALL_SUBSTATES)) {
			atomic_inc(&substate_lock_t[i].lock);
		}
	}
}
   55f22:	4770      	bx	lr

00055f24 <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
   55f24:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   55f26:	b11b      	cbz	r3, 55f30 <pm_device_state_get+0xc>
		return -ENOSYS;
	}

	*state = pm->state;
   55f28:	7a1b      	ldrb	r3, [r3, #8]

	return 0;
   55f2a:	2000      	movs	r0, #0
	*state = pm->state;
   55f2c:	700b      	strb	r3, [r1, #0]
	return 0;
   55f2e:	4770      	bx	lr
		return -ENOSYS;
   55f30:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   55f34:	4770      	bx	lr

00055f36 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   55f36:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   55f38:	b120      	cbz	r0, 55f44 <pm_device_is_busy+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   55f3a:	3004      	adds	r0, #4
   55f3c:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   55f40:	f000 0001 	and.w	r0, r0, #1
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
}
   55f44:	4770      	bx	lr

00055f46 <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   55f46:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   55f48:	b120      	cbz	r0, 55f54 <pm_device_wakeup_is_enabled+0xe>
   55f4a:	3004      	adds	r0, #4
   55f4c:	e8d0 0faf 	lda	r0, [r0]
   55f50:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_WS_ENABLED);
}
   55f54:	4770      	bx	lr

00055f56 <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   55f56:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   55f58:	b120      	cbz	r0, 55f64 <pm_device_state_is_locked+0xe>
   55f5a:	3004      	adds	r0, #4
   55f5c:	e8d0 0faf 	lda	r0, [r0]
   55f60:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
   55f64:	4770      	bx	lr

00055f66 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   55f66:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   55f68:	ab0b      	add	r3, sp, #44	; 0x2c
   55f6a:	9305      	str	r3, [sp, #20]
   55f6c:	9303      	str	r3, [sp, #12]
   55f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   55f70:	2201      	movs	r2, #1
   55f72:	9302      	str	r3, [sp, #8]
   55f74:	2300      	movs	r3, #0
   55f76:	4618      	mov	r0, r3
   55f78:	e9cd 3300 	strd	r3, r3, [sp]
   55f7c:	f7ef f914 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   55f80:	b007      	add	sp, #28
   55f82:	f85d fb04 	ldr.w	pc, [sp], #4

00055f86 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   55f86:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   55f88:	6800      	ldr	r0, [r0, #0]
   55f8a:	f7ef be4d 	b.w	45c28 <z_arm_fatal_error>

00055f8e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   55f8e:	2100      	movs	r1, #0
   55f90:	2001      	movs	r0, #1
   55f92:	f7ef be49 	b.w	45c28 <z_arm_fatal_error>

00055f96 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   55f96:	b508      	push	{r3, lr}
	handler();
   55f98:	f7ef ff20 	bl	45ddc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   55f9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   55fa0:	f7f0 b824 	b.w	45fec <z_arm_exc_exit>

00055fa4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   55fa4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   55fa6:	f383 880b 	msr	PSPLIM, r3
}
   55faa:	4770      	bx	lr

00055fac <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   55fac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   55fae:	ab0b      	add	r3, sp, #44	; 0x2c
   55fb0:	9305      	str	r3, [sp, #20]
   55fb2:	9303      	str	r3, [sp, #12]
   55fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   55fb6:	2201      	movs	r2, #1
   55fb8:	9302      	str	r3, [sp, #8]
   55fba:	2300      	movs	r3, #0
   55fbc:	4618      	mov	r0, r3
   55fbe:	e9cd 3300 	strd	r3, r3, [sp]
   55fc2:	f7ef f8f1 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   55fc6:	b007      	add	sp, #28
   55fc8:	f85d fb04 	ldr.w	pc, [sp], #4

00055fcc <z_arm_save_fp_context>:
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   55fcc:	f3ef 8314 	mrs	r3, CONTROL
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   55fd0:	075a      	lsls	r2, r3, #29
   55fd2:	d512      	bpl.n	55ffa <z_arm_save_fp_context+0x2e>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   55fd4:	f100 0240 	add.w	r2, r0, #64	; 0x40
   55fd8:	ec80 0a10 	vstmia	r0, {s0-s15}
   55fdc:	ec82 8a10 	vstmia	r2, {s16-s31}
  return __builtin_arm_get_fpscr();
   55fe0:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   55fe4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		buffer->ctx_saved = true;
   55fe8:	2201      	movs	r2, #1

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   55fea:	f023 0304 	bic.w	r3, r3, #4
		buffer->ctx_saved = true;
   55fee:	f880 2084 	strb.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   55ff2:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   55ff6:	f3bf 8f6f 	isb	sy
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   55ffa:	4770      	bx	lr

00055ffc <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   55ffc:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   56000:	b18b      	cbz	r3, 56026 <z_arm_restore_fp_context+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   56002:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   56006:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   5600a:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   5600e:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
   56012:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   56016:	eee1 3a10 	vmsr	fpscr, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);

		__asm__ volatile(
   5601a:	f100 0340 	add.w	r3, r0, #64	; 0x40
   5601e:	ec90 0a10 	vldmia	r0, {s0-s15}
   56022:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   56026:	4770      	bx	lr

00056028 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   56028:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   5602c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   56030:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   56032:	bf08      	it	eq
   56034:	f06f 0015 	mvneq.w	r0, #21
   56038:	4770      	bx	lr

0005603a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   5603a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   5603c:	ab0b      	add	r3, sp, #44	; 0x2c
   5603e:	9305      	str	r3, [sp, #20]
   56040:	9303      	str	r3, [sp, #12]
   56042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   56044:	2201      	movs	r2, #1
   56046:	9302      	str	r3, [sp, #8]
   56048:	2300      	movs	r3, #0
   5604a:	4618      	mov	r0, r3
   5604c:	e9cd 3300 	strd	r3, r3, [sp]
   56050:	f7ef f8aa 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   56054:	b007      	add	sp, #28
   56056:	f85d fb04 	ldr.w	pc, [sp], #4

0005605a <mpu_configure_region>:
{
   5605a:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   5605c:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   5605e:	684b      	ldr	r3, [r1, #4]
{
   56060:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   56062:	890a      	ldrh	r2, [r1, #8]
   56064:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   56066:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   56068:	3b01      	subs	r3, #1
   5606a:	f024 041f 	bic.w	r4, r4, #31
   5606e:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   56070:	f002 021f 	and.w	r2, r2, #31
   56074:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   56078:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   5607c:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   5607e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   56082:	9303      	str	r3, [sp, #12]
   56084:	f7f0 fb5a 	bl	4673c <region_allocate_and_init>
}
   56088:	b005      	add	sp, #20
   5608a:	bd30      	pop	{r4, r5, pc}

0005608c <malloc_prepare>:
}
   5608c:	2000      	movs	r0, #0
   5608e:	4770      	bx	lr

00056090 <_stdout_hook_default>:
}
   56090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   56094:	4770      	bx	lr

00056096 <_stdin_hook_default>:
}
   56096:	2000      	movs	r0, #0
   56098:	4770      	bx	lr

0005609a <_read>:
{
   5609a:	4608      	mov	r0, r1
   5609c:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   5609e:	f7f0 bcc9 	b.w	46a34 <z_impl_zephyr_read_stdin>

000560a2 <_write>:
{
   560a2:	4608      	mov	r0, r1
   560a4:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   560a6:	f7f0 bcd9 	b.w	46a5c <z_impl_zephyr_write_stdout>

000560aa <_close>:
int _close(int file)
   560aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   560ae:	4770      	bx	lr

000560b0 <_lseek>:
}
   560b0:	2000      	movs	r0, #0
   560b2:	4770      	bx	lr

000560b4 <_isatty>:
}
   560b4:	2802      	cmp	r0, #2
   560b6:	bfcc      	ite	gt
   560b8:	2000      	movgt	r0, #0
   560ba:	2001      	movle	r0, #1
   560bc:	4770      	bx	lr

000560be <_kill>:
}
   560be:	2000      	movs	r0, #0
   560c0:	4770      	bx	lr

000560c2 <_getpid>:
}
   560c2:	2000      	movs	r0, #0
   560c4:	4770      	bx	lr

000560c6 <_fstat>:
	st->st_mode = S_IFCHR;
   560c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   560ca:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   560cc:	604b      	str	r3, [r1, #4]
}
   560ce:	4770      	bx	lr

000560d0 <__retarget_lock_init_recursive>:
{
   560d0:	b510      	push	{r4, lr}
   560d2:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   560d4:	2014      	movs	r0, #20
   560d6:	f7fd f94d 	bl	53374 <malloc>
   560da:	6020      	str	r0, [r4, #0]
}
   560dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   560e0:	f004 bba1 	b.w	5a826 <z_impl_k_mutex_init>

000560e4 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   560e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   560e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   560ec:	f7fc b9ce 	b.w	5248c <z_impl_k_mutex_lock>

000560f0 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   560f0:	f7fc ba46 	b.w	52580 <z_impl_k_mutex_unlock>

000560f4 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   560f4:	f7fb bf4c 	b.w	51f90 <z_impl_z_errno>

000560f8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   560f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   560fa:	ab0b      	add	r3, sp, #44	; 0x2c
   560fc:	9305      	str	r3, [sp, #20]
   560fe:	9303      	str	r3, [sp, #12]
   56100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   56102:	9302      	str	r3, [sp, #8]
   56104:	2300      	movs	r3, #0
   56106:	4618      	mov	r0, r3
   56108:	e9cd 3300 	strd	r3, r3, [sp]
   5610c:	f7ef f84c 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   56110:	b007      	add	sp, #28
   56112:	f85d fb04 	ldr.w	pc, [sp], #4

00056116 <fatfs_tell>:
	return f_tell((FIL *)zfp->filep);
   56116:	6803      	ldr	r3, [r0, #0]
}
   56118:	6b98      	ldr	r0, [r3, #56]	; 0x38
   5611a:	4770      	bx	lr

0005611c <fatfs_mkdir>:
{
   5611c:	b508      	push	{r3, lr}
	res = f_mkdir(&path[1]);
   5611e:	1c48      	adds	r0, r1, #1
   56120:	f003 fa02 	bl	59528 <f_mkdir>
}
   56124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
   56128:	f7f1 b804 	b.w	47134 <translate_error>

0005612c <fatfs_unlink>:
{
   5612c:	b508      	push	{r3, lr}
	res = f_unlink(&path[1]);
   5612e:	1c48      	adds	r0, r1, #1
   56130:	f003 f99f 	bl	59472 <f_unlink>
}
   56134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
   56138:	f7f0 bffc 	b.w	47134 <translate_error>

0005613c <fatfs_rename>:
{
   5613c:	b530      	push	{r4, r5, lr}
	res = f_stat(&to[1], &fno);
   5613e:	1c54      	adds	r4, r2, #1
{
   56140:	b0c9      	sub	sp, #292	; 0x124
   56142:	460d      	mov	r5, r1
	res = f_stat(&to[1], &fno);
   56144:	4620      	mov	r0, r4
   56146:	4669      	mov	r1, sp
   56148:	f003 f877 	bl	5923a <f_stat>
	if (FR_OK == res) {
   5614c:	b940      	cbnz	r0, 56160 <fatfs_rename+0x24>
		res = f_unlink(&to[1]);
   5614e:	4620      	mov	r0, r4
   56150:	f003 f98f 	bl	59472 <f_unlink>
		if (FR_OK != res)
   56154:	b120      	cbz	r0, 56160 <fatfs_rename+0x24>
}
   56156:	b049      	add	sp, #292	; 0x124
   56158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	res = translate_error(res);
   5615c:	f7f0 bfea 	b.w	47134 <translate_error>
	res = f_rename(&from[1], &to[1]);
   56160:	4621      	mov	r1, r4
   56162:	1c68      	adds	r0, r5, #1
   56164:	f003 fa96 	bl	59694 <f_rename>
   56168:	e7f5      	b.n	56156 <fatfs_rename+0x1a>

0005616a <fatfs_unmount>:
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
   5616a:	2200      	movs	r2, #0
{
   5616c:	b508      	push	{r3, lr}
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
   5616e:	68c1      	ldr	r1, [r0, #12]
   56170:	4610      	mov	r0, r2
   56172:	3101      	adds	r1, #1
   56174:	f7f8 f906 	bl	4e384 <f_mount>
}
   56178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return translate_error(res);
   5617c:	f7f0 bfda 	b.w	47134 <translate_error>

00056180 <fatfs_sync>:
{
   56180:	b508      	push	{r3, lr}
	res = f_sync(zfp->filep);
   56182:	6800      	ldr	r0, [r0, #0]
   56184:	f002 fe57 	bl	58e36 <f_sync>
}
   56188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
   5618c:	f7f0 bfd2 	b.w	47134 <translate_error>

00056190 <fatfs_seek>:
	switch (whence) {
   56190:	2a01      	cmp	r2, #1
{
   56192:	b510      	push	{r4, lr}
	switch (whence) {
   56194:	d012      	beq.n	561bc <fatfs_seek+0x2c>
   56196:	2a02      	cmp	r2, #2
   56198:	d014      	beq.n	561c4 <fatfs_seek+0x34>
   5619a:	b9b2      	cbnz	r2, 561ca <fatfs_seek+0x3a>
	if ((pos < 0) || (pos > f_size((FIL *)zfp->filep))) {
   5619c:	2900      	cmp	r1, #0
   5619e:	db14      	blt.n	561ca <fatfs_seek+0x3a>
   561a0:	6800      	ldr	r0, [r0, #0]
   561a2:	17cb      	asrs	r3, r1, #31
   561a4:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
   561a8:	428c      	cmp	r4, r1
   561aa:	419a      	sbcs	r2, r3
   561ac:	d30d      	bcc.n	561ca <fatfs_seek+0x3a>
	res = f_lseek(zfp->filep, pos);
   561ae:	460a      	mov	r2, r1
   561b0:	f002 fee6 	bl	58f80 <f_lseek>
}
   561b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return translate_error(res);
   561b8:	f7f0 bfbc 	b.w	47134 <translate_error>
		pos = f_tell((FIL *)zfp->filep) + offset;
   561bc:	6803      	ldr	r3, [r0, #0]
   561be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		pos = f_size((FIL *)zfp->filep) + offset;
   561c0:	4419      	add	r1, r3
		break;
   561c2:	e7eb      	b.n	5619c <fatfs_seek+0xc>
		pos = f_size((FIL *)zfp->filep) + offset;
   561c4:	6803      	ldr	r3, [r0, #0]
   561c6:	691b      	ldr	r3, [r3, #16]
   561c8:	e7fa      	b.n	561c0 <fatfs_seek+0x30>
}
   561ca:	f06f 0015 	mvn.w	r0, #21
   561ce:	bd10      	pop	{r4, pc}

000561d0 <fatfs_truncate>:
{
   561d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   561d2:	4604      	mov	r4, r0
	off_t cur_length = f_size((FIL *)zfp->filep);
   561d4:	6800      	ldr	r0, [r0, #0]
	res = f_lseek(zfp->filep, length);
   561d6:	460a      	mov	r2, r1
   561d8:	17cb      	asrs	r3, r1, #31
{
   561da:	460d      	mov	r5, r1
	off_t cur_length = f_size((FIL *)zfp->filep);
   561dc:	6907      	ldr	r7, [r0, #16]
	res = f_lseek(zfp->filep, length);
   561de:	f002 fecf 	bl	58f80 <f_lseek>
	if (res != FR_OK) {
   561e2:	b120      	cbz	r0, 561ee <fatfs_truncate+0x1e>
}
   561e4:	b003      	add	sp, #12
   561e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	res = translate_error(res);
   561ea:	f7f0 bfa3 	b.w	47134 <translate_error>
	if (length < cur_length) {
   561ee:	42af      	cmp	r7, r5
	off_t cur_length = f_size((FIL *)zfp->filep);
   561f0:	463e      	mov	r6, r7
		res = f_truncate(zfp->filep);
   561f2:	6820      	ldr	r0, [r4, #0]
	if (length < cur_length) {
   561f4:	dd02      	ble.n	561fc <fatfs_truncate+0x2c>
		res = f_truncate(zfp->filep);
   561f6:	f003 f8d4 	bl	593a2 <f_truncate>
   561fa:	e7f3      	b.n	561e4 <fatfs_truncate+0x14>
		res = f_lseek(zfp->filep, cur_length);
   561fc:	463a      	mov	r2, r7
   561fe:	17fb      	asrs	r3, r7, #31
		length = f_tell((FIL *)zfp->filep);
   56200:	6b85      	ldr	r5, [r0, #56]	; 0x38
		res = f_lseek(zfp->filep, cur_length);
   56202:	f002 febd 	bl	58f80 <f_lseek>
		if (res != FR_OK) {
   56206:	2800      	cmp	r0, #0
   56208:	d1ec      	bne.n	561e4 <fatfs_truncate+0x14>
		uint8_t c = 0U;
   5620a:	f88d 0003 	strb.w	r0, [sp, #3]
		for (int i = cur_length; i < length; i++) {
   5620e:	42ae      	cmp	r6, r5
   56210:	db01      	blt.n	56216 <fatfs_truncate+0x46>
   56212:	2000      	movs	r0, #0
   56214:	e7e6      	b.n	561e4 <fatfs_truncate+0x14>
			res = f_write(zfp->filep, &c, 1, &bw);
   56216:	2201      	movs	r2, #1
   56218:	6820      	ldr	r0, [r4, #0]
   5621a:	ab01      	add	r3, sp, #4
   5621c:	f10d 0103 	add.w	r1, sp, #3
   56220:	f002 fd2e 	bl	58c80 <f_write>
			if (res != FR_OK) {
   56224:	2800      	cmp	r0, #0
   56226:	d1dd      	bne.n	561e4 <fatfs_truncate+0x14>
		for (int i = cur_length; i < length; i++) {
   56228:	3601      	adds	r6, #1
   5622a:	e7f0      	b.n	5620e <fatfs_truncate+0x3e>

0005622c <fatfs_write>:
{
   5622c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   5622e:	4604      	mov	r4, r0
	if (zfp->flags & FS_O_APPEND) {
   56230:	7a23      	ldrb	r3, [r4, #8]
	off_t pos = f_size((FIL *)zfp->filep);
   56232:	6800      	ldr	r0, [r0, #0]
	if (zfp->flags & FS_O_APPEND) {
   56234:	069b      	lsls	r3, r3, #26
{
   56236:	4616      	mov	r6, r2
   56238:	460d      	mov	r5, r1
	off_t pos = f_size((FIL *)zfp->filep);
   5623a:	6902      	ldr	r2, [r0, #16]
	if (zfp->flags & FS_O_APPEND) {
   5623c:	d409      	bmi.n	56252 <fatfs_write+0x26>
		res = f_write(zfp->filep, ptr, size, &bw);
   5623e:	4632      	mov	r2, r6
   56240:	4629      	mov	r1, r5
   56242:	6820      	ldr	r0, [r4, #0]
   56244:	ab01      	add	r3, sp, #4
   56246:	f002 fd1b 	bl	58c80 <f_write>
	if (res != FR_OK) {
   5624a:	b938      	cbnz	r0, 5625c <fatfs_write+0x30>
}
   5624c:	9801      	ldr	r0, [sp, #4]
   5624e:	b002      	add	sp, #8
   56250:	bd70      	pop	{r4, r5, r6, pc}
		res = f_lseek(zfp->filep, pos);
   56252:	17d3      	asrs	r3, r2, #31
   56254:	f002 fe94 	bl	58f80 <f_lseek>
	if (res == FR_OK) {
   56258:	2800      	cmp	r0, #0
   5625a:	d0f0      	beq.n	5623e <fatfs_write+0x12>
}
   5625c:	b002      	add	sp, #8
   5625e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = translate_error(res);
   56262:	f7f0 bf67 	b.w	47134 <translate_error>

00056266 <fatfs_read>:
{
   56266:	b507      	push	{r0, r1, r2, lr}
	res = f_read(zfp->filep, ptr, size, &br);
   56268:	6800      	ldr	r0, [r0, #0]
   5626a:	ab01      	add	r3, sp, #4
   5626c:	f002 fc5d 	bl	58b2a <f_read>
	if (res != FR_OK) {
   56270:	b120      	cbz	r0, 5627c <fatfs_read+0x16>
}
   56272:	b003      	add	sp, #12
   56274:	f85d eb04 	ldr.w	lr, [sp], #4
		return translate_error(res);
   56278:	f7f0 bf5c 	b.w	47134 <translate_error>
}
   5627c:	9801      	ldr	r0, [sp, #4]
   5627e:	b003      	add	sp, #12
   56280:	f85d fb04 	ldr.w	pc, [sp], #4

00056284 <fatfs_stat>:
{
   56284:	4608      	mov	r0, r1
   56286:	b530      	push	{r4, r5, lr}
   56288:	b0c9      	sub	sp, #292	; 0x124
	res = f_stat(&path[1], &fno);
   5628a:	4669      	mov	r1, sp
   5628c:	3001      	adds	r0, #1
{
   5628e:	4615      	mov	r5, r2
	res = f_stat(&path[1], &fno);
   56290:	f002 ffd3 	bl	5923a <f_stat>
	if (res == FR_OK) {
   56294:	4604      	mov	r4, r0
   56296:	b968      	cbnz	r0, 562b4 <fatfs_stat+0x30>
		entry->type = ((fno.fattrib & AM_DIR) ?
   56298:	4628      	mov	r0, r5
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   5629a:	f89d 300c 	ldrb.w	r3, [sp, #12]
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   5629e:	f10d 011a 	add.w	r1, sp, #26
   562a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
		entry->type = ((fno.fattrib & AM_DIR) ?
   562a6:	f800 3b01 	strb.w	r3, [r0], #1
   562aa:	f004 ffbd 	bl	5b228 <strcpy>
		entry->size = fno.fsize;
   562ae:	9b00      	ldr	r3, [sp, #0]
   562b0:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
	return translate_error(res);
   562b4:	4620      	mov	r0, r4
}
   562b6:	b049      	add	sp, #292	; 0x124
   562b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
   562bc:	f7f0 bf3a 	b.w	47134 <translate_error>

000562c0 <fatfs_readdir>:
{
   562c0:	b530      	push	{r4, r5, lr}
   562c2:	b0c9      	sub	sp, #292	; 0x124
   562c4:	460c      	mov	r4, r1
	res = f_readdir(zdp->dirp, &fno);
   562c6:	6800      	ldr	r0, [r0, #0]
   562c8:	4669      	mov	r1, sp
   562ca:	f002 ff94 	bl	591f6 <f_readdir>
	if (res == FR_OK) {
   562ce:	4605      	mov	r5, r0
   562d0:	b970      	cbnz	r0, 562f0 <fatfs_readdir+0x30>
   562d2:	f10d 011a 	add.w	r1, sp, #26
   562d6:	1c60      	adds	r0, r4, #1
   562d8:	f004 ffa6 	bl	5b228 <strcpy>
		if (entry->name[0] != 0) {
   562dc:	7863      	ldrb	r3, [r4, #1]
   562de:	b13b      	cbz	r3, 562f0 <fatfs_readdir+0x30>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   562e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   562e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
			entry->type = ((fno.fattrib & AM_DIR) ?
   562e8:	7023      	strb	r3, [r4, #0]
			entry->size = fno.fsize;
   562ea:	9b00      	ldr	r3, [sp, #0]
   562ec:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	return translate_error(res);
   562f0:	4628      	mov	r0, r5
}
   562f2:	b049      	add	sp, #292	; 0x124
   562f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
   562f8:	f7f0 bf1c 	b.w	47134 <translate_error>

000562fc <fatfs_statvfs>:
	DWORD f_bfree = 0;
   562fc:	2300      	movs	r3, #0
{
   562fe:	b513      	push	{r0, r1, r4, lr}
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
   56300:	68c0      	ldr	r0, [r0, #12]
{
   56302:	4614      	mov	r4, r2
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
   56304:	a901      	add	r1, sp, #4
   56306:	466a      	mov	r2, sp
   56308:	3001      	adds	r0, #1
	DWORD f_bfree = 0;
   5630a:	9301      	str	r3, [sp, #4]
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
   5630c:	f002 ffb4 	bl	59278 <f_getfree>
	if (res != FR_OK) {
   56310:	b968      	cbnz	r0, 5632e <fatfs_statvfs+0x32>
	stat->f_bfree = f_bfree;
   56312:	9b01      	ldr	r3, [sp, #4]
	stat->f_frsize = fs->csize * stat->f_bsize;
   56314:	9a00      	ldr	r2, [sp, #0]
	stat->f_bfree = f_bfree;
   56316:	60e3      	str	r3, [r4, #12]
	stat->f_bsize = FF_MIN_SS;
   56318:	f44f 7300 	mov.w	r3, #512	; 0x200
   5631c:	6023      	str	r3, [r4, #0]
	stat->f_frsize = fs->csize * stat->f_bsize;
   5631e:	8953      	ldrh	r3, [r2, #10]
   56320:	025b      	lsls	r3, r3, #9
   56322:	6063      	str	r3, [r4, #4]
	stat->f_blocks = (fs->n_fatent - 2);
   56324:	69d3      	ldr	r3, [r2, #28]
   56326:	3b02      	subs	r3, #2
   56328:	60a3      	str	r3, [r4, #8]
}
   5632a:	b002      	add	sp, #8
   5632c:	bd10      	pop	{r4, pc}
		return -EIO;
   5632e:	f06f 0004 	mvn.w	r0, #4
   56332:	e7fa      	b.n	5632a <fatfs_statvfs+0x2e>

00056334 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   56334:	b508      	push	{r3, lr}
	net_if_init();
   56336:	f7f0 ffcf 	bl	472d8 <net_if_init>
	net_if_post_init();
   5633a:	f7f0 fff1 	bl	47320 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   5633e:	2000      	movs	r0, #0
   56340:	bd08      	pop	{r3, pc}

00056342 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   56342:	b110      	cbz	r0, 5634a <net_if_l2+0x8>
   56344:	6800      	ldr	r0, [r0, #0]
   56346:	b100      	cbz	r0, 5634a <net_if_l2+0x8>
	return iface->if_dev->l2;
   56348:	6840      	ldr	r0, [r0, #4]
}
   5634a:	4770      	bx	lr

0005634c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   5634c:	2301      	movs	r3, #1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   5634e:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   56350:	f001 011f 	and.w	r1, r1, #31
   56354:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   56356:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   5635a:	e8d0 2fef 	ldaex	r2, [r0]
   5635e:	431a      	orrs	r2, r3
   56360:	e8c0 2fe1 	stlex	r1, r2, [r0]
   56364:	2900      	cmp	r1, #0
   56366:	d1f8      	bne.n	5635a <atomic_set_bit+0xe>
}
   56368:	4770      	bx	lr

0005636a <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   5636a:	2301      	movs	r3, #1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   5636c:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   5636e:	f001 011f 	and.w	r1, r1, #31
   56372:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   56374:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   56376:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   5637a:	e8d0 2fef 	ldaex	r2, [r0]
   5637e:	401a      	ands	r2, r3
   56380:	e8c0 2fe1 	stlex	r1, r2, [r0]
   56384:	2900      	cmp	r1, #0
   56386:	d1f8      	bne.n	5637a <atomic_clear_bit+0x10>
}
   56388:	4770      	bx	lr

0005638a <net_if_flag_is_set>:
	if (iface == NULL) {
   5638a:	b130      	cbz	r0, 5639a <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   5638c:	6803      	ldr	r3, [r0, #0]
   5638e:	330c      	adds	r3, #12
   56390:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   56394:	4108      	asrs	r0, r1
   56396:	f000 0001 	and.w	r0, r0, #1
}
   5639a:	4770      	bx	lr

0005639c <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   5639c:	b510      	push	{r4, lr}
   5639e:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   563a0:	f7ff ffcf 	bl	56342 <net_if_l2>
   563a4:	b128      	cbz	r0, 563b2 <l2_flags_get.isra.0+0x16>
   563a6:	68c2      	ldr	r2, [r0, #12]
   563a8:	b11a      	cbz	r2, 563b2 <l2_flags_get.isra.0+0x16>
}
   563aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   563ae:	4618      	mov	r0, r3
   563b0:	4710      	bx	r2
}
   563b2:	bd10      	pop	{r4, pc}

000563b4 <update_operational_state>:
{
   563b4:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   563b6:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   563b8:	2100      	movs	r1, #0
{
   563ba:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   563bc:	f893 2020 	ldrb.w	r2, [r3, #32]
   563c0:	f7ff ffe3 	bl	5638a <net_if_flag_is_set>
	if (!net_if_is_admin_up(iface)) {
   563c4:	b978      	cbnz	r0, 563e6 <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   563c6:	2102      	movs	r1, #2
   563c8:	6823      	ldr	r3, [r4, #0]
   563ca:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   563ce:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   563d0:	f890 3020 	ldrb.w	r3, [r0, #32]
   563d4:	428b      	cmp	r3, r1
   563d6:	d12b      	bne.n	56430 <update_operational_state+0x7c>
		if (prev_state == NET_IF_OPER_UP) {
   563d8:	2a06      	cmp	r2, #6
   563da:	d129      	bne.n	56430 <update_operational_state+0x7c>
	atomic_clear_bit(iface->if_dev->flags, value);
   563dc:	2108      	movs	r1, #8
   563de:	300c      	adds	r0, #12
   563e0:	f7ff ffc3 	bl	5636a <atomic_clear_bit>
	return (iface->if_dev->socket_offload != NULL);
   563e4:	e01c      	b.n	56420 <update_operational_state+0x6c>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   563e6:	2109      	movs	r1, #9
   563e8:	4620      	mov	r0, r4
   563ea:	f7ff ffce 	bl	5638a <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   563ee:	2800      	cmp	r0, #0
   563f0:	d0e9      	beq.n	563c6 <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   563f2:	210a      	movs	r1, #10
   563f4:	4620      	mov	r0, r4
   563f6:	f7ff ffc8 	bl	5638a <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   563fa:	6821      	ldr	r1, [r4, #0]
   563fc:	f1c0 0306 	rsb	r3, r0, #6
   56400:	b2db      	uxtb	r3, r3
   56402:	f881 3020 	strb.w	r3, [r1, #32]
	return iface->if_dev->oper_state;
   56406:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   56408:	f890 1020 	ldrb.w	r1, [r0, #32]
   5640c:	4299      	cmp	r1, r3
   5640e:	d10f      	bne.n	56430 <update_operational_state+0x7c>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   56410:	2906      	cmp	r1, #6
   56412:	d1e1      	bne.n	563d8 <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   56414:	2a06      	cmp	r2, #6
   56416:	d00b      	beq.n	56430 <update_operational_state+0x7c>
	atomic_set_bit(iface->if_dev->flags, value);
   56418:	2108      	movs	r1, #8
   5641a:	300c      	adds	r0, #12
   5641c:	f7ff ff96 	bl	5634c <atomic_set_bit>
	return (iface->if_dev->socket_offload != NULL);
   56420:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   56422:	69db      	ldr	r3, [r3, #28]
   56424:	b923      	cbnz	r3, 56430 <update_operational_state+0x7c>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   56426:	4620      	mov	r0, r4
}
   56428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   5642c:	f7ff bfb6 	b.w	5639c <l2_flags_get.isra.0>
}
   56430:	bd10      	pop	{r4, pc}

00056432 <net_if_flag_test_and_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   56432:	2301      	movs	r3, #1
static inline bool net_if_flag_test_and_set(struct net_if *iface,
   56434:	b510      	push	{r4, lr}
   56436:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   5643a:	300c      	adds	r0, #12
   5643c:	e8d0 3fef 	ldaex	r3, [r0]
   56440:	ea43 0201 	orr.w	r2, r3, r1
   56444:	e8c0 2fe4 	stlex	r4, r2, [r0]
   56448:	2c00      	cmp	r4, #0
   5644a:	d1f7      	bne.n	5643c <net_if_flag_test_and_set.isra.0+0xa>
	return (old & mask) != 0;
   5644c:	4219      	tst	r1, r3
}
   5644e:	bf14      	ite	ne
   56450:	2001      	movne	r0, #1
   56452:	2000      	moveq	r0, #0
   56454:	bd10      	pop	{r4, pc}

00056456 <net_if_up>:
{
   56456:	b538      	push	{r3, r4, r5, lr}
   56458:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   5645a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   5645e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   56462:	f7f0 ff2b 	bl	472bc <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   56466:	2100      	movs	r1, #0
   56468:	4628      	mov	r0, r5
   5646a:	f7ff ff8e 	bl	5638a <net_if_flag_is_set>
   5646e:	4604      	mov	r4, r0
   56470:	b9d0      	cbnz	r0, 564a8 <net_if_up+0x52>
	return (iface->if_dev->socket_offload != NULL);
   56472:	682b      	ldr	r3, [r5, #0]
	if (is_iface_offloaded(iface)) {
   56474:	69db      	ldr	r3, [r3, #28]
   56476:	b95b      	cbnz	r3, 56490 <net_if_up+0x3a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   56478:	4628      	mov	r0, r5
   5647a:	f7ff ff62 	bl	56342 <net_if_l2>
   5647e:	4604      	mov	r4, r0
   56480:	b130      	cbz	r0, 56490 <net_if_up+0x3a>
   56482:	6884      	ldr	r4, [r0, #8]
   56484:	b124      	cbz	r4, 56490 <net_if_up+0x3a>
	status = net_if_l2(iface)->enable(iface, true);
   56486:	2101      	movs	r1, #1
   56488:	4628      	mov	r0, r5
   5648a:	47a0      	blx	r4
	if (status < 0) {
   5648c:	1e04      	subs	r4, r0, #0
   5648e:	db07      	blt.n	564a0 <net_if_up+0x4a>
	atomic_set_bit(iface->if_dev->flags, value);
   56490:	6828      	ldr	r0, [r5, #0]
   56492:	2100      	movs	r1, #0
   56494:	300c      	adds	r0, #12
   56496:	f7ff ff59 	bl	5634c <atomic_set_bit>
	update_operational_state(iface);
   5649a:	4628      	mov	r0, r5
   5649c:	f7ff ff8a 	bl	563b4 <update_operational_state>
	k_mutex_unlock(&lock);
   564a0:	f7f0 ff14 	bl	472cc <k_mutex_unlock.constprop.0.isra.0>
}
   564a4:	4620      	mov	r0, r4
   564a6:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   564a8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   564ac:	e7f8      	b.n	564a0 <net_if_up+0x4a>

000564ae <sdhc_set_io>:
	if (!api->set_io) {
   564ae:	6883      	ldr	r3, [r0, #8]
   564b0:	689b      	ldr	r3, [r3, #8]
   564b2:	b103      	cbz	r3, 564b6 <sdhc_set_io+0x8>
	return api->set_io(dev, io);
   564b4:	4718      	bx	r3
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SDHC_SET_IO);
	}
#endif
	compiler_barrier();
	return z_impl_sdhc_set_io(dev, io);
}
   564b6:	f06f 0057 	mvn.w	r0, #87	; 0x57
   564ba:	4770      	bx	lr

000564bc <k_mutex_unlock>:
   564bc:	f7fc b860 	b.w	52580 <z_impl_k_mutex_unlock>

000564c0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   564c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   564c2:	ab0b      	add	r3, sp, #44	; 0x2c
   564c4:	9305      	str	r3, [sp, #20]
   564c6:	9303      	str	r3, [sp, #12]
   564c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   564ca:	9302      	str	r3, [sp, #8]
   564cc:	2300      	movs	r3, #0
   564ce:	4618      	mov	r0, r3
   564d0:	e9cd 3300 	strd	r3, r3, [sp]
   564d4:	f7ee fe68 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   564d8:	b007      	add	sp, #28
   564da:	f85d fb04 	ldr.w	pc, [sp], #4

000564de <sdhc_request.constprop.0>:
	if (!api->request) {
   564de:	6883      	ldr	r3, [r0, #8]
   564e0:	685b      	ldr	r3, [r3, #4]
   564e2:	b10b      	cbz	r3, 564e8 <sdhc_request.constprop.0+0xa>
	return api->request(dev, cmd, data);
   564e4:	2200      	movs	r2, #0
   564e6:	4718      	bx	r3
}
   564e8:	f06f 0057 	mvn.w	r0, #87	; 0x57
   564ec:	4770      	bx	lr

000564ee <sd_idle.isra.0>:
static inline int sd_idle(struct sd_card *card)
   564ee:	b510      	push	{r4, lr}
   564f0:	b08a      	sub	sp, #40	; 0x28
   564f2:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   564f4:	2220      	movs	r2, #32
   564f6:	2100      	movs	r1, #0
   564f8:	a801      	add	r0, sp, #4
   564fa:	f004 fce8 	bl	5aece <memset>
	cmd.response_type = (SD_RSP_TYPE_NONE | SD_SPI_RSP_TYPE_R1);
   564fe:	2310      	movs	r3, #16
   56500:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   56502:	23c8      	movs	r3, #200	; 0xc8
	return sdhc_request(card->sdhc, &cmd, NULL);
   56504:	4620      	mov	r0, r4
   56506:	a901      	add	r1, sp, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   56508:	9309      	str	r3, [sp, #36]	; 0x24
	return sdhc_request(card->sdhc, &cmd, NULL);
   5650a:	f7ff ffe8 	bl	564de <sdhc_request.constprop.0>
}
   5650e:	b00a      	add	sp, #40	; 0x28
   56510:	bd10      	pop	{r4, pc}

00056512 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   56512:	b538      	push	{r3, r4, r5, lr}
   56514:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
   56516:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   5651a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   5651e:	f240 30e7 	movw	r0, #999	; 0x3e7
   56522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   56526:	2300      	movs	r3, #0
   56528:	fbc4 0105 	smlal	r0, r1, r4, r5
   5652c:	f7ea faf0 	bl	40b10 <__aeabi_uldivmod>
}
   56530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   56534:	f7fc bca6 	b.w	52e84 <z_impl_k_sleep>

00056538 <sd_test_sdio>:
{
   56538:	b510      	push	{r4, lr}
   5653a:	b08a      	sub	sp, #40	; 0x28
   5653c:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   5653e:	2100      	movs	r1, #0
   56540:	221c      	movs	r2, #28
   56542:	a802      	add	r0, sp, #8
   56544:	f004 fcc3 	bl	5aece <memset>
	cmd.opcode = SDIO_SEND_OP_COND;
   56548:	2305      	movs	r3, #5
   5654a:	9301      	str	r3, [sp, #4]
	cmd.response_type = (SD_RSP_TYPE_R4 | SD_SPI_RSP_TYPE_R4);
   5654c:	2355      	movs	r3, #85	; 0x55
   5654e:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   56550:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   56552:	6820      	ldr	r0, [r4, #0]
   56554:	a901      	add	r1, sp, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   56556:	9309      	str	r3, [sp, #36]	; 0x24
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   56558:	f7ff ffc1 	bl	564de <sdhc_request.constprop.0>
	if (ret) {
   5655c:	b128      	cbz	r0, 5656a <sd_test_sdio+0x32>
		card->type = CARD_SDMMC;
   5655e:	2300      	movs	r3, #0
		return SD_NOT_SDIO;
   56560:	2002      	movs	r0, #2
		card->type = CARD_SDMMC;
   56562:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
}
   56566:	b00a      	add	sp, #40	; 0x28
   56568:	bd10      	pop	{r4, pc}
	card->num_io = ((cmd.response[0] & SDIO_OCR_IO_NUMBER)
   5656a:	9b03      	ldr	r3, [sp, #12]
			>> SDIO_OCR_IO_NUMBER_SHIFT);
   5656c:	f3c3 7202 	ubfx	r2, r3, #28, #3
	if ((card->num_io == 0) | ((cmd.response[0] & SDIO_IO_OCR_MASK) == 0)) {
   56570:	f033 417f 	bics.w	r1, r3, #4278190080	; 0xff000000
	card->num_io = ((cmd.response[0] & SDIO_OCR_IO_NUMBER)
   56574:	65e2      	str	r2, [r4, #92]	; 0x5c
	if ((card->num_io == 0) | ((cmd.response[0] & SDIO_IO_OCR_MASK) == 0)) {
   56576:	d000      	beq.n	5657a <sd_test_sdio+0x42>
   56578:	b922      	cbnz	r2, 56584 <sd_test_sdio+0x4c>
		if (cmd.response[0] & SDIO_OCR_MEM_PRESENT_FLAG) {
   5657a:	011b      	lsls	r3, r3, #4
   5657c:	d4ef      	bmi.n	5655e <sd_test_sdio+0x26>
		return -ENOTSUP;
   5657e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   56582:	e7f0      	b.n	56566 <sd_test_sdio+0x2e>
	card->type = CARD_SDIO;
   56584:	2301      	movs	r3, #1
   56586:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
	return 0;
   5658a:	e7ec      	b.n	56566 <sd_test_sdio+0x2e>

0005658c <sd_is_card_present>:

/* Return true if card is present, false otherwise */
bool sd_is_card_present(const struct device *sdhc_dev)
{
   5658c:	b508      	push	{r3, lr}
	if (!sdhc_dev) {
   5658e:	b130      	cbz	r0, 5659e <sd_is_card_present+0x12>
	if (!api->get_card_present) {
   56590:	6883      	ldr	r3, [r0, #8]
   56592:	68db      	ldr	r3, [r3, #12]
   56594:	b123      	cbz	r3, 565a0 <sd_is_card_present+0x14>
	return api->get_card_present(dev);
   56596:	4798      	blx	r3
		return false;
	}
	return sdhc_card_present(sdhc_dev) == 1;
   56598:	1e43      	subs	r3, r0, #1
   5659a:	4258      	negs	r0, r3
   5659c:	4158      	adcs	r0, r3
}
   5659e:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   565a0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   565a4:	e7f8      	b.n	56598 <sd_is_card_present+0xc>

000565a6 <sdhc_request>:
	if (!api->request) {
   565a6:	6883      	ldr	r3, [r0, #8]
   565a8:	685b      	ldr	r3, [r3, #4]
   565aa:	b103      	cbz	r3, 565ae <sdhc_request+0x8>
	return api->request(dev, cmd, data);
   565ac:	4718      	bx	r3
   565ae:	f06f 0057 	mvn.w	r0, #87	; 0x57
   565b2:	4770      	bx	lr

000565b4 <sdhc_set_io>:
	if (!api->set_io) {
   565b4:	6883      	ldr	r3, [r0, #8]
   565b6:	689b      	ldr	r3, [r3, #8]
   565b8:	b103      	cbz	r3, 565bc <sdhc_set_io+0x8>
	return api->set_io(dev, io);
   565ba:	4718      	bx	r3
}
   565bc:	f06f 0057 	mvn.w	r0, #87	; 0x57
   565c0:	4770      	bx	lr

000565c2 <sdhc_card_busy>:
	if (!api->card_busy) {
   565c2:	6883      	ldr	r3, [r0, #8]
   565c4:	695b      	ldr	r3, [r3, #20]
   565c6:	b103      	cbz	r3, 565ca <sdhc_card_busy+0x8>
	return api->card_busy(dev);
   565c8:	4718      	bx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_SDHC_CARD_BUSY);
	}
#endif
	compiler_barrier();
	return z_impl_sdhc_card_busy(dev);
}
   565ca:	f06f 0057 	mvn.w	r0, #87	; 0x57
   565ce:	4770      	bx	lr

000565d0 <sdmmc_spi_read_cxd>:
{
   565d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct sdhc_data data = {0};
   565d2:	2610      	movs	r6, #16
{
   565d4:	b091      	sub	sp, #68	; 0x44
   565d6:	4604      	mov	r4, r0
   565d8:	460f      	mov	r7, r1
   565da:	4615      	mov	r5, r2
	struct sdhc_command cmd = {0};
   565dc:	2100      	movs	r1, #0
   565de:	221c      	movs	r2, #28
   565e0:	a808      	add	r0, sp, #32
   565e2:	f004 fc74 	bl	5aece <memset>
	struct sdhc_data data = {0};
   565e6:	4632      	mov	r2, r6
   565e8:	2100      	movs	r1, #0
   565ea:	a801      	add	r0, sp, #4
   565ec:	f004 fc6f 	bl	5aece <memset>
	data.blocks = 1U;
   565f0:	2201      	movs	r2, #1
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   565f2:	23c8      	movs	r3, #200	; 0xc8
	data.blocks = 1U;
   565f4:	9203      	str	r2, [sp, #12]
	uint32_t *cxd_be = (uint32_t *)card->card_buffer;
   565f6:	f104 0278 	add.w	r2, r4, #120	; 0x78
	data.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   565fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
	ret = sdhc_request(card->sdhc, &cmd, &data);
   565fe:	f854 0b74 	ldr.w	r0, [r4], #116
   56602:	aa01      	add	r2, sp, #4
   56604:	a907      	add	r1, sp, #28
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   56606:	930f      	str	r3, [sp, #60]	; 0x3c
	cmd.opcode = opcode;
   56608:	9707      	str	r7, [sp, #28]
	cmd.response_type = SD_SPI_RSP_TYPE_R1;
   5660a:	960d      	str	r6, [sp, #52]	; 0x34
	data.block_size = 16;
   5660c:	9602      	str	r6, [sp, #8]
	ret = sdhc_request(card->sdhc, &cmd, &data);
   5660e:	f7ff ffca 	bl	565a6 <sdhc_request>
	for (i = 0; i < 4; i++) {
   56612:	19ab      	adds	r3, r5, r6
		cxd[3-i] = sys_be32_to_cpu(cxd_be[i]);
   56614:	f854 2f04 	ldr.w	r2, [r4, #4]!
   56618:	ba12      	rev	r2, r2
   5661a:	f843 2d04 	str.w	r2, [r3, #-4]!
	for (i = 0; i < 4; i++) {
   5661e:	42ab      	cmp	r3, r5
   56620:	d1f8      	bne.n	56614 <sdmmc_spi_read_cxd+0x44>
}
   56622:	2000      	movs	r0, #0
   56624:	b011      	add	sp, #68	; 0x44
   56626:	bdf0      	pop	{r4, r5, r6, r7, pc}

00056628 <sdmmc_read_status>:
{
   56628:	b510      	push	{r4, lr}
   5662a:	b08a      	sub	sp, #40	; 0x28
   5662c:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   5662e:	221c      	movs	r2, #28
   56630:	2100      	movs	r1, #0
   56632:	a802      	add	r0, sp, #8
   56634:	f004 fc4b 	bl	5aece <memset>
	cmd.opcode = SD_SEND_STATUS;
   56638:	230d      	movs	r3, #13
   5663a:	9301      	str	r3, [sp, #4]
	if (!card->host_props.is_spi) {
   5663c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   56640:	b913      	cbnz	r3, 56648 <sdmmc_read_status+0x20>
		cmd.arg = (card->relative_addr << 16U);
   56642:	6e23      	ldr	r3, [r4, #96]	; 0x60
   56644:	041b      	lsls	r3, r3, #16
   56646:	9302      	str	r3, [sp, #8]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R2);
   56648:	2331      	movs	r3, #49	; 0x31
   5664a:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   5664c:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   5664e:	2200      	movs	r2, #0
   56650:	6820      	ldr	r0, [r4, #0]
   56652:	a901      	add	r1, sp, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   56654:	9309      	str	r3, [sp, #36]	; 0x24
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   56656:	f7ff ffa6 	bl	565a6 <sdhc_request>
	if (ret) {
   5665a:	b9c8      	cbnz	r0, 56690 <sdmmc_read_status+0x68>
	if (card->host_props.is_spi) {
   5665c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
		if ((cmd.response[0U] & SDHC_SPI_R2_CARD_LOCKED) ||
   56660:	9b03      	ldr	r3, [sp, #12]
	if (card->host_props.is_spi) {
   56662:	b162      	cbz	r2, 5667e <sdmmc_read_status+0x56>
		if ((cmd.response[0U] & SDHC_SPI_R2_CARD_LOCKED) ||
   56664:	f413 7f40 	tst.w	r3, #768	; 0x300
   56668:	d114      	bne.n	56694 <sdmmc_read_status+0x6c>
		} else if ((cmd.response[0U] & SDHC_SPI_R2_WP_VIOLATION) ||
   5666a:	f413 4f60 	tst.w	r3, #57344	; 0xe000
   5666e:	d114      	bne.n	5669a <sdmmc_read_status+0x72>
			return -EIO;
   56670:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
   56674:	bf18      	it	ne
   56676:	f06f 0004 	mvnne.w	r0, #4
}
   5667a:	b00a      	add	sp, #40	; 0x28
   5667c:	bd10      	pop	{r4, pc}
	if ((cmd.response[0U] & SD_R1_RDY_DATA) &&
   5667e:	05da      	lsls	r2, r3, #23
   56680:	d50e      	bpl.n	566a0 <sdmmc_read_status+0x78>
		(SD_R1_CURRENT_STATE(cmd.response[0U]) == SDMMC_R1_TRANSFER)) {
   56682:	f3c3 2343 	ubfx	r3, r3, #9, #4
	return -EBUSY;
   56686:	2b04      	cmp	r3, #4
   56688:	bf18      	it	ne
   5668a:	f06f 000f 	mvnne.w	r0, #15
   5668e:	e7f4      	b.n	5667a <sdmmc_read_status+0x52>
		return SD_RETRY;
   56690:	2001      	movs	r0, #1
   56692:	e7f2      	b.n	5667a <sdmmc_read_status+0x52>
			return -EACCES;
   56694:	f06f 000c 	mvn.w	r0, #12
   56698:	e7ef      	b.n	5667a <sdmmc_read_status+0x52>
			return -EINVAL;
   5669a:	f06f 0015 	mvn.w	r0, #21
   5669e:	e7ec      	b.n	5667a <sdmmc_read_status+0x52>
	return -EBUSY;
   566a0:	f06f 000f 	mvn.w	r0, #15
   566a4:	e7e9      	b.n	5667a <sdmmc_read_status+0x52>

000566a6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   566a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   566a8:	ab0b      	add	r3, sp, #44	; 0x2c
   566aa:	9305      	str	r3, [sp, #20]
   566ac:	9303      	str	r3, [sp, #12]
   566ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   566b0:	9302      	str	r3, [sp, #8]
   566b2:	2300      	movs	r3, #0
   566b4:	4618      	mov	r0, r3
   566b6:	e9cd 3300 	strd	r3, r3, [sp]
   566ba:	f7ee fd75 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   566be:	b007      	add	sp, #28
   566c0:	f85d fb04 	ldr.w	pc, [sp], #4

000566c4 <sdmmc_switch.constprop.0.isra.0>:
static int sdmmc_switch(struct sd_card *card, enum sd_switch_arg mode,
   566c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   566c6:	b091      	sub	sp, #68	; 0x44
   566c8:	4606      	mov	r6, r0
   566ca:	460c      	mov	r4, r1
   566cc:	4615      	mov	r5, r2
	struct sdhc_command cmd = {0};
   566ce:	2100      	movs	r1, #0
   566d0:	2218      	movs	r2, #24
   566d2:	a809      	add	r0, sp, #36	; 0x24
static int sdmmc_switch(struct sd_card *card, enum sd_switch_arg mode,
   566d4:	461f      	mov	r7, r3
	struct sdhc_command cmd = {0};
   566d6:	f004 fbfa 	bl	5aece <memset>
	struct sdhc_data data = {0};
   566da:	2210      	movs	r2, #16
   566dc:	2100      	movs	r1, #0
   566de:	a801      	add	r0, sp, #4
   566e0:	f004 fbf5 	bl	5aece <memset>
	cmd.opcode = SD_SWITCH;
   566e4:	2306      	movs	r3, #6
   566e6:	9307      	str	r3, [sp, #28]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   566e8:	2311      	movs	r3, #17
   566ea:	930d      	str	r3, [sp, #52]	; 0x34
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   566ec:	23c8      	movs	r3, #200	; 0xc8
	cmd.arg &= ~(0xFU << (group * 4));
   566ee:	00a1      	lsls	r1, r4, #2
   566f0:	240f      	movs	r4, #15
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   566f2:	930f      	str	r3, [sp, #60]	; 0x3c
	data.blocks = 1;
   566f4:	2040      	movs	r0, #64	; 0x40
   566f6:	2301      	movs	r3, #1
	cmd.arg &= ~(0xFU << (group * 4));
   566f8:	408c      	lsls	r4, r1
   566fa:	f084 44fe 	eor.w	r4, r4, #2130706432	; 0x7f000000
   566fe:	43e4      	mvns	r4, r4
	data.blocks = 1;
   56700:	e9cd 0302 	strd	r0, r3, [sp, #8]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   56704:	f242 7310 	movw	r3, #10000	; 0x2710
	cmd.arg |= (value & 0xF) << (group * 4);
   56708:	f005 050f 	and.w	r5, r5, #15
   5670c:	408d      	lsls	r5, r1
	return sdhc_request(card->sdhc, &cmd, &data);
   5670e:	4630      	mov	r0, r6
	cmd.arg |= (value & 0xF) << (group * 4);
   56710:	432c      	orrs	r4, r5
	return sdhc_request(card->sdhc, &cmd, &data);
   56712:	aa01      	add	r2, sp, #4
   56714:	a907      	add	r1, sp, #28
	cmd.arg |= (value & 0xF) << (group * 4);
   56716:	9408      	str	r4, [sp, #32]
	data.data = response;
   56718:	9705      	str	r7, [sp, #20]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   5671a:	9306      	str	r3, [sp, #24]
	return sdhc_request(card->sdhc, &cmd, &data);
   5671c:	f7ff ff43 	bl	565a6 <sdhc_request>
}
   56720:	b011      	add	sp, #68	; 0x44
   56722:	bdf0      	pop	{r4, r5, r6, r7, pc}

00056724 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   56724:	f7fb bf2c 	b.w	52580 <z_impl_k_mutex_unlock>

00056728 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   56728:	4601      	mov	r1, r0
   5672a:	f240 30e7 	movw	r0, #999	; 0x3e7
   5672e:	b508      	push	{r3, lr}
   56730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   56734:	2300      	movs	r3, #0
   56736:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   5673a:	1449      	asrs	r1, r1, #17
   5673c:	f7ea f9e8 	bl	40b10 <__aeabi_uldivmod>
}
   56740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   56744:	f7fc bb9e 	b.w	52e84 <z_impl_k_sleep>

00056748 <sdmmc_ioctl>:


/* IO Control handler for SD MMC */
int sdmmc_ioctl(struct sd_card *card, uint8_t cmd, void *buf)
{
	switch (cmd) {
   56748:	3901      	subs	r1, #1
   5674a:	2904      	cmp	r1, #4
   5674c:	d80c      	bhi.n	56768 <sdmmc_ioctl+0x20>
   5674e:	e8df f001 	tbb	[pc, r1]
   56752:	0703      	.short	0x0703
   56754:	070b      	.short	0x070b
   56756:	09          	.byte	0x09
   56757:	00          	.byte	0x00
	case DISK_IOCTL_GET_SECTOR_COUNT:
		(*(uint32_t *)buf) = card->block_count;
   56758:	6e43      	ldr	r3, [r0, #100]	; 0x64
		 */
		return sdmmc_wait_ready(card);
	default:
		return -ENOTSUP;
	}
	return 0;
   5675a:	2000      	movs	r0, #0
		(*(uint32_t *)buf) = card->block_count;
   5675c:	6013      	str	r3, [r2, #0]
   5675e:	4770      	bx	lr
		(*(uint32_t *)buf) = card->block_size;
   56760:	6e83      	ldr	r3, [r0, #104]	; 0x68
		break;
   56762:	e7fa      	b.n	5675a <sdmmc_ioctl+0x12>
		return sdmmc_wait_ready(card);
   56764:	f7f0 bffa 	b.w	4775c <sdmmc_wait_ready>
	switch (cmd) {
   56768:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   5676c:	4770      	bx	lr

0005676e <disk_sdmmc_access_ioctl>:
	struct sdmmc_data *data = dev->data;
   5676e:	6903      	ldr	r3, [r0, #16]
	return sdmmc_ioctl(&data->card, cmd, buf);
   56770:	6918      	ldr	r0, [r3, #16]
   56772:	f7ff bfe9 	b.w	56748 <sdmmc_ioctl>

00056776 <disk_sdmmc_access_write>:
	struct sdmmc_data *data = dev->data;
   56776:	6900      	ldr	r0, [r0, #16]
	return sdmmc_write_blocks(&data->card, buf, sector, count);
   56778:	6900      	ldr	r0, [r0, #16]
   5677a:	f7f1 bc4d 	b.w	48018 <sdmmc_write_blocks>

0005677e <disk_sdmmc_access_read>:
	struct sdmmc_data *data = dev->data;
   5677e:	6900      	ldr	r0, [r0, #16]
	return sdmmc_read_blocks(&data->card, buf, sector, count);
   56780:	6900      	ldr	r0, [r0, #16]
   56782:	f7f1 bba7 	b.w	47ed4 <sdmmc_read_blocks>

00056786 <disk_sdmmc_access_status>:
{
   56786:	b510      	push	{r4, lr}
	const struct device *dev = disk->dev;
   56788:	6903      	ldr	r3, [r0, #16]
	struct sdmmc_data *data = dev->data;
   5678a:	691c      	ldr	r4, [r3, #16]
	if (!sd_is_card_present(cfg->host_controller)) {
   5678c:	685b      	ldr	r3, [r3, #4]
   5678e:	6818      	ldr	r0, [r3, #0]
   56790:	f7ff fefc 	bl	5658c <sd_is_card_present>
   56794:	b128      	cbz	r0, 567a2 <disk_sdmmc_access_status+0x1c>
	if (data->status == SD_OK) {
   56796:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
   5679a:	3802      	subs	r0, #2
   5679c:	bf18      	it	ne
   5679e:	2001      	movne	r0, #1
}
   567a0:	bd10      	pop	{r4, pc}
		return DISK_STATUS_NOMEDIA;
   567a2:	2002      	movs	r0, #2
   567a4:	e7fc      	b.n	567a0 <disk_sdmmc_access_status+0x1a>

000567a6 <disk_sdmmc_access_init>:
{
   567a6:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev = disk->dev;
   567a8:	6903      	ldr	r3, [r0, #16]
	struct sdmmc_data *data = dev->data;
   567aa:	691c      	ldr	r4, [r3, #16]
	if (data->status == SD_OK) {
   567ac:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
   567b0:	2a02      	cmp	r2, #2
   567b2:	d010      	beq.n	567d6 <disk_sdmmc_access_init+0x30>
	const struct sdmmc_config *cfg = dev->config;
   567b4:	685d      	ldr	r5, [r3, #4]
	if (!sd_is_card_present(cfg->host_controller)) {
   567b6:	6828      	ldr	r0, [r5, #0]
   567b8:	f7ff fee8 	bl	5658c <sd_is_card_present>
   567bc:	b168      	cbz	r0, 567da <disk_sdmmc_access_init+0x34>
	ret = sd_init(cfg->host_controller, &data->card);
   567be:	4621      	mov	r1, r4
   567c0:	6828      	ldr	r0, [r5, #0]
   567c2:	f7f0 ff15 	bl	475f0 <sd_init>
	if (ret) {
   567c6:	b118      	cbz	r0, 567d0 <disk_sdmmc_access_init+0x2a>
		data->status = SD_ERROR;
   567c8:	2301      	movs	r3, #1
   567ca:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
}
   567ce:	bd38      	pop	{r3, r4, r5, pc}
	data->status = SD_OK;
   567d0:	2302      	movs	r3, #2
   567d2:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		return 0;
   567d6:	2000      	movs	r0, #0
   567d8:	e7f9      	b.n	567ce <disk_sdmmc_access_init+0x28>
		return DISK_STATUS_NOMEDIA;
   567da:	2002      	movs	r0, #2
   567dc:	e7f7      	b.n	567ce <disk_sdmmc_access_init+0x28>

000567de <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   567de:	220c      	movs	r2, #12
   567e0:	6903      	ldr	r3, [r0, #16]
   567e2:	b2c9      	uxtb	r1, r1
   567e4:	fb01 3302 	mla	r3, r1, r2, r3
   567e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   567ea:	f000 0007 	and.w	r0, r0, #7
   567ee:	4770      	bx	lr

000567f0 <set_on_state>:
	__asm__ volatile(
   567f0:	f04f 0320 	mov.w	r3, #32
   567f4:	f3ef 8211 	mrs	r2, BASEPRI
   567f8:	f383 8812 	msr	BASEPRI_MAX, r3
   567fc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   56800:	6803      	ldr	r3, [r0, #0]
   56802:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   56806:	f043 0302 	orr.w	r3, r3, #2
   5680a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   5680c:	f382 8811 	msr	BASEPRI, r2
   56810:	f3bf 8f6f 	isb	sy
}
   56814:	4770      	bx	lr

00056816 <stop>:
{
   56816:	b570      	push	{r4, r5, r6, lr}
   56818:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   5681a:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   5681c:	f04f 0420 	mov.w	r4, #32
   56820:	f3ef 8511 	mrs	r5, BASEPRI
   56824:	f384 8812 	msr	BASEPRI_MAX, r4
   56828:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   5682c:	260c      	movs	r6, #12
   5682e:	fb06 3401 	mla	r4, r6, r1, r3
   56832:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   56834:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   56838:	d008      	beq.n	5684c <stop+0x36>
   5683a:	42a2      	cmp	r2, r4
   5683c:	d006      	beq.n	5684c <stop+0x36>
	__asm__ volatile(
   5683e:	f385 8811 	msr	BASEPRI, r5
   56842:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   56846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   5684a:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   5684c:	2201      	movs	r2, #1
   5684e:	4371      	muls	r1, r6
   56850:	440b      	add	r3, r1
   56852:	641a      	str	r2, [r3, #64]	; 0x40
   56854:	f385 8811 	msr	BASEPRI, r5
   56858:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   5685c:	6843      	ldr	r3, [r0, #4]
   5685e:	440b      	add	r3, r1
   56860:	685b      	ldr	r3, [r3, #4]
   56862:	4798      	blx	r3
	return 0;
   56864:	2000      	movs	r0, #0
   56866:	e7f0      	b.n	5684a <stop+0x34>

00056868 <api_stop>:
	return stop(dev, subsys, CTX_API);
   56868:	2280      	movs	r2, #128	; 0x80
   5686a:	f7ff bfd4 	b.w	56816 <stop>

0005686e <async_start>:
{
   5686e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   56870:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   56872:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   56874:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   56876:	f04f 0520 	mov.w	r5, #32
   5687a:	f3ef 8611 	mrs	r6, BASEPRI
   5687e:	f385 8812 	msr	BASEPRI_MAX, r5
   56882:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   56886:	250c      	movs	r5, #12
   56888:	4369      	muls	r1, r5
   5688a:	440c      	add	r4, r1
   5688c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   5688e:	f005 0c07 	and.w	ip, r5, #7
   56892:	f1bc 0f01 	cmp.w	ip, #1
   56896:	d10b      	bne.n	568b0 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   56898:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   5689a:	f386 8811 	msr	BASEPRI, r6
   5689e:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   568a2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   568a6:	6843      	ldr	r3, [r0, #4]
   568a8:	585b      	ldr	r3, [r3, r1]
   568aa:	4798      	blx	r3
	return 0;
   568ac:	2000      	movs	r0, #0
}
   568ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   568b0:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   568b4:	42af      	cmp	r7, r5
   568b6:	f386 8811 	msr	BASEPRI, r6
   568ba:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   568be:	bf0c      	ite	eq
   568c0:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   568c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   568c8:	e7f1      	b.n	568ae <async_start+0x40>

000568ca <api_start>:
{
   568ca:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   568cc:	2480      	movs	r4, #128	; 0x80
   568ce:	9400      	str	r4, [sp, #0]
   568d0:	f7ff ffcd 	bl	5686e <async_start>
}
   568d4:	b002      	add	sp, #8
   568d6:	bd10      	pop	{r4, pc}

000568d8 <onoff_started_callback>:
{
   568d8:	b410      	push	{r4}
	notify(mgr, 0);
   568da:	241c      	movs	r4, #28
	return &data->mgr[type];
   568dc:	6900      	ldr	r0, [r0, #16]
   568de:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   568e0:	fb03 0004 	mla	r0, r3, r4, r0
   568e4:	2100      	movs	r1, #0
}
   568e6:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   568ea:	4710      	bx	r2

000568ec <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   568ec:	2000      	movs	r0, #0
   568ee:	f7f8 bd6b 	b.w	4f3c8 <nrfx_clock_start>

000568f2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   568f2:	2000      	movs	r0, #0
   568f4:	f002 bfb3 	b.w	5985e <nrfx_clock_stop>

000568f8 <blocking_start_callback>:
{
   568f8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   568fa:	f7fb beb1 	b.w	52660 <z_impl_k_sem_give>

000568fe <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   568fe:	6843      	ldr	r3, [r0, #4]
}
   56900:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   56902:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   56904:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   56906:	600b      	str	r3, [r1, #0]
}
   56908:	4770      	bx	lr

0005690a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   5690a:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   5690c:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   56910:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   56912:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   56916:	6098      	str	r0, [r3, #8]
}
   56918:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   5691a:	60d9      	str	r1, [r3, #12]
   5691c:	4770      	bx	lr

0005691e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   5691e:	6843      	ldr	r3, [r0, #4]
}
   56920:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   56922:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   56924:	6099      	str	r1, [r3, #8]
}
   56926:	4770      	bx	lr

00056928 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   56928:	6843      	ldr	r3, [r0, #4]
}
   5692a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   5692c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   5692e:	60d9      	str	r1, [r3, #12]
}
   56930:	4770      	bx	lr

00056932 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   56932:	6843      	ldr	r3, [r0, #4]
   56934:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   56936:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   56938:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   5693c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   5693e:	6090      	str	r0, [r2, #8]
}
   56940:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   56942:	60d3      	str	r3, [r2, #12]
   56944:	4770      	bx	lr

00056946 <gpio_nrfx_manage_callback>:
{
   56946:	b510      	push	{r4, lr}
	return port->data;
   56948:	6903      	ldr	r3, [r0, #16]
	return list->head;
   5694a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   5694c:	b1f8      	cbz	r0, 5698e <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   5694e:	4288      	cmp	r0, r1
   56950:	d119      	bne.n	56986 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   56952:	689c      	ldr	r4, [r3, #8]
	return node->next;
   56954:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   56956:	42a1      	cmp	r1, r4
	list->head = node;
   56958:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   5695a:	d100      	bne.n	5695e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   5695c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   5695e:	2000      	movs	r0, #0
   56960:	6008      	str	r0, [r1, #0]
	if (set) {
   56962:	b12a      	cbz	r2, 56970 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   56964:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   56966:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   56968:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   5696a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   5696c:	b902      	cbnz	r2, 56970 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   5696e:	6099      	str	r1, [r3, #8]
	return 0;
   56970:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   56972:	e010      	b.n	56996 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   56974:	4281      	cmp	r1, r0
   56976:	d106      	bne.n	56986 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   56978:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   5697a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   5697c:	6898      	ldr	r0, [r3, #8]
   5697e:	4281      	cmp	r1, r0
   56980:	d1ed      	bne.n	5695e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   56982:	609c      	str	r4, [r3, #8]
}
   56984:	e7eb      	b.n	5695e <gpio_nrfx_manage_callback+0x18>
	return node->next;
   56986:	4604      	mov	r4, r0
   56988:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   5698a:	2800      	cmp	r0, #0
   5698c:	d1f2      	bne.n	56974 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   5698e:	2a00      	cmp	r2, #0
   56990:	d1e8      	bne.n	56964 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   56992:	f06f 0015 	mvn.w	r0, #21
}
   56996:	bd10      	pop	{r4, pc}

00056998 <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   56998:	2200      	movs	r2, #0
   5699a:	2101      	movs	r1, #1
   5699c:	200b      	movs	r0, #11
   5699e:	f7ef ba07 	b.w	45db0 <z_arm_irq_priority_set>

000569a2 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   569a2:	b510      	push	{r4, lr}
	while (*count) {
   569a4:	680b      	ldr	r3, [r1, #0]
   569a6:	b913      	cbnz	r3, 569ae <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   569a8:	4618      	mov	r0, r3
	*buf_len = 0;
   569aa:	6013      	str	r3, [r2, #0]
	return NULL;
   569ac:	e005      	b.n	569ba <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   569ae:	6803      	ldr	r3, [r0, #0]
   569b0:	685c      	ldr	r4, [r3, #4]
   569b2:	b11c      	cbz	r4, 569bc <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   569b4:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   569b6:	6803      	ldr	r3, [r0, #0]
   569b8:	6818      	ldr	r0, [r3, #0]
}
   569ba:	bd10      	pop	{r4, pc}
		++(*current);
   569bc:	3308      	adds	r3, #8
   569be:	6003      	str	r3, [r0, #0]
		--(*count);
   569c0:	680b      	ldr	r3, [r1, #0]
   569c2:	3b01      	subs	r3, #1
   569c4:	600b      	str	r3, [r1, #0]
   569c6:	e7ed      	b.n	569a4 <spi_context_get_next_buf.constprop.0+0x2>

000569c8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   569c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   569ca:	ab0b      	add	r3, sp, #44	; 0x2c
   569cc:	9305      	str	r3, [sp, #20]
   569ce:	9303      	str	r3, [sp, #12]
   569d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   569d2:	2201      	movs	r2, #1
   569d4:	9302      	str	r3, [sp, #8]
   569d6:	2300      	movs	r3, #0
   569d8:	4618      	mov	r0, r3
   569da:	e9cd 3300 	strd	r3, r3, [sp]
   569de:	f7ee fbe3 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   569e2:	b007      	add	sp, #28
   569e4:	f85d fb04 	ldr.w	pc, [sp], #4

000569e8 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   569e8:	b513      	push	{r0, r1, r4, lr}
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   569ea:	aa01      	add	r2, sp, #4
{
   569ec:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   569ee:	f000 fc2c 	bl	5724a <pinctrl_lookup_state>
	if (ret < 0) {
   569f2:	2800      	cmp	r0, #0
   569f4:	db05      	blt.n	56a02 <pinctrl_apply_state+0x1a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   569f6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   569f8:	6822      	ldr	r2, [r4, #0]
   569fa:	7919      	ldrb	r1, [r3, #4]
   569fc:	6818      	ldr	r0, [r3, #0]
   569fe:	f7f2 ff23 	bl	49848 <pinctrl_configure_pins>
}
   56a02:	b002      	add	sp, #8
   56a04:	bd10      	pop	{r4, pc}

00056a06 <spim_nrfx_pm_action>:
{
   56a06:	b570      	push	{r4, r5, r6, lr}
	switch (action) {
   56a08:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
   56a0a:	6906      	ldr	r6, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   56a0c:	6845      	ldr	r5, [r0, #4]
	switch (action) {
   56a0e:	b139      	cbz	r1, 56a20 <spim_nrfx_pm_action+0x1a>
   56a10:	2901      	cmp	r1, #1
   56a12:	d10f      	bne.n	56a34 <spim_nrfx_pm_action+0x2e>
		ret = pinctrl_apply_state(dev_config->pcfg,
   56a14:	2100      	movs	r1, #0
		ret = pinctrl_apply_state(dev_config->pcfg,
   56a16:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   56a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = pinctrl_apply_state(dev_config->pcfg,
   56a1c:	f7ff bfe4 	b.w	569e8 <pinctrl_apply_state>
		if (dev_data->initialized) {
   56a20:	f896 306d 	ldrb.w	r3, [r6, #109]	; 0x6d
   56a24:	b123      	cbz	r3, 56a30 <spim_nrfx_pm_action+0x2a>
			nrfx_spim_uninit(&dev_config->spim);
   56a26:	4628      	mov	r0, r5
   56a28:	f7f9 f9de 	bl	4fde8 <nrfx_spim_uninit>
			dev_data->initialized = false;
   56a2c:	f886 406d 	strb.w	r4, [r6, #109]	; 0x6d
		ret = pinctrl_apply_state(dev_config->pcfg,
   56a30:	2101      	movs	r1, #1
   56a32:	e7f0      	b.n	56a16 <spim_nrfx_pm_action+0x10>
}
   56a34:	f06f 0085 	mvn.w	r0, #133	; 0x85
   56a38:	bd70      	pop	{r4, r5, r6, pc}

00056a3a <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   56a3a:	4603      	mov	r3, r0
   56a3c:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   56a3e:	7919      	ldrb	r1, [r3, #4]
   56a40:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   56a42:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   56a44:	fa03 f101 	lsl.w	r1, r3, r1
   56a48:	6903      	ldr	r3, [r0, #16]
   56a4a:	681b      	ldr	r3, [r3, #0]
   56a4c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   56a4e:	bf18      	it	ne
   56a50:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   56a54:	b112      	cbz	r2, 56a5c <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   56a56:	6883      	ldr	r3, [r0, #8]
   56a58:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   56a5a:	4718      	bx	r3
   56a5c:	6883      	ldr	r3, [r0, #8]
   56a5e:	691b      	ldr	r3, [r3, #16]
   56a60:	e7fb      	b.n	56a5a <gpio_pin_set_dt.isra.0+0x20>

00056a62 <_spi_context_cs_control>:
{
   56a62:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   56a64:	6803      	ldr	r3, [r0, #0]
{
   56a66:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   56a68:	b1e3      	cbz	r3, 56aa4 <_spi_context_cs_control+0x42>
   56a6a:	6898      	ldr	r0, [r3, #8]
   56a6c:	b1d0      	cbz	r0, 56aa4 <_spi_context_cs_control+0x42>
   56a6e:	6805      	ldr	r5, [r0, #0]
   56a70:	b1c5      	cbz	r5, 56aa4 <_spi_context_cs_control+0x42>
		if (on) {
   56a72:	b149      	cbz	r1, 56a88 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   56a74:	2101      	movs	r1, #1
   56a76:	f7ff ffe0 	bl	56a3a <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   56a7a:	6823      	ldr	r3, [r4, #0]
   56a7c:	689b      	ldr	r3, [r3, #8]
   56a7e:	6898      	ldr	r0, [r3, #8]
}
   56a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   56a84:	f004 b909 	b.w	5ac9a <z_impl_k_busy_wait>
			if (!force_off &&
   56a88:	b912      	cbnz	r2, 56a90 <_spi_context_cs_control+0x2e>
   56a8a:	889b      	ldrh	r3, [r3, #4]
   56a8c:	04db      	lsls	r3, r3, #19
   56a8e:	d409      	bmi.n	56aa4 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   56a90:	6880      	ldr	r0, [r0, #8]
   56a92:	f004 f902 	bl	5ac9a <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   56a96:	6823      	ldr	r3, [r4, #0]
   56a98:	2100      	movs	r1, #0
   56a9a:	6898      	ldr	r0, [r3, #8]
}
   56a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   56aa0:	f7ff bfcb 	b.w	56a3a <gpio_pin_set_dt.isra.0>
}
   56aa4:	bd38      	pop	{r3, r4, r5, pc}

00056aa6 <spi_context_unlock_unconditionally>:
{
   56aa6:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   56aa8:	2201      	movs	r2, #1
   56aaa:	2100      	movs	r1, #0
{
   56aac:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   56aae:	f7ff ffd8 	bl	56a62 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   56ab2:	69a3      	ldr	r3, [r4, #24]
   56ab4:	b933      	cbnz	r3, 56ac4 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   56ab6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   56ab8:	f104 0010 	add.w	r0, r4, #16
}
   56abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   56ac0:	f7fb bdce 	b.w	52660 <z_impl_k_sem_give>
   56ac4:	bd10      	pop	{r4, pc}

00056ac6 <spi_nrfx_release>:
{
   56ac6:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   56ac8:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   56aca:	6803      	ldr	r3, [r0, #0]
   56acc:	428b      	cmp	r3, r1
   56ace:	d106      	bne.n	56ade <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   56ad0:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   56ad4:	b934      	cbnz	r4, 56ae4 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   56ad6:	f7ff ffe6 	bl	56aa6 <spi_context_unlock_unconditionally>
	return 0;
   56ada:	4620      	mov	r0, r4
}
   56adc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   56ade:	f06f 0015 	mvn.w	r0, #21
   56ae2:	e7fb      	b.n	56adc <spi_nrfx_release+0x16>
		return -EBUSY;
   56ae4:	f06f 000f 	mvn.w	r0, #15
   56ae8:	e7f8      	b.n	56adc <spi_nrfx_release+0x16>

00056aea <gpio_pin_set_dt>:
{
   56aea:	4603      	mov	r3, r0
   56aec:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   56aee:	7919      	ldrb	r1, [r3, #4]
   56af0:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   56af2:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   56af4:	fa03 f101 	lsl.w	r1, r3, r1
   56af8:	6903      	ldr	r3, [r0, #16]
   56afa:	681b      	ldr	r3, [r3, #0]
   56afc:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   56afe:	bf18      	it	ne
   56b00:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   56b04:	b112      	cbz	r2, 56b0c <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   56b06:	6883      	ldr	r3, [r0, #8]
   56b08:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   56b0a:	4718      	bx	r3
   56b0c:	6883      	ldr	r3, [r0, #8]
   56b0e:	691b      	ldr	r3, [r3, #16]
   56b10:	e7fb      	b.n	56b0a <gpio_pin_set_dt+0x20>

00056b12 <spi_transceive>:

extern int z_impl_spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs);

__pinned_func
static inline int spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs)
{
   56b12:	b410      	push	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   56b14:	6884      	ldr	r4, [r0, #8]
   56b16:	6824      	ldr	r4, [r4, #0]
   56b18:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_SPI_TRANSCEIVE);
	}
#endif
	compiler_barrier();
	return z_impl_spi_transceive(dev, config, tx_bufs, rx_bufs);
}
   56b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
   56b1e:	4760      	bx	ip

00056b20 <sdhc_spi_card_busy>:
{
   56b20:	b507      	push	{r0, r1, r2, lr}
	ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg, &response, 1);
   56b22:	6901      	ldr	r1, [r0, #16]
   56b24:	6840      	ldr	r0, [r0, #4]
   56b26:	2301      	movs	r3, #1
   56b28:	6849      	ldr	r1, [r1, #4]
   56b2a:	6800      	ldr	r0, [r0, #0]
   56b2c:	f10d 0207 	add.w	r2, sp, #7
   56b30:	f7f2 f8aa 	bl	48c88 <sdhc_spi_rx>
	if (ret) {
   56b34:	b938      	cbnz	r0, 56b46 <sdhc_spi_card_busy+0x26>
	if (response == 0xFF) {
   56b36:	f89d 0007 	ldrb.w	r0, [sp, #7]
   56b3a:	38ff      	subs	r0, #255	; 0xff
   56b3c:	bf18      	it	ne
   56b3e:	2001      	movne	r0, #1
}
   56b40:	b003      	add	sp, #12
   56b42:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EIO;
   56b46:	f06f 0004 	mvn.w	r0, #4
   56b4a:	e7f9      	b.n	56b40 <sdhc_spi_card_busy+0x20>

00056b4c <sdhc_spi_get_card_present>:
}
   56b4c:	2001      	movs	r0, #1
   56b4e:	4770      	bx	lr

00056b50 <sdhc_spi_init>:

static int sdhc_spi_init(const struct device *dev)
{
   56b50:	b510      	push	{r4, lr}
	const struct sdhc_spi_config *cfg = dev->config;
	struct sdhc_spi_data *data = dev->data;

	if (!device_is_ready(cfg->spi_dev)) {
   56b52:	6843      	ldr	r3, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   56b54:	6904      	ldr	r4, [r0, #16]
	if (!device_is_ready(cfg->spi_dev)) {
   56b56:	6818      	ldr	r0, [r3, #0]
   56b58:	f003 fd6e 	bl	5a638 <z_device_is_ready>
   56b5c:	b138      	cbz	r0, 56b6e <sdhc_spi_init+0x1e>
		return -ENODEV;
	}
	data->power_mode = SDHC_POWER_OFF;
   56b5e:	4623      	mov	r3, r4
   56b60:	2201      	movs	r2, #1
	data->spi_cfg = &data->cfg_a;
	data->spi_cfg->frequency = 0;
   56b62:	2000      	movs	r0, #0
	data->power_mode = SDHC_POWER_OFF;
   56b64:	f803 2b08 	strb.w	r2, [r3], #8
	data->spi_cfg = &data->cfg_a;
   56b68:	6063      	str	r3, [r4, #4]
	data->spi_cfg->frequency = 0;
   56b6a:	60a0      	str	r0, [r4, #8]
	return 0;
}
   56b6c:	bd10      	pop	{r4, pc}
		return -ENODEV;
   56b6e:	f06f 0012 	mvn.w	r0, #18
   56b72:	e7fb      	b.n	56b6c <sdhc_spi_init+0x1c>

00056b74 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   56b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   56b76:	ab0b      	add	r3, sp, #44	; 0x2c
   56b78:	9305      	str	r3, [sp, #20]
   56b7a:	9303      	str	r3, [sp, #12]
   56b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   56b7e:	2201      	movs	r2, #1
   56b80:	9302      	str	r3, [sp, #8]
   56b82:	2300      	movs	r3, #0
   56b84:	4618      	mov	r0, r3
   56b86:	e9cd 3300 	strd	r3, r3, [sp]
   56b8a:	f7ee fb0d 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   56b8e:	b007      	add	sp, #28
   56b90:	f85d fb04 	ldr.w	pc, [sp], #4

00056b94 <sdhc_spi_wait_unbusy>:
{
   56b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
			return (uint32_t)((t * to_hz + off) / from_hz);
   56b98:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			return ((t * to_hz + off) / from_hz);
   56b9c:	f240 33e7 	movw	r3, #999	; 0x3e7
			return (uint32_t)((t * to_hz + off) / from_hz);
   56ba0:	fb82 2505 	smull	r2, r5, r2, r5
   56ba4:	0bd4      	lsrs	r4, r2, #15
   56ba6:	ea44 4445 	orr.w	r4, r4, r5, lsl #17
			return ((t * to_hz + off) / from_hz);
   56baa:	f425 45ff 	bic.w	r5, r5, #32640	; 0x7f80
	const struct sdhc_spi_config *config = dev->config;
   56bae:	6847      	ldr	r7, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   56bb0:	f8d0 8010 	ldr.w	r8, [r0, #16]
   56bb4:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
   56bb8:	03e0      	lsls	r0, r4, #15
   56bba:	18c0      	adds	r0, r0, r3
   56bbc:	ea45 4554 	orr.w	r5, r5, r4, lsr #17
{
   56bc0:	460e      	mov	r6, r1
   56bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   56bc6:	f145 0100 	adc.w	r1, r5, #0
   56bca:	2300      	movs	r3, #0
   56bcc:	f7e9 ffa0 	bl	40b10 <__aeabi_uldivmod>
   56bd0:	4605      	mov	r5, r0
   56bd2:	4689      	mov	r9, r1
	while (timeout_ms > 0) {
   56bd4:	2e00      	cmp	r6, #0
   56bd6:	dc04      	bgt.n	56be2 <sdhc_spi_wait_unbusy+0x4e>
	return -ETIMEDOUT;
   56bd8:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   56bdc:	b003      	add	sp, #12
   56bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg, &response, 1);
   56be2:	2301      	movs	r3, #1
   56be4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   56be8:	6838      	ldr	r0, [r7, #0]
   56bea:	f10d 0207 	add.w	r2, sp, #7
   56bee:	f7f2 f84b 	bl	48c88 <sdhc_spi_rx>
		if (ret) {
   56bf2:	2800      	cmp	r0, #0
   56bf4:	d1f2      	bne.n	56bdc <sdhc_spi_wait_unbusy+0x48>
		if (response == 0xFF) {
   56bf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   56bfa:	2bff      	cmp	r3, #255	; 0xff
   56bfc:	d0ee      	beq.n	56bdc <sdhc_spi_wait_unbusy+0x48>
	return z_impl_k_sleep(timeout);
   56bfe:	4628      	mov	r0, r5
   56c00:	4649      	mov	r1, r9
   56c02:	f7fc f93f 	bl	52e84 <z_impl_k_sleep>
		timeout_ms -= k_ticks_to_ms_floor32(interval_ticks);
   56c06:	1b36      	subs	r6, r6, r4
   56c08:	e7e4      	b.n	56bd4 <sdhc_spi_wait_unbusy+0x40>

00056c0a <sdhc_spi_send_cmd>:
{
   56c0a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	const struct spi_buf_set buf_set = {
   56c0e:	2301      	movs	r3, #1
		bufs[0].len = SD_SPI_CMD_SIZE + 3;
   56c10:	2a00      	cmp	r2, #0
	const struct spi_buf_set buf_set = {
   56c12:	9303      	str	r3, [sp, #12]
{
   56c14:	460d      	mov	r5, r1
		bufs[0].len = SD_SPI_CMD_SIZE + 3;
   56c16:	bf0c      	ite	eq
   56c18:	2315      	moveq	r3, #21
   56c1a:	2309      	movne	r3, #9
	struct sdhc_spi_data *dev_data = dev->data;
   56c1c:	6904      	ldr	r4, [r0, #16]
	const struct sdhc_spi_config *config = dev->config;
   56c1e:	6846      	ldr	r6, [r0, #4]
__ssp_bos_icheck3(memset, void *, int)
   56c20:	2215      	movs	r2, #21
   56c22:	21ff      	movs	r1, #255	; 0xff
{
   56c24:	4681      	mov	r9, r0
			.buf = dev_data->scratch,
   56c26:	f104 0020 	add.w	r0, r4, #32
   56c2a:	9301      	str	r3, [sp, #4]
	struct spi_buf bufs[] = {
   56c2c:	9000      	str	r0, [sp, #0]
	const struct spi_buf_set buf_set = {
   56c2e:	f8cd d008 	str.w	sp, [sp, #8]
   56c32:	f004 f94c 	bl	5aece <memset>
	cmd_buf[0] = (cmd->opcode & SD_SPI_CMD);
   56c36:	682b      	ldr	r3, [r5, #0]
	cmd_buf[SD_SPI_CMD_BODY_SIZE] = crc7_be(0, cmd_buf, SD_SPI_CMD_BODY_SIZE) | 0x1;
   56c38:	2000      	movs	r0, #0
	cmd_buf[0] = (cmd->opcode & SD_SPI_CMD);
   56c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	cmd_buf[0] = ((cmd_buf[0] | SD_SPI_TX) & ~SD_SPI_START);
   56c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   56c42:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	sys_put_be32(cmd->arg, &cmd_buf[1]);
   56c46:	686b      	ldr	r3, [r5, #4]
 *  @param val 32-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be32(uint32_t val, uint8_t dst[4])
{
	sys_put_be16(val >> 16, dst);
   56c48:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   56c4a:	0e19      	lsrs	r1, r3, #24
	dst[1] = val;
   56c4c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	dst[0] = val >> 8;
   56c50:	f3c3 2207 	ubfx	r2, r3, #8, #8
   56c54:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
   56c58:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	dst[1] = val;
   56c5c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	cmd_buf[SD_SPI_CMD_BODY_SIZE] = crc7_be(0, cmd_buf, SD_SPI_CMD_BODY_SIZE) | 0x1;
   56c60:	f104 0121 	add.w	r1, r4, #33	; 0x21
   56c64:	2205      	movs	r2, #5
   56c66:	f7fe fd22 	bl	556ae <crc7_be>
   56c6a:	f040 0001 	orr.w	r0, r0, #1
   56c6e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
	err = spi_transceive(config->spi_dev, dev_data->spi_cfg, &buf_set, &buf_set);
   56c72:	ab02      	add	r3, sp, #8
   56c74:	6861      	ldr	r1, [r4, #4]
   56c76:	461a      	mov	r2, r3
   56c78:	6830      	ldr	r0, [r6, #0]
   56c7a:	f7ff ff4a 	bl	56b12 <spi_transceive>
	if (err != 0) {
   56c7e:	4604      	mov	r4, r0
   56c80:	2800      	cmp	r0, #0
   56c82:	d146      	bne.n	56d12 <sdhc_spi_send_cmd+0x108>
	struct sdhc_spi_data *dev_data = dev->data;
   56c84:	f8d9 6010 	ldr.w	r6, [r9, #16]
	uint8_t *end = response + rx_len;
   56c88:	9f01      	ldr	r7, [sp, #4]
	uint8_t *response = dev_data->scratch;
   56c8a:	f106 0820 	add.w	r8, r6, #32
	const struct sdhc_spi_config *config = dev->config;
   56c8e:	f8d9 a004 	ldr.w	sl, [r9, #4]
	uint8_t *end = response + rx_len;
   56c92:	4447      	add	r7, r8
	response += 8;
   56c94:	f106 0228 	add.w	r2, r6, #40	; 0x28
	while (response < end && ((*response & SD_SPI_START) == SD_SPI_START)) {
   56c98:	4297      	cmp	r7, r2
   56c9a:	4613      	mov	r3, r2
   56c9c:	d81f      	bhi.n	56cde <sdhc_spi_send_cmd+0xd4>
	if (response == end) {
   56c9e:	d024      	beq.n	56cea <sdhc_spi_send_cmd+0xe0>
	cmd->response[0] = *response++;
   56ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
   56ca4:	60aa      	str	r2, [r5, #8]
	if (cmd->response[0] != 0) {
   56ca6:	b16a      	cbz	r2, 56cc4 <sdhc_spi_send_cmd+0xba>
		if (cmd->response[0] &	(SD_SPI_R1PARAMETER_ERR | SD_SPI_R1ADDRESS_ERR)) {
   56ca8:	f012 0f60 	tst.w	r2, #96	; 0x60
   56cac:	f040 8082 	bne.w	56db4 <sdhc_spi_send_cmd+0x1aa>
		} else if (cmd->response[0] & (SD_SPI_R1ILLEGAL_CMD_ERR)) {
   56cb0:	0750      	lsls	r0, r2, #29
   56cb2:	f100 8082 	bmi.w	56dba <sdhc_spi_send_cmd+0x1b0>
		} else if (cmd->response[0] & (SD_SPI_R1CMD_CRC_ERR)) {
   56cb6:	0711      	lsls	r1, r2, #28
   56cb8:	f100 8082 	bmi.w	56dc0 <sdhc_spi_send_cmd+0x1b6>
		} else if (cmd->response[0] & (SD_SPI_R1ERASE_SEQ_ERR | SD_SPI_R1ERASE_RESET)) {
   56cbc:	f012 0f12 	tst.w	r2, #18
   56cc0:	f040 8081 	bne.w	56dc6 <sdhc_spi_send_cmd+0x1bc>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
   56cc4:	69a9      	ldr	r1, [r5, #24]
   56cc6:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
   56cca:	2a30      	cmp	r2, #48	; 0x30
   56ccc:	d063      	beq.n	56d96 <sdhc_spi_send_cmd+0x18c>
   56cce:	d828      	bhi.n	56d22 <sdhc_spi_send_cmd+0x118>
   56cd0:	2a10      	cmp	r2, #16
   56cd2:	d01e      	beq.n	56d12 <sdhc_spi_send_cmd+0x108>
   56cd4:	2a20      	cmp	r2, #32
   56cd6:	d052      	beq.n	56d7e <sdhc_spi_send_cmd+0x174>
   56cd8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   56cdc:	e019      	b.n	56d12 <sdhc_spi_send_cmd+0x108>
	while (response < end && ((*response & SD_SPI_START) == SD_SPI_START)) {
   56cde:	f993 1000 	ldrsb.w	r1, [r3]
   56ce2:	3201      	adds	r2, #1
   56ce4:	2900      	cmp	r1, #0
   56ce6:	dbd7      	blt.n	56c98 <sdhc_spi_send_cmd+0x8e>
   56ce8:	e7da      	b.n	56ca0 <sdhc_spi_send_cmd+0x96>
   56cea:	2710      	movs	r7, #16
			ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
   56cec:	2301      	movs	r3, #1
   56cee:	4642      	mov	r2, r8
   56cf0:	6871      	ldr	r1, [r6, #4]
   56cf2:	f8da 0000 	ldr.w	r0, [sl]
   56cf6:	f7f1 ffc7 	bl	48c88 <sdhc_spi_rx>
			if (ret < 0) {
   56cfa:	2800      	cmp	r0, #0
   56cfc:	db66      	blt.n	56dcc <sdhc_spi_send_cmd+0x1c2>
			if (*response != 0xff) {
   56cfe:	f896 3020 	ldrb.w	r3, [r6, #32]
   56d02:	2bff      	cmp	r3, #255	; 0xff
   56d04:	d109      	bne.n	56d1a <sdhc_spi_send_cmd+0x110>
		for (i = 0; i < 16; i++) {
   56d06:	3f01      	subs	r7, #1
   56d08:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   56d0c:	d1ee      	bne.n	56cec <sdhc_spi_send_cmd+0xe2>
			return -ETIMEDOUT;
   56d0e:	f06f 0473 	mvn.w	r4, #115	; 0x73
}
   56d12:	4620      	mov	r0, r4
   56d14:	b004      	add	sp, #16
   56d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		response = dev_data->scratch;
   56d1a:	4643      	mov	r3, r8
		end = response + 1;
   56d1c:	f106 0721 	add.w	r7, r6, #33	; 0x21
   56d20:	e7be      	b.n	56ca0 <sdhc_spi_send_cmd+0x96>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
   56d22:	2a60      	cmp	r2, #96	; 0x60
   56d24:	d037      	beq.n	56d96 <sdhc_spi_send_cmd+0x18c>
   56d26:	d824      	bhi.n	56d72 <sdhc_spi_send_cmd+0x168>
   56d28:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
   56d2c:	2940      	cmp	r1, #64	; 0x40
   56d2e:	d1d3      	bne.n	56cd8 <sdhc_spi_send_cmd+0xce>
		cmd->response[1] = 0;
   56d30:	2200      	movs	r2, #0
   56d32:	f04f 0904 	mov.w	r9, #4
   56d36:	60ea      	str	r2, [r5, #12]
			cmd->response[1] <<= 8;
   56d38:	68ea      	ldr	r2, [r5, #12]
			if (response == end) {
   56d3a:	42bb      	cmp	r3, r7
			cmd->response[1] <<= 8;
   56d3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   56d40:	60ea      	str	r2, [r5, #12]
			if (response == end) {
   56d42:	d10b      	bne.n	56d5c <sdhc_spi_send_cmd+0x152>
				ret = sdhc_spi_rx(config->spi_dev,
   56d44:	2301      	movs	r3, #1
   56d46:	4642      	mov	r2, r8
   56d48:	6871      	ldr	r1, [r6, #4]
   56d4a:	f8da 0000 	ldr.w	r0, [sl]
				end = response + 1;
   56d4e:	f106 0721 	add.w	r7, r6, #33	; 0x21
				ret = sdhc_spi_rx(config->spi_dev,
   56d52:	f7f1 ff99 	bl	48c88 <sdhc_spi_rx>
				if (ret) {
   56d56:	2800      	cmp	r0, #0
   56d58:	d138      	bne.n	56dcc <sdhc_spi_send_cmd+0x1c2>
				response = dev_data->scratch;
   56d5a:	4643      	mov	r3, r8
			cmd->response[1] |= *response++;
   56d5c:	f813 1b01 	ldrb.w	r1, [r3], #1
   56d60:	68ea      	ldr	r2, [r5, #12]
		for (i = 0; i < 4; i++) {
   56d62:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
			cmd->response[1] |= *response++;
   56d66:	430a      	orrs	r2, r1
		for (i = 0; i < 4; i++) {
   56d68:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
			cmd->response[1] |= *response++;
   56d6c:	60ea      	str	r2, [r5, #12]
		for (i = 0; i < 4; i++) {
   56d6e:	d1e3      	bne.n	56d38 <sdhc_spi_send_cmd+0x12e>
   56d70:	e7cf      	b.n	56d12 <sdhc_spi_send_cmd+0x108>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
   56d72:	2a70      	cmp	r2, #112	; 0x70
   56d74:	e7db      	b.n	56d2e <sdhc_spi_send_cmd+0x124>
		while (response < end && (*response == 0x0)) {
   56d76:	7812      	ldrb	r2, [r2, #0]
   56d78:	3301      	adds	r3, #1
   56d7a:	2a00      	cmp	r2, #0
   56d7c:	d1c9      	bne.n	56d12 <sdhc_spi_send_cmd+0x108>
   56d7e:	42bb      	cmp	r3, r7
   56d80:	461a      	mov	r2, r3
   56d82:	d3f8      	bcc.n	56d76 <sdhc_spi_send_cmd+0x16c>
		if (response == end) {
   56d84:	d1c5      	bne.n	56d12 <sdhc_spi_send_cmd+0x108>
			ret = sdhc_spi_wait_unbusy(dev,
   56d86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   56d8a:	f640 31b8 	movw	r1, #3000	; 0xbb8
   56d8e:	4648      	mov	r0, r9
   56d90:	f7ff ff00 	bl	56b94 <sdhc_spi_wait_unbusy>
   56d94:	e7bd      	b.n	56d12 <sdhc_spi_send_cmd+0x108>
		if (response == end) {
   56d96:	42bb      	cmp	r3, r7
   56d98:	d108      	bne.n	56dac <sdhc_spi_send_cmd+0x1a2>
			ret = sdhc_spi_rx(config->spi_dev,
   56d9a:	2301      	movs	r3, #1
   56d9c:	4642      	mov	r2, r8
   56d9e:	6871      	ldr	r1, [r6, #4]
   56da0:	f8da 0000 	ldr.w	r0, [sl]
   56da4:	f7f1 ff70 	bl	48c88 <sdhc_spi_rx>
			if (ret) {
   56da8:	b980      	cbnz	r0, 56dcc <sdhc_spi_send_cmd+0x1c2>
			response = dev_data->scratch;
   56daa:	4643      	mov	r3, r8
		cmd->response[0] = (*response) << 8;
   56dac:	781b      	ldrb	r3, [r3, #0]
   56dae:	021b      	lsls	r3, r3, #8
   56db0:	60ab      	str	r3, [r5, #8]
		break;
   56db2:	e7ae      	b.n	56d12 <sdhc_spi_send_cmd+0x108>
			return -EFAULT; /* Bad address */
   56db4:	f06f 040d 	mvn.w	r4, #13
   56db8:	e7ab      	b.n	56d12 <sdhc_spi_send_cmd+0x108>
			return -EINVAL; /* Invalid command */
   56dba:	f06f 0415 	mvn.w	r4, #21
   56dbe:	e7a8      	b.n	56d12 <sdhc_spi_send_cmd+0x108>
			return -EILSEQ; /* Illegal byte sequence */
   56dc0:	f06f 0489 	mvn.w	r4, #137	; 0x89
   56dc4:	e7a5      	b.n	56d12 <sdhc_spi_send_cmd+0x108>
			return -EIO;
   56dc6:	f06f 0404 	mvn.w	r4, #4
   56dca:	e7a2      	b.n	56d12 <sdhc_spi_send_cmd+0x108>
				ret = sdhc_spi_rx(config->spi_dev,
   56dcc:	4604      	mov	r4, r0
   56dce:	e7a0      	b.n	56d12 <sdhc_spi_send_cmd+0x108>

00056dd0 <uarte_nrfx_config_get>:
{
   56dd0:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   56dd2:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   56dd4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   56dd8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   56ddc:	2000      	movs	r0, #0
   56dde:	4770      	bx	lr

00056de0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   56de0:	6843      	ldr	r3, [r0, #4]
   56de2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   56de4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   56de8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   56dec:	4770      	bx	lr

00056dee <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   56dee:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   56df0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   56df2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   56df4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   56df8:	b150      	cbz	r0, 56e10 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   56dfa:	2000      	movs	r0, #0
	*c = *data->rx_data;
   56dfc:	6992      	ldr	r2, [r2, #24]
   56dfe:	7812      	ldrb	r2, [r2, #0]
   56e00:	700a      	strb	r2, [r1, #0]
   56e02:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   56e06:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   56e0a:	2201      	movs	r2, #1
   56e0c:	601a      	str	r2, [r3, #0]
	return 0;
   56e0e:	4770      	bx	lr
		return -1;
   56e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   56e14:	4770      	bx	lr

00056e16 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   56e16:	2a00      	cmp	r2, #0
{
   56e18:	b510      	push	{r4, lr}
   56e1a:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   56e1c:	dd10      	ble.n	56e40 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   56e1e:	6843      	ldr	r3, [r0, #4]
   56e20:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   56e22:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   56e26:	b150      	cbz	r0, 56e3e <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   56e28:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
   56e2a:	6922      	ldr	r2, [r4, #16]
   56e2c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   56e30:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   56e34:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
   56e36:	6992      	ldr	r2, [r2, #24]
   56e38:	7812      	ldrb	r2, [r2, #0]
   56e3a:	700a      	strb	r2, [r1, #0]
   56e3c:	6018      	str	r0, [r3, #0]
}
   56e3e:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   56e40:	2000      	movs	r0, #0
   56e42:	e7fc      	b.n	56e3e <uarte_nrfx_fifo_read+0x28>

00056e44 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   56e44:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   56e46:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   56e48:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   56e4a:	f04f 0020 	mov.w	r0, #32
   56e4e:	f3ef 8311 	mrs	r3, BASEPRI
   56e52:	f380 8812 	msr	BASEPRI_MAX, r0
   56e56:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   56e5a:	2000      	movs	r0, #0
   56e5c:	68c9      	ldr	r1, [r1, #12]
   56e5e:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   56e60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   56e64:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   56e68:	f383 8811 	msr	BASEPRI, r3
   56e6c:	f3bf 8f6f 	isb	sy
}
   56e70:	4770      	bx	lr

00056e72 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   56e72:	2201      	movs	r2, #1
   56e74:	6903      	ldr	r3, [r0, #16]
   56e76:	68db      	ldr	r3, [r3, #12]
   56e78:	739a      	strb	r2, [r3, #14]
}
   56e7a:	4770      	bx	lr

00056e7c <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   56e7c:	6903      	ldr	r3, [r0, #16]
   56e7e:	68db      	ldr	r3, [r3, #12]
   56e80:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   56e82:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   56e86:	b962      	cbnz	r2, 56ea2 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   56e88:	6842      	ldr	r2, [r0, #4]
   56e8a:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   56e8c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   56e90:	b140      	cbz	r0, 56ea4 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   56e92:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   56e96:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   56e9a:	d003      	beq.n	56ea4 <uarte_nrfx_irq_tx_ready_complete+0x28>
   56e9c:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   56e9e:	6119      	str	r1, [r3, #16]
   56ea0:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   56ea2:	2000      	movs	r0, #0
}
   56ea4:	4770      	bx	lr

00056ea6 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   56ea6:	6843      	ldr	r3, [r0, #4]
   56ea8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   56eaa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   56eae:	3800      	subs	r0, #0
   56eb0:	bf18      	it	ne
   56eb2:	2001      	movne	r0, #1
   56eb4:	4770      	bx	lr

00056eb6 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   56eb6:	2210      	movs	r2, #16
	return config->uarte_regs;
   56eb8:	6843      	ldr	r3, [r0, #4]
   56eba:	681b      	ldr	r3, [r3, #0]
   56ebc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   56ec0:	4770      	bx	lr

00056ec2 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   56ec2:	2210      	movs	r2, #16
	return config->uarte_regs;
   56ec4:	6843      	ldr	r3, [r0, #4]
   56ec6:	681b      	ldr	r3, [r3, #0]
   56ec8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   56ecc:	4770      	bx	lr

00056ece <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   56ece:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   56ed2:	6843      	ldr	r3, [r0, #4]
   56ed4:	681b      	ldr	r3, [r3, #0]
   56ed6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   56eda:	4770      	bx	lr

00056edc <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   56edc:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   56ee0:	6843      	ldr	r3, [r0, #4]
   56ee2:	681b      	ldr	r3, [r3, #0]
   56ee4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   56ee8:	4770      	bx	lr

00056eea <uarte_nrfx_irq_is_pending>:
{
   56eea:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   56eec:	6843      	ldr	r3, [r0, #4]
{
   56eee:	4604      	mov	r4, r0
	return config->uarte_regs;
   56ef0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   56ef2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   56ef6:	025b      	lsls	r3, r3, #9
   56ef8:	d405      	bmi.n	56f06 <uarte_nrfx_irq_is_pending+0x1c>
   56efa:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   56efe:	f010 0010 	ands.w	r0, r0, #16
   56f02:	d106      	bne.n	56f12 <uarte_nrfx_irq_is_pending+0x28>
}
   56f04:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   56f06:	f7ff ffb9 	bl	56e7c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   56f0a:	2800      	cmp	r0, #0
   56f0c:	d0f5      	beq.n	56efa <uarte_nrfx_irq_is_pending+0x10>
		||
   56f0e:	2001      	movs	r0, #1
   56f10:	e7f8      	b.n	56f04 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   56f12:	4620      	mov	r0, r4
   56f14:	f7ff ffc7 	bl	56ea6 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   56f18:	3800      	subs	r0, #0
   56f1a:	bf18      	it	ne
   56f1c:	2001      	movne	r0, #1
   56f1e:	e7f1      	b.n	56f04 <uarte_nrfx_irq_is_pending+0x1a>

00056f20 <uarte_nrfx_irq_update>:
}
   56f20:	2001      	movs	r0, #1
   56f22:	4770      	bx	lr

00056f24 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   56f24:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   56f26:	68d8      	ldr	r0, [r3, #12]
   56f28:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   56f2a:	68db      	ldr	r3, [r3, #12]
   56f2c:	605a      	str	r2, [r3, #4]
}
   56f2e:	4770      	bx	lr

00056f30 <tx_start>:
{
   56f30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
   56f34:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   56f38:	460f      	mov	r7, r1
	(void)pm_device_state_get(dev, &state);
   56f3a:	f10d 0107 	add.w	r1, sp, #7
{
   56f3e:	4605      	mov	r5, r0
   56f40:	4616      	mov	r6, r2
	return config->uarte_regs;
   56f42:	f8d8 4000 	ldr.w	r4, [r8]
	(void)pm_device_state_get(dev, &state);
   56f46:	f7fe ffed 	bl	55f24 <pm_device_state_get>
	if (state != PM_DEVICE_STATE_ACTIVE) {
   56f4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   56f4e:	b9d3      	cbnz	r3, 56f86 <tx_start+0x56>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   56f50:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   56f54:	f8c4 6548 	str.w	r6, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   56f58:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   56f5c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   56f60:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   56f64:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   56f68:	f8d8 3004 	ldr.w	r3, [r8, #4]
   56f6c:	06db      	lsls	r3, r3, #27
   56f6e:	d508      	bpl.n	56f82 <tx_start+0x52>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   56f70:	2208      	movs	r2, #8
	return config->uarte_regs;
   56f72:	686b      	ldr	r3, [r5, #4]
   56f74:	681b      	ldr	r3, [r3, #0]
   56f76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   56f7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   56f7e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   56f82:	2301      	movs	r3, #1
   56f84:	60a3      	str	r3, [r4, #8]
}
   56f86:	b002      	add	sp, #8
   56f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00056f8c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   56f8c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   56f8e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   56f90:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   56f94:	b940      	cbnz	r0, 56fa8 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   56f96:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   56f98:	079b      	lsls	r3, r3, #30
   56f9a:	d406      	bmi.n	56faa <is_tx_ready.isra.0+0x1e>
   56f9c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   56fa0:	3800      	subs	r0, #0
   56fa2:	bf18      	it	ne
   56fa4:	2001      	movne	r0, #1
   56fa6:	4770      	bx	lr
   56fa8:	2001      	movs	r0, #1
}
   56faa:	4770      	bx	lr

00056fac <uarte_nrfx_fifo_fill>:
{
   56fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   56fae:	6906      	ldr	r6, [r0, #16]
{
   56fb0:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   56fb2:	68f3      	ldr	r3, [r6, #12]
   56fb4:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   56fb6:	3310      	adds	r3, #16
   56fb8:	4294      	cmp	r4, r2
   56fba:	bfa8      	it	ge
   56fbc:	4614      	movge	r4, r2
   56fbe:	2201      	movs	r2, #1
   56fc0:	e8d3 0fef 	ldaex	r0, [r3]
   56fc4:	2800      	cmp	r0, #0
   56fc6:	d103      	bne.n	56fd0 <uarte_nrfx_fifo_fill+0x24>
   56fc8:	e8c3 2fe7 	stlex	r7, r2, [r3]
   56fcc:	2f00      	cmp	r7, #0
   56fce:	d1f7      	bne.n	56fc0 <uarte_nrfx_fifo_fill+0x14>
   56fd0:	bf0c      	ite	eq
   56fd2:	4613      	moveq	r3, r2
   56fd4:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   56fd6:	d11f      	bne.n	57018 <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   56fd8:	68f3      	ldr	r3, [r6, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   56fda:	4622      	mov	r2, r4
   56fdc:	6898      	ldr	r0, [r3, #8]
   56fde:	f003 ff3c 	bl	5ae5a <memcpy>
	__asm__ volatile(
   56fe2:	f04f 0320 	mov.w	r3, #32
   56fe6:	f3ef 8711 	mrs	r7, BASEPRI
   56fea:	f383 8812 	msr	BASEPRI_MAX, r3
   56fee:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   56ff2:	6868      	ldr	r0, [r5, #4]
   56ff4:	f7ff ffca 	bl	56f8c <is_tx_ready.isra.0>
   56ff8:	68f3      	ldr	r3, [r6, #12]
   56ffa:	b938      	cbnz	r0, 5700c <uarte_nrfx_fifo_fill+0x60>
		len = 0;
   56ffc:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   56ffe:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   57000:	f387 8811 	msr	BASEPRI, r7
   57004:	f3bf 8f6f 	isb	sy
}
   57008:	4620      	mov	r0, r4
   5700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   5700c:	4622      	mov	r2, r4
   5700e:	4628      	mov	r0, r5
   57010:	6899      	ldr	r1, [r3, #8]
   57012:	f7ff ff8d 	bl	56f30 <tx_start>
   57016:	e7f3      	b.n	57000 <uarte_nrfx_fifo_fill+0x54>
		return 0;
   57018:	461c      	mov	r4, r3
   5701a:	e7f5      	b.n	57008 <uarte_nrfx_fifo_fill+0x5c>

0005701c <uarte_nrfx_isr_int>:
{
   5701c:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
   5701e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   57020:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   57022:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   57026:	05c9      	lsls	r1, r1, #23
   57028:	d518      	bpl.n	5705c <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   5702a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   5702e:	b1a9      	cbz	r1, 5705c <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   57030:	f04f 0420 	mov.w	r4, #32
   57034:	f3ef 8111 	mrs	r1, BASEPRI
   57038:	f384 8812 	msr	BASEPRI_MAX, r4
   5703c:	f3bf 8f6f 	isb	sy
   57040:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   57044:	b134      	cbz	r4, 57054 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   57046:	2400      	movs	r4, #0
   57048:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   5704c:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   57050:	2401      	movs	r4, #1
   57052:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   57054:	f381 8811 	msr	BASEPRI, r1
   57058:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   5705c:	6852      	ldr	r2, [r2, #4]
   5705e:	06d2      	lsls	r2, r2, #27
   57060:	d51a      	bpl.n	57098 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   57062:	f04f 0220 	mov.w	r2, #32
   57066:	f3ef 8111 	mrs	r1, BASEPRI
   5706a:	f382 8812 	msr	BASEPRI_MAX, r2
   5706e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   57072:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   57076:	b112      	cbz	r2, 5707e <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   57078:	2200      	movs	r2, #0
   5707a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   5707e:	6902      	ldr	r2, [r0, #16]
   57080:	68d2      	ldr	r2, [r2, #12]
   57082:	b10a      	cbz	r2, 57088 <uarte_nrfx_isr_int+0x6c>
   57084:	6912      	ldr	r2, [r2, #16]
   57086:	b91a      	cbnz	r2, 57090 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   57088:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   5708c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   57090:	f381 8811 	msr	BASEPRI, r1
   57094:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   57098:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
   5709a:	68d4      	ldr	r4, [r2, #12]
   5709c:	b16c      	cbz	r4, 570ba <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   5709e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   570a2:	b169      	cbz	r1, 570c0 <uarte_nrfx_isr_int+0xa4>
		data->int_driven->fifo_fill_lock = 0;
   570a4:	2100      	movs	r1, #0
   570a6:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
   570a8:	68d4      	ldr	r4, [r2, #12]
   570aa:	7ba4      	ldrb	r4, [r4, #14]
   570ac:	b144      	cbz	r4, 570c0 <uarte_nrfx_isr_int+0xa4>
    p_reg->INTENCLR = mask;
   570ae:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   570b2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   570b6:	68d3      	ldr	r3, [r2, #12]
   570b8:	7399      	strb	r1, [r3, #14]
}
   570ba:	f85d 4b04 	ldr.w	r4, [sp], #4
   570be:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   570c0:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   570c4:	b121      	cbz	r1, 570d0 <uarte_nrfx_isr_int+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   570c6:	2100      	movs	r1, #0
   570c8:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   570cc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   570d0:	68d2      	ldr	r2, [r2, #12]
   570d2:	6813      	ldr	r3, [r2, #0]
   570d4:	2b00      	cmp	r3, #0
   570d6:	d0f0      	beq.n	570ba <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   570d8:	6851      	ldr	r1, [r2, #4]
}
   570da:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   570de:	4718      	bx	r3

000570e0 <pinctrl_apply_state>:
{
   570e0:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   570e2:	aa01      	add	r2, sp, #4
{
   570e4:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   570e6:	f000 f8b0 	bl	5724a <pinctrl_lookup_state>
	if (ret < 0) {
   570ea:	2800      	cmp	r0, #0
   570ec:	db05      	blt.n	570fa <pinctrl_apply_state+0x1a>
	return pinctrl_apply_state_direct(config, state);
   570ee:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   570f0:	6822      	ldr	r2, [r4, #0]
   570f2:	7919      	ldrb	r1, [r3, #4]
   570f4:	6818      	ldr	r0, [r3, #0]
   570f6:	f7f2 fba7 	bl	49848 <pinctrl_configure_pins>
}
   570fa:	b002      	add	sp, #8
   570fc:	bd10      	pop	{r4, pc}

000570fe <uarte_nrfx_pm_action>:
{
   570fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
   57102:	6846      	ldr	r6, [r0, #4]
{
   57104:	4605      	mov	r5, r0
	return config->uarte_regs;
   57106:	6834      	ldr	r4, [r6, #0]
	struct uarte_nrfx_data *data = dev->data;
   57108:	6907      	ldr	r7, [r0, #16]
	switch (action) {
   5710a:	b309      	cbz	r1, 57150 <uarte_nrfx_pm_action+0x52>
   5710c:	2901      	cmp	r1, #1
   5710e:	f040 8083 	bne.w	57218 <uarte_nrfx_pm_action+0x11a>
		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   57112:	6873      	ldr	r3, [r6, #4]
   57114:	07da      	lsls	r2, r3, #31
   57116:	d413      	bmi.n	57140 <uarte_nrfx_pm_action+0x42>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   57118:	2308      	movs	r3, #8
   5711a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   5711e:	7a33      	ldrb	r3, [r6, #8]
   57120:	b963      	cbnz	r3, 5713c <uarte_nrfx_pm_action+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   57122:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   57126:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   5712a:	2301      	movs	r3, #1
   5712c:	6023      	str	r3, [r4, #0]
			if (data->int_driven &&
   5712e:	68fb      	ldr	r3, [r7, #12]
   57130:	b123      	cbz	r3, 5713c <uarte_nrfx_pm_action+0x3e>
   57132:	7bdb      	ldrb	r3, [r3, #15]
   57134:	b113      	cbz	r3, 5713c <uarte_nrfx_pm_action+0x3e>
    p_reg->INTENSET = mask;
   57136:	2310      	movs	r3, #16
   57138:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return 0;
   5713c:	2000      	movs	r0, #0
   5713e:	e005      	b.n	5714c <uarte_nrfx_pm_action+0x4e>
			ret = pinctrl_apply_state(cfg->pcfg,
   57140:	2100      	movs	r1, #0
   57142:	68f0      	ldr	r0, [r6, #12]
   57144:	f7ff ffcc 	bl	570e0 <pinctrl_apply_state>
			if (ret < 0) {
   57148:	2800      	cmp	r0, #0
   5714a:	dae5      	bge.n	57118 <uarte_nrfx_pm_action+0x1a>
}
   5714c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   57150:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   57154:	b313      	cbz	r3, 5719c <uarte_nrfx_pm_action+0x9e>
			if (data->int_driven) {
   57156:	68fa      	ldr	r2, [r7, #12]
   57158:	b152      	cbz	r2, 57170 <uarte_nrfx_pm_action+0x72>
    return p_reg->INTENSET & mask;
   5715a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
					nrf_uarte_int_enable_check(uarte,
   5715e:	f3c3 1300 	ubfx	r3, r3, #4, #1
				data->int_driven->rx_irq_enabled =
   57162:	73d3      	strb	r3, [r2, #15]
				if (data->int_driven->rx_irq_enabled) {
   57164:	68fb      	ldr	r3, [r7, #12]
   57166:	7bdb      	ldrb	r3, [r3, #15]
   57168:	b113      	cbz	r3, 57170 <uarte_nrfx_pm_action+0x72>
    p_reg->INTENCLR = mask;
   5716a:	2310      	movs	r3, #16
   5716c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   57170:	2301      	movs	r3, #1
   57172:	6063      	str	r3, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   57174:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
						      NRF_UARTE_EVENT_RXTO) &&
   57178:	b91b      	cbnz	r3, 57182 <uarte_nrfx_pm_action+0x84>
   5717a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   5717e:	2b00      	cmp	r3, #0
   57180:	d0f8      	beq.n	57174 <uarte_nrfx_pm_action+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   57182:	2300      	movs	r3, #0
   57184:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   57188:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   5718c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   57190:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   57194:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   57198:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	const struct uarte_nrfx_config *config = dev->config;
   5719c:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   5719e:	e9d2 4300 	ldrd	r4, r3, [r2]
	if (!ppi_endtx) {
   571a2:	f013 0802 	ands.w	r8, r3, #2
   571a6:	d117      	bne.n	571d8 <uarte_nrfx_pm_action+0xda>
    p_reg->INTENCLR = mask;
   571a8:	f44f 7380 	mov.w	r3, #256	; 0x100
   571ac:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   571b0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
		NRFX_WAIT_FOR(is_tx_ready(dev), 1000, 1, res);
   571b4:	6868      	ldr	r0, [r5, #4]
   571b6:	f7ff fee9 	bl	56f8c <is_tx_ready.isra.0>
   571ba:	b920      	cbnz	r0, 571c6 <uarte_nrfx_pm_action+0xc8>
   571bc:	2001      	movs	r0, #1
   571be:	f002 fb4c 	bl	5985a <nrfx_busy_wait>
   571c2:	3f01      	subs	r7, #1
   571c4:	d1f6      	bne.n	571b4 <uarte_nrfx_pm_action+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   571c6:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   571ca:	b92b      	cbnz	r3, 571d8 <uarte_nrfx_pm_action+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   571cc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   571d0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   571d4:	2301      	movs	r3, #1
   571d6:	60e3      	str	r3, [r4, #12]
    p_reg->INTENCLR = mask;
   571d8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   571dc:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED),
   571e0:	b923      	cbnz	r3, 571ec <uarte_nrfx_pm_action+0xee>
   571e2:	2001      	movs	r0, #1
   571e4:	f002 fb39 	bl	5985a <nrfx_busy_wait>
   571e8:	3f01      	subs	r7, #1
   571ea:	d1f7      	bne.n	571dc <uarte_nrfx_pm_action+0xde>
	if (!ppi_endtx) {
   571ec:	f1b8 0f00 	cmp.w	r8, #0
   571f0:	d103      	bne.n	571fa <uarte_nrfx_pm_action+0xfc>
    p_reg->INTENSET = mask;
   571f2:	f44f 7380 	mov.w	r3, #256	; 0x100
   571f6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   571fa:	2200      	movs	r2, #0
	return config->uarte_regs;
   571fc:	686b      	ldr	r3, [r5, #4]
   571fe:	681b      	ldr	r3, [r3, #0]
   57200:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   57204:	6873      	ldr	r3, [r6, #4]
   57206:	07db      	lsls	r3, r3, #31
   57208:	d598      	bpl.n	5713c <uarte_nrfx_pm_action+0x3e>
			ret = pinctrl_apply_state(cfg->pcfg,
   5720a:	2101      	movs	r1, #1
   5720c:	68f0      	ldr	r0, [r6, #12]
   5720e:	f7ff ff67 	bl	570e0 <pinctrl_apply_state>
			if (ret < 0) {
   57212:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   57216:	e799      	b.n	5714c <uarte_nrfx_pm_action+0x4e>
	switch (action) {
   57218:	f06f 0085 	mvn.w	r0, #133	; 0x85
   5721c:	e796      	b.n	5714c <uarte_nrfx_pm_action+0x4e>

0005721e <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   5721e:	4608      	mov	r0, r1
   57220:	b508      	push	{r3, lr}
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   57222:	4611      	mov	r1, r2
   57224:	f7f6 f90a 	bl	4d43c <psa_generate_random>
	int err = EINVAL;
   57228:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   5722a:	bf18      	it	ne
   5722c:	2016      	movne	r0, #22
   5722e:	bd08      	pop	{r3, pc}

00057230 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   57230:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   57232:	f000 fc60 	bl	57af6 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   57236:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   57238:	bf18      	it	ne
   5723a:	f06f 0015 	mvnne.w	r0, #21
   5723e:	bd08      	pop	{r3, pc}

00057240 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   57240:	4770      	bx	lr

00057242 <sys_clock_cycle_get_32>:
{
   57242:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   57244:	f7f2 f956 	bl	494f4 <z_nrf_rtc_timer_read>
}
   57248:	bd08      	pop	{r3, pc}

0005724a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   5724a:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
   5724c:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   57250:	6843      	ldr	r3, [r0, #4]
   57252:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   57254:	7a05      	ldrb	r5, [r0, #8]
   57256:	6844      	ldr	r4, [r0, #4]
   57258:	4435      	add	r5, r6
   5725a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   5725e:	42a3      	cmp	r3, r4
   57260:	d902      	bls.n	57268 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   57262:	f06f 0001 	mvn.w	r0, #1
}
   57266:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   57268:	795c      	ldrb	r4, [r3, #5]
   5726a:	428c      	cmp	r4, r1
   5726c:	d001      	beq.n	57272 <pinctrl_lookup_state+0x28>
		(*state)++;
   5726e:	3308      	adds	r3, #8
   57270:	e7ef      	b.n	57252 <pinctrl_lookup_state+0x8>
			return 0;
   57272:	2000      	movs	r0, #0
   57274:	e7f7      	b.n	57266 <pinctrl_lookup_state+0x1c>

00057276 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   57276:	f003 bd10 	b.w	5ac9a <z_impl_k_busy_wait>

0005727a <nrf_modem_os_errno_set>:
{
   5727a:	b510      	push	{r4, lr}
   5727c:	4604      	mov	r4, r0
	errno = err_code;
   5727e:	f7fe ff39 	bl	560f4 <__errno>
   57282:	6004      	str	r4, [r0, #0]
}
   57284:	bd10      	pop	{r4, pc}

00057286 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   57286:	f003 bab2 	b.w	5a7ee <k_is_in_isr>

0005728a <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   5728a:	f7fb b9e9 	b.w	52660 <z_impl_k_sem_give>

0005728e <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   5728e:	1c4b      	adds	r3, r1, #1
{
   57290:	b570      	push	{r4, r5, r6, lr}
   57292:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   57294:	d017      	beq.n	572c6 <nrf_modem_os_sem_take+0x38>
   57296:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   5729a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   5729e:	f240 30e7 	movw	r0, #999	; 0x3e7
   572a2:	2100      	movs	r1, #0
   572a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   572a8:	2300      	movs	r3, #0
   572aa:	fbc4 0106 	smlal	r0, r1, r4, r6
   572ae:	f7e9 fc2f 	bl	40b10 <__aeabi_uldivmod>
   572b2:	4602      	mov	r2, r0
   572b4:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   572b6:	4628      	mov	r0, r5
   572b8:	f7fb f9f8 	bl	526ac <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   572bc:	2800      	cmp	r0, #0
}
   572be:	bf18      	it	ne
   572c0:	f06f 000a 	mvnne.w	r0, #10
   572c4:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   572c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   572ca:	4613      	mov	r3, r2
   572cc:	e7f3      	b.n	572b6 <nrf_modem_os_sem_take+0x28>

000572ce <nrf91_socket_offload_setsockopt>:
{
   572ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   572d0:	460d      	mov	r5, r1
   572d2:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   572d4:	2300      	movs	r3, #0
{
   572d6:	b087      	sub	sp, #28
   572d8:	4611      	mov	r1, r2
	int sd = OBJ_TO_SD(obj);
   572da:	6807      	ldr	r7, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   572dc:	aa03      	add	r2, sp, #12
   572de:	4628      	mov	r0, r5
	struct nrf_timeval nrf_timeo = { 0 };
   572e0:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   572e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   572e6:	f7f2 fccf 	bl	49c88 <z_to_nrf_optname>
   572ea:	2800      	cmp	r0, #0
   572ec:	da07      	bge.n	572fe <nrf91_socket_offload_setsockopt+0x30>
		errno = ENOPROTOOPT;
   572ee:	f7fe ff01 	bl	560f4 <__errno>
   572f2:	236d      	movs	r3, #109	; 0x6d
   572f4:	6003      	str	r3, [r0, #0]
		return -1;
   572f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   572fa:	b007      	add	sp, #28
   572fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   572fe:	2d01      	cmp	r5, #1
   57300:	d112      	bne.n	57328 <nrf91_socket_offload_setsockopt+0x5a>
   57302:	f1a1 0214 	sub.w	r2, r1, #20
   57306:	2a01      	cmp	r2, #1
   57308:	d806      	bhi.n	57318 <nrf91_socket_offload_setsockopt+0x4a>
		if (optval != NULL) {
   5730a:	b12c      	cbz	r4, 57318 <nrf91_socket_offload_setsockopt+0x4a>
			nrf_optlen = sizeof(struct nrf_timeval);
   5730c:	2608      	movs	r6, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   5730e:	6823      	ldr	r3, [r4, #0]
   57310:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   57312:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   57314:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   57316:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   57318:	4623      	mov	r3, r4
   5731a:	4629      	mov	r1, r5
   5731c:	4638      	mov	r0, r7
   5731e:	9a03      	ldr	r2, [sp, #12]
   57320:	9600      	str	r6, [sp, #0]
   57322:	f7f9 fe77 	bl	51014 <nrf_setsockopt>
	return retval;
   57326:	e7e8      	b.n	572fa <nrf91_socket_offload_setsockopt+0x2c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   57328:	f5b5 7f8d 	cmp.w	r5, #282	; 0x11a
   5732c:	d1f4      	bne.n	57318 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   5732e:	290c      	cmp	r1, #12
   57330:	bf08      	it	eq
   57332:	2604      	moveq	r6, #4
   57334:	e7f0      	b.n	57318 <nrf91_socket_offload_setsockopt+0x4a>

00057336 <nrf91_socket_offload_getsockopt>:
{
   57336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   5733a:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   5733c:	2300      	movs	r3, #0
{
   5733e:	b086      	sub	sp, #24
   57340:	460f      	mov	r7, r1
   57342:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   57344:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   57348:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   5734a:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   5734c:	4629      	mov	r1, r5
   5734e:	4638      	mov	r0, r7
   57350:	eb0d 0203 	add.w	r2, sp, r3
{
   57354:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   57358:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   5735a:	f7f2 fc95 	bl	49c88 <z_to_nrf_optname>
   5735e:	2800      	cmp	r0, #0
   57360:	da09      	bge.n	57376 <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   57362:	f7fe fec7 	bl	560f4 <__errno>
   57366:	236d      	movs	r3, #109	; 0x6d
		return -1;
   57368:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		errno = ENOPROTOOPT;
   5736c:	6003      	str	r3, [r0, #0]
}
   5736e:	4630      	mov	r0, r6
   57370:	b006      	add	sp, #24
   57372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   57376:	2f01      	cmp	r7, #1
   57378:	d11c      	bne.n	573b4 <nrf91_socket_offload_getsockopt+0x7e>
   5737a:	f1a5 0314 	sub.w	r3, r5, #20
   5737e:	2b01      	cmp	r3, #1
   57380:	d818      	bhi.n	573b4 <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   57382:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   57384:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   57386:	4630      	mov	r0, r6
   57388:	9200      	str	r2, [sp, #0]
   5738a:	4639      	mov	r1, r7
   5738c:	9a02      	ldr	r2, [sp, #8]
   5738e:	f002 fef5 	bl	5a17c <nrf_getsockopt>
	if (retval == 0) {
   57392:	4606      	mov	r6, r0
   57394:	2800      	cmp	r0, #0
   57396:	d1ea      	bne.n	5736e <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   57398:	2f01      	cmp	r7, #1
   5739a:	d1e8      	bne.n	5736e <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   5739c:	2d04      	cmp	r5, #4
   5739e:	d10c      	bne.n	573ba <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   573a0:	6820      	ldr	r0, [r4, #0]
   573a2:	2800      	cmp	r0, #0
   573a4:	d0e3      	beq.n	5736e <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   573a6:	f7ff ff68 	bl	5727a <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   573aa:	f7fe fea3 	bl	560f4 <__errno>
   573ae:	6803      	ldr	r3, [r0, #0]
   573b0:	6023      	str	r3, [r4, #0]
   573b2:	e7dc      	b.n	5736e <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   573b4:	4642      	mov	r2, r8
   573b6:	4623      	mov	r3, r4
   573b8:	e7e5      	b.n	57386 <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   573ba:	3d14      	subs	r5, #20
   573bc:	2d01      	cmp	r5, #1
   573be:	d8d6      	bhi.n	5736e <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   573c0:	9b04      	ldr	r3, [sp, #16]
   573c2:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   573c6:	9b05      	ldr	r3, [sp, #20]
   573c8:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   573ca:	2310      	movs	r3, #16
   573cc:	f8c8 3000 	str.w	r3, [r8]
   573d0:	e7cd      	b.n	5736e <nrf91_socket_offload_getsockopt+0x38>

000573d2 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   573d2:	6800      	ldr	r0, [r0, #0]
   573d4:	f002 bd1a 	b.w	59e0c <nrf_listen>

000573d8 <nrf91_socket_offload_freeaddrinfo>:
{
   573d8:	b538      	push	{r3, r4, r5, lr}
   573da:	4604      	mov	r4, r0
	while (next != NULL) {
   573dc:	b904      	cbnz	r4, 573e0 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   573de:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   573e0:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   573e2:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   573e4:	f003 fcfa 	bl	5addc <k_free>
		k_free(this);
   573e8:	4620      	mov	r0, r4
   573ea:	f003 fcf7 	bl	5addc <k_free>
		next = next->ai_next;
   573ee:	462c      	mov	r4, r5
   573f0:	e7f4      	b.n	573dc <nrf91_socket_offload_freeaddrinfo+0x4>

000573f2 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   573f2:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   573f4:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   573f6:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   573f8:	4603      	mov	r3, r0
{
   573fa:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   573fc:	f823 2b04 	strh.w	r2, [r3], #4
   57400:	f101 0420 	add.w	r4, r1, #32
   57404:	f101 0210 	add.w	r2, r1, #16
   57408:	f852 5b04 	ldr.w	r5, [r2], #4
   5740c:	42a2      	cmp	r2, r4
   5740e:	f843 5b04 	str.w	r5, [r3], #4
   57412:	d1f9      	bne.n	57408 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   57414:	6a0b      	ldr	r3, [r1, #32]
   57416:	7503      	strb	r3, [r0, #20]
}
   57418:	bd30      	pop	{r4, r5, pc}

0005741a <z_to_nrf_ipv6>:
{
   5741a:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   5741c:	2124      	movs	r1, #36	; 0x24
{
   5741e:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   57420:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   57422:	8841      	ldrh	r1, [r0, #2]
{
   57424:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   57426:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   57428:	2102      	movs	r1, #2
   5742a:	1d04      	adds	r4, r0, #4
   5742c:	6059      	str	r1, [r3, #4]
   5742e:	f103 0610 	add.w	r6, r3, #16
   57432:	f100 0714 	add.w	r7, r0, #20
   57436:	4635      	mov	r5, r6
   57438:	6820      	ldr	r0, [r4, #0]
   5743a:	6861      	ldr	r1, [r4, #4]
   5743c:	3408      	adds	r4, #8
   5743e:	c503      	stmia	r5!, {r0, r1}
   57440:	42bc      	cmp	r4, r7
   57442:	462e      	mov	r6, r5
   57444:	d1f7      	bne.n	57436 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   57446:	7d12      	ldrb	r2, [r2, #20]
   57448:	621a      	str	r2, [r3, #32]
}
   5744a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0005744c <nrf91_socket_offload_sendto>:
{
   5744c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   57450:	4604      	mov	r4, r0
   57452:	b08c      	sub	sp, #48	; 0x30
   57454:	9812      	ldr	r0, [sp, #72]	; 0x48
   57456:	460d      	mov	r5, r1
   57458:	4616      	mov	r6, r2
   5745a:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   5745c:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   5745e:	b930      	cbnz	r0, 5746e <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   57460:	9013      	str	r0, [sp, #76]	; 0x4c
   57462:	4620      	mov	r0, r4
}
   57464:	b00c      	add	sp, #48	; 0x30
   57466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   5746a:	f7f9 bcd3 	b.w	50e14 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   5746e:	f8b0 c000 	ldrh.w	ip, [r0]
   57472:	f1bc 0f01 	cmp.w	ip, #1
   57476:	d112      	bne.n	5749e <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   57478:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   5747a:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   5747c:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   5747e:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   57482:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   57484:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   57486:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   5748a:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   5748e:	9501      	str	r5, [sp, #4]
   57490:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   57492:	4620      	mov	r0, r4
   57494:	f7f9 fcbe 	bl	50e14 <nrf_sendto>
}
   57498:	b00c      	add	sp, #48	; 0x30
   5749a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   5749e:	f1bc 0f02 	cmp.w	ip, #2
   574a2:	d10b      	bne.n	574bc <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   574a4:	f10d 080c 	add.w	r8, sp, #12
   574a8:	4641      	mov	r1, r8
   574aa:	f7ff ffb6 	bl	5741a <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   574ae:	2324      	movs	r3, #36	; 0x24
   574b0:	4632      	mov	r2, r6
   574b2:	e9cd 8300 	strd	r8, r3, [sp]
   574b6:	4629      	mov	r1, r5
   574b8:	463b      	mov	r3, r7
   574ba:	e7ea      	b.n	57492 <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   574bc:	f7fe fe1a 	bl	560f4 <__errno>
   574c0:	236a      	movs	r3, #106	; 0x6a
   574c2:	6003      	str	r3, [r0, #0]
		retval = -1;
   574c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return retval;
   574c8:	e7e6      	b.n	57498 <nrf91_socket_offload_sendto+0x4c>

000574ca <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   574ca:	2300      	movs	r3, #0
{
   574cc:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   574ce:	e9cd 3300 	strd	r3, r3, [sp]
   574d2:	f7ff ffbb 	bl	5744c <nrf91_socket_offload_sendto>
}
   574d6:	b003      	add	sp, #12
   574d8:	f85d fb04 	ldr.w	pc, [sp], #4

000574dc <nrf91_socket_offload_connect>:
{
   574dc:	4603      	mov	r3, r0
   574de:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   574e0:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   574e2:	880b      	ldrh	r3, [r1, #0]
{
   574e4:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   574e6:	2b01      	cmp	r3, #1
{
   574e8:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   574ea:	d10e      	bne.n	5750a <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   574ec:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   574ee:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   574f0:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   574f2:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   574f4:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   574f8:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   574fc:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   574fe:	4620      	mov	r0, r4
   57500:	a901      	add	r1, sp, #4
   57502:	f002 fb9f 	bl	59c44 <nrf_connect>
}
   57506:	b00a      	add	sp, #40	; 0x28
   57508:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   5750a:	2b02      	cmp	r3, #2
   5750c:	d104      	bne.n	57518 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   5750e:	a901      	add	r1, sp, #4
   57510:	f7ff ff83 	bl	5741a <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   57514:	2224      	movs	r2, #36	; 0x24
   57516:	e7f2      	b.n	574fe <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   57518:	4620      	mov	r0, r4
}
   5751a:	b00a      	add	sp, #40	; 0x28
   5751c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   57520:	f002 bb90 	b.w	59c44 <nrf_connect>

00057524 <nrf91_socket_offload_bind>:
{
   57524:	4603      	mov	r3, r0
   57526:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   57528:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   5752a:	880b      	ldrh	r3, [r1, #0]
{
   5752c:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   5752e:	2b01      	cmp	r3, #1
{
   57530:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   57532:	d10e      	bne.n	57552 <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   57534:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   57536:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   57538:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   5753a:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   5753c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   57540:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   57544:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   57546:	4620      	mov	r0, r4
   57548:	a901      	add	r1, sp, #4
   5754a:	f002 fc15 	bl	59d78 <nrf_bind>
}
   5754e:	b00a      	add	sp, #40	; 0x28
   57550:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   57552:	2b02      	cmp	r3, #2
   57554:	d104      	bne.n	57560 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   57556:	a901      	add	r1, sp, #4
   57558:	f7ff ff5f 	bl	5741a <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   5755c:	2224      	movs	r2, #36	; 0x24
   5755e:	e7f2      	b.n	57546 <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   57560:	f7fe fdc8 	bl	560f4 <__errno>
   57564:	236a      	movs	r3, #106	; 0x6a
   57566:	6003      	str	r3, [r0, #0]
		retval = -1;
   57568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return retval;
   5756c:	e7ef      	b.n	5754e <nrf91_socket_offload_bind+0x2a>

0005756e <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   5756e:	f7fa bf8d 	b.w	5248c <z_impl_k_mutex_lock>

00057572 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   57572:	f7fb b805 	b.w	52580 <z_impl_k_mutex_unlock>

00057576 <nrf91_socket_offload_recvfrom>:
{
   57576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5757a:	4605      	mov	r5, r0
	if (ctx->lock) {
   5757c:	6840      	ldr	r0, [r0, #4]
{
   5757e:	b08d      	sub	sp, #52	; 0x34
   57580:	460c      	mov	r4, r1
   57582:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   57586:	4691      	mov	r9, r2
   57588:	469a      	mov	sl, r3
	if (ctx->lock) {
   5758a:	b108      	cbz	r0, 57590 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   5758c:	f7ff fff1 	bl	57572 <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   57590:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   57594:	b106      	cbz	r6, 57598 <nrf91_socket_offload_recvfrom+0x22>
   57596:	b9af      	cbnz	r7, 575c4 <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   57598:	2300      	movs	r3, #0
   5759a:	4621      	mov	r1, r4
   5759c:	e9cd 3300 	strd	r3, r3, [sp]
   575a0:	464a      	mov	r2, r9
   575a2:	4653      	mov	r3, sl
   575a4:	4658      	mov	r0, fp
   575a6:	f002 fcfb 	bl	59fa0 <nrf_recvfrom>
   575aa:	4604      	mov	r4, r0
	if (ctx->lock) {
   575ac:	6868      	ldr	r0, [r5, #4]
   575ae:	b128      	cbz	r0, 575bc <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   575b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   575b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   575b8:	f7ff ffd9 	bl	5756e <k_mutex_lock.constprop.0.isra.0>
}
   575bc:	4620      	mov	r0, r4
   575be:	b00d      	add	sp, #52	; 0x34
   575c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   575c4:	f10d 080c 	add.w	r8, sp, #12
   575c8:	2224      	movs	r2, #36	; 0x24
   575ca:	2100      	movs	r1, #0
   575cc:	4640      	mov	r0, r8
   575ce:	f003 fc7e 	bl	5aece <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   575d2:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   575d4:	ab02      	add	r3, sp, #8
   575d6:	4621      	mov	r1, r4
   575d8:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   575dc:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   575de:	4653      	mov	r3, sl
   575e0:	464a      	mov	r2, r9
   575e2:	4658      	mov	r0, fp
   575e4:	f002 fcdc 	bl	59fa0 <nrf_recvfrom>
		if (retval < 0) {
   575e8:	1e04      	subs	r4, r0, #0
   575ea:	dbdf      	blt.n	575ac <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   575ec:	9b04      	ldr	r3, [sp, #16]
   575ee:	2b01      	cmp	r3, #1
   575f0:	d10b      	bne.n	5760a <nrf91_socket_offload_recvfrom+0x94>
   575f2:	9a02      	ldr	r2, [sp, #8]
   575f4:	2a10      	cmp	r2, #16
   575f6:	d1d9      	bne.n	575ac <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   575f8:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   575fa:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   575fc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   57600:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   57602:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   57604:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   57606:	603b      	str	r3, [r7, #0]
   57608:	e7d0      	b.n	575ac <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   5760a:	2b02      	cmp	r3, #2
   5760c:	d1ce      	bne.n	575ac <nrf91_socket_offload_recvfrom+0x36>
   5760e:	9b02      	ldr	r3, [sp, #8]
   57610:	2b24      	cmp	r3, #36	; 0x24
   57612:	d1cb      	bne.n	575ac <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   57614:	4641      	mov	r1, r8
   57616:	4630      	mov	r0, r6
   57618:	f7ff feeb 	bl	573f2 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   5761c:	2318      	movs	r3, #24
   5761e:	e7f2      	b.n	57606 <nrf91_socket_offload_recvfrom+0x90>

00057620 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   57620:	2300      	movs	r3, #0
{
   57622:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   57624:	e9cd 3300 	strd	r3, r3, [sp]
   57628:	f7ff ffa5 	bl	57576 <nrf91_socket_offload_recvfrom>
}
   5762c:	b003      	add	sp, #12
   5762e:	f85d fb04 	ldr.w	pc, [sp], #4

00057632 <nrf91_socket_offload_close>:
{
   57632:	b538      	push	{r3, r4, r5, lr}
   57634:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   57636:	6800      	ldr	r0, [r0, #0]
   57638:	f7f9 fbb6 	bl	50da8 <nrf_close>
	if (retval == 0) {
   5763c:	4604      	mov	r4, r0
   5763e:	b910      	cbnz	r0, 57646 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   57640:	4628      	mov	r0, r5
   57642:	f7f2 fd83 	bl	4a14c <release_ctx>
}
   57646:	4620      	mov	r0, r4
   57648:	bd38      	pop	{r3, r4, r5, pc}

0005764a <gpio_pin_configure_dt>:
{
   5764a:	4603      	mov	r3, r0
   5764c:	b470      	push	{r4, r5, r6}
   5764e:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   57650:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   57652:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   57654:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   57656:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   57658:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   5765a:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   5765c:	408c      	lsls	r4, r1
   5765e:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   57660:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   57664:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   57666:	bf14      	ite	ne
   57668:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   5766a:	43a3      	biceq	r3, r4
   5766c:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   5766e:	6833      	ldr	r3, [r6, #0]
}
   57670:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   57672:	4718      	bx	r3

00057674 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   57674:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57676:	ab0b      	add	r3, sp, #44	; 0x2c
   57678:	9305      	str	r3, [sp, #20]
   5767a:	9303      	str	r3, [sp, #12]
   5767c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   5767e:	2201      	movs	r2, #1
   57680:	9302      	str	r3, [sp, #8]
   57682:	2300      	movs	r3, #0
   57684:	4618      	mov	r0, r3
   57686:	e9cd 3300 	strd	r3, r3, [sp]
   5768a:	f7ed fd8d 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   5768e:	b007      	add	sp, #28
   57690:	f85d fb04 	ldr.w	pc, [sp], #4

00057694 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   57694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57696:	ab0b      	add	r3, sp, #44	; 0x2c
   57698:	9305      	str	r3, [sp, #20]
   5769a:	9303      	str	r3, [sp, #12]
   5769c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   5769e:	9302      	str	r3, [sp, #8]
   576a0:	2300      	movs	r3, #0
   576a2:	4618      	mov	r0, r3
   576a4:	e9cd 3300 	strd	r3, r3, [sp]
   576a8:	f7ed fd7e 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   576ac:	b007      	add	sp, #28
   576ae:	f85d fb04 	ldr.w	pc, [sp], #4

000576b2 <response_handler>:
	write_uart_string(response);
   576b2:	f7f3 b88d 	b.w	4a7d0 <write_uart_string>

000576b6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   576b6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   576b8:	ab0b      	add	r3, sp, #44	; 0x2c
   576ba:	9305      	str	r3, [sp, #20]
   576bc:	9303      	str	r3, [sp, #12]
   576be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   576c0:	9302      	str	r3, [sp, #8]
   576c2:	2300      	movs	r3, #0
   576c4:	4618      	mov	r0, r3
   576c6:	e9cd 3300 	strd	r3, r3, [sp]
   576ca:	f7ed fd6d 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   576ce:	b007      	add	sp, #28
   576d0:	f85d fb04 	ldr.w	pc, [sp], #4

000576d4 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   576d4:	280d      	cmp	r0, #13
   576d6:	d004      	beq.n	576e2 <is_lfcr+0xe>
   576d8:	f1a0 030a 	sub.w	r3, r0, #10
   576dc:	4258      	negs	r0, r3
   576de:	4158      	adcs	r0, r3
   576e0:	4770      	bx	lr
		return true;
   576e2:	2001      	movs	r0, #1
}
   576e4:	4770      	bx	lr

000576e6 <skip_command_prefix>:
{
   576e6:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   576e8:	6801      	ldr	r1, [r0, #0]
{
   576ea:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   576ec:	1c8b      	adds	r3, r1, #2
   576ee:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   576f0:	788c      	ldrb	r4, [r1, #2]
   576f2:	4620      	mov	r0, r4
   576f4:	f7ff ffee 	bl	576d4 <is_lfcr>
   576f8:	b910      	cbnz	r0, 57700 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   576fa:	b10c      	cbz	r4, 57700 <skip_command_prefix+0x1a>
	(*cmd)++;
   576fc:	3103      	adds	r1, #3
   576fe:	6011      	str	r1, [r2, #0]
}
   57700:	bd10      	pop	{r4, pc}

00057702 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   57702:	6813      	ldr	r3, [r2, #0]
   57704:	f7f3 bc2e 	b.w	4af64 <at_parser_max_params_from_str>

00057708 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   57708:	6803      	ldr	r3, [r0, #0]
   5770a:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   5770c:	bf86      	itte	hi
   5770e:	6840      	ldrhi	r0, [r0, #4]
   57710:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   57714:	2000      	movls	r0, #0
}
   57716:	4770      	bx	lr

00057718 <at_param_clear>:
{
   57718:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   5771a:	7803      	ldrb	r3, [r0, #0]
{
   5771c:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   5771e:	3b02      	subs	r3, #2
   57720:	2b01      	cmp	r3, #1
   57722:	d802      	bhi.n	5772a <at_param_clear+0x12>
		k_free(param->value.str_val);
   57724:	6880      	ldr	r0, [r0, #8]
   57726:	f003 fb59 	bl	5addc <k_free>
	param->value.int_val = 0;
   5772a:	2200      	movs	r2, #0
   5772c:	2300      	movs	r3, #0
   5772e:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   57732:	bd10      	pop	{r4, pc}

00057734 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   57734:	b538      	push	{r3, r4, r5, lr}
   57736:	460d      	mov	r5, r1
	if (list == NULL) {
   57738:	4604      	mov	r4, r0
   5773a:	b140      	cbz	r0, 5774e <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   5773c:	2110      	movs	r1, #16
   5773e:	4628      	mov	r0, r5
   57740:	f003 fb57 	bl	5adf2 <k_calloc>
   57744:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   57746:	b128      	cbz	r0, 57754 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   57748:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   5774a:	6025      	str	r5, [r4, #0]
}
   5774c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   5774e:	f06f 0015 	mvn.w	r0, #21
   57752:	e7fb      	b.n	5774c <at_params_list_init+0x18>
		return -ENOMEM;
   57754:	f06f 000b 	mvn.w	r0, #11
   57758:	e7f8      	b.n	5774c <at_params_list_init+0x18>

0005775a <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   5775a:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   5775c:	4604      	mov	r4, r0
   5775e:	b128      	cbz	r0, 5776c <at_params_list_clear+0x12>
   57760:	6843      	ldr	r3, [r0, #4]
   57762:	b11b      	cbz	r3, 5776c <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   57764:	2500      	movs	r5, #0
   57766:	6823      	ldr	r3, [r4, #0]
   57768:	429d      	cmp	r5, r3
   5776a:	d300      	bcc.n	5776e <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   5776c:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   5776e:	6866      	ldr	r6, [r4, #4]
   57770:	eb06 1605 	add.w	r6, r6, r5, lsl #4
   57774:	4630      	mov	r0, r6
   57776:	f7ff ffcf 	bl	57718 <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   5777a:	2210      	movs	r2, #16
   5777c:	2100      	movs	r1, #0
   5777e:	4630      	mov	r0, r6
   57780:	f003 fba5 	bl	5aece <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   57784:	3501      	adds	r5, #1
   57786:	e7ee      	b.n	57766 <at_params_list_clear+0xc>

00057788 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   57788:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   5778a:	4604      	mov	r4, r0
   5778c:	b148      	cbz	r0, 577a2 <at_params_list_free+0x1a>
   5778e:	6843      	ldr	r3, [r0, #4]
   57790:	b13b      	cbz	r3, 577a2 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   57792:	2500      	movs	r5, #0
	at_params_list_clear(list);
   57794:	f7ff ffe1 	bl	5775a <at_params_list_clear>
	k_free(list->params);
   57798:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   5779a:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   5779c:	f003 fb1e 	bl	5addc <k_free>
	list->params = NULL;
   577a0:	6065      	str	r5, [r4, #4]
}
   577a2:	bd38      	pop	{r3, r4, r5, pc}

000577a4 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   577a4:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   577a6:	b178      	cbz	r0, 577c8 <at_params_empty_put+0x24>
   577a8:	6843      	ldr	r3, [r0, #4]
   577aa:	b16b      	cbz	r3, 577c8 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   577ac:	f7ff ffac 	bl	57708 <at_params_get>

	if (param == NULL) {
   577b0:	4604      	mov	r4, r0
   577b2:	b148      	cbz	r0, 577c8 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   577b4:	f7ff ffb0 	bl	57718 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   577b8:	2304      	movs	r3, #4
	param->value.int_val = 0;
   577ba:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   577bc:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   577be:	2300      	movs	r3, #0

	return 0;
   577c0:	2000      	movs	r0, #0
	param->value.int_val = 0;
   577c2:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   577c6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   577c8:	f06f 0015 	mvn.w	r0, #21
   577cc:	e7fb      	b.n	577c6 <at_params_empty_put+0x22>

000577ce <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   577ce:	b570      	push	{r4, r5, r6, lr}
   577d0:	4616      	mov	r6, r2
   577d2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   577d4:	b168      	cbz	r0, 577f2 <at_params_int_put+0x24>
   577d6:	6843      	ldr	r3, [r0, #4]
   577d8:	b15b      	cbz	r3, 577f2 <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   577da:	f7ff ff95 	bl	57708 <at_params_get>

	if (param == NULL) {
   577de:	4604      	mov	r4, r0
   577e0:	b138      	cbz	r0, 577f2 <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   577e2:	f7ff ff99 	bl	57718 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   577e6:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   577e8:	2000      	movs	r0, #0
	param->value.int_val = value;
   577ea:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   577ee:	7023      	strb	r3, [r4, #0]
}
   577f0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   577f2:	f06f 0015 	mvn.w	r0, #21
   577f6:	e7fb      	b.n	577f0 <at_params_int_put+0x22>

000577f8 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   577f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   577fa:	4617      	mov	r7, r2
   577fc:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   577fe:	b1c0      	cbz	r0, 57832 <at_params_string_put+0x3a>
   57800:	6843      	ldr	r3, [r0, #4]
   57802:	b1b3      	cbz	r3, 57832 <at_params_string_put+0x3a>
   57804:	b1aa      	cbz	r2, 57832 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   57806:	f7ff ff7f 	bl	57708 <at_params_get>

	if (param == NULL) {
   5780a:	4604      	mov	r4, r0
   5780c:	b188      	cbz	r0, 57832 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   5780e:	1c68      	adds	r0, r5, #1
   57810:	f003 faeb 	bl	5adea <k_malloc>

	if (param_value == NULL) {
   57814:	4606      	mov	r6, r0
   57816:	b178      	cbz	r0, 57838 <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   57818:	462a      	mov	r2, r5
   5781a:	4639      	mov	r1, r7
   5781c:	f003 fb1d 	bl	5ae5a <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   57820:	4620      	mov	r0, r4
   57822:	f7ff ff79 	bl	57718 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   57826:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   57828:	2000      	movs	r0, #0
	param->size = str_len;
   5782a:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   5782c:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   5782e:	60a6      	str	r6, [r4, #8]
}
   57830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   57832:	f06f 0015 	mvn.w	r0, #21
   57836:	e7fb      	b.n	57830 <at_params_string_put+0x38>
		return -ENOMEM;
   57838:	f06f 000b 	mvn.w	r0, #11
   5783c:	e7f8      	b.n	57830 <at_params_string_put+0x38>

0005783e <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   5783e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   57840:	4617      	mov	r7, r2
   57842:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   57844:	b1c0      	cbz	r0, 57878 <at_params_array_put+0x3a>
   57846:	6843      	ldr	r3, [r0, #4]
   57848:	b1b3      	cbz	r3, 57878 <at_params_array_put+0x3a>
   5784a:	b1aa      	cbz	r2, 57878 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   5784c:	f7ff ff5c 	bl	57708 <at_params_get>

	if (param == NULL) {
   57850:	4604      	mov	r4, r0
   57852:	b188      	cbz	r0, 57878 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   57854:	4628      	mov	r0, r5
   57856:	f003 fac8 	bl	5adea <k_malloc>

	if (param_value == NULL) {
   5785a:	4606      	mov	r6, r0
   5785c:	b178      	cbz	r0, 5787e <at_params_array_put+0x40>
   5785e:	462a      	mov	r2, r5
   57860:	4639      	mov	r1, r7
   57862:	f003 fafa 	bl	5ae5a <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   57866:	4620      	mov	r0, r4
   57868:	f7ff ff56 	bl	57718 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   5786c:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   5786e:	2000      	movs	r0, #0
	param->size = array_len;
   57870:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   57872:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   57874:	60a6      	str	r6, [r4, #8]
}
   57876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   57878:	f06f 0015 	mvn.w	r0, #21
   5787c:	e7fb      	b.n	57876 <at_params_array_put+0x38>
		return -ENOMEM;
   5787e:	f06f 000b 	mvn.w	r0, #11
   57882:	e7f8      	b.n	57876 <at_params_array_put+0x38>

00057884 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   57884:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   57886:	b1b0      	cbz	r0, 578b6 <at_params_short_get+0x32>
   57888:	6843      	ldr	r3, [r0, #4]
   5788a:	b1a3      	cbz	r3, 578b6 <at_params_short_get+0x32>
   5788c:	b19a      	cbz	r2, 578b6 <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   5788e:	f7ff ff3b 	bl	57708 <at_params_get>

	if (param == NULL) {
   57892:	b180      	cbz	r0, 578b6 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   57894:	7803      	ldrb	r3, [r0, #0]
   57896:	2b01      	cmp	r3, #1
   57898:	d10d      	bne.n	578b6 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   5789a:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   5789e:	f513 4000 	adds.w	r0, r3, #32768	; 0x8000
   578a2:	f141 0100 	adc.w	r1, r1, #0
   578a6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   578aa:	f171 0100 	sbcs.w	r1, r1, #0
   578ae:	d202      	bcs.n	578b6 <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   578b0:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   578b2:	8013      	strh	r3, [r2, #0]
}
   578b4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   578b6:	f06f 0015 	mvn.w	r0, #21
   578ba:	e7fb      	b.n	578b4 <at_params_short_get+0x30>

000578bc <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   578bc:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   578be:	b190      	cbz	r0, 578e6 <at_params_unsigned_short_get+0x2a>
   578c0:	6843      	ldr	r3, [r0, #4]
   578c2:	b183      	cbz	r3, 578e6 <at_params_unsigned_short_get+0x2a>
   578c4:	b17a      	cbz	r2, 578e6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   578c6:	f7ff ff1f 	bl	57708 <at_params_get>

	if (param == NULL) {
   578ca:	b160      	cbz	r0, 578e6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   578cc:	7803      	ldrb	r3, [r0, #0]
   578ce:	2b01      	cmp	r3, #1
   578d0:	d109      	bne.n	578e6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   578d2:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   578d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   578da:	f171 0100 	sbcs.w	r1, r1, #0
   578de:	d202      	bcs.n	578e6 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   578e0:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   578e2:	8013      	strh	r3, [r2, #0]
}
   578e4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   578e6:	f06f 0015 	mvn.w	r0, #21
   578ea:	e7fb      	b.n	578e4 <at_params_unsigned_short_get+0x28>

000578ec <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   578ec:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   578ee:	b190      	cbz	r0, 57916 <at_params_int_get+0x2a>
   578f0:	6843      	ldr	r3, [r0, #4]
   578f2:	b183      	cbz	r3, 57916 <at_params_int_get+0x2a>
   578f4:	b17a      	cbz	r2, 57916 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   578f6:	f7ff ff07 	bl	57708 <at_params_get>

	if (param == NULL) {
   578fa:	b160      	cbz	r0, 57916 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   578fc:	7803      	ldrb	r3, [r0, #0]
   578fe:	2b01      	cmp	r3, #1
   57900:	d109      	bne.n	57916 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   57902:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   57906:	f113 4000 	adds.w	r0, r3, #2147483648	; 0x80000000
   5790a:	f141 0100 	adc.w	r1, r1, #0
   5790e:	b911      	cbnz	r1, 57916 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   57910:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   57912:	6013      	str	r3, [r2, #0]
}
   57914:	bd08      	pop	{r3, pc}
		return -EINVAL;
   57916:	f06f 0015 	mvn.w	r0, #21
   5791a:	e7fb      	b.n	57914 <at_params_int_get+0x28>

0005791c <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   5791c:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   5791e:	b170      	cbz	r0, 5793e <at_params_int64_get+0x22>
   57920:	6843      	ldr	r3, [r0, #4]
   57922:	b163      	cbz	r3, 5793e <at_params_int64_get+0x22>
   57924:	b15a      	cbz	r2, 5793e <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   57926:	f7ff feef 	bl	57708 <at_params_get>

	if (param == NULL) {
   5792a:	b140      	cbz	r0, 5793e <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   5792c:	7803      	ldrb	r3, [r0, #0]
   5792e:	2b01      	cmp	r3, #1
   57930:	d105      	bne.n	5793e <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   57932:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   57936:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   5793a:	2000      	movs	r0, #0
}
   5793c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   5793e:	f06f 0015 	mvn.w	r0, #21
   57942:	e7fb      	b.n	5793c <at_params_int64_get+0x20>

00057944 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   57944:	b570      	push	{r4, r5, r6, lr}
   57946:	4615      	mov	r5, r2
   57948:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   5794a:	b1a8      	cbz	r0, 57978 <at_params_string_get+0x34>
   5794c:	6843      	ldr	r3, [r0, #4]
   5794e:	b19b      	cbz	r3, 57978 <at_params_string_get+0x34>
   57950:	b192      	cbz	r2, 57978 <at_params_string_get+0x34>
	    value == NULL || len == NULL) {
   57952:	b18c      	cbz	r4, 57978 <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   57954:	f7ff fed8 	bl	57708 <at_params_get>

	if (param == NULL) {
   57958:	b170      	cbz	r0, 57978 <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   5795a:	7803      	ldrb	r3, [r0, #0]
   5795c:	2b02      	cmp	r3, #2
   5795e:	d10b      	bne.n	57978 <at_params_string_get+0x34>
		return param->size;
   57960:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   57962:	6823      	ldr	r3, [r4, #0]
   57964:	42b3      	cmp	r3, r6
   57966:	d30a      	bcc.n	5797e <at_params_string_get+0x3a>
   57968:	6881      	ldr	r1, [r0, #8]
   5796a:	4632      	mov	r2, r6
   5796c:	4628      	mov	r0, r5
   5796e:	f003 fa74 	bl	5ae5a <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   57972:	2000      	movs	r0, #0
	*len = param_len;
   57974:	6026      	str	r6, [r4, #0]
}
   57976:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   57978:	f06f 0015 	mvn.w	r0, #21
   5797c:	e7fb      	b.n	57976 <at_params_string_get+0x32>
		return -ENOMEM;
   5797e:	f06f 000b 	mvn.w	r0, #11
   57982:	e7f8      	b.n	57976 <at_params_string_get+0x32>

00057984 <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   57984:	4602      	mov	r2, r0
{
   57986:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   57988:	b170      	cbz	r0, 579a8 <at_params_valid_count_get+0x24>
   5798a:	6840      	ldr	r0, [r0, #4]
   5798c:	b160      	cbz	r0, 579a8 <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   5798e:	6811      	ldr	r1, [r2, #0]
   57990:	b119      	cbz	r1, 5799a <at_params_valid_count_get+0x16>
   57992:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   57994:	b108      	cbz	r0, 5799a <at_params_valid_count_get+0x16>
   57996:	7803      	ldrb	r3, [r0, #0]
   57998:	b90b      	cbnz	r3, 5799e <at_params_valid_count_get+0x1a>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   5799a:	4608      	mov	r0, r1
   5799c:	bd08      	pop	{r3, pc}
		param = at_params_get(list, valid_i);
   5799e:	4610      	mov	r0, r2
		valid_i += 1;
   579a0:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   579a2:	f7ff feb1 	bl	57708 <at_params_get>
   579a6:	e7f5      	b.n	57994 <at_params_valid_count_get+0x10>
		return -EINVAL;
   579a8:	f06f 0115 	mvn.w	r1, #21
   579ac:	e7f5      	b.n	5799a <at_params_valid_count_get+0x16>

000579ae <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   579ae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   579b0:	ab0b      	add	r3, sp, #44	; 0x2c
   579b2:	9305      	str	r3, [sp, #20]
   579b4:	9303      	str	r3, [sp, #12]
   579b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   579b8:	9302      	str	r3, [sp, #8]
   579ba:	2300      	movs	r3, #0
   579bc:	4618      	mov	r0, r3
   579be:	e9cd 3300 	strd	r3, r3, [sp]
   579c2:	f7ed fbf1 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   579c6:	b007      	add	sp, #28
   579c8:	f85d fb04 	ldr.w	pc, [sp], #4

000579cc <lte_lc_init_and_connect_async>:
{
   579cc:	b510      	push	{r4, lr}
   579ce:	4604      	mov	r4, r0
	err = init_and_config();
   579d0:	f7f4 f884 	bl	4badc <init_and_config>
	if (err) {
   579d4:	b920      	cbnz	r0, 579e0 <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   579d6:	4620      	mov	r0, r4
}
   579d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   579dc:	f7f4 ba24 	b.w	4be28 <lte_lc_connect_async>
}
   579e0:	f06f 000d 	mvn.w	r0, #13
   579e4:	bd10      	pop	{r4, pc}

000579e6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   579e6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   579e8:	ab0b      	add	r3, sp, #44	; 0x2c
   579ea:	9305      	str	r3, [sp, #20]
   579ec:	9303      	str	r3, [sp, #12]
   579ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   579f0:	9302      	str	r3, [sp, #8]
   579f2:	2300      	movs	r3, #0
   579f4:	4618      	mov	r0, r3
   579f6:	e9cd 3300 	strd	r3, r3, [sp]
   579fa:	f7ed fbd5 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   579fe:	b007      	add	sp, #28
   57a00:	f85d fb04 	ldr.w	pc, [sp], #4

00057a04 <string_to_int>:
{
   57a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   57a06:	460c      	mov	r4, r1
   57a08:	4605      	mov	r5, r0
   57a0a:	4616      	mov	r6, r2
	errno = 0;
   57a0c:	f7fe fb72 	bl	560f4 <__errno>
   57a10:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   57a12:	4622      	mov	r2, r4
	errno = 0;
   57a14:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   57a16:	a901      	add	r1, sp, #4
   57a18:	4628      	mov	r0, r5
   57a1a:	f7fc f94f 	bl	53cbc <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   57a1e:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   57a20:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   57a22:	42ab      	cmp	r3, r5
   57a24:	d103      	bne.n	57a2e <string_to_int+0x2a>
		return -ENODATA;
   57a26:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   57a2a:	b002      	add	sp, #8
   57a2c:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   57a2e:	781b      	ldrb	r3, [r3, #0]
   57a30:	2b00      	cmp	r3, #0
   57a32:	d1f8      	bne.n	57a26 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   57a34:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   57a38:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   57a3a:	3303      	adds	r3, #3
   57a3c:	d802      	bhi.n	57a44 <string_to_int+0x40>
	return 0;
   57a3e:	2000      	movs	r0, #0
	*output = temp;
   57a40:	6034      	str	r4, [r6, #0]
	return 0;
   57a42:	e7f2      	b.n	57a2a <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   57a44:	f7fe fb56 	bl	560f4 <__errno>
   57a48:	6803      	ldr	r3, [r0, #0]
   57a4a:	2b22      	cmp	r3, #34	; 0x22
   57a4c:	d1f7      	bne.n	57a3e <string_to_int+0x3a>
   57a4e:	e7ea      	b.n	57a26 <string_to_int+0x22>

00057a50 <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   57a50:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   57a52:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   57a54:	b087      	sub	sp, #28
   57a56:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   57a58:	ab01      	add	r3, sp, #4
   57a5a:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   57a5c:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   57a5e:	f7ff ff71 	bl	57944 <at_params_string_get>
	if (err) {
   57a62:	b968      	cbnz	r0, 57a80 <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   57a64:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   57a66:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   57a68:	3318      	adds	r3, #24
   57a6a:	446b      	add	r3, sp
   57a6c:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   57a70:	4629      	mov	r1, r5
   57a72:	a802      	add	r0, sp, #8
   57a74:	f7ff ffc6 	bl	57a04 <string_to_int>
		return -ENODATA;
   57a78:	2800      	cmp	r0, #0
   57a7a:	bf18      	it	ne
   57a7c:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   57a80:	b007      	add	sp, #28
   57a82:	bd30      	pop	{r4, r5, pc}

00057a84 <on_modem_init>:
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   57a84:	4770      	bx	lr

00057a86 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   57a86:	f7f4 b9f1 	b.w	4be6c <lte_lc_deinit>

00057a8a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   57a8a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57a8c:	ab0b      	add	r3, sp, #44	; 0x2c
   57a8e:	9305      	str	r3, [sp, #20]
   57a90:	9303      	str	r3, [sp, #12]
   57a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   57a94:	9302      	str	r3, [sp, #8]
   57a96:	2300      	movs	r3, #0
   57a98:	4618      	mov	r0, r3
   57a9a:	e9cd 3300 	strd	r3, r3, [sp]
   57a9e:	f7ed fb83 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   57aa2:	b007      	add	sp, #28
   57aa4:	f85d fb04 	ldr.w	pc, [sp], #4

00057aa8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   57aa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57aaa:	ab0b      	add	r3, sp, #44	; 0x2c
   57aac:	9305      	str	r3, [sp, #20]
   57aae:	9303      	str	r3, [sp, #12]
   57ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   57ab2:	9302      	str	r3, [sp, #8]
   57ab4:	2300      	movs	r3, #0
   57ab6:	4618      	mov	r0, r3
   57ab8:	e9cd 3300 	strd	r3, r3, [sp]
   57abc:	f7ed fb74 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   57ac0:	b007      	add	sp, #28
   57ac2:	f85d fb04 	ldr.w	pc, [sp], #4

00057ac6 <location_service_get_certificate>:
static char recv_buf[CONFIG_MULTICELL_LOCATION_RECV_BUF_SIZE];

const char *location_service_get_certificate(enum multicell_service service)
{
#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	if (service == MULTICELL_SERVICE_NRF_CLOUD) {
   57ac6:	2801      	cmp	r0, #1
   57ac8:	d101      	bne.n	57ace <location_service_get_certificate+0x8>
		return location_service_get_certificate_nrf_cloud();
   57aca:	f7f5 bb47 	b.w	4d15c <location_service_get_certificate_nrf_cloud>
	if (service == MULTICELL_SERVICE_HERE) {
		return location_service_get_certificate_here();
	}
#endif
	return NULL;
}
   57ace:	2000      	movs	r0, #0
   57ad0:	4770      	bx	lr

00057ad2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   57ad2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57ad4:	ab0b      	add	r3, sp, #44	; 0x2c
   57ad6:	9305      	str	r3, [sp, #20]
   57ad8:	9303      	str	r3, [sp, #12]
   57ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   57adc:	2201      	movs	r2, #1
   57ade:	9302      	str	r3, [sp, #8]
   57ae0:	2300      	movs	r3, #0
   57ae2:	4618      	mov	r0, r3
   57ae4:	e9cd 3300 	strd	r3, r3, [sp]
   57ae8:	f7ed fb5e 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   57aec:	b007      	add	sp, #28
   57aee:	f85d fb04 	ldr.w	pc, [sp], #4

00057af2 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   57af2:	2000      	movs	r0, #0
   57af4:	4770      	bx	lr

00057af6 <psa_crypto_init>:
}
   57af6:	2000      	movs	r0, #0
   57af8:	4770      	bx	lr

00057afa <ld_dword>:
}
   57afa:	6800      	ldr	r0, [r0, #0]
   57afc:	4770      	bx	lr

00057afe <ld_qword>:
{
   57afe:	4603      	mov	r3, r0
}
   57b00:	6800      	ldr	r0, [r0, #0]
   57b02:	6859      	ldr	r1, [r3, #4]
   57b04:	4770      	bx	lr

00057b06 <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
   57b06:	0a0b      	lsrs	r3, r1, #8
   57b08:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   57b0a:	7043      	strb	r3, [r0, #1]
   57b0c:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
   57b0e:	0e09      	lsrs	r1, r1, #24
   57b10:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
   57b12:	70c1      	strb	r1, [r0, #3]
}
   57b14:	4770      	bx	lr

00057b16 <st_qword>:
	*ptr++ = (BYTE)val; val >>= 8;
   57b16:	0a11      	lsrs	r1, r2, #8
   57b18:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   57b1a:	7041      	strb	r1, [r0, #1]
   57b1c:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
   57b1e:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
   57b20:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   57b22:	0a1a      	lsrs	r2, r3, #8
   57b24:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   57b26:	7142      	strb	r2, [r0, #5]
   57b28:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
   57b2a:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
   57b2c:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
   57b2e:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
   57b30:	71c3      	strb	r3, [r0, #7]
}
   57b32:	4770      	bx	lr

00057b34 <clst2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   57b34:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
   57b36:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   57b38:	3b02      	subs	r3, #2
   57b3a:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
   57b3c:	bf83      	ittte	hi
   57b3e:	8943      	ldrhhi	r3, [r0, #10]
   57b40:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
   57b42:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   57b46:	2000      	movls	r0, #0
}
   57b48:	4770      	bx	lr

00057b4a <sum_sfn>:
{
   57b4a:	4603      	mov	r3, r0
   57b4c:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
   57b50:	2000      	movs	r0, #0
		sum = (sum >> 1) + (sum << 7) + *dir++;
   57b52:	01c2      	lsls	r2, r0, #7
   57b54:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
   57b58:	f813 0b01 	ldrb.w	r0, [r3], #1
   57b5c:	fa50 f282 	uxtab	r2, r0, r2
	} while (--n);
   57b60:	428b      	cmp	r3, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
   57b62:	b2d0      	uxtb	r0, r2
	} while (--n);
   57b64:	d1f5      	bne.n	57b52 <sum_sfn+0x8>
}
   57b66:	4770      	bx	lr

00057b68 <xdir_sum>:
{
   57b68:	b510      	push	{r4, lr}
   57b6a:	4604      	mov	r4, r0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
   57b6c:	7841      	ldrb	r1, [r0, #1]
	for (i = sum = 0; i < szblk; i++) {
   57b6e:	2000      	movs	r0, #0
   57b70:	4602      	mov	r2, r0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
   57b72:	3101      	adds	r1, #1
   57b74:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
   57b76:	2a02      	cmp	r2, #2
   57b78:	bf08      	it	eq
   57b7a:	2204      	moveq	r2, #4
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
   57b7c:	5ca3      	ldrb	r3, [r4, r2]
	for (i = sum = 0; i < szblk; i++) {
   57b7e:	3201      	adds	r2, #1
   57b80:	eb03 33c0 	add.w	r3, r3, r0, lsl #15
   57b84:	b29b      	uxth	r3, r3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
   57b86:	eb03 0350 	add.w	r3, r3, r0, lsr #1
	for (i = sum = 0; i < szblk; i++) {
   57b8a:	4291      	cmp	r1, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
   57b8c:	b298      	uxth	r0, r3
	for (i = sum = 0; i < szblk; i++) {
   57b8e:	d8f2      	bhi.n	57b76 <xdir_sum+0xe>
}
   57b90:	bd10      	pop	{r4, pc}

00057b92 <init_alloc_info>:
{
   57b92:	b510      	push	{r4, lr}
   57b94:	4604      	mov	r4, r0
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
   57b96:	6900      	ldr	r0, [r0, #16]
{
   57b98:	460a      	mov	r2, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
   57b9a:	3034      	adds	r0, #52	; 0x34
   57b9c:	f7ff ffad 	bl	57afa <ld_dword>
   57ba0:	6088      	str	r0, [r1, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   57ba2:	6920      	ldr	r0, [r4, #16]
   57ba4:	3038      	adds	r0, #56	; 0x38
   57ba6:	f7ff ffaa 	bl	57afe <ld_qword>
   57baa:	e9c2 0104 	strd	r0, r1, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
   57bae:	6923      	ldr	r3, [r4, #16]
   57bb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   57bb4:	f003 0302 	and.w	r3, r3, #2
   57bb8:	71d3      	strb	r3, [r2, #7]
	obj->n_frag = 0;										/* No last fragment info */
   57bba:	2300      	movs	r3, #0
   57bbc:	61d3      	str	r3, [r2, #28]
}
   57bbe:	bd10      	pop	{r4, pc}

00057bc0 <validate>:
{
   57bc0:	b538      	push	{r3, r4, r5, lr}
   57bc2:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   57bc4:	4604      	mov	r4, r0
   57bc6:	b918      	cbnz	r0, 57bd0 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
   57bc8:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   57bca:	2300      	movs	r3, #0
   57bcc:	602b      	str	r3, [r5, #0]
}
   57bce:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   57bd0:	6803      	ldr	r3, [r0, #0]
   57bd2:	2b00      	cmp	r3, #0
   57bd4:	d0f8      	beq.n	57bc8 <validate+0x8>
   57bd6:	781a      	ldrb	r2, [r3, #0]
   57bd8:	2a00      	cmp	r2, #0
   57bda:	d0f5      	beq.n	57bc8 <validate+0x8>
   57bdc:	8881      	ldrh	r1, [r0, #4]
   57bde:	88da      	ldrh	r2, [r3, #6]
   57be0:	4291      	cmp	r1, r2
   57be2:	d1f1      	bne.n	57bc8 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
   57be4:	7858      	ldrb	r0, [r3, #1]
   57be6:	f7f7 fa4f 	bl	4f088 <disk_status>
   57bea:	f010 0001 	ands.w	r0, r0, #1
   57bee:	d1eb      	bne.n	57bc8 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   57bf0:	6823      	ldr	r3, [r4, #0]
   57bf2:	e7eb      	b.n	57bcc <validate+0xc>

00057bf4 <sync_window>:
{
   57bf4:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
   57bf6:	78c3      	ldrb	r3, [r0, #3]
{
   57bf8:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
   57bfa:	b1c3      	cbz	r3, 57c2e <sync_window+0x3a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
   57bfc:	f100 053c 	add.w	r5, r0, #60	; 0x3c
   57c00:	6b82      	ldr	r2, [r0, #56]	; 0x38
   57c02:	2301      	movs	r3, #1
   57c04:	4629      	mov	r1, r5
   57c06:	7840      	ldrb	r0, [r0, #1]
   57c08:	f7f7 fa62 	bl	4f0d0 <disk_write>
   57c0c:	b988      	cbnz	r0, 57c32 <sync_window+0x3e>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   57c0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   57c10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   57c12:	6a22      	ldr	r2, [r4, #32]
   57c14:	1acb      	subs	r3, r1, r3
   57c16:	4293      	cmp	r3, r2
			fs->wflag = 0;	/* Clear window dirty flag */
   57c18:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   57c1a:	d208      	bcs.n	57c2e <sync_window+0x3a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
   57c1c:	78a3      	ldrb	r3, [r4, #2]
   57c1e:	2b02      	cmp	r3, #2
   57c20:	d105      	bne.n	57c2e <sync_window+0x3a>
   57c22:	440a      	add	r2, r1
   57c24:	2301      	movs	r3, #1
   57c26:	4629      	mov	r1, r5
   57c28:	7860      	ldrb	r0, [r4, #1]
   57c2a:	f7f7 fa51 	bl	4f0d0 <disk_write>
	FRESULT res = FR_OK;
   57c2e:	2000      	movs	r0, #0
}
   57c30:	bd38      	pop	{r3, r4, r5, pc}
			res = FR_DISK_ERR;
   57c32:	2001      	movs	r0, #1
   57c34:	e7fc      	b.n	57c30 <sync_window+0x3c>

00057c36 <put_utf>:
{
   57c36:	b538      	push	{r3, r4, r5, lr}
   57c38:	460d      	mov	r5, r1
	wc = ff_uni2oem(chr, CODEPAGE);
   57c3a:	f240 11b5 	movw	r1, #437	; 0x1b5
{
   57c3e:	4614      	mov	r4, r2
	wc = ff_uni2oem(chr, CODEPAGE);
   57c40:	f7f7 fa80 	bl	4f144 <ff_uni2oem>
	if (wc >= 0x100) {	/* Is this a DBC? */
   57c44:	28ff      	cmp	r0, #255	; 0xff
   57c46:	d907      	bls.n	57c58 <put_utf+0x22>
		if (szb < 2) return 0;
   57c48:	2c01      	cmp	r4, #1
   57c4a:	d90b      	bls.n	57c64 <put_utf+0x2e>
		return 2;
   57c4c:	2402      	movs	r4, #2
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
   57c4e:	0a03      	lsrs	r3, r0, #8
   57c50:	702b      	strb	r3, [r5, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
   57c52:	7068      	strb	r0, [r5, #1]
}
   57c54:	4620      	mov	r0, r4
   57c56:	bd38      	pop	{r3, r4, r5, pc}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
   57c58:	b130      	cbz	r0, 57c68 <put_utf+0x32>
   57c5a:	2c00      	cmp	r4, #0
   57c5c:	d0fa      	beq.n	57c54 <put_utf+0x1e>
	return 1;
   57c5e:	2401      	movs	r4, #1
	*buf++ = (TCHAR)wc;					/* Store the character */
   57c60:	7028      	strb	r0, [r5, #0]
	return 1;
   57c62:	e7f7      	b.n	57c54 <put_utf+0x1e>
		if (szb < 2) return 0;
   57c64:	2400      	movs	r4, #0
   57c66:	e7f5      	b.n	57c54 <put_utf+0x1e>
   57c68:	4604      	mov	r4, r0
   57c6a:	e7f3      	b.n	57c54 <put_utf+0x1e>

00057c6c <get_fileinfo>:
{
   57c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	fno->fname[0] = 0;			/* Invaidate file info */
   57c70:	2600      	movs	r6, #0
	FATFS *fs = dp->obj.fs;
   57c72:	6807      	ldr	r7, [r0, #0]
	fno->fname[0] = 0;			/* Invaidate file info */
   57c74:	768e      	strb	r6, [r1, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   57c76:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   57c78:	4605      	mov	r5, r0
   57c7a:	460c      	mov	r4, r1
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   57c7c:	2b00      	cmp	r3, #0
   57c7e:	d049      	beq.n	57d14 <get_fileinfo+0xa8>
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
   57c80:	783b      	ldrb	r3, [r7, #0]
   57c82:	2b04      	cmp	r3, #4
   57c84:	d14b      	bne.n	57d1e <get_fileinfo+0xb2>
		UINT nc = 0;
   57c86:	4635      	mov	r5, r6
		hs = 0;
   57c88:	4633      	mov	r3, r6
		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
   57c8a:	f04f 0840 	mov.w	r8, #64	; 0x40
   57c8e:	e020      	b.n	57cd2 <get_fileinfo+0x66>
			if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
   57c90:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
   57c94:	d224      	bcs.n	57ce0 <get_fileinfo+0x74>
			if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
   57c96:	f018 0f1f 	tst.w	r8, #31
   57c9a:	bf08      	it	eq
   57c9c:	f108 0802 	addeq.w	r8, r8, #2
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
   57ca0:	f832 0008 	ldrh.w	r0, [r2, r8]
   57ca4:	3501      	adds	r5, #1
   57ca6:	f108 0802 	add.w	r8, r8, #2
			if (hs == 0 && IsSurrogate(wc)) {		/* Is it a surrogate? */
   57caa:	b92b      	cbnz	r3, 57cb8 <get_fileinfo+0x4c>
   57cac:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
   57cb0:	b292      	uxth	r2, r2
   57cb2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   57cb6:	d30b      	bcc.n	57cd0 <get_fileinfo+0x64>
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
   57cb8:	f106 011a 	add.w	r1, r6, #26
   57cbc:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
   57cc0:	4421      	add	r1, r4
   57cc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   57cc6:	f7ff ffb6 	bl	57c36 <put_utf>
			if (nw == 0) { di = 0; break; }			/* Buffer overflow or wrong char? */
   57cca:	b148      	cbz	r0, 57ce0 <get_fileinfo+0x74>
			di += nw;
   57ccc:	4406      	add	r6, r0
			hs = 0;
   57cce:	2000      	movs	r0, #0
   57cd0:	4603      	mov	r3, r0
		while (nc < fs->dirbuf[XDIR_NumName]) {
   57cd2:	693a      	ldr	r2, [r7, #16]
   57cd4:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
   57cd8:	42a9      	cmp	r1, r5
   57cda:	d8d9      	bhi.n	57c90 <get_fileinfo+0x24>
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
   57cdc:	b903      	cbnz	r3, 57ce0 <get_fileinfo+0x74>
		if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
   57cde:	b916      	cbnz	r6, 57ce6 <get_fileinfo+0x7a>
   57ce0:	233f      	movs	r3, #63	; 0x3f
   57ce2:	2601      	movs	r6, #1
   57ce4:	76a3      	strb	r3, [r4, #26]
		fno->fname[di] = 0;						/* Terminate the name */
   57ce6:	2300      	movs	r3, #0
   57ce8:	4426      	add	r6, r4
   57cea:	76b3      	strb	r3, [r6, #26]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
   57cec:	7363      	strb	r3, [r4, #13]
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
   57cee:	693b      	ldr	r3, [r7, #16]
   57cf0:	791b      	ldrb	r3, [r3, #4]
   57cf2:	f003 0237 	and.w	r2, r3, #55	; 0x37
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   57cf6:	06db      	lsls	r3, r3, #27
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
   57cf8:	7322      	strb	r2, [r4, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   57cfa:	d40d      	bmi.n	57d18 <get_fileinfo+0xac>
   57cfc:	6938      	ldr	r0, [r7, #16]
   57cfe:	3038      	adds	r0, #56	; 0x38
   57d00:	f7ff fefd 	bl	57afe <ld_qword>
   57d04:	e9c4 0100 	strd	r0, r1, [r4]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
   57d08:	693b      	ldr	r3, [r7, #16]
   57d0a:	899b      	ldrh	r3, [r3, #12]
   57d0c:	8163      	strh	r3, [r4, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
   57d0e:	693b      	ldr	r3, [r7, #16]
   57d10:	89db      	ldrh	r3, [r3, #14]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
   57d12:	8123      	strh	r3, [r4, #8]
}
   57d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   57d18:	2000      	movs	r0, #0
   57d1a:	4601      	mov	r1, r0
   57d1c:	e7f2      	b.n	57d04 <get_fileinfo+0x98>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
   57d1e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   57d20:	3301      	adds	r3, #1
   57d22:	d13f      	bne.n	57da4 <get_fileinfo+0x138>
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
   57d24:	2300      	movs	r3, #0
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
   57d26:	272e      	movs	r7, #46	; 0x2e
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
   57d28:	461a      	mov	r2, r3
		wc = dp->dir[si++];			/* Get a char */
   57d2a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   57d2c:	1c50      	adds	r0, r2, #1
   57d2e:	5c8a      	ldrb	r2, [r1, r2]
		if (wc == ' ') continue;	/* Skip padding spaces */
   57d30:	2a20      	cmp	r2, #32
   57d32:	d03c      	beq.n	57dae <get_fileinfo+0x142>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
   57d34:	2a05      	cmp	r2, #5
   57d36:	bf08      	it	eq
   57d38:	22e5      	moveq	r2, #229	; 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
   57d3a:	2809      	cmp	r0, #9
   57d3c:	f103 0101 	add.w	r1, r3, #1
   57d40:	eb04 0603 	add.w	r6, r4, r3
   57d44:	d131      	bne.n	57daa <get_fileinfo+0x13e>
   57d46:	2b0b      	cmp	r3, #11
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
   57d48:	bf8f      	iteee	hi
   57d4a:	460b      	movhi	r3, r1
   57d4c:	1909      	addls	r1, r1, r4
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
   57d4e:	7377      	strbls	r7, [r6, #13]
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
   57d50:	3302      	addls	r3, #2
   57d52:	bf94      	ite	ls
   57d54:	734a      	strbls	r2, [r1, #13]
   57d56:	7372      	strbhi	r2, [r6, #13]
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
   57d58:	4602      	mov	r2, r0
   57d5a:	e7e6      	b.n	57d2a <get_fileinfo+0xbe>
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
   57d5c:	f1b9 0f00 	cmp.w	r9, #0
   57d60:	d105      	bne.n	57d6e <get_fileinfo+0x102>
   57d62:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
   57d66:	b29b      	uxth	r3, r3
   57d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   57d6c:	d30b      	bcc.n	57d86 <get_fileinfo+0x11a>
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
   57d6e:	f108 011a 	add.w	r1, r8, #26
   57d72:	f1c8 02ff 	rsb	r2, r8, #255	; 0xff
   57d76:	4421      	add	r1, r4
   57d78:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   57d7c:	f7ff ff5b 	bl	57c36 <put_utf>
				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
   57d80:	b140      	cbz	r0, 57d94 <get_fileinfo+0x128>
				di += nw;
   57d82:	4480      	add	r8, r0
				hs = 0;
   57d84:	2000      	movs	r0, #0
   57d86:	4681      	mov	r9, r0
   57d88:	3602      	adds	r6, #2
			while (fs->lfnbuf[si] != 0) {
   57d8a:	68fb      	ldr	r3, [r7, #12]
   57d8c:	5b98      	ldrh	r0, [r3, r6]
   57d8e:	2800      	cmp	r0, #0
   57d90:	d1e4      	bne.n	57d5c <get_fileinfo+0xf0>
   57d92:	4640      	mov	r0, r8
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
   57d94:	f1b9 0f00 	cmp.w	r9, #0
   57d98:	bf18      	it	ne
   57d9a:	2000      	movne	r0, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
   57d9c:	2300      	movs	r3, #0
   57d9e:	4420      	add	r0, r4
   57da0:	7683      	strb	r3, [r0, #26]
	while (si < 11) {		/* Get SFN from SFN entry */
   57da2:	e7bf      	b.n	57d24 <get_fileinfo+0xb8>
			hs = 0;
   57da4:	46b1      	mov	r9, r6
			si = di = 0;
   57da6:	46b0      	mov	r8, r6
   57da8:	e7ef      	b.n	57d8a <get_fileinfo+0x11e>
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
   57daa:	460b      	mov	r3, r1
   57dac:	7372      	strb	r2, [r6, #13]
	while (si < 11) {		/* Get SFN from SFN entry */
   57dae:	280b      	cmp	r0, #11
   57db0:	d1d2      	bne.n	57d58 <get_fileinfo+0xec>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
   57db2:	2100      	movs	r1, #0
   57db4:	18e2      	adds	r2, r4, r3
   57db6:	7351      	strb	r1, [r2, #13]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
   57db8:	7ea2      	ldrb	r2, [r4, #26]
   57dba:	b99a      	cbnz	r2, 57de4 <get_fileinfo+0x178>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
   57dbc:	b143      	cbz	r3, 57dd0 <get_fileinfo+0x164>
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
   57dbe:	2008      	movs	r0, #8
   57dc0:	f104 030c 	add.w	r3, r4, #12
   57dc4:	785a      	ldrb	r2, [r3, #1]
   57dc6:	1c59      	adds	r1, r3, #1
   57dc8:	b9f2      	cbnz	r2, 57e08 <get_fileinfo+0x19c>
   57dca:	1b1b      	subs	r3, r3, r4
   57dcc:	3b0c      	subs	r3, #12
   57dce:	e002      	b.n	57dd6 <get_fileinfo+0x16a>
			fno->fname[di++] = '?';
   57dd0:	233f      	movs	r3, #63	; 0x3f
   57dd2:	76a3      	strb	r3, [r4, #26]
   57dd4:	2301      	movs	r3, #1
		fno->fname[di] = 0;	/* Terminate the LFN */
   57dd6:	2200      	movs	r2, #0
   57dd8:	4423      	add	r3, r4
   57dda:	769a      	strb	r2, [r3, #26]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
   57ddc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   57dde:	7b1b      	ldrb	r3, [r3, #12]
   57de0:	b903      	cbnz	r3, 57de4 <get_fileinfo+0x178>
   57de2:	7363      	strb	r3, [r4, #13]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
   57de4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   57de6:	7adb      	ldrb	r3, [r3, #11]
   57de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   57dec:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
   57dee:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   57df0:	2300      	movs	r3, #0
   57df2:	301c      	adds	r0, #28
   57df4:	f7ff fe81 	bl	57afa <ld_dword>
   57df8:	6063      	str	r3, [r4, #4]
   57dfa:	6020      	str	r0, [r4, #0]
   57dfc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   57dfe:	8adb      	ldrh	r3, [r3, #22]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
   57e00:	8163      	strh	r3, [r4, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
   57e02:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   57e04:	8b1b      	ldrh	r3, [r3, #24]
   57e06:	e784      	b.n	57d12 <get_fileinfo+0xa6>
				if (wc == '.') lcf = NS_EXT;
   57e08:	2a2e      	cmp	r2, #46	; 0x2e
   57e0a:	d00b      	beq.n	57e24 <get_fileinfo+0x1b8>
				wc = (WCHAR)fno->altname[si];
   57e0c:	4613      	mov	r3, r2
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
   57e0e:	3a41      	subs	r2, #65	; 0x41
   57e10:	2a19      	cmp	r2, #25
   57e12:	d804      	bhi.n	57e1e <get_fileinfo+0x1b2>
   57e14:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   57e16:	7b12      	ldrb	r2, [r2, #12]
   57e18:	4210      	tst	r0, r2
   57e1a:	d000      	beq.n	57e1e <get_fileinfo+0x1b2>
   57e1c:	3320      	adds	r3, #32
				fno->fname[di] = (TCHAR)wc;
   57e1e:	734b      	strb	r3, [r1, #13]
   57e20:	460b      	mov	r3, r1
   57e22:	e7cf      	b.n	57dc4 <get_fileinfo+0x158>
				if (wc == '.') lcf = NS_EXT;
   57e24:	2010      	movs	r0, #16
   57e26:	4613      	mov	r3, r2
   57e28:	e7f9      	b.n	57e1e <get_fileinfo+0x1b2>

00057e2a <xname_sum>:
{
   57e2a:	b538      	push	{r3, r4, r5, lr}
   57e2c:	4605      	mov	r5, r0
	WORD sum = 0;
   57e2e:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
   57e30:	f835 0b02 	ldrh.w	r0, [r5], #2
   57e34:	b908      	cbnz	r0, 57e3a <xname_sum+0x10>
}
   57e36:	4620      	mov	r0, r4
   57e38:	bd38      	pop	{r3, r4, r5, pc}
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
   57e3a:	f7f7 f9b5 	bl	4f1a8 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
   57e3e:	0862      	lsrs	r2, r4, #1
   57e40:	eb02 32c4 	add.w	r2, r2, r4, lsl #15
   57e44:	b2c3      	uxtb	r3, r0
   57e46:	fa13 f282 	uxtah	r2, r3, r2
   57e4a:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
   57e4c:	f3c0 2307 	ubfx	r3, r0, #8, #8
   57e50:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   57e54:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
   57e58:	b29c      	uxth	r4, r3
   57e5a:	e7e9      	b.n	57e30 <xname_sum+0x6>

00057e5c <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
   57e5c:	f3c2 2307 	ubfx	r3, r2, #8, #8
   57e60:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
   57e62:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
   57e64:	7803      	ldrb	r3, [r0, #0]
   57e66:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
   57e68:	bf01      	itttt	eq
   57e6a:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
   57e6c:	750a      	strbeq	r2, [r1, #20]
   57e6e:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
   57e70:	754a      	strbeq	r2, [r1, #21]
}
   57e72:	4770      	bx	lr

00057e74 <move_window>:
{
   57e74:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
   57e76:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   57e78:	4605      	mov	r5, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
   57e7a:	428b      	cmp	r3, r1
{
   57e7c:	460c      	mov	r4, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
   57e7e:	d010      	beq.n	57ea2 <move_window+0x2e>
		res = sync_window(fs);		/* Flush the window */
   57e80:	f7ff feb8 	bl	57bf4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
   57e84:	b960      	cbnz	r0, 57ea0 <move_window+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
   57e86:	4622      	mov	r2, r4
   57e88:	2301      	movs	r3, #1
   57e8a:	7868      	ldrb	r0, [r5, #1]
   57e8c:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   57e90:	f7f7 f912 	bl	4f0b8 <disk_read>
				res = FR_DISK_ERR;
   57e94:	2800      	cmp	r0, #0
   57e96:	bf1c      	itt	ne
   57e98:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
   57e9c:	2001      	movne	r0, #1
			fs->winsect = sect;
   57e9e:	63ac      	str	r4, [r5, #56]	; 0x38
}
   57ea0:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
   57ea2:	2000      	movs	r0, #0
   57ea4:	e7fc      	b.n	57ea0 <move_window+0x2c>

00057ea6 <change_bitmap>:
{
   57ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
   57eaa:	f04f 0a01 	mov.w	sl, #1
{
   57eae:	4605      	mov	r5, r0
   57eb0:	4617      	mov	r7, r2
   57eb2:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
   57eb4:	3902      	subs	r1, #2
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
   57eb6:	6b46      	ldr	r6, [r0, #52]	; 0x34
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
   57eb8:	f001 0407 	and.w	r4, r1, #7
   57ebc:	fa0a f404 	lsl.w	r4, sl, r4
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
   57ec0:	eb06 3611 	add.w	r6, r6, r1, lsr #12
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
   57ec4:	f3c1 09c8 	ubfx	r9, r1, #3, #9
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
   57ec8:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
   57eca:	4631      	mov	r1, r6
   57ecc:	4628      	mov	r0, r5
   57ece:	3601      	adds	r6, #1
   57ed0:	f7ff ffd0 	bl	57e74 <move_window>
   57ed4:	b118      	cbz	r0, 57ede <change_bitmap+0x38>
   57ed6:	2001      	movs	r0, #1
}
   57ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   57edc:	4699      	mov	r9, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
   57ede:	eb05 0209 	add.w	r2, r5, r9
   57ee2:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
   57ee6:	4223      	tst	r3, r4
   57ee8:	bf14      	ite	ne
   57eea:	2101      	movne	r1, #1
   57eec:	2100      	moveq	r1, #0
   57eee:	4541      	cmp	r1, r8
   57ef0:	d014      	beq.n	57f1c <change_bitmap+0x76>
				fs->win[i] ^= bm;	/* Flip the bit */
   57ef2:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
   57ef4:	3f01      	subs	r7, #1
				fs->win[i] ^= bm;	/* Flip the bit */
   57ef6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
				fs->wflag = 1;
   57efa:	f885 a003 	strb.w	sl, [r5, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
   57efe:	d0eb      	beq.n	57ed8 <change_bitmap+0x32>
			} while (bm <<= 1);		/* Next bit */
   57f00:	0064      	lsls	r4, r4, #1
   57f02:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   57f06:	d1ea      	bne.n	57ede <change_bitmap+0x38>
		} while (++i < SS(fs));		/* Next byte */
   57f08:	f109 0301 	add.w	r3, r9, #1
   57f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
			bm = 1;
   57f10:	f04f 0401 	mov.w	r4, #1
		i = 0;
   57f14:	f04f 0900 	mov.w	r9, #0
		} while (++i < SS(fs));		/* Next byte */
   57f18:	d1e0      	bne.n	57edc <change_bitmap+0x36>
   57f1a:	e7d6      	b.n	57eca <change_bitmap+0x24>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
   57f1c:	2002      	movs	r0, #2
   57f1e:	e7db      	b.n	57ed8 <change_bitmap+0x32>

00057f20 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   57f20:	2901      	cmp	r1, #1
{
   57f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   57f24:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   57f26:	f240 808b 	bls.w	58040 <get_fat+0x120>
	FATFS *fs = obj->fs;
   57f2a:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   57f2c:	69f3      	ldr	r3, [r6, #28]
   57f2e:	428b      	cmp	r3, r1
   57f30:	f240 8086 	bls.w	58040 <get_fat+0x120>
		switch (fs->fs_type) {
   57f34:	7833      	ldrb	r3, [r6, #0]
   57f36:	3b01      	subs	r3, #1
   57f38:	2b03      	cmp	r3, #3
   57f3a:	f200 8081 	bhi.w	58040 <get_fat+0x120>
   57f3e:	e8df f003 	tbb	[pc, r3]
   57f42:	2902      	.short	0x2902
   57f44:	4a37      	.short	0x4a37
			bc = (UINT)clst; bc += bc / 2;
   57f46:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   57f4a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   57f4c:	4630      	mov	r0, r6
   57f4e:	eb01 2155 	add.w	r1, r1, r5, lsr #9
   57f52:	f7ff ff8f 	bl	57e74 <move_window>
   57f56:	b110      	cbz	r0, 57f5e <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   57f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   57f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   57f5e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   57f60:	1c6f      	adds	r7, r5, #1
   57f62:	f3c5 0508 	ubfx	r5, r5, #0, #9
   57f66:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   57f68:	4630      	mov	r0, r6
   57f6a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   57f6e:	f895 503c 	ldrb.w	r5, [r5, #60]	; 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   57f72:	f7ff ff7f 	bl	57e74 <move_window>
   57f76:	2800      	cmp	r0, #0
   57f78:	d1ee      	bne.n	57f58 <get_fat+0x38>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
   57f7a:	f3c7 0708 	ubfx	r7, r7, #0, #9
   57f7e:	4437      	add	r7, r6
   57f80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   57f84:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
   57f88:	07e3      	lsls	r3, r4, #31
   57f8a:	bf4c      	ite	mi
   57f8c:	0900      	lsrmi	r0, r0, #4
   57f8e:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
   57f92:	e7e3      	b.n	57f5c <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   57f94:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   57f96:	4630      	mov	r0, r6
   57f98:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   57f9c:	f7ff ff6a 	bl	57e74 <move_window>
   57fa0:	2800      	cmp	r0, #0
   57fa2:	d1d9      	bne.n	57f58 <get_fat+0x38>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
   57fa4:	0064      	lsls	r4, r4, #1
   57fa6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   57faa:	4434      	add	r4, r6
   57fac:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
			break;
   57fae:	e7d5      	b.n	57f5c <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   57fb0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   57fb2:	4630      	mov	r0, r6
   57fb4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   57fb8:	f7ff ff5c 	bl	57e74 <move_window>
   57fbc:	2800      	cmp	r0, #0
   57fbe:	d1cb      	bne.n	57f58 <get_fat+0x38>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
   57fc0:	00a4      	lsls	r4, r4, #2
   57fc2:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   57fc6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   57fca:	4420      	add	r0, r4
   57fcc:	f7ff fd95 	bl	57afa <ld_dword>
   57fd0:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
   57fd4:	e7c2      	b.n	57f5c <get_fat+0x3c>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
   57fd6:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
   57fda:	ea53 0201 	orrs.w	r2, r3, r1
   57fde:	79c5      	ldrb	r5, [r0, #7]
   57fe0:	d001      	beq.n	57fe6 <get_fat+0xc6>
   57fe2:	6882      	ldr	r2, [r0, #8]
   57fe4:	b902      	cbnz	r2, 57fe8 <get_fat+0xc8>
   57fe6:	bb5d      	cbnz	r5, 58040 <get_fat+0x120>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
   57fe8:	6882      	ldr	r2, [r0, #8]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   57fea:	2d02      	cmp	r5, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
   57fec:	8977      	ldrh	r7, [r6, #10]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
   57fee:	eba4 0202 	sub.w	r2, r4, r2
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   57ff2:	d10c      	bne.n	5800e <get_fat+0xee>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
   57ff4:	3b01      	subs	r3, #1
   57ff6:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
   57ffa:	0a5b      	lsrs	r3, r3, #9
   57ffc:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   58000:	fbb3 f3f7 	udiv	r3, r3, r7
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   58004:	429a      	cmp	r2, r3
   58006:	d81b      	bhi.n	58040 <get_fat+0x120>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
   58008:	d01c      	beq.n	58044 <get_fat+0x124>
   5800a:	1c60      	adds	r0, r4, #1
   5800c:	e7a6      	b.n	57f5c <get_fat+0x3c>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
   5800e:	2d03      	cmp	r5, #3
   58010:	d102      	bne.n	58018 <get_fat+0xf8>
   58012:	6983      	ldr	r3, [r0, #24]
   58014:	4293      	cmp	r3, r2
   58016:	d8f8      	bhi.n	5800a <get_fat+0xea>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
   58018:	69c3      	ldr	r3, [r0, #28]
   5801a:	b99b      	cbnz	r3, 58044 <get_fat+0x124>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   5801c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   5801e:	4630      	mov	r0, r6
   58020:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   58024:	f7ff ff26 	bl	57e74 <move_window>
   58028:	2800      	cmp	r0, #0
   5802a:	d195      	bne.n	57f58 <get_fat+0x38>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
   5802c:	00a0      	lsls	r0, r4, #2
   5802e:	363c      	adds	r6, #60	; 0x3c
   58030:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
   58034:	4430      	add	r0, r6
   58036:	f7ff fd60 	bl	57afa <ld_dword>
   5803a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   5803e:	e78d      	b.n	57f5c <get_fat+0x3c>
   58040:	2001      	movs	r0, #1
   58042:	e78b      	b.n	57f5c <get_fat+0x3c>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
   58044:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return val;
   58048:	e788      	b.n	57f5c <get_fat+0x3c>

0005804a <dir_sdi>:
{
   5804a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
   5804c:	6804      	ldr	r4, [r0, #0]
{
   5804e:	4606      	mov	r6, r0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   58050:	7823      	ldrb	r3, [r4, #0]
{
   58052:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   58054:	2b04      	cmp	r3, #4
   58056:	bf14      	ite	ne
   58058:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
   5805c:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
   58060:	428b      	cmp	r3, r1
   58062:	d801      	bhi.n	58068 <dir_sdi+0x1e>
		return FR_INT_ERR;
   58064:	2002      	movs	r0, #2
}
   58066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   58068:	06ca      	lsls	r2, r1, #27
   5806a:	d1fb      	bne.n	58064 <dir_sdi+0x1a>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
   5806c:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
   5806e:	6301      	str	r1, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
   58070:	bb1a      	cbnz	r2, 580ba <dir_sdi+0x70>
   58072:	7823      	ldrb	r3, [r4, #0]
   58074:	2b02      	cmp	r3, #2
   58076:	d812      	bhi.n	5809e <dir_sdi+0x54>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
   58078:	8923      	ldrh	r3, [r4, #8]
   5807a:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
   5807e:	d9f1      	bls.n	58064 <dir_sdi+0x1a>
		dp->sect = fs->dirbase;
   58080:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	dp->clust = clst;					/* Current cluster# */
   58082:	e9c6 200d 	strd	r2, r0, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
   58086:	2800      	cmp	r0, #0
   58088:	d0ec      	beq.n	58064 <dir_sdi+0x1a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   5808a:	eb00 2055 	add.w	r0, r0, r5, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   5808e:	343c      	adds	r4, #60	; 0x3c
   58090:	f3c5 0508 	ubfx	r5, r5, #0, #9
   58094:	442c      	add	r4, r5
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   58096:	63b0      	str	r0, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   58098:	63f4      	str	r4, [r6, #60]	; 0x3c
	return FR_OK;
   5809a:	2000      	movs	r0, #0
   5809c:	e7e3      	b.n	58066 <dir_sdi+0x1c>
		clst = (DWORD)fs->dirbase;
   5809e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
   580a0:	71c2      	strb	r2, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
   580a2:	2b00      	cmp	r3, #0
   580a4:	d0e8      	beq.n	58078 <dir_sdi+0x2e>
		while (ofs >= csz) {				/* Follow cluster chain */
   580a6:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
   580a8:	8967      	ldrh	r7, [r4, #10]
   580aa:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
   580ac:	42bd      	cmp	r5, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   580ae:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
   580b0:	d205      	bcs.n	580be <dir_sdi+0x74>
		dp->sect = clst2sect(fs, clst);
   580b2:	4620      	mov	r0, r4
   580b4:	f7ff fd3e 	bl	57b34 <clst2sect>
   580b8:	e7e3      	b.n	58082 <dir_sdi+0x38>
   580ba:	4613      	mov	r3, r2
   580bc:	e7f3      	b.n	580a6 <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   580be:	4630      	mov	r0, r6
   580c0:	f7ff ff2e 	bl	57f20 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   580c4:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   580c6:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   580c8:	d006      	beq.n	580d8 <dir_sdi+0x8e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   580ca:	2801      	cmp	r0, #1
   580cc:	d9ca      	bls.n	58064 <dir_sdi+0x1a>
   580ce:	69e3      	ldr	r3, [r4, #28]
   580d0:	4283      	cmp	r3, r0
   580d2:	d9c7      	bls.n	58064 <dir_sdi+0x1a>
			ofs -= csz;
   580d4:	1bed      	subs	r5, r5, r7
   580d6:	e7e9      	b.n	580ac <dir_sdi+0x62>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   580d8:	2001      	movs	r0, #1
   580da:	e7c4      	b.n	58066 <dir_sdi+0x1c>

000580dc <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   580dc:	2901      	cmp	r1, #1
{
   580de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   580e2:	4606      	mov	r6, r0
   580e4:	460c      	mov	r4, r1
   580e6:	4615      	mov	r5, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   580e8:	d908      	bls.n	580fc <put_fat+0x20>
   580ea:	69c3      	ldr	r3, [r0, #28]
   580ec:	428b      	cmp	r3, r1
   580ee:	d905      	bls.n	580fc <put_fat+0x20>
		switch (fs->fs_type) {
   580f0:	7803      	ldrb	r3, [r0, #0]
   580f2:	2b02      	cmp	r3, #2
   580f4:	d05e      	beq.n	581b4 <put_fat+0xd8>
   580f6:	d803      	bhi.n	58100 <put_fat+0x24>
   580f8:	2b01      	cmp	r3, #1
   580fa:	d021      	beq.n	58140 <put_fat+0x64>
	FRESULT res = FR_INT_ERR;
   580fc:	2002      	movs	r0, #2
   580fe:	e04f      	b.n	581a0 <put_fat+0xc4>
		switch (fs->fs_type) {
   58100:	3b03      	subs	r3, #3
   58102:	2b01      	cmp	r3, #1
   58104:	d8fa      	bhi.n	580fc <put_fat+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   58106:	6a81      	ldr	r1, [r0, #40]	; 0x28
   58108:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   5810c:	f7ff feb2 	bl	57e74 <move_window>
			if (res != FR_OK) break;
   58110:	2800      	cmp	r0, #0
   58112:	d145      	bne.n	581a0 <put_fat+0xc4>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   58114:	7832      	ldrb	r2, [r6, #0]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   58116:	00a4      	lsls	r4, r4, #2
			p = fs->win + bc++ % SS(fs);
   58118:	f106 033c 	add.w	r3, r6, #60	; 0x3c
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   5811c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   58120:	2a04      	cmp	r2, #4
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   58122:	4423      	add	r3, r4
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   58124:	d007      	beq.n	58136 <put_fat+0x5a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   58126:	4618      	mov	r0, r3
   58128:	f7ff fce7 	bl	57afa <ld_dword>
   5812c:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
   58130:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
   58134:	4305      	orrs	r5, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
   58136:	4629      	mov	r1, r5
   58138:	4618      	mov	r0, r3
   5813a:	f7ff fce4 	bl	57b06 <st_dword>
			break;
   5813e:	e02c      	b.n	5819a <put_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
   58140:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   58144:	6a81      	ldr	r1, [r0, #40]	; 0x28
   58146:	eb01 2157 	add.w	r1, r1, r7, lsr #9
   5814a:	f7ff fe93 	bl	57e74 <move_window>
			if (res != FR_OK) break;
   5814e:	bb38      	cbnz	r0, 581a0 <put_fat+0xc4>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
   58150:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
   58154:	f106 083c 	add.w	r8, r6, #60	; 0x3c
   58158:	f107 0901 	add.w	r9, r7, #1
   5815c:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
   58160:	bf1f      	itttt	ne
   58162:	f818 2007 	ldrbne.w	r2, [r8, r7]
   58166:	012b      	lslne	r3, r5, #4
   58168:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
   5816c:	f002 020f 	andne.w	r2, r2, #15
   58170:	bf14      	ite	ne
   58172:	4313      	orrne	r3, r2
   58174:	b2eb      	uxtbeq	r3, r5
   58176:	f808 3007 	strb.w	r3, [r8, r7]
			fs->wflag = 1;
   5817a:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   5817c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   5817e:	4630      	mov	r0, r6
			fs->wflag = 1;
   58180:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   58182:	eb01 2159 	add.w	r1, r1, r9, lsr #9
   58186:	f7ff fe75 	bl	57e74 <move_window>
			if (res != FR_OK) break;
   5818a:	b948      	cbnz	r0, 581a0 <put_fat+0xc4>
			p = fs->win + bc % SS(fs);
   5818c:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   58190:	b144      	cbz	r4, 581a4 <put_fat+0xc8>
   58192:	f3c5 1507 	ubfx	r5, r5, #4, #8
   58196:	f808 5009 	strb.w	r5, [r8, r9]
			fs->wflag = 1;
   5819a:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   5819c:	2000      	movs	r0, #0
			fs->wflag = 1;
   5819e:	70f3      	strb	r3, [r6, #3]
}
   581a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   581a4:	f818 3009 	ldrb.w	r3, [r8, r9]
   581a8:	f3c5 2503 	ubfx	r5, r5, #8, #4
   581ac:	f023 030f 	bic.w	r3, r3, #15
   581b0:	431d      	orrs	r5, r3
   581b2:	e7f0      	b.n	58196 <put_fat+0xba>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   581b4:	6a81      	ldr	r1, [r0, #40]	; 0x28
   581b6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   581ba:	f7ff fe5b 	bl	57e74 <move_window>
			if (res != FR_OK) break;
   581be:	2800      	cmp	r0, #0
   581c0:	d1ee      	bne.n	581a0 <put_fat+0xc4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
   581c2:	0064      	lsls	r4, r4, #1
   581c4:	f106 033c 	add.w	r3, r6, #60	; 0x3c
   581c8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
   581cc:	551d      	strb	r5, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
   581ce:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
   581d0:	f3c5 2507 	ubfx	r5, r5, #8, #8
	*ptr++ = (BYTE)val;
   581d4:	7055      	strb	r5, [r2, #1]
			break;
   581d6:	e7e0      	b.n	5819a <put_fat+0xbe>

000581d8 <fill_last_frag>:
{
   581d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   581da:	4604      	mov	r4, r0
   581dc:	460e      	mov	r6, r1
   581de:	4617      	mov	r7, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
   581e0:	69e3      	ldr	r3, [r4, #28]
   581e2:	b90b      	cbnz	r3, 581e8 <fill_last_frag+0x10>
	return FR_OK;
   581e4:	4618      	mov	r0, r3
}
   581e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
   581e8:	2b01      	cmp	r3, #1
   581ea:	eba6 0503 	sub.w	r5, r6, r3
   581ee:	bf0c      	ite	eq
   581f0:	463a      	moveq	r2, r7
   581f2:	1caa      	addne	r2, r5, #2
   581f4:	6820      	ldr	r0, [r4, #0]
   581f6:	1c69      	adds	r1, r5, #1
   581f8:	f7ff ff70 	bl	580dc <put_fat>
		if (res != FR_OK) return res;
   581fc:	2800      	cmp	r0, #0
   581fe:	d1f2      	bne.n	581e6 <fill_last_frag+0xe>
		obj->n_frag--;
   58200:	69e3      	ldr	r3, [r4, #28]
   58202:	3b01      	subs	r3, #1
   58204:	61e3      	str	r3, [r4, #28]
   58206:	e7eb      	b.n	581e0 <fill_last_frag+0x8>

00058208 <fill_first_frag>:
{
   58208:	b570      	push	{r4, r5, r6, lr}
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
   5820a:	79c3      	ldrb	r3, [r0, #7]
{
   5820c:	4604      	mov	r4, r0
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
   5820e:	2b03      	cmp	r3, #3
   58210:	d001      	beq.n	58216 <fill_first_frag+0xe>
	return FR_OK;
   58212:	2000      	movs	r0, #0
}
   58214:	bd70      	pop	{r4, r5, r6, pc}
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
   58216:	6881      	ldr	r1, [r0, #8]
   58218:	6983      	ldr	r3, [r0, #24]
   5821a:	18cd      	adds	r5, r1, r3
   5821c:	42a9      	cmp	r1, r5
   5821e:	d102      	bne.n	58226 <fill_first_frag+0x1e>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
   58220:	2300      	movs	r3, #0
   58222:	71e3      	strb	r3, [r4, #7]
   58224:	e7f5      	b.n	58212 <fill_first_frag+0xa>
			res = put_fat(obj->fs, cl, cl + 1);
   58226:	1c4e      	adds	r6, r1, #1
   58228:	4632      	mov	r2, r6
   5822a:	6820      	ldr	r0, [r4, #0]
   5822c:	f7ff ff56 	bl	580dc <put_fat>
			if (res != FR_OK) return res;
   58230:	2800      	cmp	r0, #0
   58232:	d1ef      	bne.n	58214 <fill_first_frag+0xc>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
   58234:	4631      	mov	r1, r6
   58236:	e7f1      	b.n	5821c <fill_first_frag+0x14>

00058238 <remove_chain>:
{
   58238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   5823c:	2901      	cmp	r1, #1
{
   5823e:	4606      	mov	r6, r0
   58240:	460c      	mov	r4, r1
   58242:	4617      	mov	r7, r2
	FATFS *fs = obj->fs;
   58244:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   58246:	d802      	bhi.n	5824e <remove_chain+0x16>
   58248:	2002      	movs	r0, #2
}
   5824a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   5824e:	69eb      	ldr	r3, [r5, #28]
   58250:	428b      	cmp	r3, r1
   58252:	d9f9      	bls.n	58248 <remove_chain+0x10>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   58254:	b97a      	cbnz	r2, 58276 <remove_chain+0x3e>
{
   58256:	46a1      	mov	r9, r4
		nxt = get_fat(obj, clst);			/* Get cluster status */
   58258:	4621      	mov	r1, r4
   5825a:	4630      	mov	r0, r6
   5825c:	f7ff fe60 	bl	57f20 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
   58260:	46a0      	mov	r8, r4
   58262:	4604      	mov	r4, r0
   58264:	b9b0      	cbnz	r0, 58294 <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
   58266:	782b      	ldrb	r3, [r5, #0]
   58268:	2b04      	cmp	r3, #4
   5826a:	d102      	bne.n	58272 <remove_chain+0x3a>
		if (pclst == 0) {	/* Has the entire chain been removed? */
   5826c:	2f00      	cmp	r7, #0
   5826e:	d144      	bne.n	582fa <remove_chain+0xc2>
			obj->stat = 0;		/* Change the chain status 'initial' */
   58270:	71f7      	strb	r7, [r6, #7]
	return FR_OK;
   58272:	2000      	movs	r0, #0
   58274:	e7e9      	b.n	5824a <remove_chain+0x12>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   58276:	782b      	ldrb	r3, [r5, #0]
   58278:	2b04      	cmp	r3, #4
   5827a:	d102      	bne.n	58282 <remove_chain+0x4a>
   5827c:	79c3      	ldrb	r3, [r0, #7]
   5827e:	2b02      	cmp	r3, #2
   58280:	d0e9      	beq.n	58256 <remove_chain+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
   58282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   58286:	4639      	mov	r1, r7
   58288:	4628      	mov	r0, r5
   5828a:	f7ff ff27 	bl	580dc <put_fat>
		if (res != FR_OK) return res;
   5828e:	2800      	cmp	r0, #0
   58290:	d0e1      	beq.n	58256 <remove_chain+0x1e>
   58292:	e7da      	b.n	5824a <remove_chain+0x12>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   58294:	2801      	cmp	r0, #1
   58296:	d0d7      	beq.n	58248 <remove_chain+0x10>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   58298:	1c42      	adds	r2, r0, #1
   5829a:	d101      	bne.n	582a0 <remove_chain+0x68>
   5829c:	2001      	movs	r0, #1
   5829e:	e7d4      	b.n	5824a <remove_chain+0x12>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   582a0:	782b      	ldrb	r3, [r5, #0]
   582a2:	2b04      	cmp	r3, #4
   582a4:	d110      	bne.n	582c8 <remove_chain+0x90>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
   582a6:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   582aa:	3a02      	subs	r2, #2
   582ac:	4293      	cmp	r3, r2
   582ae:	d313      	bcc.n	582d8 <remove_chain+0xa0>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
   582b0:	f108 0201 	add.w	r2, r8, #1
   582b4:	42a2      	cmp	r2, r4
   582b6:	d003      	beq.n	582c0 <remove_chain+0x88>
			if (fs->fs_type == FS_EXFAT) {
   582b8:	782b      	ldrb	r3, [r5, #0]
   582ba:	2b04      	cmp	r3, #4
   582bc:	d013      	beq.n	582e6 <remove_chain+0xae>
{
   582be:	46a1      	mov	r9, r4
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
   582c0:	69eb      	ldr	r3, [r5, #28]
   582c2:	42a3      	cmp	r3, r4
   582c4:	d8c8      	bhi.n	58258 <remove_chain+0x20>
   582c6:	e7ce      	b.n	58266 <remove_chain+0x2e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
   582c8:	2200      	movs	r2, #0
   582ca:	4641      	mov	r1, r8
   582cc:	4628      	mov	r0, r5
   582ce:	f7ff ff05 	bl	580dc <put_fat>
			if (res != FR_OK) return res;
   582d2:	2800      	cmp	r0, #0
   582d4:	d0e7      	beq.n	582a6 <remove_chain+0x6e>
   582d6:	e7b8      	b.n	5824a <remove_chain+0x12>
			fs->free_clst++;
   582d8:	3301      	adds	r3, #1
   582da:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
   582dc:	792b      	ldrb	r3, [r5, #4]
   582de:	f043 0301 	orr.w	r3, r3, #1
   582e2:	712b      	strb	r3, [r5, #4]
   582e4:	e7e4      	b.n	582b0 <remove_chain+0x78>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
   582e6:	2300      	movs	r3, #0
   582e8:	4649      	mov	r1, r9
   582ea:	4628      	mov	r0, r5
   582ec:	eba2 0209 	sub.w	r2, r2, r9
   582f0:	f7ff fdd9 	bl	57ea6 <change_bitmap>
				if (res != FR_OK) return res;
   582f4:	2800      	cmp	r0, #0
   582f6:	d0e2      	beq.n	582be <remove_chain+0x86>
   582f8:	e7a7      	b.n	5824a <remove_chain+0x12>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
   582fa:	79f3      	ldrb	r3, [r6, #7]
   582fc:	b98b      	cbnz	r3, 58322 <remove_chain+0xea>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
   582fe:	68b4      	ldr	r4, [r6, #8]
				while (clst != pclst) {
   58300:	42bc      	cmp	r4, r7
   58302:	d102      	bne.n	5830a <remove_chain+0xd2>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
   58304:	2302      	movs	r3, #2
   58306:	71f3      	strb	r3, [r6, #7]
   58308:	e7b3      	b.n	58272 <remove_chain+0x3a>
					nxt = get_fat(obj, clst);
   5830a:	4621      	mov	r1, r4
   5830c:	4630      	mov	r0, r6
   5830e:	f7ff fe07 	bl	57f20 <get_fat>
					if (nxt < 2) return FR_INT_ERR;
   58312:	2801      	cmp	r0, #1
   58314:	d998      	bls.n	58248 <remove_chain+0x10>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
   58316:	1c43      	adds	r3, r0, #1
   58318:	d0c0      	beq.n	5829c <remove_chain+0x64>
					if (nxt != clst + 1) break;	/* Not contiguous? */
   5831a:	3401      	adds	r4, #1
   5831c:	4284      	cmp	r4, r0
   5831e:	d0ef      	beq.n	58300 <remove_chain+0xc8>
   58320:	e7a7      	b.n	58272 <remove_chain+0x3a>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
   58322:	2b03      	cmp	r3, #3
   58324:	d1a5      	bne.n	58272 <remove_chain+0x3a>
   58326:	68b3      	ldr	r3, [r6, #8]
   58328:	42bb      	cmp	r3, r7
   5832a:	d8a2      	bhi.n	58272 <remove_chain+0x3a>
   5832c:	69b2      	ldr	r2, [r6, #24]
   5832e:	4413      	add	r3, r2
   58330:	42bb      	cmp	r3, r7
   58332:	d2e7      	bcs.n	58304 <remove_chain+0xcc>
   58334:	e79d      	b.n	58272 <remove_chain+0x3a>

00058336 <dir_clear>:
{
   58336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   58338:	4605      	mov	r5, r0
   5833a:	460e      	mov	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   5833c:	f7ff fc5a 	bl	57bf4 <sync_window>
   58340:	4604      	mov	r4, r0
   58342:	b9f8      	cbnz	r0, 58384 <dir_clear+0x4e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   58344:	4631      	mov	r1, r6
   58346:	4628      	mov	r0, r5
   58348:	f7ff fbf4 	bl	57b34 <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
   5834c:	f105 073c 	add.w	r7, r5, #60	; 0x3c
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   58350:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
   58352:	63a8      	str	r0, [r5, #56]	; 0x38
__ssp_bos_icheck3(memset, void *, int)
   58354:	f44f 7200 	mov.w	r2, #512	; 0x200
   58358:	4621      	mov	r1, r4
   5835a:	4638      	mov	r0, r7
   5835c:	f002 fdb7 	bl	5aece <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   58360:	896b      	ldrh	r3, [r5, #10]
   58362:	429c      	cmp	r4, r3
   58364:	d304      	bcc.n	58370 <dir_clear+0x3a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
   58366:	8968      	ldrh	r0, [r5, #10]
   58368:	1b00      	subs	r0, r0, r4
   5836a:	bf18      	it	ne
   5836c:	2001      	movne	r0, #1
}
   5836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   58370:	2301      	movs	r3, #1
   58372:	4639      	mov	r1, r7
   58374:	7868      	ldrb	r0, [r5, #1]
   58376:	1932      	adds	r2, r6, r4
   58378:	f7f6 feaa 	bl	4f0d0 <disk_write>
   5837c:	2800      	cmp	r0, #0
   5837e:	d1f2      	bne.n	58366 <dir_clear+0x30>
   58380:	3401      	adds	r4, #1
   58382:	e7ed      	b.n	58360 <dir_clear+0x2a>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   58384:	2001      	movs	r0, #1
   58386:	e7f2      	b.n	5836e <dir_clear+0x38>

00058388 <sync_fs>:
{
   58388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5838a:	4604      	mov	r4, r0
	res = sync_window(fs);
   5838c:	f7ff fc32 	bl	57bf4 <sync_window>
   58390:	4605      	mov	r5, r0
	if (res == FR_OK) {
   58392:	2800      	cmp	r0, #0
   58394:	d142      	bne.n	5841c <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
   58396:	7823      	ldrb	r3, [r4, #0]
   58398:	2b03      	cmp	r3, #3
   5839a:	d137      	bne.n	5840c <sync_fs+0x84>
   5839c:	7927      	ldrb	r7, [r4, #4]
   5839e:	2f01      	cmp	r7, #1
   583a0:	d134      	bne.n	5840c <sync_fs+0x84>
			memset(fs->win, 0, sizeof fs->win);
   583a2:	f104 063c 	add.w	r6, r4, #60	; 0x3c
   583a6:	4601      	mov	r1, r0
   583a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   583ac:	4630      	mov	r0, r6
   583ae:	f002 fd8e 	bl	5aece <memset>
	*ptr++ = (BYTE)val; val >>= 8;
   583b2:	2355      	movs	r3, #85	; 0x55
   583b4:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
	*ptr++ = (BYTE)val;
   583b8:	23aa      	movs	r3, #170	; 0xaa
   583ba:	f884 323b 	strb.w	r3, [r4, #571]	; 0x23b
	*ptr++ = (BYTE)val; val >>= 8;
   583be:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
   583c0:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
   583c2:	2172      	movs	r1, #114	; 0x72
   583c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
   583c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	*ptr++ = (BYTE)val; val >>= 8;
   583cc:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val;
   583ce:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
   583d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	*ptr++ = (BYTE)val;
   583d6:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val; val >>= 8;
   583da:	f884 1220 	strb.w	r1, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
   583de:	f884 1221 	strb.w	r1, [r4, #545]	; 0x221
	*ptr++ = (BYTE)val; val >>= 8;
   583e2:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
   583e6:	69a1      	ldr	r1, [r4, #24]
   583e8:	f504 7009 	add.w	r0, r4, #548	; 0x224
   583ec:	f7ff fb8b 	bl	57b06 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
   583f0:	6961      	ldr	r1, [r4, #20]
   583f2:	f504 700a 	add.w	r0, r4, #552	; 0x228
   583f6:	f7ff fb86 	bl	57b06 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
   583fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
   583fc:	463b      	mov	r3, r7
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
   583fe:	3201      	adds	r2, #1
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
   58400:	4631      	mov	r1, r6
   58402:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
   58404:	63a2      	str	r2, [r4, #56]	; 0x38
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
   58406:	f7f6 fe63 	bl	4f0d0 <disk_write>
			fs->fsi_flag = 0;
   5840a:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
   5840c:	2200      	movs	r2, #0
   5840e:	7860      	ldrb	r0, [r4, #1]
   58410:	4611      	mov	r1, r2
   58412:	f7f6 fe69 	bl	4f0e8 <disk_ioctl>
   58416:	3800      	subs	r0, #0
   58418:	bf18      	it	ne
   5841a:	2001      	movne	r0, #1
}
   5841c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0005841e <create_chain>:
{
   5841e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   58422:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
   58424:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
   58426:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
   58428:	2900      	cmp	r1, #0
   5842a:	d139      	bne.n	584a0 <create_chain+0x82>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   5842c:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   58430:	2e00      	cmp	r6, #0
   58432:	d04a      	beq.n	584ca <create_chain+0xac>
   58434:	69ea      	ldr	r2, [r5, #28]
   58436:	42b2      	cmp	r2, r6
   58438:	d947      	bls.n	584ca <create_chain+0xac>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   5843a:	b91b      	cbnz	r3, 58444 <create_chain+0x26>
   5843c:	2400      	movs	r4, #0
}
   5843e:	4620      	mov	r0, r4
   58440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   58444:	782b      	ldrb	r3, [r5, #0]
   58446:	2b04      	cmp	r3, #4
   58448:	d145      	bne.n	584d6 <create_chain+0xb8>
	if (clst >= fs->n_fatent - 2) clst = 0;
   5844a:	69eb      	ldr	r3, [r5, #28]
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
   5844c:	1eb4      	subs	r4, r6, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
   5844e:	3b02      	subs	r3, #2
   58450:	429c      	cmp	r4, r3
   58452:	bf28      	it	cs
   58454:	2400      	movcs	r4, #0
	scl = val = clst; ctr = 0;
   58456:	46a1      	mov	r9, r4
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
   58458:	f04f 0a01 	mov.w	sl, #1
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
   5845c:	6b69      	ldr	r1, [r5, #52]	; 0x34
   5845e:	4628      	mov	r0, r5
   58460:	eb01 3119 	add.w	r1, r1, r9, lsr #12
   58464:	f7ff fd06 	bl	57e74 <move_window>
   58468:	2800      	cmp	r0, #0
   5846a:	d17f      	bne.n	5856c <create_chain+0x14e>
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   5846c:	69ea      	ldr	r2, [r5, #28]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
   5846e:	f009 0307 	and.w	r3, r9, #7
   58472:	fa0a f303 	lsl.w	r3, sl, r3
   58476:	f3c9 01c8 	ubfx	r1, r9, #3, #9
   5847a:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   5847c:	f1a2 0c02 	sub.w	ip, r2, #2
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   58480:	186a      	adds	r2, r5, r1
   58482:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   58486:	f109 0201 	add.w	r2, r9, #1
   5848a:	4562      	cmp	r2, ip
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   5848c:	ea00 0003 	and.w	r0, r0, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   58490:	d33a      	bcc.n	58508 <create_chain+0xea>
				if (bv == 0) {	/* Is it a free cluster? */
   58492:	2800      	cmp	r0, #0
   58494:	d039      	beq.n	5850a <create_chain+0xec>
				if (val == clst) return 0;	/* All cluster scanned? */
   58496:	2c00      	cmp	r4, #0
   58498:	d039      	beq.n	5850e <create_chain+0xf0>
   5849a:	2200      	movs	r2, #0
	scl = val = clst; ctr = 0;
   5849c:	4691      	mov	r9, r2
   5849e:	e7dd      	b.n	5845c <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
   584a0:	f7ff fd3e 	bl	57f20 <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
   584a4:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
   584a6:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
   584a8:	d801      	bhi.n	584ae <create_chain+0x90>
   584aa:	2401      	movs	r4, #1
   584ac:	e7c7      	b.n	5843e <create_chain+0x20>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
   584ae:	1c42      	adds	r2, r0, #1
   584b0:	f000 80b1 	beq.w	58616 <create_chain+0x1f8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   584b4:	69eb      	ldr	r3, [r5, #28]
   584b6:	4283      	cmp	r3, r0
   584b8:	d8c1      	bhi.n	5843e <create_chain+0x20>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   584ba:	69aa      	ldr	r2, [r5, #24]
   584bc:	2a00      	cmp	r2, #0
   584be:	d0bd      	beq.n	5843c <create_chain+0x1e>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   584c0:	782a      	ldrb	r2, [r5, #0]
   584c2:	2a04      	cmp	r2, #4
   584c4:	d179      	bne.n	585ba <create_chain+0x19c>
		scl = clst;							/* Cluster to start to find */
   584c6:	4646      	mov	r6, r8
   584c8:	e7bf      	b.n	5844a <create_chain+0x2c>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   584ca:	2b00      	cmp	r3, #0
   584cc:	d0b6      	beq.n	5843c <create_chain+0x1e>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   584ce:	782b      	ldrb	r3, [r5, #0]
   584d0:	2b04      	cmp	r3, #4
   584d2:	d016      	beq.n	58502 <create_chain+0xe4>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   584d4:	2601      	movs	r6, #1
		scl = clst;							/* Cluster to start to find */
   584d6:	4634      	mov	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   584d8:	69eb      	ldr	r3, [r5, #28]
				ncl++;							/* Next cluster */
   584da:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   584dc:	42a3      	cmp	r3, r4
   584de:	d802      	bhi.n	584e6 <create_chain+0xc8>
					if (ncl > scl) return 0;	/* No free cluster found? */
   584e0:	2e01      	cmp	r6, #1
   584e2:	d0ab      	beq.n	5843c <create_chain+0x1e>
					ncl = 2;
   584e4:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
   584e6:	4621      	mov	r1, r4
   584e8:	4638      	mov	r0, r7
   584ea:	f7ff fd19 	bl	57f20 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
   584ee:	2800      	cmp	r0, #0
   584f0:	d07d      	beq.n	585ee <create_chain+0x1d0>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   584f2:	2801      	cmp	r0, #1
   584f4:	d0d9      	beq.n	584aa <create_chain+0x8c>
   584f6:	3001      	adds	r0, #1
   584f8:	f000 808d 	beq.w	58616 <create_chain+0x1f8>
				if (ncl == scl) return 0;		/* No free cluster found? */
   584fc:	42b4      	cmp	r4, r6
   584fe:	d1eb      	bne.n	584d8 <create_chain+0xba>
   58500:	e79c      	b.n	5843c <create_chain+0x1e>
	if (clst >= fs->n_fatent - 2) clst = 0;
   58502:	2400      	movs	r4, #0
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   58504:	2601      	movs	r6, #1
   58506:	e7a6      	b.n	58456 <create_chain+0x38>
				if (bv == 0) {	/* Is it a free cluster? */
   58508:	bb18      	cbnz	r0, 58552 <create_chain+0x134>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
   5850a:	f109 0402 	add.w	r4, r9, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
   5850e:	1e63      	subs	r3, r4, #1
   58510:	3303      	adds	r3, #3
   58512:	d894      	bhi.n	5843e <create_chain+0x20>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
   58514:	2301      	movs	r3, #1
   58516:	4621      	mov	r1, r4
   58518:	461a      	mov	r2, r3
   5851a:	4628      	mov	r0, r5
   5851c:	f7ff fcc3 	bl	57ea6 <change_bitmap>
		if (res == FR_INT_ERR) return 1;
   58520:	2802      	cmp	r0, #2
   58522:	d0c2      	beq.n	584aa <create_chain+0x8c>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
   58524:	2801      	cmp	r0, #1
   58526:	d076      	beq.n	58616 <create_chain+0x1f8>
		if (clst == 0) {							/* Is it a new chain? */
   58528:	f1b8 0f00 	cmp.w	r8, #0
   5852c:	d123      	bne.n	58576 <create_chain+0x158>
			obj->stat = 2;							/* Set status 'contiguous' */
   5852e:	2302      	movs	r3, #2
   58530:	71fb      	strb	r3, [r7, #7]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   58532:	2800      	cmp	r0, #0
   58534:	d1b9      	bne.n	584aa <create_chain+0x8c>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
   58536:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   5853a:	3a02      	subs	r2, #2
   5853c:	4293      	cmp	r3, r2
   5853e:	bf9c      	itt	ls
   58540:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
   58544:	61ab      	strls	r3, [r5, #24]
		fs->fsi_flag |= 1;
   58546:	792b      	ldrb	r3, [r5, #4]
		fs->last_clst = ncl;
   58548:	616c      	str	r4, [r5, #20]
		fs->fsi_flag |= 1;
   5854a:	f043 0301 	orr.w	r3, r3, #1
   5854e:	712b      	strb	r3, [r5, #4]
   58550:	e775      	b.n	5843e <create_chain+0x20>
				if (val == clst) return 0;	/* All cluster scanned? */
   58552:	42a2      	cmp	r2, r4
   58554:	d00d      	beq.n	58572 <create_chain+0x154>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   58556:	005b      	lsls	r3, r3, #1
			} while (bm != 0);
   58558:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   5855c:	d104      	bne.n	58568 <create_chain+0x14a>
		} while (++i < SS(fs));
   5855e:	3101      	adds	r1, #1
   58560:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   58564:	d09a      	beq.n	5849c <create_chain+0x7e>
			bm = 1;
   58566:	2301      	movs	r3, #1
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   58568:	4691      	mov	r9, r2
   5856a:	e789      	b.n	58480 <create_chain+0x62>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
   5856c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   58570:	e7cd      	b.n	5850e <create_chain+0xf0>
				if (val == clst) return 0;	/* All cluster scanned? */
   58572:	2400      	movs	r4, #0
   58574:	e7cb      	b.n	5850e <create_chain+0xf0>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
   58576:	79fb      	ldrb	r3, [r7, #7]
   58578:	2b02      	cmp	r3, #2
   5857a:	d107      	bne.n	5858c <create_chain+0x16e>
   5857c:	1c73      	adds	r3, r6, #1
   5857e:	42a3      	cmp	r3, r4
   58580:	d0d7      	beq.n	58532 <create_chain+0x114>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
   58582:	68bb      	ldr	r3, [r7, #8]
   58584:	1af3      	subs	r3, r6, r3
   58586:	61bb      	str	r3, [r7, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
   58588:	2303      	movs	r3, #3
   5858a:	71fb      	strb	r3, [r7, #7]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
   5858c:	f108 0201 	add.w	r2, r8, #1
   58590:	42a2      	cmp	r2, r4
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
   58592:	69fb      	ldr	r3, [r7, #28]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
   58594:	d00b      	beq.n	585ae <create_chain+0x190>
				if (obj->n_frag == 0) obj->n_frag = 1;
   58596:	b90b      	cbnz	r3, 5859c <create_chain+0x17e>
   58598:	2301      	movs	r3, #1
   5859a:	61fb      	str	r3, [r7, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
   5859c:	4622      	mov	r2, r4
   5859e:	4641      	mov	r1, r8
   585a0:	4638      	mov	r0, r7
   585a2:	f7ff fe19 	bl	581d8 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
   585a6:	bb98      	cbnz	r0, 58610 <create_chain+0x1f2>
   585a8:	2301      	movs	r3, #1
   585aa:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   585ac:	e7c3      	b.n	58536 <create_chain+0x118>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
   585ae:	b113      	cbz	r3, 585b6 <create_chain+0x198>
   585b0:	3301      	adds	r3, #1
   585b2:	61fb      	str	r3, [r7, #28]
   585b4:	e7bd      	b.n	58532 <create_chain+0x114>
   585b6:	2302      	movs	r3, #2
   585b8:	e7fb      	b.n	585b2 <create_chain+0x194>
			ncl = scl + 1;						/* Test if next cluster is free */
   585ba:	f108 0401 	add.w	r4, r8, #1
			if (ncl >= fs->n_fatent) ncl = 2;
   585be:	42a3      	cmp	r3, r4
   585c0:	bf98      	it	ls
   585c2:	2402      	movls	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
   585c4:	4638      	mov	r0, r7
   585c6:	4621      	mov	r1, r4
   585c8:	f7ff fcaa 	bl	57f20 <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   585cc:	2801      	cmp	r0, #1
   585ce:	f43f af6c 	beq.w	584aa <create_chain+0x8c>
   585d2:	1c43      	adds	r3, r0, #1
   585d4:	d01f      	beq.n	58616 <create_chain+0x1f8>
			if (cs != 0) {						/* Not free? */
   585d6:	b138      	cbz	r0, 585e8 <create_chain+0x1ca>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
   585d8:	696e      	ldr	r6, [r5, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
   585da:	2e01      	cmp	r6, #1
   585dc:	d905      	bls.n	585ea <create_chain+0x1cc>
   585de:	69eb      	ldr	r3, [r5, #28]
		scl = clst;							/* Cluster to start to find */
   585e0:	429e      	cmp	r6, r3
   585e2:	bf28      	it	cs
   585e4:	4646      	movcs	r6, r8
   585e6:	e776      	b.n	584d6 <create_chain+0xb8>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
   585e8:	b90c      	cbnz	r4, 585ee <create_chain+0x1d0>
		scl = clst;							/* Cluster to start to find */
   585ea:	4646      	mov	r6, r8
   585ec:	e773      	b.n	584d6 <create_chain+0xb8>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
   585ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   585f2:	4621      	mov	r1, r4
   585f4:	4628      	mov	r0, r5
   585f6:	f7ff fd71 	bl	580dc <put_fat>
		if (res == FR_OK && clst != 0) {
   585fa:	b948      	cbnz	r0, 58610 <create_chain+0x1f2>
   585fc:	f1b8 0f00 	cmp.w	r8, #0
   58600:	d099      	beq.n	58536 <create_chain+0x118>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
   58602:	4622      	mov	r2, r4
   58604:	4641      	mov	r1, r8
   58606:	4628      	mov	r0, r5
   58608:	f7ff fd68 	bl	580dc <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   5860c:	2800      	cmp	r0, #0
   5860e:	d092      	beq.n	58536 <create_chain+0x118>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
   58610:	2801      	cmp	r0, #1
   58612:	f47f af4a 	bne.w	584aa <create_chain+0x8c>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
   58616:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   5861a:	e710      	b.n	5843e <create_chain+0x20>

0005861c <dir_next>:
{
   5861c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
   58620:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
   58622:	6b07      	ldr	r7, [r0, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   58624:	7833      	ldrb	r3, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
   58626:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   58628:	2b04      	cmp	r3, #4
   5862a:	bf14      	ite	ne
   5862c:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
   58630:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
   58634:	42bb      	cmp	r3, r7
   58636:	bf9c      	itt	ls
   58638:	2300      	movls	r3, #0
   5863a:	6383      	strls	r3, [r0, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   5863c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   5863e:	4604      	mov	r4, r0
   58640:	4689      	mov	r9, r1
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   58642:	b173      	cbz	r3, 58662 <dir_next+0x46>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
   58644:	f3c7 0808 	ubfx	r8, r7, #0, #9
   58648:	f1b8 0f00 	cmp.w	r8, #0
   5864c:	d13c      	bne.n	586c8 <dir_next+0xac>
		if (dp->clust == 0) {	/* Static table */
   5864e:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
   58650:	3301      	adds	r3, #1
   58652:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
   58654:	b941      	cbnz	r1, 58668 <dir_next+0x4c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
   58656:	8933      	ldrh	r3, [r6, #8]
   58658:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
   5865c:	d834      	bhi.n	586c8 <dir_next+0xac>
				dp->sect = 0; return FR_NO_FILE;
   5865e:	2300      	movs	r3, #0
   58660:	63a3      	str	r3, [r4, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   58662:	2004      	movs	r0, #4
}
   58664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
   58668:	8973      	ldrh	r3, [r6, #10]
   5866a:	3b01      	subs	r3, #1
   5866c:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
   58670:	d12a      	bne.n	586c8 <dir_next+0xac>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   58672:	f7ff fc55 	bl	57f20 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   58676:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   58678:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   5867a:	d801      	bhi.n	58680 <dir_next+0x64>
   5867c:	2002      	movs	r0, #2
   5867e:	e7f1      	b.n	58664 <dir_next+0x48>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   58680:	1c42      	adds	r2, r0, #1
   58682:	d101      	bne.n	58688 <dir_next+0x6c>
   58684:	2001      	movs	r0, #1
   58686:	e7ed      	b.n	58664 <dir_next+0x48>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
   58688:	69f3      	ldr	r3, [r6, #28]
   5868a:	4283      	cmp	r3, r0
   5868c:	d816      	bhi.n	586bc <dir_next+0xa0>
					if (!stretch) {								/* If no stretch, report EOT */
   5868e:	f1b9 0f00 	cmp.w	r9, #0
   58692:	d0e4      	beq.n	5865e <dir_next+0x42>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
   58694:	4620      	mov	r0, r4
   58696:	6b61      	ldr	r1, [r4, #52]	; 0x34
   58698:	f7ff fec1 	bl	5841e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   5869c:	4605      	mov	r5, r0
   5869e:	b1c8      	cbz	r0, 586d4 <dir_next+0xb8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   586a0:	2801      	cmp	r0, #1
   586a2:	d0eb      	beq.n	5867c <dir_next+0x60>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   586a4:	1c43      	adds	r3, r0, #1
   586a6:	d0ed      	beq.n	58684 <dir_next+0x68>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
   586a8:	4601      	mov	r1, r0
   586aa:	4630      	mov	r0, r6
   586ac:	f7ff fe43 	bl	58336 <dir_clear>
   586b0:	2800      	cmp	r0, #0
   586b2:	d1e7      	bne.n	58684 <dir_next+0x68>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
   586b4:	79e3      	ldrb	r3, [r4, #7]
   586b6:	f043 0304 	orr.w	r3, r3, #4
   586ba:	71e3      	strb	r3, [r4, #7]
				dp->sect = clst2sect(fs, clst);
   586bc:	4629      	mov	r1, r5
   586be:	4630      	mov	r0, r6
				dp->clust = clst;		/* Initialize data for new cluster */
   586c0:	6365      	str	r5, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
   586c2:	f7ff fa37 	bl	57b34 <clst2sect>
   586c6:	63a0      	str	r0, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   586c8:	363c      	adds	r6, #60	; 0x3c
   586ca:	4446      	add	r6, r8
	return FR_OK;
   586cc:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
   586ce:	6327      	str	r7, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   586d0:	63e6      	str	r6, [r4, #60]	; 0x3c
	return FR_OK;
   586d2:	e7c7      	b.n	58664 <dir_next+0x48>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   586d4:	2007      	movs	r0, #7
   586d6:	e7c5      	b.n	58664 <dir_next+0x48>

000586d8 <dir_alloc>:
{
   586d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   586da:	460e      	mov	r6, r1
	res = dir_sdi(dp, 0);
   586dc:	2100      	movs	r1, #0
{
   586de:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   586e0:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
   586e2:	f7ff fcb2 	bl	5804a <dir_sdi>
	if (res == FR_OK) {
   586e6:	b998      	cbnz	r0, 58710 <dir_alloc+0x38>
		n = 0;
   586e8:	4605      	mov	r5, r0
			res = move_window(fs, dp->sect);
   586ea:	4638      	mov	r0, r7
   586ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   586ee:	f7ff fbc1 	bl	57e74 <move_window>
			if (res != FR_OK) break;
   586f2:	b968      	cbnz	r0, 58710 <dir_alloc+0x38>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
   586f4:	783a      	ldrb	r2, [r7, #0]
   586f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   586f8:	2a04      	cmp	r2, #4
   586fa:	781b      	ldrb	r3, [r3, #0]
   586fc:	d10c      	bne.n	58718 <dir_alloc+0x40>
   586fe:	061b      	lsls	r3, r3, #24
   58700:	d50e      	bpl.n	58720 <dir_alloc+0x48>
				n = 0;				/* Not a free entry, restart to search */
   58702:	4605      	mov	r5, r0
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
   58704:	2101      	movs	r1, #1
   58706:	4620      	mov	r0, r4
   58708:	f7ff ff88 	bl	5861c <dir_next>
		} while (res == FR_OK);
   5870c:	2800      	cmp	r0, #0
   5870e:	d0ec      	beq.n	586ea <dir_alloc+0x12>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   58710:	2804      	cmp	r0, #4
   58712:	bf08      	it	eq
   58714:	2007      	moveq	r0, #7
   58716:	e006      	b.n	58726 <dir_alloc+0x4e>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
   58718:	2be5      	cmp	r3, #229	; 0xe5
   5871a:	d001      	beq.n	58720 <dir_alloc+0x48>
   5871c:	2b00      	cmp	r3, #0
   5871e:	d1f0      	bne.n	58702 <dir_alloc+0x2a>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
   58720:	3501      	adds	r5, #1
   58722:	42b5      	cmp	r5, r6
   58724:	d1ee      	bne.n	58704 <dir_alloc+0x2c>
}
   58726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00058728 <dir_remove>:
{
   58728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   5872a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
{
   5872c:	4604      	mov	r4, r0
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   5872e:	1c4b      	adds	r3, r1, #1
	FATFS *fs = dp->obj.fs;
   58730:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
   58732:	6b06      	ldr	r6, [r0, #48]	; 0x30
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   58734:	d11c      	bne.n	58770 <dir_remove+0x48>
			fs->wflag = 1;
   58736:	2701      	movs	r7, #1
			res = move_window(fs, dp->sect);
   58738:	4628      	mov	r0, r5
   5873a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   5873c:	f7ff fb9a 	bl	57e74 <move_window>
			if (res != FR_OK) break;
   58740:	b990      	cbnz	r0, 58768 <dir_remove+0x40>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   58742:	782b      	ldrb	r3, [r5, #0]
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
   58744:	6be2      	ldr	r2, [r4, #60]	; 0x3c
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   58746:	2b04      	cmp	r3, #4
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
   58748:	bf12      	itee	ne
   5874a:	23e5      	movne	r3, #229	; 0xe5
   5874c:	7813      	ldrbeq	r3, [r2, #0]
   5874e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
   58752:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
   58754:	70ef      	strb	r7, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
   58756:	6b23      	ldr	r3, [r4, #48]	; 0x30
   58758:	42b3      	cmp	r3, r6
   5875a:	d20d      	bcs.n	58778 <dir_remove+0x50>
			res = dir_next(dp, 0);	/* Next entry */
   5875c:	2100      	movs	r1, #0
   5875e:	4620      	mov	r0, r4
   58760:	f7ff ff5c 	bl	5861c <dir_next>
		} while (res == FR_OK);
   58764:	2800      	cmp	r0, #0
   58766:	d0e7      	beq.n	58738 <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
   58768:	2804      	cmp	r0, #4
   5876a:	bf08      	it	eq
   5876c:	2002      	moveq	r0, #2
   5876e:	e003      	b.n	58778 <dir_remove+0x50>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   58770:	f7ff fc6b 	bl	5804a <dir_sdi>
	if (res == FR_OK) {
   58774:	2800      	cmp	r0, #0
   58776:	d0de      	beq.n	58736 <dir_remove+0xe>
}
   58778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0005877a <load_xdir>:
{
   5877a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5877c:	4604      	mov	r4, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
   5877e:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
   58780:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
   58782:	6905      	ldr	r5, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
   58784:	f7ff fb76 	bl	57e74 <move_window>
	if (res != FR_OK) return res;
   58788:	b920      	cbnz	r0, 58794 <load_xdir+0x1a>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
   5878a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   5878c:	781a      	ldrb	r2, [r3, #0]
   5878e:	2a85      	cmp	r2, #133	; 0x85
   58790:	d001      	beq.n	58796 <load_xdir+0x1c>
   58792:	2002      	movs	r0, #2
}
   58794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   58796:	462a      	mov	r2, r5
   58798:	f103 0120 	add.w	r1, r3, #32
   5879c:	f853 0b04 	ldr.w	r0, [r3], #4
   587a0:	428b      	cmp	r3, r1
   587a2:	f842 0b04 	str.w	r0, [r2], #4
   587a6:	d1f9      	bne.n	5879c <load_xdir+0x22>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
   587a8:	786e      	ldrb	r6, [r5, #1]
   587aa:	3601      	adds	r6, #1
   587ac:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
   587ae:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
   587b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   587b6:	d8ec      	bhi.n	58792 <load_xdir+0x18>
	res = dir_next(dp, 0);
   587b8:	2100      	movs	r1, #0
   587ba:	4620      	mov	r0, r4
   587bc:	f7ff ff2e 	bl	5861c <dir_next>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
   587c0:	2804      	cmp	r0, #4
   587c2:	d0e6      	beq.n	58792 <load_xdir+0x18>
	if (res != FR_OK) return res;
   587c4:	2800      	cmp	r0, #0
   587c6:	d1e5      	bne.n	58794 <load_xdir+0x1a>
	res = move_window(dp->obj.fs, dp->sect);
   587c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   587ca:	6820      	ldr	r0, [r4, #0]
   587cc:	f7ff fb52 	bl	57e74 <move_window>
	if (res != FR_OK) return res;
   587d0:	2800      	cmp	r0, #0
   587d2:	d1df      	bne.n	58794 <load_xdir+0x1a>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
   587d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   587d6:	781a      	ldrb	r2, [r3, #0]
   587d8:	2ac0      	cmp	r2, #192	; 0xc0
   587da:	d1da      	bne.n	58792 <load_xdir+0x18>
   587dc:	f105 0220 	add.w	r2, r5, #32
   587e0:	f103 0120 	add.w	r1, r3, #32
   587e4:	f853 0b04 	ldr.w	r0, [r3], #4
   587e8:	428b      	cmp	r3, r1
   587ea:	f842 0b04 	str.w	r0, [r2], #4
   587ee:	d1f9      	bne.n	587e4 <load_xdir+0x6a>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
   587f0:	220f      	movs	r2, #15
   587f2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   587f6:	332c      	adds	r3, #44	; 0x2c
   587f8:	fbb3 f3f2 	udiv	r3, r3, r2
   587fc:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   58800:	d3c7      	bcc.n	58792 <load_xdir+0x18>
	i = 2 * SZDIRE;	/* Name offset to load */
   58802:	2740      	movs	r7, #64	; 0x40
		res = dir_next(dp, 0);
   58804:	2100      	movs	r1, #0
   58806:	4620      	mov	r0, r4
   58808:	f7ff ff08 	bl	5861c <dir_next>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
   5880c:	2804      	cmp	r0, #4
   5880e:	d0c0      	beq.n	58792 <load_xdir+0x18>
		if (res != FR_OK) return res;
   58810:	2800      	cmp	r0, #0
   58812:	d1bf      	bne.n	58794 <load_xdir+0x1a>
		res = move_window(dp->obj.fs, dp->sect);
   58814:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   58816:	6820      	ldr	r0, [r4, #0]
   58818:	f7ff fb2c 	bl	57e74 <move_window>
		if (res != FR_OK) return res;
   5881c:	2800      	cmp	r0, #0
   5881e:	d1b9      	bne.n	58794 <load_xdir+0x1a>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
   58820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   58822:	781a      	ldrb	r2, [r3, #0]
   58824:	2ac1      	cmp	r2, #193	; 0xc1
   58826:	d1b4      	bne.n	58792 <load_xdir+0x18>
   58828:	19ea      	adds	r2, r5, r7
   5882a:	f103 0120 	add.w	r1, r3, #32
   5882e:	f853 0b04 	ldr.w	r0, [r3], #4
   58832:	428b      	cmp	r3, r1
   58834:	f842 0b04 	str.w	r0, [r2], #4
   58838:	d1f9      	bne.n	5882e <load_xdir+0xb4>
	} while ((i += SZDIRE) < sz_ent);
   5883a:	3720      	adds	r7, #32
   5883c:	42be      	cmp	r6, r7
   5883e:	d8e1      	bhi.n	58804 <load_xdir+0x8a>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
   58840:	4628      	mov	r0, r5
   58842:	f7ff f991 	bl	57b68 <xdir_sum>
   58846:	886b      	ldrh	r3, [r5, #2]
   58848:	1a18      	subs	r0, r3, r0
   5884a:	bf18      	it	ne
   5884c:	2001      	movne	r0, #1
   5884e:	0040      	lsls	r0, r0, #1
   58850:	e7a0      	b.n	58794 <load_xdir+0x1a>

00058852 <store_xdir>:
{
   58852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
   58854:	6803      	ldr	r3, [r0, #0]
{
   58856:	4605      	mov	r5, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
   58858:	691c      	ldr	r4, [r3, #16]
		dp->obj.fs->wflag = 1;
   5885a:	2701      	movs	r7, #1
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
   5885c:	4620      	mov	r0, r4
   5885e:	f7ff f983 	bl	57b68 <xdir_sum>
	*ptr++ = (BYTE)val; val >>= 8;
   58862:	70a0      	strb	r0, [r4, #2]
   58864:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
   58866:	70e0      	strb	r0, [r4, #3]
	res = dir_sdi(dp, dp->blk_ofs);
   58868:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   5886a:	4628      	mov	r0, r5
	nent = dirb[XDIR_NumSec] + 1;
   5886c:	7866      	ldrb	r6, [r4, #1]
	res = dir_sdi(dp, dp->blk_ofs);
   5886e:	f7ff fbec 	bl	5804a <dir_sdi>
	while (res == FR_OK) {
   58872:	b120      	cbz	r0, 5887e <store_xdir+0x2c>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
   58874:	2802      	cmp	r0, #2
   58876:	bf28      	it	cs
   58878:	2002      	movcs	r0, #2
}
   5887a:	b2c0      	uxtb	r0, r0
   5887c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = move_window(dp->obj.fs, dp->sect);
   5887e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   58880:	6828      	ldr	r0, [r5, #0]
   58882:	f7ff faf7 	bl	57e74 <move_window>
		if (res != FR_OK) break;
   58886:	2800      	cmp	r0, #0
   58888:	d1f4      	bne.n	58874 <store_xdir+0x22>
   5888a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   5888c:	f104 0220 	add.w	r2, r4, #32
   58890:	f854 1b04 	ldr.w	r1, [r4], #4
   58894:	4294      	cmp	r4, r2
   58896:	f843 1b04 	str.w	r1, [r3], #4
   5889a:	d1f9      	bne.n	58890 <store_xdir+0x3e>
		dp->obj.fs->wflag = 1;
   5889c:	682b      	ldr	r3, [r5, #0]
   5889e:	70df      	strb	r7, [r3, #3]
		if (--nent == 0) break;
   588a0:	2e00      	cmp	r6, #0
   588a2:	d0e7      	beq.n	58874 <store_xdir+0x22>
		res = dir_next(dp, 0);
   588a4:	2100      	movs	r1, #0
   588a6:	4628      	mov	r0, r5
   588a8:	f7ff feb8 	bl	5861c <dir_next>
   588ac:	3e01      	subs	r6, #1
   588ae:	e7e0      	b.n	58872 <store_xdir+0x20>

000588b0 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
   588b0:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
   588b2:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
   588b4:	bf04      	itt	eq
   588b6:	8a8a      	ldrheq	r2, [r1, #20]
   588b8:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
   588bc:	4618      	mov	r0, r3
   588be:	4770      	bx	lr

000588c0 <f_open>:
{
   588c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   588c4:	b098      	sub	sp, #96	; 0x60
   588c6:	4616      	mov	r6, r2
	if (!fp) return FR_INVALID_OBJECT;
   588c8:	4604      	mov	r4, r0
{
   588ca:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
   588cc:	2800      	cmp	r0, #0
   588ce:	f000 812a 	beq.w	58b26 <f_open+0x266>
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
   588d2:	f002 083f 	and.w	r8, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
   588d6:	4642      	mov	r2, r8
   588d8:	a903      	add	r1, sp, #12
   588da:	a801      	add	r0, sp, #4
   588dc:	f7f4 fed2 	bl	4d684 <mount_volume>
	if (res == FR_OK) {
   588e0:	4607      	mov	r7, r0
   588e2:	b948      	cbnz	r0, 588f8 <f_open+0x38>
		dj.obj.fs = fs;
   588e4:	9d03      	ldr	r5, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
   588e6:	9901      	ldr	r1, [sp, #4]
   588e8:	a804      	add	r0, sp, #16
		dj.obj.fs = fs;
   588ea:	9504      	str	r5, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
   588ec:	f7f5 fbd0 	bl	4e090 <follow_path>
		if (res == FR_OK) {
   588f0:	b130      	cbz	r0, 58900 <f_open+0x40>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   588f2:	f016 0f1c 	tst.w	r6, #28
   588f6:	d117      	bne.n	58928 <f_open+0x68>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   588f8:	2300      	movs	r3, #0
   588fa:	4607      	mov	r7, r0
   588fc:	6023      	str	r3, [r4, #0]
   588fe:	e104      	b.n	58b0a <f_open+0x24a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
   58900:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
   58904:	2b00      	cmp	r3, #0
   58906:	f2c0 8108 	blt.w	58b1a <f_open+0x25a>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   5890a:	f016 0f1c 	tst.w	r6, #28
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   5890e:	f89d 3016 	ldrb.w	r3, [sp, #22]
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   58912:	f040 809e 	bne.w	58a52 <f_open+0x192>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
   58916:	06d8      	lsls	r0, r3, #27
   58918:	f100 8101 	bmi.w	58b1e <f_open+0x25e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
   5891c:	07b1      	lsls	r1, r6, #30
   5891e:	d543      	bpl.n	589a8 <f_open+0xe8>
   58920:	07da      	lsls	r2, r3, #31
   58922:	d541      	bpl.n	589a8 <f_open+0xe8>
					res = FR_DENIED;
   58924:	2007      	movs	r0, #7
   58926:	e7e7      	b.n	588f8 <f_open+0x38>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
   58928:	2804      	cmp	r0, #4
   5892a:	d1e5      	bne.n	588f8 <f_open+0x38>
					res = dir_register(&dj);
   5892c:	a804      	add	r0, sp, #16
   5892e:	f7f5 f9db 	bl	4dce8 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   58932:	2800      	cmp	r0, #0
   58934:	d1e0      	bne.n	588f8 <f_open+0x38>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
   58936:	f048 0808 	orr.w	r8, r8, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   5893a:	f018 0f08 	tst.w	r8, #8
   5893e:	d038      	beq.n	589b2 <f_open+0xf2>
				if (fs->fs_type == FS_EXFAT) {
   58940:	782b      	ldrb	r3, [r5, #0]
   58942:	2b04      	cmp	r3, #4
   58944:	f040 808e 	bne.w	58a64 <f_open+0x1a4>
					init_alloc_info(fs, &fp->obj);
   58948:	4621      	mov	r1, r4
   5894a:	4628      	mov	r0, r5
					fp->obj.fs = fs;
   5894c:	6025      	str	r5, [r4, #0]
					init_alloc_info(fs, &fp->obj);
   5894e:	f7ff f920 	bl	57b92 <init_alloc_info>
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
   58952:	6928      	ldr	r0, [r5, #16]
__ssp_bos_icheck3(memset, void *, int)
   58954:	221e      	movs	r2, #30
   58956:	2100      	movs	r1, #0
   58958:	3002      	adds	r0, #2
   5895a:	f002 fab8 	bl	5aece <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
   5895e:	6928      	ldr	r0, [r5, #16]
   58960:	221a      	movs	r2, #26
   58962:	2100      	movs	r1, #0
   58964:	3026      	adds	r0, #38	; 0x26
   58966:	f002 fab2 	bl	5aece <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
   5896a:	2220      	movs	r2, #32
   5896c:	692b      	ldr	r3, [r5, #16]
					res = store_xdir(&dj);
   5896e:	a804      	add	r0, sp, #16
					fs->dirbuf[XDIR_Attr] = AM_ARC;
   58970:	711a      	strb	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   58972:	2200      	movs	r2, #0
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
   58974:	692b      	ldr	r3, [r5, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   58976:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
   58978:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val; val >>= 8;
   5897a:	2221      	movs	r2, #33	; 0x21
   5897c:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val;
   5897e:	2250      	movs	r2, #80	; 0x50
   58980:	72da      	strb	r2, [r3, #11]
					fs->dirbuf[XDIR_GenFlags] = 1;
   58982:	2201      	movs	r2, #1
   58984:	692b      	ldr	r3, [r5, #16]
   58986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
   5898a:	f7ff ff62 	bl	58852 <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
   5898e:	2800      	cmp	r0, #0
   58990:	d1b2      	bne.n	588f8 <f_open+0x38>
   58992:	68a1      	ldr	r1, [r4, #8]
   58994:	b141      	cbz	r1, 589a8 <f_open+0xe8>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   58996:	4602      	mov	r2, r0
   58998:	4620      	mov	r0, r4
   5899a:	f7ff fc4d 	bl	58238 <remove_chain>
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
   5899e:	68a6      	ldr	r6, [r4, #8]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   589a0:	3e01      	subs	r6, #1
   589a2:	616e      	str	r6, [r5, #20]
		if (res == FR_OK) {
   589a4:	2800      	cmp	r0, #0
   589a6:	d1a7      	bne.n	588f8 <f_open+0x38>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
   589a8:	f018 0f08 	tst.w	r8, #8
   589ac:	bf18      	it	ne
   589ae:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   589b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
			fp->dir_ptr = dj.dir;
   589b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   589b6:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
   589b8:	64e1      	str	r1, [r4, #76]	; 0x4c
			if (fs->fs_type == FS_EXFAT) {
   589ba:	7828      	ldrb	r0, [r5, #0]
   589bc:	2804      	cmp	r0, #4
   589be:	f040 808c 	bne.w	58ada <f_open+0x21a>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
   589c2:	9b06      	ldr	r3, [sp, #24]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
   589c4:	f89d 2017 	ldrb.w	r2, [sp, #23]
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
   589c8:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
   589ca:	9b08      	ldr	r3, [sp, #32]
				init_alloc_info(fs, &fp->obj);
   589cc:	4621      	mov	r1, r4
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
   589ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   589d2:	4313      	orrs	r3, r2
   589d4:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
   589d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
				init_alloc_info(fs, &fp->obj);
   589d8:	4628      	mov	r0, r5
				fp->obj.c_ofs = dj.blk_ofs;
   589da:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
   589dc:	f7ff f8d9 	bl	57b92 <init_alloc_info>
			fp->obj.fs = fs;	/* Validate the file object */
   589e0:	6025      	str	r5, [r4, #0]
			fp->obj.id = fs->id;
   589e2:	88eb      	ldrh	r3, [r5, #6]
			fp->err = 0;		/* Clear error flag */
   589e4:	f04f 0a00 	mov.w	sl, #0
			fp->fptr = 0;		/* Set file pointer top of the file */
   589e8:	2200      	movs	r2, #0
			fp->obj.id = fs->id;
   589ea:	80a3      	strh	r3, [r4, #4]
			fp->fptr = 0;		/* Set file pointer top of the file */
   589ec:	2300      	movs	r3, #0
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   589ee:	f018 0f20 	tst.w	r8, #32
			fp->fptr = 0;		/* Set file pointer top of the file */
   589f2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			fp->flag = mode;	/* Set file access mode */
   589f6:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
			fp->err = 0;		/* Clear error flag */
   589fa:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
			fp->sect = 0;		/* Invalidate current data sector */
   589fe:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   58a02:	f000 8082 	beq.w	58b0a <f_open+0x24a>
   58a06:	e9d4 6804 	ldrd	r6, r8, [r4, #16]
   58a0a:	ea56 0308 	orrs.w	r3, r6, r8
   58a0e:	d07c      	beq.n	58b0a <f_open+0x24a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
   58a10:	e9c4 680e 	strd	r6, r8, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   58a14:	f8b5 900a 	ldrh.w	r9, [r5, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
   58a18:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   58a1a:	ea4f 2949 	mov.w	r9, r9, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   58a1e:	45b1      	cmp	r9, r6
   58a20:	eb7a 0308 	sbcs.w	r3, sl, r8
   58a24:	d264      	bcs.n	58af0 <f_open+0x230>
					clst = get_fat(&fp->obj, clst);
   58a26:	4620      	mov	r0, r4
   58a28:	f7ff fa7a 	bl	57f20 <get_fat>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   58a2c:	ebb6 0609 	subs.w	r6, r6, r9
   58a30:	f168 0800 	sbc.w	r8, r8, #0
					if (clst <= 1) res = FR_INT_ERR;
   58a34:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
   58a36:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
   58a38:	d96b      	bls.n	58b12 <f_open+0x252>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   58a3a:	1c43      	adds	r3, r0, #1
   58a3c:	d06b      	beq.n	58b16 <f_open+0x256>
   58a3e:	45b1      	cmp	r9, r6
   58a40:	eb7a 0308 	sbcs.w	r3, sl, r8
   58a44:	d3ef      	bcc.n	58a26 <f_open+0x166>
   58a46:	2000      	movs	r0, #0
				fp->clust = clst;
   58a48:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   58a4a:	2800      	cmp	r0, #0
   58a4c:	f47f af54 	bne.w	588f8 <f_open+0x38>
   58a50:	e04f      	b.n	58af2 <f_open+0x232>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   58a52:	f013 0f11 	tst.w	r3, #17
   58a56:	f47f af65 	bne.w	58924 <f_open+0x64>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   58a5a:	0776      	lsls	r6, r6, #29
   58a5c:	f57f af6d 	bpl.w	5893a <f_open+0x7a>
   58a60:	2008      	movs	r0, #8
   58a62:	e749      	b.n	588f8 <f_open+0x38>
	*ptr++ = (BYTE)val; val >>= 8;
   58a64:	f04f 0900 	mov.w	r9, #0
	*ptr++ = (BYTE)val;
   58a68:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
   58a6a:	2121      	movs	r1, #33	; 0x21
					st_dword(dj.dir + DIR_CrtTime, tm);
   58a6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val;
   58a6e:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
   58a70:	f883 900e 	strb.w	r9, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
   58a74:	f883 900f 	strb.w	r9, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
   58a78:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, tm);
   58a7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val;
   58a7c:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
   58a7e:	f883 9016 	strb.w	r9, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
   58a82:	f883 9017 	strb.w	r9, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
   58a86:	7619      	strb	r1, [r3, #24]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   58a88:	9913      	ldr	r1, [sp, #76]	; 0x4c
   58a8a:	7828      	ldrb	r0, [r5, #0]
   58a8c:	f7ff ff10 	bl	588b0 <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
   58a90:	2320      	movs	r3, #32
   58a92:	72cb      	strb	r3, [r1, #11]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   58a94:	4606      	mov	r6, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   58a96:	464a      	mov	r2, r9
   58a98:	4628      	mov	r0, r5
   58a9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   58a9c:	f7ff f9de 	bl	57e5c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
   58aa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
   58aa2:	f883 901c 	strb.w	r9, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
   58aa6:	f883 901d 	strb.w	r9, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
   58aaa:	f883 901e 	strb.w	r9, [r3, #30]
	*ptr++ = (BYTE)val;
   58aae:	f883 901f 	strb.w	r9, [r3, #31]
					fs->wflag = 1;
   58ab2:	2301      	movs	r3, #1
   58ab4:	70eb      	strb	r3, [r5, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
   58ab6:	2e00      	cmp	r6, #0
   58ab8:	f43f af76 	beq.w	589a8 <f_open+0xe8>
						res = remove_chain(&dj.obj, cl, 0);
   58abc:	464a      	mov	r2, r9
   58abe:	4631      	mov	r1, r6
   58ac0:	a804      	add	r0, sp, #16
						sc = fs->winsect;
   58ac2:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
   58ac6:	f7ff fbb7 	bl	58238 <remove_chain>
						if (res == FR_OK) {
   58aca:	2800      	cmp	r0, #0
   58acc:	f47f af14 	bne.w	588f8 <f_open+0x38>
							res = move_window(fs, sc);
   58ad0:	4651      	mov	r1, sl
   58ad2:	4628      	mov	r0, r5
   58ad4:	f7ff f9ce 	bl	57e74 <move_window>
   58ad8:	e762      	b.n	589a0 <f_open+0xe0>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
   58ada:	f7ff fee9 	bl	588b0 <ld_clust.isra.0>
   58ade:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   58ae0:	f101 001c 	add.w	r0, r1, #28
   58ae4:	f7ff f809 	bl	57afa <ld_dword>
   58ae8:	2300      	movs	r3, #0
   58aea:	6120      	str	r0, [r4, #16]
   58aec:	6163      	str	r3, [r4, #20]
   58aee:	e777      	b.n	589e0 <f_open+0x120>
				fp->clust = clst;
   58af0:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   58af2:	f3c6 0308 	ubfx	r3, r6, #0, #9
   58af6:	b143      	cbz	r3, 58b0a <f_open+0x24a>
					sc = clst2sect(fs, clst);
   58af8:	4628      	mov	r0, r5
   58afa:	f7ff f81b 	bl	57b34 <clst2sect>
					if (sc == 0) {
   58afe:	b180      	cbz	r0, 58b22 <f_open+0x262>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
   58b00:	0a76      	lsrs	r6, r6, #9
   58b02:	ea46 56c8 	orr.w	r6, r6, r8, lsl #23
   58b06:	4430      	add	r0, r6
   58b08:	6460      	str	r0, [r4, #68]	; 0x44
}
   58b0a:	4638      	mov	r0, r7
   58b0c:	b018      	add	sp, #96	; 0x60
   58b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
   58b12:	2002      	movs	r0, #2
   58b14:	e798      	b.n	58a48 <f_open+0x188>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
   58b16:	2001      	movs	r0, #1
   58b18:	e796      	b.n	58a48 <f_open+0x188>
				res = FR_INVALID_NAME;
   58b1a:	2006      	movs	r0, #6
   58b1c:	e6ec      	b.n	588f8 <f_open+0x38>
					res = FR_NO_FILE;
   58b1e:	2004      	movs	r0, #4
   58b20:	e6ea      	b.n	588f8 <f_open+0x38>
						res = FR_INT_ERR;
   58b22:	2002      	movs	r0, #2
   58b24:	e6e8      	b.n	588f8 <f_open+0x38>
	if (!fp) return FR_INVALID_OBJECT;
   58b26:	2709      	movs	r7, #9
   58b28:	e7ef      	b.n	58b0a <f_open+0x24a>

00058b2a <f_read>:
{
   58b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   58b2e:	469a      	mov	sl, r3
	*br = 0;	/* Clear read byte counter */
   58b30:	2300      	movs	r3, #0
{
   58b32:	b085      	sub	sp, #20
   58b34:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
   58b36:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   58b3a:	a903      	add	r1, sp, #12
{
   58b3c:	4604      	mov	r4, r0
   58b3e:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   58b40:	f7ff f83e 	bl	57bc0 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   58b44:	4606      	mov	r6, r0
   58b46:	bb78      	cbnz	r0, 58ba8 <f_read+0x7e>
   58b48:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
   58b4c:	bb66      	cbnz	r6, 58ba8 <f_read+0x7e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   58b4e:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
   58b52:	f01b 0301 	ands.w	r3, fp, #1
   58b56:	9300      	str	r3, [sp, #0]
   58b58:	f000 8090 	beq.w	58c7c <f_read+0x152>
	remain = fp->obj.objsize - fp->fptr;
   58b5c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   58b60:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   58b64:	1a1b      	subs	r3, r3, r0
   58b66:	eb62 0201 	sbc.w	r2, r2, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   58b6a:	42bb      	cmp	r3, r7
   58b6c:	f172 0200 	sbcs.w	r2, r2, #0
   58b70:	d200      	bcs.n	58b74 <f_read+0x4a>
   58b72:	461f      	mov	r7, r3
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   58b74:	b1c7      	cbz	r7, 58ba8 <f_read+0x7e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
   58b76:	e9d4 200e 	ldrd	r2, r0, [r4, #56]	; 0x38
   58b7a:	f3c2 0308 	ubfx	r3, r2, #0, #9
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
   58b7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
   58b82:	2b00      	cmp	r3, #0
   58b84:	d161      	bne.n	58c4a <f_read+0x120>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
   58b86:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   58b8a:	0a51      	lsrs	r1, r2, #9
   58b8c:	3b01      	subs	r3, #1
   58b8e:	ea41 51c0 	orr.w	r1, r1, r0, lsl #23
			if (csect == 0) {					/* On the cluster boundary? */
   58b92:	ea13 0b01 	ands.w	fp, r3, r1
   58b96:	d118      	bne.n	58bca <f_read+0xa0>
				if (fp->fptr == 0) {			/* On the top of the file? */
   58b98:	4302      	orrs	r2, r0
   58b9a:	d109      	bne.n	58bb0 <f_read+0x86>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
   58b9c:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
   58b9e:	2801      	cmp	r0, #1
   58ba0:	d80b      	bhi.n	58bba <f_read+0x90>
   58ba2:	2602      	movs	r6, #2
   58ba4:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
}
   58ba8:	4630      	mov	r0, r6
   58baa:	b005      	add	sp, #20
   58bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
   58bb0:	4620      	mov	r0, r4
   58bb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
   58bb4:	f7ff f9b4 	bl	57f20 <get_fat>
   58bb8:	e7f1      	b.n	58b9e <f_read+0x74>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   58bba:	1c43      	adds	r3, r0, #1
   58bbc:	d104      	bne.n	58bc8 <f_read+0x9e>
   58bbe:	2301      	movs	r3, #1
   58bc0:	9e00      	ldr	r6, [sp, #0]
   58bc2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   58bc6:	e7ef      	b.n	58ba8 <f_read+0x7e>
				fp->clust = clst;				/* Update current cluster */
   58bc8:	6420      	str	r0, [r4, #64]	; 0x40
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   58bca:	4640      	mov	r0, r8
   58bcc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   58bce:	f7fe ffb1 	bl	57b34 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   58bd2:	2800      	cmp	r0, #0
   58bd4:	d0e5      	beq.n	58ba2 <f_read+0x78>
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
   58bd6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
   58bda:	eb0b 0200 	add.w	r2, fp, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
   58bde:	d333      	bcc.n	58c48 <f_read+0x11e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   58be0:	f8b8 100a 	ldrh.w	r1, [r8, #10]
   58be4:	eb0b 2057 	add.w	r0, fp, r7, lsr #9
   58be8:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
   58bea:	ea4f 2557 	mov.w	r5, r7, lsr #9
					cc = fs->csize - csect;
   58bee:	bf88      	it	hi
   58bf0:	eba1 050b 	subhi.w	r5, r1, fp
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   58bf4:	462b      	mov	r3, r5
   58bf6:	4649      	mov	r1, r9
   58bf8:	f898 0001 	ldrb.w	r0, [r8, #1]
   58bfc:	9201      	str	r2, [sp, #4]
   58bfe:	f7f6 fa5b 	bl	4f0b8 <disk_read>
   58c02:	2800      	cmp	r0, #0
   58c04:	d1db      	bne.n	58bbe <f_read+0x94>
				if (fs->wflag && fs->winsect - sect < cc) {
   58c06:	f898 3003 	ldrb.w	r3, [r8, #3]
   58c0a:	b16b      	cbz	r3, 58c28 <f_read+0xfe>
   58c0c:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
   58c10:	9a01      	ldr	r2, [sp, #4]
   58c12:	1a80      	subs	r0, r0, r2
   58c14:	42a8      	cmp	r0, r5
   58c16:	d207      	bcs.n	58c28 <f_read+0xfe>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   58c18:	f44f 7200 	mov.w	r2, #512	; 0x200
   58c1c:	f108 013c 	add.w	r1, r8, #60	; 0x3c
   58c20:	eb09 2040 	add.w	r0, r9, r0, lsl #9
   58c24:	f002 f919 	bl	5ae5a <memcpy>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
   58c28:	026d      	lsls	r5, r5, #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   58c2a:	f8da 3000 	ldr.w	r3, [sl]
   58c2e:	1b7f      	subs	r7, r7, r5
   58c30:	442b      	add	r3, r5
   58c32:	f8ca 3000 	str.w	r3, [sl]
   58c36:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   58c3a:	195b      	adds	r3, r3, r5
   58c3c:	f142 0200 	adc.w	r2, r2, #0
   58c40:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
   58c44:	44a9      	add	r9, r5
   58c46:	e795      	b.n	58b74 <f_read+0x4a>
			fp->sect = sect;
   58c48:	6462      	str	r2, [r4, #68]	; 0x44
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   58c4a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   58c4c:	4640      	mov	r0, r8
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   58c4e:	f3c5 0508 	ubfx	r5, r5, #0, #9
   58c52:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
   58c56:	42bd      	cmp	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   58c58:	6c61      	ldr	r1, [r4, #68]	; 0x44
   58c5a:	bf28      	it	cs
   58c5c:	463d      	movcs	r5, r7
   58c5e:	f7ff f909 	bl	57e74 <move_window>
   58c62:	2800      	cmp	r0, #0
   58c64:	d1ab      	bne.n	58bbe <f_read+0x94>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
   58c66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   58c68:	f108 083c 	add.w	r8, r8, #60	; 0x3c
   58c6c:	f3c1 0108 	ubfx	r1, r1, #0, #9
   58c70:	462a      	mov	r2, r5
   58c72:	4648      	mov	r0, r9
   58c74:	4441      	add	r1, r8
   58c76:	f002 f8f0 	bl	5ae5a <memcpy>
   58c7a:	e7d6      	b.n	58c2a <f_read+0x100>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   58c7c:	2607      	movs	r6, #7
   58c7e:	e793      	b.n	58ba8 <f_read+0x7e>

00058c80 <f_write>:
{
   58c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   58c84:	4699      	mov	r9, r3
	*bw = 0;	/* Clear write byte counter */
   58c86:	2300      	movs	r3, #0
{
   58c88:	b085      	sub	sp, #20
   58c8a:	4688      	mov	r8, r1
	*bw = 0;	/* Clear write byte counter */
   58c8c:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   58c90:	a903      	add	r1, sp, #12
{
   58c92:	4604      	mov	r4, r0
   58c94:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   58c96:	f7fe ff93 	bl	57bc0 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   58c9a:	4605      	mov	r5, r0
   58c9c:	bb80      	cbnz	r0, 58d00 <f_write+0x80>
   58c9e:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
   58ca2:	bb6d      	cbnz	r5, 58d00 <f_write+0x80>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   58ca4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   58ca8:	079a      	lsls	r2, r3, #30
   58caa:	f140 80c2 	bpl.w	58e32 <f_write+0x1b2>
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   58cae:	9e03      	ldr	r6, [sp, #12]
   58cb0:	7833      	ldrb	r3, [r6, #0]
   58cb2:	2b04      	cmp	r3, #4
   58cb4:	d003      	beq.n	58cbe <f_write+0x3e>
   58cb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   58cb8:	42fb      	cmn	r3, r7
   58cba:	d300      	bcc.n	58cbe <f_write+0x3e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   58cbc:	43df      	mvns	r7, r3
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   58cbe:	b1cf      	cbz	r7, 58cf4 <f_write+0x74>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
   58cc0:	e9d4 310e 	ldrd	r3, r1, [r4, #56]	; 0x38
   58cc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   58cc8:	2a00      	cmp	r2, #0
   58cca:	f040 8092 	bne.w	58df2 <f_write+0x172>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
   58cce:	f8b6 b00a 	ldrh.w	fp, [r6, #10]
   58cd2:	0a5a      	lsrs	r2, r3, #9
   58cd4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   58cd8:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
			if (csect == 0) {				/* On the cluster boundary? */
   58cdc:	ea1b 0b02 	ands.w	fp, fp, r2
   58ce0:	d122      	bne.n	58d28 <f_write+0xa8>
				if (fp->fptr == 0) {		/* On the top of the file? */
   58ce2:	430b      	orrs	r3, r1
   58ce4:	d110      	bne.n	58d08 <f_write+0x88>
					clst = fp->obj.sclust;	/* Follow from the origin */
   58ce6:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
   58ce8:	b981      	cbnz	r1, 58d0c <f_write+0x8c>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   58cea:	4620      	mov	r0, r4
   58cec:	f7ff fb97 	bl	5841e <create_chain>
   58cf0:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   58cf2:	b958      	cbnz	r0, 58d0c <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
   58cf4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   58cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   58cfc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   58d00:	4628      	mov	r0, r5
   58d02:	b005      	add	sp, #20
   58d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   58d08:	6c21      	ldr	r1, [r4, #64]	; 0x40
   58d0a:	e7ee      	b.n	58cea <f_write+0x6a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   58d0c:	2901      	cmp	r1, #1
   58d0e:	d103      	bne.n	58d18 <f_write+0x98>
   58d10:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   58d12:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
   58d16:	e7f3      	b.n	58d00 <f_write+0x80>
   58d18:	1c4b      	adds	r3, r1, #1
   58d1a:	d101      	bne.n	58d20 <f_write+0xa0>
   58d1c:	2501      	movs	r5, #1
   58d1e:	e7f8      	b.n	58d12 <f_write+0x92>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   58d20:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
   58d22:	6421      	str	r1, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   58d24:	b903      	cbnz	r3, 58d28 <f_write+0xa8>
   58d26:	60a1      	str	r1, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
   58d28:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   58d2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   58d2c:	429a      	cmp	r2, r3
   58d2e:	d104      	bne.n	58d3a <f_write+0xba>
   58d30:	4630      	mov	r0, r6
   58d32:	f7fe ff5f 	bl	57bf4 <sync_window>
   58d36:	2800      	cmp	r0, #0
   58d38:	d1f0      	bne.n	58d1c <f_write+0x9c>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   58d3a:	4630      	mov	r0, r6
   58d3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   58d3e:	f7fe fef9 	bl	57b34 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   58d42:	2800      	cmp	r0, #0
   58d44:	d0e4      	beq.n	58d10 <f_write+0x90>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   58d46:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
   58d4a:	eb0b 0a00 	add.w	sl, fp, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   58d4e:	d33f      	bcc.n	58dd0 <f_write+0x150>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   58d50:	8972      	ldrh	r2, [r6, #10]
   58d52:	eb0b 2157 	add.w	r1, fp, r7, lsr #9
   58d56:	4291      	cmp	r1, r2
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
   58d58:	ea4f 2357 	mov.w	r3, r7, lsr #9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   58d5c:	4641      	mov	r1, r8
					cc = fs->csize - csect;
   58d5e:	bf88      	it	hi
   58d60:	eba2 030b 	subhi.w	r3, r2, fp
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   58d64:	7870      	ldrb	r0, [r6, #1]
   58d66:	4652      	mov	r2, sl
   58d68:	9301      	str	r3, [sp, #4]
   58d6a:	f7f6 f9b1 	bl	4f0d0 <disk_write>
   58d6e:	4683      	mov	fp, r0
   58d70:	2800      	cmp	r0, #0
   58d72:	d1d3      	bne.n	58d1c <f_write+0x9c>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   58d74:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   58d76:	9b01      	ldr	r3, [sp, #4]
   58d78:	eba1 010a 	sub.w	r1, r1, sl
   58d7c:	4299      	cmp	r1, r3
   58d7e:	d20a      	bcs.n	58d96 <f_write+0x116>
   58d80:	f44f 7200 	mov.w	r2, #512	; 0x200
   58d84:	eb08 2141 	add.w	r1, r8, r1, lsl #9
   58d88:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   58d8c:	f002 f865 	bl	5ae5a <memcpy>
					fs->wflag = 0;
   58d90:	9b01      	ldr	r3, [sp, #4]
   58d92:	f886 b003 	strb.w	fp, [r6, #3]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
   58d96:	ea4f 2b43 	mov.w	fp, r3, lsl #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   58d9a:	f8d9 3000 	ldr.w	r3, [r9]
   58d9e:	eba7 070b 	sub.w	r7, r7, fp
   58da2:	445b      	add	r3, fp
   58da4:	f8c9 3000 	str.w	r3, [r9]
   58da8:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   58dac:	eb1b 0303 	adds.w	r3, fp, r3
   58db0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   58db4:	f142 0200 	adc.w	r2, r2, #0
   58db8:	4298      	cmp	r0, r3
   58dba:	eb71 0c02 	sbcs.w	ip, r1, r2
   58dbe:	bf3c      	itt	cc
   58dc0:	4618      	movcc	r0, r3
   58dc2:	4611      	movcc	r1, r2
   58dc4:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
   58dc8:	e9c4 0104 	strd	r0, r1, [r4, #16]
   58dcc:	44d8      	add	r8, fp
   58dce:	e776      	b.n	58cbe <f_write+0x3e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
   58dd0:	e9d4 020e 	ldrd	r0, r2, [r4, #56]	; 0x38
   58dd4:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   58dd8:	4288      	cmp	r0, r1
   58dda:	eb72 0303 	sbcs.w	r3, r2, r3
   58dde:	d306      	bcc.n	58dee <f_write+0x16e>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
   58de0:	4630      	mov	r0, r6
   58de2:	f7fe ff07 	bl	57bf4 <sync_window>
   58de6:	2800      	cmp	r0, #0
   58de8:	d198      	bne.n	58d1c <f_write+0x9c>
				fs->winsect = sect;
   58dea:	f8c6 a038 	str.w	sl, [r6, #56]	; 0x38
			fp->sect = sect;
   58dee:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   58df2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   58df4:	f8dd a00c 	ldr.w	sl, [sp, #12]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   58df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   58dfc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
   58e00:	42bb      	cmp	r3, r7
   58e02:	bf28      	it	cs
   58e04:	463b      	movcs	r3, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   58e06:	4650      	mov	r0, sl
   58e08:	6c61      	ldr	r1, [r4, #68]	; 0x44
   58e0a:	469b      	mov	fp, r3
   58e0c:	f7ff f832 	bl	57e74 <move_window>
   58e10:	2800      	cmp	r0, #0
   58e12:	d183      	bne.n	58d1c <f_write+0x9c>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
   58e14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   58e16:	f10a 003c 	add.w	r0, sl, #60	; 0x3c
   58e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   58e1e:	4418      	add	r0, r3
   58e20:	465a      	mov	r2, fp
   58e22:	4641      	mov	r1, r8
   58e24:	f002 f819 	bl	5ae5a <memcpy>
		fs->wflag = 1;
   58e28:	f04f 0301 	mov.w	r3, #1
   58e2c:	f88a 3003 	strb.w	r3, [sl, #3]
   58e30:	e7b3      	b.n	58d9a <f_write+0x11a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   58e32:	2507      	movs	r5, #7
   58e34:	e764      	b.n	58d00 <f_write+0x80>

00058e36 <f_sync>:
{
   58e36:	b5f0      	push	{r4, r5, r6, r7, lr}
   58e38:	b097      	sub	sp, #92	; 0x5c
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   58e3a:	a901      	add	r1, sp, #4
{
   58e3c:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   58e3e:	f7fe febf 	bl	57bc0 <validate>
	if (res == FR_OK) {
   58e42:	4604      	mov	r4, r0
   58e44:	2800      	cmp	r0, #0
   58e46:	d16a      	bne.n	58f1e <f_sync+0xe8>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
   58e48:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   58e4c:	f014 0440 	ands.w	r4, r4, #64	; 0x40
   58e50:	d065      	beq.n	58f1e <f_sync+0xe8>
			if (fs->fs_type == FS_EXFAT) {
   58e52:	9e01      	ldr	r6, [sp, #4]
   58e54:	7833      	ldrb	r3, [r6, #0]
   58e56:	2b04      	cmp	r3, #4
   58e58:	d164      	bne.n	58f24 <f_sync+0xee>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
   58e5a:	4628      	mov	r0, r5
   58e5c:	f7ff f9d4 	bl	58208 <fill_first_frag>
				if (res == FR_OK) {
   58e60:	4604      	mov	r4, r0
   58e62:	2800      	cmp	r0, #0
   58e64:	d15b      	bne.n	58f1e <f_sync+0xe8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
   58e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   58e6a:	4628      	mov	r0, r5
   58e6c:	6c29      	ldr	r1, [r5, #64]	; 0x40
   58e6e:	f7ff f9b3 	bl	581d8 <fill_last_frag>
				if (res == FR_OK) {
   58e72:	4604      	mov	r4, r0
   58e74:	2800      	cmp	r0, #0
   58e76:	d152      	bne.n	58f1e <f_sync+0xe8>
	dp->obj.fs = obj->fs;
   58e78:	682b      	ldr	r3, [r5, #0]
	dp->blk_ofs = obj->c_ofs;
   58e7a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	dp->obj.fs = obj->fs;
   58e7c:	9302      	str	r3, [sp, #8]
	dp->obj.sclust = obj->c_scl;
   58e7e:	6a2b      	ldr	r3, [r5, #32]
	dp->obj.n_frag = 0;
   58e80:	9009      	str	r0, [sp, #36]	; 0x24
	dp->obj.sclust = obj->c_scl;
   58e82:	9304      	str	r3, [sp, #16]
	dp->obj.stat = (BYTE)obj->c_size;
   58e84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	dp->blk_ofs = obj->c_ofs;
   58e86:	9115      	str	r1, [sp, #84]	; 0x54
	dp->obj.stat = (BYTE)obj->c_size;
   58e88:	f88d 300f 	strb.w	r3, [sp, #15]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
   58e8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   58e90:	e9cd 3006 	strd	r3, r0, [sp, #24]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
   58e94:	a802      	add	r0, sp, #8
   58e96:	f7ff f8d8 	bl	5804a <dir_sdi>
	if (res == FR_OK) {
   58e9a:	4604      	mov	r4, r0
   58e9c:	2800      	cmp	r0, #0
   58e9e:	d13e      	bne.n	58f1e <f_sync+0xe8>
		res = load_xdir(dp);		/* Load the object's entry block */
   58ea0:	a802      	add	r0, sp, #8
   58ea2:	f7ff fc6a 	bl	5877a <load_xdir>
					if (res == FR_OK) {
   58ea6:	4604      	mov	r4, r0
   58ea8:	2800      	cmp	r0, #0
   58eaa:	d138      	bne.n	58f1e <f_sync+0xe8>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
   58eac:	6932      	ldr	r2, [r6, #16]
   58eae:	7913      	ldrb	r3, [r2, #4]
   58eb0:	f043 0320 	orr.w	r3, r3, #32
   58eb4:	7113      	strb	r3, [r2, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
   58eb6:	79eb      	ldrb	r3, [r5, #7]
   58eb8:	6932      	ldr	r2, [r6, #16]
   58eba:	f043 0301 	orr.w	r3, r3, #1
   58ebe:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
   58ec2:	6930      	ldr	r0, [r6, #16]
   58ec4:	68a9      	ldr	r1, [r5, #8]
   58ec6:	3034      	adds	r0, #52	; 0x34
   58ec8:	f7fe fe1d 	bl	57b06 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
   58ecc:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   58ed0:	6930      	ldr	r0, [r6, #16]
   58ed2:	3038      	adds	r0, #56	; 0x38
   58ed4:	f7fe fe1f 	bl	57b16 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
   58ed8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   58edc:	6930      	ldr	r0, [r6, #16]
   58ede:	3028      	adds	r0, #40	; 0x28
   58ee0:	f7fe fe19 	bl	57b16 <st_qword>
	*ptr++ = (BYTE)val; val >>= 8;
   58ee4:	2221      	movs	r2, #33	; 0x21
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
   58ee6:	6933      	ldr	r3, [r6, #16]
						res = store_xdir(&dj);	/* Restore it to the directory */
   58ee8:	a802      	add	r0, sp, #8
	*ptr++ = (BYTE)val; val >>= 8;
   58eea:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
   58eec:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
   58eee:	731c      	strb	r4, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
   58ef0:	735c      	strb	r4, [r3, #13]
	*ptr++ = (BYTE)val;
   58ef2:	73da      	strb	r2, [r3, #15]
						fs->dirbuf[XDIR_ModTime10] = 0;
   58ef4:	6933      	ldr	r3, [r6, #16]
   58ef6:	755c      	strb	r4, [r3, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
   58ef8:	6933      	ldr	r3, [r6, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   58efa:	741c      	strb	r4, [r3, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   58efc:	745c      	strb	r4, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
   58efe:	749c      	strb	r4, [r3, #18]
	*ptr++ = (BYTE)val;
   58f00:	74dc      	strb	r4, [r3, #19]
						res = store_xdir(&dj);	/* Restore it to the directory */
   58f02:	f7ff fca6 	bl	58852 <store_xdir>
						if (res == FR_OK) {
   58f06:	4604      	mov	r4, r0
   58f08:	b948      	cbnz	r0, 58f1e <f_sync+0xe8>
					res = sync_fs(fs);					/* Restore it to the directory */
   58f0a:	4630      	mov	r0, r6
   58f0c:	f7ff fa3c 	bl	58388 <sync_fs>
   58f10:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
   58f12:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   58f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   58f1a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
   58f1e:	4620      	mov	r0, r4
   58f20:	b017      	add	sp, #92	; 0x5c
   58f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = move_window(fs, fp->dir_sect);
   58f24:	4630      	mov	r0, r6
   58f26:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   58f28:	f7fe ffa4 	bl	57e74 <move_window>
				if (res == FR_OK) {
   58f2c:	4604      	mov	r4, r0
   58f2e:	2800      	cmp	r0, #0
   58f30:	d1f5      	bne.n	58f1e <f_sync+0xe8>
					dir = fp->dir_ptr;
   58f32:	6cef      	ldr	r7, [r5, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
   58f34:	7afb      	ldrb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
   58f36:	4639      	mov	r1, r7
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
   58f38:	f043 0320 	orr.w	r3, r3, #32
   58f3c:	72fb      	strb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
   58f3e:	6828      	ldr	r0, [r5, #0]
   58f40:	68aa      	ldr	r2, [r5, #8]
   58f42:	f7fe ff8b 	bl	57e5c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
   58f46:	6929      	ldr	r1, [r5, #16]
   58f48:	f107 001c 	add.w	r0, r7, #28
   58f4c:	f7fe fddb 	bl	57b06 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   58f50:	2321      	movs	r3, #33	; 0x21
   58f52:	763b      	strb	r3, [r7, #24]
	*ptr++ = (BYTE)val;
   58f54:	2350      	movs	r3, #80	; 0x50
   58f56:	767b      	strb	r3, [r7, #25]
					fs->wflag = 1;
   58f58:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
   58f5a:	75bc      	strb	r4, [r7, #22]
	*ptr++ = (BYTE)val; val >>= 8;
   58f5c:	75fc      	strb	r4, [r7, #23]
	*ptr++ = (BYTE)val; val >>= 8;
   58f5e:	74bc      	strb	r4, [r7, #18]
	*ptr++ = (BYTE)val;
   58f60:	74fc      	strb	r4, [r7, #19]
					fs->wflag = 1;
   58f62:	70f3      	strb	r3, [r6, #3]
   58f64:	e7d1      	b.n	58f0a <f_sync+0xd4>

00058f66 <f_close>:
{
   58f66:	b513      	push	{r0, r1, r4, lr}
   58f68:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
   58f6a:	f7ff ff64 	bl	58e36 <f_sync>
	if (res == FR_OK)
   58f6e:	b928      	cbnz	r0, 58f7c <f_close+0x16>
		res = validate(&fp->obj, &fs);	/* Lock volume */
   58f70:	4620      	mov	r0, r4
   58f72:	a901      	add	r1, sp, #4
   58f74:	f7fe fe24 	bl	57bc0 <validate>
		if (res == FR_OK) {
   58f78:	b900      	cbnz	r0, 58f7c <f_close+0x16>
			fp->obj.fs = 0;	/* Invalidate file object */
   58f7a:	6020      	str	r0, [r4, #0]
}
   58f7c:	b002      	add	sp, #8
   58f7e:	bd10      	pop	{r4, pc}

00058f80 <f_lseek>:
{
   58f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   58f84:	b085      	sub	sp, #20
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   58f86:	a903      	add	r1, sp, #12
{
   58f88:	4604      	mov	r4, r0
   58f8a:	4615      	mov	r5, r2
   58f8c:	461e      	mov	r6, r3
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   58f8e:	f7fe fe17 	bl	57bc0 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
   58f92:	4607      	mov	r7, r0
   58f94:	2800      	cmp	r0, #0
   58f96:	f040 80a4 	bne.w	590e2 <f_lseek+0x162>
   58f9a:	f894 7031 	ldrb.w	r7, [r4, #49]	; 0x31
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
   58f9e:	2f00      	cmp	r7, #0
   58fa0:	f040 809f 	bne.w	590e2 <f_lseek+0x162>
   58fa4:	f8dd a00c 	ldr.w	sl, [sp, #12]
   58fa8:	f89a 3000 	ldrb.w	r3, [sl]
   58fac:	2b04      	cmp	r3, #4
   58fae:	d10c      	bne.n	58fca <f_lseek+0x4a>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
   58fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   58fb4:	4620      	mov	r0, r4
   58fb6:	6c21      	ldr	r1, [r4, #64]	; 0x40
   58fb8:	f7ff f90e 	bl	581d8 <fill_last_frag>
	if (res != FR_OK) LEAVE_FF(fs, res);
   58fbc:	b108      	cbz	r0, 58fc2 <f_lseek+0x42>
   58fbe:	4607      	mov	r7, r0
   58fc0:	e08f      	b.n	590e2 <f_lseek+0x162>
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
   58fc2:	f89a 3000 	ldrb.w	r3, [sl]
   58fc6:	2b04      	cmp	r3, #4
   58fc8:	d004      	beq.n	58fd4 <f_lseek+0x54>
   58fca:	2e00      	cmp	r6, #0
   58fcc:	bf1c      	itt	ne
   58fce:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   58fd2:	2600      	movne	r6, #0
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   58fd4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
		ifptr = fp->fptr;
   58fd8:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   58fdc:	42a8      	cmp	r0, r5
   58fde:	eb71 0c06 	sbcs.w	ip, r1, r6
   58fe2:	d236      	bcs.n	59052 <f_lseek+0xd2>
   58fe4:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   58fe8:	f01c 0f02 	tst.w	ip, #2
   58fec:	d02f      	beq.n	5904e <f_lseek+0xce>
		fp->fptr = nsect = 0;
   58fee:	2000      	movs	r0, #0
   58ff0:	2100      	movs	r1, #0
   58ff2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   58ff6:	f8ba 800a 	ldrh.w	r8, [sl, #10]
			if (ifptr > 0 &&
   58ffa:	ea53 0102 	orrs.w	r1, r3, r2
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   58ffe:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
   59002:	d046      	beq.n	59092 <f_lseek+0x112>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   59004:	f113 3bff 	adds.w	fp, r3, #4294967295	; 0xffffffff
   59008:	f142 39ff 	adc.w	r9, r2, #4294967295	; 0xffffffff
   5900c:	1e68      	subs	r0, r5, #1
   5900e:	f166 0100 	sbc.w	r1, r6, #0
   59012:	4642      	mov	r2, r8
   59014:	2300      	movs	r3, #0
   59016:	f7e7 fd7b 	bl	40b10 <__aeabi_uldivmod>
   5901a:	2300      	movs	r3, #0
   5901c:	e9cd 0100 	strd	r0, r1, [sp]
   59020:	4642      	mov	r2, r8
   59022:	4658      	mov	r0, fp
   59024:	4649      	mov	r1, r9
   59026:	f7e7 fd73 	bl	40b10 <__aeabi_uldivmod>
			if (ifptr > 0 &&
   5902a:	9b00      	ldr	r3, [sp, #0]
   5902c:	4283      	cmp	r3, r0
   5902e:	9b01      	ldr	r3, [sp, #4]
   59030:	418b      	sbcs	r3, r1
   59032:	d32e      	bcc.n	59092 <f_lseek+0x112>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   59034:	f1c8 0300 	rsb	r3, r8, #0
   59038:	ea03 030b 	and.w	r3, r3, fp
   5903c:	e9c4 390e 	strd	r3, r9, [r4, #56]	; 0x38
				ofs -= fp->fptr;
   59040:	1aeb      	subs	r3, r5, r3
   59042:	461d      	mov	r5, r3
				clst = fp->clust;
   59044:	6c21      	ldr	r1, [r4, #64]	; 0x40
				ofs -= fp->fptr;
   59046:	eb66 0609 	sbc.w	r6, r6, r9
			if (clst != 0) {
   5904a:	b149      	cbz	r1, 59060 <f_lseek+0xe0>
   5904c:	e024      	b.n	59098 <f_lseek+0x118>
   5904e:	4605      	mov	r5, r0
   59050:	460e      	mov	r6, r1
		fp->fptr = nsect = 0;
   59052:	2100      	movs	r1, #0
   59054:	2000      	movs	r0, #0
   59056:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		if (ofs > 0) {
   5905a:	ea55 0106 	orrs.w	r1, r5, r6
   5905e:	d1ca      	bne.n	58ff6 <f_lseek+0x76>
		fp->fptr = nsect = 0;
   59060:	2000      	movs	r0, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
   59062:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   59066:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
   5906a:	429d      	cmp	r5, r3
   5906c:	4191      	sbcs	r1, r2
			fp->obj.objsize = fp->fptr;
   5906e:	bf3c      	itt	cc
   59070:	e9c4 3204 	strdcc	r3, r2, [r4, #16]
			fp->flag |= FA_MODIFIED;
   59074:	f894 2030 	ldrbcc.w	r2, [r4, #48]	; 0x30
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   59078:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
   5907c:	bf3c      	itt	cc
   5907e:	f042 0240 	orrcc.w	r2, r2, #64	; 0x40
   59082:	f884 2030 	strbcc.w	r2, [r4, #48]	; 0x30
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   59086:	b363      	cbz	r3, 590e2 <f_lseek+0x162>
   59088:	6c63      	ldr	r3, [r4, #68]	; 0x44
   5908a:	4283      	cmp	r3, r0
   5908c:	d029      	beq.n	590e2 <f_lseek+0x162>
			fp->sect = nsect;
   5908e:	6460      	str	r0, [r4, #68]	; 0x44
   59090:	e027      	b.n	590e2 <f_lseek+0x162>
				clst = fp->obj.sclust;					/* start from the first cluster */
   59092:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   59094:	b1e1      	cbz	r1, 590d0 <f_lseek+0x150>
				fp->clust = clst;
   59096:	6421      	str	r1, [r4, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
   59098:	f04f 0900 	mov.w	r9, #0
					ofs -= bcs; fp->fptr += bcs;
   5909c:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
				while (ofs > bcs) {						/* Cluster following loop */
   590a0:	45a8      	cmp	r8, r5
   590a2:	eb79 0006 	sbcs.w	r0, r9, r6
   590a6:	d327      	bcc.n	590f8 <f_lseek+0x178>
				fp->fptr += ofs;
   590a8:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   590ac:	195b      	adds	r3, r3, r5
   590ae:	eb46 0202 	adc.w	r2, r6, r2
   590b2:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
				if (ofs % SS(fs)) {
   590b6:	f3c5 0308 	ubfx	r3, r5, #0, #9
   590ba:	2b00      	cmp	r3, #0
   590bc:	d0d0      	beq.n	59060 <f_lseek+0xe0>
					nsect = clst2sect(fs, clst);	/* Current sector */
   590be:	4650      	mov	r0, sl
   590c0:	f7fe fd38 	bl	57b34 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
   590c4:	b150      	cbz	r0, 590dc <f_lseek+0x15c>
					nsect += (DWORD)(ofs / SS(fs));
   590c6:	0a6d      	lsrs	r5, r5, #9
   590c8:	ea45 55c6 	orr.w	r5, r5, r6, lsl #23
   590cc:	4428      	add	r0, r5
   590ce:	e7c8      	b.n	59062 <f_lseek+0xe2>
					clst = create_chain(&fp->obj, 0);
   590d0:	4620      	mov	r0, r4
   590d2:	f7ff f9a4 	bl	5841e <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   590d6:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
   590d8:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   590da:	d106      	bne.n	590ea <f_lseek+0x16a>
   590dc:	2702      	movs	r7, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   590de:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
}
   590e2:	4638      	mov	r0, r7
   590e4:	b005      	add	sp, #20
   590e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   590ea:	1c42      	adds	r2, r0, #1
   590ec:	d101      	bne.n	590f2 <f_lseek+0x172>
   590ee:	2701      	movs	r7, #1
   590f0:	e7f5      	b.n	590de <f_lseek+0x15e>
					fp->obj.sclust = clst;
   590f2:	60a0      	str	r0, [r4, #8]
				fp->clust = clst;
   590f4:	6420      	str	r0, [r4, #64]	; 0x40
   590f6:	e7a8      	b.n	5904a <f_lseek+0xca>
					ofs -= bcs; fp->fptr += bcs;
   590f8:	ebb5 0508 	subs.w	r5, r5, r8
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   590fc:	f894 e030 	ldrb.w	lr, [r4, #48]	; 0x30
					ofs -= bcs; fp->fptr += bcs;
   59100:	f166 0600 	sbc.w	r6, r6, #0
   59104:	eb13 0308 	adds.w	r3, r3, r8
   59108:	f142 0000 	adc.w	r0, r2, #0
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   5910c:	f01e 0f02 	tst.w	lr, #2
					ofs -= bcs; fp->fptr += bcs;
   59110:	e9c4 300e 	strd	r3, r0, [r4, #56]	; 0x38
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   59114:	d014      	beq.n	59140 <f_lseek+0x1c0>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
   59116:	6962      	ldr	r2, [r4, #20]
   59118:	9200      	str	r2, [sp, #0]
   5911a:	6922      	ldr	r2, [r4, #16]
   5911c:	429a      	cmp	r2, r3
   5911e:	9a00      	ldr	r2, [sp, #0]
   59120:	4182      	sbcs	r2, r0
							fp->flag |= FA_MODIFIED;
   59122:	bf3e      	ittt	cc
   59124:	f04e 0e40 	orrcc.w	lr, lr, #64	; 0x40
							fp->obj.objsize = fp->fptr;
   59128:	e9c4 3004 	strdcc	r3, r0, [r4, #16]
							fp->flag |= FA_MODIFIED;
   5912c:	f884 e030 	strbcc.w	lr, [r4, #48]	; 0x30
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
   59130:	4620      	mov	r0, r4
   59132:	f7ff f974 	bl	5841e <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
   59136:	4601      	mov	r1, r0
   59138:	b930      	cbnz	r0, 59148 <f_lseek+0x1c8>
							ofs = 0; break;
   5913a:	4605      	mov	r5, r0
   5913c:	4606      	mov	r6, r0
   5913e:	e7b3      	b.n	590a8 <f_lseek+0x128>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
   59140:	4620      	mov	r0, r4
   59142:	f7fe feed 	bl	57f20 <get_fat>
   59146:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   59148:	1c4b      	adds	r3, r1, #1
   5914a:	d0d0      	beq.n	590ee <f_lseek+0x16e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   5914c:	2901      	cmp	r1, #1
   5914e:	d9c5      	bls.n	590dc <f_lseek+0x15c>
   59150:	f8da 301c 	ldr.w	r3, [sl, #28]
   59154:	428b      	cmp	r3, r1
   59156:	d9c1      	bls.n	590dc <f_lseek+0x15c>
					fp->clust = clst;
   59158:	6421      	str	r1, [r4, #64]	; 0x40
   5915a:	e79f      	b.n	5909c <f_lseek+0x11c>

0005915c <f_opendir>:
{
   5915c:	b530      	push	{r4, r5, lr}
   5915e:	b085      	sub	sp, #20
	if (!dp) return FR_INVALID_OBJECT;
   59160:	4604      	mov	r4, r0
{
   59162:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
   59164:	2800      	cmp	r0, #0
   59166:	d03b      	beq.n	591e0 <f_opendir+0x84>
	res = mount_volume(&path, &fs, 0);
   59168:	2200      	movs	r2, #0
   5916a:	a903      	add	r1, sp, #12
   5916c:	a801      	add	r0, sp, #4
   5916e:	f7f4 fa89 	bl	4d684 <mount_volume>
	if (res == FR_OK) {
   59172:	b948      	cbnz	r0, 59188 <f_opendir+0x2c>
		dp->obj.fs = fs;
   59174:	9d03      	ldr	r5, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
   59176:	4620      	mov	r0, r4
   59178:	9901      	ldr	r1, [sp, #4]
		dp->obj.fs = fs;
   5917a:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
   5917c:	f7f4 ff88 	bl	4e090 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
   59180:	b128      	cbz	r0, 5918e <f_opendir+0x32>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   59182:	2804      	cmp	r0, #4
   59184:	d100      	bne.n	59188 <f_opendir+0x2c>
   59186:	2005      	movs	r0, #5
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
   59188:	2300      	movs	r3, #0
   5918a:	6023      	str	r3, [r4, #0]
   5918c:	e021      	b.n	591d2 <f_opendir+0x76>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
   5918e:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
   59192:	2b00      	cmp	r3, #0
   59194:	db13      	blt.n	591be <f_opendir+0x62>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
   59196:	79a3      	ldrb	r3, [r4, #6]
   59198:	06db      	lsls	r3, r3, #27
   5919a:	d5f4      	bpl.n	59186 <f_opendir+0x2a>
					if (fs->fs_type == FS_EXFAT) {
   5919c:	7828      	ldrb	r0, [r5, #0]
   5919e:	2804      	cmp	r0, #4
   591a0:	d119      	bne.n	591d6 <f_opendir+0x7a>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
   591a2:	68a3      	ldr	r3, [r4, #8]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   591a4:	79e2      	ldrb	r2, [r4, #7]
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
   591a6:	6223      	str	r3, [r4, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   591a8:	6923      	ldr	r3, [r4, #16]
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
   591aa:	4621      	mov	r1, r4
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   591ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   591b0:	4313      	orrs	r3, r2
   591b2:	6263      	str	r3, [r4, #36]	; 0x24
						dp->obj.c_ofs = dp->blk_ofs;
   591b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
   591b6:	4628      	mov	r0, r5
						dp->obj.c_ofs = dp->blk_ofs;
   591b8:	62a3      	str	r3, [r4, #40]	; 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
   591ba:	f7fe fcea 	bl	57b92 <init_alloc_info>
				dp->obj.id = fs->id;
   591be:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
   591c0:	2100      	movs	r1, #0
   591c2:	4620      	mov	r0, r4
				dp->obj.id = fs->id;
   591c4:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
   591c6:	f7fe ff40 	bl	5804a <dir_sdi>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   591ca:	2804      	cmp	r0, #4
   591cc:	d0db      	beq.n	59186 <f_opendir+0x2a>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
   591ce:	2800      	cmp	r0, #0
   591d0:	d1da      	bne.n	59188 <f_opendir+0x2c>
}
   591d2:	b005      	add	sp, #20
   591d4:	bd30      	pop	{r4, r5, pc}
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
   591d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   591d8:	f7ff fb6a 	bl	588b0 <ld_clust.isra.0>
   591dc:	60a0      	str	r0, [r4, #8]
   591de:	e7ee      	b.n	591be <f_opendir+0x62>
	if (!dp) return FR_INVALID_OBJECT;
   591e0:	2009      	movs	r0, #9
   591e2:	e7f6      	b.n	591d2 <f_opendir+0x76>

000591e4 <f_closedir>:
{
   591e4:	b513      	push	{r0, r1, r4, lr}
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
   591e6:	a901      	add	r1, sp, #4
{
   591e8:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
   591ea:	f7fe fce9 	bl	57bc0 <validate>
	if (res == FR_OK) {
   591ee:	b900      	cbnz	r0, 591f2 <f_closedir+0xe>
		dp->obj.fs = 0;	/* Invalidate directory object */
   591f0:	6020      	str	r0, [r4, #0]
}
   591f2:	b002      	add	sp, #8
   591f4:	bd10      	pop	{r4, pc}

000591f6 <f_readdir>:
{
   591f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   591f8:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   591fa:	a901      	add	r1, sp, #4
{
   591fc:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   591fe:	f7fe fcdf 	bl	57bc0 <validate>
	if (res == FR_OK) {
   59202:	b9c0      	cbnz	r0, 59236 <f_readdir+0x40>
		if (!fno) {
   59204:	b935      	cbnz	r5, 59214 <f_readdir+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
   59206:	4629      	mov	r1, r5
   59208:	4620      	mov	r0, r4
}
   5920a:	b002      	add	sp, #8
   5920c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
   59210:	f7fe bf1b 	b.w	5804a <dir_sdi>
			res = DIR_READ_FILE(dp);		/* Read an item */
   59214:	4620      	mov	r0, r4
   59216:	f7f4 fc07 	bl	4da28 <dir_read.constprop.0>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
   5921a:	f010 06fb 	ands.w	r6, r0, #251	; 0xfb
   5921e:	d10a      	bne.n	59236 <f_readdir+0x40>
				get_fileinfo(dp, fno);		/* Get the object information */
   59220:	4629      	mov	r1, r5
   59222:	4620      	mov	r0, r4
   59224:	f7fe fd22 	bl	57c6c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
   59228:	4631      	mov	r1, r6
   5922a:	4620      	mov	r0, r4
   5922c:	f7ff f9f6 	bl	5861c <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
   59230:	2804      	cmp	r0, #4
   59232:	bf08      	it	eq
   59234:	2000      	moveq	r0, #0
}
   59236:	b002      	add	sp, #8
   59238:	bd70      	pop	{r4, r5, r6, pc}

0005923a <f_stat>:
{
   5923a:	b530      	push	{r4, r5, lr}
   5923c:	b097      	sub	sp, #92	; 0x5c
   5923e:	9001      	str	r0, [sp, #4]
   59240:	460d      	mov	r5, r1
	res = mount_volume(&path, &dj.obj.fs, 0);
   59242:	2200      	movs	r2, #0
   59244:	a902      	add	r1, sp, #8
   59246:	a801      	add	r0, sp, #4
   59248:	f7f4 fa1c 	bl	4d684 <mount_volume>
	if (res == FR_OK) {
   5924c:	4604      	mov	r4, r0
   5924e:	b970      	cbnz	r0, 5926e <f_stat+0x34>
		res = follow_path(&dj, path);	/* Follow the file path */
   59250:	9901      	ldr	r1, [sp, #4]
   59252:	a802      	add	r0, sp, #8
   59254:	f7f4 ff1c 	bl	4e090 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
   59258:	4604      	mov	r4, r0
   5925a:	b940      	cbnz	r0, 5926e <f_stat+0x34>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
   5925c:	f99d 3053 	ldrsb.w	r3, [sp, #83]	; 0x53
   59260:	2b00      	cmp	r3, #0
   59262:	db07      	blt.n	59274 <f_stat+0x3a>
				if (fno) get_fileinfo(&dj, fno);
   59264:	b11d      	cbz	r5, 5926e <f_stat+0x34>
   59266:	4629      	mov	r1, r5
   59268:	a802      	add	r0, sp, #8
   5926a:	f7fe fcff 	bl	57c6c <get_fileinfo>
}
   5926e:	4620      	mov	r0, r4
   59270:	b017      	add	sp, #92	; 0x5c
   59272:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
   59274:	2406      	movs	r4, #6
   59276:	e7fa      	b.n	5926e <f_stat+0x34>

00059278 <f_getfree>:
{
   59278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5927c:	b091      	sub	sp, #68	; 0x44
   5927e:	9001      	str	r0, [sp, #4]
   59280:	4689      	mov	r9, r1
   59282:	4615      	mov	r5, r2
	res = mount_volume(&path, &fs, 0);
   59284:	a903      	add	r1, sp, #12
   59286:	2200      	movs	r2, #0
   59288:	a801      	add	r0, sp, #4
   5928a:	f7f4 f9fb 	bl	4d684 <mount_volume>
	if (res == FR_OK) {
   5928e:	4607      	mov	r7, r0
   59290:	b948      	cbnz	r0, 592a6 <f_getfree+0x2e>
		*fatfs = fs;				/* Return ptr to the fs object */
   59292:	9c03      	ldr	r4, [sp, #12]
   59294:	602c      	str	r4, [r5, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
   59296:	e9d4 3b06 	ldrd	r3, fp, [r4, #24]
   5929a:	f1ab 0a02 	sub.w	sl, fp, #2
   5929e:	4553      	cmp	r3, sl
   592a0:	d805      	bhi.n	592ae <f_getfree+0x36>
			*nclst = fs->free_clst;
   592a2:	f8c9 3000 	str.w	r3, [r9]
}
   592a6:	4638      	mov	r0, r7
   592a8:	b011      	add	sp, #68	; 0x44
   592aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
   592ae:	7825      	ldrb	r5, [r4, #0]
   592b0:	2d01      	cmp	r5, #1
   592b2:	d11a      	bne.n	592ea <f_getfree+0x72>
				clst = 2; obj.fs = fs;
   592b4:	f04f 0802 	mov.w	r8, #2
			nfree = 0;
   592b8:	4606      	mov	r6, r0
				clst = 2; obj.fs = fs;
   592ba:	9404      	str	r4, [sp, #16]
					stat = get_fat(&obj, clst);
   592bc:	4641      	mov	r1, r8
   592be:	a804      	add	r0, sp, #16
   592c0:	f7fe fe2e 	bl	57f20 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   592c4:	1c43      	adds	r3, r0, #1
   592c6:	d06a      	beq.n	5939e <f_getfree+0x126>
					if (stat == 1) { res = FR_INT_ERR; break; }
   592c8:	2801      	cmp	r0, #1
   592ca:	d067      	beq.n	5939c <f_getfree+0x124>
					if (stat == 0) nfree++;
   592cc:	b900      	cbnz	r0, 592d0 <f_getfree+0x58>
   592ce:	3601      	adds	r6, #1
				} while (++clst < fs->n_fatent);
   592d0:	69e3      	ldr	r3, [r4, #28]
   592d2:	f108 0801 	add.w	r8, r8, #1
   592d6:	4543      	cmp	r3, r8
   592d8:	d8f0      	bhi.n	592bc <f_getfree+0x44>
				*nclst = nfree;			/* Return the free clusters */
   592da:	f8c9 6000 	str.w	r6, [r9]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
   592de:	7923      	ldrb	r3, [r4, #4]
				fs->free_clst = nfree;	/* Now free_clst is valid */
   592e0:	61a6      	str	r6, [r4, #24]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
   592e2:	f043 0301 	orr.w	r3, r3, #1
   592e6:	7123      	strb	r3, [r4, #4]
   592e8:	e7dd      	b.n	592a6 <f_getfree+0x2e>
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
   592ea:	2d04      	cmp	r5, #4
   592ec:	d12b      	bne.n	59346 <f_getfree+0xce>
					i = 0;						/* Offset in the sector */
   592ee:	4680      	mov	r8, r0
			nfree = 0;
   592f0:	4606      	mov	r6, r0
					sect = fs->bitbase;			/* Bitmap sector */
   592f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
						if (i == 0) {
   592f4:	f1b8 0f00 	cmp.w	r8, #0
   592f8:	d108      	bne.n	5930c <f_getfree+0x94>
							res = move_window(fs, sect++);
   592fa:	4620      	mov	r0, r4
   592fc:	f101 0b01 	add.w	fp, r1, #1
   59300:	f7fe fdb8 	bl	57e74 <move_window>
							if (res != FR_OK) break;
   59304:	4605      	mov	r5, r0
   59306:	2800      	cmp	r0, #0
   59308:	d149      	bne.n	5939e <f_getfree+0x126>
							res = move_window(fs, sect++);
   5930a:	4659      	mov	r1, fp
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   5930c:	eb04 0308 	add.w	r3, r4, r8
   59310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   59314:	f1ba 0f00 	cmp.w	sl, #0
   59318:	d0df      	beq.n	592da <f_getfree+0x62>
   5931a:	f1aa 0208 	sub.w	r2, sl, #8
							if (!(bm & 1)) nfree++;
   5931e:	07d8      	lsls	r0, r3, #31
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   59320:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
							if (!(bm & 1)) nfree++;
   59324:	bf58      	it	pl
   59326:	3601      	addpl	r6, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   59328:	4592      	cmp	sl, r2
							bm >>= 1;
   5932a:	ea4f 0353 	mov.w	r3, r3, lsr #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   5932e:	d002      	beq.n	59336 <f_getfree+0xbe>
   59330:	f1ba 0f00 	cmp.w	sl, #0
   59334:	d1f3      	bne.n	5931e <f_getfree+0xa6>
						i = (i + 1) % SS(fs);
   59336:	f108 0801 	add.w	r8, r8, #1
   5933a:	f3c8 0808 	ubfx	r8, r8, #0, #9
					} while (clst);
   5933e:	f1ba 0f00 	cmp.w	sl, #0
   59342:	d1d7      	bne.n	592f4 <f_getfree+0x7c>
   59344:	e7c9      	b.n	592da <f_getfree+0x62>
					i = 0;					/* Offset in the sector */
   59346:	4680      	mov	r8, r0
			nfree = 0;
   59348:	4606      	mov	r6, r0
					sect = fs->fatbase;		/* Top of the FAT */
   5934a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
							if (ld_word(fs->win + i) == 0) nfree++;
   5934c:	f104 0a3c 	add.w	sl, r4, #60	; 0x3c
						if (i == 0) {
   59350:	f1b8 0f00 	cmp.w	r8, #0
   59354:	d108      	bne.n	59368 <f_getfree+0xf0>
							res = move_window(fs, sect++);
   59356:	1c4b      	adds	r3, r1, #1
   59358:	4620      	mov	r0, r4
   5935a:	9300      	str	r3, [sp, #0]
   5935c:	f7fe fd8a 	bl	57e74 <move_window>
							if (res != FR_OK) break;
   59360:	4605      	mov	r5, r0
   59362:	b9e0      	cbnz	r0, 5939e <f_getfree+0x126>
							res = move_window(fs, sect++);
   59364:	9b00      	ldr	r3, [sp, #0]
   59366:	4619      	mov	r1, r3
						if (fs->fs_type == FS_FAT16) {
   59368:	7823      	ldrb	r3, [r4, #0]
							if (ld_word(fs->win + i) == 0) nfree++;
   5936a:	eb0a 0008 	add.w	r0, sl, r8
						if (fs->fs_type == FS_FAT16) {
   5936e:	2b02      	cmp	r3, #2
   59370:	d10b      	bne.n	5938a <f_getfree+0x112>
							if (ld_word(fs->win + i) == 0) nfree++;
   59372:	f83a 3008 	ldrh.w	r3, [sl, r8]
   59376:	b903      	cbnz	r3, 5937a <f_getfree+0x102>
   59378:	3601      	adds	r6, #1
							i += 2;
   5937a:	f108 0802 	add.w	r8, r8, #2
					} while (--clst);
   5937e:	f1bb 0b01 	subs.w	fp, fp, #1
						i %= SS(fs);
   59382:	f3c8 0808 	ubfx	r8, r8, #0, #9
					} while (--clst);
   59386:	d1e3      	bne.n	59350 <f_getfree+0xd8>
   59388:	e7a7      	b.n	592da <f_getfree+0x62>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
   5938a:	f7fe fbb6 	bl	57afa <ld_dword>
   5938e:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
   59392:	bf08      	it	eq
   59394:	3601      	addeq	r6, #1
							i += 4;
   59396:	f108 0804 	add.w	r8, r8, #4
   5939a:	e7f0      	b.n	5937e <f_getfree+0x106>
					if (stat == 1) { res = FR_INT_ERR; break; }
   5939c:	2502      	movs	r5, #2
							res = move_window(fs, sect++);
   5939e:	462f      	mov	r7, r5
	LEAVE_FF(fs, res);
   593a0:	e781      	b.n	592a6 <f_getfree+0x2e>

000593a2 <f_truncate>:
{
   593a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   593a4:	a901      	add	r1, sp, #4
{
   593a6:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   593a8:	f7fe fc0a 	bl	57bc0 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
   593ac:	4605      	mov	r5, r0
   593ae:	2800      	cmp	r0, #0
   593b0:	d15a      	bne.n	59468 <f_truncate+0xc6>
   593b2:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
   593b6:	2d00      	cmp	r5, #0
   593b8:	d156      	bne.n	59468 <f_truncate+0xc6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   593ba:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   593be:	079a      	lsls	r2, r3, #30
   593c0:	d555      	bpl.n	5946e <f_truncate+0xcc>
	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
   593c2:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   593c6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   593ca:	4283      	cmp	r3, r0
   593cc:	eb72 0101 	sbcs.w	r1, r2, r1
   593d0:	d24a      	bcs.n	59468 <f_truncate+0xc6>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   593d2:	4313      	orrs	r3, r2
   593d4:	d111      	bne.n	593fa <f_truncate+0x58>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   593d6:	462a      	mov	r2, r5
   593d8:	4620      	mov	r0, r4
   593da:	68a1      	ldr	r1, [r4, #8]
   593dc:	f7fe ff2c 	bl	58238 <remove_chain>
			fp->obj.sclust = 0;
   593e0:	60a5      	str	r5, [r4, #8]
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   593e2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   593e6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		fp->flag |= FA_MODIFIED;
   593ea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   593ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   593f2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (res != FR_OK) ABORT(fs, res);
   593f6:	b3b8      	cbz	r0, 59468 <f_truncate+0xc6>
   593f8:	e013      	b.n	59422 <f_truncate+0x80>
			ncl = get_fat(&fp->obj, fp->clust);
   593fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
   593fc:	4620      	mov	r0, r4
   593fe:	f7fe fd8f 	bl	57f20 <get_fat>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   59402:	1c43      	adds	r3, r0, #1
			ncl = get_fat(&fp->obj, fp->clust);
   59404:	4601      	mov	r1, r0
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   59406:	d019      	beq.n	5943c <f_truncate+0x9a>
			if (ncl == 1) res = FR_INT_ERR;
   59408:	2801      	cmp	r0, #1
   5940a:	d10e      	bne.n	5942a <f_truncate+0x88>
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   5940c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
			if (ncl == 1) res = FR_INT_ERR;
   59410:	2002      	movs	r0, #2
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   59412:	e9c4 2304 	strd	r2, r3, [r4, #16]
		fp->flag |= FA_MODIFIED;
   59416:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   5941a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   5941e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (res != FR_OK) ABORT(fs, res);
   59422:	4605      	mov	r5, r0
   59424:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   59428:	e01e      	b.n	59468 <f_truncate+0xc6>
			if (res == FR_OK && ncl < fs->n_fatent) {
   5942a:	9b01      	ldr	r3, [sp, #4]
   5942c:	69db      	ldr	r3, [r3, #28]
   5942e:	4283      	cmp	r3, r0
   59430:	d910      	bls.n	59454 <f_truncate+0xb2>
				res = remove_chain(&fp->obj, ncl, fp->clust);
   59432:	4620      	mov	r0, r4
   59434:	6c22      	ldr	r2, [r4, #64]	; 0x40
   59436:	f7fe feff 	bl	58238 <remove_chain>
   5943a:	e7d2      	b.n	593e2 <f_truncate+0x40>
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   5943c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   59440:	e9c4 2304 	strd	r2, r3, [r4, #16]
		fp->flag |= FA_MODIFIED;
   59444:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   59448:	2001      	movs	r0, #1
   5944a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   5944e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (res != FR_OK) ABORT(fs, res);
   59452:	e7e6      	b.n	59422 <f_truncate+0x80>
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   59454:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   59458:	e9c4 2304 	strd	r2, r3, [r4, #16]
		fp->flag |= FA_MODIFIED;
   5945c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   59460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   59464:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   59468:	4628      	mov	r0, r5
   5946a:	b003      	add	sp, #12
   5946c:	bd30      	pop	{r4, r5, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   5946e:	2507      	movs	r5, #7
   59470:	e7fa      	b.n	59468 <f_truncate+0xc6>

00059472 <f_unlink>:
{
   59472:	b570      	push	{r4, r5, r6, lr}
   59474:	b0b8      	sub	sp, #224	; 0xe0
   59476:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
   59478:	2202      	movs	r2, #2
   5947a:	a903      	add	r1, sp, #12
   5947c:	a801      	add	r0, sp, #4
   5947e:	f7f4 f901 	bl	4d684 <mount_volume>
	if (res == FR_OK) {
   59482:	b978      	cbnz	r0, 594a4 <f_unlink+0x32>
		dj.obj.fs = fs;
   59484:	9c03      	ldr	r4, [sp, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
   59486:	9901      	ldr	r1, [sp, #4]
   59488:	a810      	add	r0, sp, #64	; 0x40
		dj.obj.fs = fs;
   5948a:	9410      	str	r4, [sp, #64]	; 0x40
		res = follow_path(&dj, path);		/* Follow the file path */
   5948c:	f7f4 fe00 	bl	4e090 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
   59490:	b940      	cbnz	r0, 594a4 <f_unlink+0x32>
			if (dj.fn[NSFLAG] & NS_NONAME) {
   59492:	f99d 308b 	ldrsb.w	r3, [sp, #139]	; 0x8b
   59496:	2b00      	cmp	r3, #0
   59498:	db44      	blt.n	59524 <f_unlink+0xb2>
				if (dj.obj.attr & AM_RDO) {
   5949a:	f89d 6046 	ldrb.w	r6, [sp, #70]	; 0x46
   5949e:	07f3      	lsls	r3, r6, #31
   594a0:	d502      	bpl.n	594a8 <f_unlink+0x36>
{
   594a2:	2007      	movs	r0, #7
}
   594a4:	b038      	add	sp, #224	; 0xe0
   594a6:	bd70      	pop	{r4, r5, r6, pc}
				if (fs->fs_type == FS_EXFAT) {
   594a8:	7820      	ldrb	r0, [r4, #0]
				obj.fs = fs;
   594aa:	9404      	str	r4, [sp, #16]
				if (fs->fs_type == FS_EXFAT) {
   594ac:	2804      	cmp	r0, #4
   594ae:	f006 0610 	and.w	r6, r6, #16
   594b2:	d126      	bne.n	59502 <f_unlink+0x90>
					init_alloc_info(fs, &obj);
   594b4:	4620      	mov	r0, r4
   594b6:	a904      	add	r1, sp, #16
   594b8:	f7fe fb6b 	bl	57b92 <init_alloc_info>
					dclst = obj.sclust;
   594bc:	9d06      	ldr	r5, [sp, #24]
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
   594be:	b1b6      	cbz	r6, 594ee <f_unlink+0x7c>
							sdj.obj.objsize = obj.objsize;
   594c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   594c4:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
							sdj.obj.stat = obj.stat;
   594c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
						sdj.obj.fs = fs;			/* Open the sub-directory */
   594cc:	9424      	str	r4, [sp, #144]	; 0x90
						sdj.obj.sclust = dclst;
   594ce:	9526      	str	r5, [sp, #152]	; 0x98
							sdj.obj.stat = obj.stat;
   594d0:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
						res = dir_sdi(&sdj, 0);
   594d4:	2100      	movs	r1, #0
   594d6:	a824      	add	r0, sp, #144	; 0x90
   594d8:	f7fe fdb7 	bl	5804a <dir_sdi>
						if (res == FR_OK) {
   594dc:	2800      	cmp	r0, #0
   594de:	d1e1      	bne.n	594a4 <f_unlink+0x32>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
   594e0:	a824      	add	r0, sp, #144	; 0x90
   594e2:	f7f4 faa1 	bl	4da28 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
   594e6:	2800      	cmp	r0, #0
   594e8:	d0db      	beq.n	594a2 <f_unlink+0x30>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
   594ea:	2804      	cmp	r0, #4
   594ec:	d1da      	bne.n	594a4 <f_unlink+0x32>
				res = dir_remove(&dj);			/* Remove the directory entry */
   594ee:	a810      	add	r0, sp, #64	; 0x40
   594f0:	f7ff f91a 	bl	58728 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
   594f4:	2800      	cmp	r0, #0
   594f6:	d1d5      	bne.n	594a4 <f_unlink+0x32>
   594f8:	b965      	cbnz	r5, 59514 <f_unlink+0xa2>
				if (res == FR_OK) res = sync_fs(fs);
   594fa:	4620      	mov	r0, r4
   594fc:	f7fe ff44 	bl	58388 <sync_fs>
   59500:	e7d0      	b.n	594a4 <f_unlink+0x32>
					dclst = ld_clust(fs, dj.dir);
   59502:	991f      	ldr	r1, [sp, #124]	; 0x7c
   59504:	f7ff f9d4 	bl	588b0 <ld_clust.isra.0>
   59508:	4605      	mov	r5, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
   5950a:	2e00      	cmp	r6, #0
   5950c:	d0ef      	beq.n	594ee <f_unlink+0x7c>
						sdj.obj.fs = fs;			/* Open the sub-directory */
   5950e:	9424      	str	r4, [sp, #144]	; 0x90
						sdj.obj.sclust = dclst;
   59510:	9026      	str	r0, [sp, #152]	; 0x98
						if (fs->fs_type == FS_EXFAT) {
   59512:	e7df      	b.n	594d4 <f_unlink+0x62>
					res = remove_chain(&obj, dclst, 0);
   59514:	4602      	mov	r2, r0
   59516:	4629      	mov	r1, r5
   59518:	a804      	add	r0, sp, #16
   5951a:	f7fe fe8d 	bl	58238 <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
   5951e:	2800      	cmp	r0, #0
   59520:	d1c0      	bne.n	594a4 <f_unlink+0x32>
   59522:	e7ea      	b.n	594fa <f_unlink+0x88>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
   59524:	2006      	movs	r0, #6
   59526:	e7bd      	b.n	594a4 <f_unlink+0x32>

00059528 <f_mkdir>:
{
   59528:	b570      	push	{r4, r5, r6, lr}
   5952a:	b0a4      	sub	sp, #144	; 0x90
   5952c:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
   5952e:	2202      	movs	r2, #2
   59530:	a903      	add	r1, sp, #12
   59532:	a801      	add	r0, sp, #4
   59534:	f7f4 f8a6 	bl	4d684 <mount_volume>
   59538:	4604      	mov	r4, r0
   5953a:	4605      	mov	r5, r0
	if (res == FR_OK) {
   5953c:	2800      	cmp	r0, #0
   5953e:	f040 8088 	bne.w	59652 <f_mkdir+0x12a>
		dj.obj.fs = fs;
   59542:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
   59544:	9901      	ldr	r1, [sp, #4]
   59546:	a810      	add	r0, sp, #64	; 0x40
		dj.obj.fs = fs;
   59548:	9310      	str	r3, [sp, #64]	; 0x40
		res = follow_path(&dj, path);			/* Follow the file path */
   5954a:	f7f4 fda1 	bl	4e090 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
   5954e:	4604      	mov	r4, r0
   59550:	2800      	cmp	r0, #0
   59552:	f000 809d 	beq.w	59690 <f_mkdir+0x168>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
   59556:	2804      	cmp	r0, #4
   59558:	d17b      	bne.n	59652 <f_mkdir+0x12a>
			sobj.fs = fs;						/* New object id to create a new chain */
   5955a:	9b03      	ldr	r3, [sp, #12]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
   5955c:	4629      	mov	r1, r5
   5955e:	a804      	add	r0, sp, #16
			sobj.fs = fs;						/* New object id to create a new chain */
   59560:	9304      	str	r3, [sp, #16]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
   59562:	f7fe ff5c 	bl	5841e <create_chain>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
   59566:	4605      	mov	r5, r0
   59568:	2800      	cmp	r0, #0
   5956a:	f000 8086 	beq.w	5967a <f_mkdir+0x152>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
   5956e:	2801      	cmp	r0, #1
   59570:	f000 808a 	beq.w	59688 <f_mkdir+0x160>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
   59574:	1c43      	adds	r3, r0, #1
   59576:	f000 8089 	beq.w	5968c <f_mkdir+0x164>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
   5957a:	4601      	mov	r1, r0
   5957c:	9803      	ldr	r0, [sp, #12]
   5957e:	f7fe feda 	bl	58336 <dir_clear>
   59582:	4603      	mov	r3, r0
   59584:	4604      	mov	r4, r0
				if (res == FR_OK) {
   59586:	2800      	cmp	r0, #0
   59588:	d178      	bne.n	5967c <f_mkdir+0x154>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
   5958a:	9803      	ldr	r0, [sp, #12]
   5958c:	7802      	ldrb	r2, [r0, #0]
   5958e:	2a04      	cmp	r2, #4
   59590:	d02d      	beq.n	595ee <f_mkdir+0xc6>
__ssp_bos_icheck3(memset, void *, int)
   59592:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	*ptr++ = (BYTE)val; val >>= 8;
   59596:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
   5959a:	f8c0 203d 	str.w	r2, [r0, #61]	; 0x3d
   5959e:	f8c0 2041 	str.w	r2, [r0, #65]	; 0x41
   595a2:	f8a0 2045 	strh.w	r2, [r0, #69]	; 0x45
	*ptr++ = (BYTE)val; val >>= 8;
   595a6:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
						fs->win[DIR_Name] = '.';
   595aa:	222e      	movs	r2, #46	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
   595ac:	2321      	movs	r3, #33	; 0x21
						fs->win[DIR_Name] = '.';
   595ae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
   595b2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
						fs->win[DIR_Attr] = AM_DIR;
   595b6:	2210      	movs	r2, #16
	*ptr++ = (BYTE)val;
   595b8:	2350      	movs	r3, #80	; 0x50
						fs->win[DIR_Attr] = AM_DIR;
   595ba:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
	*ptr++ = (BYTE)val;
   595be:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
						st_clust(fs, fs->win, dcl);
   595c2:	462a      	mov	r2, r5
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
   595c4:	f100 013c 	add.w	r1, r0, #60	; 0x3c
						st_clust(fs, fs->win, dcl);
   595c8:	f7fe fc48 	bl	57e5c <st_clust>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
   595cc:	f100 035c 	add.w	r3, r0, #92	; 0x5c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   595d0:	461a      	mov	r2, r3
   595d2:	f851 4b04 	ldr.w	r4, [r1], #4
   595d6:	4299      	cmp	r1, r3
   595d8:	f842 4b04 	str.w	r4, [r2], #4
   595dc:	d1f9      	bne.n	595d2 <f_mkdir+0xaa>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   595de:	232e      	movs	r3, #46	; 0x2e
						st_clust(fs, fs->win + SZDIRE, pcl);
   595e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   595e2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
						st_clust(fs, fs->win + SZDIRE, pcl);
   595e6:	f7fe fc39 	bl	57e5c <st_clust>
						fs->wflag = 1;
   595ea:	2301      	movs	r3, #1
   595ec:	70c3      	strb	r3, [r0, #3]
					res = dir_register(&dj);	/* Register the object to the parent directoy */
   595ee:	a810      	add	r0, sp, #64	; 0x40
   595f0:	f7f4 fb7a 	bl	4dce8 <dir_register>
			if (res == FR_OK) {
   595f4:	4604      	mov	r4, r0
   595f6:	2800      	cmp	r0, #0
   595f8:	d140      	bne.n	5967c <f_mkdir+0x154>
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
   595fa:	9e03      	ldr	r6, [sp, #12]
   595fc:	2221      	movs	r2, #33	; 0x21
   595fe:	7833      	ldrb	r3, [r6, #0]
   59600:	2b04      	cmp	r3, #4
   59602:	d129      	bne.n	59658 <f_mkdir+0x130>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
   59604:	6933      	ldr	r3, [r6, #16]
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
   59606:	4629      	mov	r1, r5
	*ptr++ = (BYTE)val; val >>= 8;
   59608:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
   5960a:	2250      	movs	r2, #80	; 0x50
   5960c:	73da      	strb	r2, [r3, #15]
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
   5960e:	2203      	movs	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
   59610:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
   59612:	7358      	strb	r0, [r3, #13]
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
   59614:	6930      	ldr	r0, [r6, #16]
   59616:	3034      	adds	r0, #52	; 0x34
   59618:	f7fe fa75 	bl	57b06 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* Directory size needs to be valid */
   5961c:	8971      	ldrh	r1, [r6, #10]
   5961e:	6930      	ldr	r0, [r6, #16]
   59620:	0249      	lsls	r1, r1, #9
   59622:	3038      	adds	r0, #56	; 0x38
   59624:	f7fe fa6f 	bl	57b06 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
   59628:	8971      	ldrh	r1, [r6, #10]
   5962a:	6930      	ldr	r0, [r6, #16]
   5962c:	0249      	lsls	r1, r1, #9
   5962e:	3028      	adds	r0, #40	; 0x28
   59630:	f7fe fa69 	bl	57b06 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
   59634:	6933      	ldr	r3, [r6, #16]
					res = store_xdir(&dj);
   59636:	a810      	add	r0, sp, #64	; 0x40
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
   59638:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
   5963c:	2210      	movs	r2, #16
   5963e:	6933      	ldr	r3, [r6, #16]
   59640:	711a      	strb	r2, [r3, #4]
					res = store_xdir(&dj);
   59642:	f7ff f906 	bl	58852 <store_xdir>
				if (res == FR_OK) {
   59646:	4604      	mov	r4, r0
   59648:	b918      	cbnz	r0, 59652 <f_mkdir+0x12a>
					res = sync_fs(fs);
   5964a:	9803      	ldr	r0, [sp, #12]
   5964c:	f7fe fe9c 	bl	58388 <sync_fs>
   59650:	4604      	mov	r4, r0
}
   59652:	4620      	mov	r0, r4
   59654:	b024      	add	sp, #144	; 0x90
   59656:	bd70      	pop	{r4, r5, r6, pc}
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
   59658:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
	*ptr++ = (BYTE)val; val >>= 8;
   5965a:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
   5965c:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
   5965e:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
   59660:	75d8      	strb	r0, [r3, #23]
	*ptr++ = (BYTE)val;
   59662:	765a      	strb	r2, [r3, #25]
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
   59664:	4630      	mov	r0, r6
   59666:	462a      	mov	r2, r5
   59668:	991f      	ldr	r1, [sp, #124]	; 0x7c
   5966a:	f7fe fbf7 	bl	57e5c <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
   5966e:	2210      	movs	r2, #16
   59670:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   59672:	72da      	strb	r2, [r3, #11]
					fs->wflag = 1;
   59674:	2301      	movs	r3, #1
   59676:	70f3      	strb	r3, [r6, #3]
				if (res == FR_OK) {
   59678:	e7e7      	b.n	5964a <f_mkdir+0x122>
   5967a:	2407      	movs	r4, #7
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
   5967c:	2200      	movs	r2, #0
   5967e:	4629      	mov	r1, r5
   59680:	a804      	add	r0, sp, #16
   59682:	f7fe fdd9 	bl	58238 <remove_chain>
   59686:	e7e4      	b.n	59652 <f_mkdir+0x12a>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
   59688:	2402      	movs	r4, #2
   5968a:	e7f7      	b.n	5967c <f_mkdir+0x154>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
   5968c:	2401      	movs	r4, #1
   5968e:	e7f5      	b.n	5967c <f_mkdir+0x154>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
   59690:	2408      	movs	r4, #8
   59692:	e7de      	b.n	59652 <f_mkdir+0x12a>

00059694 <f_rename>:
{
   59694:	b5f0      	push	{r4, r5, r6, r7, lr}
   59696:	b0bd      	sub	sp, #244	; 0xf4
   59698:	e9cd 1000 	strd	r1, r0, [sp]
	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
   5969c:	4668      	mov	r0, sp
   5969e:	f7f3 ff2f 	bl	4d500 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
   596a2:	2202      	movs	r2, #2
   596a4:	a903      	add	r1, sp, #12
   596a6:	a801      	add	r0, sp, #4
   596a8:	f7f3 ffec 	bl	4d684 <mount_volume>
	if (res == FR_OK) {
   596ac:	bb68      	cbnz	r0, 5970a <f_rename+0x76>
		djo.obj.fs = fs;
   596ae:	9c03      	ldr	r4, [sp, #12]
		res = follow_path(&djo, path_old);			/* Check old object */
   596b0:	ad14      	add	r5, sp, #80	; 0x50
   596b2:	4628      	mov	r0, r5
   596b4:	9901      	ldr	r1, [sp, #4]
		djo.obj.fs = fs;
   596b6:	9414      	str	r4, [sp, #80]	; 0x50
		res = follow_path(&djo, path_old);			/* Check old object */
   596b8:	f7f4 fcea 	bl	4e090 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   596bc:	bb28      	cbnz	r0, 5970a <f_rename+0x76>
   596be:	f89d 309b 	ldrb.w	r3, [sp, #155]	; 0x9b
   596c2:	f013 0fa0 	tst.w	r3, #160	; 0xa0
   596c6:	f040 80c3 	bne.w	59850 <f_rename+0x1bc>
			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
   596ca:	7823      	ldrb	r3, [r4, #0]
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   596cc:	9f00      	ldr	r7, [sp, #0]
			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
   596ce:	2b04      	cmp	r3, #4
   596d0:	d15a      	bne.n	59788 <f_rename+0xf4>
				memcpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
   596d2:	6923      	ldr	r3, [r4, #16]
   596d4:	ae04      	add	r6, sp, #16
   596d6:	f103 0c40 	add.w	ip, r3, #64	; 0x40
   596da:	4632      	mov	r2, r6
   596dc:	6818      	ldr	r0, [r3, #0]
   596de:	6859      	ldr	r1, [r3, #4]
   596e0:	3308      	adds	r3, #8
   596e2:	c203      	stmia	r2!, {r0, r1}
   596e4:	4563      	cmp	r3, ip
   596e6:	4616      	mov	r6, r2
   596e8:	d1f7      	bne.n	596da <f_rename+0x46>
				memcpy(&djn, &djo, sizeof djo);
   596ea:	4629      	mov	r1, r5
   596ec:	2250      	movs	r2, #80	; 0x50
   596ee:	a828      	add	r0, sp, #160	; 0xa0
   596f0:	f001 fbb3 	bl	5ae5a <memcpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   596f4:	4639      	mov	r1, r7
   596f6:	a828      	add	r0, sp, #160	; 0xa0
   596f8:	f7f4 fcca 	bl	4e090 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   596fc:	2800      	cmp	r0, #0
   596fe:	d140      	bne.n	59782 <f_rename+0xee>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   59700:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   59702:	9b16      	ldr	r3, [sp, #88]	; 0x58
   59704:	429a      	cmp	r2, r3
   59706:	d002      	beq.n	5970e <f_rename+0x7a>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   59708:	2008      	movs	r0, #8
}
   5970a:	b03d      	add	sp, #244	; 0xf4
   5970c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   5970e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   59710:	9b20      	ldr	r3, [sp, #128]	; 0x80
   59712:	429a      	cmp	r2, r3
   59714:	d1f8      	bne.n	59708 <f_rename+0x74>
					res = dir_register(&djn);			/* Register the new entry */
   59716:	a828      	add	r0, sp, #160	; 0xa0
   59718:	f7f4 fae6 	bl	4dce8 <dir_register>
					if (res == FR_OK) {
   5971c:	2800      	cmp	r0, #0
   5971e:	d1f4      	bne.n	5970a <f_rename+0x76>
						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
   59720:	6923      	ldr	r3, [r4, #16]
   59722:	af04      	add	r7, sp, #16
   59724:	f893 e001 	ldrb.w	lr, [r3, #1]
   59728:	f893 c023 	ldrb.w	ip, [r3, #35]	; 0x23
						nh = ld_word(fs->dirbuf + XDIR_NameHash);
   5972c:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
   5972e:	463a      	mov	r2, r7
   59730:	ca03      	ldmia	r2!, {r0, r1}
   59732:	42aa      	cmp	r2, r5
   59734:	6018      	str	r0, [r3, #0]
   59736:	6059      	str	r1, [r3, #4]
   59738:	4617      	mov	r7, r2
   5973a:	f103 0308 	add.w	r3, r3, #8
   5973e:	d1f6      	bne.n	5972e <f_rename+0x9a>
						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
   59740:	6923      	ldr	r3, [r4, #16]
						res = store_xdir(&djn);
   59742:	a828      	add	r0, sp, #160	; 0xa0
						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
   59744:	f883 e001 	strb.w	lr, [r3, #1]
   59748:	6923      	ldr	r3, [r4, #16]
   5974a:	f883 c023 	strb.w	ip, [r3, #35]	; 0x23
						st_word(fs->dirbuf + XDIR_NameHash, nh);
   5974e:	6923      	ldr	r3, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   59750:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
   59754:	0a36      	lsrs	r6, r6, #8
	*ptr++ = (BYTE)val;
   59756:	f883 6025 	strb.w	r6, [r3, #37]	; 0x25
						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   5975a:	6922      	ldr	r2, [r4, #16]
   5975c:	7913      	ldrb	r3, [r2, #4]
   5975e:	06d9      	lsls	r1, r3, #27
   59760:	bf5c      	itt	pl
   59762:	f043 0320 	orrpl.w	r3, r3, #32
   59766:	7113      	strbpl	r3, [r2, #4]
						res = store_xdir(&djn);
   59768:	f7ff f873 	bl	58852 <store_xdir>
			if (res == FR_OK) {
   5976c:	2800      	cmp	r0, #0
   5976e:	d1cc      	bne.n	5970a <f_rename+0x76>
				res = dir_remove(&djo);		/* Remove old entry */
   59770:	4628      	mov	r0, r5
   59772:	f7fe ffd9 	bl	58728 <dir_remove>
				if (res == FR_OK) {
   59776:	2800      	cmp	r0, #0
   59778:	d1c7      	bne.n	5970a <f_rename+0x76>
					res = sync_fs(fs);
   5977a:	4620      	mov	r0, r4
   5977c:	f7fe fe04 	bl	58388 <sync_fs>
   59780:	e7c3      	b.n	5970a <f_rename+0x76>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   59782:	2804      	cmp	r0, #4
   59784:	d1c1      	bne.n	5970a <f_rename+0x76>
   59786:	e7c6      	b.n	59716 <f_rename+0x82>
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
   59788:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   5978a:	ab04      	add	r3, sp, #16
   5978c:	f102 0c20 	add.w	ip, r2, #32
   59790:	461e      	mov	r6, r3
   59792:	6810      	ldr	r0, [r2, #0]
   59794:	6851      	ldr	r1, [r2, #4]
   59796:	3208      	adds	r2, #8
   59798:	c603      	stmia	r6!, {r0, r1}
   5979a:	4562      	cmp	r2, ip
   5979c:	4633      	mov	r3, r6
   5979e:	d1f7      	bne.n	59790 <f_rename+0xfc>
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
   597a0:	4629      	mov	r1, r5
   597a2:	2250      	movs	r2, #80	; 0x50
   597a4:	a828      	add	r0, sp, #160	; 0xa0
   597a6:	f001 fb58 	bl	5ae5a <memcpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   597aa:	4639      	mov	r1, r7
   597ac:	a828      	add	r0, sp, #160	; 0xa0
   597ae:	f7f4 fc6f 	bl	4e090 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   597b2:	2800      	cmp	r0, #0
   597b4:	d148      	bne.n	59848 <f_rename+0x1b4>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   597b6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   597b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   597ba:	429a      	cmp	r2, r3
   597bc:	d1a4      	bne.n	59708 <f_rename+0x74>
   597be:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   597c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   597c2:	429a      	cmp	r2, r3
   597c4:	d1a0      	bne.n	59708 <f_rename+0x74>
					res = dir_register(&djn);			/* Register the new entry */
   597c6:	a828      	add	r0, sp, #160	; 0xa0
   597c8:	f7f4 fa8e 	bl	4dce8 <dir_register>
					if (res == FR_OK) {
   597cc:	2800      	cmp	r0, #0
   597ce:	d19c      	bne.n	5970a <f_rename+0x76>
						dir = djn.dir;					/* Copy directory entry of the object except name */
   597d0:	9937      	ldr	r1, [sp, #220]	; 0xdc
   597d2:	f10d 031d 	add.w	r3, sp, #29
   597d6:	f101 020d 	add.w	r2, r1, #13
   597da:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
   597de:	f853 6b04 	ldr.w	r6, [r3], #4
   597e2:	4283      	cmp	r3, r0
   597e4:	f842 6b04 	str.w	r6, [r2], #4
   597e8:	d1f9      	bne.n	597de <f_rename+0x14a>
						fs->wflag = 1;
   597ea:	2601      	movs	r6, #1
   597ec:	8818      	ldrh	r0, [r3, #0]
   597ee:	8010      	strh	r0, [r2, #0]
   597f0:	789b      	ldrb	r3, [r3, #2]
   597f2:	7093      	strb	r3, [r2, #2]
						dir[DIR_Attr] = buf[DIR_Attr];
   597f4:	f89d 301b 	ldrb.w	r3, [sp, #27]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   597f8:	06da      	lsls	r2, r3, #27
   597fa:	bf58      	it	pl
   597fc:	f043 0320 	orrpl.w	r3, r3, #32
						dir[DIR_Attr] = buf[DIR_Attr];
   59800:	72cb      	strb	r3, [r1, #11]
						fs->wflag = 1;
   59802:	70e6      	strb	r6, [r4, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
   59804:	7acb      	ldrb	r3, [r1, #11]
   59806:	06db      	lsls	r3, r3, #27
   59808:	d5b2      	bpl.n	59770 <f_rename+0xdc>
   5980a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   5980c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   5980e:	429a      	cmp	r2, r3
   59810:	d0ae      	beq.n	59770 <f_rename+0xdc>
							sect = clst2sect(fs, ld_clust(fs, dir));
   59812:	7820      	ldrb	r0, [r4, #0]
   59814:	f7ff f84c 	bl	588b0 <ld_clust.isra.0>
   59818:	4601      	mov	r1, r0
   5981a:	4620      	mov	r0, r4
   5981c:	f7fe f98a 	bl	57b34 <clst2sect>
							if (sect == 0) {
   59820:	4601      	mov	r1, r0
   59822:	b1b8      	cbz	r0, 59854 <f_rename+0x1c0>
								res = move_window(fs, sect);
   59824:	4620      	mov	r0, r4
   59826:	f7fe fb25 	bl	57e74 <move_window>
								if (res == FR_OK && dir[1] == '.') {
   5982a:	2800      	cmp	r0, #0
   5982c:	f47f af6d 	bne.w	5970a <f_rename+0x76>
   59830:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   59834:	2b2e      	cmp	r3, #46	; 0x2e
   59836:	d19b      	bne.n	59770 <f_rename+0xdc>
									st_clust(fs, dir, djn.obj.sclust);
   59838:	4620      	mov	r0, r4
   5983a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   5983c:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   59840:	f7fe fb0c 	bl	57e5c <st_clust>
									fs->wflag = 1;
   59844:	70e6      	strb	r6, [r4, #3]
			if (res == FR_OK) {
   59846:	e793      	b.n	59770 <f_rename+0xdc>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   59848:	2804      	cmp	r0, #4
   5984a:	f47f af5e 	bne.w	5970a <f_rename+0x76>
   5984e:	e7ba      	b.n	597c6 <f_rename+0x132>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   59850:	2006      	movs	r0, #6
   59852:	e75a      	b.n	5970a <f_rename+0x76>
								res = FR_INT_ERR;
   59854:	2002      	movs	r0, #2
   59856:	e758      	b.n	5970a <f_rename+0x76>

00059858 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   59858:	4700      	bx	r0

0005985a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   5985a:	f001 ba1e 	b.w	5ac9a <z_impl_k_busy_wait>

0005985e <nrfx_clock_stop>:
    clock_stop(domain);
   5985e:	f7f5 bd39 	b.w	4f2d4 <clock_stop>

00059862 <set_ss_pin_state>:
{
   59862:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   59864:	7fc0      	ldrb	r0, [r0, #31]
   59866:	28ff      	cmp	r0, #255	; 0xff
   59868:	d006      	beq.n	59878 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   5986a:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   5986c:	079b      	lsls	r3, r3, #30
   5986e:	bf58      	it	pl
   59870:	f081 0101 	eorpl.w	r1, r1, #1
   59874:	f7f6 ba04 	b.w	4fc80 <nrf_gpio_pin_write>
}
   59878:	4770      	bx	lr

0005987a <rpc_transport_ipc_rx_data_suspend>:
   5987a:	2004      	movs	r0, #4
   5987c:	f7f6 b9cc 	b.w	4fc18 <nrfx_ipc_receive_event_disable>

00059880 <rpc_transport_ipc_rx_data_resume>:
   59880:	2004      	movs	r0, #4
   59882:	f7f6 b9c1 	b.w	4fc08 <nrfx_ipc_receive_event_enable>

00059886 <rpc_transport_ipc_shutdown>:
   59886:	f7f6 b991 	b.w	4fbac <nrfx_ipc_uninit>

0005988a <rpc_client_msg_from_rpc_msg_get>:
   5988a:	3008      	adds	r0, #8
   5988c:	4770      	bx	lr

0005988e <rpc_client_msg_alloc>:
   5988e:	b570      	push	{r4, r5, r6, lr}
   59890:	4606      	mov	r6, r0
   59892:	b130      	cbz	r0, 598a2 <rpc_client_msg_alloc+0x14>
   59894:	f7f0 f9d2 	bl	49c3c <nrf_modem_os_shm_tx_alloc>
   59898:	4605      	mov	r5, r0
   5989a:	b918      	cbnz	r0, 598a4 <rpc_client_msg_alloc+0x16>
   5989c:	2400      	movs	r4, #0
   5989e:	4620      	mov	r0, r4
   598a0:	bd70      	pop	{r4, r5, r6, pc}
   598a2:	4605      	mov	r5, r0
   598a4:	f7f6 fbdc 	bl	50060 <rpc_transport_msg_alloc>
   598a8:	4604      	mov	r4, r0
   598aa:	b938      	cbnz	r0, 598bc <rpc_client_msg_alloc+0x2e>
   598ac:	2d00      	cmp	r5, #0
   598ae:	d0f5      	beq.n	5989c <rpc_client_msg_alloc+0xe>
   598b0:	4628      	mov	r0, r5
   598b2:	f7f0 f9cb 	bl	49c4c <nrf_modem_os_shm_tx_free>
   598b6:	f7f0 f99d 	bl	49bf4 <nrf_modem_os_event_notify>
   598ba:	e7f0      	b.n	5989e <rpc_client_msg_alloc+0x10>
   598bc:	60c6      	str	r6, [r0, #12]
   598be:	f844 5f08 	str.w	r5, [r4, #8]!
   598c2:	e7ec      	b.n	5989e <rpc_client_msg_alloc+0x10>

000598c4 <rpc_client_msg_send>:
   598c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   598c8:	4610      	mov	r0, r2
   598ca:	f840 1d08 	str.w	r1, [r0, #-8]!
   598ce:	f7f6 bbd9 	b.w	50084 <rpc_transport_msg_send>

000598d2 <rpc_client_msg_free>:
   598d2:	3808      	subs	r0, #8
   598d4:	f7f6 bbca 	b.w	5006c <rpc_transport_msg_free>

000598d8 <rpc_client_msg_data_rx_free>:
   598d8:	f7f6 bbce 	b.w	50078 <rpc_transport_msg_data_rx_free>

000598dc <rpc_client_msg_data_tx_alloc>:
   598dc:	f7f0 b9ae 	b.w	49c3c <nrf_modem_os_shm_tx_alloc>

000598e0 <rpc_client_msg_data_tx_free>:
   598e0:	b508      	push	{r3, lr}
   598e2:	f7f0 f9b3 	bl	49c4c <nrf_modem_os_shm_tx_free>
   598e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   598ea:	f7f0 b983 	b.w	49bf4 <nrf_modem_os_event_notify>

000598ee <sock_has_pkt>:
   598ee:	6840      	ldr	r0, [r0, #4]
   598f0:	3800      	subs	r0, #0
   598f2:	bf18      	it	ne
   598f4:	2001      	movne	r0, #1
   598f6:	4770      	bx	lr

000598f8 <sock_pkt_append>:
   598f8:	2300      	movs	r3, #0
   598fa:	600b      	str	r3, [r1, #0]
   598fc:	6883      	ldr	r3, [r0, #8]
   598fe:	b913      	cbnz	r3, 59906 <sock_pkt_append+0xe>
   59900:	e9c0 1101 	strd	r1, r1, [r0, #4]
   59904:	4770      	bx	lr
   59906:	6019      	str	r1, [r3, #0]
   59908:	6081      	str	r1, [r0, #8]
   5990a:	4770      	bx	lr

0005990c <sock_pkt_remove>:
   5990c:	b538      	push	{r3, r4, r5, lr}
   5990e:	4605      	mov	r5, r0
   59910:	460c      	mov	r4, r1
   59912:	f7f6 fbc3 	bl	5009c <rpc_transport_rx_data_suspend>
   59916:	68aa      	ldr	r2, [r5, #8]
   59918:	6823      	ldr	r3, [r4, #0]
   5991a:	4294      	cmp	r4, r2
   5991c:	606b      	str	r3, [r5, #4]
   5991e:	bf08      	it	eq
   59920:	60ab      	streq	r3, [r5, #8]
   59922:	2300      	movs	r3, #0
   59924:	4620      	mov	r0, r4
   59926:	6023      	str	r3, [r4, #0]
   59928:	f000 f8fa 	bl	59b20 <pkt_free>
   5992c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   59930:	f7f6 bbba 	b.w	500a8 <rpc_transport_rx_data_resume>

00059934 <sock_pkt_peek_head>:
   59934:	6840      	ldr	r0, [r0, #4]
   59936:	4770      	bx	lr

00059938 <sock_is_stream>:
   59938:	6900      	ldr	r0, [r0, #16]
   5993a:	1e43      	subs	r3, r0, #1
   5993c:	4258      	negs	r0, r3
   5993e:	4158      	adcs	r0, r3
   59940:	4770      	bx	lr

00059942 <sock_is_datagram>:
   59942:	6900      	ldr	r0, [r0, #16]
   59944:	1e83      	subs	r3, r0, #2
   59946:	4258      	negs	r0, r3
   59948:	4158      	adcs	r0, r3
   5994a:	4770      	bx	lr

0005994c <sock_is_raw>:
   5994c:	6900      	ldr	r0, [r0, #16]
   5994e:	1ec3      	subs	r3, r0, #3
   59950:	4258      	negs	r0, r3
   59952:	4158      	adcs	r0, r3
   59954:	4770      	bx	lr

00059956 <sock_proto_is_secure>:
   59956:	6940      	ldr	r0, [r0, #20]
   59958:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   5995c:	d005      	beq.n	5996a <sock_proto_is_secure+0x14>
   5995e:	f240 1311 	movw	r3, #273	; 0x111
   59962:	1ac3      	subs	r3, r0, r3
   59964:	4258      	negs	r0, r3
   59966:	4158      	adcs	r0, r3
   59968:	4770      	bx	lr
   5996a:	2001      	movs	r0, #1
   5996c:	4770      	bx	lr

0005996e <sock_is_connecting>:
   5996e:	7f00      	ldrb	r0, [r0, #28]
   59970:	f3c0 0080 	ubfx	r0, r0, #2, #1
   59974:	4770      	bx	lr

00059976 <sock_is_connected>:
   59976:	7f00      	ldrb	r0, [r0, #28]
   59978:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   5997c:	4770      	bx	lr

0005997e <sock_is_attaching>:
   5997e:	7f00      	ldrb	r0, [r0, #28]
   59980:	f3c0 1000 	ubfx	r0, r0, #4, #1
   59984:	4770      	bx	lr

00059986 <sock_is_nonblock>:
   59986:	6b40      	ldr	r0, [r0, #52]	; 0x34
   59988:	f000 0001 	and.w	r0, r0, #1
   5998c:	4770      	bx	lr

0005998e <sock_is_local_closed>:
   5998e:	7f00      	ldrb	r0, [r0, #28]
   59990:	f000 0001 	and.w	r0, r0, #1
   59994:	4770      	bx	lr

00059996 <sock_is_closed>:
   59996:	7f00      	ldrb	r0, [r0, #28]
   59998:	f3c0 0040 	ubfx	r0, r0, #1, #1
   5999c:	4770      	bx	lr

0005999e <sock_has_error>:
   5999e:	6983      	ldr	r3, [r0, #24]
   599a0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   599a4:	bf14      	ite	ne
   599a6:	2001      	movne	r0, #1
   599a8:	2000      	moveq	r0, #0
   599aa:	4770      	bx	lr

000599ac <sock_has_flow_control>:
   599ac:	7f00      	ldrb	r0, [r0, #28]
   599ae:	f3c0 1080 	ubfx	r0, r0, #6, #1
   599b2:	4770      	bx	lr

000599b4 <sock_can_read>:
   599b4:	6840      	ldr	r0, [r0, #4]
   599b6:	3800      	subs	r0, #0
   599b8:	bf18      	it	ne
   599ba:	2001      	movne	r0, #1
   599bc:	4770      	bx	lr

000599be <sock_can_accept>:
   599be:	7f40      	ldrb	r0, [r0, #29]
   599c0:	3800      	subs	r0, #0
   599c2:	bf18      	it	ne
   599c4:	2001      	movne	r0, #1
   599c6:	4770      	bx	lr

000599c8 <sock_can_send>:
   599c8:	b508      	push	{r3, lr}
   599ca:	6903      	ldr	r3, [r0, #16]
   599cc:	4601      	mov	r1, r0
   599ce:	2b01      	cmp	r3, #1
   599d0:	bf0a      	itet	eq
   599d2:	7f02      	ldrbeq	r2, [r0, #28]
   599d4:	2201      	movne	r2, #1
   599d6:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
   599da:	f7ff ffbc 	bl	59956 <sock_proto_is_secure>
   599de:	b170      	cbz	r0, 599fe <sock_can_send+0x36>
   599e0:	7f08      	ldrb	r0, [r1, #28]
   599e2:	f3c0 1040 	ubfx	r0, r0, #5, #1
   599e6:	b162      	cbz	r2, 59a02 <sock_can_send+0x3a>
   599e8:	b140      	cbz	r0, 599fc <sock_can_send+0x34>
   599ea:	7f0a      	ldrb	r2, [r1, #28]
   599ec:	0793      	lsls	r3, r2, #30
   599ee:	bf4f      	iteee	mi
   599f0:	2000      	movmi	r0, #0
   599f2:	f3c2 1280 	ubfxpl	r2, r2, #6, #1
   599f6:	f082 0201 	eorpl.w	r2, r2, #1
   599fa:	b2d0      	uxtbpl	r0, r2
   599fc:	bd08      	pop	{r3, pc}
   599fe:	2a00      	cmp	r2, #0
   59a00:	d1f3      	bne.n	599ea <sock_can_send+0x22>
   59a02:	4610      	mov	r0, r2
   59a04:	e7fa      	b.n	599fc <sock_can_send+0x34>

00059a06 <sock_rcvtimeo_ms_get>:
   59a06:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   59a0a:	ea53 0102 	orrs.w	r1, r3, r2
   59a0e:	d009      	beq.n	59a24 <sock_rcvtimeo_ms_get+0x1e>
   59a10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   59a14:	fbb3 f0f1 	udiv	r0, r3, r1
   59a18:	fb01 0002 	mla	r0, r1, r2, r0
   59a1c:	2801      	cmp	r0, #1
   59a1e:	bfb8      	it	lt
   59a20:	2001      	movlt	r0, #1
   59a22:	4770      	bx	lr
   59a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   59a28:	4770      	bx	lr

00059a2a <sock_sndtimeo_ms_get>:
   59a2a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   59a2e:	ea53 0102 	orrs.w	r1, r3, r2
   59a32:	d009      	beq.n	59a48 <sock_sndtimeo_ms_get+0x1e>
   59a34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   59a38:	fbb3 f0f1 	udiv	r0, r3, r1
   59a3c:	fb01 0002 	mla	r0, r1, r2, r0
   59a40:	2801      	cmp	r0, #1
   59a42:	bfb8      	it	lt
   59a44:	2001      	movlt	r0, #1
   59a46:	4770      	bx	lr
   59a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   59a4c:	4770      	bx	lr

00059a4e <sock_family_is_valid>:
   59a4e:	3801      	subs	r0, #1
   59a50:	2802      	cmp	r0, #2
   59a52:	bf8c      	ite	hi
   59a54:	2000      	movhi	r0, #0
   59a56:	2001      	movls	r0, #1
   59a58:	4770      	bx	lr

00059a5a <sock_type_is_valid>:
   59a5a:	3801      	subs	r0, #1
   59a5c:	2802      	cmp	r0, #2
   59a5e:	bf8c      	ite	hi
   59a60:	2000      	movhi	r0, #0
   59a62:	2001      	movls	r0, #1
   59a64:	4770      	bx	lr

00059a66 <sock_proto_is_valid>:
   59a66:	b150      	cbz	r0, 59a7e <sock_proto_is_valid+0x18>
   59a68:	2806      	cmp	r0, #6
   59a6a:	d008      	beq.n	59a7e <sock_proto_is_valid+0x18>
   59a6c:	f420 7380 	bic.w	r3, r0, #256	; 0x100
   59a70:	2b11      	cmp	r3, #17
   59a72:	d004      	beq.n	59a7e <sock_proto_is_valid+0x18>
   59a74:	f5a0 7381 	sub.w	r3, r0, #258	; 0x102
   59a78:	4258      	negs	r0, r3
   59a7a:	4158      	adcs	r0, r3
   59a7c:	4770      	bx	lr
   59a7e:	2001      	movs	r0, #1
   59a80:	4770      	bx	lr

00059a82 <sock_proto_supports_type>:
   59a82:	2903      	cmp	r1, #3
   59a84:	d015      	beq.n	59ab2 <sock_proto_supports_type+0x30>
   59a86:	2811      	cmp	r0, #17
   59a88:	d00c      	beq.n	59aa4 <sock_proto_supports_type+0x22>
   59a8a:	dc04      	bgt.n	59a96 <sock_proto_supports_type+0x14>
   59a8c:	b188      	cbz	r0, 59ab2 <sock_proto_supports_type+0x30>
   59a8e:	2806      	cmp	r0, #6
   59a90:	d00a      	beq.n	59aa8 <sock_proto_supports_type+0x26>
   59a92:	2000      	movs	r0, #0
   59a94:	4770      	bx	lr
   59a96:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   59a9a:	d005      	beq.n	59aa8 <sock_proto_supports_type+0x26>
   59a9c:	f240 1311 	movw	r3, #273	; 0x111
   59aa0:	4298      	cmp	r0, r3
   59aa2:	d1f6      	bne.n	59a92 <sock_proto_supports_type+0x10>
   59aa4:	2902      	cmp	r1, #2
   59aa6:	e000      	b.n	59aaa <sock_proto_supports_type+0x28>
   59aa8:	2901      	cmp	r1, #1
   59aaa:	bf14      	ite	ne
   59aac:	2000      	movne	r0, #0
   59aae:	2001      	moveq	r0, #1
   59ab0:	4770      	bx	lr
   59ab2:	2001      	movs	r0, #1
   59ab4:	4770      	bx	lr

00059ab6 <sock_sockaddr_len_is_valid>:
   59ab6:	6843      	ldr	r3, [r0, #4]
   59ab8:	2b01      	cmp	r3, #1
   59aba:	d003      	beq.n	59ac4 <sock_sockaddr_len_is_valid+0xe>
   59abc:	2b02      	cmp	r3, #2
   59abe:	d009      	beq.n	59ad4 <sock_sockaddr_len_is_valid+0x1e>
   59ac0:	2000      	movs	r0, #0
   59ac2:	4770      	bx	lr
   59ac4:	7803      	ldrb	r3, [r0, #0]
   59ac6:	2b10      	cmp	r3, #16
   59ac8:	d1fa      	bne.n	59ac0 <sock_sockaddr_len_is_valid+0xa>
   59aca:	2910      	cmp	r1, #16
   59acc:	bf14      	ite	ne
   59ace:	2000      	movne	r0, #0
   59ad0:	2001      	moveq	r0, #1
   59ad2:	4770      	bx	lr
   59ad4:	7803      	ldrb	r3, [r0, #0]
   59ad6:	2b24      	cmp	r3, #36	; 0x24
   59ad8:	d1f2      	bne.n	59ac0 <sock_sockaddr_len_is_valid+0xa>
   59ada:	2924      	cmp	r1, #36	; 0x24
   59adc:	e7f6      	b.n	59acc <sock_sockaddr_len_is_valid+0x16>

00059ade <sock_sockaddr_fam_is_valid>:
   59ade:	68c3      	ldr	r3, [r0, #12]
   59ae0:	2b01      	cmp	r3, #1
   59ae2:	d003      	beq.n	59aec <sock_sockaddr_fam_is_valid+0xe>
   59ae4:	2b02      	cmp	r3, #2
   59ae6:	d007      	beq.n	59af8 <sock_sockaddr_fam_is_valid+0x1a>
   59ae8:	2001      	movs	r0, #1
   59aea:	4770      	bx	lr
   59aec:	6848      	ldr	r0, [r1, #4]
   59aee:	2801      	cmp	r0, #1
   59af0:	bf14      	ite	ne
   59af2:	2000      	movne	r0, #0
   59af4:	2001      	moveq	r0, #1
   59af6:	4770      	bx	lr
   59af8:	6848      	ldr	r0, [r1, #4]
   59afa:	2802      	cmp	r0, #2
   59afc:	e7f8      	b.n	59af0 <sock_sockaddr_fam_is_valid+0x12>

00059afe <pkt_has_next>:
   59afe:	b100      	cbz	r0, 59b02 <pkt_has_next+0x4>
   59b00:	6800      	ldr	r0, [r0, #0]
   59b02:	3800      	subs	r0, #0
   59b04:	bf18      	it	ne
   59b06:	2001      	movne	r0, #1
   59b08:	4770      	bx	lr

00059b0a <pkt_peek_next>:
   59b0a:	b100      	cbz	r0, 59b0e <pkt_peek_next+0x4>
   59b0c:	6800      	ldr	r0, [r0, #0]
   59b0e:	4770      	bx	lr

00059b10 <pkt_bytes_get>:
   59b10:	8943      	ldrh	r3, [r0, #10]
   59b12:	6840      	ldr	r0, [r0, #4]
   59b14:	4418      	add	r0, r3
   59b16:	4770      	bx	lr

00059b18 <pkt_bytes_left>:
   59b18:	8902      	ldrh	r2, [r0, #8]
   59b1a:	8940      	ldrh	r0, [r0, #10]
   59b1c:	1a10      	subs	r0, r2, r0
   59b1e:	4770      	bx	lr

00059b20 <pkt_free>:
   59b20:	b510      	push	{r4, lr}
   59b22:	4604      	mov	r4, r0
   59b24:	6840      	ldr	r0, [r0, #4]
   59b26:	f7ff fed7 	bl	598d8 <rpc_client_msg_data_rx_free>
   59b2a:	68e0      	ldr	r0, [r4, #12]
   59b2c:	b108      	cbz	r0, 59b32 <pkt_free+0x12>
   59b2e:	f7f0 f87f 	bl	49c30 <nrf_modem_os_free>
   59b32:	4620      	mov	r0, r4
   59b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   59b38:	f7f0 b87a 	b.w	49c30 <nrf_modem_os_free>

00059b3c <pkt_flush>:
   59b3c:	b510      	push	{r4, lr}
   59b3e:	4604      	mov	r4, r0
   59b40:	6820      	ldr	r0, [r4, #0]
   59b42:	b900      	cbnz	r0, 59b46 <pkt_flush+0xa>
   59b44:	bd10      	pop	{r4, pc}
   59b46:	6862      	ldr	r2, [r4, #4]
   59b48:	6803      	ldr	r3, [r0, #0]
   59b4a:	4290      	cmp	r0, r2
   59b4c:	6023      	str	r3, [r4, #0]
   59b4e:	bf08      	it	eq
   59b50:	6063      	streq	r3, [r4, #4]
   59b52:	f7ff ffe5 	bl	59b20 <pkt_free>
   59b56:	e7f3      	b.n	59b40 <pkt_flush+0x4>

00059b58 <on_conf_dnssrv_res>:
   59b58:	f000 bd54 	b.w	5a604 <res_forward>

00059b5c <nrf_freeaddrinfo>:
   59b5c:	b510      	push	{r4, lr}
   59b5e:	4604      	mov	r4, r0
   59b60:	b160      	cbz	r0, 59b7c <nrf_freeaddrinfo+0x20>
   59b62:	6940      	ldr	r0, [r0, #20]
   59b64:	b108      	cbz	r0, 59b6a <nrf_freeaddrinfo+0xe>
   59b66:	f7f0 f863 	bl	49c30 <nrf_modem_os_free>
   59b6a:	69a0      	ldr	r0, [r4, #24]
   59b6c:	b108      	cbz	r0, 59b72 <nrf_freeaddrinfo+0x16>
   59b6e:	f7f0 f85f 	bl	49c30 <nrf_modem_os_free>
   59b72:	4620      	mov	r0, r4
   59b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   59b78:	f7f0 b85a 	b.w	49c30 <nrf_modem_os_free>
   59b7c:	bd10      	pop	{r4, pc}

00059b7e <nrf_socket>:
   59b7e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   59b82:	4681      	mov	r9, r0
   59b84:	4688      	mov	r8, r1
   59b86:	4617      	mov	r7, r2
   59b88:	f7ff ff61 	bl	59a4e <sock_family_is_valid>
   59b8c:	b938      	cbnz	r0, 59b9e <nrf_socket+0x20>
   59b8e:	206a      	movs	r0, #106	; 0x6a
   59b90:	f7fd fb73 	bl	5727a <nrf_modem_os_errno_set>
   59b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   59b98:	b003      	add	sp, #12
   59b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   59b9e:	4638      	mov	r0, r7
   59ba0:	f7ff ff61 	bl	59a66 <sock_proto_is_valid>
   59ba4:	b908      	cbnz	r0, 59baa <nrf_socket+0x2c>
   59ba6:	207b      	movs	r0, #123	; 0x7b
   59ba8:	e7f2      	b.n	59b90 <nrf_socket+0x12>
   59baa:	4640      	mov	r0, r8
   59bac:	f7ff ff55 	bl	59a5a <sock_type_is_valid>
   59bb0:	b908      	cbnz	r0, 59bb6 <nrf_socket+0x38>
   59bb2:	206b      	movs	r0, #107	; 0x6b
   59bb4:	e7ec      	b.n	59b90 <nrf_socket+0x12>
   59bb6:	4641      	mov	r1, r8
   59bb8:	4638      	mov	r0, r7
   59bba:	f7ff ff62 	bl	59a82 <sock_proto_supports_type>
   59bbe:	2800      	cmp	r0, #0
   59bc0:	d0f7      	beq.n	59bb2 <nrf_socket+0x34>
   59bc2:	f7f6 fdb7 	bl	50734 <sock_open>
   59bc6:	4606      	mov	r6, r0
   59bc8:	b908      	cbnz	r0, 59bce <nrf_socket+0x50>
   59bca:	2017      	movs	r0, #23
   59bcc:	e7e0      	b.n	59b90 <nrf_socket+0x12>
   59bce:	2000      	movs	r0, #0
   59bd0:	f7ff fe5d 	bl	5988e <rpc_client_msg_alloc>
   59bd4:	4604      	mov	r4, r0
   59bd6:	b920      	cbnz	r0, 59be2 <nrf_socket+0x64>
   59bd8:	6830      	ldr	r0, [r6, #0]
   59bda:	f7f6 fde1 	bl	507a0 <_sock_close>
   59bde:	2069      	movs	r0, #105	; 0x69
   59be0:	e7d6      	b.n	59b90 <nrf_socket+0x12>
   59be2:	2300      	movs	r3, #0
   59be4:	220c      	movs	r2, #12
   59be6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   59bea:	7202      	strb	r2, [r0, #8]
   59bec:	7243      	strb	r3, [r0, #9]
   59bee:	7283      	strb	r3, [r0, #10]
   59bf0:	72c3      	strb	r3, [r0, #11]
   59bf2:	7405      	strb	r5, [r0, #16]
   59bf4:	7445      	strb	r5, [r0, #17]
   59bf6:	7485      	strb	r5, [r0, #18]
   59bf8:	74c5      	strb	r5, [r0, #19]
   59bfa:	4648      	mov	r0, r9
   59bfc:	f7f7 fbbc 	bl	51378 <nrf_af_to_rpc_af>
   59c00:	6160      	str	r0, [r4, #20]
   59c02:	4640      	mov	r0, r8
   59c04:	f000 fca4 	bl	5a550 <nrf_type_to_rpc_type>
   59c08:	4601      	mov	r1, r0
   59c0a:	61a0      	str	r0, [r4, #24]
   59c0c:	4638      	mov	r0, r7
   59c0e:	f000 fca0 	bl	5a552 <nrf_proto_to_rpc_proto>
   59c12:	4621      	mov	r1, r4
   59c14:	61e0      	str	r0, [r4, #28]
   59c16:	aa01      	add	r2, sp, #4
   59c18:	f247 0001 	movw	r0, #28673	; 0x7001
   59c1c:	f7f7 fbcc 	bl	513b8 <req_forward>
   59c20:	4604      	mov	r4, r0
   59c22:	b120      	cbz	r0, 59c2e <nrf_socket+0xb0>
   59c24:	4628      	mov	r0, r5
   59c26:	f7f6 fdbb 	bl	507a0 <_sock_close>
   59c2a:	4620      	mov	r0, r4
   59c2c:	e7b0      	b.n	59b90 <nrf_socket+0x12>
   59c2e:	9b01      	ldr	r3, [sp, #4]
   59c30:	699b      	ldr	r3, [r3, #24]
   59c32:	e9c6 9803 	strd	r9, r8, [r6, #12]
   59c36:	6033      	str	r3, [r6, #0]
   59c38:	9801      	ldr	r0, [sp, #4]
   59c3a:	6177      	str	r7, [r6, #20]
   59c3c:	f7ff fe49 	bl	598d2 <rpc_client_msg_free>
   59c40:	6830      	ldr	r0, [r6, #0]
   59c42:	e7a9      	b.n	59b98 <nrf_socket+0x1a>

00059c44 <nrf_connect>:
   59c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   59c46:	4607      	mov	r7, r0
   59c48:	460c      	mov	r4, r1
   59c4a:	4616      	mov	r6, r2
   59c4c:	f7f6 fd96 	bl	5077c <sock_find>
   59c50:	4605      	mov	r5, r0
   59c52:	b938      	cbnz	r0, 59c64 <nrf_connect+0x20>
   59c54:	2009      	movs	r0, #9
   59c56:	f7fd fb10 	bl	5727a <nrf_modem_os_errno_set>
   59c5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   59c5e:	4620      	mov	r0, r4
   59c60:	b003      	add	sp, #12
   59c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   59c64:	f7ff fe87 	bl	59976 <sock_is_connected>
   59c68:	b108      	cbz	r0, 59c6e <nrf_connect+0x2a>
   59c6a:	207f      	movs	r0, #127	; 0x7f
   59c6c:	e7f3      	b.n	59c56 <nrf_connect+0x12>
   59c6e:	4628      	mov	r0, r5
   59c70:	f7ff fe7d 	bl	5996e <sock_is_connecting>
   59c74:	b108      	cbz	r0, 59c7a <nrf_connect+0x36>
   59c76:	2078      	movs	r0, #120	; 0x78
   59c78:	e7ed      	b.n	59c56 <nrf_connect+0x12>
   59c7a:	4628      	mov	r0, r5
   59c7c:	f7ff fe8b 	bl	59996 <sock_is_closed>
   59c80:	b108      	cbz	r0, 59c86 <nrf_connect+0x42>
   59c82:	69a8      	ldr	r0, [r5, #24]
   59c84:	e7e7      	b.n	59c56 <nrf_connect+0x12>
   59c86:	b90c      	cbnz	r4, 59c8c <nrf_connect+0x48>
   59c88:	200e      	movs	r0, #14
   59c8a:	e7e4      	b.n	59c56 <nrf_connect+0x12>
   59c8c:	4631      	mov	r1, r6
   59c8e:	4620      	mov	r0, r4
   59c90:	f7ff ff11 	bl	59ab6 <sock_sockaddr_len_is_valid>
   59c94:	b908      	cbnz	r0, 59c9a <nrf_connect+0x56>
   59c96:	2016      	movs	r0, #22
   59c98:	e7dd      	b.n	59c56 <nrf_connect+0x12>
   59c9a:	4621      	mov	r1, r4
   59c9c:	4628      	mov	r0, r5
   59c9e:	f7ff ff1e 	bl	59ade <sock_sockaddr_fam_is_valid>
   59ca2:	b908      	cbnz	r0, 59ca8 <nrf_connect+0x64>
   59ca4:	206a      	movs	r0, #106	; 0x6a
   59ca6:	e7d6      	b.n	59c56 <nrf_connect+0x12>
   59ca8:	4628      	mov	r0, r5
   59caa:	f7ff fe6c 	bl	59986 <sock_is_nonblock>
   59cae:	b150      	cbz	r0, 59cc6 <nrf_connect+0x82>
   59cb0:	696e      	ldr	r6, [r5, #20]
   59cb2:	3e11      	subs	r6, #17
   59cb4:	bf18      	it	ne
   59cb6:	2601      	movne	r6, #1
   59cb8:	2000      	movs	r0, #0
   59cba:	f7ff fde8 	bl	5988e <rpc_client_msg_alloc>
   59cbe:	4602      	mov	r2, r0
   59cc0:	b918      	cbnz	r0, 59cca <nrf_connect+0x86>
   59cc2:	2069      	movs	r0, #105	; 0x69
   59cc4:	e7c7      	b.n	59c56 <nrf_connect+0x12>
   59cc6:	4606      	mov	r6, r0
   59cc8:	e7f6      	b.n	59cb8 <nrf_connect+0x74>
   59cca:	2300      	movs	r3, #0
   59ccc:	2114      	movs	r1, #20
   59cce:	6107      	str	r7, [r0, #16]
   59cd0:	7201      	strb	r1, [r0, #8]
   59cd2:	7243      	strb	r3, [r0, #9]
   59cd4:	7283      	strb	r3, [r0, #10]
   59cd6:	72c3      	strb	r3, [r0, #11]
   59cd8:	6861      	ldr	r1, [r4, #4]
   59cda:	2901      	cmp	r1, #1
   59cdc:	d00e      	beq.n	59cfc <nrf_connect+0xb8>
   59cde:	2902      	cmp	r1, #2
   59ce0:	d014      	beq.n	59d0c <nrf_connect+0xc8>
   59ce2:	7f2b      	ldrb	r3, [r5, #28]
   59ce4:	f247 0102 	movw	r1, #28674	; 0x7002
   59ce8:	f043 0304 	orr.w	r3, r3, #4
   59cec:	772b      	strb	r3, [r5, #28]
   59cee:	2004      	movs	r0, #4
   59cf0:	60d6      	str	r6, [r2, #12]
   59cf2:	f7ff fde7 	bl	598c4 <rpc_client_msg_send>
   59cf6:	b1ce      	cbz	r6, 59d2c <nrf_connect+0xe8>
   59cf8:	2077      	movs	r0, #119	; 0x77
   59cfa:	e7ac      	b.n	59c56 <nrf_connect+0x12>
   59cfc:	8921      	ldrh	r1, [r4, #8]
   59cfe:	75c3      	strb	r3, [r0, #23]
   59d00:	8281      	strh	r1, [r0, #20]
   59d02:	2104      	movs	r1, #4
   59d04:	7581      	strb	r1, [r0, #22]
   59d06:	68e3      	ldr	r3, [r4, #12]
   59d08:	6183      	str	r3, [r0, #24]
   59d0a:	e7ea      	b.n	59ce2 <nrf_connect+0x9e>
   59d0c:	8921      	ldrh	r1, [r4, #8]
   59d0e:	75c3      	strb	r3, [r0, #23]
   59d10:	8281      	strh	r1, [r0, #20]
   59d12:	2110      	movs	r1, #16
   59d14:	1863      	adds	r3, r4, r1
   59d16:	7581      	strb	r1, [r0, #22]
   59d18:	3420      	adds	r4, #32
   59d1a:	f100 0118 	add.w	r1, r0, #24
   59d1e:	f853 0b04 	ldr.w	r0, [r3], #4
   59d22:	42a3      	cmp	r3, r4
   59d24:	f841 0b04 	str.w	r0, [r1], #4
   59d28:	d1f9      	bne.n	59d1e <nrf_connect+0xda>
   59d2a:	e7da      	b.n	59ce2 <nrf_connect+0x9e>
   59d2c:	4628      	mov	r0, r5
   59d2e:	f7ff fe7c 	bl	59a2a <sock_sndtimeo_ms_get>
   59d32:	9001      	str	r0, [sp, #4]
   59d34:	4628      	mov	r0, r5
   59d36:	f7ff fe1a 	bl	5996e <sock_is_connecting>
   59d3a:	b918      	cbnz	r0, 59d44 <nrf_connect+0x100>
   59d3c:	69ac      	ldr	r4, [r5, #24]
   59d3e:	b17c      	cbz	r4, 59d60 <nrf_connect+0x11c>
   59d40:	4620      	mov	r0, r4
   59d42:	e788      	b.n	59c56 <nrf_connect+0x12>
   59d44:	2000      	movs	r0, #0
   59d46:	a901      	add	r1, sp, #4
   59d48:	f7ef fe76 	bl	49a38 <nrf_modem_os_timedwait>
   59d4c:	f110 0f0b 	cmn.w	r0, #11
   59d50:	d004      	beq.n	59d5c <nrf_connect+0x118>
   59d52:	2800      	cmp	r0, #0
   59d54:	d0ee      	beq.n	59d34 <nrf_connect+0xf0>
   59d56:	f001 f85e 	bl	5ae16 <abs>
   59d5a:	e77c      	b.n	59c56 <nrf_connect+0x12>
   59d5c:	2074      	movs	r0, #116	; 0x74
   59d5e:	e77a      	b.n	59c56 <nrf_connect+0x12>
   59d60:	4628      	mov	r0, r5
   59d62:	f7ff fdf8 	bl	59956 <sock_proto_is_secure>
   59d66:	2800      	cmp	r0, #0
   59d68:	f43f af79 	beq.w	59c5e <nrf_connect+0x1a>
   59d6c:	4628      	mov	r0, r5
   59d6e:	9901      	ldr	r1, [sp, #4]
   59d70:	f7f7 fa8c 	bl	5128c <tls_attach>
   59d74:	4604      	mov	r4, r0
   59d76:	e772      	b.n	59c5e <nrf_connect+0x1a>

00059d78 <nrf_bind>:
   59d78:	b538      	push	{r3, r4, r5, lr}
   59d7a:	4605      	mov	r5, r0
   59d7c:	460c      	mov	r4, r1
   59d7e:	f7f6 fcfd 	bl	5077c <sock_find>
   59d82:	b928      	cbnz	r0, 59d90 <nrf_bind+0x18>
   59d84:	2009      	movs	r0, #9
   59d86:	f7fd fa78 	bl	5727a <nrf_modem_os_errno_set>
   59d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   59d8e:	e023      	b.n	59dd8 <nrf_bind+0x60>
   59d90:	b90c      	cbnz	r4, 59d96 <nrf_bind+0x1e>
   59d92:	200e      	movs	r0, #14
   59d94:	e7f7      	b.n	59d86 <nrf_bind+0xe>
   59d96:	4621      	mov	r1, r4
   59d98:	f7ff fea1 	bl	59ade <sock_sockaddr_fam_is_valid>
   59d9c:	b908      	cbnz	r0, 59da2 <nrf_bind+0x2a>
   59d9e:	206a      	movs	r0, #106	; 0x6a
   59da0:	e7f1      	b.n	59d86 <nrf_bind+0xe>
   59da2:	2000      	movs	r0, #0
   59da4:	f7ff fd73 	bl	5988e <rpc_client_msg_alloc>
   59da8:	b908      	cbnz	r0, 59dae <nrf_bind+0x36>
   59daa:	2069      	movs	r0, #105	; 0x69
   59dac:	e7eb      	b.n	59d86 <nrf_bind+0xe>
   59dae:	2300      	movs	r3, #0
   59db0:	2214      	movs	r2, #20
   59db2:	6105      	str	r5, [r0, #16]
   59db4:	7202      	strb	r2, [r0, #8]
   59db6:	7243      	strb	r3, [r0, #9]
   59db8:	7283      	strb	r3, [r0, #10]
   59dba:	72c3      	strb	r3, [r0, #11]
   59dbc:	6862      	ldr	r2, [r4, #4]
   59dbe:	2a01      	cmp	r2, #1
   59dc0:	d00c      	beq.n	59ddc <nrf_bind+0x64>
   59dc2:	2a02      	cmp	r2, #2
   59dc4:	d012      	beq.n	59dec <nrf_bind+0x74>
   59dc6:	4601      	mov	r1, r0
   59dc8:	2200      	movs	r2, #0
   59dca:	f247 0005 	movw	r0, #28677	; 0x7005
   59dce:	f7f7 faf3 	bl	513b8 <req_forward>
   59dd2:	4603      	mov	r3, r0
   59dd4:	2800      	cmp	r0, #0
   59dd6:	d1d6      	bne.n	59d86 <nrf_bind+0xe>
   59dd8:	4618      	mov	r0, r3
   59dda:	bd38      	pop	{r3, r4, r5, pc}
   59ddc:	8922      	ldrh	r2, [r4, #8]
   59dde:	75c3      	strb	r3, [r0, #23]
   59de0:	8282      	strh	r2, [r0, #20]
   59de2:	2204      	movs	r2, #4
   59de4:	7582      	strb	r2, [r0, #22]
   59de6:	68e3      	ldr	r3, [r4, #12]
   59de8:	6183      	str	r3, [r0, #24]
   59dea:	e7ec      	b.n	59dc6 <nrf_bind+0x4e>
   59dec:	8922      	ldrh	r2, [r4, #8]
   59dee:	75c3      	strb	r3, [r0, #23]
   59df0:	8282      	strh	r2, [r0, #20]
   59df2:	2210      	movs	r2, #16
   59df4:	18a3      	adds	r3, r4, r2
   59df6:	7582      	strb	r2, [r0, #22]
   59df8:	3420      	adds	r4, #32
   59dfa:	f100 0218 	add.w	r2, r0, #24
   59dfe:	f853 1b04 	ldr.w	r1, [r3], #4
   59e02:	42a3      	cmp	r3, r4
   59e04:	f842 1b04 	str.w	r1, [r2], #4
   59e08:	d1f9      	bne.n	59dfe <nrf_bind+0x86>
   59e0a:	e7dc      	b.n	59dc6 <nrf_bind+0x4e>

00059e0c <nrf_listen>:
   59e0c:	b538      	push	{r3, r4, r5, lr}
   59e0e:	4605      	mov	r5, r0
   59e10:	460c      	mov	r4, r1
   59e12:	f7f6 fcb3 	bl	5077c <sock_find>
   59e16:	b928      	cbnz	r0, 59e24 <nrf_listen+0x18>
   59e18:	2009      	movs	r0, #9
   59e1a:	f7fd fa2e 	bl	5727a <nrf_modem_os_errno_set>
   59e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   59e22:	e01c      	b.n	59e5e <nrf_listen+0x52>
   59e24:	f7ff fd88 	bl	59938 <sock_is_stream>
   59e28:	b908      	cbnz	r0, 59e2e <nrf_listen+0x22>
   59e2a:	205f      	movs	r0, #95	; 0x5f
   59e2c:	e7f5      	b.n	59e1a <nrf_listen+0xe>
   59e2e:	2000      	movs	r0, #0
   59e30:	f7ff fd2d 	bl	5988e <rpc_client_msg_alloc>
   59e34:	4601      	mov	r1, r0
   59e36:	b908      	cbnz	r0, 59e3c <nrf_listen+0x30>
   59e38:	2069      	movs	r0, #105	; 0x69
   59e3a:	e7ee      	b.n	59e1a <nrf_listen+0xe>
   59e3c:	2200      	movs	r2, #0
   59e3e:	2304      	movs	r3, #4
   59e40:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   59e44:	7203      	strb	r3, [r0, #8]
   59e46:	6105      	str	r5, [r0, #16]
   59e48:	7242      	strb	r2, [r0, #9]
   59e4a:	7282      	strb	r2, [r0, #10]
   59e4c:	72c2      	strb	r2, [r0, #11]
   59e4e:	6144      	str	r4, [r0, #20]
   59e50:	f247 0008 	movw	r0, #28680	; 0x7008
   59e54:	f7f7 fab0 	bl	513b8 <req_forward>
   59e58:	4603      	mov	r3, r0
   59e5a:	2800      	cmp	r0, #0
   59e5c:	d1dd      	bne.n	59e1a <nrf_listen+0xe>
   59e5e:	4618      	mov	r0, r3
   59e60:	bd38      	pop	{r3, r4, r5, pc}

00059e62 <nrf_accept>:
   59e62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   59e66:	b08b      	sub	sp, #44	; 0x2c
   59e68:	4605      	mov	r5, r0
   59e6a:	4689      	mov	r9, r1
   59e6c:	4616      	mov	r6, r2
   59e6e:	f7f6 fc85 	bl	5077c <sock_find>
   59e72:	4680      	mov	r8, r0
   59e74:	b938      	cbnz	r0, 59e86 <nrf_accept+0x24>
   59e76:	2009      	movs	r0, #9
   59e78:	f7fd f9ff 	bl	5727a <nrf_modem_os_errno_set>
   59e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   59e80:	b00b      	add	sp, #44	; 0x2c
   59e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   59e86:	f1b9 0f00 	cmp.w	r9, #0
   59e8a:	d002      	beq.n	59e92 <nrf_accept+0x30>
   59e8c:	b91e      	cbnz	r6, 59e96 <nrf_accept+0x34>
   59e8e:	200e      	movs	r0, #14
   59e90:	e7f2      	b.n	59e78 <nrf_accept+0x16>
   59e92:	2e00      	cmp	r6, #0
   59e94:	d1fb      	bne.n	59e8e <nrf_accept+0x2c>
   59e96:	4640      	mov	r0, r8
   59e98:	f7ff fd4e 	bl	59938 <sock_is_stream>
   59e9c:	b908      	cbnz	r0, 59ea2 <nrf_accept+0x40>
   59e9e:	205f      	movs	r0, #95	; 0x5f
   59ea0:	e7ea      	b.n	59e78 <nrf_accept+0x16>
   59ea2:	4640      	mov	r0, r8
   59ea4:	f7ff fd6f 	bl	59986 <sock_is_nonblock>
   59ea8:	b128      	cbz	r0, 59eb6 <nrf_accept+0x54>
   59eaa:	4640      	mov	r0, r8
   59eac:	f7ff fd87 	bl	599be <sock_can_accept>
   59eb0:	b908      	cbnz	r0, 59eb6 <nrf_accept+0x54>
   59eb2:	200b      	movs	r0, #11
   59eb4:	e7e0      	b.n	59e78 <nrf_accept+0x16>
   59eb6:	f7f6 fc3d 	bl	50734 <sock_open>
   59eba:	4604      	mov	r4, r0
   59ebc:	b908      	cbnz	r0, 59ec2 <nrf_accept+0x60>
   59ebe:	2017      	movs	r0, #23
   59ec0:	e7da      	b.n	59e78 <nrf_accept+0x16>
   59ec2:	2000      	movs	r0, #0
   59ec4:	f7ff fce3 	bl	5988e <rpc_client_msg_alloc>
   59ec8:	4601      	mov	r1, r0
   59eca:	b920      	cbnz	r0, 59ed6 <nrf_accept+0x74>
   59ecc:	6820      	ldr	r0, [r4, #0]
   59ece:	f7f6 fc67 	bl	507a0 <_sock_close>
   59ed2:	2069      	movs	r0, #105	; 0x69
   59ed4:	e7d0      	b.n	59e78 <nrf_accept+0x16>
   59ed6:	6105      	str	r5, [r0, #16]
   59ed8:	466a      	mov	r2, sp
   59eda:	f247 000c 	movw	r0, #28684	; 0x700c
   59ede:	f7f7 fa6b 	bl	513b8 <req_forward>
   59ee2:	4607      	mov	r7, r0
   59ee4:	b120      	cbz	r0, 59ef0 <nrf_accept+0x8e>
   59ee6:	6820      	ldr	r0, [r4, #0]
   59ee8:	f7f6 fc5a 	bl	507a0 <_sock_close>
   59eec:	4638      	mov	r0, r7
   59eee:	e7c3      	b.n	59e78 <nrf_accept+0x16>
   59ef0:	9d00      	ldr	r5, [sp, #0]
   59ef2:	69ab      	ldr	r3, [r5, #24]
   59ef4:	6023      	str	r3, [r4, #0]
   59ef6:	f8d8 3010 	ldr.w	r3, [r8, #16]
   59efa:	6123      	str	r3, [r4, #16]
   59efc:	f8d8 3014 	ldr.w	r3, [r8, #20]
   59f00:	6163      	str	r3, [r4, #20]
   59f02:	7f23      	ldrb	r3, [r4, #28]
   59f04:	f043 0308 	orr.w	r3, r3, #8
   59f08:	7723      	strb	r3, [r4, #28]
   59f0a:	f1b9 0f00 	cmp.w	r9, #0
   59f0e:	d020      	beq.n	59f52 <nrf_accept+0xf0>
   59f10:	b1fe      	cbz	r6, 59f52 <nrf_accept+0xf0>
   59f12:	8beb      	ldrh	r3, [r5, #30]
   59f14:	2b04      	cmp	r3, #4
   59f16:	d003      	beq.n	59f20 <nrf_accept+0xbe>
   59f18:	2b10      	cmp	r3, #16
   59f1a:	d01f      	beq.n	59f5c <nrf_accept+0xfa>
   59f1c:	6030      	str	r0, [r6, #0]
   59f1e:	e018      	b.n	59f52 <nrf_accept+0xf0>
   59f20:	2310      	movs	r3, #16
   59f22:	9001      	str	r0, [sp, #4]
   59f24:	f88d 3004 	strb.w	r3, [sp, #4]
   59f28:	2301      	movs	r3, #1
   59f2a:	9003      	str	r0, [sp, #12]
   59f2c:	9302      	str	r3, [sp, #8]
   59f2e:	7f2b      	ldrb	r3, [r5, #28]
   59f30:	7f6a      	ldrb	r2, [r5, #29]
   59f32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   59f36:	f8ad 300c 	strh.w	r3, [sp, #12]
   59f3a:	6a2b      	ldr	r3, [r5, #32]
   59f3c:	6835      	ldr	r5, [r6, #0]
   59f3e:	9304      	str	r3, [sp, #16]
   59f40:	2d10      	cmp	r5, #16
   59f42:	bf28      	it	cs
   59f44:	2510      	movcs	r5, #16
   59f46:	462a      	mov	r2, r5
   59f48:	4648      	mov	r0, r9
   59f4a:	a901      	add	r1, sp, #4
   59f4c:	f000 ff85 	bl	5ae5a <memcpy>
   59f50:	6035      	str	r5, [r6, #0]
   59f52:	9800      	ldr	r0, [sp, #0]
   59f54:	f7ff fcbd 	bl	598d2 <rpc_client_msg_free>
   59f58:	6820      	ldr	r0, [r4, #0]
   59f5a:	e791      	b.n	59e80 <nrf_accept+0x1e>
   59f5c:	f04f 0824 	mov.w	r8, #36	; 0x24
   59f60:	4601      	mov	r1, r0
   59f62:	4642      	mov	r2, r8
   59f64:	a801      	add	r0, sp, #4
   59f66:	f000 ffb2 	bl	5aece <memset>
   59f6a:	2302      	movs	r3, #2
   59f6c:	f88d 8004 	strb.w	r8, [sp, #4]
   59f70:	9302      	str	r3, [sp, #8]
   59f72:	7f2b      	ldrb	r3, [r5, #28]
   59f74:	7f6a      	ldrb	r2, [r5, #29]
   59f76:	af05      	add	r7, sp, #20
   59f78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   59f7c:	f8ad 300c 	strh.w	r3, [sp, #12]
   59f80:	f105 0320 	add.w	r3, r5, #32
   59f84:	3530      	adds	r5, #48	; 0x30
   59f86:	463a      	mov	r2, r7
   59f88:	6818      	ldr	r0, [r3, #0]
   59f8a:	6859      	ldr	r1, [r3, #4]
   59f8c:	3308      	adds	r3, #8
   59f8e:	c203      	stmia	r2!, {r0, r1}
   59f90:	42ab      	cmp	r3, r5
   59f92:	4617      	mov	r7, r2
   59f94:	d1f7      	bne.n	59f86 <nrf_accept+0x124>
   59f96:	6835      	ldr	r5, [r6, #0]
   59f98:	2d24      	cmp	r5, #36	; 0x24
   59f9a:	bf28      	it	cs
   59f9c:	2524      	movcs	r5, #36	; 0x24
   59f9e:	e7d2      	b.n	59f46 <nrf_accept+0xe4>

00059fa0 <nrf_recvfrom>:
   59fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   59fa4:	b085      	sub	sp, #20
   59fa6:	4690      	mov	r8, r2
   59fa8:	e9dd a90e 	ldrd	sl, r9, [sp, #56]	; 0x38
   59fac:	461f      	mov	r7, r3
   59fae:	9101      	str	r1, [sp, #4]
   59fb0:	f403 7b80 	and.w	fp, r3, #256	; 0x100
   59fb4:	f7f6 fbe2 	bl	5077c <sock_find>
   59fb8:	4604      	mov	r4, r0
   59fba:	b940      	cbnz	r0, 59fce <nrf_recvfrom+0x2e>
   59fbc:	2009      	movs	r0, #9
   59fbe:	f7fd f95c 	bl	5727a <nrf_modem_os_errno_set>
   59fc2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   59fc6:	4630      	mov	r0, r6
   59fc8:	b005      	add	sp, #20
   59fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59fce:	f437 76a1 	bics.w	r6, r7, #322	; 0x142
   59fd2:	d001      	beq.n	59fd8 <nrf_recvfrom+0x38>
   59fd4:	205f      	movs	r0, #95	; 0x5f
   59fd6:	e7f2      	b.n	59fbe <nrf_recvfrom+0x1e>
   59fd8:	f1ba 0f00 	cmp.w	sl, #0
   59fdc:	d004      	beq.n	59fe8 <nrf_recvfrom+0x48>
   59fde:	f1b9 0f00 	cmp.w	r9, #0
   59fe2:	d104      	bne.n	59fee <nrf_recvfrom+0x4e>
   59fe4:	200e      	movs	r0, #14
   59fe6:	e7ea      	b.n	59fbe <nrf_recvfrom+0x1e>
   59fe8:	f1b9 0f00 	cmp.w	r9, #0
   59fec:	d1fa      	bne.n	59fe4 <nrf_recvfrom+0x44>
   59fee:	4620      	mov	r0, r4
   59ff0:	f7ff fca2 	bl	59938 <sock_is_stream>
   59ff4:	b128      	cbz	r0, 5a002 <nrf_recvfrom+0x62>
   59ff6:	4620      	mov	r0, r4
   59ff8:	f7ff fcbd 	bl	59976 <sock_is_connected>
   59ffc:	b908      	cbnz	r0, 5a002 <nrf_recvfrom+0x62>
   59ffe:	2080      	movs	r0, #128	; 0x80
   5a000:	e7dd      	b.n	59fbe <nrf_recvfrom+0x1e>
   5a002:	f1bb 0f00 	cmp.w	fp, #0
   5a006:	d11b      	bne.n	5a040 <nrf_recvfrom+0xa0>
   5a008:	4620      	mov	r0, r4
   5a00a:	f7ff fcbc 	bl	59986 <sock_is_nonblock>
   5a00e:	b9c8      	cbnz	r0, 5a044 <nrf_recvfrom+0xa4>
   5a010:	f3c7 1580 	ubfx	r5, r7, #6, #1
   5a014:	4620      	mov	r0, r4
   5a016:	f7ff fcf6 	bl	59a06 <sock_rcvtimeo_ms_get>
   5a01a:	9003      	str	r0, [sp, #12]
   5a01c:	4620      	mov	r0, r4
   5a01e:	f7ff fcba 	bl	59996 <sock_is_closed>
   5a022:	b918      	cbnz	r0, 5a02c <nrf_recvfrom+0x8c>
   5a024:	4620      	mov	r0, r4
   5a026:	f7ff fc62 	bl	598ee <sock_has_pkt>
   5a02a:	b168      	cbz	r0, 5a048 <nrf_recvfrom+0xa8>
   5a02c:	4620      	mov	r0, r4
   5a02e:	f7ff fc5e 	bl	598ee <sock_has_pkt>
   5a032:	b9f0      	cbnz	r0, 5a072 <nrf_recvfrom+0xd2>
   5a034:	4620      	mov	r0, r4
   5a036:	f7ff fcb2 	bl	5999e <sock_has_error>
   5a03a:	b180      	cbz	r0, 5a05e <nrf_recvfrom+0xbe>
   5a03c:	69a0      	ldr	r0, [r4, #24]
   5a03e:	e7be      	b.n	59fbe <nrf_recvfrom+0x1e>
   5a040:	2500      	movs	r5, #0
   5a042:	e7e7      	b.n	5a014 <nrf_recvfrom+0x74>
   5a044:	2501      	movs	r5, #1
   5a046:	e7e5      	b.n	5a014 <nrf_recvfrom+0x74>
   5a048:	b10d      	cbz	r5, 5a04e <nrf_recvfrom+0xae>
   5a04a:	200b      	movs	r0, #11
   5a04c:	e7b7      	b.n	59fbe <nrf_recvfrom+0x1e>
   5a04e:	a903      	add	r1, sp, #12
   5a050:	f7ef fcf2 	bl	49a38 <nrf_modem_os_timedwait>
   5a054:	2800      	cmp	r0, #0
   5a056:	d0e1      	beq.n	5a01c <nrf_recvfrom+0x7c>
   5a058:	f000 fedd 	bl	5ae16 <abs>
   5a05c:	e7af      	b.n	59fbe <nrf_recvfrom+0x1e>
   5a05e:	4620      	mov	r0, r4
   5a060:	f7ff fc6a 	bl	59938 <sock_is_stream>
   5a064:	2800      	cmp	r0, #0
   5a066:	d1ae      	bne.n	59fc6 <nrf_recvfrom+0x26>
   5a068:	4620      	mov	r0, r4
   5a06a:	f7ff fc6a 	bl	59942 <sock_is_datagram>
   5a06e:	2800      	cmp	r0, #0
   5a070:	d1a4      	bne.n	59fbc <nrf_recvfrom+0x1c>
   5a072:	4620      	mov	r0, r4
   5a074:	f7ff fc5e 	bl	59934 <sock_pkt_peek_head>
   5a078:	4605      	mov	r5, r0
   5a07a:	f1ba 0f00 	cmp.w	sl, #0
   5a07e:	d00c      	beq.n	5a09a <nrf_recvfrom+0xfa>
   5a080:	68c1      	ldr	r1, [r0, #12]
   5a082:	b381      	cbz	r1, 5a0e6 <nrf_recvfrom+0x146>
   5a084:	780a      	ldrb	r2, [r1, #0]
   5a086:	f8d9 3000 	ldr.w	r3, [r9]
   5a08a:	4650      	mov	r0, sl
   5a08c:	429a      	cmp	r2, r3
   5a08e:	bf28      	it	cs
   5a090:	461a      	movcs	r2, r3
   5a092:	f8c9 2000 	str.w	r2, [r9]
   5a096:	f000 fee0 	bl	5ae5a <memcpy>
   5a09a:	f007 0902 	and.w	r9, r7, #2
   5a09e:	4628      	mov	r0, r5
   5a0a0:	f7ff fd3a 	bl	59b18 <pkt_bytes_left>
   5a0a4:	4540      	cmp	r0, r8
   5a0a6:	d821      	bhi.n	5a0ec <nrf_recvfrom+0x14c>
   5a0a8:	4628      	mov	r0, r5
   5a0aa:	f7ff fd35 	bl	59b18 <pkt_bytes_left>
   5a0ae:	4607      	mov	r7, r0
   5a0b0:	2f00      	cmp	r7, #0
   5a0b2:	d088      	beq.n	59fc6 <nrf_recvfrom+0x26>
   5a0b4:	9b01      	ldr	r3, [sp, #4]
   5a0b6:	4628      	mov	r0, r5
   5a0b8:	eb03 0a06 	add.w	sl, r3, r6
   5a0bc:	f7ff fd28 	bl	59b10 <pkt_bytes_get>
   5a0c0:	463a      	mov	r2, r7
   5a0c2:	4601      	mov	r1, r0
   5a0c4:	4650      	mov	r0, sl
   5a0c6:	f000 fec8 	bl	5ae5a <memcpy>
   5a0ca:	4620      	mov	r0, r4
   5a0cc:	443e      	add	r6, r7
   5a0ce:	f7ff fc38 	bl	59942 <sock_is_datagram>
   5a0d2:	b168      	cbz	r0, 5a0f0 <nrf_recvfrom+0x150>
   5a0d4:	f1b9 0f00 	cmp.w	r9, #0
   5a0d8:	f47f af75 	bne.w	59fc6 <nrf_recvfrom+0x26>
   5a0dc:	4629      	mov	r1, r5
   5a0de:	4620      	mov	r0, r4
   5a0e0:	f7ff fc14 	bl	5990c <sock_pkt_remove>
   5a0e4:	e76f      	b.n	59fc6 <nrf_recvfrom+0x26>
   5a0e6:	f8c9 1000 	str.w	r1, [r9]
   5a0ea:	e7d6      	b.n	5a09a <nrf_recvfrom+0xfa>
   5a0ec:	4647      	mov	r7, r8
   5a0ee:	e7df      	b.n	5a0b0 <nrf_recvfrom+0x110>
   5a0f0:	4620      	mov	r0, r4
   5a0f2:	f7ff fc2b 	bl	5994c <sock_is_raw>
   5a0f6:	2800      	cmp	r0, #0
   5a0f8:	d1ec      	bne.n	5a0d4 <nrf_recvfrom+0x134>
   5a0fa:	f1b9 0f00 	cmp.w	r9, #0
   5a0fe:	d10a      	bne.n	5a116 <nrf_recvfrom+0x176>
   5a100:	896b      	ldrh	r3, [r5, #10]
   5a102:	4628      	mov	r0, r5
   5a104:	443b      	add	r3, r7
   5a106:	816b      	strh	r3, [r5, #10]
   5a108:	f7ff fd06 	bl	59b18 <pkt_bytes_left>
   5a10c:	b918      	cbnz	r0, 5a116 <nrf_recvfrom+0x176>
   5a10e:	4629      	mov	r1, r5
   5a110:	4620      	mov	r0, r4
   5a112:	f7ff fbfb 	bl	5990c <sock_pkt_remove>
   5a116:	45b8      	cmp	r8, r7
   5a118:	f43f af55 	beq.w	59fc6 <nrf_recvfrom+0x26>
   5a11c:	f1bb 0f00 	cmp.w	fp, #0
   5a120:	d028      	beq.n	5a174 <nrf_recvfrom+0x1d4>
   5a122:	f1b9 0f00 	cmp.w	r9, #0
   5a126:	d01c      	beq.n	5a162 <nrf_recvfrom+0x1c2>
   5a128:	4628      	mov	r0, r5
   5a12a:	f7ff fce8 	bl	59afe <pkt_has_next>
   5a12e:	b148      	cbz	r0, 5a144 <nrf_recvfrom+0x1a4>
   5a130:	4628      	mov	r0, r5
   5a132:	f7ff fcea 	bl	59b0a <pkt_peek_next>
   5a136:	4605      	mov	r5, r0
   5a138:	2800      	cmp	r0, #0
   5a13a:	f43f af44 	beq.w	59fc6 <nrf_recvfrom+0x26>
   5a13e:	eba8 0807 	sub.w	r8, r8, r7
   5a142:	e7ac      	b.n	5a09e <nrf_recvfrom+0xfe>
   5a144:	2000      	movs	r0, #0
   5a146:	a903      	add	r1, sp, #12
   5a148:	f7ef fc76 	bl	49a38 <nrf_modem_os_timedwait>
   5a14c:	b118      	cbz	r0, 5a156 <nrf_recvfrom+0x1b6>
   5a14e:	2e00      	cmp	r6, #0
   5a150:	f47f af39 	bne.w	59fc6 <nrf_recvfrom+0x26>
   5a154:	e780      	b.n	5a058 <nrf_recvfrom+0xb8>
   5a156:	4620      	mov	r0, r4
   5a158:	f7ff fc1d 	bl	59996 <sock_is_closed>
   5a15c:	2800      	cmp	r0, #0
   5a15e:	d0dd      	beq.n	5a11c <nrf_recvfrom+0x17c>
   5a160:	e731      	b.n	59fc6 <nrf_recvfrom+0x26>
   5a162:	4620      	mov	r0, r4
   5a164:	f7ff fbc3 	bl	598ee <sock_has_pkt>
   5a168:	2800      	cmp	r0, #0
   5a16a:	d0eb      	beq.n	5a144 <nrf_recvfrom+0x1a4>
   5a16c:	4620      	mov	r0, r4
   5a16e:	f7ff fbe1 	bl	59934 <sock_pkt_peek_head>
   5a172:	e7e0      	b.n	5a136 <nrf_recvfrom+0x196>
   5a174:	f1b9 0f00 	cmp.w	r9, #0
   5a178:	d1da      	bne.n	5a130 <nrf_recvfrom+0x190>
   5a17a:	e7f7      	b.n	5a16c <nrf_recvfrom+0x1cc>

0005a17c <nrf_getsockopt>:
   5a17c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   5a180:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   5a182:	4681      	mov	r9, r0
   5a184:	4688      	mov	r8, r1
   5a186:	4614      	mov	r4, r2
   5a188:	461f      	mov	r7, r3
   5a18a:	f7f6 faf7 	bl	5077c <sock_find>
   5a18e:	4606      	mov	r6, r0
   5a190:	b928      	cbnz	r0, 5a19e <nrf_getsockopt+0x22>
   5a192:	2009      	movs	r0, #9
   5a194:	f7fd f871 	bl	5727a <nrf_modem_os_errno_set>
   5a198:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   5a19c:	e05d      	b.n	5a25a <nrf_getsockopt+0xde>
   5a19e:	b107      	cbz	r7, 5a1a2 <nrf_getsockopt+0x26>
   5a1a0:	b90d      	cbnz	r5, 5a1a6 <nrf_getsockopt+0x2a>
   5a1a2:	200e      	movs	r0, #14
   5a1a4:	e7f6      	b.n	5a194 <nrf_getsockopt+0x18>
   5a1a6:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   5a1aa:	d137      	bne.n	5a21c <nrf_getsockopt+0xa0>
   5a1ac:	1e63      	subs	r3, r4, #1
   5a1ae:	2b0b      	cmp	r3, #11
   5a1b0:	d834      	bhi.n	5a21c <nrf_getsockopt+0xa0>
   5a1b2:	e8df f003 	tbb	[pc, r3]
   5a1b6:	2517      	.short	0x2517
   5a1b8:	06123333 	.word	0x06123333
   5a1bc:	33333333 	.word	0x33333333
   5a1c0:	0d33      	.short	0x0d33
   5a1c2:	2304      	movs	r3, #4
   5a1c4:	602b      	str	r3, [r5, #0]
   5a1c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   5a1ca:	603b      	str	r3, [r7, #0]
   5a1cc:	2400      	movs	r4, #0
   5a1ce:	e044      	b.n	5a25a <nrf_getsockopt+0xde>
   5a1d0:	2304      	movs	r3, #4
   5a1d2:	602b      	str	r3, [r5, #0]
   5a1d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   5a1d8:	e7f7      	b.n	5a1ca <nrf_getsockopt+0x4e>
   5a1da:	2304      	movs	r3, #4
   5a1dc:	602b      	str	r3, [r5, #0]
   5a1de:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   5a1e2:	e7f2      	b.n	5a1ca <nrf_getsockopt+0x4e>
   5a1e4:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   5a1e8:	682b      	ldr	r3, [r5, #0]
   5a1ea:	0092      	lsls	r2, r2, #2
   5a1ec:	429a      	cmp	r2, r3
   5a1ee:	bf28      	it	cs
   5a1f0:	461a      	movcs	r2, r3
   5a1f2:	f100 0140 	add.w	r1, r0, #64	; 0x40
   5a1f6:	602a      	str	r2, [r5, #0]
   5a1f8:	4638      	mov	r0, r7
   5a1fa:	f000 fe2e 	bl	5ae5a <memcpy>
   5a1fe:	e7e5      	b.n	5a1cc <nrf_getsockopt+0x50>
   5a200:	6b80      	ldr	r0, [r0, #56]	; 0x38
   5a202:	f7e6 fdf7 	bl	40df4 <strlen>
   5a206:	682a      	ldr	r2, [r5, #0]
   5a208:	3001      	adds	r0, #1
   5a20a:	4290      	cmp	r0, r2
   5a20c:	d203      	bcs.n	5a216 <nrf_getsockopt+0x9a>
   5a20e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   5a210:	f7e6 fdf0 	bl	40df4 <strlen>
   5a214:	1c42      	adds	r2, r0, #1
   5a216:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   5a218:	602a      	str	r2, [r5, #0]
   5a21a:	e7ed      	b.n	5a1f8 <nrf_getsockopt+0x7c>
   5a21c:	2c14      	cmp	r4, #20
   5a21e:	d020      	beq.n	5a262 <nrf_getsockopt+0xe6>
   5a220:	dc07      	bgt.n	5a232 <nrf_getsockopt+0xb6>
   5a222:	2c04      	cmp	r4, #4
   5a224:	d014      	beq.n	5a250 <nrf_getsockopt+0xd4>
   5a226:	2c0e      	cmp	r4, #14
   5a228:	d009      	beq.n	5a23e <nrf_getsockopt+0xc2>
   5a22a:	2c03      	cmp	r4, #3
   5a22c:	d007      	beq.n	5a23e <nrf_getsockopt+0xc2>
   5a22e:	206d      	movs	r0, #109	; 0x6d
   5a230:	e7b0      	b.n	5a194 <nrf_getsockopt+0x18>
   5a232:	2c15      	cmp	r4, #21
   5a234:	d01d      	beq.n	5a272 <nrf_getsockopt+0xf6>
   5a236:	2c20      	cmp	r4, #32
   5a238:	dc08      	bgt.n	5a24c <nrf_getsockopt+0xd0>
   5a23a:	2c1d      	cmp	r4, #29
   5a23c:	ddf7      	ble.n	5a22e <nrf_getsockopt+0xb2>
   5a23e:	6828      	ldr	r0, [r5, #0]
   5a240:	f7ff fb25 	bl	5988e <rpc_client_msg_alloc>
   5a244:	4606      	mov	r6, r0
   5a246:	b9e0      	cbnz	r0, 5a282 <nrf_getsockopt+0x106>
   5a248:	2069      	movs	r0, #105	; 0x69
   5a24a:	e7a3      	b.n	5a194 <nrf_getsockopt+0x18>
   5a24c:	2c37      	cmp	r4, #55	; 0x37
   5a24e:	e7ed      	b.n	5a22c <nrf_getsockopt+0xb0>
   5a250:	602c      	str	r4, [r5, #0]
   5a252:	2400      	movs	r4, #0
   5a254:	69b3      	ldr	r3, [r6, #24]
   5a256:	61b4      	str	r4, [r6, #24]
   5a258:	603b      	str	r3, [r7, #0]
   5a25a:	4620      	mov	r0, r4
   5a25c:	b003      	add	sp, #12
   5a25e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   5a262:	682a      	ldr	r2, [r5, #0]
   5a264:	f106 0120 	add.w	r1, r6, #32
   5a268:	2a08      	cmp	r2, #8
   5a26a:	bf28      	it	cs
   5a26c:	2208      	movcs	r2, #8
   5a26e:	602a      	str	r2, [r5, #0]
   5a270:	e7c2      	b.n	5a1f8 <nrf_getsockopt+0x7c>
   5a272:	682a      	ldr	r2, [r5, #0]
   5a274:	f106 0128 	add.w	r1, r6, #40	; 0x28
   5a278:	2a08      	cmp	r2, #8
   5a27a:	bf28      	it	cs
   5a27c:	2208      	movcs	r2, #8
   5a27e:	602a      	str	r2, [r5, #0]
   5a280:	e7ba      	b.n	5a1f8 <nrf_getsockopt+0x7c>
   5a282:	2300      	movs	r3, #0
   5a284:	2208      	movs	r2, #8
   5a286:	7243      	strb	r3, [r0, #9]
   5a288:	7202      	strb	r2, [r0, #8]
   5a28a:	7283      	strb	r3, [r0, #10]
   5a28c:	72c3      	strb	r3, [r0, #11]
   5a28e:	f8c0 9010 	str.w	r9, [r0, #16]
   5a292:	4640      	mov	r0, r8
   5a294:	f000 f97d 	bl	5a592 <nrf_sol_to_rpc_sol>
   5a298:	6170      	str	r0, [r6, #20]
   5a29a:	4620      	mov	r0, r4
   5a29c:	f7f7 f874 	bl	51388 <nrf_so_to_rpc_so>
   5a2a0:	4631      	mov	r1, r6
   5a2a2:	61b0      	str	r0, [r6, #24]
   5a2a4:	aa01      	add	r2, sp, #4
   5a2a6:	f247 0004 	movw	r0, #28676	; 0x7004
   5a2aa:	f8d6 9000 	ldr.w	r9, [r6]
   5a2ae:	f7f7 f883 	bl	513b8 <req_forward>
   5a2b2:	4604      	mov	r4, r0
   5a2b4:	2800      	cmp	r0, #0
   5a2b6:	f47f af6d 	bne.w	5a194 <nrf_getsockopt+0x18>
   5a2ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
   5a2be:	682b      	ldr	r3, [r5, #0]
   5a2c0:	f8d8 1000 	ldr.w	r1, [r8]
   5a2c4:	b181      	cbz	r1, 5a2e8 <nrf_getsockopt+0x16c>
   5a2c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   5a2ca:	4638      	mov	r0, r7
   5a2cc:	429a      	cmp	r2, r3
   5a2ce:	bf28      	it	cs
   5a2d0:	461a      	movcs	r2, r3
   5a2d2:	602a      	str	r2, [r5, #0]
   5a2d4:	f000 fdc1 	bl	5ae5a <memcpy>
   5a2d8:	f8d8 0000 	ldr.w	r0, [r8]
   5a2dc:	f7ff fafc 	bl	598d8 <rpc_client_msg_data_rx_free>
   5a2e0:	9801      	ldr	r0, [sp, #4]
   5a2e2:	f7ff faf6 	bl	598d2 <rpc_client_msg_free>
   5a2e6:	e7b8      	b.n	5a25a <nrf_getsockopt+0xde>
   5a2e8:	6872      	ldr	r2, [r6, #4]
   5a2ea:	4649      	mov	r1, r9
   5a2ec:	429a      	cmp	r2, r3
   5a2ee:	bf28      	it	cs
   5a2f0:	461a      	movcs	r2, r3
   5a2f2:	4638      	mov	r0, r7
   5a2f4:	602a      	str	r2, [r5, #0]
   5a2f6:	f000 fdb0 	bl	5ae5a <memcpy>
   5a2fa:	4648      	mov	r0, r9
   5a2fc:	f7ff faf0 	bl	598e0 <rpc_client_msg_data_tx_free>
   5a300:	e7ee      	b.n	5a2e0 <nrf_getsockopt+0x164>

0005a302 <tls_setopt_role>:
   5a302:	b508      	push	{r3, lr}
   5a304:	b109      	cbz	r1, 5a30a <tls_setopt_role+0x8>
   5a306:	2a04      	cmp	r2, #4
   5a308:	d005      	beq.n	5a316 <tls_setopt_role+0x14>
   5a30a:	2016      	movs	r0, #22
   5a30c:	f7fc ffb5 	bl	5727a <nrf_modem_os_errno_set>
   5a310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5a314:	e00a      	b.n	5a32c <tls_setopt_role+0x2a>
   5a316:	780b      	ldrb	r3, [r1, #0]
   5a318:	b123      	cbz	r3, 5a324 <tls_setopt_role+0x22>
   5a31a:	2b01      	cmp	r3, #1
   5a31c:	d1f5      	bne.n	5a30a <tls_setopt_role+0x8>
   5a31e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
   5a322:	e002      	b.n	5a32a <tls_setopt_role+0x28>
   5a324:	2202      	movs	r2, #2
   5a326:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
   5a32a:	2000      	movs	r0, #0
   5a32c:	bd08      	pop	{r3, pc}

0005a32e <tls_setopt_taglist>:
   5a32e:	b510      	push	{r4, lr}
   5a330:	f012 0403 	ands.w	r4, r2, #3
   5a334:	d100      	bne.n	5a338 <tls_setopt_taglist+0xa>
   5a336:	b92a      	cbnz	r2, 5a344 <tls_setopt_taglist+0x16>
   5a338:	2016      	movs	r0, #22
   5a33a:	f7fc ff9e 	bl	5727a <nrf_modem_os_errno_set>
   5a33e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5a342:	bd10      	pop	{r4, pc}
   5a344:	0893      	lsrs	r3, r2, #2
   5a346:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
   5a34a:	3040      	adds	r0, #64	; 0x40
   5a34c:	f000 fd85 	bl	5ae5a <memcpy>
   5a350:	4620      	mov	r0, r4
   5a352:	e7f6      	b.n	5a342 <tls_setopt_taglist+0x14>

0005a354 <tls_setopt_sess_cache>:
   5a354:	b508      	push	{r3, lr}
   5a356:	b109      	cbz	r1, 5a35c <tls_setopt_sess_cache+0x8>
   5a358:	2a04      	cmp	r2, #4
   5a35a:	d005      	beq.n	5a368 <tls_setopt_sess_cache+0x14>
   5a35c:	2016      	movs	r0, #22
   5a35e:	f7fc ff8c 	bl	5727a <nrf_modem_os_errno_set>
   5a362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5a366:	bd08      	pop	{r3, pc}
   5a368:	780b      	ldrb	r3, [r1, #0]
   5a36a:	3b00      	subs	r3, #0
   5a36c:	bf18      	it	ne
   5a36e:	2301      	movne	r3, #1
   5a370:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   5a374:	2000      	movs	r0, #0
   5a376:	e7f6      	b.n	5a366 <tls_setopt_sess_cache+0x12>

0005a378 <tls_setopt_peer_verify>:
   5a378:	b508      	push	{r3, lr}
   5a37a:	b109      	cbz	r1, 5a380 <tls_setopt_peer_verify+0x8>
   5a37c:	2a04      	cmp	r2, #4
   5a37e:	d005      	beq.n	5a38c <tls_setopt_peer_verify+0x14>
   5a380:	2016      	movs	r0, #22
   5a382:	f7fc ff7a 	bl	5727a <nrf_modem_os_errno_set>
   5a386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5a38a:	bd08      	pop	{r3, pc}
   5a38c:	680b      	ldr	r3, [r1, #0]
   5a38e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   5a392:	2000      	movs	r0, #0
   5a394:	e7f9      	b.n	5a38a <tls_setopt_peer_verify+0x12>

0005a396 <tls_setopt_hostname>:
   5a396:	b570      	push	{r4, r5, r6, lr}
   5a398:	4605      	mov	r5, r0
   5a39a:	4614      	mov	r4, r2
   5a39c:	460e      	mov	r6, r1
   5a39e:	b931      	cbnz	r1, 5a3ae <tls_setopt_hostname+0x18>
   5a3a0:	b13a      	cbz	r2, 5a3b2 <tls_setopt_hostname+0x1c>
   5a3a2:	2016      	movs	r0, #22
   5a3a4:	f7fc ff69 	bl	5727a <nrf_modem_os_errno_set>
   5a3a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5a3ac:	bd70      	pop	{r4, r5, r6, pc}
   5a3ae:	2a00      	cmp	r2, #0
   5a3b0:	d0f7      	beq.n	5a3a2 <tls_setopt_hostname+0xc>
   5a3b2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   5a3b4:	b108      	cbz	r0, 5a3ba <tls_setopt_hostname+0x24>
   5a3b6:	f7ef fc3b 	bl	49c30 <nrf_modem_os_free>
   5a3ba:	b174      	cbz	r4, 5a3da <tls_setopt_hostname+0x44>
   5a3bc:	1c60      	adds	r0, r4, #1
   5a3be:	f7ef fc2f 	bl	49c20 <nrf_modem_os_alloc>
   5a3c2:	63a8      	str	r0, [r5, #56]	; 0x38
   5a3c4:	b908      	cbnz	r0, 5a3ca <tls_setopt_hostname+0x34>
   5a3c6:	2069      	movs	r0, #105	; 0x69
   5a3c8:	e7ec      	b.n	5a3a4 <tls_setopt_hostname+0xe>
   5a3ca:	4622      	mov	r2, r4
   5a3cc:	4631      	mov	r1, r6
   5a3ce:	f000 fd44 	bl	5ae5a <memcpy>
   5a3d2:	2000      	movs	r0, #0
   5a3d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   5a3d6:	5518      	strb	r0, [r3, r4]
   5a3d8:	e7e8      	b.n	5a3ac <tls_setopt_hostname+0x16>
   5a3da:	4620      	mov	r0, r4
   5a3dc:	e7e6      	b.n	5a3ac <tls_setopt_hostname+0x16>

0005a3de <nrf_poll>:
   5a3de:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   5a3e2:	4688      	mov	r8, r1
   5a3e4:	4607      	mov	r7, r0
   5a3e6:	9201      	str	r2, [sp, #4]
   5a3e8:	b930      	cbnz	r0, 5a3f8 <nrf_poll+0x1a>
   5a3ea:	b149      	cbz	r1, 5a400 <nrf_poll+0x22>
   5a3ec:	200e      	movs	r0, #14
   5a3ee:	f7fc ff44 	bl	5727a <nrf_modem_os_errno_set>
   5a3f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   5a3f6:	e014      	b.n	5a422 <nrf_poll+0x44>
   5a3f8:	2908      	cmp	r1, #8
   5a3fa:	d901      	bls.n	5a400 <nrf_poll+0x22>
   5a3fc:	2016      	movs	r0, #22
   5a3fe:	e7f6      	b.n	5a3ee <nrf_poll+0x10>
   5a400:	f04f 0900 	mov.w	r9, #0
   5a404:	f04f 0a00 	mov.w	sl, #0
   5a408:	463c      	mov	r4, r7
   5a40a:	4655      	mov	r5, sl
   5a40c:	45c2      	cmp	sl, r8
   5a40e:	d10c      	bne.n	5a42a <nrf_poll+0x4c>
   5a410:	b93d      	cbnz	r5, 5a422 <nrf_poll+0x44>
   5a412:	4628      	mov	r0, r5
   5a414:	a901      	add	r1, sp, #4
   5a416:	f7ef fb0f 	bl	49a38 <nrf_modem_os_timedwait>
   5a41a:	2800      	cmp	r0, #0
   5a41c:	d0f2      	beq.n	5a404 <nrf_poll+0x26>
   5a41e:	306e      	adds	r0, #110	; 0x6e
   5a420:	d071      	beq.n	5a506 <nrf_poll+0x128>
   5a422:	4628      	mov	r0, r5
   5a424:	b002      	add	sp, #8
   5a426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   5a42a:	6820      	ldr	r0, [r4, #0]
   5a42c:	f8a4 9006 	strh.w	r9, [r4, #6]
   5a430:	2800      	cmp	r0, #0
   5a432:	db4e      	blt.n	5a4d2 <nrf_poll+0xf4>
   5a434:	f7f6 f9a2 	bl	5077c <sock_find>
   5a438:	4606      	mov	r6, r0
   5a43a:	b928      	cbnz	r0, 5a448 <nrf_poll+0x6a>
   5a43c:	88e3      	ldrh	r3, [r4, #6]
   5a43e:	f043 0320 	orr.w	r3, r3, #32
   5a442:	80e3      	strh	r3, [r4, #6]
   5a444:	3501      	adds	r5, #1
   5a446:	e044      	b.n	5a4d2 <nrf_poll+0xf4>
   5a448:	f7ff faa1 	bl	5998e <sock_is_local_closed>
   5a44c:	2800      	cmp	r0, #0
   5a44e:	d1f5      	bne.n	5a43c <nrf_poll+0x5e>
   5a450:	4630      	mov	r0, r6
   5a452:	f7ff faa4 	bl	5999e <sock_has_error>
   5a456:	b348      	cbz	r0, 5a4ac <nrf_poll+0xce>
   5a458:	88e3      	ldrh	r3, [r4, #6]
   5a45a:	f043 0308 	orr.w	r3, r3, #8
   5a45e:	80e3      	strh	r3, [r4, #6]
   5a460:	88a3      	ldrh	r3, [r4, #4]
   5a462:	07da      	lsls	r2, r3, #31
   5a464:	d517      	bpl.n	5a496 <nrf_poll+0xb8>
   5a466:	4630      	mov	r0, r6
   5a468:	f7ff faa4 	bl	599b4 <sock_can_read>
   5a46c:	b338      	cbz	r0, 5a4be <nrf_poll+0xe0>
   5a46e:	88e3      	ldrh	r3, [r4, #6]
   5a470:	f043 0301 	orr.w	r3, r3, #1
   5a474:	80e3      	strh	r3, [r4, #6]
   5a476:	4630      	mov	r0, r6
   5a478:	f7ff fa5e 	bl	59938 <sock_is_stream>
   5a47c:	b158      	cbz	r0, 5a496 <nrf_poll+0xb8>
   5a47e:	4630      	mov	r0, r6
   5a480:	f7ff fa89 	bl	59996 <sock_is_closed>
   5a484:	b138      	cbz	r0, 5a496 <nrf_poll+0xb8>
   5a486:	4630      	mov	r0, r6
   5a488:	f7ff fa89 	bl	5999e <sock_has_error>
   5a48c:	b918      	cbnz	r0, 5a496 <nrf_poll+0xb8>
   5a48e:	88e3      	ldrh	r3, [r4, #6]
   5a490:	f043 0301 	orr.w	r3, r3, #1
   5a494:	80e3      	strh	r3, [r4, #6]
   5a496:	88a3      	ldrh	r3, [r4, #4]
   5a498:	075b      	lsls	r3, r3, #29
   5a49a:	d516      	bpl.n	5a4ca <nrf_poll+0xec>
   5a49c:	4630      	mov	r0, r6
   5a49e:	f7ff fa93 	bl	599c8 <sock_can_send>
   5a4a2:	b190      	cbz	r0, 5a4ca <nrf_poll+0xec>
   5a4a4:	88e3      	ldrh	r3, [r4, #6]
   5a4a6:	f043 0304 	orr.w	r3, r3, #4
   5a4aa:	e7ca      	b.n	5a442 <nrf_poll+0x64>
   5a4ac:	4630      	mov	r0, r6
   5a4ae:	f7ff fa72 	bl	59996 <sock_is_closed>
   5a4b2:	2800      	cmp	r0, #0
   5a4b4:	d0d4      	beq.n	5a460 <nrf_poll+0x82>
   5a4b6:	88e3      	ldrh	r3, [r4, #6]
   5a4b8:	f043 0310 	orr.w	r3, r3, #16
   5a4bc:	e7cf      	b.n	5a45e <nrf_poll+0x80>
   5a4be:	4630      	mov	r0, r6
   5a4c0:	f7ff fa7d 	bl	599be <sock_can_accept>
   5a4c4:	2800      	cmp	r0, #0
   5a4c6:	d1d2      	bne.n	5a46e <nrf_poll+0x90>
   5a4c8:	e7d5      	b.n	5a476 <nrf_poll+0x98>
   5a4ca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   5a4ce:	2b00      	cmp	r3, #0
   5a4d0:	d1b8      	bne.n	5a444 <nrf_poll+0x66>
   5a4d2:	f10a 0a01 	add.w	sl, sl, #1
   5a4d6:	3408      	adds	r4, #8
   5a4d8:	e798      	b.n	5a40c <nrf_poll+0x2e>
   5a4da:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   5a4de:	2b00      	cmp	r3, #0
   5a4e0:	db0a      	blt.n	5a4f8 <nrf_poll+0x11a>
   5a4e2:	88fb      	ldrh	r3, [r7, #6]
   5a4e4:	3501      	adds	r5, #1
   5a4e6:	f043 0308 	orr.w	r3, r3, #8
   5a4ea:	80fb      	strh	r3, [r7, #6]
   5a4ec:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
   5a4f0:	f7f6 f944 	bl	5077c <sock_find>
   5a4f4:	b100      	cbz	r0, 5a4f8 <nrf_poll+0x11a>
   5a4f6:	6186      	str	r6, [r0, #24]
   5a4f8:	3401      	adds	r4, #1
   5a4fa:	4544      	cmp	r4, r8
   5a4fc:	d1ed      	bne.n	5a4da <nrf_poll+0xfc>
   5a4fe:	2d00      	cmp	r5, #0
   5a500:	d18f      	bne.n	5a422 <nrf_poll+0x44>
   5a502:	2004      	movs	r0, #4
   5a504:	e773      	b.n	5a3ee <nrf_poll+0x10>
   5a506:	462c      	mov	r4, r5
   5a508:	266e      	movs	r6, #110	; 0x6e
   5a50a:	e7f6      	b.n	5a4fa <nrf_poll+0x11c>

0005a50c <nrf_fcntl>:
   5a50c:	b538      	push	{r3, r4, r5, lr}
   5a50e:	460d      	mov	r5, r1
   5a510:	4614      	mov	r4, r2
   5a512:	f7f6 f933 	bl	5077c <sock_find>
   5a516:	b928      	cbnz	r0, 5a524 <nrf_fcntl+0x18>
   5a518:	2009      	movs	r0, #9
   5a51a:	f7fc feae 	bl	5727a <nrf_modem_os_errno_set>
   5a51e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   5a522:	e006      	b.n	5a532 <nrf_fcntl+0x26>
   5a524:	2d03      	cmp	r5, #3
   5a526:	d003      	beq.n	5a530 <nrf_fcntl+0x24>
   5a528:	2d04      	cmp	r5, #4
   5a52a:	d004      	beq.n	5a536 <nrf_fcntl+0x2a>
   5a52c:	2016      	movs	r0, #22
   5a52e:	e7f4      	b.n	5a51a <nrf_fcntl+0xe>
   5a530:	6b43      	ldr	r3, [r0, #52]	; 0x34
   5a532:	4618      	mov	r0, r3
   5a534:	bd38      	pop	{r3, r4, r5, pc}
   5a536:	f034 0301 	bics.w	r3, r4, #1
   5a53a:	d1f7      	bne.n	5a52c <nrf_fcntl+0x20>
   5a53c:	6344      	str	r4, [r0, #52]	; 0x34
   5a53e:	e7f8      	b.n	5a532 <nrf_fcntl+0x26>

0005a540 <rpc_af_to_nrf_af>:
   5a540:	1f43      	subs	r3, r0, #5
   5a542:	2b00      	cmp	r3, #0
   5a544:	d803      	bhi.n	5a54e <rpc_af_to_nrf_af+0xe>
   5a546:	e8df f003 	tbb	[pc, r3]
   5a54a:	01          	.byte	0x01
   5a54b:	00          	.byte	0x00
   5a54c:	2003      	movs	r0, #3
   5a54e:	4770      	bx	lr

0005a550 <nrf_type_to_rpc_type>:
   5a550:	4770      	bx	lr

0005a552 <nrf_proto_to_rpc_proto>:
   5a552:	2829      	cmp	r0, #41	; 0x29
   5a554:	d015      	beq.n	5a582 <nrf_proto_to_rpc_proto+0x30>
   5a556:	dc05      	bgt.n	5a564 <nrf_proto_to_rpc_proto+0x12>
   5a558:	2806      	cmp	r0, #6
   5a55a:	d014      	beq.n	5a586 <nrf_proto_to_rpc_proto+0x34>
   5a55c:	2811      	cmp	r0, #17
   5a55e:	d014      	beq.n	5a58a <nrf_proto_to_rpc_proto+0x38>
   5a560:	b148      	cbz	r0, 5a576 <nrf_proto_to_rpc_proto+0x24>
   5a562:	4770      	bx	lr
   5a564:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   5a568:	d00d      	beq.n	5a586 <nrf_proto_to_rpc_proto+0x34>
   5a56a:	f240 1311 	movw	r3, #273	; 0x111
   5a56e:	4298      	cmp	r0, r3
   5a570:	d00b      	beq.n	5a58a <nrf_proto_to_rpc_proto+0x38>
   5a572:	28ff      	cmp	r0, #255	; 0xff
   5a574:	d10c      	bne.n	5a590 <nrf_proto_to_rpc_proto+0x3e>
   5a576:	2901      	cmp	r1, #1
   5a578:	d009      	beq.n	5a58e <nrf_proto_to_rpc_proto+0x3c>
   5a57a:	2902      	cmp	r1, #2
   5a57c:	bf08      	it	eq
   5a57e:	2002      	moveq	r0, #2
   5a580:	4770      	bx	lr
   5a582:	2006      	movs	r0, #6
   5a584:	4770      	bx	lr
   5a586:	2001      	movs	r0, #1
   5a588:	4770      	bx	lr
   5a58a:	2002      	movs	r0, #2
   5a58c:	4770      	bx	lr
   5a58e:	4608      	mov	r0, r1
   5a590:	4770      	bx	lr

0005a592 <nrf_sol_to_rpc_sol>:
   5a592:	2829      	cmp	r0, #41	; 0x29
   5a594:	d013      	beq.n	5a5be <nrf_sol_to_rpc_sol+0x2c>
   5a596:	dc09      	bgt.n	5a5ac <nrf_sol_to_rpc_sol+0x1a>
   5a598:	2801      	cmp	r0, #1
   5a59a:	d012      	beq.n	5a5c2 <nrf_sol_to_rpc_sol+0x30>
   5a59c:	2806      	cmp	r0, #6
   5a59e:	d012      	beq.n	5a5c6 <nrf_sol_to_rpc_sol+0x34>
   5a5a0:	2800      	cmp	r0, #0
   5a5a2:	bf14      	ite	ne
   5a5a4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   5a5a8:	2004      	moveq	r0, #4
   5a5aa:	4770      	bx	lr
   5a5ac:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   5a5b0:	d00b      	beq.n	5a5ca <nrf_sol_to_rpc_sol+0x38>
   5a5b2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   5a5b6:	bf18      	it	ne
   5a5b8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   5a5bc:	4770      	bx	lr
   5a5be:	2006      	movs	r0, #6
   5a5c0:	4770      	bx	lr
   5a5c2:	2008      	movs	r0, #8
   5a5c4:	4770      	bx	lr
   5a5c6:	2001      	movs	r0, #1
   5a5c8:	4770      	bx	lr
   5a5ca:	f44f 7080 	mov.w	r0, #256	; 0x100
   5a5ce:	4770      	bx	lr

0005a5d0 <rpc_error_to_nrf_gai_errno>:
   5a5d0:	b508      	push	{r3, lr}
   5a5d2:	1f03      	subs	r3, r0, #4
   5a5d4:	2b09      	cmp	r3, #9
   5a5d6:	d80f      	bhi.n	5a5f8 <rpc_error_to_nrf_gai_errno+0x28>
   5a5d8:	e8df f003 	tbb	[pc, r3]
   5a5dc:	0e110508 	.word	0x0e110508
   5a5e0:	0e0e0e0e 	.word	0x0e0e0e0e
   5a5e4:	110e      	.short	0x110e
   5a5e6:	f06f 0063 	mvn.w	r0, #99	; 0x63
   5a5ea:	bd08      	pop	{r3, pc}
   5a5ec:	2073      	movs	r0, #115	; 0x73
   5a5ee:	f7fc fe44 	bl	5727a <nrf_modem_os_errno_set>
   5a5f2:	f06f 000a 	mvn.w	r0, #10
   5a5f6:	e7f8      	b.n	5a5ea <rpc_error_to_nrf_gai_errno+0x1a>
   5a5f8:	f7f6 fed2 	bl	513a0 <rpc_error_to_nrf_errno>
   5a5fc:	e7f7      	b.n	5a5ee <rpc_error_to_nrf_gai_errno+0x1e>
   5a5fe:	f06f 0001 	mvn.w	r0, #1
   5a602:	e7f2      	b.n	5a5ea <rpc_error_to_nrf_gai_errno+0x1a>

0005a604 <res_forward>:
   5a604:	68c3      	ldr	r3, [r0, #12]
   5a606:	b113      	cbz	r3, 5a60e <res_forward+0xa>
   5a608:	6018      	str	r0, [r3, #0]
   5a60a:	2001      	movs	r0, #1
   5a60c:	4770      	bx	lr
   5a60e:	4618      	mov	r0, r3
   5a610:	4770      	bx	lr

0005a612 <rpc_dfu_event_handler>:
   5a612:	b510      	push	{r4, lr}
   5a614:	4604      	mov	r4, r0
   5a616:	6800      	ldr	r0, [r0, #0]
   5a618:	b108      	cbz	r0, 5a61e <rpc_dfu_event_handler+0xc>
   5a61a:	f7ff f95d 	bl	598d8 <rpc_client_msg_data_rx_free>
   5a61e:	68e0      	ldr	r0, [r4, #12]
   5a620:	b108      	cbz	r0, 5a626 <rpc_dfu_event_handler+0x14>
   5a622:	6004      	str	r4, [r0, #0]
   5a624:	2001      	movs	r0, #1
   5a626:	bd10      	pop	{r4, pc}

0005a628 <nrf_modem_is_initialized>:
   5a628:	f7f7 bb24 	b.w	51c74 <nrf_modem_state_is_initialized>

0005a62c <mbedtls_heap_init>:
{
	mbedtls_memory_buffer_alloc_free();
}

static int mbedtls_heap_init(const struct device *dev)
{
   5a62c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	_heap_init();
   5a62e:	f7f7 fb33 	bl	51c98 <_heap_init>

	return 0;
}
   5a632:	2000      	movs	r0, #0
   5a634:	bd08      	pop	{r3, pc}

0005a636 <z_device_state_init>:
}
   5a636:	4770      	bx	lr

0005a638 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   5a638:	b140      	cbz	r0, 5a64c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   5a63a:	68c3      	ldr	r3, [r0, #12]
   5a63c:	7858      	ldrb	r0, [r3, #1]
   5a63e:	f010 0001 	ands.w	r0, r0, #1
   5a642:	bf1e      	ittt	ne
   5a644:	7818      	ldrbne	r0, [r3, #0]
   5a646:	fab0 f080 	clzne	r0, r0
   5a64a:	0940      	lsrne	r0, r0, #5
}
   5a64c:	4770      	bx	lr

0005a64e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   5a64e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   5a650:	ab0b      	add	r3, sp, #44	; 0x2c
   5a652:	9305      	str	r3, [sp, #20]
   5a654:	9303      	str	r3, [sp, #12]
   5a656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   5a658:	2201      	movs	r2, #1
   5a65a:	9302      	str	r3, [sp, #8]
   5a65c:	2300      	movs	r3, #0
   5a65e:	4618      	mov	r0, r3
   5a660:	e9cd 3300 	strd	r3, r3, [sp]
   5a664:	f7ea fda0 	bl	451a8 <z_impl_z_log_msg_runtime_vcreate>
}
   5a668:	b007      	add	sp, #28
   5a66a:	f85d fb04 	ldr.w	pc, [sp], #4

0005a66e <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   5a66e:	f000 bc2e 	b.w	5aece <memset>

0005a672 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   5a672:	f000 bbf2 	b.w	5ae5a <memcpy>

0005a676 <k_heap_init>:
{
   5a676:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   5a678:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   5a67c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   5a680:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   5a684:	f7fb b9f8 	b.w	55a78 <sys_heap_init>

0005a688 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   5a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5a68c:	b085      	sub	sp, #20
   5a68e:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   5a692:	4607      	mov	r7, r0
   5a694:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   5a696:	4650      	mov	r0, sl
   5a698:	4621      	mov	r1, r4
{
   5a69a:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   5a69c:	f000 fb01 	bl	5aca2 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   5a6a0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   5a6a4:	bf08      	it	eq
   5a6a6:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   5a6aa:	4605      	mov	r5, r0
   5a6ac:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   5a6ae:	bf04      	itt	eq
   5a6b0:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   5a6b4:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   5a6b8:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   5a6bc:	f04f 0320 	mov.w	r3, #32
   5a6c0:	f3ef 8411 	mrs	r4, BASEPRI
   5a6c4:	f383 8812 	msr	BASEPRI_MAX, r3
   5a6c8:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   5a6cc:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   5a6d0:	464a      	mov	r2, r9
   5a6d2:	4641      	mov	r1, r8
   5a6d4:	4638      	mov	r0, r7
   5a6d6:	f7fb f968 	bl	559aa <sys_heap_aligned_alloc>
   5a6da:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   5a6dc:	f7f8 fda6 	bl	5322c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   5a6e0:	9b03      	ldr	r3, [sp, #12]
   5a6e2:	b13b      	cbz	r3, 5a6f4 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   5a6e4:	f384 8811 	msr	BASEPRI, r4
   5a6e8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   5a6ec:	4618      	mov	r0, r3
   5a6ee:	b005      	add	sp, #20
   5a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   5a6f4:	1a28      	subs	r0, r5, r0
   5a6f6:	eb66 0101 	sbc.w	r1, r6, r1
   5a6fa:	2801      	cmp	r0, #1
   5a6fc:	f171 0200 	sbcs.w	r2, r1, #0
   5a700:	dbf0      	blt.n	5a6e4 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   5a702:	e9cd 0100 	strd	r0, r1, [sp]
   5a706:	465a      	mov	r2, fp
   5a708:	4621      	mov	r1, r4
   5a70a:	4650      	mov	r0, sl
   5a70c:	f7f8 fa36 	bl	52b7c <z_pend_curr>
	__asm__ volatile(
   5a710:	f04f 0320 	mov.w	r3, #32
   5a714:	f3ef 8411 	mrs	r4, BASEPRI
   5a718:	f383 8812 	msr	BASEPRI_MAX, r3
   5a71c:	f3bf 8f6f 	isb	sy
	return k;
   5a720:	e7d6      	b.n	5a6d0 <k_heap_aligned_alloc+0x48>

0005a722 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   5a722:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   5a724:	e9cd 2300 	strd	r2, r3, [sp]
   5a728:	460a      	mov	r2, r1
   5a72a:	2104      	movs	r1, #4
   5a72c:	f7ff ffac 	bl	5a688 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   5a730:	b003      	add	sp, #12
   5a732:	f85d fb04 	ldr.w	pc, [sp], #4

0005a736 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   5a736:	b538      	push	{r3, r4, r5, lr}
   5a738:	4604      	mov	r4, r0
   5a73a:	f04f 0320 	mov.w	r3, #32
   5a73e:	f3ef 8511 	mrs	r5, BASEPRI
   5a742:	f383 8812 	msr	BASEPRI_MAX, r3
   5a746:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   5a74a:	f7fb f8f6 	bl	5593a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   5a74e:	f104 000c 	add.w	r0, r4, #12
   5a752:	f000 fa27 	bl	5aba4 <z_unpend_all>
   5a756:	b130      	cbz	r0, 5a766 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   5a758:	4629      	mov	r1, r5
   5a75a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   5a75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   5a762:	f7f8 ba6f 	b.w	52c44 <z_reschedule>
	__asm__ volatile(
   5a766:	f385 8811 	msr	BASEPRI, r5
   5a76a:	f3bf 8f6f 	isb	sy
}
   5a76e:	bd38      	pop	{r3, r4, r5, pc}

0005a770 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   5a770:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   5a774:	4313      	orrs	r3, r2
   5a776:	f013 0303 	ands.w	r3, r3, #3
   5a77a:	d10c      	bne.n	5a796 <create_free_list+0x26>
	slab->free_list = NULL;
   5a77c:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   5a77e:	6881      	ldr	r1, [r0, #8]
   5a780:	4299      	cmp	r1, r3
   5a782:	d801      	bhi.n	5a788 <create_free_list+0x18>
	return 0;
   5a784:	2000      	movs	r0, #0
   5a786:	4770      	bx	lr
		*(char **)p = slab->free_list;
   5a788:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   5a78a:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   5a78c:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   5a78e:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   5a790:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   5a792:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   5a794:	e7f3      	b.n	5a77e <create_free_list+0xe>
		return -EINVAL;
   5a796:	f06f 0015 	mvn.w	r0, #21
}
   5a79a:	4770      	bx	lr

0005a79c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   5a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5a79e:	4604      	mov	r4, r0
   5a7a0:	460d      	mov	r5, r1
	__asm__ volatile(
   5a7a2:	f04f 0320 	mov.w	r3, #32
   5a7a6:	f3ef 8611 	mrs	r6, BASEPRI
   5a7aa:	f383 8812 	msr	BASEPRI_MAX, r3
   5a7ae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   5a7b2:	6947      	ldr	r7, [r0, #20]
   5a7b4:	b977      	cbnz	r7, 5a7d4 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   5a7b6:	f000 f9af 	bl	5ab18 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   5a7ba:	b158      	cbz	r0, 5a7d4 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   5a7bc:	682a      	ldr	r2, [r5, #0]
   5a7be:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   5a7c0:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   5a7c2:	f000 f999 	bl	5aaf8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   5a7c6:	4631      	mov	r1, r6
   5a7c8:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   5a7cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   5a7d0:	f7f8 ba38 	b.w	52c44 <z_reschedule>
	**(char ***) mem = slab->free_list;
   5a7d4:	682b      	ldr	r3, [r5, #0]
   5a7d6:	6962      	ldr	r2, [r4, #20]
   5a7d8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   5a7da:	682b      	ldr	r3, [r5, #0]
   5a7dc:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   5a7de:	69a3      	ldr	r3, [r4, #24]
   5a7e0:	3b01      	subs	r3, #1
   5a7e2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   5a7e4:	f386 8811 	msr	BASEPRI, r6
   5a7e8:	f3bf 8f6f 	isb	sy
}
   5a7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0005a7ee <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   5a7ee:	f3ef 8005 	mrs	r0, IPSR
}
   5a7f2:	3800      	subs	r0, #0
   5a7f4:	bf18      	it	ne
   5a7f6:	2001      	movne	r0, #1
   5a7f8:	4770      	bx	lr

0005a7fa <z_impl_k_thread_name_set>:
}
   5a7fa:	f06f 0057 	mvn.w	r0, #87	; 0x57
   5a7fe:	4770      	bx	lr

0005a800 <k_thread_name_get>:
}
   5a800:	2000      	movs	r0, #0
   5a802:	4770      	bx	lr

0005a804 <z_impl_k_thread_start>:
	z_sched_start(thread);
   5a804:	f7f8 ba30 	b.w	52c68 <z_sched_start>

0005a808 <z_pm_save_idle_exit>:
{
   5a808:	b508      	push	{r3, lr}
	pm_system_resume();
   5a80a:	f7eb f803 	bl	45814 <pm_system_resume>
}
   5a80e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   5a812:	f7fc bd15 	b.w	57240 <sys_clock_idle_exit>

0005a816 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   5a816:	f990 300e 	ldrsb.w	r3, [r0, #14]
   5a81a:	428b      	cmp	r3, r1
   5a81c:	d001      	beq.n	5a822 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   5a81e:	f7f8 b9cb 	b.w	52bb8 <z_set_prio>
}
   5a822:	2000      	movs	r0, #0
   5a824:	4770      	bx	lr

0005a826 <z_impl_k_mutex_init>:
{
   5a826:	4603      	mov	r3, r0
	mutex->owner = NULL;
   5a828:	2000      	movs	r0, #0
   5a82a:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   5a82e:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   5a832:	4770      	bx	lr

0005a834 <queue_insert>:
{
   5a834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   5a838:	4699      	mov	r9, r3
   5a83a:	4604      	mov	r4, r0
   5a83c:	460d      	mov	r5, r1
   5a83e:	4690      	mov	r8, r2
   5a840:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   5a844:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   5a848:	f04f 0220 	mov.w	r2, #32
   5a84c:	f3ef 8711 	mrs	r7, BASEPRI
   5a850:	f382 8812 	msr	BASEPRI_MAX, r2
   5a854:	f3bf 8f6f 	isb	sy
	if (is_append) {
   5a858:	b103      	cbz	r3, 5a85c <queue_insert+0x28>
	return list->tail;
   5a85a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   5a85c:	4630      	mov	r0, r6
   5a85e:	f000 f95b 	bl	5ab18 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   5a862:	b158      	cbz	r0, 5a87c <queue_insert+0x48>
   5a864:	2300      	movs	r3, #0
   5a866:	f8c0 8014 	str.w	r8, [r0, #20]
   5a86a:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   5a86c:	f000 f944 	bl	5aaf8 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   5a870:	4630      	mov	r0, r6
   5a872:	4639      	mov	r1, r7
   5a874:	f7f8 f9e6 	bl	52c44 <z_reschedule>
		return 0;
   5a878:	2000      	movs	r0, #0
   5a87a:	e00c      	b.n	5a896 <queue_insert+0x62>
	if (alloc) {
   5a87c:	f1b9 0f00 	cmp.w	r9, #0
   5a880:	d01b      	beq.n	5a8ba <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   5a882:	2108      	movs	r1, #8
   5a884:	f7f8 fd22 	bl	532cc <z_thread_aligned_alloc>
		if (anode == NULL) {
   5a888:	b938      	cbnz	r0, 5a89a <queue_insert+0x66>
	__asm__ volatile(
   5a88a:	f387 8811 	msr	BASEPRI, r7
   5a88e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   5a892:	f06f 000b 	mvn.w	r0, #11
}
   5a896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   5a89a:	2201      	movs	r2, #1
		anode->data = data;
   5a89c:	f8c0 8004 	str.w	r8, [r0, #4]
   5a8a0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5a8a2:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a8a4:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   5a8a8:	b95d      	cbnz	r5, 5a8c2 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a8aa:	6822      	ldr	r2, [r4, #0]
   5a8ac:	430a      	orrs	r2, r1
   5a8ae:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   5a8b0:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   5a8b2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   5a8b4:	b96a      	cbnz	r2, 5a8d2 <queue_insert+0x9e>
	list->tail = node;
   5a8b6:	6060      	str	r0, [r4, #4]
}
   5a8b8:	e00b      	b.n	5a8d2 <queue_insert+0x9e>
}
   5a8ba:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   5a8bc:	f8c8 9000 	str.w	r9, [r8]
}
   5a8c0:	e7ef      	b.n	5a8a2 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   5a8c2:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   5a8c4:	2a03      	cmp	r2, #3
   5a8c6:	d810      	bhi.n	5a8ea <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a8c8:	6001      	str	r1, [r0, #0]
	return list->tail;
   5a8ca:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   5a8cc:	b939      	cbnz	r1, 5a8de <queue_insert+0xaa>
	list->head = node;
   5a8ce:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   5a8d2:	2104      	movs	r1, #4
   5a8d4:	f104 0010 	add.w	r0, r4, #16
   5a8d8:	f000 fa5f 	bl	5ad9a <z_handle_obj_poll_events>
   5a8dc:	e7c8      	b.n	5a870 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5a8de:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a8e0:	f002 0203 	and.w	r2, r2, #3
   5a8e4:	4302      	orrs	r2, r0
   5a8e6:	600a      	str	r2, [r1, #0]
   5a8e8:	e7e5      	b.n	5a8b6 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   5a8ea:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a8ee:	430a      	orrs	r2, r1
   5a8f0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5a8f2:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a8f4:	f002 0203 	and.w	r2, r2, #3
   5a8f8:	ea40 0302 	orr.w	r3, r0, r2
   5a8fc:	602b      	str	r3, [r5, #0]
}
   5a8fe:	e7e8      	b.n	5a8d2 <queue_insert+0x9e>

0005a900 <z_queue_node_peek>:
{
   5a900:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   5a902:	4604      	mov	r4, r0
   5a904:	b130      	cbz	r0, 5a914 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5a906:	6802      	ldr	r2, [r0, #0]
   5a908:	0793      	lsls	r3, r2, #30
   5a90a:	d003      	beq.n	5a914 <z_queue_node_peek+0x14>
		ret = anode->data;
   5a90c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   5a90e:	b109      	cbz	r1, 5a914 <z_queue_node_peek+0x14>
			k_free(anode);
   5a910:	f000 fa64 	bl	5addc <k_free>
}
   5a914:	4620      	mov	r0, r4
   5a916:	bd10      	pop	{r4, pc}

0005a918 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   5a918:	2301      	movs	r3, #1
{
   5a91a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   5a91c:	9300      	str	r3, [sp, #0]
   5a91e:	2300      	movs	r3, #0
{
   5a920:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   5a922:	4619      	mov	r1, r3
   5a924:	f7ff ff86 	bl	5a834 <queue_insert>
}
   5a928:	b003      	add	sp, #12
   5a92a:	f85d fb04 	ldr.w	pc, [sp], #4

0005a92e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   5a92e:	b15a      	cbz	r2, 5a948 <z_impl_k_sem_init+0x1a>
   5a930:	428a      	cmp	r2, r1
   5a932:	d309      	bcc.n	5a948 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   5a934:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   5a938:	e9c0 1202 	strd	r1, r2, [r0, #8]
   5a93c:	e9c0 0000 	strd	r0, r0, [r0]
   5a940:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   5a944:	2000      	movs	r0, #0
   5a946:	4770      	bx	lr
		return -EINVAL;
   5a948:	f06f 0015 	mvn.w	r0, #21
}
   5a94c:	4770      	bx	lr

0005a94e <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   5a94e:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   5a950:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   5a952:	408b      	lsls	r3, r1
   5a954:	ea22 0303 	bic.w	r3, r2, r3
   5a958:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   5a95a:	fa22 f001 	lsr.w	r0, r2, r1
}
   5a95e:	f000 0001 	and.w	r0, r0, #1
   5a962:	4770      	bx	lr

0005a964 <unschedule_locked>:
{
   5a964:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   5a966:	2103      	movs	r1, #3
{
   5a968:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   5a96a:	300c      	adds	r0, #12
   5a96c:	f7ff ffef 	bl	5a94e <flag_test_and_clear>
   5a970:	4604      	mov	r4, r0
   5a972:	b118      	cbz	r0, 5a97c <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   5a974:	f105 0010 	add.w	r0, r5, #16
   5a978:	f000 f947 	bl	5ac0a <z_abort_timeout>
}
   5a97c:	4620      	mov	r0, r4
   5a97e:	bd38      	pop	{r3, r4, r5, pc}

0005a980 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   5a980:	b120      	cbz	r0, 5a98c <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   5a982:	2200      	movs	r2, #0
   5a984:	30d0      	adds	r0, #208	; 0xd0
   5a986:	4611      	mov	r1, r2
   5a988:	f000 b91c 	b.w	5abc4 <z_sched_wake>
}
   5a98c:	4770      	bx	lr

0005a98e <work_timeout>:
{
   5a98e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   5a990:	4604      	mov	r4, r0
	__asm__ volatile(
   5a992:	f04f 0320 	mov.w	r3, #32
   5a996:	f3ef 8511 	mrs	r5, BASEPRI
   5a99a:	f383 8812 	msr	BASEPRI_MAX, r3
   5a99e:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   5a9a2:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   5a9a4:	f1a0 0610 	sub.w	r6, r0, #16
   5a9a8:	2103      	movs	r1, #3
   5a9aa:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   5a9ac:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   5a9ae:	f7ff ffce 	bl	5a94e <flag_test_and_clear>
   5a9b2:	b128      	cbz	r0, 5a9c0 <work_timeout+0x32>
		queue = dw->queue;
   5a9b4:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   5a9b6:	4630      	mov	r0, r6
   5a9b8:	a901      	add	r1, sp, #4
		queue = dw->queue;
   5a9ba:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   5a9bc:	f7f7 fe9e 	bl	526fc <submit_to_queue_locked>
	__asm__ volatile(
   5a9c0:	f385 8811 	msr	BASEPRI, r5
   5a9c4:	f3bf 8f6f 	isb	sy
}
   5a9c8:	b002      	add	sp, #8
   5a9ca:	bd70      	pop	{r4, r5, r6, pc}

0005a9cc <k_work_init>:
{
   5a9cc:	b538      	push	{r3, r4, r5, lr}
   5a9ce:	4604      	mov	r4, r0
   5a9d0:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   5a9d2:	2210      	movs	r2, #16
   5a9d4:	2100      	movs	r1, #0
   5a9d6:	f000 fa7a 	bl	5aece <memset>
   5a9da:	6065      	str	r5, [r4, #4]
}
   5a9dc:	bd38      	pop	{r3, r4, r5, pc}

0005a9de <z_work_submit_to_queue>:
{
   5a9de:	b513      	push	{r0, r1, r4, lr}
   5a9e0:	9001      	str	r0, [sp, #4]
   5a9e2:	4608      	mov	r0, r1
	__asm__ volatile(
   5a9e4:	f04f 0320 	mov.w	r3, #32
   5a9e8:	f3ef 8411 	mrs	r4, BASEPRI
   5a9ec:	f383 8812 	msr	BASEPRI_MAX, r3
   5a9f0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   5a9f4:	a901      	add	r1, sp, #4
   5a9f6:	f7f7 fe81 	bl	526fc <submit_to_queue_locked>
	__asm__ volatile(
   5a9fa:	f384 8811 	msr	BASEPRI, r4
   5a9fe:	f3bf 8f6f 	isb	sy
}
   5aa02:	b002      	add	sp, #8
   5aa04:	bd10      	pop	{r4, pc}

0005aa06 <k_work_submit_to_queue>:
{
   5aa06:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   5aa08:	f7ff ffe9 	bl	5a9de <z_work_submit_to_queue>
	if (ret > 0) {
   5aa0c:	1e04      	subs	r4, r0, #0
   5aa0e:	dd09      	ble.n	5aa24 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   5aa10:	f04f 0320 	mov.w	r3, #32
   5aa14:	f3ef 8011 	mrs	r0, BASEPRI
   5aa18:	f383 8812 	msr	BASEPRI_MAX, r3
   5aa1c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   5aa20:	f000 f8aa 	bl	5ab78 <z_reschedule_irqlock>
}
   5aa24:	4620      	mov	r0, r4
   5aa26:	bd10      	pop	{r4, pc}

0005aa28 <k_work_init_delayable>:
{
   5aa28:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   5aa2a:	2230      	movs	r2, #48	; 0x30
{
   5aa2c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   5aa2e:	2100      	movs	r1, #0
{
   5aa30:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   5aa32:	f000 fa4c 	bl	5aece <memset>
   5aa36:	f44f 7380 	mov.w	r3, #256	; 0x100
   5aa3a:	6065      	str	r5, [r4, #4]
   5aa3c:	60e3      	str	r3, [r4, #12]
}
   5aa3e:	bd38      	pop	{r3, r4, r5, pc}

0005aa40 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   5aa40:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   5aa44:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   5aa46:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   5aa48:	2300      	movs	r3, #0
	node->prev = NULL;
   5aa4a:	e9c0 3300 	strd	r3, r3, [r0]
}
   5aa4e:	4770      	bx	lr

0005aa50 <unpend_thread_no_timeout>:
{
   5aa50:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   5aa52:	f7ff fff5 	bl	5aa40 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   5aa56:	7b43      	ldrb	r3, [r0, #13]
   5aa58:	f023 0302 	bic.w	r3, r3, #2
   5aa5c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   5aa5e:	2300      	movs	r3, #0
   5aa60:	6083      	str	r3, [r0, #8]
}
   5aa62:	bd08      	pop	{r3, pc}

0005aa64 <z_thread_timeout>:
{
   5aa64:	4601      	mov	r1, r0
   5aa66:	b510      	push	{r4, lr}
   5aa68:	f04f 0320 	mov.w	r3, #32
   5aa6c:	f3ef 8411 	mrs	r4, BASEPRI
   5aa70:	f383 8812 	msr	BASEPRI_MAX, r3
   5aa74:	f3bf 8f6f 	isb	sy
		if (!killed) {
   5aa78:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   5aa7c:	f013 0f28 	tst.w	r3, #40	; 0x28
   5aa80:	d10d      	bne.n	5aa9e <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   5aa82:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   5aa86:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   5aa88:	b10b      	cbz	r3, 5aa8e <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   5aa8a:	f7ff ffe1 	bl	5aa50 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   5aa8e:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   5aa92:	f023 0314 	bic.w	r3, r3, #20
   5aa96:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   5aa9a:	f7f7 ff97 	bl	529cc <ready_thread>
	__asm__ volatile(
   5aa9e:	f384 8811 	msr	BASEPRI, r4
   5aaa2:	f3bf 8f6f 	isb	sy
}
   5aaa6:	bd10      	pop	{r4, pc}

0005aaa8 <add_to_waitq_locked>:
{
   5aaa8:	b538      	push	{r3, r4, r5, lr}
   5aaaa:	4604      	mov	r4, r0
   5aaac:	460d      	mov	r5, r1
	unready_thread(thread);
   5aaae:	f7f7 ffc1 	bl	52a34 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   5aab2:	7b63      	ldrb	r3, [r4, #13]
   5aab4:	f043 0302 	orr.w	r3, r3, #2
   5aab8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   5aaba:	b1e5      	cbz	r5, 5aaf6 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   5aabc:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   5aabe:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5aac0:	429d      	cmp	r5, r3
   5aac2:	d109      	bne.n	5aad8 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   5aac4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   5aac6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   5aaca:	601c      	str	r4, [r3, #0]
	list->tail = node;
   5aacc:	606c      	str	r4, [r5, #4]
}
   5aace:	e012      	b.n	5aaf6 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   5aad0:	686a      	ldr	r2, [r5, #4]
   5aad2:	4293      	cmp	r3, r2
   5aad4:	d0f6      	beq.n	5aac4 <add_to_waitq_locked+0x1c>
   5aad6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   5aad8:	2b00      	cmp	r3, #0
   5aada:	d0f3      	beq.n	5aac4 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   5aadc:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   5aae0:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   5aae4:	428a      	cmp	r2, r1
   5aae6:	d0f3      	beq.n	5aad0 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   5aae8:	4291      	cmp	r1, r2
   5aaea:	ddf1      	ble.n	5aad0 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   5aaec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   5aaee:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   5aaf2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   5aaf4:	605c      	str	r4, [r3, #4]
}
   5aaf6:	bd38      	pop	{r3, r4, r5, pc}

0005aaf8 <z_ready_thread>:
{
   5aaf8:	b510      	push	{r4, lr}
	__asm__ volatile(
   5aafa:	f04f 0320 	mov.w	r3, #32
   5aafe:	f3ef 8411 	mrs	r4, BASEPRI
   5ab02:	f383 8812 	msr	BASEPRI_MAX, r3
   5ab06:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   5ab0a:	f7f7 ff5f 	bl	529cc <ready_thread>
	__asm__ volatile(
   5ab0e:	f384 8811 	msr	BASEPRI, r4
   5ab12:	f3bf 8f6f 	isb	sy
}
   5ab16:	bd10      	pop	{r4, pc}

0005ab18 <z_unpend_first_thread>:
{
   5ab18:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   5ab1a:	f04f 0320 	mov.w	r3, #32
   5ab1e:	f3ef 8511 	mrs	r5, BASEPRI
   5ab22:	f383 8812 	msr	BASEPRI_MAX, r3
   5ab26:	f3bf 8f6f 	isb	sy
	return list->head == list;
   5ab2a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5ab2c:	42a0      	cmp	r0, r4
   5ab2e:	d00d      	beq.n	5ab4c <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   5ab30:	b134      	cbz	r4, 5ab40 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   5ab32:	4620      	mov	r0, r4
   5ab34:	f7ff ff8c 	bl	5aa50 <unpend_thread_no_timeout>
   5ab38:	f104 0018 	add.w	r0, r4, #24
   5ab3c:	f000 f865 	bl	5ac0a <z_abort_timeout>
	__asm__ volatile(
   5ab40:	f385 8811 	msr	BASEPRI, r5
   5ab44:	f3bf 8f6f 	isb	sy
}
   5ab48:	4620      	mov	r0, r4
   5ab4a:	bd38      	pop	{r3, r4, r5, pc}
   5ab4c:	2400      	movs	r4, #0
   5ab4e:	e7f7      	b.n	5ab40 <z_unpend_first_thread+0x28>

0005ab50 <z_unpend_thread>:
{
   5ab50:	b510      	push	{r4, lr}
	__asm__ volatile(
   5ab52:	f04f 0320 	mov.w	r3, #32
   5ab56:	f3ef 8411 	mrs	r4, BASEPRI
   5ab5a:	f383 8812 	msr	BASEPRI_MAX, r3
   5ab5e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   5ab62:	f7ff ff75 	bl	5aa50 <unpend_thread_no_timeout>
	__asm__ volatile(
   5ab66:	f384 8811 	msr	BASEPRI, r4
   5ab6a:	f3bf 8f6f 	isb	sy
}
   5ab6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   5ab72:	3018      	adds	r0, #24
   5ab74:	f000 b849 	b.w	5ac0a <z_abort_timeout>

0005ab78 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   5ab78:	4603      	mov	r3, r0
   5ab7a:	b920      	cbnz	r0, 5ab86 <z_reschedule_irqlock+0xe>
   5ab7c:	f3ef 8205 	mrs	r2, IPSR
   5ab80:	b90a      	cbnz	r2, 5ab86 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   5ab82:	f7eb b95d 	b.w	45e40 <arch_swap>
   5ab86:	f383 8811 	msr	BASEPRI, r3
   5ab8a:	f3bf 8f6f 	isb	sy
}
   5ab8e:	4770      	bx	lr

0005ab90 <z_reschedule_unlocked>:
	__asm__ volatile(
   5ab90:	f04f 0320 	mov.w	r3, #32
   5ab94:	f3ef 8011 	mrs	r0, BASEPRI
   5ab98:	f383 8812 	msr	BASEPRI_MAX, r3
   5ab9c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   5aba0:	f7ff bfea 	b.w	5ab78 <z_reschedule_irqlock>

0005aba4 <z_unpend_all>:
{
   5aba4:	b538      	push	{r3, r4, r5, lr}
   5aba6:	4605      	mov	r5, r0
	int need_sched = 0;
   5aba8:	2000      	movs	r0, #0
	return list->head == list;
   5abaa:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5abac:	42a5      	cmp	r5, r4
   5abae:	d000      	beq.n	5abb2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   5abb0:	b904      	cbnz	r4, 5abb4 <z_unpend_all+0x10>
}
   5abb2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   5abb4:	4620      	mov	r0, r4
   5abb6:	f7ff ffcb 	bl	5ab50 <z_unpend_thread>
		z_ready_thread(thread);
   5abba:	4620      	mov	r0, r4
   5abbc:	f7ff ff9c 	bl	5aaf8 <z_ready_thread>
		need_sched = 1;
   5abc0:	2001      	movs	r0, #1
   5abc2:	e7f2      	b.n	5abaa <z_unpend_all+0x6>

0005abc4 <z_sched_wake>:
{
   5abc4:	b538      	push	{r3, r4, r5, lr}
   5abc6:	f04f 0320 	mov.w	r3, #32
   5abca:	f3ef 8511 	mrs	r5, BASEPRI
   5abce:	f383 8812 	msr	BASEPRI_MAX, r3
   5abd2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   5abd6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5abd8:	42a0      	cmp	r0, r4
   5abda:	d012      	beq.n	5ac02 <z_sched_wake+0x3e>
		if (thread != NULL) {
   5abdc:	b19c      	cbz	r4, 5ac06 <z_sched_wake+0x42>
   5abde:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   5abe0:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   5abe2:	4620      	mov	r0, r4
   5abe4:	f7ff ff34 	bl	5aa50 <unpend_thread_no_timeout>
   5abe8:	f104 0018 	add.w	r0, r4, #24
   5abec:	f000 f80d 	bl	5ac0a <z_abort_timeout>
			ready_thread(thread);
   5abf0:	4620      	mov	r0, r4
   5abf2:	f7f7 feeb 	bl	529cc <ready_thread>
			ret = true;
   5abf6:	2001      	movs	r0, #1
	__asm__ volatile(
   5abf8:	f385 8811 	msr	BASEPRI, r5
   5abfc:	f3bf 8f6f 	isb	sy
}
   5ac00:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   5ac02:	2000      	movs	r0, #0
   5ac04:	e7f8      	b.n	5abf8 <z_sched_wake+0x34>
   5ac06:	4620      	mov	r0, r4
   5ac08:	e7f6      	b.n	5abf8 <z_sched_wake+0x34>

0005ac0a <z_abort_timeout>:
{
   5ac0a:	b510      	push	{r4, lr}
	__asm__ volatile(
   5ac0c:	f04f 0220 	mov.w	r2, #32
   5ac10:	f3ef 8411 	mrs	r4, BASEPRI
   5ac14:	f382 8812 	msr	BASEPRI_MAX, r2
   5ac18:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   5ac1c:	6803      	ldr	r3, [r0, #0]
   5ac1e:	b13b      	cbz	r3, 5ac30 <z_abort_timeout+0x26>
			remove_timeout(to);
   5ac20:	f7f8 fa0e 	bl	53040 <remove_timeout>
			ret = 0;
   5ac24:	2000      	movs	r0, #0
	__asm__ volatile(
   5ac26:	f384 8811 	msr	BASEPRI, r4
   5ac2a:	f3bf 8f6f 	isb	sy
}
   5ac2e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   5ac30:	f06f 0015 	mvn.w	r0, #21
   5ac34:	e7f7      	b.n	5ac26 <z_abort_timeout+0x1c>

0005ac36 <z_get_next_timeout_expiry>:
{
   5ac36:	b510      	push	{r4, lr}
	__asm__ volatile(
   5ac38:	f04f 0320 	mov.w	r3, #32
   5ac3c:	f3ef 8411 	mrs	r4, BASEPRI
   5ac40:	f383 8812 	msr	BASEPRI_MAX, r3
   5ac44:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   5ac48:	f7f8 f9d2 	bl	52ff0 <next_timeout>
	__asm__ volatile(
   5ac4c:	f384 8811 	msr	BASEPRI, r4
   5ac50:	f3bf 8f6f 	isb	sy
}
   5ac54:	bd10      	pop	{r4, pc}

0005ac56 <z_set_timeout_expiry>:
{
   5ac56:	b570      	push	{r4, r5, r6, lr}
   5ac58:	4604      	mov	r4, r0
   5ac5a:	460d      	mov	r5, r1
	__asm__ volatile(
   5ac5c:	f04f 0320 	mov.w	r3, #32
   5ac60:	f3ef 8611 	mrs	r6, BASEPRI
   5ac64:	f383 8812 	msr	BASEPRI_MAX, r3
   5ac68:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   5ac6c:	f7f8 f9c0 	bl	52ff0 <next_timeout>
			      || (ticks <= next_to);
   5ac70:	2801      	cmp	r0, #1
   5ac72:	dd07      	ble.n	5ac84 <z_set_timeout_expiry+0x2e>
   5ac74:	42a0      	cmp	r0, r4
   5ac76:	db05      	blt.n	5ac84 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   5ac78:	42a0      	cmp	r0, r4
   5ac7a:	4629      	mov	r1, r5
   5ac7c:	bfa8      	it	ge
   5ac7e:	4620      	movge	r0, r4
   5ac80:	f7ee fda8 	bl	497d4 <sys_clock_set_timeout>
	__asm__ volatile(
   5ac84:	f386 8811 	msr	BASEPRI, r6
   5ac88:	f3bf 8f6f 	isb	sy
}
   5ac8c:	bd70      	pop	{r4, r5, r6, pc}

0005ac8e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   5ac8e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   5ac90:	f7f8 facc 	bl	5322c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   5ac94:	bd08      	pop	{r3, pc}

0005ac96 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   5ac96:	f7f8 bac9 	b.w	5322c <sys_clock_tick_get>

0005ac9a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   5ac9a:	b108      	cbz	r0, 5aca0 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   5ac9c:	f7ea b97a 	b.w	44f94 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   5aca0:	4770      	bx	lr

0005aca2 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   5aca2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   5aca6:	bf08      	it	eq
   5aca8:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   5acac:	b538      	push	{r3, r4, r5, lr}
   5acae:	460c      	mov	r4, r1
   5acb0:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   5acb2:	d014      	beq.n	5acde <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   5acb4:	4308      	orrs	r0, r1
   5acb6:	d103      	bne.n	5acc0 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   5acb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   5acbc:	f7f8 bab6 	b.w	5322c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   5acc0:	f06f 0001 	mvn.w	r0, #1
   5acc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   5acc8:	1b40      	subs	r0, r0, r5
   5acca:	eb63 0101 	sbc.w	r1, r3, r1
   5acce:	2900      	cmp	r1, #0
   5acd0:	da04      	bge.n	5acdc <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   5acd2:	f7f8 faab 	bl	5322c <sys_clock_tick_get>
   5acd6:	1940      	adds	r0, r0, r5
   5acd8:	eb41 0104 	adc.w	r1, r1, r4
}
   5acdc:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   5acde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5ace2:	4601      	mov	r1, r0
   5ace4:	e7fa      	b.n	5acdc <sys_clock_timeout_end_calc+0x3a>

0005ace6 <signal_poll_event>:
{
   5ace6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   5acea:	6884      	ldr	r4, [r0, #8]
{
   5acec:	4605      	mov	r5, r0
   5acee:	460e      	mov	r6, r1
	if (poller != NULL) {
   5acf0:	b144      	cbz	r4, 5ad04 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   5acf2:	7863      	ldrb	r3, [r4, #1]
   5acf4:	2b01      	cmp	r3, #1
   5acf6:	d12e      	bne.n	5ad56 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   5acf8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   5acfc:	f013 0302 	ands.w	r3, r3, #2
   5ad00:	d10a      	bne.n	5ad18 <signal_poll_event+0x32>
		poller->is_polling = false;
   5ad02:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   5ad04:	2000      	movs	r0, #0
	event->state |= state;
   5ad06:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   5ad08:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   5ad0a:	f3c3 3286 	ubfx	r2, r3, #14, #7
   5ad0e:	4316      	orrs	r6, r2
   5ad10:	f366 3394 	bfi	r3, r6, #14, #7
   5ad14:	60eb      	str	r3, [r5, #12]
	return retcode;
   5ad16:	e03e      	b.n	5ad96 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   5ad18:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   5ad1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   5ad20:	bf08      	it	eq
   5ad22:	f112 0f02 	cmneq.w	r2, #2
   5ad26:	d032      	beq.n	5ad8e <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   5ad28:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   5ad2c:	4640      	mov	r0, r8
   5ad2e:	f7ff ff0f 	bl	5ab50 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   5ad32:	2e08      	cmp	r6, #8
   5ad34:	bf0c      	ite	eq
   5ad36:	f06f 0303 	mvneq.w	r3, #3
   5ad3a:	2300      	movne	r3, #0
   5ad3c:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   5ad3e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   5ad42:	06db      	lsls	r3, r3, #27
   5ad44:	d109      	bne.n	5ad5a <signal_poll_event+0x74>
   5ad46:	f854 7c48 	ldr.w	r7, [r4, #-72]
   5ad4a:	b937      	cbnz	r7, 5ad5a <signal_poll_event+0x74>
	z_ready_thread(thread);
   5ad4c:	4640      	mov	r0, r8
   5ad4e:	f7ff fed3 	bl	5aaf8 <z_ready_thread>
		poller->is_polling = false;
   5ad52:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   5ad54:	e7d6      	b.n	5ad04 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   5ad56:	2b02      	cmp	r3, #2
   5ad58:	d001      	beq.n	5ad5e <signal_poll_event+0x78>
		poller->is_polling = false;
   5ad5a:	2300      	movs	r3, #0
   5ad5c:	e7d1      	b.n	5ad02 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   5ad5e:	7823      	ldrb	r3, [r4, #0]
   5ad60:	2b00      	cmp	r3, #0
   5ad62:	d0cf      	beq.n	5ad04 <signal_poll_event+0x1e>
   5ad64:	f854 7c04 	ldr.w	r7, [r4, #-4]
   5ad68:	2f00      	cmp	r7, #0
   5ad6a:	d0f2      	beq.n	5ad52 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   5ad6c:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   5ad70:	f1a4 0914 	sub.w	r9, r4, #20
   5ad74:	f104 0014 	add.w	r0, r4, #20
   5ad78:	f7ff ff47 	bl	5ac0a <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   5ad7c:	4649      	mov	r1, r9
   5ad7e:	4638      	mov	r0, r7
		twork->poll_result = 0;
   5ad80:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   5ad84:	f7ff fe2b 	bl	5a9de <z_work_submit_to_queue>
		poller->is_polling = false;
   5ad88:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   5ad8c:	e7ba      	b.n	5ad04 <signal_poll_event+0x1e>
		poller->is_polling = false;
   5ad8e:	2300      	movs	r3, #0
		return -EAGAIN;
   5ad90:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   5ad94:	7023      	strb	r3, [r4, #0]
}
   5ad96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0005ad9a <z_handle_obj_poll_events>:
{
   5ad9a:	4603      	mov	r3, r0
	return list->head == list;
   5ad9c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   5ad9e:	4283      	cmp	r3, r0
   5ada0:	d008      	beq.n	5adb4 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   5ada2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   5ada6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   5ada8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   5adaa:	2300      	movs	r3, #0
	node->prev = NULL;
   5adac:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   5adb0:	f7ff bf99 	b.w	5ace6 <signal_poll_event>
}
   5adb4:	4770      	bx	lr

0005adb6 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   5adb6:	3204      	adds	r2, #4
{
   5adb8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   5adba:	4604      	mov	r4, r0
   5adbc:	d208      	bcs.n	5add0 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   5adbe:	2600      	movs	r6, #0
   5adc0:	2700      	movs	r7, #0
   5adc2:	f041 0104 	orr.w	r1, r1, #4
   5adc6:	e9cd 6700 	strd	r6, r7, [sp]
   5adca:	f7ff fc5d 	bl	5a688 <k_heap_aligned_alloc>
	if (mem == NULL) {
   5adce:	b910      	cbnz	r0, 5add6 <z_heap_aligned_alloc+0x20>
		return NULL;
   5add0:	2000      	movs	r0, #0
}
   5add2:	b002      	add	sp, #8
   5add4:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   5add6:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   5adda:	e7fa      	b.n	5add2 <z_heap_aligned_alloc+0x1c>

0005addc <k_free>:
	if (ptr != NULL) {
   5addc:	b120      	cbz	r0, 5ade8 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   5adde:	1f01      	subs	r1, r0, #4
   5ade0:	f850 0c04 	ldr.w	r0, [r0, #-4]
   5ade4:	f7ff bca7 	b.w	5a736 <k_heap_free>
}
   5ade8:	4770      	bx	lr

0005adea <k_malloc>:
{
   5adea:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   5adec:	2004      	movs	r0, #4
   5adee:	f7f8 ba5f 	b.w	532b0 <k_aligned_alloc>

0005adf2 <k_calloc>:
{
   5adf2:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   5adf4:	fba0 5401 	umull	r5, r4, r0, r1
   5adf8:	b924      	cbnz	r4, 5ae04 <k_calloc+0x12>
	ret = k_malloc(bounds);
   5adfa:	4628      	mov	r0, r5
   5adfc:	f7ff fff5 	bl	5adea <k_malloc>
	if (ret != NULL) {
   5ae00:	4606      	mov	r6, r0
   5ae02:	b910      	cbnz	r0, 5ae0a <k_calloc+0x18>
		return NULL;
   5ae04:	2600      	movs	r6, #0
}
   5ae06:	4630      	mov	r0, r6
   5ae08:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   5ae0a:	462a      	mov	r2, r5
   5ae0c:	4621      	mov	r1, r4
   5ae0e:	f000 f85e 	bl	5aece <memset>
   5ae12:	e7f8      	b.n	5ae06 <k_calloc+0x14>

0005ae14 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   5ae14:	4770      	bx	lr

0005ae16 <abs>:
   5ae16:	2800      	cmp	r0, #0
   5ae18:	bfb8      	it	lt
   5ae1a:	4240      	neglt	r0, r0
   5ae1c:	4770      	bx	lr

0005ae1e <memchr>:
   5ae1e:	b2c9      	uxtb	r1, r1
   5ae20:	4603      	mov	r3, r0
   5ae22:	4402      	add	r2, r0
   5ae24:	b510      	push	{r4, lr}
   5ae26:	4293      	cmp	r3, r2
   5ae28:	4618      	mov	r0, r3
   5ae2a:	d101      	bne.n	5ae30 <memchr+0x12>
   5ae2c:	2000      	movs	r0, #0
   5ae2e:	e003      	b.n	5ae38 <memchr+0x1a>
   5ae30:	7804      	ldrb	r4, [r0, #0]
   5ae32:	3301      	adds	r3, #1
   5ae34:	428c      	cmp	r4, r1
   5ae36:	d1f6      	bne.n	5ae26 <memchr+0x8>
   5ae38:	bd10      	pop	{r4, pc}

0005ae3a <memcmp>:
   5ae3a:	3901      	subs	r1, #1
   5ae3c:	4402      	add	r2, r0
   5ae3e:	b510      	push	{r4, lr}
   5ae40:	4290      	cmp	r0, r2
   5ae42:	d101      	bne.n	5ae48 <memcmp+0xe>
   5ae44:	2000      	movs	r0, #0
   5ae46:	e005      	b.n	5ae54 <memcmp+0x1a>
   5ae48:	7803      	ldrb	r3, [r0, #0]
   5ae4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   5ae4e:	42a3      	cmp	r3, r4
   5ae50:	d001      	beq.n	5ae56 <memcmp+0x1c>
   5ae52:	1b18      	subs	r0, r3, r4
   5ae54:	bd10      	pop	{r4, pc}
   5ae56:	3001      	adds	r0, #1
   5ae58:	e7f2      	b.n	5ae40 <memcmp+0x6>

0005ae5a <memcpy>:
   5ae5a:	440a      	add	r2, r1
   5ae5c:	1e43      	subs	r3, r0, #1
   5ae5e:	4291      	cmp	r1, r2
   5ae60:	d100      	bne.n	5ae64 <memcpy+0xa>
   5ae62:	4770      	bx	lr
   5ae64:	b510      	push	{r4, lr}
   5ae66:	f811 4b01 	ldrb.w	r4, [r1], #1
   5ae6a:	4291      	cmp	r1, r2
   5ae6c:	f803 4f01 	strb.w	r4, [r3, #1]!
   5ae70:	d1f9      	bne.n	5ae66 <memcpy+0xc>
   5ae72:	bd10      	pop	{r4, pc}

0005ae74 <__memcpy_chk>:
   5ae74:	429a      	cmp	r2, r3
   5ae76:	b508      	push	{r3, lr}
   5ae78:	d901      	bls.n	5ae7e <__memcpy_chk+0xa>
   5ae7a:	f7eb fe23 	bl	46ac4 <__chk_fail>
   5ae7e:	4281      	cmp	r1, r0
   5ae80:	d804      	bhi.n	5ae8c <__memcpy_chk+0x18>
   5ae82:	188b      	adds	r3, r1, r2
   5ae84:	4298      	cmp	r0, r3
   5ae86:	d3f8      	bcc.n	5ae7a <__memcpy_chk+0x6>
   5ae88:	4281      	cmp	r1, r0
   5ae8a:	d102      	bne.n	5ae92 <__memcpy_chk+0x1e>
   5ae8c:	1883      	adds	r3, r0, r2
   5ae8e:	4299      	cmp	r1, r3
   5ae90:	d3f3      	bcc.n	5ae7a <__memcpy_chk+0x6>
   5ae92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   5ae96:	f7ff bfe0 	b.w	5ae5a <memcpy>

0005ae9a <memmove>:
   5ae9a:	4288      	cmp	r0, r1
   5ae9c:	b510      	push	{r4, lr}
   5ae9e:	eb01 0402 	add.w	r4, r1, r2
   5aea2:	d902      	bls.n	5aeaa <memmove+0x10>
   5aea4:	4284      	cmp	r4, r0
   5aea6:	4623      	mov	r3, r4
   5aea8:	d807      	bhi.n	5aeba <memmove+0x20>
   5aeaa:	1e43      	subs	r3, r0, #1
   5aeac:	42a1      	cmp	r1, r4
   5aeae:	d008      	beq.n	5aec2 <memmove+0x28>
   5aeb0:	f811 2b01 	ldrb.w	r2, [r1], #1
   5aeb4:	f803 2f01 	strb.w	r2, [r3, #1]!
   5aeb8:	e7f8      	b.n	5aeac <memmove+0x12>
   5aeba:	4402      	add	r2, r0
   5aebc:	4601      	mov	r1, r0
   5aebe:	428a      	cmp	r2, r1
   5aec0:	d100      	bne.n	5aec4 <memmove+0x2a>
   5aec2:	bd10      	pop	{r4, pc}
   5aec4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   5aec8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   5aecc:	e7f7      	b.n	5aebe <memmove+0x24>

0005aece <memset>:
   5aece:	4402      	add	r2, r0
   5aed0:	4603      	mov	r3, r0
   5aed2:	4293      	cmp	r3, r2
   5aed4:	d100      	bne.n	5aed8 <memset+0xa>
   5aed6:	4770      	bx	lr
   5aed8:	f803 1b01 	strb.w	r1, [r3], #1
   5aedc:	e7f9      	b.n	5aed2 <memset+0x4>

0005aede <_calloc_r>:
   5aede:	b538      	push	{r3, r4, r5, lr}
   5aee0:	fb02 f501 	mul.w	r5, r2, r1
   5aee4:	4629      	mov	r1, r5
   5aee6:	f7f8 fa9f 	bl	53428 <_malloc_r>
   5aeea:	4604      	mov	r4, r0
   5aeec:	b118      	cbz	r0, 5aef6 <_calloc_r+0x18>
   5aeee:	462a      	mov	r2, r5
   5aef0:	2100      	movs	r1, #0
   5aef2:	f7ff ffec 	bl	5aece <memset>
   5aef6:	4620      	mov	r0, r4
   5aef8:	bd38      	pop	{r3, r4, r5, pc}

0005aefa <__cvt>:
   5aefa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5aefe:	b085      	sub	sp, #20
   5af00:	460c      	mov	r4, r1
   5af02:	4690      	mov	r8, r2
   5af04:	4619      	mov	r1, r3
   5af06:	ec57 6b10 	vmov	r6, r7, d0
   5af0a:	2f00      	cmp	r7, #0
   5af0c:	463b      	mov	r3, r7
   5af0e:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   5af12:	bfbc      	itt	lt
   5af14:	f107 4300 	addlt.w	r3, r7, #2147483648	; 0x80000000
   5af18:	4632      	movlt	r2, r6
   5af1a:	f02b 0a20 	bic.w	sl, fp, #32
   5af1e:	bfaf      	iteee	ge
   5af20:	2300      	movge	r3, #0
   5af22:	461f      	movlt	r7, r3
   5af24:	4616      	movlt	r6, r2
   5af26:	232d      	movlt	r3, #45	; 0x2d
   5af28:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   5af2c:	700b      	strb	r3, [r1, #0]
   5af2e:	d005      	beq.n	5af3c <__cvt+0x42>
   5af30:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   5af34:	d100      	bne.n	5af38 <__cvt+0x3e>
   5af36:	3401      	adds	r4, #1
   5af38:	2102      	movs	r1, #2
   5af3a:	e000      	b.n	5af3e <__cvt+0x44>
   5af3c:	2103      	movs	r1, #3
   5af3e:	ab03      	add	r3, sp, #12
   5af40:	4622      	mov	r2, r4
   5af42:	9301      	str	r3, [sp, #4]
   5af44:	ab02      	add	r3, sp, #8
   5af46:	ec47 6b10 	vmov	d0, r6, r7
   5af4a:	9300      	str	r3, [sp, #0]
   5af4c:	464b      	mov	r3, r9
   5af4e:	f7e6 ff5b 	bl	41e08 <_dtoa_r>
   5af52:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   5af56:	4605      	mov	r5, r0
   5af58:	d119      	bne.n	5af8e <__cvt+0x94>
   5af5a:	f018 0f01 	tst.w	r8, #1
   5af5e:	d00e      	beq.n	5af7e <__cvt+0x84>
   5af60:	eb05 0804 	add.w	r8, r5, r4
   5af64:	2200      	movs	r2, #0
   5af66:	2300      	movs	r3, #0
   5af68:	4630      	mov	r0, r6
   5af6a:	4639      	mov	r1, r7
   5af6c:	f7e5 fd10 	bl	40990 <__aeabi_dcmpeq>
   5af70:	b108      	cbz	r0, 5af76 <__cvt+0x7c>
   5af72:	f8cd 800c 	str.w	r8, [sp, #12]
   5af76:	2230      	movs	r2, #48	; 0x30
   5af78:	9b03      	ldr	r3, [sp, #12]
   5af7a:	4543      	cmp	r3, r8
   5af7c:	d321      	bcc.n	5afc2 <__cvt+0xc8>
   5af7e:	9b03      	ldr	r3, [sp, #12]
   5af80:	4628      	mov	r0, r5
   5af82:	9a10      	ldr	r2, [sp, #64]	; 0x40
   5af84:	1b5b      	subs	r3, r3, r5
   5af86:	6013      	str	r3, [r2, #0]
   5af88:	b005      	add	sp, #20
   5af8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5af8e:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   5af92:	d0e2      	beq.n	5af5a <__cvt+0x60>
   5af94:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   5af98:	eb00 0804 	add.w	r8, r0, r4
   5af9c:	d1e2      	bne.n	5af64 <__cvt+0x6a>
   5af9e:	7803      	ldrb	r3, [r0, #0]
   5afa0:	2b30      	cmp	r3, #48	; 0x30
   5afa2:	d10a      	bne.n	5afba <__cvt+0xc0>
   5afa4:	2200      	movs	r2, #0
   5afa6:	2300      	movs	r3, #0
   5afa8:	4630      	mov	r0, r6
   5afaa:	4639      	mov	r1, r7
   5afac:	f7e5 fcf0 	bl	40990 <__aeabi_dcmpeq>
   5afb0:	b918      	cbnz	r0, 5afba <__cvt+0xc0>
   5afb2:	f1c4 0401 	rsb	r4, r4, #1
   5afb6:	f8c9 4000 	str.w	r4, [r9]
   5afba:	f8d9 3000 	ldr.w	r3, [r9]
   5afbe:	4498      	add	r8, r3
   5afc0:	e7d0      	b.n	5af64 <__cvt+0x6a>
   5afc2:	1c59      	adds	r1, r3, #1
   5afc4:	9103      	str	r1, [sp, #12]
   5afc6:	701a      	strb	r2, [r3, #0]
   5afc8:	e7d6      	b.n	5af78 <__cvt+0x7e>

0005afca <__exponent>:
   5afca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   5afcc:	2900      	cmp	r1, #0
   5afce:	7002      	strb	r2, [r0, #0]
   5afd0:	bfba      	itte	lt
   5afd2:	4249      	neglt	r1, r1
   5afd4:	232d      	movlt	r3, #45	; 0x2d
   5afd6:	232b      	movge	r3, #43	; 0x2b
   5afd8:	2909      	cmp	r1, #9
   5afda:	7043      	strb	r3, [r0, #1]
   5afdc:	dd28      	ble.n	5b030 <__exponent+0x66>
   5afde:	f10d 0307 	add.w	r3, sp, #7
   5afe2:	270a      	movs	r7, #10
   5afe4:	461d      	mov	r5, r3
   5afe6:	461a      	mov	r2, r3
   5afe8:	3b01      	subs	r3, #1
   5afea:	fbb1 f6f7 	udiv	r6, r1, r7
   5afee:	fb07 1416 	mls	r4, r7, r6, r1
   5aff2:	3430      	adds	r4, #48	; 0x30
   5aff4:	f802 4c01 	strb.w	r4, [r2, #-1]
   5aff8:	460c      	mov	r4, r1
   5affa:	4631      	mov	r1, r6
   5affc:	2c63      	cmp	r4, #99	; 0x63
   5affe:	dcf2      	bgt.n	5afe6 <__exponent+0x1c>
   5b000:	3130      	adds	r1, #48	; 0x30
   5b002:	1e94      	subs	r4, r2, #2
   5b004:	f803 1c01 	strb.w	r1, [r3, #-1]
   5b008:	1c41      	adds	r1, r0, #1
   5b00a:	4623      	mov	r3, r4
   5b00c:	42ab      	cmp	r3, r5
   5b00e:	d30a      	bcc.n	5b026 <__exponent+0x5c>
   5b010:	f10d 0309 	add.w	r3, sp, #9
   5b014:	1a9b      	subs	r3, r3, r2
   5b016:	42ac      	cmp	r4, r5
   5b018:	bf88      	it	hi
   5b01a:	2300      	movhi	r3, #0
   5b01c:	3302      	adds	r3, #2
   5b01e:	4403      	add	r3, r0
   5b020:	1a18      	subs	r0, r3, r0
   5b022:	b003      	add	sp, #12
   5b024:	bdf0      	pop	{r4, r5, r6, r7, pc}
   5b026:	f813 6b01 	ldrb.w	r6, [r3], #1
   5b02a:	f801 6f01 	strb.w	r6, [r1, #1]!
   5b02e:	e7ed      	b.n	5b00c <__exponent+0x42>
   5b030:	2330      	movs	r3, #48	; 0x30
   5b032:	3130      	adds	r1, #48	; 0x30
   5b034:	7083      	strb	r3, [r0, #2]
   5b036:	1d03      	adds	r3, r0, #4
   5b038:	70c1      	strb	r1, [r0, #3]
   5b03a:	e7f1      	b.n	5b020 <__exponent+0x56>

0005b03c <_printf_common>:
   5b03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   5b040:	4616      	mov	r6, r2
   5b042:	4698      	mov	r8, r3
   5b044:	688a      	ldr	r2, [r1, #8]
   5b046:	4607      	mov	r7, r0
   5b048:	690b      	ldr	r3, [r1, #16]
   5b04a:	460c      	mov	r4, r1
   5b04c:	f8dd 9020 	ldr.w	r9, [sp, #32]
   5b050:	4293      	cmp	r3, r2
   5b052:	bfb8      	it	lt
   5b054:	4613      	movlt	r3, r2
   5b056:	6033      	str	r3, [r6, #0]
   5b058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   5b05c:	b10a      	cbz	r2, 5b062 <_printf_common+0x26>
   5b05e:	3301      	adds	r3, #1
   5b060:	6033      	str	r3, [r6, #0]
   5b062:	6823      	ldr	r3, [r4, #0]
   5b064:	0699      	lsls	r1, r3, #26
   5b066:	bf42      	ittt	mi
   5b068:	6833      	ldrmi	r3, [r6, #0]
   5b06a:	3302      	addmi	r3, #2
   5b06c:	6033      	strmi	r3, [r6, #0]
   5b06e:	6825      	ldr	r5, [r4, #0]
   5b070:	f015 0506 	ands.w	r5, r5, #6
   5b074:	d106      	bne.n	5b084 <_printf_common+0x48>
   5b076:	f104 0a19 	add.w	sl, r4, #25
   5b07a:	68e3      	ldr	r3, [r4, #12]
   5b07c:	6832      	ldr	r2, [r6, #0]
   5b07e:	1a9b      	subs	r3, r3, r2
   5b080:	42ab      	cmp	r3, r5
   5b082:	dc2b      	bgt.n	5b0dc <_printf_common+0xa0>
   5b084:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   5b088:	6822      	ldr	r2, [r4, #0]
   5b08a:	3b00      	subs	r3, #0
   5b08c:	bf18      	it	ne
   5b08e:	2301      	movne	r3, #1
   5b090:	0692      	lsls	r2, r2, #26
   5b092:	d430      	bmi.n	5b0f6 <_printf_common+0xba>
   5b094:	f104 0243 	add.w	r2, r4, #67	; 0x43
   5b098:	4641      	mov	r1, r8
   5b09a:	4638      	mov	r0, r7
   5b09c:	47c8      	blx	r9
   5b09e:	3001      	adds	r0, #1
   5b0a0:	d023      	beq.n	5b0ea <_printf_common+0xae>
   5b0a2:	6823      	ldr	r3, [r4, #0]
   5b0a4:	341a      	adds	r4, #26
   5b0a6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   5b0aa:	f003 0306 	and.w	r3, r3, #6
   5b0ae:	2b04      	cmp	r3, #4
   5b0b0:	bf0a      	itet	eq
   5b0b2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   5b0b6:	2500      	movne	r5, #0
   5b0b8:	6833      	ldreq	r3, [r6, #0]
   5b0ba:	f04f 0600 	mov.w	r6, #0
   5b0be:	bf08      	it	eq
   5b0c0:	1aed      	subeq	r5, r5, r3
   5b0c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
   5b0c6:	bf08      	it	eq
   5b0c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   5b0cc:	4293      	cmp	r3, r2
   5b0ce:	bfc4      	itt	gt
   5b0d0:	1a9b      	subgt	r3, r3, r2
   5b0d2:	18ed      	addgt	r5, r5, r3
   5b0d4:	42b5      	cmp	r5, r6
   5b0d6:	d11a      	bne.n	5b10e <_printf_common+0xd2>
   5b0d8:	2000      	movs	r0, #0
   5b0da:	e008      	b.n	5b0ee <_printf_common+0xb2>
   5b0dc:	2301      	movs	r3, #1
   5b0de:	4652      	mov	r2, sl
   5b0e0:	4641      	mov	r1, r8
   5b0e2:	4638      	mov	r0, r7
   5b0e4:	47c8      	blx	r9
   5b0e6:	3001      	adds	r0, #1
   5b0e8:	d103      	bne.n	5b0f2 <_printf_common+0xb6>
   5b0ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   5b0f2:	3501      	adds	r5, #1
   5b0f4:	e7c1      	b.n	5b07a <_printf_common+0x3e>
   5b0f6:	18e1      	adds	r1, r4, r3
   5b0f8:	1c5a      	adds	r2, r3, #1
   5b0fa:	2030      	movs	r0, #48	; 0x30
   5b0fc:	3302      	adds	r3, #2
   5b0fe:	4422      	add	r2, r4
   5b100:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   5b104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   5b108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   5b10c:	e7c2      	b.n	5b094 <_printf_common+0x58>
   5b10e:	2301      	movs	r3, #1
   5b110:	4622      	mov	r2, r4
   5b112:	4641      	mov	r1, r8
   5b114:	4638      	mov	r0, r7
   5b116:	47c8      	blx	r9
   5b118:	3001      	adds	r0, #1
   5b11a:	d0e6      	beq.n	5b0ea <_printf_common+0xae>
   5b11c:	3601      	adds	r6, #1
   5b11e:	e7d9      	b.n	5b0d4 <_printf_common+0x98>

0005b120 <__sprintf_chk>:
   5b120:	b408      	push	{r3}
   5b122:	b517      	push	{r0, r1, r2, r4, lr}
   5b124:	ab05      	add	r3, sp, #20
   5b126:	1e14      	subs	r4, r2, #0
   5b128:	f853 1b04 	ldr.w	r1, [r3], #4
   5b12c:	9301      	str	r3, [sp, #4]
   5b12e:	da07      	bge.n	5b140 <__sprintf_chk+0x20>
   5b130:	461a      	mov	r2, r3
   5b132:	f7f8 ff0b 	bl	53f4c <vsiprintf>
   5b136:	b003      	add	sp, #12
   5b138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   5b13c:	b001      	add	sp, #4
   5b13e:	4770      	bx	lr
   5b140:	460a      	mov	r2, r1
   5b142:	4621      	mov	r1, r4
   5b144:	f7f8 fede 	bl	53f04 <vsniprintf>
   5b148:	2800      	cmp	r0, #0
   5b14a:	dbf4      	blt.n	5b136 <__sprintf_chk+0x16>
   5b14c:	42a0      	cmp	r0, r4
   5b14e:	d3f2      	bcc.n	5b136 <__sprintf_chk+0x16>
   5b150:	f7eb fcb8 	bl	46ac4 <__chk_fail>

0005b154 <__sread>:
   5b154:	b510      	push	{r4, lr}
   5b156:	460c      	mov	r4, r1
   5b158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   5b15c:	f7f9 fe5e 	bl	54e1c <_read_r>
   5b160:	2800      	cmp	r0, #0
   5b162:	bfab      	itete	ge
   5b164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   5b166:	89a3      	ldrhlt	r3, [r4, #12]
   5b168:	181b      	addge	r3, r3, r0
   5b16a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   5b16e:	bfac      	ite	ge
   5b170:	6563      	strge	r3, [r4, #84]	; 0x54
   5b172:	81a3      	strhlt	r3, [r4, #12]
   5b174:	bd10      	pop	{r4, pc}

0005b176 <__seofread>:
   5b176:	2000      	movs	r0, #0
   5b178:	4770      	bx	lr

0005b17a <__swrite>:
   5b17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   5b17e:	461f      	mov	r7, r3
   5b180:	898b      	ldrh	r3, [r1, #12]
   5b182:	4605      	mov	r5, r0
   5b184:	460c      	mov	r4, r1
   5b186:	05db      	lsls	r3, r3, #23
   5b188:	4616      	mov	r6, r2
   5b18a:	d505      	bpl.n	5b198 <__swrite+0x1e>
   5b18c:	2302      	movs	r3, #2
   5b18e:	2200      	movs	r2, #0
   5b190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   5b194:	f7f8 ff38 	bl	54008 <_lseek_r>
   5b198:	89a3      	ldrh	r3, [r4, #12]
   5b19a:	4632      	mov	r2, r6
   5b19c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   5b1a0:	4628      	mov	r0, r5
   5b1a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   5b1a6:	81a3      	strh	r3, [r4, #12]
   5b1a8:	463b      	mov	r3, r7
   5b1aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   5b1ae:	f7f8 bf05 	b.w	53fbc <_write_r>

0005b1b2 <__sseek>:
   5b1b2:	b510      	push	{r4, lr}
   5b1b4:	460c      	mov	r4, r1
   5b1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   5b1ba:	f7f8 ff25 	bl	54008 <_lseek_r>
   5b1be:	1c43      	adds	r3, r0, #1
   5b1c0:	89a3      	ldrh	r3, [r4, #12]
   5b1c2:	bf15      	itete	ne
   5b1c4:	6560      	strne	r0, [r4, #84]	; 0x54
   5b1c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   5b1ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   5b1ce:	81a3      	strheq	r3, [r4, #12]
   5b1d0:	bf18      	it	ne
   5b1d2:	81a3      	strhne	r3, [r4, #12]
   5b1d4:	bd10      	pop	{r4, pc}

0005b1d6 <__sclose>:
   5b1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   5b1da:	f7f8 bf01 	b.w	53fe0 <_close_r>

0005b1de <__strcat_chk>:
   5b1de:	b538      	push	{r3, r4, r5, lr}
   5b1e0:	4604      	mov	r4, r0
   5b1e2:	4623      	mov	r3, r4
   5b1e4:	f814 5b01 	ldrb.w	r5, [r4], #1
   5b1e8:	b935      	cbnz	r5, 5b1f8 <__strcat_chk+0x1a>
   5b1ea:	3901      	subs	r1, #1
   5b1ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   5b1f0:	b93c      	cbnz	r4, 5b202 <__strcat_chk+0x24>
   5b1f2:	b112      	cbz	r2, 5b1fa <__strcat_chk+0x1c>
   5b1f4:	701c      	strb	r4, [r3, #0]
   5b1f6:	bd38      	pop	{r3, r4, r5, pc}
   5b1f8:	b90a      	cbnz	r2, 5b1fe <__strcat_chk+0x20>
   5b1fa:	f7eb fc63 	bl	46ac4 <__chk_fail>
   5b1fe:	3a01      	subs	r2, #1
   5b200:	e7ef      	b.n	5b1e2 <__strcat_chk+0x4>
   5b202:	2a00      	cmp	r2, #0
   5b204:	d0f9      	beq.n	5b1fa <__strcat_chk+0x1c>
   5b206:	3a01      	subs	r2, #1
   5b208:	f803 4b01 	strb.w	r4, [r3], #1
   5b20c:	e7ee      	b.n	5b1ec <__strcat_chk+0xe>

0005b20e <strchr>:
   5b20e:	b2c9      	uxtb	r1, r1
   5b210:	4603      	mov	r3, r0
   5b212:	4618      	mov	r0, r3
   5b214:	f813 2b01 	ldrb.w	r2, [r3], #1
   5b218:	b112      	cbz	r2, 5b220 <strchr+0x12>
   5b21a:	428a      	cmp	r2, r1
   5b21c:	d1f9      	bne.n	5b212 <strchr+0x4>
   5b21e:	4770      	bx	lr
   5b220:	2900      	cmp	r1, #0
   5b222:	bf18      	it	ne
   5b224:	2000      	movne	r0, #0
   5b226:	4770      	bx	lr

0005b228 <strcpy>:
   5b228:	4603      	mov	r3, r0
   5b22a:	f811 2b01 	ldrb.w	r2, [r1], #1
   5b22e:	f803 2b01 	strb.w	r2, [r3], #1
   5b232:	2a00      	cmp	r2, #0
   5b234:	d1f9      	bne.n	5b22a <strcpy+0x2>
   5b236:	4770      	bx	lr

0005b238 <__strcpy_chk>:
   5b238:	b570      	push	{r4, r5, r6, lr}
   5b23a:	4605      	mov	r5, r0
   5b23c:	4608      	mov	r0, r1
   5b23e:	4616      	mov	r6, r2
   5b240:	460c      	mov	r4, r1
   5b242:	f7e5 fdd7 	bl	40df4 <strlen>
   5b246:	1c42      	adds	r2, r0, #1
   5b248:	42b2      	cmp	r2, r6
   5b24a:	d901      	bls.n	5b250 <__strcpy_chk+0x18>
   5b24c:	f7eb fc3a 	bl	46ac4 <__chk_fail>
   5b250:	42ac      	cmp	r4, r5
   5b252:	d804      	bhi.n	5b25e <__strcpy_chk+0x26>
   5b254:	18a3      	adds	r3, r4, r2
   5b256:	429d      	cmp	r5, r3
   5b258:	d3f8      	bcc.n	5b24c <__strcpy_chk+0x14>
   5b25a:	42ac      	cmp	r4, r5
   5b25c:	d102      	bne.n	5b264 <__strcpy_chk+0x2c>
   5b25e:	18ab      	adds	r3, r5, r2
   5b260:	429c      	cmp	r4, r3
   5b262:	d3f3      	bcc.n	5b24c <__strcpy_chk+0x14>
   5b264:	4621      	mov	r1, r4
   5b266:	4628      	mov	r0, r5
   5b268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   5b26c:	f7ff bdf5 	b.w	5ae5a <memcpy>

0005b270 <strncmp>:
   5b270:	b510      	push	{r4, lr}
   5b272:	b16a      	cbz	r2, 5b290 <strncmp+0x20>
   5b274:	3901      	subs	r1, #1
   5b276:	1884      	adds	r4, r0, r2
   5b278:	f810 2b01 	ldrb.w	r2, [r0], #1
   5b27c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   5b280:	429a      	cmp	r2, r3
   5b282:	d103      	bne.n	5b28c <strncmp+0x1c>
   5b284:	42a0      	cmp	r0, r4
   5b286:	d001      	beq.n	5b28c <strncmp+0x1c>
   5b288:	2a00      	cmp	r2, #0
   5b28a:	d1f5      	bne.n	5b278 <strncmp+0x8>
   5b28c:	1ad0      	subs	r0, r2, r3
   5b28e:	bd10      	pop	{r4, pc}
   5b290:	4610      	mov	r0, r2
   5b292:	e7fc      	b.n	5b28e <strncmp+0x1e>

0005b294 <strncpy>:
   5b294:	3901      	subs	r1, #1
   5b296:	4603      	mov	r3, r0
   5b298:	b510      	push	{r4, lr}
   5b29a:	b132      	cbz	r2, 5b2aa <strncpy+0x16>
   5b29c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   5b2a0:	3a01      	subs	r2, #1
   5b2a2:	f803 4b01 	strb.w	r4, [r3], #1
   5b2a6:	2c00      	cmp	r4, #0
   5b2a8:	d1f7      	bne.n	5b29a <strncpy+0x6>
   5b2aa:	441a      	add	r2, r3
   5b2ac:	2100      	movs	r1, #0
   5b2ae:	4293      	cmp	r3, r2
   5b2b0:	d100      	bne.n	5b2b4 <strncpy+0x20>
   5b2b2:	bd10      	pop	{r4, pc}
   5b2b4:	f803 1b01 	strb.w	r1, [r3], #1
   5b2b8:	e7f9      	b.n	5b2ae <strncpy+0x1a>

0005b2ba <strnlen>:
   5b2ba:	4602      	mov	r2, r0
   5b2bc:	4401      	add	r1, r0
   5b2be:	b510      	push	{r4, lr}
   5b2c0:	428a      	cmp	r2, r1
   5b2c2:	4613      	mov	r3, r2
   5b2c4:	d003      	beq.n	5b2ce <strnlen+0x14>
   5b2c6:	781c      	ldrb	r4, [r3, #0]
   5b2c8:	3201      	adds	r2, #1
   5b2ca:	2c00      	cmp	r4, #0
   5b2cc:	d1f8      	bne.n	5b2c0 <strnlen+0x6>
   5b2ce:	1a18      	subs	r0, r3, r0
   5b2d0:	bd10      	pop	{r4, pc}

0005b2d2 <strstr>:
   5b2d2:	780a      	ldrb	r2, [r1, #0]
   5b2d4:	b570      	push	{r4, r5, r6, lr}
   5b2d6:	b96a      	cbnz	r2, 5b2f4 <strstr+0x22>
   5b2d8:	bd70      	pop	{r4, r5, r6, pc}
   5b2da:	429a      	cmp	r2, r3
   5b2dc:	d109      	bne.n	5b2f2 <strstr+0x20>
   5b2de:	460c      	mov	r4, r1
   5b2e0:	4605      	mov	r5, r0
   5b2e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   5b2e6:	2b00      	cmp	r3, #0
   5b2e8:	d0f6      	beq.n	5b2d8 <strstr+0x6>
   5b2ea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   5b2ee:	429e      	cmp	r6, r3
   5b2f0:	d0f7      	beq.n	5b2e2 <strstr+0x10>
   5b2f2:	3001      	adds	r0, #1
   5b2f4:	7803      	ldrb	r3, [r0, #0]
   5b2f6:	2b00      	cmp	r3, #0
   5b2f8:	d1ef      	bne.n	5b2da <strstr+0x8>
   5b2fa:	4618      	mov	r0, r3
   5b2fc:	e7ec      	b.n	5b2d8 <strstr+0x6>

0005b2fe <_strtol_r>:
   5b2fe:	f7f8 bc5f 	b.w	53bc0 <_strtol_l.constprop.0>

0005b302 <_strtoul_r>:
   5b302:	f7f8 bd83 	b.w	53e0c <_strtoul_l.constprop.0>

0005b306 <_vsniprintf_r>:
   5b306:	b530      	push	{r4, r5, lr}
   5b308:	4614      	mov	r4, r2
   5b30a:	b09b      	sub	sp, #108	; 0x6c
   5b30c:	4605      	mov	r5, r0
   5b30e:	461a      	mov	r2, r3
   5b310:	2c00      	cmp	r4, #0
   5b312:	da05      	bge.n	5b320 <_vsniprintf_r+0x1a>
   5b314:	238b      	movs	r3, #139	; 0x8b
   5b316:	6003      	str	r3, [r0, #0]
   5b318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b31c:	b01b      	add	sp, #108	; 0x6c
   5b31e:	bd30      	pop	{r4, r5, pc}
   5b320:	f44f 7302 	mov.w	r3, #520	; 0x208
   5b324:	9100      	str	r1, [sp, #0]
   5b326:	9104      	str	r1, [sp, #16]
   5b328:	4669      	mov	r1, sp
   5b32a:	f8ad 300c 	strh.w	r3, [sp, #12]
   5b32e:	bf14      	ite	ne
   5b330:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   5b334:	4623      	moveq	r3, r4
   5b336:	9302      	str	r3, [sp, #8]
   5b338:	9305      	str	r3, [sp, #20]
   5b33a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   5b33e:	f8ad 300e 	strh.w	r3, [sp, #14]
   5b342:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   5b344:	f7f9 f99e 	bl	54684 <_svfiprintf_r>
   5b348:	1c43      	adds	r3, r0, #1
   5b34a:	bfbc      	itt	lt
   5b34c:	238b      	movlt	r3, #139	; 0x8b
   5b34e:	602b      	strlt	r3, [r5, #0]
   5b350:	2c00      	cmp	r4, #0
   5b352:	d0e3      	beq.n	5b31c <_vsniprintf_r+0x16>
   5b354:	9b00      	ldr	r3, [sp, #0]
   5b356:	2200      	movs	r2, #0
   5b358:	701a      	strb	r2, [r3, #0]
   5b35a:	e7df      	b.n	5b31c <_vsniprintf_r+0x16>

0005b35c <quorem>:
   5b35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5b360:	6903      	ldr	r3, [r0, #16]
   5b362:	4607      	mov	r7, r0
   5b364:	690c      	ldr	r4, [r1, #16]
   5b366:	42a3      	cmp	r3, r4
   5b368:	f2c0 8083 	blt.w	5b472 <quorem+0x116>
   5b36c:	3c01      	subs	r4, #1
   5b36e:	f100 0514 	add.w	r5, r0, #20
   5b372:	f101 0814 	add.w	r8, r1, #20
   5b376:	00a3      	lsls	r3, r4, #2
   5b378:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   5b37c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   5b380:	9300      	str	r3, [sp, #0]
   5b382:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   5b386:	9301      	str	r3, [sp, #4]
   5b388:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   5b38c:	3301      	adds	r3, #1
   5b38e:	429a      	cmp	r2, r3
   5b390:	fbb2 f6f3 	udiv	r6, r2, r3
   5b394:	d331      	bcc.n	5b3fa <quorem+0x9e>
   5b396:	f04f 0a00 	mov.w	sl, #0
   5b39a:	46c4      	mov	ip, r8
   5b39c:	46ae      	mov	lr, r5
   5b39e:	46d3      	mov	fp, sl
   5b3a0:	f85c 3b04 	ldr.w	r3, [ip], #4
   5b3a4:	b298      	uxth	r0, r3
   5b3a6:	45e1      	cmp	r9, ip
   5b3a8:	ea4f 4313 	mov.w	r3, r3, lsr #16
   5b3ac:	fb06 a000 	mla	r0, r6, r0, sl
   5b3b0:	ea4f 4210 	mov.w	r2, r0, lsr #16
   5b3b4:	b280      	uxth	r0, r0
   5b3b6:	fb06 2303 	mla	r3, r6, r3, r2
   5b3ba:	f8de 2000 	ldr.w	r2, [lr]
   5b3be:	b292      	uxth	r2, r2
   5b3c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   5b3c4:	eba2 0200 	sub.w	r2, r2, r0
   5b3c8:	b29b      	uxth	r3, r3
   5b3ca:	f8de 0000 	ldr.w	r0, [lr]
   5b3ce:	445a      	add	r2, fp
   5b3d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   5b3d4:	b292      	uxth	r2, r2
   5b3d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   5b3da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   5b3de:	ea4f 4b23 	mov.w	fp, r3, asr #16
   5b3e2:	f84e 2b04 	str.w	r2, [lr], #4
   5b3e6:	d2db      	bcs.n	5b3a0 <quorem+0x44>
   5b3e8:	9b00      	ldr	r3, [sp, #0]
   5b3ea:	58eb      	ldr	r3, [r5, r3]
   5b3ec:	b92b      	cbnz	r3, 5b3fa <quorem+0x9e>
   5b3ee:	9b01      	ldr	r3, [sp, #4]
   5b3f0:	3b04      	subs	r3, #4
   5b3f2:	429d      	cmp	r5, r3
   5b3f4:	461a      	mov	r2, r3
   5b3f6:	d330      	bcc.n	5b45a <quorem+0xfe>
   5b3f8:	613c      	str	r4, [r7, #16]
   5b3fa:	4638      	mov	r0, r7
   5b3fc:	f000 f89c 	bl	5b538 <__mcmp>
   5b400:	2800      	cmp	r0, #0
   5b402:	db26      	blt.n	5b452 <quorem+0xf6>
   5b404:	4629      	mov	r1, r5
   5b406:	2000      	movs	r0, #0
   5b408:	f858 2b04 	ldr.w	r2, [r8], #4
   5b40c:	f8d1 c000 	ldr.w	ip, [r1]
   5b410:	fa1f fe82 	uxth.w	lr, r2
   5b414:	45c1      	cmp	r9, r8
   5b416:	fa1f f38c 	uxth.w	r3, ip
   5b41a:	ea4f 4212 	mov.w	r2, r2, lsr #16
   5b41e:	eba3 030e 	sub.w	r3, r3, lr
   5b422:	4403      	add	r3, r0
   5b424:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   5b428:	b29b      	uxth	r3, r3
   5b42a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   5b42e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   5b432:	ea4f 4022 	mov.w	r0, r2, asr #16
   5b436:	f841 3b04 	str.w	r3, [r1], #4
   5b43a:	d2e5      	bcs.n	5b408 <quorem+0xac>
   5b43c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   5b440:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   5b444:	b922      	cbnz	r2, 5b450 <quorem+0xf4>
   5b446:	3b04      	subs	r3, #4
   5b448:	429d      	cmp	r5, r3
   5b44a:	461a      	mov	r2, r3
   5b44c:	d30b      	bcc.n	5b466 <quorem+0x10a>
   5b44e:	613c      	str	r4, [r7, #16]
   5b450:	3601      	adds	r6, #1
   5b452:	4630      	mov	r0, r6
   5b454:	b003      	add	sp, #12
   5b456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5b45a:	6812      	ldr	r2, [r2, #0]
   5b45c:	3b04      	subs	r3, #4
   5b45e:	2a00      	cmp	r2, #0
   5b460:	d1ca      	bne.n	5b3f8 <quorem+0x9c>
   5b462:	3c01      	subs	r4, #1
   5b464:	e7c5      	b.n	5b3f2 <quorem+0x96>
   5b466:	6812      	ldr	r2, [r2, #0]
   5b468:	3b04      	subs	r3, #4
   5b46a:	2a00      	cmp	r2, #0
   5b46c:	d1ef      	bne.n	5b44e <quorem+0xf2>
   5b46e:	3c01      	subs	r4, #1
   5b470:	e7ea      	b.n	5b448 <quorem+0xec>
   5b472:	2000      	movs	r0, #0
   5b474:	e7ee      	b.n	5b454 <quorem+0xf8>

0005b476 <__ascii_mbtowc>:
   5b476:	b082      	sub	sp, #8
   5b478:	b901      	cbnz	r1, 5b47c <__ascii_mbtowc+0x6>
   5b47a:	a901      	add	r1, sp, #4
   5b47c:	b142      	cbz	r2, 5b490 <__ascii_mbtowc+0x1a>
   5b47e:	b14b      	cbz	r3, 5b494 <__ascii_mbtowc+0x1e>
   5b480:	7813      	ldrb	r3, [r2, #0]
   5b482:	600b      	str	r3, [r1, #0]
   5b484:	7812      	ldrb	r2, [r2, #0]
   5b486:	1e10      	subs	r0, r2, #0
   5b488:	bf18      	it	ne
   5b48a:	2001      	movne	r0, #1
   5b48c:	b002      	add	sp, #8
   5b48e:	4770      	bx	lr
   5b490:	4610      	mov	r0, r2
   5b492:	e7fb      	b.n	5b48c <__ascii_mbtowc+0x16>
   5b494:	f06f 0001 	mvn.w	r0, #1
   5b498:	e7f8      	b.n	5b48c <__ascii_mbtowc+0x16>

0005b49a <__hi0bits>:
   5b49a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   5b49e:	4603      	mov	r3, r0
   5b4a0:	bf36      	itet	cc
   5b4a2:	0403      	lslcc	r3, r0, #16
   5b4a4:	2000      	movcs	r0, #0
   5b4a6:	2010      	movcc	r0, #16
   5b4a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   5b4ac:	bf3c      	itt	cc
   5b4ae:	021b      	lslcc	r3, r3, #8
   5b4b0:	3008      	addcc	r0, #8
   5b4b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   5b4b6:	bf3c      	itt	cc
   5b4b8:	011b      	lslcc	r3, r3, #4
   5b4ba:	3004      	addcc	r0, #4
   5b4bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   5b4c0:	d303      	bcc.n	5b4ca <__hi0bits+0x30>
   5b4c2:	2b00      	cmp	r3, #0
   5b4c4:	db0a      	blt.n	5b4dc <__hi0bits+0x42>
   5b4c6:	3001      	adds	r0, #1
   5b4c8:	4770      	bx	lr
   5b4ca:	009b      	lsls	r3, r3, #2
   5b4cc:	d501      	bpl.n	5b4d2 <__hi0bits+0x38>
   5b4ce:	3002      	adds	r0, #2
   5b4d0:	4770      	bx	lr
   5b4d2:	005b      	lsls	r3, r3, #1
   5b4d4:	d501      	bpl.n	5b4da <__hi0bits+0x40>
   5b4d6:	3003      	adds	r0, #3
   5b4d8:	4770      	bx	lr
   5b4da:	2020      	movs	r0, #32
   5b4dc:	4770      	bx	lr

0005b4de <__lo0bits>:
   5b4de:	6803      	ldr	r3, [r0, #0]
   5b4e0:	4602      	mov	r2, r0
   5b4e2:	f013 0007 	ands.w	r0, r3, #7
   5b4e6:	d00b      	beq.n	5b500 <__lo0bits+0x22>
   5b4e8:	07d9      	lsls	r1, r3, #31
   5b4ea:	d421      	bmi.n	5b530 <__lo0bits+0x52>
   5b4ec:	0798      	lsls	r0, r3, #30
   5b4ee:	bf47      	ittee	mi
   5b4f0:	085b      	lsrmi	r3, r3, #1
   5b4f2:	2001      	movmi	r0, #1
   5b4f4:	089b      	lsrpl	r3, r3, #2
   5b4f6:	2002      	movpl	r0, #2
   5b4f8:	bf4c      	ite	mi
   5b4fa:	6013      	strmi	r3, [r2, #0]
   5b4fc:	6013      	strpl	r3, [r2, #0]
   5b4fe:	4770      	bx	lr
   5b500:	b299      	uxth	r1, r3
   5b502:	b909      	cbnz	r1, 5b508 <__lo0bits+0x2a>
   5b504:	0c1b      	lsrs	r3, r3, #16
   5b506:	2010      	movs	r0, #16
   5b508:	b2d9      	uxtb	r1, r3
   5b50a:	b909      	cbnz	r1, 5b510 <__lo0bits+0x32>
   5b50c:	3008      	adds	r0, #8
   5b50e:	0a1b      	lsrs	r3, r3, #8
   5b510:	0719      	lsls	r1, r3, #28
   5b512:	bf04      	itt	eq
   5b514:	091b      	lsreq	r3, r3, #4
   5b516:	3004      	addeq	r0, #4
   5b518:	0799      	lsls	r1, r3, #30
   5b51a:	bf04      	itt	eq
   5b51c:	089b      	lsreq	r3, r3, #2
   5b51e:	3002      	addeq	r0, #2
   5b520:	07d9      	lsls	r1, r3, #31
   5b522:	d403      	bmi.n	5b52c <__lo0bits+0x4e>
   5b524:	085b      	lsrs	r3, r3, #1
   5b526:	f100 0001 	add.w	r0, r0, #1
   5b52a:	d003      	beq.n	5b534 <__lo0bits+0x56>
   5b52c:	6013      	str	r3, [r2, #0]
   5b52e:	4770      	bx	lr
   5b530:	2000      	movs	r0, #0
   5b532:	4770      	bx	lr
   5b534:	2020      	movs	r0, #32
   5b536:	4770      	bx	lr

0005b538 <__mcmp>:
   5b538:	4603      	mov	r3, r0
   5b53a:	690a      	ldr	r2, [r1, #16]
   5b53c:	6900      	ldr	r0, [r0, #16]
   5b53e:	1a80      	subs	r0, r0, r2
   5b540:	b530      	push	{r4, r5, lr}
   5b542:	d10e      	bne.n	5b562 <__mcmp+0x2a>
   5b544:	3314      	adds	r3, #20
   5b546:	3114      	adds	r1, #20
   5b548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   5b54c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   5b550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   5b554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   5b558:	4295      	cmp	r5, r2
   5b55a:	d003      	beq.n	5b564 <__mcmp+0x2c>
   5b55c:	d205      	bcs.n	5b56a <__mcmp+0x32>
   5b55e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b562:	bd30      	pop	{r4, r5, pc}
   5b564:	42a3      	cmp	r3, r4
   5b566:	d3f3      	bcc.n	5b550 <__mcmp+0x18>
   5b568:	e7fb      	b.n	5b562 <__mcmp+0x2a>
   5b56a:	2001      	movs	r0, #1
   5b56c:	e7f9      	b.n	5b562 <__mcmp+0x2a>

0005b56e <_realloc_r>:
   5b56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5b570:	4607      	mov	r7, r0
   5b572:	4615      	mov	r5, r2
   5b574:	460c      	mov	r4, r1
   5b576:	b921      	cbnz	r1, 5b582 <_realloc_r+0x14>
   5b578:	4611      	mov	r1, r2
   5b57a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   5b57e:	f7f7 bf53 	b.w	53428 <_malloc_r>
   5b582:	b922      	cbnz	r2, 5b58e <_realloc_r+0x20>
   5b584:	f7f7 ff06 	bl	53394 <_free_r>
   5b588:	2400      	movs	r4, #0
   5b58a:	4620      	mov	r0, r4
   5b58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   5b58e:	f000 f9fb 	bl	5b988 <_malloc_usable_size_r>
   5b592:	42a8      	cmp	r0, r5
   5b594:	d2f9      	bcs.n	5b58a <_realloc_r+0x1c>
   5b596:	4629      	mov	r1, r5
   5b598:	4638      	mov	r0, r7
   5b59a:	f7f7 ff45 	bl	53428 <_malloc_r>
   5b59e:	4606      	mov	r6, r0
   5b5a0:	2800      	cmp	r0, #0
   5b5a2:	d0f1      	beq.n	5b588 <_realloc_r+0x1a>
   5b5a4:	4621      	mov	r1, r4
   5b5a6:	462a      	mov	r2, r5
   5b5a8:	f7ff fc57 	bl	5ae5a <memcpy>
   5b5ac:	4621      	mov	r1, r4
   5b5ae:	4638      	mov	r0, r7
   5b5b0:	4634      	mov	r4, r6
   5b5b2:	f7f7 feef 	bl	53394 <_free_r>
   5b5b6:	e7e8      	b.n	5b58a <_realloc_r+0x1c>

0005b5b8 <__ssputs_r>:
   5b5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   5b5bc:	461f      	mov	r7, r3
   5b5be:	688e      	ldr	r6, [r1, #8]
   5b5c0:	4682      	mov	sl, r0
   5b5c2:	460c      	mov	r4, r1
   5b5c4:	42be      	cmp	r6, r7
   5b5c6:	4690      	mov	r8, r2
   5b5c8:	680b      	ldr	r3, [r1, #0]
   5b5ca:	d82d      	bhi.n	5b628 <__ssputs_r+0x70>
   5b5cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   5b5d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
   5b5d4:	d026      	beq.n	5b624 <__ssputs_r+0x6c>
   5b5d6:	6965      	ldr	r5, [r4, #20]
   5b5d8:	6909      	ldr	r1, [r1, #16]
   5b5da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   5b5de:	eba3 0901 	sub.w	r9, r3, r1
   5b5e2:	1c7b      	adds	r3, r7, #1
   5b5e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   5b5e8:	444b      	add	r3, r9
   5b5ea:	106d      	asrs	r5, r5, #1
   5b5ec:	429d      	cmp	r5, r3
   5b5ee:	bf38      	it	cc
   5b5f0:	461d      	movcc	r5, r3
   5b5f2:	0553      	lsls	r3, r2, #21
   5b5f4:	d527      	bpl.n	5b646 <__ssputs_r+0x8e>
   5b5f6:	4629      	mov	r1, r5
   5b5f8:	f7f7 ff16 	bl	53428 <_malloc_r>
   5b5fc:	4606      	mov	r6, r0
   5b5fe:	b360      	cbz	r0, 5b65a <__ssputs_r+0xa2>
   5b600:	464a      	mov	r2, r9
   5b602:	6921      	ldr	r1, [r4, #16]
   5b604:	f7ff fc29 	bl	5ae5a <memcpy>
   5b608:	89a3      	ldrh	r3, [r4, #12]
   5b60a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   5b60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   5b612:	81a3      	strh	r3, [r4, #12]
   5b614:	6126      	str	r6, [r4, #16]
   5b616:	444e      	add	r6, r9
   5b618:	6165      	str	r5, [r4, #20]
   5b61a:	eba5 0509 	sub.w	r5, r5, r9
   5b61e:	6026      	str	r6, [r4, #0]
   5b620:	463e      	mov	r6, r7
   5b622:	60a5      	str	r5, [r4, #8]
   5b624:	42be      	cmp	r6, r7
   5b626:	d900      	bls.n	5b62a <__ssputs_r+0x72>
   5b628:	463e      	mov	r6, r7
   5b62a:	4632      	mov	r2, r6
   5b62c:	4641      	mov	r1, r8
   5b62e:	6820      	ldr	r0, [r4, #0]
   5b630:	f7ff fc33 	bl	5ae9a <memmove>
   5b634:	68a3      	ldr	r3, [r4, #8]
   5b636:	2000      	movs	r0, #0
   5b638:	1b9b      	subs	r3, r3, r6
   5b63a:	60a3      	str	r3, [r4, #8]
   5b63c:	6823      	ldr	r3, [r4, #0]
   5b63e:	4433      	add	r3, r6
   5b640:	6023      	str	r3, [r4, #0]
   5b642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   5b646:	462a      	mov	r2, r5
   5b648:	f7ff ff91 	bl	5b56e <_realloc_r>
   5b64c:	4606      	mov	r6, r0
   5b64e:	2800      	cmp	r0, #0
   5b650:	d1e0      	bne.n	5b614 <__ssputs_r+0x5c>
   5b652:	6921      	ldr	r1, [r4, #16]
   5b654:	4650      	mov	r0, sl
   5b656:	f7f7 fe9d 	bl	53394 <_free_r>
   5b65a:	230c      	movs	r3, #12
   5b65c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b660:	f8ca 3000 	str.w	r3, [sl]
   5b664:	89a3      	ldrh	r3, [r4, #12]
   5b666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   5b66a:	81a3      	strh	r3, [r4, #12]
   5b66c:	e7e9      	b.n	5b642 <__ssputs_r+0x8a>

0005b66e <_sungetc_r>:
   5b66e:	b538      	push	{r3, r4, r5, lr}
   5b670:	1c4b      	adds	r3, r1, #1
   5b672:	4614      	mov	r4, r2
   5b674:	d103      	bne.n	5b67e <_sungetc_r+0x10>
   5b676:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   5b67a:	4628      	mov	r0, r5
   5b67c:	bd38      	pop	{r3, r4, r5, pc}
   5b67e:	8993      	ldrh	r3, [r2, #12]
   5b680:	b2cd      	uxtb	r5, r1
   5b682:	f023 0320 	bic.w	r3, r3, #32
   5b686:	8193      	strh	r3, [r2, #12]
   5b688:	6853      	ldr	r3, [r2, #4]
   5b68a:	6b52      	ldr	r2, [r2, #52]	; 0x34
   5b68c:	b18a      	cbz	r2, 5b6b2 <_sungetc_r+0x44>
   5b68e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   5b690:	429a      	cmp	r2, r3
   5b692:	dd08      	ble.n	5b6a6 <_sungetc_r+0x38>
   5b694:	6823      	ldr	r3, [r4, #0]
   5b696:	1e5a      	subs	r2, r3, #1
   5b698:	6022      	str	r2, [r4, #0]
   5b69a:	f803 5c01 	strb.w	r5, [r3, #-1]
   5b69e:	6863      	ldr	r3, [r4, #4]
   5b6a0:	3301      	adds	r3, #1
   5b6a2:	6063      	str	r3, [r4, #4]
   5b6a4:	e7e9      	b.n	5b67a <_sungetc_r+0xc>
   5b6a6:	4621      	mov	r1, r4
   5b6a8:	f000 f872 	bl	5b790 <__submore>
   5b6ac:	2800      	cmp	r0, #0
   5b6ae:	d0f1      	beq.n	5b694 <_sungetc_r+0x26>
   5b6b0:	e7e1      	b.n	5b676 <_sungetc_r+0x8>
   5b6b2:	6921      	ldr	r1, [r4, #16]
   5b6b4:	6822      	ldr	r2, [r4, #0]
   5b6b6:	b141      	cbz	r1, 5b6ca <_sungetc_r+0x5c>
   5b6b8:	4291      	cmp	r1, r2
   5b6ba:	d206      	bcs.n	5b6ca <_sungetc_r+0x5c>
   5b6bc:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   5b6c0:	42a9      	cmp	r1, r5
   5b6c2:	d102      	bne.n	5b6ca <_sungetc_r+0x5c>
   5b6c4:	3a01      	subs	r2, #1
   5b6c6:	6022      	str	r2, [r4, #0]
   5b6c8:	e7ea      	b.n	5b6a0 <_sungetc_r+0x32>
   5b6ca:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   5b6ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
   5b6d2:	6363      	str	r3, [r4, #52]	; 0x34
   5b6d4:	2303      	movs	r3, #3
   5b6d6:	63a3      	str	r3, [r4, #56]	; 0x38
   5b6d8:	4623      	mov	r3, r4
   5b6da:	f803 5f46 	strb.w	r5, [r3, #70]!
   5b6de:	6023      	str	r3, [r4, #0]
   5b6e0:	2301      	movs	r3, #1
   5b6e2:	e7de      	b.n	5b6a2 <_sungetc_r+0x34>

0005b6e4 <__ssrefill_r>:
   5b6e4:	b510      	push	{r4, lr}
   5b6e6:	460c      	mov	r4, r1
   5b6e8:	6b49      	ldr	r1, [r1, #52]	; 0x34
   5b6ea:	b169      	cbz	r1, 5b708 <__ssrefill_r+0x24>
   5b6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
   5b6f0:	4299      	cmp	r1, r3
   5b6f2:	d001      	beq.n	5b6f8 <__ssrefill_r+0x14>
   5b6f4:	f7f7 fe4e 	bl	53394 <_free_r>
   5b6f8:	2000      	movs	r0, #0
   5b6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
   5b6fc:	6360      	str	r0, [r4, #52]	; 0x34
   5b6fe:	6063      	str	r3, [r4, #4]
   5b700:	b113      	cbz	r3, 5b708 <__ssrefill_r+0x24>
   5b702:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   5b704:	6023      	str	r3, [r4, #0]
   5b706:	bd10      	pop	{r4, pc}
   5b708:	6923      	ldr	r3, [r4, #16]
   5b70a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b70e:	6023      	str	r3, [r4, #0]
   5b710:	2300      	movs	r3, #0
   5b712:	6063      	str	r3, [r4, #4]
   5b714:	89a3      	ldrh	r3, [r4, #12]
   5b716:	f043 0320 	orr.w	r3, r3, #32
   5b71a:	81a3      	strh	r3, [r4, #12]
   5b71c:	e7f3      	b.n	5b706 <__ssrefill_r+0x22>

0005b71e <__sccl>:
   5b71e:	b570      	push	{r4, r5, r6, lr}
   5b720:	780b      	ldrb	r3, [r1, #0]
   5b722:	4604      	mov	r4, r0
   5b724:	3801      	subs	r0, #1
   5b726:	2b5e      	cmp	r3, #94	; 0x5e
   5b728:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   5b72c:	bf13      	iteet	ne
   5b72e:	1c4a      	addne	r2, r1, #1
   5b730:	1c8a      	addeq	r2, r1, #2
   5b732:	784b      	ldrbeq	r3, [r1, #1]
   5b734:	2100      	movne	r1, #0
   5b736:	bf08      	it	eq
   5b738:	2101      	moveq	r1, #1
   5b73a:	f800 1f01 	strb.w	r1, [r0, #1]!
   5b73e:	42a8      	cmp	r0, r5
   5b740:	d1fb      	bne.n	5b73a <__sccl+0x1c>
   5b742:	b90b      	cbnz	r3, 5b748 <__sccl+0x2a>
   5b744:	1e50      	subs	r0, r2, #1
   5b746:	bd70      	pop	{r4, r5, r6, pc}
   5b748:	f081 0101 	eor.w	r1, r1, #1
   5b74c:	4610      	mov	r0, r2
   5b74e:	54e1      	strb	r1, [r4, r3]
   5b750:	4602      	mov	r2, r0
   5b752:	f812 5b01 	ldrb.w	r5, [r2], #1
   5b756:	2d2d      	cmp	r5, #45	; 0x2d
   5b758:	d005      	beq.n	5b766 <__sccl+0x48>
   5b75a:	2d5d      	cmp	r5, #93	; 0x5d
   5b75c:	d016      	beq.n	5b78c <__sccl+0x6e>
   5b75e:	2d00      	cmp	r5, #0
   5b760:	d0f1      	beq.n	5b746 <__sccl+0x28>
   5b762:	462b      	mov	r3, r5
   5b764:	e7f2      	b.n	5b74c <__sccl+0x2e>
   5b766:	7846      	ldrb	r6, [r0, #1]
   5b768:	2e5d      	cmp	r6, #93	; 0x5d
   5b76a:	d0fa      	beq.n	5b762 <__sccl+0x44>
   5b76c:	42b3      	cmp	r3, r6
   5b76e:	dcf8      	bgt.n	5b762 <__sccl+0x44>
   5b770:	3002      	adds	r0, #2
   5b772:	461a      	mov	r2, r3
   5b774:	3201      	adds	r2, #1
   5b776:	4296      	cmp	r6, r2
   5b778:	54a1      	strb	r1, [r4, r2]
   5b77a:	dcfb      	bgt.n	5b774 <__sccl+0x56>
   5b77c:	1af2      	subs	r2, r6, r3
   5b77e:	1c5d      	adds	r5, r3, #1
   5b780:	3a01      	subs	r2, #1
   5b782:	42b3      	cmp	r3, r6
   5b784:	bfa8      	it	ge
   5b786:	2200      	movge	r2, #0
   5b788:	18ab      	adds	r3, r5, r2
   5b78a:	e7e1      	b.n	5b750 <__sccl+0x32>
   5b78c:	4610      	mov	r0, r2
   5b78e:	e7da      	b.n	5b746 <__sccl+0x28>

0005b790 <__submore>:
   5b790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   5b794:	460c      	mov	r4, r1
   5b796:	6b49      	ldr	r1, [r1, #52]	; 0x34
   5b798:	f104 0344 	add.w	r3, r4, #68	; 0x44
   5b79c:	4299      	cmp	r1, r3
   5b79e:	d11a      	bne.n	5b7d6 <__submore+0x46>
   5b7a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   5b7a4:	f7f7 fe40 	bl	53428 <_malloc_r>
   5b7a8:	b918      	cbnz	r0, 5b7b2 <__submore+0x22>
   5b7aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   5b7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   5b7b6:	6360      	str	r0, [r4, #52]	; 0x34
   5b7b8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   5b7bc:	63a3      	str	r3, [r4, #56]	; 0x38
   5b7be:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   5b7c2:	7083      	strb	r3, [r0, #2]
   5b7c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   5b7c8:	7043      	strb	r3, [r0, #1]
   5b7ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   5b7ce:	7003      	strb	r3, [r0, #0]
   5b7d0:	6020      	str	r0, [r4, #0]
   5b7d2:	2000      	movs	r0, #0
   5b7d4:	e7eb      	b.n	5b7ae <__submore+0x1e>
   5b7d6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   5b7d8:	0077      	lsls	r7, r6, #1
   5b7da:	463a      	mov	r2, r7
   5b7dc:	f7ff fec7 	bl	5b56e <_realloc_r>
   5b7e0:	4605      	mov	r5, r0
   5b7e2:	2800      	cmp	r0, #0
   5b7e4:	d0e1      	beq.n	5b7aa <__submore+0x1a>
   5b7e6:	eb00 0806 	add.w	r8, r0, r6
   5b7ea:	4601      	mov	r1, r0
   5b7ec:	4632      	mov	r2, r6
   5b7ee:	4640      	mov	r0, r8
   5b7f0:	f7ff fb33 	bl	5ae5a <memcpy>
   5b7f4:	f8c4 8000 	str.w	r8, [r4]
   5b7f8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   5b7fc:	e7e9      	b.n	5b7d2 <__submore+0x42>

0005b7fe <__ascii_wctomb>:
   5b7fe:	4603      	mov	r3, r0
   5b800:	4608      	mov	r0, r1
   5b802:	b141      	cbz	r1, 5b816 <__ascii_wctomb+0x18>
   5b804:	2aff      	cmp	r2, #255	; 0xff
   5b806:	d904      	bls.n	5b812 <__ascii_wctomb+0x14>
   5b808:	228a      	movs	r2, #138	; 0x8a
   5b80a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b80e:	601a      	str	r2, [r3, #0]
   5b810:	4770      	bx	lr
   5b812:	2001      	movs	r0, #1
   5b814:	700a      	strb	r2, [r1, #0]
   5b816:	4770      	bx	lr

0005b818 <__sflush_r>:
   5b818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   5b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   5b820:	0717      	lsls	r7, r2, #28
   5b822:	4605      	mov	r5, r0
   5b824:	460c      	mov	r4, r1
   5b826:	d456      	bmi.n	5b8d6 <__sflush_r+0xbe>
   5b828:	684b      	ldr	r3, [r1, #4]
   5b82a:	2b00      	cmp	r3, #0
   5b82c:	dc02      	bgt.n	5b834 <__sflush_r+0x1c>
   5b82e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   5b830:	2b00      	cmp	r3, #0
   5b832:	dd3d      	ble.n	5b8b0 <__sflush_r+0x98>
   5b834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   5b836:	2e00      	cmp	r6, #0
   5b838:	d03a      	beq.n	5b8b0 <__sflush_r+0x98>
   5b83a:	2300      	movs	r3, #0
   5b83c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   5b840:	682f      	ldr	r7, [r5, #0]
   5b842:	6a21      	ldr	r1, [r4, #32]
   5b844:	602b      	str	r3, [r5, #0]
   5b846:	d025      	beq.n	5b894 <__sflush_r+0x7c>
   5b848:	6d62      	ldr	r2, [r4, #84]	; 0x54
   5b84a:	89a3      	ldrh	r3, [r4, #12]
   5b84c:	0758      	lsls	r0, r3, #29
   5b84e:	d505      	bpl.n	5b85c <__sflush_r+0x44>
   5b850:	6863      	ldr	r3, [r4, #4]
   5b852:	1ad2      	subs	r2, r2, r3
   5b854:	6b63      	ldr	r3, [r4, #52]	; 0x34
   5b856:	b10b      	cbz	r3, 5b85c <__sflush_r+0x44>
   5b858:	6c23      	ldr	r3, [r4, #64]	; 0x40
   5b85a:	1ad2      	subs	r2, r2, r3
   5b85c:	6a21      	ldr	r1, [r4, #32]
   5b85e:	2300      	movs	r3, #0
   5b860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   5b862:	4628      	mov	r0, r5
   5b864:	47b0      	blx	r6
   5b866:	1c41      	adds	r1, r0, #1
   5b868:	d024      	beq.n	5b8b4 <__sflush_r+0x9c>
   5b86a:	2300      	movs	r3, #0
   5b86c:	6063      	str	r3, [r4, #4]
   5b86e:	6923      	ldr	r3, [r4, #16]
   5b870:	6023      	str	r3, [r4, #0]
   5b872:	89a3      	ldrh	r3, [r4, #12]
   5b874:	04da      	lsls	r2, r3, #19
   5b876:	d500      	bpl.n	5b87a <__sflush_r+0x62>
   5b878:	6560      	str	r0, [r4, #84]	; 0x54
   5b87a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   5b87c:	602f      	str	r7, [r5, #0]
   5b87e:	b1b9      	cbz	r1, 5b8b0 <__sflush_r+0x98>
   5b880:	f104 0344 	add.w	r3, r4, #68	; 0x44
   5b884:	4299      	cmp	r1, r3
   5b886:	d002      	beq.n	5b88e <__sflush_r+0x76>
   5b888:	4628      	mov	r0, r5
   5b88a:	f7f7 fd83 	bl	53394 <_free_r>
   5b88e:	2300      	movs	r3, #0
   5b890:	6363      	str	r3, [r4, #52]	; 0x34
   5b892:	e00d      	b.n	5b8b0 <__sflush_r+0x98>
   5b894:	2301      	movs	r3, #1
   5b896:	4628      	mov	r0, r5
   5b898:	47b0      	blx	r6
   5b89a:	1c46      	adds	r6, r0, #1
   5b89c:	4602      	mov	r2, r0
   5b89e:	d1d4      	bne.n	5b84a <__sflush_r+0x32>
   5b8a0:	682b      	ldr	r3, [r5, #0]
   5b8a2:	2b00      	cmp	r3, #0
   5b8a4:	d0d1      	beq.n	5b84a <__sflush_r+0x32>
   5b8a6:	2b1d      	cmp	r3, #29
   5b8a8:	d001      	beq.n	5b8ae <__sflush_r+0x96>
   5b8aa:	2b16      	cmp	r3, #22
   5b8ac:	d12a      	bne.n	5b904 <__sflush_r+0xec>
   5b8ae:	602f      	str	r7, [r5, #0]
   5b8b0:	2000      	movs	r0, #0
   5b8b2:	e02e      	b.n	5b912 <__sflush_r+0xfa>
   5b8b4:	682a      	ldr	r2, [r5, #0]
   5b8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   5b8ba:	b142      	cbz	r2, 5b8ce <__sflush_r+0xb6>
   5b8bc:	2a1d      	cmp	r2, #29
   5b8be:	d001      	beq.n	5b8c4 <__sflush_r+0xac>
   5b8c0:	2a16      	cmp	r2, #22
   5b8c2:	d121      	bne.n	5b908 <__sflush_r+0xf0>
   5b8c4:	2300      	movs	r3, #0
   5b8c6:	6063      	str	r3, [r4, #4]
   5b8c8:	6923      	ldr	r3, [r4, #16]
   5b8ca:	6023      	str	r3, [r4, #0]
   5b8cc:	e7d5      	b.n	5b87a <__sflush_r+0x62>
   5b8ce:	6062      	str	r2, [r4, #4]
   5b8d0:	6922      	ldr	r2, [r4, #16]
   5b8d2:	6022      	str	r2, [r4, #0]
   5b8d4:	e7ce      	b.n	5b874 <__sflush_r+0x5c>
   5b8d6:	690f      	ldr	r7, [r1, #16]
   5b8d8:	2f00      	cmp	r7, #0
   5b8da:	d0e9      	beq.n	5b8b0 <__sflush_r+0x98>
   5b8dc:	0793      	lsls	r3, r2, #30
   5b8de:	680e      	ldr	r6, [r1, #0]
   5b8e0:	600f      	str	r7, [r1, #0]
   5b8e2:	bf0c      	ite	eq
   5b8e4:	694b      	ldreq	r3, [r1, #20]
   5b8e6:	2300      	movne	r3, #0
   5b8e8:	eba6 0807 	sub.w	r8, r6, r7
   5b8ec:	608b      	str	r3, [r1, #8]
   5b8ee:	f1b8 0f00 	cmp.w	r8, #0
   5b8f2:	dddd      	ble.n	5b8b0 <__sflush_r+0x98>
   5b8f4:	4643      	mov	r3, r8
   5b8f6:	463a      	mov	r2, r7
   5b8f8:	6a21      	ldr	r1, [r4, #32]
   5b8fa:	4628      	mov	r0, r5
   5b8fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   5b8fe:	47b0      	blx	r6
   5b900:	2800      	cmp	r0, #0
   5b902:	dc08      	bgt.n	5b916 <__sflush_r+0xfe>
   5b904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   5b908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   5b90c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b910:	81a3      	strh	r3, [r4, #12]
   5b912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   5b916:	4407      	add	r7, r0
   5b918:	eba8 0800 	sub.w	r8, r8, r0
   5b91c:	e7e7      	b.n	5b8ee <__sflush_r+0xd6>

0005b91e <__sfmoreglue>:
   5b91e:	b570      	push	{r4, r5, r6, lr}
   5b920:	2368      	movs	r3, #104	; 0x68
   5b922:	1e4d      	subs	r5, r1, #1
   5b924:	460e      	mov	r6, r1
   5b926:	435d      	muls	r5, r3
   5b928:	f105 0174 	add.w	r1, r5, #116	; 0x74
   5b92c:	f7f7 fd7c 	bl	53428 <_malloc_r>
   5b930:	4604      	mov	r4, r0
   5b932:	b140      	cbz	r0, 5b946 <__sfmoreglue+0x28>
   5b934:	2100      	movs	r1, #0
   5b936:	f105 0268 	add.w	r2, r5, #104	; 0x68
   5b93a:	e9c0 1600 	strd	r1, r6, [r0]
   5b93e:	300c      	adds	r0, #12
   5b940:	60a0      	str	r0, [r4, #8]
   5b942:	f7ff fac4 	bl	5aece <memset>
   5b946:	4620      	mov	r0, r4
   5b948:	bd70      	pop	{r4, r5, r6, pc}

0005b94a <_fwalk_reent>:
   5b94a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   5b94e:	4606      	mov	r6, r0
   5b950:	4688      	mov	r8, r1
   5b952:	f100 0448 	add.w	r4, r0, #72	; 0x48
   5b956:	2700      	movs	r7, #0
   5b958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   5b95c:	f1b9 0901 	subs.w	r9, r9, #1
   5b960:	d505      	bpl.n	5b96e <_fwalk_reent+0x24>
   5b962:	6824      	ldr	r4, [r4, #0]
   5b964:	2c00      	cmp	r4, #0
   5b966:	d1f7      	bne.n	5b958 <_fwalk_reent+0xe>
   5b968:	4638      	mov	r0, r7
   5b96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   5b96e:	89ab      	ldrh	r3, [r5, #12]
   5b970:	2b01      	cmp	r3, #1
   5b972:	d907      	bls.n	5b984 <_fwalk_reent+0x3a>
   5b974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   5b978:	3301      	adds	r3, #1
   5b97a:	d003      	beq.n	5b984 <_fwalk_reent+0x3a>
   5b97c:	4629      	mov	r1, r5
   5b97e:	4630      	mov	r0, r6
   5b980:	47c0      	blx	r8
   5b982:	4307      	orrs	r7, r0
   5b984:	3568      	adds	r5, #104	; 0x68
   5b986:	e7e9      	b.n	5b95c <_fwalk_reent+0x12>

0005b988 <_malloc_usable_size_r>:
   5b988:	f851 3c04 	ldr.w	r3, [r1, #-4]
   5b98c:	1f18      	subs	r0, r3, #4
   5b98e:	2b00      	cmp	r3, #0
   5b990:	bfbc      	itt	lt
   5b992:	580b      	ldrlt	r3, [r1, r0]
   5b994:	18c0      	addlt	r0, r0, r3
   5b996:	4770      	bx	lr

0005b998 <__sfputc_r>:
   5b998:	6893      	ldr	r3, [r2, #8]
   5b99a:	3b01      	subs	r3, #1
   5b99c:	2b00      	cmp	r3, #0
   5b99e:	6093      	str	r3, [r2, #8]
   5b9a0:	b410      	push	{r4}
   5b9a2:	da08      	bge.n	5b9b6 <__sfputc_r+0x1e>
   5b9a4:	6994      	ldr	r4, [r2, #24]
   5b9a6:	42a3      	cmp	r3, r4
   5b9a8:	db01      	blt.n	5b9ae <__sfputc_r+0x16>
   5b9aa:	290a      	cmp	r1, #10
   5b9ac:	d103      	bne.n	5b9b6 <__sfputc_r+0x1e>
   5b9ae:	f85d 4b04 	ldr.w	r4, [sp], #4
   5b9b2:	f7f9 bc9d 	b.w	552f0 <__swbuf_r>
   5b9b6:	6813      	ldr	r3, [r2, #0]
   5b9b8:	1c58      	adds	r0, r3, #1
   5b9ba:	6010      	str	r0, [r2, #0]
   5b9bc:	4608      	mov	r0, r1
   5b9be:	7019      	strb	r1, [r3, #0]
   5b9c0:	f85d 4b04 	ldr.w	r4, [sp], #4
   5b9c4:	4770      	bx	lr

0005b9c6 <__sfputs_r>:
   5b9c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5b9c8:	4606      	mov	r6, r0
   5b9ca:	460f      	mov	r7, r1
   5b9cc:	4614      	mov	r4, r2
   5b9ce:	18d5      	adds	r5, r2, r3
   5b9d0:	42ac      	cmp	r4, r5
   5b9d2:	d101      	bne.n	5b9d8 <__sfputs_r+0x12>
   5b9d4:	2000      	movs	r0, #0
   5b9d6:	e007      	b.n	5b9e8 <__sfputs_r+0x22>
   5b9d8:	463a      	mov	r2, r7
   5b9da:	f814 1b01 	ldrb.w	r1, [r4], #1
   5b9de:	4630      	mov	r0, r6
   5b9e0:	f7ff ffda 	bl	5b998 <__sfputc_r>
   5b9e4:	1c43      	adds	r3, r0, #1
   5b9e6:	d1f3      	bne.n	5b9d0 <__sfputs_r+0xa>
   5b9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0005b9ea <abort>:
   5b9ea:	2006      	movs	r0, #6
   5b9ec:	b508      	push	{r3, lr}
   5b9ee:	f7f9 fd7d 	bl	554ec <raise>
   5b9f2:	2001      	movs	r0, #1
   5b9f4:	f7eb f84a 	bl	46a8c <_exit>

0005b9f8 <__swhatbuf_r>:
   5b9f8:	b570      	push	{r4, r5, r6, lr}
   5b9fa:	460c      	mov	r4, r1
   5b9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   5ba00:	b096      	sub	sp, #88	; 0x58
   5ba02:	4615      	mov	r5, r2
   5ba04:	2900      	cmp	r1, #0
   5ba06:	461e      	mov	r6, r3
   5ba08:	da0c      	bge.n	5ba24 <__swhatbuf_r+0x2c>
   5ba0a:	89a3      	ldrh	r3, [r4, #12]
   5ba0c:	2100      	movs	r1, #0
   5ba0e:	f013 0f80 	tst.w	r3, #128	; 0x80
   5ba12:	bf14      	ite	ne
   5ba14:	2340      	movne	r3, #64	; 0x40
   5ba16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   5ba1a:	2000      	movs	r0, #0
   5ba1c:	6031      	str	r1, [r6, #0]
   5ba1e:	602b      	str	r3, [r5, #0]
   5ba20:	b016      	add	sp, #88	; 0x58
   5ba22:	bd70      	pop	{r4, r5, r6, pc}
   5ba24:	466a      	mov	r2, sp
   5ba26:	f7f9 fd7b 	bl	55520 <_fstat_r>
   5ba2a:	2800      	cmp	r0, #0
   5ba2c:	dbed      	blt.n	5ba0a <__swhatbuf_r+0x12>
   5ba2e:	9901      	ldr	r1, [sp, #4]
   5ba30:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   5ba34:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   5ba38:	4259      	negs	r1, r3
   5ba3a:	4159      	adcs	r1, r3
   5ba3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   5ba40:	e7eb      	b.n	5ba1a <__swhatbuf_r+0x22>

0005ba42 <_raise_r>:
   5ba42:	291f      	cmp	r1, #31
   5ba44:	b538      	push	{r3, r4, r5, lr}
   5ba46:	4605      	mov	r5, r0
   5ba48:	460c      	mov	r4, r1
   5ba4a:	d904      	bls.n	5ba56 <_raise_r+0x14>
   5ba4c:	2316      	movs	r3, #22
   5ba4e:	6003      	str	r3, [r0, #0]
   5ba50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5ba54:	bd38      	pop	{r3, r4, r5, pc}
   5ba56:	6c42      	ldr	r2, [r0, #68]	; 0x44
   5ba58:	b112      	cbz	r2, 5ba60 <_raise_r+0x1e>
   5ba5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   5ba5e:	b94b      	cbnz	r3, 5ba74 <_raise_r+0x32>
   5ba60:	4628      	mov	r0, r5
   5ba62:	f000 f816 	bl	5ba92 <_getpid_r>
   5ba66:	4622      	mov	r2, r4
   5ba68:	4601      	mov	r1, r0
   5ba6a:	4628      	mov	r0, r5
   5ba6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   5ba70:	f7f9 bd44 	b.w	554fc <_kill_r>
   5ba74:	2b01      	cmp	r3, #1
   5ba76:	d00a      	beq.n	5ba8e <_raise_r+0x4c>
   5ba78:	1c59      	adds	r1, r3, #1
   5ba7a:	d103      	bne.n	5ba84 <_raise_r+0x42>
   5ba7c:	2316      	movs	r3, #22
   5ba7e:	6003      	str	r3, [r0, #0]
   5ba80:	2001      	movs	r0, #1
   5ba82:	e7e7      	b.n	5ba54 <_raise_r+0x12>
   5ba84:	2100      	movs	r1, #0
   5ba86:	4620      	mov	r0, r4
   5ba88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   5ba8c:	4798      	blx	r3
   5ba8e:	2000      	movs	r0, #0
   5ba90:	e7e0      	b.n	5ba54 <_raise_r+0x12>

0005ba92 <_getpid_r>:
   5ba92:	f7fa bb16 	b.w	560c2 <_getpid>
	...
