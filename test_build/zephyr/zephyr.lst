
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00040000 <_vector_table>:
   40000:	80 27 02 20 39 66 04 00 21 60 05 00 0d 66 04 00     .'. 9f..!`...f..
   40010:	0d 66 04 00 0d 66 04 00 0d 66 04 00 0d 66 04 00     .f...f...f...f..
	...
   4002c:	91 5f 04 00 0d 66 04 00 00 00 00 00 fd 5e 04 00     ._...f.......^..
   4003c:	0d 66 04 00                                         .f..

00040040 <_irq_vector_table>:
   40040:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   40050:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   40060:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   40070:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   40080:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   40090:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   400a0:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   400b0:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   400c0:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   400d0:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   400e0:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   400f0:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   40100:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   40110:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   40120:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   40130:	35 60 04 00 35 60 04 00 35 60 04 00 35 60 04 00     5`..5`..5`..5`..
   40140:	35 60 04 00                                         5`..

Disassembly of section text:

00040148 <__aeabi_drsub>:
   40148:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   4014c:	e002      	b.n	40154 <__adddf3>
   4014e:	bf00      	nop

00040150 <__aeabi_dsub>:
   40150:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00040154 <__adddf3>:
   40154:	b530      	push	{r4, r5, lr}
   40156:	ea4f 0441 	mov.w	r4, r1, lsl #1
   4015a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   4015e:	ea94 0f05 	teq	r4, r5
   40162:	bf08      	it	eq
   40164:	ea90 0f02 	teqeq	r0, r2
   40168:	bf1f      	itttt	ne
   4016a:	ea54 0c00 	orrsne.w	ip, r4, r0
   4016e:	ea55 0c02 	orrsne.w	ip, r5, r2
   40172:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   40176:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   4017a:	f000 80e2 	beq.w	40342 <__adddf3+0x1ee>
   4017e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   40182:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   40186:	bfb8      	it	lt
   40188:	426d      	neglt	r5, r5
   4018a:	dd0c      	ble.n	401a6 <__adddf3+0x52>
   4018c:	442c      	add	r4, r5
   4018e:	ea80 0202 	eor.w	r2, r0, r2
   40192:	ea81 0303 	eor.w	r3, r1, r3
   40196:	ea82 0000 	eor.w	r0, r2, r0
   4019a:	ea83 0101 	eor.w	r1, r3, r1
   4019e:	ea80 0202 	eor.w	r2, r0, r2
   401a2:	ea81 0303 	eor.w	r3, r1, r3
   401a6:	2d36      	cmp	r5, #54	; 0x36
   401a8:	bf88      	it	hi
   401aa:	bd30      	pophi	{r4, r5, pc}
   401ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   401b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   401b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   401b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   401bc:	d002      	beq.n	401c4 <__adddf3+0x70>
   401be:	4240      	negs	r0, r0
   401c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   401c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   401c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   401cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   401d0:	d002      	beq.n	401d8 <__adddf3+0x84>
   401d2:	4252      	negs	r2, r2
   401d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   401d8:	ea94 0f05 	teq	r4, r5
   401dc:	f000 80a7 	beq.w	4032e <__adddf3+0x1da>
   401e0:	f1a4 0401 	sub.w	r4, r4, #1
   401e4:	f1d5 0e20 	rsbs	lr, r5, #32
   401e8:	db0d      	blt.n	40206 <__adddf3+0xb2>
   401ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   401ee:	fa22 f205 	lsr.w	r2, r2, r5
   401f2:	1880      	adds	r0, r0, r2
   401f4:	f141 0100 	adc.w	r1, r1, #0
   401f8:	fa03 f20e 	lsl.w	r2, r3, lr
   401fc:	1880      	adds	r0, r0, r2
   401fe:	fa43 f305 	asr.w	r3, r3, r5
   40202:	4159      	adcs	r1, r3
   40204:	e00e      	b.n	40224 <__adddf3+0xd0>
   40206:	f1a5 0520 	sub.w	r5, r5, #32
   4020a:	f10e 0e20 	add.w	lr, lr, #32
   4020e:	2a01      	cmp	r2, #1
   40210:	fa03 fc0e 	lsl.w	ip, r3, lr
   40214:	bf28      	it	cs
   40216:	f04c 0c02 	orrcs.w	ip, ip, #2
   4021a:	fa43 f305 	asr.w	r3, r3, r5
   4021e:	18c0      	adds	r0, r0, r3
   40220:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   40224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   40228:	d507      	bpl.n	4023a <__adddf3+0xe6>
   4022a:	f04f 0e00 	mov.w	lr, #0
   4022e:	f1dc 0c00 	rsbs	ip, ip, #0
   40232:	eb7e 0000 	sbcs.w	r0, lr, r0
   40236:	eb6e 0101 	sbc.w	r1, lr, r1
   4023a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   4023e:	d31b      	bcc.n	40278 <__adddf3+0x124>
   40240:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   40244:	d30c      	bcc.n	40260 <__adddf3+0x10c>
   40246:	0849      	lsrs	r1, r1, #1
   40248:	ea5f 0030 	movs.w	r0, r0, rrx
   4024c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   40250:	f104 0401 	add.w	r4, r4, #1
   40254:	ea4f 5244 	mov.w	r2, r4, lsl #21
   40258:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   4025c:	f080 809a 	bcs.w	40394 <__adddf3+0x240>
   40260:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   40264:	bf08      	it	eq
   40266:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   4026a:	f150 0000 	adcs.w	r0, r0, #0
   4026e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   40272:	ea41 0105 	orr.w	r1, r1, r5
   40276:	bd30      	pop	{r4, r5, pc}
   40278:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   4027c:	4140      	adcs	r0, r0
   4027e:	eb41 0101 	adc.w	r1, r1, r1
   40282:	3c01      	subs	r4, #1
   40284:	bf28      	it	cs
   40286:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   4028a:	d2e9      	bcs.n	40260 <__adddf3+0x10c>
   4028c:	f091 0f00 	teq	r1, #0
   40290:	bf04      	itt	eq
   40292:	4601      	moveq	r1, r0
   40294:	2000      	moveq	r0, #0
   40296:	fab1 f381 	clz	r3, r1
   4029a:	bf08      	it	eq
   4029c:	3320      	addeq	r3, #32
   4029e:	f1a3 030b 	sub.w	r3, r3, #11
   402a2:	f1b3 0220 	subs.w	r2, r3, #32
   402a6:	da0c      	bge.n	402c2 <__adddf3+0x16e>
   402a8:	320c      	adds	r2, #12
   402aa:	dd08      	ble.n	402be <__adddf3+0x16a>
   402ac:	f102 0c14 	add.w	ip, r2, #20
   402b0:	f1c2 020c 	rsb	r2, r2, #12
   402b4:	fa01 f00c 	lsl.w	r0, r1, ip
   402b8:	fa21 f102 	lsr.w	r1, r1, r2
   402bc:	e00c      	b.n	402d8 <__adddf3+0x184>
   402be:	f102 0214 	add.w	r2, r2, #20
   402c2:	bfd8      	it	le
   402c4:	f1c2 0c20 	rsble	ip, r2, #32
   402c8:	fa01 f102 	lsl.w	r1, r1, r2
   402cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   402d0:	bfdc      	itt	le
   402d2:	ea41 010c 	orrle.w	r1, r1, ip
   402d6:	4090      	lslle	r0, r2
   402d8:	1ae4      	subs	r4, r4, r3
   402da:	bfa2      	ittt	ge
   402dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   402e0:	4329      	orrge	r1, r5
   402e2:	bd30      	popge	{r4, r5, pc}
   402e4:	ea6f 0404 	mvn.w	r4, r4
   402e8:	3c1f      	subs	r4, #31
   402ea:	da1c      	bge.n	40326 <__adddf3+0x1d2>
   402ec:	340c      	adds	r4, #12
   402ee:	dc0e      	bgt.n	4030e <__adddf3+0x1ba>
   402f0:	f104 0414 	add.w	r4, r4, #20
   402f4:	f1c4 0220 	rsb	r2, r4, #32
   402f8:	fa20 f004 	lsr.w	r0, r0, r4
   402fc:	fa01 f302 	lsl.w	r3, r1, r2
   40300:	ea40 0003 	orr.w	r0, r0, r3
   40304:	fa21 f304 	lsr.w	r3, r1, r4
   40308:	ea45 0103 	orr.w	r1, r5, r3
   4030c:	bd30      	pop	{r4, r5, pc}
   4030e:	f1c4 040c 	rsb	r4, r4, #12
   40312:	f1c4 0220 	rsb	r2, r4, #32
   40316:	fa20 f002 	lsr.w	r0, r0, r2
   4031a:	fa01 f304 	lsl.w	r3, r1, r4
   4031e:	ea40 0003 	orr.w	r0, r0, r3
   40322:	4629      	mov	r1, r5
   40324:	bd30      	pop	{r4, r5, pc}
   40326:	fa21 f004 	lsr.w	r0, r1, r4
   4032a:	4629      	mov	r1, r5
   4032c:	bd30      	pop	{r4, r5, pc}
   4032e:	f094 0f00 	teq	r4, #0
   40332:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   40336:	bf06      	itte	eq
   40338:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   4033c:	3401      	addeq	r4, #1
   4033e:	3d01      	subne	r5, #1
   40340:	e74e      	b.n	401e0 <__adddf3+0x8c>
   40342:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   40346:	bf18      	it	ne
   40348:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   4034c:	d029      	beq.n	403a2 <__adddf3+0x24e>
   4034e:	ea94 0f05 	teq	r4, r5
   40352:	bf08      	it	eq
   40354:	ea90 0f02 	teqeq	r0, r2
   40358:	d005      	beq.n	40366 <__adddf3+0x212>
   4035a:	ea54 0c00 	orrs.w	ip, r4, r0
   4035e:	bf04      	itt	eq
   40360:	4619      	moveq	r1, r3
   40362:	4610      	moveq	r0, r2
   40364:	bd30      	pop	{r4, r5, pc}
   40366:	ea91 0f03 	teq	r1, r3
   4036a:	bf1e      	ittt	ne
   4036c:	2100      	movne	r1, #0
   4036e:	2000      	movne	r0, #0
   40370:	bd30      	popne	{r4, r5, pc}
   40372:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   40376:	d105      	bne.n	40384 <__adddf3+0x230>
   40378:	0040      	lsls	r0, r0, #1
   4037a:	4149      	adcs	r1, r1
   4037c:	bf28      	it	cs
   4037e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   40382:	bd30      	pop	{r4, r5, pc}
   40384:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   40388:	bf3c      	itt	cc
   4038a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   4038e:	bd30      	popcc	{r4, r5, pc}
   40390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   40394:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   40398:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   4039c:	f04f 0000 	mov.w	r0, #0
   403a0:	bd30      	pop	{r4, r5, pc}
   403a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   403a6:	bf1a      	itte	ne
   403a8:	4619      	movne	r1, r3
   403aa:	4610      	movne	r0, r2
   403ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   403b0:	bf1c      	itt	ne
   403b2:	460b      	movne	r3, r1
   403b4:	4602      	movne	r2, r0
   403b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   403ba:	bf06      	itte	eq
   403bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   403c0:	ea91 0f03 	teqeq	r1, r3
   403c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   403c8:	bd30      	pop	{r4, r5, pc}
   403ca:	bf00      	nop

000403cc <__aeabi_ui2d>:
   403cc:	f090 0f00 	teq	r0, #0
   403d0:	bf04      	itt	eq
   403d2:	2100      	moveq	r1, #0
   403d4:	4770      	bxeq	lr
   403d6:	b530      	push	{r4, r5, lr}
   403d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   403dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   403e0:	f04f 0500 	mov.w	r5, #0
   403e4:	f04f 0100 	mov.w	r1, #0
   403e8:	e750      	b.n	4028c <__adddf3+0x138>
   403ea:	bf00      	nop

000403ec <__aeabi_i2d>:
   403ec:	f090 0f00 	teq	r0, #0
   403f0:	bf04      	itt	eq
   403f2:	2100      	moveq	r1, #0
   403f4:	4770      	bxeq	lr
   403f6:	b530      	push	{r4, r5, lr}
   403f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   403fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   40400:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   40404:	bf48      	it	mi
   40406:	4240      	negmi	r0, r0
   40408:	f04f 0100 	mov.w	r1, #0
   4040c:	e73e      	b.n	4028c <__adddf3+0x138>
   4040e:	bf00      	nop

00040410 <__aeabi_f2d>:
   40410:	0042      	lsls	r2, r0, #1
   40412:	ea4f 01e2 	mov.w	r1, r2, asr #3
   40416:	ea4f 0131 	mov.w	r1, r1, rrx
   4041a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   4041e:	bf1f      	itttt	ne
   40420:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   40424:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   40428:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   4042c:	4770      	bxne	lr
   4042e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   40432:	bf08      	it	eq
   40434:	4770      	bxeq	lr
   40436:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   4043a:	bf04      	itt	eq
   4043c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   40440:	4770      	bxeq	lr
   40442:	b530      	push	{r4, r5, lr}
   40444:	f44f 7460 	mov.w	r4, #896	; 0x380
   40448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   4044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   40450:	e71c      	b.n	4028c <__adddf3+0x138>
   40452:	bf00      	nop

00040454 <__aeabi_ul2d>:
   40454:	ea50 0201 	orrs.w	r2, r0, r1
   40458:	bf08      	it	eq
   4045a:	4770      	bxeq	lr
   4045c:	b530      	push	{r4, r5, lr}
   4045e:	f04f 0500 	mov.w	r5, #0
   40462:	e00a      	b.n	4047a <__aeabi_l2d+0x16>

00040464 <__aeabi_l2d>:
   40464:	ea50 0201 	orrs.w	r2, r0, r1
   40468:	bf08      	it	eq
   4046a:	4770      	bxeq	lr
   4046c:	b530      	push	{r4, r5, lr}
   4046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   40472:	d502      	bpl.n	4047a <__aeabi_l2d+0x16>
   40474:	4240      	negs	r0, r0
   40476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   4047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   4047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   40482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   40486:	f43f aed8 	beq.w	4023a <__adddf3+0xe6>
   4048a:	f04f 0203 	mov.w	r2, #3
   4048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   40492:	bf18      	it	ne
   40494:	3203      	addne	r2, #3
   40496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   4049a:	bf18      	it	ne
   4049c:	3203      	addne	r2, #3
   4049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   404a2:	f1c2 0320 	rsb	r3, r2, #32
   404a6:	fa00 fc03 	lsl.w	ip, r0, r3
   404aa:	fa20 f002 	lsr.w	r0, r0, r2
   404ae:	fa01 fe03 	lsl.w	lr, r1, r3
   404b2:	ea40 000e 	orr.w	r0, r0, lr
   404b6:	fa21 f102 	lsr.w	r1, r1, r2
   404ba:	4414      	add	r4, r2
   404bc:	e6bd      	b.n	4023a <__adddf3+0xe6>
   404be:	bf00      	nop

000404c0 <__aeabi_dmul>:
   404c0:	b570      	push	{r4, r5, r6, lr}
   404c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   404c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   404ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   404ce:	bf1d      	ittte	ne
   404d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   404d4:	ea94 0f0c 	teqne	r4, ip
   404d8:	ea95 0f0c 	teqne	r5, ip
   404dc:	f000 f8de 	bleq	4069c <__aeabi_dmul+0x1dc>
   404e0:	442c      	add	r4, r5
   404e2:	ea81 0603 	eor.w	r6, r1, r3
   404e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   404ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   404ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   404f2:	bf18      	it	ne
   404f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   404f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   404fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   40500:	d038      	beq.n	40574 <__aeabi_dmul+0xb4>
   40502:	fba0 ce02 	umull	ip, lr, r0, r2
   40506:	f04f 0500 	mov.w	r5, #0
   4050a:	fbe1 e502 	umlal	lr, r5, r1, r2
   4050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   40512:	fbe0 e503 	umlal	lr, r5, r0, r3
   40516:	f04f 0600 	mov.w	r6, #0
   4051a:	fbe1 5603 	umlal	r5, r6, r1, r3
   4051e:	f09c 0f00 	teq	ip, #0
   40522:	bf18      	it	ne
   40524:	f04e 0e01 	orrne.w	lr, lr, #1
   40528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   4052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   40530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   40534:	d204      	bcs.n	40540 <__aeabi_dmul+0x80>
   40536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   4053a:	416d      	adcs	r5, r5
   4053c:	eb46 0606 	adc.w	r6, r6, r6
   40540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   40544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   40548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   4054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   40550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   40554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   40558:	bf88      	it	hi
   4055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   4055e:	d81e      	bhi.n	4059e <__aeabi_dmul+0xde>
   40560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   40564:	bf08      	it	eq
   40566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   4056a:	f150 0000 	adcs.w	r0, r0, #0
   4056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   40572:	bd70      	pop	{r4, r5, r6, pc}
   40574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   40578:	ea46 0101 	orr.w	r1, r6, r1
   4057c:	ea40 0002 	orr.w	r0, r0, r2
   40580:	ea81 0103 	eor.w	r1, r1, r3
   40584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   40588:	bfc2      	ittt	gt
   4058a:	ebd4 050c 	rsbsgt	r5, r4, ip
   4058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   40592:	bd70      	popgt	{r4, r5, r6, pc}
   40594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   40598:	f04f 0e00 	mov.w	lr, #0
   4059c:	3c01      	subs	r4, #1
   4059e:	f300 80ab 	bgt.w	406f8 <__aeabi_dmul+0x238>
   405a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   405a6:	bfde      	ittt	le
   405a8:	2000      	movle	r0, #0
   405aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   405ae:	bd70      	pople	{r4, r5, r6, pc}
   405b0:	f1c4 0400 	rsb	r4, r4, #0
   405b4:	3c20      	subs	r4, #32
   405b6:	da35      	bge.n	40624 <__aeabi_dmul+0x164>
   405b8:	340c      	adds	r4, #12
   405ba:	dc1b      	bgt.n	405f4 <__aeabi_dmul+0x134>
   405bc:	f104 0414 	add.w	r4, r4, #20
   405c0:	f1c4 0520 	rsb	r5, r4, #32
   405c4:	fa00 f305 	lsl.w	r3, r0, r5
   405c8:	fa20 f004 	lsr.w	r0, r0, r4
   405cc:	fa01 f205 	lsl.w	r2, r1, r5
   405d0:	ea40 0002 	orr.w	r0, r0, r2
   405d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   405d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   405dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   405e0:	fa21 f604 	lsr.w	r6, r1, r4
   405e4:	eb42 0106 	adc.w	r1, r2, r6
   405e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   405ec:	bf08      	it	eq
   405ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   405f2:	bd70      	pop	{r4, r5, r6, pc}
   405f4:	f1c4 040c 	rsb	r4, r4, #12
   405f8:	f1c4 0520 	rsb	r5, r4, #32
   405fc:	fa00 f304 	lsl.w	r3, r0, r4
   40600:	fa20 f005 	lsr.w	r0, r0, r5
   40604:	fa01 f204 	lsl.w	r2, r1, r4
   40608:	ea40 0002 	orr.w	r0, r0, r2
   4060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   40610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   40614:	f141 0100 	adc.w	r1, r1, #0
   40618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   4061c:	bf08      	it	eq
   4061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   40622:	bd70      	pop	{r4, r5, r6, pc}
   40624:	f1c4 0520 	rsb	r5, r4, #32
   40628:	fa00 f205 	lsl.w	r2, r0, r5
   4062c:	ea4e 0e02 	orr.w	lr, lr, r2
   40630:	fa20 f304 	lsr.w	r3, r0, r4
   40634:	fa01 f205 	lsl.w	r2, r1, r5
   40638:	ea43 0302 	orr.w	r3, r3, r2
   4063c:	fa21 f004 	lsr.w	r0, r1, r4
   40640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   40644:	fa21 f204 	lsr.w	r2, r1, r4
   40648:	ea20 0002 	bic.w	r0, r0, r2
   4064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   40650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   40654:	bf08      	it	eq
   40656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   4065a:	bd70      	pop	{r4, r5, r6, pc}
   4065c:	f094 0f00 	teq	r4, #0
   40660:	d10f      	bne.n	40682 <__aeabi_dmul+0x1c2>
   40662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   40666:	0040      	lsls	r0, r0, #1
   40668:	eb41 0101 	adc.w	r1, r1, r1
   4066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   40670:	bf08      	it	eq
   40672:	3c01      	subeq	r4, #1
   40674:	d0f7      	beq.n	40666 <__aeabi_dmul+0x1a6>
   40676:	ea41 0106 	orr.w	r1, r1, r6
   4067a:	f095 0f00 	teq	r5, #0
   4067e:	bf18      	it	ne
   40680:	4770      	bxne	lr
   40682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   40686:	0052      	lsls	r2, r2, #1
   40688:	eb43 0303 	adc.w	r3, r3, r3
   4068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   40690:	bf08      	it	eq
   40692:	3d01      	subeq	r5, #1
   40694:	d0f7      	beq.n	40686 <__aeabi_dmul+0x1c6>
   40696:	ea43 0306 	orr.w	r3, r3, r6
   4069a:	4770      	bx	lr
   4069c:	ea94 0f0c 	teq	r4, ip
   406a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   406a4:	bf18      	it	ne
   406a6:	ea95 0f0c 	teqne	r5, ip
   406aa:	d00c      	beq.n	406c6 <__aeabi_dmul+0x206>
   406ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   406b0:	bf18      	it	ne
   406b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   406b6:	d1d1      	bne.n	4065c <__aeabi_dmul+0x19c>
   406b8:	ea81 0103 	eor.w	r1, r1, r3
   406bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   406c0:	f04f 0000 	mov.w	r0, #0
   406c4:	bd70      	pop	{r4, r5, r6, pc}
   406c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   406ca:	bf06      	itte	eq
   406cc:	4610      	moveq	r0, r2
   406ce:	4619      	moveq	r1, r3
   406d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   406d4:	d019      	beq.n	4070a <__aeabi_dmul+0x24a>
   406d6:	ea94 0f0c 	teq	r4, ip
   406da:	d102      	bne.n	406e2 <__aeabi_dmul+0x222>
   406dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   406e0:	d113      	bne.n	4070a <__aeabi_dmul+0x24a>
   406e2:	ea95 0f0c 	teq	r5, ip
   406e6:	d105      	bne.n	406f4 <__aeabi_dmul+0x234>
   406e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   406ec:	bf1c      	itt	ne
   406ee:	4610      	movne	r0, r2
   406f0:	4619      	movne	r1, r3
   406f2:	d10a      	bne.n	4070a <__aeabi_dmul+0x24a>
   406f4:	ea81 0103 	eor.w	r1, r1, r3
   406f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   406fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   40700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   40704:	f04f 0000 	mov.w	r0, #0
   40708:	bd70      	pop	{r4, r5, r6, pc}
   4070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   4070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   40712:	bd70      	pop	{r4, r5, r6, pc}

00040714 <__aeabi_ddiv>:
   40714:	b570      	push	{r4, r5, r6, lr}
   40716:	f04f 0cff 	mov.w	ip, #255	; 0xff
   4071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   4071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   40722:	bf1d      	ittte	ne
   40724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   40728:	ea94 0f0c 	teqne	r4, ip
   4072c:	ea95 0f0c 	teqne	r5, ip
   40730:	f000 f8a7 	bleq	40882 <__aeabi_ddiv+0x16e>
   40734:	eba4 0405 	sub.w	r4, r4, r5
   40738:	ea81 0e03 	eor.w	lr, r1, r3
   4073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   40740:	ea4f 3101 	mov.w	r1, r1, lsl #12
   40744:	f000 8088 	beq.w	40858 <__aeabi_ddiv+0x144>
   40748:	ea4f 3303 	mov.w	r3, r3, lsl #12
   4074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   40750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   40754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   40758:	ea4f 2202 	mov.w	r2, r2, lsl #8
   4075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   40760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   40764:	ea4f 2600 	mov.w	r6, r0, lsl #8
   40768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   4076c:	429d      	cmp	r5, r3
   4076e:	bf08      	it	eq
   40770:	4296      	cmpeq	r6, r2
   40772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   40776:	f504 7440 	add.w	r4, r4, #768	; 0x300
   4077a:	d202      	bcs.n	40782 <__aeabi_ddiv+0x6e>
   4077c:	085b      	lsrs	r3, r3, #1
   4077e:	ea4f 0232 	mov.w	r2, r2, rrx
   40782:	1ab6      	subs	r6, r6, r2
   40784:	eb65 0503 	sbc.w	r5, r5, r3
   40788:	085b      	lsrs	r3, r3, #1
   4078a:	ea4f 0232 	mov.w	r2, r2, rrx
   4078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   40792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   40796:	ebb6 0e02 	subs.w	lr, r6, r2
   4079a:	eb75 0e03 	sbcs.w	lr, r5, r3
   4079e:	bf22      	ittt	cs
   407a0:	1ab6      	subcs	r6, r6, r2
   407a2:	4675      	movcs	r5, lr
   407a4:	ea40 000c 	orrcs.w	r0, r0, ip
   407a8:	085b      	lsrs	r3, r3, #1
   407aa:	ea4f 0232 	mov.w	r2, r2, rrx
   407ae:	ebb6 0e02 	subs.w	lr, r6, r2
   407b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   407b6:	bf22      	ittt	cs
   407b8:	1ab6      	subcs	r6, r6, r2
   407ba:	4675      	movcs	r5, lr
   407bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   407c0:	085b      	lsrs	r3, r3, #1
   407c2:	ea4f 0232 	mov.w	r2, r2, rrx
   407c6:	ebb6 0e02 	subs.w	lr, r6, r2
   407ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   407ce:	bf22      	ittt	cs
   407d0:	1ab6      	subcs	r6, r6, r2
   407d2:	4675      	movcs	r5, lr
   407d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   407d8:	085b      	lsrs	r3, r3, #1
   407da:	ea4f 0232 	mov.w	r2, r2, rrx
   407de:	ebb6 0e02 	subs.w	lr, r6, r2
   407e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   407e6:	bf22      	ittt	cs
   407e8:	1ab6      	subcs	r6, r6, r2
   407ea:	4675      	movcs	r5, lr
   407ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   407f0:	ea55 0e06 	orrs.w	lr, r5, r6
   407f4:	d018      	beq.n	40828 <__aeabi_ddiv+0x114>
   407f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   407fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   407fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   40802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   40806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   4080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   4080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   40812:	d1c0      	bne.n	40796 <__aeabi_ddiv+0x82>
   40814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   40818:	d10b      	bne.n	40832 <__aeabi_ddiv+0x11e>
   4081a:	ea41 0100 	orr.w	r1, r1, r0
   4081e:	f04f 0000 	mov.w	r0, #0
   40822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   40826:	e7b6      	b.n	40796 <__aeabi_ddiv+0x82>
   40828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   4082c:	bf04      	itt	eq
   4082e:	4301      	orreq	r1, r0
   40830:	2000      	moveq	r0, #0
   40832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   40836:	bf88      	it	hi
   40838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   4083c:	f63f aeaf 	bhi.w	4059e <__aeabi_dmul+0xde>
   40840:	ebb5 0c03 	subs.w	ip, r5, r3
   40844:	bf04      	itt	eq
   40846:	ebb6 0c02 	subseq.w	ip, r6, r2
   4084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   4084e:	f150 0000 	adcs.w	r0, r0, #0
   40852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   40856:	bd70      	pop	{r4, r5, r6, pc}
   40858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   4085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   40860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   40864:	bfc2      	ittt	gt
   40866:	ebd4 050c 	rsbsgt	r5, r4, ip
   4086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   4086e:	bd70      	popgt	{r4, r5, r6, pc}
   40870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   40874:	f04f 0e00 	mov.w	lr, #0
   40878:	3c01      	subs	r4, #1
   4087a:	e690      	b.n	4059e <__aeabi_dmul+0xde>
   4087c:	ea45 0e06 	orr.w	lr, r5, r6
   40880:	e68d      	b.n	4059e <__aeabi_dmul+0xde>
   40882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   40886:	ea94 0f0c 	teq	r4, ip
   4088a:	bf08      	it	eq
   4088c:	ea95 0f0c 	teqeq	r5, ip
   40890:	f43f af3b 	beq.w	4070a <__aeabi_dmul+0x24a>
   40894:	ea94 0f0c 	teq	r4, ip
   40898:	d10a      	bne.n	408b0 <__aeabi_ddiv+0x19c>
   4089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   4089e:	f47f af34 	bne.w	4070a <__aeabi_dmul+0x24a>
   408a2:	ea95 0f0c 	teq	r5, ip
   408a6:	f47f af25 	bne.w	406f4 <__aeabi_dmul+0x234>
   408aa:	4610      	mov	r0, r2
   408ac:	4619      	mov	r1, r3
   408ae:	e72c      	b.n	4070a <__aeabi_dmul+0x24a>
   408b0:	ea95 0f0c 	teq	r5, ip
   408b4:	d106      	bne.n	408c4 <__aeabi_ddiv+0x1b0>
   408b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   408ba:	f43f aefd 	beq.w	406b8 <__aeabi_dmul+0x1f8>
   408be:	4610      	mov	r0, r2
   408c0:	4619      	mov	r1, r3
   408c2:	e722      	b.n	4070a <__aeabi_dmul+0x24a>
   408c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   408c8:	bf18      	it	ne
   408ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   408ce:	f47f aec5 	bne.w	4065c <__aeabi_dmul+0x19c>
   408d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   408d6:	f47f af0d 	bne.w	406f4 <__aeabi_dmul+0x234>
   408da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   408de:	f47f aeeb 	bne.w	406b8 <__aeabi_dmul+0x1f8>
   408e2:	e712      	b.n	4070a <__aeabi_dmul+0x24a>

000408e4 <__gedf2>:
   408e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   408e8:	e006      	b.n	408f8 <__cmpdf2+0x4>
   408ea:	bf00      	nop

000408ec <__ledf2>:
   408ec:	f04f 0c01 	mov.w	ip, #1
   408f0:	e002      	b.n	408f8 <__cmpdf2+0x4>
   408f2:	bf00      	nop

000408f4 <__cmpdf2>:
   408f4:	f04f 0c01 	mov.w	ip, #1
   408f8:	f84d cd04 	str.w	ip, [sp, #-4]!
   408fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   40900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   40904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   40908:	bf18      	it	ne
   4090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   4090e:	d01b      	beq.n	40948 <__cmpdf2+0x54>
   40910:	b001      	add	sp, #4
   40912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   40916:	bf0c      	ite	eq
   40918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   4091c:	ea91 0f03 	teqne	r1, r3
   40920:	bf02      	ittt	eq
   40922:	ea90 0f02 	teqeq	r0, r2
   40926:	2000      	moveq	r0, #0
   40928:	4770      	bxeq	lr
   4092a:	f110 0f00 	cmn.w	r0, #0
   4092e:	ea91 0f03 	teq	r1, r3
   40932:	bf58      	it	pl
   40934:	4299      	cmppl	r1, r3
   40936:	bf08      	it	eq
   40938:	4290      	cmpeq	r0, r2
   4093a:	bf2c      	ite	cs
   4093c:	17d8      	asrcs	r0, r3, #31
   4093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   40942:	f040 0001 	orr.w	r0, r0, #1
   40946:	4770      	bx	lr
   40948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   4094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   40950:	d102      	bne.n	40958 <__cmpdf2+0x64>
   40952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   40956:	d107      	bne.n	40968 <__cmpdf2+0x74>
   40958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   4095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   40960:	d1d6      	bne.n	40910 <__cmpdf2+0x1c>
   40962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   40966:	d0d3      	beq.n	40910 <__cmpdf2+0x1c>
   40968:	f85d 0b04 	ldr.w	r0, [sp], #4
   4096c:	4770      	bx	lr
   4096e:	bf00      	nop

00040970 <__aeabi_cdrcmple>:
   40970:	4684      	mov	ip, r0
   40972:	4610      	mov	r0, r2
   40974:	4662      	mov	r2, ip
   40976:	468c      	mov	ip, r1
   40978:	4619      	mov	r1, r3
   4097a:	4663      	mov	r3, ip
   4097c:	e000      	b.n	40980 <__aeabi_cdcmpeq>
   4097e:	bf00      	nop

00040980 <__aeabi_cdcmpeq>:
   40980:	b501      	push	{r0, lr}
   40982:	f7ff ffb7 	bl	408f4 <__cmpdf2>
   40986:	2800      	cmp	r0, #0
   40988:	bf48      	it	mi
   4098a:	f110 0f00 	cmnmi.w	r0, #0
   4098e:	bd01      	pop	{r0, pc}

00040990 <__aeabi_dcmpeq>:
   40990:	f84d ed08 	str.w	lr, [sp, #-8]!
   40994:	f7ff fff4 	bl	40980 <__aeabi_cdcmpeq>
   40998:	bf0c      	ite	eq
   4099a:	2001      	moveq	r0, #1
   4099c:	2000      	movne	r0, #0
   4099e:	f85d fb08 	ldr.w	pc, [sp], #8
   409a2:	bf00      	nop

000409a4 <__aeabi_dcmplt>:
   409a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   409a8:	f7ff ffea 	bl	40980 <__aeabi_cdcmpeq>
   409ac:	bf34      	ite	cc
   409ae:	2001      	movcc	r0, #1
   409b0:	2000      	movcs	r0, #0
   409b2:	f85d fb08 	ldr.w	pc, [sp], #8
   409b6:	bf00      	nop

000409b8 <__aeabi_dcmple>:
   409b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   409bc:	f7ff ffe0 	bl	40980 <__aeabi_cdcmpeq>
   409c0:	bf94      	ite	ls
   409c2:	2001      	movls	r0, #1
   409c4:	2000      	movhi	r0, #0
   409c6:	f85d fb08 	ldr.w	pc, [sp], #8
   409ca:	bf00      	nop

000409cc <__aeabi_dcmpge>:
   409cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   409d0:	f7ff ffce 	bl	40970 <__aeabi_cdrcmple>
   409d4:	bf94      	ite	ls
   409d6:	2001      	movls	r0, #1
   409d8:	2000      	movhi	r0, #0
   409da:	f85d fb08 	ldr.w	pc, [sp], #8
   409de:	bf00      	nop

000409e0 <__aeabi_dcmpgt>:
   409e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   409e4:	f7ff ffc4 	bl	40970 <__aeabi_cdrcmple>
   409e8:	bf34      	ite	cc
   409ea:	2001      	movcc	r0, #1
   409ec:	2000      	movcs	r0, #0
   409ee:	f85d fb08 	ldr.w	pc, [sp], #8
   409f2:	bf00      	nop

000409f4 <__aeabi_dcmpun>:
   409f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   409f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   409fc:	d102      	bne.n	40a04 <__aeabi_dcmpun+0x10>
   409fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   40a02:	d10a      	bne.n	40a1a <__aeabi_dcmpun+0x26>
   40a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   40a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   40a0c:	d102      	bne.n	40a14 <__aeabi_dcmpun+0x20>
   40a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   40a12:	d102      	bne.n	40a1a <__aeabi_dcmpun+0x26>
   40a14:	f04f 0000 	mov.w	r0, #0
   40a18:	4770      	bx	lr
   40a1a:	f04f 0001 	mov.w	r0, #1
   40a1e:	4770      	bx	lr

00040a20 <__aeabi_d2iz>:
   40a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
   40a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   40a28:	d215      	bcs.n	40a56 <__aeabi_d2iz+0x36>
   40a2a:	d511      	bpl.n	40a50 <__aeabi_d2iz+0x30>
   40a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   40a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   40a34:	d912      	bls.n	40a5c <__aeabi_d2iz+0x3c>
   40a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   40a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   40a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   40a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   40a46:	fa23 f002 	lsr.w	r0, r3, r2
   40a4a:	bf18      	it	ne
   40a4c:	4240      	negne	r0, r0
   40a4e:	4770      	bx	lr
   40a50:	f04f 0000 	mov.w	r0, #0
   40a54:	4770      	bx	lr
   40a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   40a5a:	d105      	bne.n	40a68 <__aeabi_d2iz+0x48>
   40a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   40a60:	bf08      	it	eq
   40a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   40a66:	4770      	bx	lr
   40a68:	f04f 0000 	mov.w	r0, #0
   40a6c:	4770      	bx	lr
   40a6e:	bf00      	nop

00040a70 <__aeabi_d2f>:
   40a70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   40a74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   40a78:	bf24      	itt	cs
   40a7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   40a7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   40a82:	d90d      	bls.n	40aa0 <__aeabi_d2f+0x30>
   40a84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   40a88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   40a8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   40a90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   40a94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   40a98:	bf08      	it	eq
   40a9a:	f020 0001 	biceq.w	r0, r0, #1
   40a9e:	4770      	bx	lr
   40aa0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   40aa4:	d121      	bne.n	40aea <__aeabi_d2f+0x7a>
   40aa6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   40aaa:	bfbc      	itt	lt
   40aac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   40ab0:	4770      	bxlt	lr
   40ab2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   40ab6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   40aba:	f1c2 0218 	rsb	r2, r2, #24
   40abe:	f1c2 0c20 	rsb	ip, r2, #32
   40ac2:	fa10 f30c 	lsls.w	r3, r0, ip
   40ac6:	fa20 f002 	lsr.w	r0, r0, r2
   40aca:	bf18      	it	ne
   40acc:	f040 0001 	orrne.w	r0, r0, #1
   40ad0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   40ad4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   40ad8:	fa03 fc0c 	lsl.w	ip, r3, ip
   40adc:	ea40 000c 	orr.w	r0, r0, ip
   40ae0:	fa23 f302 	lsr.w	r3, r3, r2
   40ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   40ae8:	e7cc      	b.n	40a84 <__aeabi_d2f+0x14>
   40aea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   40aee:	d107      	bne.n	40b00 <__aeabi_d2f+0x90>
   40af0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   40af4:	bf1e      	ittt	ne
   40af6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   40afa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   40afe:	4770      	bxne	lr
   40b00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   40b04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   40b08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   40b0c:	4770      	bx	lr
   40b0e:	bf00      	nop

00040b10 <__aeabi_uldivmod>:
   40b10:	b953      	cbnz	r3, 40b28 <__aeabi_uldivmod+0x18>
   40b12:	b94a      	cbnz	r2, 40b28 <__aeabi_uldivmod+0x18>
   40b14:	2900      	cmp	r1, #0
   40b16:	bf08      	it	eq
   40b18:	2800      	cmpeq	r0, #0
   40b1a:	bf1c      	itt	ne
   40b1c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   40b20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   40b24:	f000 b80c 	b.w	40b40 <__aeabi_idiv0>
   40b28:	f1ad 0c08 	sub.w	ip, sp, #8
   40b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   40b30:	f000 f808 	bl	40b44 <__udivmoddi4>
   40b34:	f8dd e004 	ldr.w	lr, [sp, #4]
   40b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   40b3c:	b004      	add	sp, #16
   40b3e:	4770      	bx	lr

00040b40 <__aeabi_idiv0>:
   40b40:	4770      	bx	lr
   40b42:	bf00      	nop

00040b44 <__udivmoddi4>:
   40b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40b48:	4686      	mov	lr, r0
   40b4a:	468c      	mov	ip, r1
   40b4c:	4608      	mov	r0, r1
   40b4e:	9e08      	ldr	r6, [sp, #32]
   40b50:	4615      	mov	r5, r2
   40b52:	4674      	mov	r4, lr
   40b54:	4619      	mov	r1, r3
   40b56:	2b00      	cmp	r3, #0
   40b58:	f040 80c1 	bne.w	40cde <__udivmoddi4+0x19a>
   40b5c:	4285      	cmp	r5, r0
   40b5e:	fab2 f282 	clz	r2, r2
   40b62:	d945      	bls.n	40bf0 <__udivmoddi4+0xac>
   40b64:	b14a      	cbz	r2, 40b7a <__udivmoddi4+0x36>
   40b66:	f1c2 0320 	rsb	r3, r2, #32
   40b6a:	fa00 fc02 	lsl.w	ip, r0, r2
   40b6e:	4095      	lsls	r5, r2
   40b70:	4094      	lsls	r4, r2
   40b72:	fa2e f303 	lsr.w	r3, lr, r3
   40b76:	ea43 0c0c 	orr.w	ip, r3, ip
   40b7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   40b7e:	b2a8      	uxth	r0, r5
   40b80:	0c23      	lsrs	r3, r4, #16
   40b82:	fbbc f8fe 	udiv	r8, ip, lr
   40b86:	fb0e cc18 	mls	ip, lr, r8, ip
   40b8a:	fb08 f900 	mul.w	r9, r8, r0
   40b8e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   40b92:	4599      	cmp	r9, r3
   40b94:	d928      	bls.n	40be8 <__udivmoddi4+0xa4>
   40b96:	18eb      	adds	r3, r5, r3
   40b98:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   40b9c:	d204      	bcs.n	40ba8 <__udivmoddi4+0x64>
   40b9e:	4599      	cmp	r9, r3
   40ba0:	d902      	bls.n	40ba8 <__udivmoddi4+0x64>
   40ba2:	f1a8 0702 	sub.w	r7, r8, #2
   40ba6:	442b      	add	r3, r5
   40ba8:	eba3 0309 	sub.w	r3, r3, r9
   40bac:	b2a4      	uxth	r4, r4
   40bae:	fbb3 fcfe 	udiv	ip, r3, lr
   40bb2:	fb0e 331c 	mls	r3, lr, ip, r3
   40bb6:	fb0c f000 	mul.w	r0, ip, r0
   40bba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   40bbe:	42a0      	cmp	r0, r4
   40bc0:	d914      	bls.n	40bec <__udivmoddi4+0xa8>
   40bc2:	192c      	adds	r4, r5, r4
   40bc4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   40bc8:	d204      	bcs.n	40bd4 <__udivmoddi4+0x90>
   40bca:	42a0      	cmp	r0, r4
   40bcc:	d902      	bls.n	40bd4 <__udivmoddi4+0x90>
   40bce:	f1ac 0302 	sub.w	r3, ip, #2
   40bd2:	442c      	add	r4, r5
   40bd4:	1a24      	subs	r4, r4, r0
   40bd6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   40bda:	b11e      	cbz	r6, 40be4 <__udivmoddi4+0xa0>
   40bdc:	40d4      	lsrs	r4, r2
   40bde:	2300      	movs	r3, #0
   40be0:	6034      	str	r4, [r6, #0]
   40be2:	6073      	str	r3, [r6, #4]
   40be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40be8:	4647      	mov	r7, r8
   40bea:	e7dd      	b.n	40ba8 <__udivmoddi4+0x64>
   40bec:	4663      	mov	r3, ip
   40bee:	e7f1      	b.n	40bd4 <__udivmoddi4+0x90>
   40bf0:	bb92      	cbnz	r2, 40c58 <__udivmoddi4+0x114>
   40bf2:	1b43      	subs	r3, r0, r5
   40bf4:	2101      	movs	r1, #1
   40bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   40bfa:	b2af      	uxth	r7, r5
   40bfc:	0c20      	lsrs	r0, r4, #16
   40bfe:	fbb3 fcfe 	udiv	ip, r3, lr
   40c02:	fb0e 331c 	mls	r3, lr, ip, r3
   40c06:	fb0c f807 	mul.w	r8, ip, r7
   40c0a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   40c0e:	4598      	cmp	r8, r3
   40c10:	d961      	bls.n	40cd6 <__udivmoddi4+0x192>
   40c12:	18eb      	adds	r3, r5, r3
   40c14:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   40c18:	d204      	bcs.n	40c24 <__udivmoddi4+0xe0>
   40c1a:	4598      	cmp	r8, r3
   40c1c:	d902      	bls.n	40c24 <__udivmoddi4+0xe0>
   40c1e:	f1ac 0002 	sub.w	r0, ip, #2
   40c22:	442b      	add	r3, r5
   40c24:	eba3 0308 	sub.w	r3, r3, r8
   40c28:	b2a4      	uxth	r4, r4
   40c2a:	fbb3 fcfe 	udiv	ip, r3, lr
   40c2e:	fb0e 331c 	mls	r3, lr, ip, r3
   40c32:	fb0c f707 	mul.w	r7, ip, r7
   40c36:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   40c3a:	42a7      	cmp	r7, r4
   40c3c:	d94d      	bls.n	40cda <__udivmoddi4+0x196>
   40c3e:	192c      	adds	r4, r5, r4
   40c40:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   40c44:	d204      	bcs.n	40c50 <__udivmoddi4+0x10c>
   40c46:	42a7      	cmp	r7, r4
   40c48:	d902      	bls.n	40c50 <__udivmoddi4+0x10c>
   40c4a:	f1ac 0302 	sub.w	r3, ip, #2
   40c4e:	442c      	add	r4, r5
   40c50:	1be4      	subs	r4, r4, r7
   40c52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   40c56:	e7c0      	b.n	40bda <__udivmoddi4+0x96>
   40c58:	f1c2 0320 	rsb	r3, r2, #32
   40c5c:	4095      	lsls	r5, r2
   40c5e:	4094      	lsls	r4, r2
   40c60:	fa20 f103 	lsr.w	r1, r0, r3
   40c64:	fa2e f303 	lsr.w	r3, lr, r3
   40c68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   40c6c:	4090      	lsls	r0, r2
   40c6e:	b2af      	uxth	r7, r5
   40c70:	4303      	orrs	r3, r0
   40c72:	fbb1 fcfe 	udiv	ip, r1, lr
   40c76:	fb0e 101c 	mls	r0, lr, ip, r1
   40c7a:	0c19      	lsrs	r1, r3, #16
   40c7c:	fb0c f807 	mul.w	r8, ip, r7
   40c80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   40c84:	4588      	cmp	r8, r1
   40c86:	d922      	bls.n	40cce <__udivmoddi4+0x18a>
   40c88:	1869      	adds	r1, r5, r1
   40c8a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   40c8e:	d204      	bcs.n	40c9a <__udivmoddi4+0x156>
   40c90:	4588      	cmp	r8, r1
   40c92:	d902      	bls.n	40c9a <__udivmoddi4+0x156>
   40c94:	f1ac 0002 	sub.w	r0, ip, #2
   40c98:	4429      	add	r1, r5
   40c9a:	eba1 0108 	sub.w	r1, r1, r8
   40c9e:	b29b      	uxth	r3, r3
   40ca0:	fbb1 fcfe 	udiv	ip, r1, lr
   40ca4:	fb0e 111c 	mls	r1, lr, ip, r1
   40ca8:	fb0c f707 	mul.w	r7, ip, r7
   40cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   40cb0:	429f      	cmp	r7, r3
   40cb2:	d90e      	bls.n	40cd2 <__udivmoddi4+0x18e>
   40cb4:	18eb      	adds	r3, r5, r3
   40cb6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   40cba:	d204      	bcs.n	40cc6 <__udivmoddi4+0x182>
   40cbc:	429f      	cmp	r7, r3
   40cbe:	d902      	bls.n	40cc6 <__udivmoddi4+0x182>
   40cc0:	f1ac 0102 	sub.w	r1, ip, #2
   40cc4:	442b      	add	r3, r5
   40cc6:	1bdb      	subs	r3, r3, r7
   40cc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   40ccc:	e793      	b.n	40bf6 <__udivmoddi4+0xb2>
   40cce:	4660      	mov	r0, ip
   40cd0:	e7e3      	b.n	40c9a <__udivmoddi4+0x156>
   40cd2:	4661      	mov	r1, ip
   40cd4:	e7f7      	b.n	40cc6 <__udivmoddi4+0x182>
   40cd6:	4660      	mov	r0, ip
   40cd8:	e7a4      	b.n	40c24 <__udivmoddi4+0xe0>
   40cda:	4663      	mov	r3, ip
   40cdc:	e7b8      	b.n	40c50 <__udivmoddi4+0x10c>
   40cde:	4283      	cmp	r3, r0
   40ce0:	d906      	bls.n	40cf0 <__udivmoddi4+0x1ac>
   40ce2:	b916      	cbnz	r6, 40cea <__udivmoddi4+0x1a6>
   40ce4:	2100      	movs	r1, #0
   40ce6:	4608      	mov	r0, r1
   40ce8:	e77c      	b.n	40be4 <__udivmoddi4+0xa0>
   40cea:	e9c6 e000 	strd	lr, r0, [r6]
   40cee:	e7f9      	b.n	40ce4 <__udivmoddi4+0x1a0>
   40cf0:	fab3 f783 	clz	r7, r3
   40cf4:	b98f      	cbnz	r7, 40d1a <__udivmoddi4+0x1d6>
   40cf6:	4283      	cmp	r3, r0
   40cf8:	d301      	bcc.n	40cfe <__udivmoddi4+0x1ba>
   40cfa:	4572      	cmp	r2, lr
   40cfc:	d808      	bhi.n	40d10 <__udivmoddi4+0x1cc>
   40cfe:	ebbe 0402 	subs.w	r4, lr, r2
   40d02:	eb60 0303 	sbc.w	r3, r0, r3
   40d06:	2001      	movs	r0, #1
   40d08:	469c      	mov	ip, r3
   40d0a:	b91e      	cbnz	r6, 40d14 <__udivmoddi4+0x1d0>
   40d0c:	2100      	movs	r1, #0
   40d0e:	e769      	b.n	40be4 <__udivmoddi4+0xa0>
   40d10:	4638      	mov	r0, r7
   40d12:	e7fa      	b.n	40d0a <__udivmoddi4+0x1c6>
   40d14:	e9c6 4c00 	strd	r4, ip, [r6]
   40d18:	e7f8      	b.n	40d0c <__udivmoddi4+0x1c8>
   40d1a:	f1c7 0c20 	rsb	ip, r7, #32
   40d1e:	40bb      	lsls	r3, r7
   40d20:	fa0e f507 	lsl.w	r5, lr, r7
   40d24:	fa22 f40c 	lsr.w	r4, r2, ip
   40d28:	fa2e f10c 	lsr.w	r1, lr, ip
   40d2c:	40ba      	lsls	r2, r7
   40d2e:	431c      	orrs	r4, r3
   40d30:	fa20 f30c 	lsr.w	r3, r0, ip
   40d34:	40b8      	lsls	r0, r7
   40d36:	ea4f 4914 	mov.w	r9, r4, lsr #16
   40d3a:	4301      	orrs	r1, r0
   40d3c:	fa1f fe84 	uxth.w	lr, r4
   40d40:	fbb3 f8f9 	udiv	r8, r3, r9
   40d44:	fb09 3018 	mls	r0, r9, r8, r3
   40d48:	0c0b      	lsrs	r3, r1, #16
   40d4a:	fb08 fa0e 	mul.w	sl, r8, lr
   40d4e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   40d52:	459a      	cmp	sl, r3
   40d54:	d940      	bls.n	40dd8 <__udivmoddi4+0x294>
   40d56:	18e3      	adds	r3, r4, r3
   40d58:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   40d5c:	d204      	bcs.n	40d68 <__udivmoddi4+0x224>
   40d5e:	459a      	cmp	sl, r3
   40d60:	d902      	bls.n	40d68 <__udivmoddi4+0x224>
   40d62:	f1a8 0002 	sub.w	r0, r8, #2
   40d66:	4423      	add	r3, r4
   40d68:	eba3 030a 	sub.w	r3, r3, sl
   40d6c:	b289      	uxth	r1, r1
   40d6e:	fbb3 f8f9 	udiv	r8, r3, r9
   40d72:	fb09 3318 	mls	r3, r9, r8, r3
   40d76:	fb08 fe0e 	mul.w	lr, r8, lr
   40d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   40d7e:	458e      	cmp	lr, r1
   40d80:	d92c      	bls.n	40ddc <__udivmoddi4+0x298>
   40d82:	1861      	adds	r1, r4, r1
   40d84:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   40d88:	d204      	bcs.n	40d94 <__udivmoddi4+0x250>
   40d8a:	458e      	cmp	lr, r1
   40d8c:	d902      	bls.n	40d94 <__udivmoddi4+0x250>
   40d8e:	f1a8 0302 	sub.w	r3, r8, #2
   40d92:	4421      	add	r1, r4
   40d94:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   40d98:	eba1 010e 	sub.w	r1, r1, lr
   40d9c:	fba0 9802 	umull	r9, r8, r0, r2
   40da0:	4541      	cmp	r1, r8
   40da2:	46ce      	mov	lr, r9
   40da4:	4643      	mov	r3, r8
   40da6:	d302      	bcc.n	40dae <__udivmoddi4+0x26a>
   40da8:	d106      	bne.n	40db8 <__udivmoddi4+0x274>
   40daa:	454d      	cmp	r5, r9
   40dac:	d204      	bcs.n	40db8 <__udivmoddi4+0x274>
   40dae:	3801      	subs	r0, #1
   40db0:	ebb9 0e02 	subs.w	lr, r9, r2
   40db4:	eb68 0304 	sbc.w	r3, r8, r4
   40db8:	2e00      	cmp	r6, #0
   40dba:	d0a7      	beq.n	40d0c <__udivmoddi4+0x1c8>
   40dbc:	ebb5 020e 	subs.w	r2, r5, lr
   40dc0:	eb61 0103 	sbc.w	r1, r1, r3
   40dc4:	fa01 fc0c 	lsl.w	ip, r1, ip
   40dc8:	fa22 f307 	lsr.w	r3, r2, r7
   40dcc:	40f9      	lsrs	r1, r7
   40dce:	ea4c 0303 	orr.w	r3, ip, r3
   40dd2:	e9c6 3100 	strd	r3, r1, [r6]
   40dd6:	e799      	b.n	40d0c <__udivmoddi4+0x1c8>
   40dd8:	4640      	mov	r0, r8
   40dda:	e7c5      	b.n	40d68 <__udivmoddi4+0x224>
   40ddc:	4643      	mov	r3, r8
   40dde:	e7d9      	b.n	40d94 <__udivmoddi4+0x250>

00040de0 <strcmp>:
   40de0:	f810 2b01 	ldrb.w	r2, [r0], #1
   40de4:	f811 3b01 	ldrb.w	r3, [r1], #1
   40de8:	2a01      	cmp	r2, #1
   40dea:	bf28      	it	cs
   40dec:	429a      	cmpcs	r2, r3
   40dee:	d0f7      	beq.n	40de0 <strcmp>
   40df0:	1ad0      	subs	r0, r2, r3
   40df2:	4770      	bx	lr

00040df4 <strlen>:
   40df4:	4603      	mov	r3, r0
   40df6:	f813 2b01 	ldrb.w	r2, [r3], #1
   40dfa:	2a00      	cmp	r2, #0
   40dfc:	d1fb      	bne.n	40df6 <strlen+0x2>
   40dfe:	1a18      	subs	r0, r3, r0
   40e00:	3801      	subs	r0, #1
   40e02:	4770      	bx	lr
   40e04:	0000      	movs	r0, r0
	...

00040e08 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   40e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40e0c:	4682      	mov	sl, r0
   40e0e:	4616      	mov	r6, r2
   40e10:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   40e12:	2500      	movs	r5, #0
{
   40e14:	b09f      	sub	sp, #124	; 0x7c
   40e16:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   40e18:	7830      	ldrb	r0, [r6, #0]
   40e1a:	b910      	cbnz	r0, 40e22 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   40e1c:	4628      	mov	r0, r5
   40e1e:	f000 bd85 	b.w	4192c <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
   40e22:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
   40e24:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   40e26:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
   40e28:	d006      	beq.n	40e38 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   40e2a:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
   40e2c:	47d0      	blx	sl
   40e2e:	2800      	cmp	r0, #0
   40e30:	f2c0 857c 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   40e34:	3501      	adds	r5, #1
		if (bps == NULL) {
   40e36:	e21b      	b.n	41270 <z_cbvprintf_impl+0x468>
		} state = {
   40e38:	2218      	movs	r2, #24
   40e3a:	2100      	movs	r1, #0
   40e3c:	a810      	add	r0, sp, #64	; 0x40
   40e3e:	f01a f88b 	bl	5af58 <memset>
	if (*sp == '%') {
   40e42:	7873      	ldrb	r3, [r6, #1]
   40e44:	2b25      	cmp	r3, #37	; 0x25
   40e46:	f000 80ba 	beq.w	40fbe <z_cbvprintf_impl+0x1b6>
   40e4a:	2300      	movs	r3, #0
   40e4c:	4698      	mov	r8, r3
   40e4e:	469e      	mov	lr, r3
   40e50:	469c      	mov	ip, r3
   40e52:	4618      	mov	r0, r3
   40e54:	1c71      	adds	r1, r6, #1
   40e56:	460f      	mov	r7, r1
		switch (*sp) {
   40e58:	f811 2b01 	ldrb.w	r2, [r1], #1
   40e5c:	2a2b      	cmp	r2, #43	; 0x2b
   40e5e:	f000 80dd 	beq.w	4101c <z_cbvprintf_impl+0x214>
   40e62:	f200 80d4 	bhi.w	4100e <z_cbvprintf_impl+0x206>
   40e66:	2a20      	cmp	r2, #32
   40e68:	f000 80db 	beq.w	41022 <z_cbvprintf_impl+0x21a>
   40e6c:	2a23      	cmp	r2, #35	; 0x23
   40e6e:	f000 80db 	beq.w	41028 <z_cbvprintf_impl+0x220>
   40e72:	b12b      	cbz	r3, 40e80 <z_cbvprintf_impl+0x78>
   40e74:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   40e7c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   40e80:	f1b8 0f00 	cmp.w	r8, #0
   40e84:	d005      	beq.n	40e92 <z_cbvprintf_impl+0x8a>
   40e86:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40e8a:	f043 0320 	orr.w	r3, r3, #32
   40e8e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   40e92:	f1be 0f00 	cmp.w	lr, #0
   40e96:	d005      	beq.n	40ea4 <z_cbvprintf_impl+0x9c>
   40e98:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40e9c:	f043 0310 	orr.w	r3, r3, #16
   40ea0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   40ea4:	f1bc 0f00 	cmp.w	ip, #0
   40ea8:	d005      	beq.n	40eb6 <z_cbvprintf_impl+0xae>
   40eaa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40eae:	f043 0308 	orr.w	r3, r3, #8
   40eb2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   40eb6:	b128      	cbz	r0, 40ec4 <z_cbvprintf_impl+0xbc>
   40eb8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40ebc:	f043 0304 	orr.w	r3, r3, #4
   40ec0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   40ec4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   40ec8:	f003 0144 	and.w	r1, r3, #68	; 0x44
   40ecc:	2944      	cmp	r1, #68	; 0x44
   40ece:	d103      	bne.n	40ed8 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
   40ed0:	f36f 1386 	bfc	r3, #6, #1
   40ed4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   40ed8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   40edc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   40ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   40ee2:	970e      	str	r7, [sp, #56]	; 0x38
   40ee4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   40ee8:	f040 80a3 	bne.w	41032 <z_cbvprintf_impl+0x22a>
		conv->width_star = true;
   40eec:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   40ef0:	f043 0301 	orr.w	r3, r3, #1
   40ef4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
   40ef8:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
   40efa:	781a      	ldrb	r2, [r3, #0]
   40efc:	2a2e      	cmp	r2, #46	; 0x2e
   40efe:	bf0c      	ite	eq
   40f00:	2101      	moveq	r1, #1
   40f02:	2100      	movne	r1, #0
   40f04:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   40f08:	f361 0241 	bfi	r2, r1, #1, #1
   40f0c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   40f10:	d10c      	bne.n	40f2c <z_cbvprintf_impl+0x124>
	++sp;
   40f12:	1c5a      	adds	r2, r3, #1
   40f14:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
   40f16:	785a      	ldrb	r2, [r3, #1]
   40f18:	2a2a      	cmp	r2, #42	; 0x2a
   40f1a:	f040 809a 	bne.w	41052 <z_cbvprintf_impl+0x24a>
		conv->prec_star = true;
   40f1e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   40f22:	3302      	adds	r3, #2
		conv->prec_star = true;
   40f24:	f042 0204 	orr.w	r2, r2, #4
   40f28:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
   40f2c:	781a      	ldrb	r2, [r3, #0]
   40f2e:	2a6c      	cmp	r2, #108	; 0x6c
   40f30:	f000 80bb 	beq.w	410aa <z_cbvprintf_impl+0x2a2>
   40f34:	f200 809d 	bhi.w	41072 <z_cbvprintf_impl+0x26a>
   40f38:	2a68      	cmp	r2, #104	; 0x68
   40f3a:	f000 80a3 	beq.w	41084 <z_cbvprintf_impl+0x27c>
   40f3e:	2a6a      	cmp	r2, #106	; 0x6a
   40f40:	f000 80bc 	beq.w	410bc <z_cbvprintf_impl+0x2b4>
   40f44:	2a4c      	cmp	r2, #76	; 0x4c
   40f46:	f000 80c1 	beq.w	410cc <z_cbvprintf_impl+0x2c4>
	conv->specifier = *sp++;
   40f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   40f4e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   40f50:	9306      	str	r3, [sp, #24]
   40f52:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
   40f56:	f200 8101 	bhi.w	4115c <z_cbvprintf_impl+0x354>
   40f5a:	2a6d      	cmp	r2, #109	; 0x6d
   40f5c:	f200 80c3 	bhi.w	410e6 <z_cbvprintf_impl+0x2de>
   40f60:	2a69      	cmp	r2, #105	; 0x69
   40f62:	f200 80fb 	bhi.w	4115c <z_cbvprintf_impl+0x354>
   40f66:	2a57      	cmp	r2, #87	; 0x57
   40f68:	f200 80da 	bhi.w	41120 <z_cbvprintf_impl+0x318>
   40f6c:	2a41      	cmp	r2, #65	; 0x41
   40f6e:	d004      	beq.n	40f7a <z_cbvprintf_impl+0x172>
   40f70:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   40f74:	2b02      	cmp	r3, #2
   40f76:	f200 80f1 	bhi.w	4115c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_FP;
   40f7a:	2104      	movs	r1, #4
   40f7c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   40f80:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   40f84:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   40f88:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   40f8c:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   40f8e:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
			|| (conv->specifier == 'A');
   40f92:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   40f94:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   40f98:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
   40f9a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		conv->specifier_a = (conv->specifier == 'a')
   40f9e:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
   40fa2:	b2cb      	uxtb	r3, r1
   40fa4:	f100 8119 	bmi.w	411da <z_cbvprintf_impl+0x3d2>
		if (conv->length_mod == LENGTH_L) {
   40fa8:	f003 0278 	and.w	r2, r3, #120	; 0x78
   40fac:	2a18      	cmp	r2, #24
   40fae:	f040 8103 	bne.w	411b8 <z_cbvprintf_impl+0x3b0>
			conv->length_mod = LENGTH_NONE;
   40fb2:	f36f 03c6 	bfc	r3, #3, #4
   40fb6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
   40fba:	2300      	movs	r3, #0
   40fbc:	e0f2      	b.n	411a4 <z_cbvprintf_impl+0x39c>
		conv->specifier = *sp++;
   40fbe:	1cb2      	adds	r2, r6, #2
   40fc0:	9206      	str	r2, [sp, #24]
   40fc2:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   40fc6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   40fca:	07d9      	lsls	r1, r3, #31
   40fcc:	f140 8107 	bpl.w	411de <z_cbvprintf_impl+0x3d6>
			width = va_arg(ap, int);
   40fd0:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
   40fd4:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
   40fd6:	9204      	str	r2, [sp, #16]
			if (width < 0) {
   40fd8:	da08      	bge.n	40fec <z_cbvprintf_impl+0x1e4>
				conv->flag_dash = true;
   40fda:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   40fde:	f042 0204 	orr.w	r2, r2, #4
   40fe2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
   40fe6:	9a04      	ldr	r2, [sp, #16]
   40fe8:	4252      	negs	r2, r2
		int width = -1;
   40fea:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
   40fec:	075a      	lsls	r2, r3, #29
   40fee:	f140 80fe 	bpl.w	411ee <z_cbvprintf_impl+0x3e6>
			int arg = va_arg(ap, int);
   40ff2:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   40ff6:	2f00      	cmp	r7, #0
   40ff8:	f280 80fd 	bge.w	411f6 <z_cbvprintf_impl+0x3ee>
				conv->prec_present = false;
   40ffc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   41000:	f36f 0341 	bfc	r3, #1, #1
   41004:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   41008:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   4100c:	e0f3      	b.n	411f6 <z_cbvprintf_impl+0x3ee>
		switch (*sp) {
   4100e:	2a2d      	cmp	r2, #45	; 0x2d
   41010:	d00d      	beq.n	4102e <z_cbvprintf_impl+0x226>
   41012:	2a30      	cmp	r2, #48	; 0x30
   41014:	f47f af2d 	bne.w	40e72 <z_cbvprintf_impl+0x6a>
   41018:	2301      	movs	r3, #1
	} while (loop);
   4101a:	e71c      	b.n	40e56 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
   4101c:	f04f 0c01 	mov.w	ip, #1
   41020:	e719      	b.n	40e56 <z_cbvprintf_impl+0x4e>
   41022:	f04f 0e01 	mov.w	lr, #1
   41026:	e716      	b.n	40e56 <z_cbvprintf_impl+0x4e>
   41028:	f04f 0801 	mov.w	r8, #1
   4102c:	e713      	b.n	40e56 <z_cbvprintf_impl+0x4e>
   4102e:	2001      	movs	r0, #1
   41030:	e711      	b.n	40e56 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
   41032:	a80e      	add	r0, sp, #56	; 0x38
   41034:	f003 ff7c 	bl	44f30 <extract_decimal>
	if (sp != wp) {
   41038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4103a:	42bb      	cmp	r3, r7
   4103c:	f43f af5d 	beq.w	40efa <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
   41040:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
   41044:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   41046:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
   41048:	f360 0241 	bfi	r2, r0, #1, #1
   4104c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   41050:	e753      	b.n	40efa <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
   41052:	a80e      	add	r0, sp, #56	; 0x38
   41054:	f003 ff6c 	bl	44f30 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   41058:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
   4105c:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   4105e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   41062:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   41066:	f362 0341 	bfi	r3, r2, #1, #1
   4106a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
   4106e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   41070:	e75c      	b.n	40f2c <z_cbvprintf_impl+0x124>
	switch (*sp) {
   41072:	2a74      	cmp	r2, #116	; 0x74
   41074:	d026      	beq.n	410c4 <z_cbvprintf_impl+0x2bc>
   41076:	2a7a      	cmp	r2, #122	; 0x7a
   41078:	f47f af67 	bne.w	40f4a <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
   4107c:	2106      	movs	r1, #6
   4107e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   41082:	e00c      	b.n	4109e <z_cbvprintf_impl+0x296>
		if (*++sp == 'h') {
   41084:	785a      	ldrb	r2, [r3, #1]
   41086:	2a68      	cmp	r2, #104	; 0x68
   41088:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   4108c:	d106      	bne.n	4109c <z_cbvprintf_impl+0x294>
			conv->length_mod = LENGTH_HH;
   4108e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   41090:	f361 02c6 	bfi	r2, r1, #3, #4
   41094:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   41098:	3302      	adds	r3, #2
   4109a:	e756      	b.n	40f4a <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
   4109c:	2102      	movs	r1, #2
   4109e:	f361 02c6 	bfi	r2, r1, #3, #4
   410a2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   410a6:	3301      	adds	r3, #1
   410a8:	e74f      	b.n	40f4a <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
   410aa:	785a      	ldrb	r2, [r3, #1]
   410ac:	2a6c      	cmp	r2, #108	; 0x6c
   410ae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   410b2:	d101      	bne.n	410b8 <z_cbvprintf_impl+0x2b0>
			conv->length_mod = LENGTH_LL;
   410b4:	2104      	movs	r1, #4
   410b6:	e7eb      	b.n	41090 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_L;
   410b8:	2103      	movs	r1, #3
   410ba:	e7f0      	b.n	4109e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_J;
   410bc:	2105      	movs	r1, #5
   410be:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   410c2:	e7ec      	b.n	4109e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_T;
   410c4:	2107      	movs	r1, #7
   410c6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   410ca:	e7e8      	b.n	4109e <z_cbvprintf_impl+0x296>
		conv->unsupported = true;
   410cc:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   410d0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   410d4:	f022 0202 	bic.w	r2, r2, #2
   410d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   410dc:	f042 0202 	orr.w	r2, r2, #2
   410e0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   410e4:	e7df      	b.n	410a6 <z_cbvprintf_impl+0x29e>
	switch (conv->specifier) {
   410e6:	3a6e      	subs	r2, #110	; 0x6e
   410e8:	b2d3      	uxtb	r3, r2
   410ea:	2201      	movs	r2, #1
   410ec:	409a      	lsls	r2, r3
   410ee:	f240 4382 	movw	r3, #1154	; 0x482
   410f2:	421a      	tst	r2, r3
   410f4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   410f8:	d137      	bne.n	4116a <z_cbvprintf_impl+0x362>
   410fa:	f012 0f24 	tst.w	r2, #36	; 0x24
   410fe:	d15f      	bne.n	411c0 <z_cbvprintf_impl+0x3b8>
   41100:	07d1      	lsls	r1, r2, #31
   41102:	d52b      	bpl.n	4115c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
   41104:	2103      	movs	r1, #3
   41106:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   4110a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   4110e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   41112:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   41116:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   41118:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   4111c:	4143      	adcs	r3, r0
   4111e:	e041      	b.n	411a4 <z_cbvprintf_impl+0x39c>
   41120:	2001      	movs	r0, #1
	switch (conv->specifier) {
   41122:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   41126:	b2c9      	uxtb	r1, r1
   41128:	fa00 f101 	lsl.w	r1, r0, r1
   4112c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   41130:	f47f af23 	bne.w	40f7a <z_cbvprintf_impl+0x172>
   41134:	f640 0301 	movw	r3, #2049	; 0x801
   41138:	4219      	tst	r1, r3
   4113a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   4113e:	d11a      	bne.n	41176 <z_cbvprintf_impl+0x36e>
   41140:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   41144:	d00a      	beq.n	4115c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_SINT;
   41146:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   4114a:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   4114e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   41152:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   41154:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   41158:	f47f af2f 	bne.w	40fba <z_cbvprintf_impl+0x1b2>
		conv->invalid = true;
   4115c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   41160:	f043 0301 	orr.w	r3, r3, #1
   41164:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   41168:	e727      	b.n	40fba <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_UINT;
   4116a:	2102      	movs	r1, #2
   4116c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   41170:	f361 0202 	bfi	r2, r1, #0, #3
   41174:	e7eb      	b.n	4114e <z_cbvprintf_impl+0x346>
   41176:	2002      	movs	r0, #2
   41178:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   4117c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   41180:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   41184:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   41186:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   4118a:	bf02      	ittt	eq
   4118c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   41190:	f041 0101 	orreq.w	r1, r1, #1
   41194:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   41198:	2a63      	cmp	r2, #99	; 0x63
   4119a:	f47f af0e 	bne.w	40fba <z_cbvprintf_impl+0x1b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
   4119e:	3b00      	subs	r3, #0
   411a0:	bf18      	it	ne
   411a2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   411a4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   411a8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   411ac:	430b      	orrs	r3, r1
   411ae:	f363 0241 	bfi	r2, r3, #1, #1
   411b2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   411b6:	e706      	b.n	40fc6 <z_cbvprintf_impl+0x1be>
		} else if ((conv->length_mod != LENGTH_NONE)
   411b8:	f013 0f38 	tst.w	r3, #56	; 0x38
   411bc:	d1ce      	bne.n	4115c <z_cbvprintf_impl+0x354>
   411be:	e6fc      	b.n	40fba <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_PTR;
   411c0:	2103      	movs	r1, #3
   411c2:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   411c6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   411ca:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   411ce:	bf14      	ite	ne
   411d0:	2301      	movne	r3, #1
   411d2:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   411d4:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   411d8:	e7e4      	b.n	411a4 <z_cbvprintf_impl+0x39c>
			unsupported = true;
   411da:	2301      	movs	r3, #1
   411dc:	e7e2      	b.n	411a4 <z_cbvprintf_impl+0x39c>
		} else if (conv->width_present) {
   411de:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   411e2:	2a00      	cmp	r2, #0
		int width = -1;
   411e4:	bfac      	ite	ge
   411e6:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
			width = conv->width_value;
   411ea:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
   411ec:	e6fd      	b.n	40fea <z_cbvprintf_impl+0x1e2>
		} else if (conv->prec_present) {
   411ee:	079f      	lsls	r7, r3, #30
   411f0:	f57f af0a 	bpl.w	41008 <z_cbvprintf_impl+0x200>
			precision = conv->prec_value;
   411f4:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   411f6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   411f8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
   411fc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   41200:	f003 0207 	and.w	r2, r3, #7
   41204:	2a04      	cmp	r2, #4
   41206:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   4120a:	d107      	bne.n	4121c <z_cbvprintf_impl+0x414>
		    && !conv->prec_present) {
   4120c:	0790      	lsls	r0, r2, #30
   4120e:	d405      	bmi.n	4121c <z_cbvprintf_impl+0x414>
			if (conv->specifier_a) {
   41210:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
   41214:	2900      	cmp	r1, #0
   41216:	bfac      	ite	ge
   41218:	2706      	movge	r7, #6
   4121a:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
   4121c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   41220:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   41222:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   41226:	d133      	bne.n	41290 <z_cbvprintf_impl+0x488>
			switch (length_mod) {
   41228:	1ed3      	subs	r3, r2, #3
   4122a:	2b04      	cmp	r3, #4
   4122c:	d804      	bhi.n	41238 <z_cbvprintf_impl+0x430>
   4122e:	e8df f003 	tbb	[pc, r3]
   41232:	4621      	.short	0x4621
   41234:	2146      	.short	0x2146
   41236:	21          	.byte	0x21
   41237:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   41238:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   4123a:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
   4123c:	ea4f 71e3 	mov.w	r1, r3, asr #31
   41240:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   41244:	d11c      	bne.n	41280 <z_cbvprintf_impl+0x478>
				value->sint = (signed char)value->sint;
   41246:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   4124a:	17d9      	asrs	r1, r3, #31
   4124c:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   41250:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   41252:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   41256:	0799      	lsls	r1, r3, #30
   41258:	9307      	str	r3, [sp, #28]
   4125a:	d050      	beq.n	412fe <z_cbvprintf_impl+0x4f6>
			OUTS(sp, fp);
   4125c:	4632      	mov	r2, r6
   4125e:	4650      	mov	r0, sl
   41260:	9b06      	ldr	r3, [sp, #24]
   41262:	9903      	ldr	r1, [sp, #12]
   41264:	f014 fd9d 	bl	55da2 <outs>
   41268:	2800      	cmp	r0, #0
   4126a:	f2c0 835f 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   4126e:	4405      	add	r5, r0
			continue;
   41270:	9e06      	ldr	r6, [sp, #24]
   41272:	e5d1      	b.n	40e18 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   41274:	f854 3b04 	ldr.w	r3, [r4], #4
   41278:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
   4127a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   4127e:	e7e8      	b.n	41252 <z_cbvprintf_impl+0x44a>
			} else if (length_mod == LENGTH_H) {
   41280:	2a02      	cmp	r2, #2
   41282:	d1e5      	bne.n	41250 <z_cbvprintf_impl+0x448>
				value->sint = (short)value->sint;
   41284:	b219      	sxth	r1, r3
   41286:	f343 33c0 	sbfx	r3, r3, #15, #1
   4128a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
   4128e:	e7df      	b.n	41250 <z_cbvprintf_impl+0x448>
		} else if (specifier_cat == SPECIFIER_UINT) {
   41290:	2b02      	cmp	r3, #2
   41292:	d124      	bne.n	412de <z_cbvprintf_impl+0x4d6>
			switch (length_mod) {
   41294:	1ed3      	subs	r3, r2, #3
   41296:	2b04      	cmp	r3, #4
   41298:	d804      	bhi.n	412a4 <z_cbvprintf_impl+0x49c>
   4129a:	e8df f003 	tbb	[pc, r3]
   4129e:	1018      	.short	0x1018
   412a0:	1810      	.short	0x1810
   412a2:	18          	.byte	0x18
   412a3:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   412a4:	2a01      	cmp	r2, #1
   412a6:	f04f 0100 	mov.w	r1, #0
				value->uint = va_arg(ap, unsigned int);
   412aa:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   412ae:	d014      	beq.n	412da <z_cbvprintf_impl+0x4d2>
			} else if (length_mod == LENGTH_H) {
   412b0:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
   412b2:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   412b6:	d1cc      	bne.n	41252 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned short)value->uint;
   412b8:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   412ba:	9310      	str	r3, [sp, #64]	; 0x40
   412bc:	e7c9      	b.n	41252 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap,
   412be:	3407      	adds	r4, #7
   412c0:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   412c4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   412c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   412cc:	e7c1      	b.n	41252 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap, size_t);
   412ce:	f854 3b04 	ldr.w	r3, [r4], #4
   412d2:	9310      	str	r3, [sp, #64]	; 0x40
   412d4:	2300      	movs	r3, #0
   412d6:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   412d8:	e7bb      	b.n	41252 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned char)value->uint;
   412da:	b2db      	uxtb	r3, r3
   412dc:	e7cd      	b.n	4127a <z_cbvprintf_impl+0x472>
		} else if (specifier_cat == SPECIFIER_FP) {
   412de:	2b04      	cmp	r3, #4
   412e0:	d108      	bne.n	412f4 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
   412e2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   412e4:	f024 0407 	bic.w	r4, r4, #7
   412e8:	e9d4 0100 	ldrd	r0, r1, [r4]
   412ec:	3408      	adds	r4, #8
   412ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   412f2:	e7ae      	b.n	41252 <z_cbvprintf_impl+0x44a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   412f4:	2b03      	cmp	r3, #3
   412f6:	d1ac      	bne.n	41252 <z_cbvprintf_impl+0x44a>
			value->ptr = va_arg(ap, void *);
   412f8:	f854 3b04 	ldr.w	r3, [r4], #4
   412fc:	e7dd      	b.n	412ba <z_cbvprintf_impl+0x4b2>
		switch (conv->specifier) {
   412fe:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
   41302:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
   41306:	d8b3      	bhi.n	41270 <z_cbvprintf_impl+0x468>
   41308:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
   4130c:	d849      	bhi.n	413a2 <z_cbvprintf_impl+0x59a>
   4130e:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
   41312:	f000 8091 	beq.w	41438 <z_cbvprintf_impl+0x630>
   41316:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
   4131a:	d9a9      	bls.n	41270 <z_cbvprintf_impl+0x468>
   4131c:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
   41320:	d003      	beq.n	4132a <z_cbvprintf_impl+0x522>
   41322:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
   41326:	2a02      	cmp	r2, #2
   41328:	d8a2      	bhi.n	41270 <z_cbvprintf_impl+0x468>
	} u = {
   4132a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
   4132e:	2a00      	cmp	r2, #0
   41330:	f2c0 8136 	blt.w	415a0 <z_cbvprintf_impl+0x798>
	} else if (conv->flag_plus) {
   41334:	9b07      	ldr	r3, [sp, #28]
   41336:	071e      	lsls	r6, r3, #28
   41338:	f100 8135 	bmi.w	415a6 <z_cbvprintf_impl+0x79e>
	} else if (conv->flag_space) {
   4133c:	f3c3 1900 	ubfx	r9, r3, #4, #1
   41340:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   41344:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   41348:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   4134c:	2800      	cmp	r0, #0
   4134e:	f040 812d 	bne.w	415ac <z_cbvprintf_impl+0x7a4>
   41352:	ea51 0602 	orrs.w	r6, r1, r2
   41356:	bf14      	ite	ne
   41358:	2601      	movne	r6, #1
   4135a:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
   4135c:	02d2      	lsls	r2, r2, #11
   4135e:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
   41362:	02c9      	lsls	r1, r1, #11
		c = 'f';
   41364:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
   41368:	ea40 0e01 	orr.w	lr, r0, r1
   4136c:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
   41370:	bf08      	it	eq
   41372:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
   41376:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   4137a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
   4137e:	f000 819b 	beq.w	416b8 <z_cbvprintf_impl+0x8b0>
		if (is_subnormal) {
   41382:	2e00      	cmp	r6, #0
   41384:	f040 8149 	bne.w	4161a <z_cbvprintf_impl+0x812>
		fract |= BIT_63;
   41388:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   4138a:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
   4138e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   41392:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   41394:	2000      	movs	r0, #0
   41396:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   4139a:	4606      	mov	r6, r0
		fract *= 5U;
   4139c:	f04f 0c05 	mov.w	ip, #5
   413a0:	e155      	b.n	4164e <z_cbvprintf_impl+0x846>
		switch (conv->specifier) {
   413a2:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
   413a6:	2920      	cmp	r1, #32
   413a8:	f63f af62 	bhi.w	41270 <z_cbvprintf_impl+0x468>
   413ac:	a001      	add	r0, pc, #4	; (adr r0, 413b4 <z_cbvprintf_impl+0x5ac>)
   413ae:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   413b2:	bf00      	nop
   413b4:	0004153f 	.word	0x0004153f
   413b8:	00041271 	.word	0x00041271
   413bc:	00041271 	.word	0x00041271
   413c0:	00041271 	.word	0x00041271
   413c4:	00041271 	.word	0x00041271
   413c8:	00041271 	.word	0x00041271
   413cc:	00041271 	.word	0x00041271
   413d0:	00041271 	.word	0x00041271
   413d4:	00041271 	.word	0x00041271
   413d8:	0004132b 	.word	0x0004132b
   413dc:	00041271 	.word	0x00041271
   413e0:	000414c3 	.word	0x000414c3
   413e4:	000414d7 	.word	0x000414d7
   413e8:	0004132b 	.word	0x0004132b
   413ec:	0004132b 	.word	0x0004132b
   413f0:	0004132b 	.word	0x0004132b
   413f4:	00041271 	.word	0x00041271
   413f8:	000414d7 	.word	0x000414d7
   413fc:	00041271 	.word	0x00041271
   41400:	00041271 	.word	0x00041271
   41404:	00041271 	.word	0x00041271
   41408:	00041271 	.word	0x00041271
   4140c:	00041579 	.word	0x00041579
   41410:	0004153f 	.word	0x0004153f
   41414:	00041545 	.word	0x00041545
   41418:	00041271 	.word	0x00041271
   4141c:	00041271 	.word	0x00041271
   41420:	0004143f 	.word	0x0004143f
   41424:	00041271 	.word	0x00041271
   41428:	0004153f 	.word	0x0004153f
   4142c:	00041271 	.word	0x00041271
   41430:	00041271 	.word	0x00041271
   41434:	0004153f 	.word	0x0004153f
			OUTC('%');
   41438:	4658      	mov	r0, fp
   4143a:	9903      	ldr	r1, [sp, #12]
   4143c:	e4f6      	b.n	40e2c <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
   4143e:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   41440:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
   41442:	db3a      	blt.n	414ba <z_cbvprintf_impl+0x6b2>
				len = strnlen(bps, precision);
   41444:	4639      	mov	r1, r7
   41446:	4630      	mov	r0, r6
   41448:	f019 ff7c 	bl	5b344 <strnlen>
			bpe = bps + len;
   4144c:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
   4144e:	2e00      	cmp	r6, #0
   41450:	f43f af0e 	beq.w	41270 <z_cbvprintf_impl+0x468>
		char sign = 0;
   41454:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
   41458:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   4145c:	f013 0210 	ands.w	r2, r3, #16
   41460:	9205      	str	r2, [sp, #20]
   41462:	f000 8258 	beq.w	41916 <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
   41466:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   41468:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
   4146c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
   41470:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
   41472:	bf18      	it	ne
   41474:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   41476:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
   41478:	bf18      	it	ne
   4147a:	18c0      	addne	r0, r0, r3
		if (width > 0) {
   4147c:	9b04      	ldr	r3, [sp, #16]
		nj_len += conv->pad0_value;
   4147e:	f8cd 801c 	str.w	r8, [sp, #28]
		if (width > 0) {
   41482:	2b00      	cmp	r3, #0
   41484:	f340 8262 	ble.w	4194c <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
   41488:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   4148c:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
   4148e:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
   41490:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
   41492:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   41496:	f100 8259 	bmi.w	4194c <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
   4149a:	0651      	lsls	r1, r2, #25
   4149c:	f140 8249 	bpl.w	41932 <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
   414a0:	f1b9 0f00 	cmp.w	r9, #0
   414a4:	d007      	beq.n	414b6 <z_cbvprintf_impl+0x6ae>
						OUTC(sign);
   414a6:	4648      	mov	r0, r9
   414a8:	9903      	ldr	r1, [sp, #12]
   414aa:	47d0      	blx	sl
   414ac:	2800      	cmp	r0, #0
   414ae:	f2c0 823d 	blt.w	4192c <z_cbvprintf_impl+0xb24>
						sign = 0;
   414b2:	46d9      	mov	r9, fp
						OUTC(sign);
   414b4:	3501      	adds	r5, #1
					pad = '0';
   414b6:	2230      	movs	r2, #48	; 0x30
   414b8:	e23c      	b.n	41934 <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
   414ba:	4630      	mov	r0, r6
   414bc:	f7ff fc9a 	bl	40df4 <strlen>
   414c0:	e7c4      	b.n	4144c <z_cbvprintf_impl+0x644>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   414c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
   414c4:	f04f 0900 	mov.w	r9, #0
		size_t nj_len = (bpe - bps);
   414c8:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   414ca:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
			bpe = buf + 1;
   414ce:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
   414d2:	ae17      	add	r6, sp, #92	; 0x5c
   414d4:	e7c0      	b.n	41458 <z_cbvprintf_impl+0x650>
			if (conv->flag_plus) {
   414d6:	9b07      	ldr	r3, [sp, #28]
   414d8:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
   414da:	bf54      	ite	pl
   414dc:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
				sign = '+';
   414e0:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			sint = value->sint;
   414e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
   414e8:	bf58      	it	pl
   414ea:	ea4f 1949 	movpl.w	r9, r9, lsl #5
			if (sint < 0) {
   414ee:	2b00      	cmp	r3, #0
   414f0:	da06      	bge.n	41500 <z_cbvprintf_impl+0x6f8>
				sign = '-';
   414f2:	f04f 092d 	mov.w	r9, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   414f6:	4252      	negs	r2, r2
   414f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   414fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			bps = encode_uint(value->uint, conv, buf, bpe);
   41500:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   41504:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   41508:	9300      	str	r3, [sp, #0]
   4150a:	aa12      	add	r2, sp, #72	; 0x48
   4150c:	ab17      	add	r3, sp, #92	; 0x5c
   4150e:	f003 fd25 	bl	44f5c <encode_uint>
   41512:	4606      	mov	r6, r0
			if (precision >= 0) {
   41514:	2f00      	cmp	r7, #0
   41516:	db0c      	blt.n	41532 <z_cbvprintf_impl+0x72a>
				conv->flag_zero = false;
   41518:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   4151c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   41520:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
   41522:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   41526:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   41528:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   4152c:	d901      	bls.n	41532 <z_cbvprintf_impl+0x72a>
					conv->pad0_value = precision - (int)len;
   4152e:	1afb      	subs	r3, r7, r3
   41530:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
   41532:	2e00      	cmp	r6, #0
   41534:	f43f ae9c 	beq.w	41270 <z_cbvprintf_impl+0x468>
   41538:	f10d 0775 	add.w	r7, sp, #117	; 0x75
   4153c:	e05b      	b.n	415f6 <z_cbvprintf_impl+0x7ee>
		switch (conv->specifier) {
   4153e:	f04f 0900 	mov.w	r9, #0
   41542:	e7dd      	b.n	41500 <z_cbvprintf_impl+0x6f8>
			if (value->ptr != NULL) {
   41544:	9810      	ldr	r0, [sp, #64]	; 0x40
   41546:	2800      	cmp	r0, #0
   41548:	f000 81e0 	beq.w	4190c <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   4154c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   41550:	9300      	str	r3, [sp, #0]
   41552:	2100      	movs	r1, #0
   41554:	ab17      	add	r3, sp, #92	; 0x5c
   41556:	aa12      	add	r2, sp, #72	; 0x48
   41558:	f003 fd00 	bl	44f5c <encode_uint>
				conv->altform_0c = true;
   4155c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   41560:	4606      	mov	r6, r0
				conv->altform_0c = true;
   41562:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   41566:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   4156a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   4156e:	f04f 0900 	mov.w	r9, #0
				conv->altform_0c = true;
   41572:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
				goto prec_int_pad0;
   41576:	e7cd      	b.n	41514 <z_cbvprintf_impl+0x70c>
				store_count(conv, value->ptr, count);
   41578:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   4157a:	2a07      	cmp	r2, #7
   4157c:	f63f ae78 	bhi.w	41270 <z_cbvprintf_impl+0x468>
   41580:	e8df f002 	tbb	[pc, r2]
   41584:	0c06040c 	.word	0x0c06040c
   41588:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   4158c:	701d      	strb	r5, [r3, #0]
		break;
   4158e:	e66f      	b.n	41270 <z_cbvprintf_impl+0x468>
		*(short *)dp = (short)count;
   41590:	801d      	strh	r5, [r3, #0]
		break;
   41592:	e66d      	b.n	41270 <z_cbvprintf_impl+0x468>
		*(intmax_t *)dp = (intmax_t)count;
   41594:	17ea      	asrs	r2, r5, #31
   41596:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   4159a:	e669      	b.n	41270 <z_cbvprintf_impl+0x468>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   4159c:	601d      	str	r5, [r3, #0]
		break;
   4159e:	e667      	b.n	41270 <z_cbvprintf_impl+0x468>
		*sign = '-';
   415a0:	f04f 092d 	mov.w	r9, #45	; 0x2d
   415a4:	e6ce      	b.n	41344 <z_cbvprintf_impl+0x53c>
		*sign = '+';
   415a6:	f04f 092b 	mov.w	r9, #43	; 0x2b
   415aa:	e6cb      	b.n	41344 <z_cbvprintf_impl+0x53c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   415ac:	f240 76ff 	movw	r6, #2047	; 0x7ff
   415b0:	42b0      	cmp	r0, r6
   415b2:	d12f      	bne.n	41614 <z_cbvprintf_impl+0x80c>
			if (isupper((unsigned char)c)) {
   415b4:	48a0      	ldr	r0, [pc, #640]	; (41838 <z_cbvprintf_impl+0xa30>)
   415b6:	f10b 0301 	add.w	r3, fp, #1
   415ba:	b2db      	uxtb	r3, r3
   415bc:	5cc3      	ldrb	r3, [r0, r3]
		if (fract == 0) {
   415be:	430a      	orrs	r2, r1
   415c0:	f003 0303 	and.w	r3, r3, #3
   415c4:	d11e      	bne.n	41604 <z_cbvprintf_impl+0x7fc>
			if (isupper((unsigned char)c)) {
   415c6:	2b01      	cmp	r3, #1
   415c8:	bf0b      	itete	eq
   415ca:	2349      	moveq	r3, #73	; 0x49
   415cc:	2369      	movne	r3, #105	; 0x69
   415ce:	214e      	moveq	r1, #78	; 0x4e
   415d0:	216e      	movne	r1, #110	; 0x6e
   415d2:	bf0c      	ite	eq
   415d4:	2246      	moveq	r2, #70	; 0x46
   415d6:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
   415d8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
   415dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
   415e0:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
   415e4:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
   415e8:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
   415ec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
   415f0:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
   415f4:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   415f6:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
   415f8:	f1b9 0f00 	cmp.w	r9, #0
   415fc:	f43f af2c 	beq.w	41458 <z_cbvprintf_impl+0x650>
			nj_len += 1U;
   41600:	3001      	adds	r0, #1
   41602:	e729      	b.n	41458 <z_cbvprintf_impl+0x650>
			if (isupper((unsigned char)c)) {
   41604:	2b01      	cmp	r3, #1
   41606:	bf15      	itete	ne
   41608:	236e      	movne	r3, #110	; 0x6e
   4160a:	234e      	moveq	r3, #78	; 0x4e
   4160c:	2161      	movne	r1, #97	; 0x61
   4160e:	2141      	moveq	r1, #65	; 0x41
   41610:	461a      	mov	r2, r3
   41612:	e7e1      	b.n	415d8 <z_cbvprintf_impl+0x7d0>
	bool is_subnormal = (expo == 0) && (fract != 0);
   41614:	2600      	movs	r6, #0
   41616:	e6a1      	b.n	4135c <z_cbvprintf_impl+0x554>
				expo--;
   41618:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   4161a:	1849      	adds	r1, r1, r1
   4161c:	4152      	adcs	r2, r2
   4161e:	2a00      	cmp	r2, #0
   41620:	dafa      	bge.n	41618 <z_cbvprintf_impl+0x810>
   41622:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
   41626:	e6af      	b.n	41388 <z_cbvprintf_impl+0x580>
			fract >>= 1;
   41628:	0849      	lsrs	r1, r1, #1
   4162a:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   4162e:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   41630:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   41634:	4640      	mov	r0, r8
			expo++;
   41636:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   4163a:	d2f5      	bcs.n	41628 <z_cbvprintf_impl+0x820>
		expo++;
   4163c:	f100 0802 	add.w	r8, r0, #2
		decexp--;
   41640:	2001      	movs	r0, #1
		fract *= 5U;
   41642:	fb0c fe02 	mul.w	lr, ip, r2
   41646:	fba1 120c 	umull	r1, r2, r1, ip
		decexp--;
   4164a:	3e01      	subs	r6, #1
		fract *= 5U;
   4164c:	4472      	add	r2, lr
	while (expo < -2) {
   4164e:	f118 0f02 	cmn.w	r8, #2
   41652:	dbe9      	blt.n	41628 <z_cbvprintf_impl+0x820>
   41654:	b108      	cbz	r0, 4165a <z_cbvprintf_impl+0x852>
   41656:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
		fract += 2;
   4165a:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
   4165e:	f1b8 0f00 	cmp.w	r8, #0
   41662:	dc2c      	bgt.n	416be <z_cbvprintf_impl+0x8b6>
	fract >>= (4 - expo);
   41664:	f1c8 0004 	rsb	r0, r8, #4
   41668:	f1a0 0c20 	sub.w	ip, r0, #32
   4166c:	f108 081c 	add.w	r8, r8, #28
   41670:	40c2      	lsrs	r2, r0
   41672:	fa01 f808 	lsl.w	r8, r1, r8
   41676:	fa21 fc0c 	lsr.w	ip, r1, ip
   4167a:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
   4167c:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
   41680:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
   41684:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
   41686:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
   4168a:	d138      	bne.n	416fe <z_cbvprintf_impl+0x8f6>
		if (decexp < (-4 + 1) || decexp > precision) {
   4168c:	1cf0      	adds	r0, r6, #3
   4168e:	db01      	blt.n	41694 <z_cbvprintf_impl+0x88c>
   41690:	42b7      	cmp	r7, r6
   41692:	da2a      	bge.n	416ea <z_cbvprintf_impl+0x8e2>
			c += 'e' - 'g';  /* e or E */
   41694:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
   41698:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   4169a:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
   4169e:	dd7b      	ble.n	41798 <z_cbvprintf_impl+0x990>
		if (!conv->flag_hash && (precision > 0)) {
   416a0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
				precision--;
   416a4:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
   416a6:	0683      	lsls	r3, r0, #26
   416a8:	d476      	bmi.n	41798 <z_cbvprintf_impl+0x990>
   416aa:	1e3b      	subs	r3, r7, #0
   416ac:	bf18      	it	ne
   416ae:	2301      	movne	r3, #1
	bool prune_zero = false;
   416b0:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
   416b2:	f107 0801 	add.w	r8, r7, #1
   416b6:	e02c      	b.n	41712 <z_cbvprintf_impl+0x90a>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   416b8:	f04f 0800 	mov.w	r8, #0
   416bc:	e66a      	b.n	41394 <z_cbvprintf_impl+0x58c>
		fract += 2;
   416be:	3202      	adds	r2, #2
   416c0:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   416c4:	a80c      	add	r0, sp, #48	; 0x30
		expo--;
   416c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
   416ca:	3601      	adds	r6, #1
		fract += 2;
   416cc:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
   416d0:	f014 fb38 	bl	55d44 <_ldiv5>
		decexp++;
   416d4:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
			fract <<= 1;
   416d8:	1892      	adds	r2, r2, r2
   416da:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   416dc:	2900      	cmp	r1, #0
			expo--;
   416de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
   416e2:	daf9      	bge.n	416d8 <z_cbvprintf_impl+0x8d0>
   416e4:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
   416e8:	e7b7      	b.n	4165a <z_cbvprintf_impl+0x852>
		if (!conv->flag_hash && (precision > 0)) {
   416ea:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
			precision -= decexp;
   416ee:	1bbf      	subs	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
   416f0:	0698      	lsls	r0, r3, #26
   416f2:	d44f      	bmi.n	41794 <z_cbvprintf_impl+0x98c>
   416f4:	1e3b      	subs	r3, r7, #0
   416f6:	bf18      	it	ne
   416f8:	2301      	movne	r3, #1
	bool prune_zero = false;
   416fa:	9305      	str	r3, [sp, #20]
   416fc:	e004      	b.n	41708 <z_cbvprintf_impl+0x900>
   416fe:	2300      	movs	r3, #0
	if (c == 'f') {
   41700:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
   41704:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
   41706:	d1d4      	bne.n	416b2 <z_cbvprintf_impl+0x8aa>
		if (decimals < 0) {
   41708:	eb17 0806 	adds.w	r8, r7, r6
   4170c:	f04f 0b66 	mov.w	fp, #102	; 0x66
   41710:	d444      	bmi.n	4179c <z_cbvprintf_impl+0x994>
	if (decimals > 16) {
   41712:	f1b8 0f10 	cmp.w	r8, #16
   41716:	bfa8      	it	ge
   41718:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
   4171c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 41830 <z_cbvprintf_impl+0xa28>
   41720:	2010      	movs	r0, #16
   41722:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   41726:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
   41728:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
   4172c:	f1b8 0f00 	cmp.w	r8, #0
   41730:	d137      	bne.n	417a2 <z_cbvprintf_impl+0x99a>
	fract += round;
   41732:	1812      	adds	r2, r2, r0
   41734:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
   41738:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   4173c:	d241      	bcs.n	417c2 <z_cbvprintf_impl+0x9ba>
	fract += round;
   4173e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
   41742:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
   41744:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
   41748:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
   4174c:	f040 80bd 	bne.w	418ca <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
   41750:	2e00      	cmp	r6, #0
   41752:	dc41      	bgt.n	417d8 <z_cbvprintf_impl+0x9d0>
			*buf++ = '0';
   41754:	2130      	movs	r1, #48	; 0x30
   41756:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
   4175a:	2a00      	cmp	r2, #0
   4175c:	d16e      	bne.n	4183c <z_cbvprintf_impl+0xa34>
   4175e:	2f00      	cmp	r7, #0
   41760:	f340 81b5 	ble.w	41ace <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
   41764:	222e      	movs	r2, #46	; 0x2e
   41766:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   4176a:	b186      	cbz	r6, 4178e <z_cbvprintf_impl+0x986>
			conv->pad0_value = -decexp;
   4176c:	4272      	negs	r2, r6
   4176e:	42ba      	cmp	r2, r7
   41770:	bfa8      	it	ge
   41772:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   41774:	2a00      	cmp	r2, #0
   41776:	9213      	str	r2, [sp, #76]	; 0x4c
			precision -= conv->pad0_value;
   41778:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   4177c:	bfd4      	ite	le
   4177e:	2200      	movle	r2, #0
   41780:	2201      	movgt	r2, #1
   41782:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   41786:	f362 1145 	bfi	r1, r2, #5, #1
   4178a:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
   4178e:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
   41792:	e039      	b.n	41808 <z_cbvprintf_impl+0xa00>
	bool prune_zero = false;
   41794:	2300      	movs	r3, #0
   41796:	e7b0      	b.n	416fa <z_cbvprintf_impl+0x8f2>
   41798:	2300      	movs	r3, #0
   4179a:	e789      	b.n	416b0 <z_cbvprintf_impl+0x8a8>
			decimals = 0;
   4179c:	f04f 0800 	mov.w	r8, #0
   417a0:	e7bc      	b.n	4171c <z_cbvprintf_impl+0x914>
	*v >>= 1;
   417a2:	0840      	lsrs	r0, r0, #1
   417a4:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
   417a8:	085b      	lsrs	r3, r3, #1
   417aa:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
   417ae:	a80e      	add	r0, sp, #56	; 0x38
   417b0:	e9cd 2108 	strd	r2, r1, [sp, #32]
   417b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   417b8:	f014 fac4 	bl	55d44 <_ldiv5>
   417bc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
   417c0:	e7b2      	b.n	41728 <z_cbvprintf_impl+0x920>
	*v >>= 1;
   417c2:	0852      	lsrs	r2, r2, #1
   417c4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
   417c8:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
   417ca:	0849      	lsrs	r1, r1, #1
   417cc:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
   417d0:	3601      	adds	r6, #1
	_ldiv5(v);
   417d2:	f014 fab7 	bl	55d44 <_ldiv5>
		decexp++;
   417d6:	e7b4      	b.n	41742 <z_cbvprintf_impl+0x93a>
	char *buf = bps;
   417d8:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
   417dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   417de:	2900      	cmp	r1, #0
   417e0:	dd09      	ble.n	417f6 <z_cbvprintf_impl+0x9ee>
				*buf++ = _get_digit(&fract, &digit_count);
   417e2:	a90b      	add	r1, sp, #44	; 0x2c
   417e4:	a80c      	add	r0, sp, #48	; 0x30
   417e6:	9207      	str	r2, [sp, #28]
   417e8:	f014 fac4 	bl	55d74 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   417ec:	3e01      	subs	r6, #1
   417ee:	9a07      	ldr	r2, [sp, #28]
				*buf++ = _get_digit(&fract, &digit_count);
   417f0:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   417f4:	d1f2      	bne.n	417dc <z_cbvprintf_impl+0x9d4>
			conv->pad0_value = decexp;
   417f6:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
   417f8:	b99a      	cbnz	r2, 41822 <z_cbvprintf_impl+0xa1a>
   417fa:	2f00      	cmp	r7, #0
   417fc:	f340 8165 	ble.w	41aca <z_cbvprintf_impl+0xcc2>
			*buf++ = '.';
   41800:	212e      	movs	r1, #46	; 0x2e
   41802:	f808 1b01 	strb.w	r1, [r8], #1
   41806:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
   41808:	2f00      	cmp	r7, #0
   4180a:	dd20      	ble.n	4184e <z_cbvprintf_impl+0xa46>
   4180c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   4180e:	2a00      	cmp	r2, #0
   41810:	dd1d      	ble.n	4184e <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
   41812:	a90b      	add	r1, sp, #44	; 0x2c
   41814:	a80c      	add	r0, sp, #48	; 0x30
   41816:	f014 faad 	bl	55d74 <_get_digit>
		precision--;
   4181a:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
   4181c:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   41820:	e7f2      	b.n	41808 <z_cbvprintf_impl+0xa00>
			*buf++ = '.';
   41822:	222e      	movs	r2, #46	; 0x2e
   41824:	f808 2b01 	strb.w	r2, [r8], #1
   41828:	e7ed      	b.n	41806 <z_cbvprintf_impl+0x9fe>
   4182a:	bf00      	nop
   4182c:	f3af 8000 	nop.w
   41830:	00000000 	.word	0x00000000
   41834:	08000000 	.word	0x08000000
   41838:	0006098c 	.word	0x0006098c
   4183c:	222e      	movs	r2, #46	; 0x2e
   4183e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   41842:	2e00      	cmp	r6, #0
   41844:	d0a3      	beq.n	4178e <z_cbvprintf_impl+0x986>
   41846:	2f00      	cmp	r7, #0
   41848:	dc90      	bgt.n	4176c <z_cbvprintf_impl+0x964>
			*buf++ = '.';
   4184a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
   4184e:	9b05      	ldr	r3, [sp, #20]
   41850:	2b00      	cmp	r3, #0
   41852:	d14e      	bne.n	418f2 <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
   41854:	9714      	str	r7, [sp, #80]	; 0x50
   41856:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
   41858:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   4185c:	2a45      	cmp	r2, #69	; 0x45
   4185e:	d123      	bne.n	418a8 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
   41860:	2e00      	cmp	r6, #0
			decexp = -decexp;
   41862:	bfba      	itte	lt
   41864:	4276      	neglt	r6, r6
			*buf++ = '-';
   41866:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   41868:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
   4186a:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
   4186c:	bfc8      	it	gt
   4186e:	2164      	movgt	r1, #100	; 0x64
   41870:	707b      	strb	r3, [r7, #1]
   41872:	bfc4      	itt	gt
   41874:	fbb6 f3f1 	udivgt	r3, r6, r1
			decexp %= 100;
   41878:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
   4187c:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
   41880:	bfc8      	it	gt
   41882:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   41886:	fbb6 f3f1 	udiv	r3, r6, r1
			*buf++ = '-';
   4188a:	bfd2      	itee	le
   4188c:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
   4188e:	1cfa      	addgt	r2, r7, #3
   41890:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
   41892:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
   41896:	4617      	mov	r7, r2
   41898:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   4189c:	fb01 6313 	mls	r3, r1, r3, r6
   418a0:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   418a2:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
   418a6:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
   418a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   418aa:	2b00      	cmp	r3, #0
   418ac:	dc2c      	bgt.n	41908 <z_cbvprintf_impl+0xb00>
   418ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
   418b0:	2b00      	cmp	r3, #0
   418b2:	bfd4      	ite	le
   418b4:	2300      	movle	r3, #0
   418b6:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   418b8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   418bc:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   418c0:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   418c2:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
   418c6:	703b      	strb	r3, [r7, #0]
	return bps;
   418c8:	e694      	b.n	415f4 <z_cbvprintf_impl+0x7ec>
		*buf = _get_digit(&fract, &digit_count);
   418ca:	a90b      	add	r1, sp, #44	; 0x2c
   418cc:	a80c      	add	r0, sp, #48	; 0x30
   418ce:	9207      	str	r2, [sp, #28]
   418d0:	f014 fa50 	bl	55d74 <_get_digit>
		if (*buf++ != '0') {
   418d4:	9a07      	ldr	r2, [sp, #28]
   418d6:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   418d8:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
			decexp--;
   418dc:	bf18      	it	ne
   418de:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
   418e2:	b912      	cbnz	r2, 418ea <z_cbvprintf_impl+0xae2>
   418e4:	2f00      	cmp	r7, #0
   418e6:	f340 80f2 	ble.w	41ace <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
   418ea:	222e      	movs	r2, #46	; 0x2e
   418ec:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   418f0:	e74d      	b.n	4178e <z_cbvprintf_impl+0x986>
		while (*--buf == '0') {
   418f2:	4647      	mov	r7, r8
   418f4:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   418f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   418fc:	2a30      	cmp	r2, #48	; 0x30
   418fe:	d0f8      	beq.n	418f2 <z_cbvprintf_impl+0xaea>
   41900:	2a2e      	cmp	r2, #46	; 0x2e
   41902:	bf08      	it	eq
   41904:	4647      	moveq	r7, r8
   41906:	e7a7      	b.n	41858 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
   41908:	2301      	movs	r3, #1
   4190a:	e7d5      	b.n	418b8 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
   4190c:	4f71      	ldr	r7, [pc, #452]	; (41ad4 <z_cbvprintf_impl+0xccc>)
		char sign = 0;
   4190e:	4681      	mov	r9, r0
			bps = "(nil)";
   41910:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
   41912:	2005      	movs	r0, #5
   41914:	e5a0      	b.n	41458 <z_cbvprintf_impl+0x650>
		} else if (conv->altform_0) {
   41916:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   41918:	bf48      	it	mi
   4191a:	3001      	addmi	r0, #1
   4191c:	e5a4      	b.n	41468 <z_cbvprintf_impl+0x660>
					OUTC(pad);
   4191e:	4610      	mov	r0, r2
   41920:	9209      	str	r2, [sp, #36]	; 0x24
   41922:	9903      	ldr	r1, [sp, #12]
   41924:	47d0      	blx	sl
   41926:	2800      	cmp	r0, #0
   41928:	9a09      	ldr	r2, [sp, #36]	; 0x24
   4192a:	da05      	bge.n	41938 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
   4192c:	b01f      	add	sp, #124	; 0x7c
   4192e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   41932:	2220      	movs	r2, #32
					pad = '0';
   41934:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
   41938:	4659      	mov	r1, fp
   4193a:	2900      	cmp	r1, #0
   4193c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   41940:	dced      	bgt.n	4191e <z_cbvprintf_impl+0xb16>
   41942:	9b04      	ldr	r3, [sp, #16]
   41944:	f8cd b010 	str.w	fp, [sp, #16]
   41948:	442b      	add	r3, r5
   4194a:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
   4194c:	f1b9 0f00 	cmp.w	r9, #0
   41950:	d005      	beq.n	4195e <z_cbvprintf_impl+0xb56>
			OUTC(sign);
   41952:	4648      	mov	r0, r9
   41954:	9903      	ldr	r1, [sp, #12]
   41956:	47d0      	blx	sl
   41958:	2800      	cmp	r0, #0
   4195a:	dbe7      	blt.n	4192c <z_cbvprintf_impl+0xb24>
   4195c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   4195e:	9b08      	ldr	r3, [sp, #32]
   41960:	2b00      	cmp	r3, #0
   41962:	d077      	beq.n	41a54 <z_cbvprintf_impl+0xc4c>
			if (conv->specifier_a) {
   41964:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
   41968:	2b00      	cmp	r3, #0
   4196a:	db28      	blt.n	419be <z_cbvprintf_impl+0xbb6>
   4196c:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
   4196e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 41ad8 <z_cbvprintf_impl+0xcd0>
   41972:	7818      	ldrb	r0, [r3, #0]
   41974:	469b      	mov	fp, r3
   41976:	f819 2000 	ldrb.w	r2, [r9, r0]
   4197a:	3301      	adds	r3, #1
   4197c:	0752      	lsls	r2, r2, #29
   4197e:	d43f      	bmi.n	41a00 <z_cbvprintf_impl+0xbf8>
				if (!conv->pad_postdp) {
   41980:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   41984:	1bae      	subs	r6, r5, r6
   41986:	0698      	lsls	r0, r3, #26
   41988:	445e      	add	r6, fp
   4198a:	d407      	bmi.n	4199c <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
   4198c:	4642      	mov	r2, r8
   4198e:	2a00      	cmp	r2, #0
   41990:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   41994:	dc3b      	bgt.n	41a0e <z_cbvprintf_impl+0xc06>
   41996:	9b07      	ldr	r3, [sp, #28]
   41998:	4433      	add	r3, r6
   4199a:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
   4199c:	f89b 0000 	ldrb.w	r0, [fp]
   419a0:	282e      	cmp	r0, #46	; 0x2e
   419a2:	d10a      	bne.n	419ba <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
   419a4:	9903      	ldr	r1, [sp, #12]
   419a6:	47d0      	blx	sl
						OUTC('0');
   419a8:	2800      	cmp	r0, #0
   419aa:	dbbf      	blt.n	4192c <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
   419ac:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
   419b0:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   419b4:	dc31      	bgt.n	41a1a <z_cbvprintf_impl+0xc12>
					OUTC(*cp++);
   419b6:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
   419ba:	465d      	mov	r5, fp
   419bc:	e038      	b.n	41a30 <z_cbvprintf_impl+0xc28>
   419be:	46b1      	mov	r9, r6
				while (*cp != 'p') {
   419c0:	f899 0000 	ldrb.w	r0, [r9]
   419c4:	46c8      	mov	r8, r9
   419c6:	2870      	cmp	r0, #112	; 0x70
   419c8:	f109 0901 	add.w	r9, r9, #1
   419cc:	d113      	bne.n	419f6 <z_cbvprintf_impl+0xbee>
   419ce:	1bae      	subs	r6, r5, r6
   419d0:	9d14      	ldr	r5, [sp, #80]	; 0x50
   419d2:	4446      	add	r6, r8
			while (pad_len-- > 0) {
   419d4:	4435      	add	r5, r6
   419d6:	1bab      	subs	r3, r5, r6
   419d8:	2b00      	cmp	r3, #0
   419da:	dc33      	bgt.n	41a44 <z_cbvprintf_impl+0xc3c>
			OUTS(cp, bpe);
   419dc:	463b      	mov	r3, r7
   419de:	4642      	mov	r2, r8
   419e0:	4650      	mov	r0, sl
   419e2:	9903      	ldr	r1, [sp, #12]
   419e4:	f014 f9dd 	bl	55da2 <outs>
   419e8:	2800      	cmp	r0, #0
   419ea:	db9f      	blt.n	4192c <z_cbvprintf_impl+0xb24>
   419ec:	4430      	add	r0, r6
   419ee:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
   419f0:	4605      	mov	r5, r0
   419f2:	4406      	add	r6, r0
   419f4:	e064      	b.n	41ac0 <z_cbvprintf_impl+0xcb8>
					OUTC(*cp++);
   419f6:	9903      	ldr	r1, [sp, #12]
   419f8:	47d0      	blx	sl
   419fa:	2800      	cmp	r0, #0
   419fc:	dae0      	bge.n	419c0 <z_cbvprintf_impl+0xbb8>
   419fe:	e795      	b.n	4192c <z_cbvprintf_impl+0xb24>
   41a00:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
   41a02:	9903      	ldr	r1, [sp, #12]
   41a04:	47d0      	blx	sl
   41a06:	2800      	cmp	r0, #0
   41a08:	9b05      	ldr	r3, [sp, #20]
   41a0a:	dab2      	bge.n	41972 <z_cbvprintf_impl+0xb6a>
   41a0c:	e78e      	b.n	4192c <z_cbvprintf_impl+0xb24>
						OUTC('0');
   41a0e:	2030      	movs	r0, #48	; 0x30
   41a10:	9903      	ldr	r1, [sp, #12]
   41a12:	47d0      	blx	sl
   41a14:	2800      	cmp	r0, #0
   41a16:	dab9      	bge.n	4198c <z_cbvprintf_impl+0xb84>
   41a18:	e788      	b.n	4192c <z_cbvprintf_impl+0xb24>
						OUTC('0');
   41a1a:	2030      	movs	r0, #48	; 0x30
   41a1c:	9903      	ldr	r1, [sp, #12]
   41a1e:	47d0      	blx	sl
   41a20:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   41a24:	e7c0      	b.n	419a8 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
   41a26:	9903      	ldr	r1, [sp, #12]
   41a28:	47d0      	blx	sl
   41a2a:	2800      	cmp	r0, #0
   41a2c:	f6ff af7e 	blt.w	4192c <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
   41a30:	7828      	ldrb	r0, [r5, #0]
   41a32:	46a8      	mov	r8, r5
   41a34:	f819 3000 	ldrb.w	r3, [r9, r0]
   41a38:	3501      	adds	r5, #1
   41a3a:	0759      	lsls	r1, r3, #29
   41a3c:	d4f3      	bmi.n	41a26 <z_cbvprintf_impl+0xc1e>
   41a3e:	eba6 060b 	sub.w	r6, r6, fp
   41a42:	e7c5      	b.n	419d0 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
   41a44:	2030      	movs	r0, #48	; 0x30
   41a46:	9903      	ldr	r1, [sp, #12]
   41a48:	47d0      	blx	sl
   41a4a:	2800      	cmp	r0, #0
   41a4c:	f6ff af6e 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41a50:	3601      	adds	r6, #1
   41a52:	e7c0      	b.n	419d6 <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
   41a54:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   41a58:	06da      	lsls	r2, r3, #27
   41a5a:	d401      	bmi.n	41a60 <z_cbvprintf_impl+0xc58>
   41a5c:	071b      	lsls	r3, r3, #28
   41a5e:	d506      	bpl.n	41a6e <z_cbvprintf_impl+0xc66>
				OUTC('0');
   41a60:	2030      	movs	r0, #48	; 0x30
   41a62:	9903      	ldr	r1, [sp, #12]
   41a64:	47d0      	blx	sl
   41a66:	2800      	cmp	r0, #0
   41a68:	f6ff af60 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41a6c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   41a6e:	9b05      	ldr	r3, [sp, #20]
   41a70:	b13b      	cbz	r3, 41a82 <z_cbvprintf_impl+0xc7a>
				OUTC(conv->specifier);
   41a72:	9903      	ldr	r1, [sp, #12]
   41a74:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   41a78:	47d0      	blx	sl
   41a7a:	2800      	cmp	r0, #0
   41a7c:	f6ff af56 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41a80:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   41a82:	44a8      	add	r8, r5
   41a84:	e006      	b.n	41a94 <z_cbvprintf_impl+0xc8c>
				OUTC('0');
   41a86:	2030      	movs	r0, #48	; 0x30
   41a88:	9903      	ldr	r1, [sp, #12]
   41a8a:	47d0      	blx	sl
   41a8c:	2800      	cmp	r0, #0
   41a8e:	f6ff af4d 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41a92:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   41a94:	eba8 0305 	sub.w	r3, r8, r5
   41a98:	2b00      	cmp	r3, #0
   41a9a:	dcf4      	bgt.n	41a86 <z_cbvprintf_impl+0xc7e>
			OUTS(bps, bpe);
   41a9c:	463b      	mov	r3, r7
   41a9e:	4632      	mov	r2, r6
   41aa0:	4650      	mov	r0, sl
   41aa2:	9903      	ldr	r1, [sp, #12]
   41aa4:	f014 f97d 	bl	55da2 <outs>
   41aa8:	2800      	cmp	r0, #0
   41aaa:	f6ff af3f 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41aae:	4428      	add	r0, r5
   41ab0:	e79d      	b.n	419ee <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
   41ab2:	2020      	movs	r0, #32
   41ab4:	9903      	ldr	r1, [sp, #12]
   41ab6:	47d0      	blx	sl
   41ab8:	2800      	cmp	r0, #0
   41aba:	f6ff af37 	blt.w	4192c <z_cbvprintf_impl+0xb24>
   41abe:	3501      	adds	r5, #1
		while (width > 0) {
   41ac0:	1b73      	subs	r3, r6, r5
   41ac2:	2b00      	cmp	r3, #0
   41ac4:	dcf5      	bgt.n	41ab2 <z_cbvprintf_impl+0xcaa>
   41ac6:	f7ff bbd3 	b.w	41270 <z_cbvprintf_impl+0x468>
			decexp = 0;
   41aca:	4616      	mov	r6, r2
   41acc:	e6bf      	b.n	4184e <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
   41ace:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
   41ad2:	e6bc      	b.n	4184e <z_cbvprintf_impl+0xa46>
   41ad4:	0005d7eb 	.word	0x0005d7eb
   41ad8:	0006098d 	.word	0x0006098d
   41adc:	00000000 	.word	0x00000000

00041ae0 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
   41ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   41ae2:	ed2d 8b02 	vpush	{d8}
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   41ae6:	2500      	movs	r5, #0
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   41ae8:	2304      	movs	r3, #4
{
   41aea:	b08b      	sub	sp, #44	; 0x2c
   41aec:	460e      	mov	r6, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   41aee:	4607      	mov	r7, r0
	struct at_param_list resp_list = {0};
   41af0:	e9cd 5508 	strd	r5, r5, [sp, #32]
	size_t len = sizeof(tmp_buf) - 1;
   41af4:	9305      	str	r3, [sp, #20]
	if ((at_response == NULL) || (cfg == NULL)) {
   41af6:	2800      	cmp	r0, #0
   41af8:	f000 80c0 	beq.w	41c7c <parse_edrx+0x19c>
   41afc:	2900      	cmp	r1, #0
   41afe:	f000 80bd 	beq.w	41c7c <parse_edrx+0x19c>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   41b02:	2106      	movs	r1, #6
   41b04:	a808      	add	r0, sp, #32
   41b06:	f015 fe5a 	bl	577be <at_params_list_init>
	if (err) {
   41b0a:	4604      	mov	r4, r0
   41b0c:	b178      	cbz	r0, 41b2e <parse_edrx+0x4e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   41b0e:	4b60      	ldr	r3, [pc, #384]	; (41c90 <parse_edrx+0x1b0>)
   41b10:	9003      	str	r0, [sp, #12]
   41b12:	e9cd 5301 	strd	r5, r3, [sp, #4]
   41b16:	2201      	movs	r2, #1
   41b18:	462b      	mov	r3, r5
   41b1a:	4628      	mov	r0, r5
   41b1c:	495d      	ldr	r1, [pc, #372]	; (41c94 <parse_edrx+0x1b4>)
   41b1e:	9500      	str	r5, [sp, #0]
   41b20:	f015 ffa6 	bl	57a70 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   41b24:	4620      	mov	r0, r4
   41b26:	b00b      	add	sp, #44	; 0x2c
   41b28:	ecbd 8b02 	vpop	{d8}
   41b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   41b2e:	4601      	mov	r1, r0
   41b30:	aa08      	add	r2, sp, #32
   41b32:	4638      	mov	r0, r7
   41b34:	f015 fe2a 	bl	5778c <at_parser_params_from_str>
	if (err) {
   41b38:	4604      	mov	r4, r0
   41b3a:	b170      	cbz	r0, 41b5a <parse_edrx+0x7a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   41b3c:	4b56      	ldr	r3, [pc, #344]	; (41c98 <parse_edrx+0x1b8>)
   41b3e:	9003      	str	r0, [sp, #12]
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   41b40:	e9cd 5301 	strd	r5, r3, [sp, #4]
   41b44:	462b      	mov	r3, r5
   41b46:	9500      	str	r5, [sp, #0]
   41b48:	2201      	movs	r2, #1
   41b4a:	4618      	mov	r0, r3
   41b4c:	4951      	ldr	r1, [pc, #324]	; (41c94 <parse_edrx+0x1b4>)
   41b4e:	f015 ff8f 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   41b52:	a808      	add	r0, sp, #32
   41b54:	f015 fe5d 	bl	57812 <at_params_list_free>
	return err;
   41b58:	e7e4      	b.n	41b24 <parse_edrx+0x44>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   41b5a:	2103      	movs	r1, #3
   41b5c:	ab05      	add	r3, sp, #20
   41b5e:	aa06      	add	r2, sp, #24
   41b60:	a808      	add	r0, sp, #32
   41b62:	f015 ff34 	bl	579ce <at_params_string_get>
	if (err) {
   41b66:	4604      	mov	r4, r0
   41b68:	b110      	cbz	r0, 41b70 <parse_edrx+0x90>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   41b6a:	4b4c      	ldr	r3, [pc, #304]	; (41c9c <parse_edrx+0x1bc>)
   41b6c:	9003      	str	r0, [sp, #12]
   41b6e:	e7e7      	b.n	41b40 <parse_edrx+0x60>
	tmp_buf[len] = '\0';
   41b70:	9b05      	ldr	r3, [sp, #20]
	idx = strtoul(tmp_buf, NULL, 2);
   41b72:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   41b74:	3328      	adds	r3, #40	; 0x28
   41b76:	446b      	add	r3, sp
   41b78:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   41b7c:	2202      	movs	r2, #2
   41b7e:	a806      	add	r0, sp, #24
   41b80:	f012 f9fa 	bl	53f78 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   41b84:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   41b86:	b2c7      	uxtb	r7, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   41b88:	aa04      	add	r2, sp, #16
   41b8a:	a808      	add	r0, sp, #32
   41b8c:	f015 fef3 	bl	57976 <at_params_int_get>
	if (err) {
   41b90:	4604      	mov	r4, r0
   41b92:	b110      	cbz	r0, 41b9a <parse_edrx+0xba>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   41b94:	4b42      	ldr	r3, [pc, #264]	; (41ca0 <parse_edrx+0x1c0>)
   41b96:	9003      	str	r0, [sp, #12]
   41b98:	e7d2      	b.n	41b40 <parse_edrx+0x60>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41b9a:	9b04      	ldr	r3, [sp, #16]
   41b9c:	2b04      	cmp	r3, #4
   41b9e:	d022      	beq.n	41be6 <parse_edrx+0x106>
   41ba0:	2b05      	cmp	r3, #5
   41ba2:	d00c      	beq.n	41bbe <parse_edrx+0xde>
		LOG_WRN("Active LTE mode could not be determined");
   41ba4:	4b3f      	ldr	r3, [pc, #252]	; (41ca4 <parse_edrx+0x1c4>)
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41ba6:	7030      	strb	r0, [r6, #0]
		LOG_WRN("Active LTE mode could not be determined");
   41ba8:	2202      	movs	r2, #2
   41baa:	e9cd 0301 	strd	r0, r3, [sp, #4]
   41bae:	4939      	ldr	r1, [pc, #228]	; (41c94 <parse_edrx+0x1b4>)
   41bb0:	4603      	mov	r3, r0
   41bb2:	9000      	str	r0, [sp, #0]
   41bb4:	f015 ff5c 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   41bb8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   41bbc:	e7c9      	b.n	41b52 <parse_edrx+0x72>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41bbe:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   41bc0:	2f0f      	cmp	r7, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41bc2:	7033      	strb	r3, [r6, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   41bc4:	d933      	bls.n	41c2e <parse_edrx+0x14e>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   41bc6:	f06f 0315 	mvn.w	r3, #21
   41bca:	9303      	str	r3, [sp, #12]
   41bcc:	4b36      	ldr	r3, [pc, #216]	; (41ca8 <parse_edrx+0x1c8>)
   41bce:	9302      	str	r3, [sp, #8]
   41bd0:	2300      	movs	r3, #0
   41bd2:	e9cd 3300 	strd	r3, r3, [sp]
   41bd6:	2201      	movs	r2, #1
   41bd8:	4618      	mov	r0, r3
   41bda:	492e      	ldr	r1, [pc, #184]	; (41c94 <parse_edrx+0x1b4>)
   41bdc:	f015 ff48 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   41be0:	f06f 0415 	mvn.w	r4, #21
   41be4:	e7b5      	b.n	41b52 <parse_edrx+0x72>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41be6:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   41be8:	2f0f      	cmp	r7, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   41bea:	7033      	strb	r3, [r6, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   41bec:	d8eb      	bhi.n	41bc6 <parse_edrx+0xe6>
		*ptw_multiplier = 1.28;
   41bee:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 41cac <parse_edrx+0x1cc>
		multiplier = edrx_lookup_ltem[idx];
   41bf2:	4b2f      	ldr	r3, [pc, #188]	; (41cb0 <parse_edrx+0x1d0>)
   41bf4:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   41bf8:	b1f8      	cbz	r0, 41c3a <parse_edrx+0x15a>
   41bfa:	f7fe fbf7 	bl	403ec <__aeabi_i2d>
   41bfe:	a322      	add	r3, pc, #136	; (adr r3, 41c88 <parse_edrx+0x1a8>)
   41c00:	e9d3 2300 	ldrd	r2, r3, [r3]
   41c04:	f7fe fc5c 	bl	404c0 <__aeabi_dmul>
   41c08:	f7fe ff32 	bl	40a70 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   41c0c:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   41c0e:	6070      	str	r0, [r6, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   41c10:	ab05      	add	r3, sp, #20
   41c12:	aa06      	add	r2, sp, #24
   41c14:	a808      	add	r0, sp, #32
	len = sizeof(tmp_buf) - 1;
   41c16:	9105      	str	r1, [sp, #20]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   41c18:	f015 fed9 	bl	579ce <at_params_string_get>
	if (err) {
   41c1c:	4604      	mov	r4, r0
   41c1e:	b170      	cbz	r0, 41c3e <parse_edrx+0x15e>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   41c20:	4b24      	ldr	r3, [pc, #144]	; (41cb4 <parse_edrx+0x1d4>)
   41c22:	9003      	str	r0, [sp, #12]
   41c24:	9302      	str	r3, [sp, #8]
   41c26:	2300      	movs	r3, #0
   41c28:	e9cd 3300 	strd	r3, r3, [sp]
   41c2c:	e78c      	b.n	41b48 <parse_edrx+0x68>
		multiplier = edrx_lookup_nbiot[idx];
   41c2e:	4b22      	ldr	r3, [pc, #136]	; (41cb8 <parse_edrx+0x1d8>)
		*ptw_multiplier = 2.56;
   41c30:	ed9f 8a22 	vldr	s16, [pc, #136]	; 41cbc <parse_edrx+0x1dc>
		multiplier = edrx_lookup_nbiot[idx];
   41c34:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
		break;
   41c38:	e7de      	b.n	41bf8 <parse_edrx+0x118>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   41c3a:	4821      	ldr	r0, [pc, #132]	; (41cc0 <parse_edrx+0x1e0>)
   41c3c:	e7e6      	b.n	41c0c <parse_edrx+0x12c>
	tmp_buf[len] = '\0';
   41c3e:	9b05      	ldr	r3, [sp, #20]
	idx = strtoul(tmp_buf, NULL, 2);
   41c40:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   41c42:	3328      	adds	r3, #40	; 0x28
   41c44:	446b      	add	r3, sp
   41c46:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   41c4a:	2202      	movs	r2, #2
   41c4c:	a806      	add	r0, sp, #24
   41c4e:	f012 f993 	bl	53f78 <strtoul>
   41c52:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
   41c54:	280f      	cmp	r0, #15
   41c56:	d906      	bls.n	41c66 <parse_edrx+0x186>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   41c58:	4b1a      	ldr	r3, [pc, #104]	; (41cc4 <parse_edrx+0x1e4>)
   41c5a:	9003      	str	r0, [sp, #12]
   41c5c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   41c60:	9400      	str	r4, [sp, #0]
   41c62:	4623      	mov	r3, r4
   41c64:	e7b7      	b.n	41bd6 <parse_edrx+0xf6>
	idx += 1;
   41c66:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   41c68:	b2c0      	uxtb	r0, r0
   41c6a:	ee07 0a90 	vmov	s15, r0
   41c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   41c72:	ee67 7a88 	vmul.f32	s15, s15, s16
   41c76:	edc6 7a02 	vstr	s15, [r6, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   41c7a:	e76a      	b.n	41b52 <parse_edrx+0x72>
		return -EINVAL;
   41c7c:	f06f 0415 	mvn.w	r4, #21
   41c80:	e750      	b.n	41b24 <parse_edrx+0x44>
   41c82:	bf00      	nop
   41c84:	f3af 8000 	nop.w
   41c88:	47ae147b 	.word	0x47ae147b
   41c8c:	40247ae1 	.word	0x40247ae1
   41c90:	0005f463 	.word	0x0005f463
   41c94:	0005bf94 	.word	0x0005bf94
   41c98:	0005f48c 	.word	0x0005f48c
   41c9c:	0005f4b8 	.word	0x0005f4b8
   41ca0:	0005f4e4 	.word	0x0005f4e4
   41ca4:	0005f506 	.word	0x0005f506
   41ca8:	0005f52e 	.word	0x0005f52e
   41cac:	3fa3d70a 	.word	0x3fa3d70a
   41cb0:	0005c950 	.word	0x0005c950
   41cb4:	0005f552 	.word	0x0005f552
   41cb8:	0005c930 	.word	0x0005c930
   41cbc:	4023d70a 	.word	0x4023d70a
   41cc0:	40a3d70a 	.word	0x40a3d70a
   41cc4:	0005f57d 	.word	0x0005f57d

00041cc8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   41cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41ccc:	ed2d 8b02 	vpush	{d8}
   41cd0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   41cd2:	ed9f 8b49 	vldr	d8, [pc, #292]	; 41df8 <work_queue_main+0x130>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   41cd6:	4e4a      	ldr	r6, [pc, #296]	; (41e00 <work_queue_main+0x138>)
{
   41cd8:	b084      	sub	sp, #16
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   41cda:	f04f 0320 	mov.w	r3, #32
   41cde:	f3ef 8711 	mrs	r7, BASEPRI
   41ce2:	f383 8812 	msr	BASEPRI_MAX, r3
   41ce6:	f3bf 8f6f 	isb	sy
   41cea:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   41cee:	b98d      	cbnz	r5, 41d14 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   41cf0:	2102      	movs	r1, #2
   41cf2:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   41cf6:	f018 fe6f 	bl	5a9d8 <flag_test_and_clear>
   41cfa:	2800      	cmp	r0, #0
   41cfc:	d143      	bne.n	41d86 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   41cfe:	2300      	movs	r3, #0
   41d00:	ed8d 8b00 	vstr	d8, [sp]
   41d04:	4639      	mov	r1, r7
   41d06:	9302      	str	r3, [sp, #8]
   41d08:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   41d0c:	483d      	ldr	r0, [pc, #244]	; (41e04 <work_queue_main+0x13c>)
   41d0e:	f011 f97d 	bl	5300c <z_sched_wait>
			continue;
   41d12:	e7e2      	b.n	41cda <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   41d14:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
   41d18:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   41d1a:	4295      	cmp	r5, r2
	list->head = node;
   41d1c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	list->tail = node;
   41d20:	bf08      	it	eq
   41d22:	f8c4 30cc 	streq.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
   41d26:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   41d2a:	f043 0302 	orr.w	r3, r3, #2
   41d2e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
   41d32:	68eb      	ldr	r3, [r5, #12]
   41d34:	f023 0304 	bic.w	r3, r3, #4
   41d38:	f043 0301 	orr.w	r3, r3, #1
   41d3c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   41d3e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   41d40:	f387 8811 	msr	BASEPRI, r7
   41d44:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   41d48:	4628      	mov	r0, r5
   41d4a:	4798      	blx	r3
	__asm__ volatile(
   41d4c:	f04f 0320 	mov.w	r3, #32
   41d50:	f3ef 8911 	mrs	r9, BASEPRI
   41d54:	f383 8812 	msr	BASEPRI_MAX, r3
   41d58:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   41d5c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41d5e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   41d60:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41d64:	d419      	bmi.n	41d9a <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   41d66:	60ea      	str	r2, [r5, #12]
   41d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   41d6c:	f023 0302 	bic.w	r3, r3, #2
   41d70:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
   41d74:	f389 8811 	msr	BASEPRI, r9
   41d78:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   41d7c:	05db      	lsls	r3, r3, #23
   41d7e:	d4ac      	bmi.n	41cda <work_queue_main+0x12>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
   41d80:	f011 f842 	bl	52e08 <z_impl_k_yield>
}
   41d84:	e7a9      	b.n	41cda <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   41d86:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   41d8a:	2200      	movs	r2, #0
   41d8c:	2101      	movs	r1, #1
   41d8e:	4628      	mov	r0, r5
   41d90:	f018 ff5d 	bl	5ac4e <z_sched_wake>
   41d94:	2800      	cmp	r0, #0
   41d96:	d1f8      	bne.n	41d8a <work_queue_main+0xc2>
   41d98:	e7b1      	b.n	41cfe <work_queue_main+0x36>
	return list->head;
   41d9a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   41d9c:	f023 0303 	bic.w	r3, r3, #3
   41da0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   41da2:	2800      	cmp	r0, #0
   41da4:	d0e0      	beq.n	41d68 <work_queue_main+0xa0>
	return node->next;
   41da6:	2700      	movs	r7, #0
	parent->next = child;
   41da8:	46ba      	mov	sl, r7
	return node->next;
   41daa:	f8d0 8000 	ldr.w	r8, [r0]
   41dae:	2800      	cmp	r0, #0
   41db0:	d0da      	beq.n	41d68 <work_queue_main+0xa0>
		if (wc->work == work) {
   41db2:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   41db4:	4601      	mov	r1, r0
		if (wc->work == work) {
   41db6:	4295      	cmp	r5, r2
   41db8:	d10b      	bne.n	41dd2 <work_queue_main+0x10a>
   41dba:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   41dbc:	b997      	cbnz	r7, 41de4 <work_queue_main+0x11c>
   41dbe:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   41dc0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   41dc2:	4282      	cmp	r2, r0
   41dc4:	d100      	bne.n	41dc8 <work_queue_main+0x100>
	list->tail = node;
   41dc6:	6071      	str	r1, [r6, #4]
	parent->next = child;
   41dc8:	f840 ab08 	str.w	sl, [r0], #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   41dcc:	f010 fc8c 	bl	526e8 <z_impl_k_sem_give>
}
   41dd0:	4639      	mov	r1, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   41dd2:	f1b8 0f00 	cmp.w	r8, #0
   41dd6:	d00b      	beq.n	41df0 <work_queue_main+0x128>
	return node->next;
   41dd8:	f8d8 2000 	ldr.w	r2, [r8]
   41ddc:	4640      	mov	r0, r8
   41dde:	460f      	mov	r7, r1
   41de0:	4690      	mov	r8, r2
   41de2:	e7e4      	b.n	41dae <work_queue_main+0xe6>
	parent->next = child;
   41de4:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   41de6:	6872      	ldr	r2, [r6, #4]
   41de8:	4282      	cmp	r2, r0
	list->tail = node;
   41dea:	bf08      	it	eq
   41dec:	6077      	streq	r7, [r6, #4]
}
   41dee:	e7eb      	b.n	41dc8 <work_queue_main+0x100>
   41df0:	4642      	mov	r2, r8
   41df2:	e7f3      	b.n	41ddc <work_queue_main+0x114>
   41df4:	f3af 8000 	nop.w
   41df8:	ffffffff 	.word	0xffffffff
   41dfc:	ffffffff 	.word	0xffffffff
   41e00:	2001bca8 	.word	0x2001bca8
   41e04:	2002083e 	.word	0x2002083e

00041e08 <_dtoa_r>:
   41e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41e0c:	6a47      	ldr	r7, [r0, #36]	; 0x24
   41e0e:	b097      	sub	sp, #92	; 0x5c
   41e10:	4683      	mov	fp, r0
   41e12:	9e20      	ldr	r6, [sp, #128]	; 0x80
   41e14:	9108      	str	r1, [sp, #32]
   41e16:	920c      	str	r2, [sp, #48]	; 0x30
   41e18:	9312      	str	r3, [sp, #72]	; 0x48
   41e1a:	ec55 4b10 	vmov	r4, r5, d0
   41e1e:	ed8d 0b00 	vstr	d0, [sp]
   41e22:	b97f      	cbnz	r7, 41e44 <_dtoa_r+0x3c>
   41e24:	2010      	movs	r0, #16
   41e26:	f011 fae9 	bl	533fc <malloc>
   41e2a:	4602      	mov	r2, r0
   41e2c:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   41e30:	b920      	cbnz	r0, 41e3c <_dtoa_r+0x34>
   41e32:	4ba7      	ldr	r3, [pc, #668]	; (420d0 <_dtoa_r+0x2c8>)
   41e34:	21ea      	movs	r1, #234	; 0xea
   41e36:	48a7      	ldr	r0, [pc, #668]	; (420d4 <_dtoa_r+0x2cc>)
   41e38:	f013 f846 	bl	54ec8 <__assert_func>
   41e3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
   41e40:	6007      	str	r7, [r0, #0]
   41e42:	60c7      	str	r7, [r0, #12]
   41e44:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   41e48:	6819      	ldr	r1, [r3, #0]
   41e4a:	b159      	cbz	r1, 41e64 <_dtoa_r+0x5c>
   41e4c:	685a      	ldr	r2, [r3, #4]
   41e4e:	2301      	movs	r3, #1
   41e50:	4658      	mov	r0, fp
   41e52:	4093      	lsls	r3, r2
   41e54:	604a      	str	r2, [r1, #4]
   41e56:	608b      	str	r3, [r1, #8]
   41e58:	f012 f978 	bl	5414c <_Bfree>
   41e5c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   41e60:	2200      	movs	r2, #0
   41e62:	601a      	str	r2, [r3, #0]
   41e64:	1e2b      	subs	r3, r5, #0
   41e66:	bfb7      	itett	lt
   41e68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   41e6c:	2300      	movge	r3, #0
   41e6e:	2201      	movlt	r2, #1
   41e70:	9301      	strlt	r3, [sp, #4]
   41e72:	bfa8      	it	ge
   41e74:	6033      	strge	r3, [r6, #0]
   41e76:	9f01      	ldr	r7, [sp, #4]
   41e78:	4b97      	ldr	r3, [pc, #604]	; (420d8 <_dtoa_r+0x2d0>)
   41e7a:	bfb8      	it	lt
   41e7c:	6032      	strlt	r2, [r6, #0]
   41e7e:	43bb      	bics	r3, r7
   41e80:	d119      	bne.n	41eb6 <_dtoa_r+0xae>
   41e82:	f242 730f 	movw	r3, #9999	; 0x270f
   41e86:	9a12      	ldr	r2, [sp, #72]	; 0x48
   41e88:	6013      	str	r3, [r2, #0]
   41e8a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   41e8e:	4323      	orrs	r3, r4
   41e90:	f000 85db 	beq.w	42a4a <_dtoa_r+0xc42>
   41e94:	9b21      	ldr	r3, [sp, #132]	; 0x84
   41e96:	b953      	cbnz	r3, 41eae <_dtoa_r+0xa6>
   41e98:	4b90      	ldr	r3, [pc, #576]	; (420dc <_dtoa_r+0x2d4>)
   41e9a:	e021      	b.n	41ee0 <_dtoa_r+0xd8>
   41e9c:	4b90      	ldr	r3, [pc, #576]	; (420e0 <_dtoa_r+0x2d8>)
   41e9e:	9303      	str	r3, [sp, #12]
   41ea0:	3308      	adds	r3, #8
   41ea2:	9a21      	ldr	r2, [sp, #132]	; 0x84
   41ea4:	6013      	str	r3, [r2, #0]
   41ea6:	9803      	ldr	r0, [sp, #12]
   41ea8:	b017      	add	sp, #92	; 0x5c
   41eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41eae:	4b8b      	ldr	r3, [pc, #556]	; (420dc <_dtoa_r+0x2d4>)
   41eb0:	9303      	str	r3, [sp, #12]
   41eb2:	3303      	adds	r3, #3
   41eb4:	e7f5      	b.n	41ea2 <_dtoa_r+0x9a>
   41eb6:	ed9d 7b00 	vldr	d7, [sp]
   41eba:	2200      	movs	r2, #0
   41ebc:	2300      	movs	r3, #0
   41ebe:	ec51 0b17 	vmov	r0, r1, d7
   41ec2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   41ec6:	f7fe fd63 	bl	40990 <__aeabi_dcmpeq>
   41eca:	4680      	mov	r8, r0
   41ecc:	b150      	cbz	r0, 41ee4 <_dtoa_r+0xdc>
   41ece:	2301      	movs	r3, #1
   41ed0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   41ed2:	6013      	str	r3, [r2, #0]
   41ed4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   41ed6:	b113      	cbz	r3, 41ede <_dtoa_r+0xd6>
   41ed8:	4b82      	ldr	r3, [pc, #520]	; (420e4 <_dtoa_r+0x2dc>)
   41eda:	9a21      	ldr	r2, [sp, #132]	; 0x84
   41edc:	6013      	str	r3, [r2, #0]
   41ede:	4b82      	ldr	r3, [pc, #520]	; (420e8 <_dtoa_r+0x2e0>)
   41ee0:	9303      	str	r3, [sp, #12]
   41ee2:	e7e0      	b.n	41ea6 <_dtoa_r+0x9e>
   41ee4:	f3c7 560a 	ubfx	r6, r7, #20, #11
   41ee8:	aa14      	add	r2, sp, #80	; 0x50
   41eea:	a915      	add	r1, sp, #84	; 0x54
   41eec:	4658      	mov	r0, fp
   41eee:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   41ef2:	f012 fbb3 	bl	5465c <__d2b>
   41ef6:	9002      	str	r0, [sp, #8]
   41ef8:	2e00      	cmp	r6, #0
   41efa:	d076      	beq.n	41fea <_dtoa_r+0x1e2>
   41efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   41efe:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   41f02:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   41f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
   41f0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   41f0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   41f12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   41f16:	4619      	mov	r1, r3
   41f18:	2200      	movs	r2, #0
   41f1a:	4b74      	ldr	r3, [pc, #464]	; (420ec <_dtoa_r+0x2e4>)
   41f1c:	f7fe f918 	bl	40150 <__aeabi_dsub>
   41f20:	a365      	add	r3, pc, #404	; (adr r3, 420b8 <_dtoa_r+0x2b0>)
   41f22:	e9d3 2300 	ldrd	r2, r3, [r3]
   41f26:	f7fe facb 	bl	404c0 <__aeabi_dmul>
   41f2a:	a365      	add	r3, pc, #404	; (adr r3, 420c0 <_dtoa_r+0x2b8>)
   41f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   41f30:	f7fe f910 	bl	40154 <__adddf3>
   41f34:	4604      	mov	r4, r0
   41f36:	460d      	mov	r5, r1
   41f38:	4630      	mov	r0, r6
   41f3a:	f7fe fa57 	bl	403ec <__aeabi_i2d>
   41f3e:	a362      	add	r3, pc, #392	; (adr r3, 420c8 <_dtoa_r+0x2c0>)
   41f40:	e9d3 2300 	ldrd	r2, r3, [r3]
   41f44:	f7fe fabc 	bl	404c0 <__aeabi_dmul>
   41f48:	4602      	mov	r2, r0
   41f4a:	460b      	mov	r3, r1
   41f4c:	4620      	mov	r0, r4
   41f4e:	4629      	mov	r1, r5
   41f50:	f7fe f900 	bl	40154 <__adddf3>
   41f54:	4604      	mov	r4, r0
   41f56:	460d      	mov	r5, r1
   41f58:	f7fe fd62 	bl	40a20 <__aeabi_d2iz>
   41f5c:	2200      	movs	r2, #0
   41f5e:	4607      	mov	r7, r0
   41f60:	2300      	movs	r3, #0
   41f62:	4620      	mov	r0, r4
   41f64:	4629      	mov	r1, r5
   41f66:	f7fe fd1d 	bl	409a4 <__aeabi_dcmplt>
   41f6a:	b140      	cbz	r0, 41f7e <_dtoa_r+0x176>
   41f6c:	4638      	mov	r0, r7
   41f6e:	f7fe fa3d 	bl	403ec <__aeabi_i2d>
   41f72:	4622      	mov	r2, r4
   41f74:	462b      	mov	r3, r5
   41f76:	f7fe fd0b 	bl	40990 <__aeabi_dcmpeq>
   41f7a:	b900      	cbnz	r0, 41f7e <_dtoa_r+0x176>
   41f7c:	3f01      	subs	r7, #1
   41f7e:	2f16      	cmp	r7, #22
   41f80:	d852      	bhi.n	42028 <_dtoa_r+0x220>
   41f82:	4b5b      	ldr	r3, [pc, #364]	; (420f0 <_dtoa_r+0x2e8>)
   41f84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   41f88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   41f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   41f90:	f7fe fd08 	bl	409a4 <__aeabi_dcmplt>
   41f94:	2800      	cmp	r0, #0
   41f96:	d049      	beq.n	4202c <_dtoa_r+0x224>
   41f98:	3f01      	subs	r7, #1
   41f9a:	2300      	movs	r3, #0
   41f9c:	9311      	str	r3, [sp, #68]	; 0x44
   41f9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   41fa0:	1b9b      	subs	r3, r3, r6
   41fa2:	1e5a      	subs	r2, r3, #1
   41fa4:	bf4c      	ite	mi
   41fa6:	f1c3 0301 	rsbmi	r3, r3, #1
   41faa:	2300      	movpl	r3, #0
   41fac:	9207      	str	r2, [sp, #28]
   41fae:	bf45      	ittet	mi
   41fb0:	9306      	strmi	r3, [sp, #24]
   41fb2:	2300      	movmi	r3, #0
   41fb4:	9306      	strpl	r3, [sp, #24]
   41fb6:	9307      	strmi	r3, [sp, #28]
   41fb8:	2f00      	cmp	r7, #0
   41fba:	db39      	blt.n	42030 <_dtoa_r+0x228>
   41fbc:	9b07      	ldr	r3, [sp, #28]
   41fbe:	9710      	str	r7, [sp, #64]	; 0x40
   41fc0:	443b      	add	r3, r7
   41fc2:	9307      	str	r3, [sp, #28]
   41fc4:	2300      	movs	r3, #0
   41fc6:	9309      	str	r3, [sp, #36]	; 0x24
   41fc8:	9b08      	ldr	r3, [sp, #32]
   41fca:	2b09      	cmp	r3, #9
   41fcc:	d866      	bhi.n	4209c <_dtoa_r+0x294>
   41fce:	2b05      	cmp	r3, #5
   41fd0:	bfc5      	ittet	gt
   41fd2:	3b04      	subgt	r3, #4
   41fd4:	2400      	movgt	r4, #0
   41fd6:	2401      	movle	r4, #1
   41fd8:	9308      	strgt	r3, [sp, #32]
   41fda:	9b08      	ldr	r3, [sp, #32]
   41fdc:	3b02      	subs	r3, #2
   41fde:	2b03      	cmp	r3, #3
   41fe0:	d867      	bhi.n	420b2 <_dtoa_r+0x2aa>
   41fe2:	e8df f003 	tbb	[pc, r3]
   41fe6:	3a2d      	.short	0x3a2d
   41fe8:	5938      	.short	0x5938
   41fea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
   41fee:	441e      	add	r6, r3
   41ff0:	f206 4332 	addw	r3, r6, #1074	; 0x432
   41ff4:	2b20      	cmp	r3, #32
   41ff6:	bfc9      	itett	gt
   41ff8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   41ffc:	f1c3 0320 	rsble	r3, r3, #32
   42000:	409f      	lslgt	r7, r3
   42002:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
   42006:	bfd8      	it	le
   42008:	fa04 f003 	lslle.w	r0, r4, r3
   4200c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   42010:	bfc4      	itt	gt
   42012:	fa24 f303 	lsrgt.w	r3, r4, r3
   42016:	ea47 0003 	orrgt.w	r0, r7, r3
   4201a:	f7fe f9d7 	bl	403cc <__aeabi_ui2d>
   4201e:	2201      	movs	r2, #1
   42020:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
   42024:	9213      	str	r2, [sp, #76]	; 0x4c
   42026:	e776      	b.n	41f16 <_dtoa_r+0x10e>
   42028:	2301      	movs	r3, #1
   4202a:	e7b7      	b.n	41f9c <_dtoa_r+0x194>
   4202c:	9011      	str	r0, [sp, #68]	; 0x44
   4202e:	e7b6      	b.n	41f9e <_dtoa_r+0x196>
   42030:	9b06      	ldr	r3, [sp, #24]
   42032:	1bdb      	subs	r3, r3, r7
   42034:	9306      	str	r3, [sp, #24]
   42036:	427b      	negs	r3, r7
   42038:	9309      	str	r3, [sp, #36]	; 0x24
   4203a:	2300      	movs	r3, #0
   4203c:	9310      	str	r3, [sp, #64]	; 0x40
   4203e:	e7c3      	b.n	41fc8 <_dtoa_r+0x1c0>
   42040:	2300      	movs	r3, #0
   42042:	930d      	str	r3, [sp, #52]	; 0x34
   42044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   42046:	2b00      	cmp	r3, #0
   42048:	dc56      	bgt.n	420f8 <_dtoa_r+0x2f0>
   4204a:	2301      	movs	r3, #1
   4204c:	4699      	mov	r9, r3
   4204e:	461a      	mov	r2, r3
   42050:	9304      	str	r3, [sp, #16]
   42052:	920c      	str	r2, [sp, #48]	; 0x30
   42054:	e00c      	b.n	42070 <_dtoa_r+0x268>
   42056:	2301      	movs	r3, #1
   42058:	e7f3      	b.n	42042 <_dtoa_r+0x23a>
   4205a:	2300      	movs	r3, #0
   4205c:	930d      	str	r3, [sp, #52]	; 0x34
   4205e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   42060:	18fb      	adds	r3, r7, r3
   42062:	f103 0901 	add.w	r9, r3, #1
   42066:	9304      	str	r3, [sp, #16]
   42068:	464b      	mov	r3, r9
   4206a:	2b01      	cmp	r3, #1
   4206c:	bfb8      	it	lt
   4206e:	2301      	movlt	r3, #1
   42070:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
   42074:	2100      	movs	r1, #0
   42076:	2204      	movs	r2, #4
   42078:	f102 0514 	add.w	r5, r2, #20
   4207c:	429d      	cmp	r5, r3
   4207e:	d93f      	bls.n	42100 <_dtoa_r+0x2f8>
   42080:	6041      	str	r1, [r0, #4]
   42082:	4658      	mov	r0, fp
   42084:	f012 f822 	bl	540cc <_Balloc>
   42088:	9003      	str	r0, [sp, #12]
   4208a:	2800      	cmp	r0, #0
   4208c:	d13b      	bne.n	42106 <_dtoa_r+0x2fe>
   4208e:	4b19      	ldr	r3, [pc, #100]	; (420f4 <_dtoa_r+0x2ec>)
   42090:	4602      	mov	r2, r0
   42092:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   42096:	e6ce      	b.n	41e36 <_dtoa_r+0x2e>
   42098:	2301      	movs	r3, #1
   4209a:	e7df      	b.n	4205c <_dtoa_r+0x254>
   4209c:	2401      	movs	r4, #1
   4209e:	2300      	movs	r3, #0
   420a0:	940d      	str	r4, [sp, #52]	; 0x34
   420a2:	9308      	str	r3, [sp, #32]
   420a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   420a8:	2200      	movs	r2, #0
   420aa:	4699      	mov	r9, r3
   420ac:	9304      	str	r3, [sp, #16]
   420ae:	2312      	movs	r3, #18
   420b0:	e7cf      	b.n	42052 <_dtoa_r+0x24a>
   420b2:	2301      	movs	r3, #1
   420b4:	930d      	str	r3, [sp, #52]	; 0x34
   420b6:	e7f5      	b.n	420a4 <_dtoa_r+0x29c>
   420b8:	636f4361 	.word	0x636f4361
   420bc:	3fd287a7 	.word	0x3fd287a7
   420c0:	8b60c8b3 	.word	0x8b60c8b3
   420c4:	3fc68a28 	.word	0x3fc68a28
   420c8:	509f79fb 	.word	0x509f79fb
   420cc:	3fd34413 	.word	0x3fd34413
   420d0:	00060ac8 	.word	0x00060ac8
   420d4:	00060adf 	.word	0x00060adf
   420d8:	7ff00000 	.word	0x7ff00000
   420dc:	00060ac4 	.word	0x00060ac4
   420e0:	00060abb 	.word	0x00060abb
   420e4:	0005f3f2 	.word	0x0005f3f2
   420e8:	0005f3f1 	.word	0x0005f3f1
   420ec:	3ff80000 	.word	0x3ff80000
   420f0:	0005c0e0 	.word	0x0005c0e0
   420f4:	00060b3b 	.word	0x00060b3b
   420f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   420fa:	4699      	mov	r9, r3
   420fc:	9304      	str	r3, [sp, #16]
   420fe:	e7b7      	b.n	42070 <_dtoa_r+0x268>
   42100:	3101      	adds	r1, #1
   42102:	0052      	lsls	r2, r2, #1
   42104:	e7b8      	b.n	42078 <_dtoa_r+0x270>
   42106:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   4210a:	f1b9 0f0e 	cmp.w	r9, #14
   4210e:	9a03      	ldr	r2, [sp, #12]
   42110:	601a      	str	r2, [r3, #0]
   42112:	d86f      	bhi.n	421f4 <_dtoa_r+0x3ec>
   42114:	2c00      	cmp	r4, #0
   42116:	d06d      	beq.n	421f4 <_dtoa_r+0x3ec>
   42118:	2f00      	cmp	r7, #0
   4211a:	dd36      	ble.n	4218a <_dtoa_r+0x382>
   4211c:	f007 020f 	and.w	r2, r7, #15
   42120:	4ba0      	ldr	r3, [pc, #640]	; (423a4 <_dtoa_r+0x59c>)
   42122:	05f8      	lsls	r0, r7, #23
   42124:	ea4f 1427 	mov.w	r4, r7, asr #4
   42128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   4212c:	ed93 7b00 	vldr	d7, [r3]
   42130:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   42134:	d517      	bpl.n	42166 <_dtoa_r+0x35e>
   42136:	4b9c      	ldr	r3, [pc, #624]	; (423a8 <_dtoa_r+0x5a0>)
   42138:	f004 040f 	and.w	r4, r4, #15
   4213c:	f04f 0803 	mov.w	r8, #3
   42140:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   42144:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   42148:	f7fe fae4 	bl	40714 <__aeabi_ddiv>
   4214c:	e9cd 0100 	strd	r0, r1, [sp]
   42150:	4d95      	ldr	r5, [pc, #596]	; (423a8 <_dtoa_r+0x5a0>)
   42152:	b95c      	cbnz	r4, 4216c <_dtoa_r+0x364>
   42154:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   42158:	e9dd 0100 	ldrd	r0, r1, [sp]
   4215c:	f7fe fada 	bl	40714 <__aeabi_ddiv>
   42160:	e9cd 0100 	strd	r0, r1, [sp]
   42164:	e02b      	b.n	421be <_dtoa_r+0x3b6>
   42166:	f04f 0802 	mov.w	r8, #2
   4216a:	e7f1      	b.n	42150 <_dtoa_r+0x348>
   4216c:	07e1      	lsls	r1, r4, #31
   4216e:	d509      	bpl.n	42184 <_dtoa_r+0x37c>
   42170:	f108 0801 	add.w	r8, r8, #1
   42174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   42178:	e9d5 2300 	ldrd	r2, r3, [r5]
   4217c:	f7fe f9a0 	bl	404c0 <__aeabi_dmul>
   42180:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   42184:	1064      	asrs	r4, r4, #1
   42186:	3508      	adds	r5, #8
   42188:	e7e3      	b.n	42152 <_dtoa_r+0x34a>
   4218a:	f000 8107 	beq.w	4239c <_dtoa_r+0x594>
   4218e:	427c      	negs	r4, r7
   42190:	4b84      	ldr	r3, [pc, #528]	; (423a4 <_dtoa_r+0x59c>)
   42192:	4d85      	ldr	r5, [pc, #532]	; (423a8 <_dtoa_r+0x5a0>)
   42194:	f04f 0802 	mov.w	r8, #2
   42198:	f004 020f 	and.w	r2, r4, #15
   4219c:	1124      	asrs	r4, r4, #4
   4219e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   421a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   421a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   421aa:	f7fe f989 	bl	404c0 <__aeabi_dmul>
   421ae:	2300      	movs	r3, #0
   421b0:	e9cd 0100 	strd	r0, r1, [sp]
   421b4:	2c00      	cmp	r4, #0
   421b6:	f040 80e5 	bne.w	42384 <_dtoa_r+0x57c>
   421ba:	2b00      	cmp	r3, #0
   421bc:	d1d0      	bne.n	42160 <_dtoa_r+0x358>
   421be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   421c0:	e9dd 4500 	ldrd	r4, r5, [sp]
   421c4:	2b00      	cmp	r3, #0
   421c6:	f000 814c 	beq.w	42462 <_dtoa_r+0x65a>
   421ca:	2200      	movs	r2, #0
   421cc:	4b77      	ldr	r3, [pc, #476]	; (423ac <_dtoa_r+0x5a4>)
   421ce:	4620      	mov	r0, r4
   421d0:	4629      	mov	r1, r5
   421d2:	f7fe fbe7 	bl	409a4 <__aeabi_dcmplt>
   421d6:	2800      	cmp	r0, #0
   421d8:	f000 8143 	beq.w	42462 <_dtoa_r+0x65a>
   421dc:	f1b9 0f00 	cmp.w	r9, #0
   421e0:	f000 813f 	beq.w	42462 <_dtoa_r+0x65a>
   421e4:	9b04      	ldr	r3, [sp, #16]
   421e6:	2b00      	cmp	r3, #0
   421e8:	f300 80e4 	bgt.w	423b4 <_dtoa_r+0x5ac>
   421ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   421f0:	e9cd 3400 	strd	r3, r4, [sp]
   421f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   421f6:	2b00      	cmp	r3, #0
   421f8:	db02      	blt.n	42200 <_dtoa_r+0x3f8>
   421fa:	2f0e      	cmp	r7, #14
   421fc:	f340 8242 	ble.w	42684 <_dtoa_r+0x87c>
   42200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   42202:	2a00      	cmp	r2, #0
   42204:	f040 8267 	bne.w	426d6 <_dtoa_r+0x8ce>
   42208:	9c09      	ldr	r4, [sp, #36]	; 0x24
   4220a:	2500      	movs	r5, #0
   4220c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   42210:	f1b8 0f00 	cmp.w	r8, #0
   42214:	d00d      	beq.n	42232 <_dtoa_r+0x42a>
   42216:	9b07      	ldr	r3, [sp, #28]
   42218:	2b00      	cmp	r3, #0
   4221a:	dd0a      	ble.n	42232 <_dtoa_r+0x42a>
   4221c:	4543      	cmp	r3, r8
   4221e:	9a06      	ldr	r2, [sp, #24]
   42220:	bfa8      	it	ge
   42222:	4643      	movge	r3, r8
   42224:	1ad2      	subs	r2, r2, r3
   42226:	eba8 0803 	sub.w	r8, r8, r3
   4222a:	9206      	str	r2, [sp, #24]
   4222c:	9a07      	ldr	r2, [sp, #28]
   4222e:	1ad3      	subs	r3, r2, r3
   42230:	9307      	str	r3, [sp, #28]
   42232:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42234:	b30b      	cbz	r3, 4227a <_dtoa_r+0x472>
   42236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   42238:	2b00      	cmp	r3, #0
   4223a:	f000 82a6 	beq.w	4278a <_dtoa_r+0x982>
   4223e:	2c00      	cmp	r4, #0
   42240:	f000 82a1 	beq.w	42786 <_dtoa_r+0x97e>
   42244:	4629      	mov	r1, r5
   42246:	4622      	mov	r2, r4
   42248:	4658      	mov	r0, fp
   4224a:	f012 f8a9 	bl	543a0 <__pow5mult>
   4224e:	9a02      	ldr	r2, [sp, #8]
   42250:	4601      	mov	r1, r0
   42252:	4605      	mov	r5, r0
   42254:	4658      	mov	r0, fp
   42256:	f011 fff9 	bl	5424c <__multiply>
   4225a:	9902      	ldr	r1, [sp, #8]
   4225c:	4606      	mov	r6, r0
   4225e:	4658      	mov	r0, fp
   42260:	f011 ff74 	bl	5414c <_Bfree>
   42264:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42266:	1b1b      	subs	r3, r3, r4
   42268:	9309      	str	r3, [sp, #36]	; 0x24
   4226a:	f000 8291 	beq.w	42790 <_dtoa_r+0x988>
   4226e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   42270:	4631      	mov	r1, r6
   42272:	4658      	mov	r0, fp
   42274:	f012 f894 	bl	543a0 <__pow5mult>
   42278:	9002      	str	r0, [sp, #8]
   4227a:	2101      	movs	r1, #1
   4227c:	4658      	mov	r0, fp
   4227e:	f011 ffcf 	bl	54220 <__i2b>
   42282:	9b10      	ldr	r3, [sp, #64]	; 0x40
   42284:	4604      	mov	r4, r0
   42286:	2b00      	cmp	r3, #0
   42288:	f000 8284 	beq.w	42794 <_dtoa_r+0x98c>
   4228c:	461a      	mov	r2, r3
   4228e:	4601      	mov	r1, r0
   42290:	4658      	mov	r0, fp
   42292:	f012 f885 	bl	543a0 <__pow5mult>
   42296:	9b08      	ldr	r3, [sp, #32]
   42298:	4604      	mov	r4, r0
   4229a:	2b01      	cmp	r3, #1
   4229c:	dc03      	bgt.n	422a6 <_dtoa_r+0x49e>
   4229e:	9b00      	ldr	r3, [sp, #0]
   422a0:	2b00      	cmp	r3, #0
   422a2:	f000 827c 	beq.w	4279e <_dtoa_r+0x996>
   422a6:	2600      	movs	r6, #0
   422a8:	6923      	ldr	r3, [r4, #16]
   422aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   422ae:	6918      	ldr	r0, [r3, #16]
   422b0:	f019 f938 	bl	5b524 <__hi0bits>
   422b4:	f1c0 0020 	rsb	r0, r0, #32
   422b8:	9610      	str	r6, [sp, #64]	; 0x40
   422ba:	9b07      	ldr	r3, [sp, #28]
   422bc:	4418      	add	r0, r3
   422be:	f010 001f 	ands.w	r0, r0, #31
   422c2:	f000 8291 	beq.w	427e8 <_dtoa_r+0x9e0>
   422c6:	f1c0 0320 	rsb	r3, r0, #32
   422ca:	2b04      	cmp	r3, #4
   422cc:	f340 8281 	ble.w	427d2 <_dtoa_r+0x9ca>
   422d0:	f1c0 001c 	rsb	r0, r0, #28
   422d4:	9b06      	ldr	r3, [sp, #24]
   422d6:	4403      	add	r3, r0
   422d8:	4480      	add	r8, r0
   422da:	9306      	str	r3, [sp, #24]
   422dc:	9b07      	ldr	r3, [sp, #28]
   422de:	4403      	add	r3, r0
   422e0:	9307      	str	r3, [sp, #28]
   422e2:	9b06      	ldr	r3, [sp, #24]
   422e4:	2b00      	cmp	r3, #0
   422e6:	dd05      	ble.n	422f4 <_dtoa_r+0x4ec>
   422e8:	461a      	mov	r2, r3
   422ea:	9902      	ldr	r1, [sp, #8]
   422ec:	4658      	mov	r0, fp
   422ee:	f012 f8b1 	bl	54454 <__lshift>
   422f2:	9002      	str	r0, [sp, #8]
   422f4:	9b07      	ldr	r3, [sp, #28]
   422f6:	2b00      	cmp	r3, #0
   422f8:	dd05      	ble.n	42306 <_dtoa_r+0x4fe>
   422fa:	4621      	mov	r1, r4
   422fc:	461a      	mov	r2, r3
   422fe:	4658      	mov	r0, fp
   42300:	f012 f8a8 	bl	54454 <__lshift>
   42304:	4604      	mov	r4, r0
   42306:	9b11      	ldr	r3, [sp, #68]	; 0x44
   42308:	2b00      	cmp	r3, #0
   4230a:	f000 8276 	beq.w	427fa <_dtoa_r+0x9f2>
   4230e:	4621      	mov	r1, r4
   42310:	9802      	ldr	r0, [sp, #8]
   42312:	f019 f956 	bl	5b5c2 <__mcmp>
   42316:	2800      	cmp	r0, #0
   42318:	f280 826f 	bge.w	427fa <_dtoa_r+0x9f2>
   4231c:	2300      	movs	r3, #0
   4231e:	220a      	movs	r2, #10
   42320:	9902      	ldr	r1, [sp, #8]
   42322:	4658      	mov	r0, fp
   42324:	f011 ff34 	bl	54190 <__multadd>
   42328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   4232a:	1e7e      	subs	r6, r7, #1
   4232c:	9002      	str	r0, [sp, #8]
   4232e:	2b00      	cmp	r3, #0
   42330:	f000 825c 	beq.w	427ec <_dtoa_r+0x9e4>
   42334:	2300      	movs	r3, #0
   42336:	4629      	mov	r1, r5
   42338:	220a      	movs	r2, #10
   4233a:	4658      	mov	r0, fp
   4233c:	f011 ff28 	bl	54190 <__multadd>
   42340:	9b04      	ldr	r3, [sp, #16]
   42342:	4605      	mov	r5, r0
   42344:	2b00      	cmp	r3, #0
   42346:	dc03      	bgt.n	42350 <_dtoa_r+0x548>
   42348:	9b08      	ldr	r3, [sp, #32]
   4234a:	2b02      	cmp	r3, #2
   4234c:	f300 825e 	bgt.w	4280c <_dtoa_r+0xa04>
   42350:	f1b8 0f00 	cmp.w	r8, #0
   42354:	dd05      	ble.n	42362 <_dtoa_r+0x55a>
   42356:	4629      	mov	r1, r5
   42358:	4642      	mov	r2, r8
   4235a:	4658      	mov	r0, fp
   4235c:	f012 f87a 	bl	54454 <__lshift>
   42360:	4605      	mov	r5, r0
   42362:	9b10      	ldr	r3, [sp, #64]	; 0x40
   42364:	2b00      	cmp	r3, #0
   42366:	f000 82d0 	beq.w	4290a <_dtoa_r+0xb02>
   4236a:	6869      	ldr	r1, [r5, #4]
   4236c:	4658      	mov	r0, fp
   4236e:	f011 fead 	bl	540cc <_Balloc>
   42372:	4607      	mov	r7, r0
   42374:	2800      	cmp	r0, #0
   42376:	f040 827f 	bne.w	42878 <_dtoa_r+0xa70>
   4237a:	4b0d      	ldr	r3, [pc, #52]	; (423b0 <_dtoa_r+0x5a8>)
   4237c:	4602      	mov	r2, r0
   4237e:	f240 21ea 	movw	r1, #746	; 0x2ea
   42382:	e558      	b.n	41e36 <_dtoa_r+0x2e>
   42384:	07e2      	lsls	r2, r4, #31
   42386:	d506      	bpl.n	42396 <_dtoa_r+0x58e>
   42388:	f108 0801 	add.w	r8, r8, #1
   4238c:	e9d5 2300 	ldrd	r2, r3, [r5]
   42390:	f7fe f896 	bl	404c0 <__aeabi_dmul>
   42394:	2301      	movs	r3, #1
   42396:	1064      	asrs	r4, r4, #1
   42398:	3508      	adds	r5, #8
   4239a:	e70b      	b.n	421b4 <_dtoa_r+0x3ac>
   4239c:	f04f 0802 	mov.w	r8, #2
   423a0:	e70d      	b.n	421be <_dtoa_r+0x3b6>
   423a2:	bf00      	nop
   423a4:	0005c0e0 	.word	0x0005c0e0
   423a8:	0005c0b8 	.word	0x0005c0b8
   423ac:	3ff00000 	.word	0x3ff00000
   423b0:	00060b3b 	.word	0x00060b3b
   423b4:	4620      	mov	r0, r4
   423b6:	2200      	movs	r2, #0
   423b8:	4bac      	ldr	r3, [pc, #688]	; (4266c <_dtoa_r+0x864>)
   423ba:	4629      	mov	r1, r5
   423bc:	f7fe f880 	bl	404c0 <__aeabi_dmul>
   423c0:	1e7e      	subs	r6, r7, #1
   423c2:	f108 0801 	add.w	r8, r8, #1
   423c6:	9c04      	ldr	r4, [sp, #16]
   423c8:	e9cd 0100 	strd	r0, r1, [sp]
   423cc:	4640      	mov	r0, r8
   423ce:	f7fe f80d 	bl	403ec <__aeabi_i2d>
   423d2:	e9dd 2300 	ldrd	r2, r3, [sp]
   423d6:	f7fe f873 	bl	404c0 <__aeabi_dmul>
   423da:	4ba5      	ldr	r3, [pc, #660]	; (42670 <_dtoa_r+0x868>)
   423dc:	2200      	movs	r2, #0
   423de:	f7fd feb9 	bl	40154 <__adddf3>
   423e2:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   423e6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   423ea:	930f      	str	r3, [sp, #60]	; 0x3c
   423ec:	2c00      	cmp	r4, #0
   423ee:	d13b      	bne.n	42468 <_dtoa_r+0x660>
   423f0:	2200      	movs	r2, #0
   423f2:	4ba0      	ldr	r3, [pc, #640]	; (42674 <_dtoa_r+0x86c>)
   423f4:	e9dd 0100 	ldrd	r0, r1, [sp]
   423f8:	f7fd feaa 	bl	40150 <__aeabi_dsub>
   423fc:	4602      	mov	r2, r0
   423fe:	460b      	mov	r3, r1
   42400:	e9cd 2300 	strd	r2, r3, [sp]
   42404:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   42408:	f7fe faea 	bl	409e0 <__aeabi_dcmpgt>
   4240c:	2800      	cmp	r0, #0
   4240e:	f040 8157 	bne.w	426c0 <_dtoa_r+0x8b8>
   42412:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
   42416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   4241a:	e9dd 0100 	ldrd	r0, r1, [sp]
   4241e:	f7fe fac1 	bl	409a4 <__aeabi_dcmplt>
   42422:	2800      	cmp	r0, #0
   42424:	f43f aee2 	beq.w	421ec <_dtoa_r+0x3e4>
   42428:	2400      	movs	r4, #0
   4242a:	4625      	mov	r5, r4
   4242c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   4242e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   42432:	43de      	mvns	r6, r3
   42434:	f04f 0800 	mov.w	r8, #0
   42438:	4621      	mov	r1, r4
   4243a:	4658      	mov	r0, fp
   4243c:	f011 fe86 	bl	5414c <_Bfree>
   42440:	2d00      	cmp	r5, #0
   42442:	f000 80a9 	beq.w	42598 <_dtoa_r+0x790>
   42446:	f1b8 0f00 	cmp.w	r8, #0
   4244a:	d005      	beq.n	42458 <_dtoa_r+0x650>
   4244c:	45a8      	cmp	r8, r5
   4244e:	d003      	beq.n	42458 <_dtoa_r+0x650>
   42450:	4641      	mov	r1, r8
   42452:	4658      	mov	r0, fp
   42454:	f011 fe7a 	bl	5414c <_Bfree>
   42458:	4629      	mov	r1, r5
   4245a:	4658      	mov	r0, fp
   4245c:	f011 fe76 	bl	5414c <_Bfree>
   42460:	e09a      	b.n	42598 <_dtoa_r+0x790>
   42462:	463e      	mov	r6, r7
   42464:	464c      	mov	r4, r9
   42466:	e7b1      	b.n	423cc <_dtoa_r+0x5c4>
   42468:	4b83      	ldr	r3, [pc, #524]	; (42678 <_dtoa_r+0x870>)
   4246a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   4246e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   42472:	9b03      	ldr	r3, [sp, #12]
   42474:	441c      	add	r4, r3
   42476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   42478:	2b00      	cmp	r3, #0
   4247a:	d04a      	beq.n	42512 <_dtoa_r+0x70a>
   4247c:	4602      	mov	r2, r0
   4247e:	460b      	mov	r3, r1
   42480:	2000      	movs	r0, #0
   42482:	497e      	ldr	r1, [pc, #504]	; (4267c <_dtoa_r+0x874>)
   42484:	f7fe f946 	bl	40714 <__aeabi_ddiv>
   42488:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   4248c:	f7fd fe60 	bl	40150 <__aeabi_dsub>
   42490:	f8dd a00c 	ldr.w	sl, [sp, #12]
   42494:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   42498:	e9dd 0100 	ldrd	r0, r1, [sp]
   4249c:	f7fe fac0 	bl	40a20 <__aeabi_d2iz>
   424a0:	4605      	mov	r5, r0
   424a2:	f7fd ffa3 	bl	403ec <__aeabi_i2d>
   424a6:	4602      	mov	r2, r0
   424a8:	3530      	adds	r5, #48	; 0x30
   424aa:	460b      	mov	r3, r1
   424ac:	e9dd 0100 	ldrd	r0, r1, [sp]
   424b0:	f7fd fe4e 	bl	40150 <__aeabi_dsub>
   424b4:	f80a 5b01 	strb.w	r5, [sl], #1
   424b8:	4602      	mov	r2, r0
   424ba:	460b      	mov	r3, r1
   424bc:	e9cd 0100 	strd	r0, r1, [sp]
   424c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   424c4:	f7fe fa8c 	bl	409e0 <__aeabi_dcmpgt>
   424c8:	2800      	cmp	r0, #0
   424ca:	d165      	bne.n	42598 <_dtoa_r+0x790>
   424cc:	2000      	movs	r0, #0
   424ce:	496c      	ldr	r1, [pc, #432]	; (42680 <_dtoa_r+0x878>)
   424d0:	e9dd 2300 	ldrd	r2, r3, [sp]
   424d4:	f7fd fe3c 	bl	40150 <__aeabi_dsub>
   424d8:	4602      	mov	r2, r0
   424da:	460b      	mov	r3, r1
   424dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   424e0:	f7fe fa7e 	bl	409e0 <__aeabi_dcmpgt>
   424e4:	2800      	cmp	r0, #0
   424e6:	f040 810d 	bne.w	42704 <_dtoa_r+0x8fc>
   424ea:	45a2      	cmp	sl, r4
   424ec:	f000 80ea 	beq.w	426c4 <_dtoa_r+0x8bc>
   424f0:	2200      	movs	r2, #0
   424f2:	4b5e      	ldr	r3, [pc, #376]	; (4266c <_dtoa_r+0x864>)
   424f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   424f8:	f7fd ffe2 	bl	404c0 <__aeabi_dmul>
   424fc:	2200      	movs	r2, #0
   424fe:	4b5b      	ldr	r3, [pc, #364]	; (4266c <_dtoa_r+0x864>)
   42500:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   42504:	e9dd 0100 	ldrd	r0, r1, [sp]
   42508:	f7fd ffda 	bl	404c0 <__aeabi_dmul>
   4250c:	e9cd 0100 	strd	r0, r1, [sp]
   42510:	e7c2      	b.n	42498 <_dtoa_r+0x690>
   42512:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   42516:	f7fd ffd3 	bl	404c0 <__aeabi_dmul>
   4251a:	46a0      	mov	r8, r4
   4251c:	f8dd a00c 	ldr.w	sl, [sp, #12]
   42520:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   42524:	e9dd 0100 	ldrd	r0, r1, [sp]
   42528:	f7fe fa7a 	bl	40a20 <__aeabi_d2iz>
   4252c:	4605      	mov	r5, r0
   4252e:	f7fd ff5d 	bl	403ec <__aeabi_i2d>
   42532:	4602      	mov	r2, r0
   42534:	3530      	adds	r5, #48	; 0x30
   42536:	460b      	mov	r3, r1
   42538:	e9dd 0100 	ldrd	r0, r1, [sp]
   4253c:	f7fd fe08 	bl	40150 <__aeabi_dsub>
   42540:	f80a 5b01 	strb.w	r5, [sl], #1
   42544:	4602      	mov	r2, r0
   42546:	460b      	mov	r3, r1
   42548:	45a2      	cmp	sl, r4
   4254a:	e9cd 2300 	strd	r2, r3, [sp]
   4254e:	f04f 0200 	mov.w	r2, #0
   42552:	d123      	bne.n	4259c <_dtoa_r+0x794>
   42554:	4b49      	ldr	r3, [pc, #292]	; (4267c <_dtoa_r+0x874>)
   42556:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   4255a:	f7fd fdfb 	bl	40154 <__adddf3>
   4255e:	4602      	mov	r2, r0
   42560:	460b      	mov	r3, r1
   42562:	e9dd 0100 	ldrd	r0, r1, [sp]
   42566:	f7fe fa3b 	bl	409e0 <__aeabi_dcmpgt>
   4256a:	2800      	cmp	r0, #0
   4256c:	f040 80ca 	bne.w	42704 <_dtoa_r+0x8fc>
   42570:	2000      	movs	r0, #0
   42572:	4942      	ldr	r1, [pc, #264]	; (4267c <_dtoa_r+0x874>)
   42574:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   42578:	f7fd fdea 	bl	40150 <__aeabi_dsub>
   4257c:	4602      	mov	r2, r0
   4257e:	460b      	mov	r3, r1
   42580:	e9dd 0100 	ldrd	r0, r1, [sp]
   42584:	f7fe fa0e 	bl	409a4 <__aeabi_dcmplt>
   42588:	b170      	cbz	r0, 425a8 <_dtoa_r+0x7a0>
   4258a:	46c2      	mov	sl, r8
   4258c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   42590:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   42594:	2b30      	cmp	r3, #48	; 0x30
   42596:	d0f8      	beq.n	4258a <_dtoa_r+0x782>
   42598:	4637      	mov	r7, r6
   4259a:	e055      	b.n	42648 <_dtoa_r+0x840>
   4259c:	4b33      	ldr	r3, [pc, #204]	; (4266c <_dtoa_r+0x864>)
   4259e:	f7fd ff8f 	bl	404c0 <__aeabi_dmul>
   425a2:	e9cd 0100 	strd	r0, r1, [sp]
   425a6:	e7bd      	b.n	42524 <_dtoa_r+0x71c>
   425a8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   425ac:	e9cd 3400 	strd	r3, r4, [sp]
   425b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   425b2:	2b00      	cmp	r3, #0
   425b4:	f6ff ae28 	blt.w	42208 <_dtoa_r+0x400>
   425b8:	2f0e      	cmp	r7, #14
   425ba:	f73f ae25 	bgt.w	42208 <_dtoa_r+0x400>
   425be:	4b2e      	ldr	r3, [pc, #184]	; (42678 <_dtoa_r+0x870>)
   425c0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   425c4:	ed93 7b00 	vldr	d7, [r3]
   425c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   425ca:	2b00      	cmp	r3, #0
   425cc:	ed8d 7b04 	vstr	d7, [sp, #16]
   425d0:	da02      	bge.n	425d8 <_dtoa_r+0x7d0>
   425d2:	f1b9 0f00 	cmp.w	r9, #0
   425d6:	d064      	beq.n	426a2 <_dtoa_r+0x89a>
   425d8:	f8dd a00c 	ldr.w	sl, [sp, #12]
   425dc:	e9dd 4500 	ldrd	r4, r5, [sp]
   425e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   425e4:	4620      	mov	r0, r4
   425e6:	4629      	mov	r1, r5
   425e8:	f7fe f894 	bl	40714 <__aeabi_ddiv>
   425ec:	f7fe fa18 	bl	40a20 <__aeabi_d2iz>
   425f0:	4606      	mov	r6, r0
   425f2:	f7fd fefb 	bl	403ec <__aeabi_i2d>
   425f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   425fa:	f7fd ff61 	bl	404c0 <__aeabi_dmul>
   425fe:	4602      	mov	r2, r0
   42600:	4620      	mov	r0, r4
   42602:	f106 0430 	add.w	r4, r6, #48	; 0x30
   42606:	460b      	mov	r3, r1
   42608:	4629      	mov	r1, r5
   4260a:	f7fd fda1 	bl	40150 <__aeabi_dsub>
   4260e:	f80a 4b01 	strb.w	r4, [sl], #1
   42612:	9c03      	ldr	r4, [sp, #12]
   42614:	4602      	mov	r2, r0
   42616:	460b      	mov	r3, r1
   42618:	ebaa 0404 	sub.w	r4, sl, r4
   4261c:	45a1      	cmp	r9, r4
   4261e:	f040 8082 	bne.w	42726 <_dtoa_r+0x91e>
   42622:	f7fd fd97 	bl	40154 <__adddf3>
   42626:	4604      	mov	r4, r0
   42628:	460d      	mov	r5, r1
   4262a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   4262e:	f7fe f9d7 	bl	409e0 <__aeabi_dcmpgt>
   42632:	2800      	cmp	r0, #0
   42634:	d165      	bne.n	42702 <_dtoa_r+0x8fa>
   42636:	4620      	mov	r0, r4
   42638:	4629      	mov	r1, r5
   4263a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   4263e:	f7fe f9a7 	bl	40990 <__aeabi_dcmpeq>
   42642:	b108      	cbz	r0, 42648 <_dtoa_r+0x840>
   42644:	07f3      	lsls	r3, r6, #31
   42646:	d45c      	bmi.n	42702 <_dtoa_r+0x8fa>
   42648:	9902      	ldr	r1, [sp, #8]
   4264a:	4658      	mov	r0, fp
   4264c:	f011 fd7e 	bl	5414c <_Bfree>
   42650:	2300      	movs	r3, #0
   42652:	3701      	adds	r7, #1
   42654:	f88a 3000 	strb.w	r3, [sl]
   42658:	9b12      	ldr	r3, [sp, #72]	; 0x48
   4265a:	601f      	str	r7, [r3, #0]
   4265c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   4265e:	2b00      	cmp	r3, #0
   42660:	f43f ac21 	beq.w	41ea6 <_dtoa_r+0x9e>
   42664:	f8c3 a000 	str.w	sl, [r3]
   42668:	e41d      	b.n	41ea6 <_dtoa_r+0x9e>
   4266a:	bf00      	nop
   4266c:	40240000 	.word	0x40240000
   42670:	401c0000 	.word	0x401c0000
   42674:	40140000 	.word	0x40140000
   42678:	0005c0e0 	.word	0x0005c0e0
   4267c:	3fe00000 	.word	0x3fe00000
   42680:	3ff00000 	.word	0x3ff00000
   42684:	4ba2      	ldr	r3, [pc, #648]	; (42910 <_dtoa_r+0xb08>)
   42686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   4268a:	ed93 7b00 	vldr	d7, [r3]
   4268e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   42690:	2b00      	cmp	r3, #0
   42692:	ed8d 7b04 	vstr	d7, [sp, #16]
   42696:	da9f      	bge.n	425d8 <_dtoa_r+0x7d0>
   42698:	f1b9 0f00 	cmp.w	r9, #0
   4269c:	dc9c      	bgt.n	425d8 <_dtoa_r+0x7d0>
   4269e:	f47f aec3 	bne.w	42428 <_dtoa_r+0x620>
   426a2:	2200      	movs	r2, #0
   426a4:	4b9b      	ldr	r3, [pc, #620]	; (42914 <_dtoa_r+0xb0c>)
   426a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   426aa:	f7fd ff09 	bl	404c0 <__aeabi_dmul>
   426ae:	e9dd 2300 	ldrd	r2, r3, [sp]
   426b2:	f7fe f98b 	bl	409cc <__aeabi_dcmpge>
   426b6:	4604      	mov	r4, r0
   426b8:	2800      	cmp	r0, #0
   426ba:	f47f aeb5 	bne.w	42428 <_dtoa_r+0x620>
   426be:	463e      	mov	r6, r7
   426c0:	4625      	mov	r5, r4
   426c2:	e0b4      	b.n	4282e <_dtoa_r+0xa26>
   426c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   426c8:	e9cd 3400 	strd	r3, r4, [sp]
   426cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   426ce:	2b00      	cmp	r3, #0
   426d0:	db01      	blt.n	426d6 <_dtoa_r+0x8ce>
   426d2:	2f0e      	cmp	r7, #14
   426d4:	ddd6      	ble.n	42684 <_dtoa_r+0x87c>
   426d6:	9a08      	ldr	r2, [sp, #32]
   426d8:	2a01      	cmp	r2, #1
   426da:	dc36      	bgt.n	4274a <_dtoa_r+0x942>
   426dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   426de:	b382      	cbz	r2, 42742 <_dtoa_r+0x93a>
   426e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
   426e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   426e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   426ea:	9a06      	ldr	r2, [sp, #24]
   426ec:	2101      	movs	r1, #1
   426ee:	4658      	mov	r0, fp
   426f0:	441a      	add	r2, r3
   426f2:	9206      	str	r2, [sp, #24]
   426f4:	9a07      	ldr	r2, [sp, #28]
   426f6:	441a      	add	r2, r3
   426f8:	9207      	str	r2, [sp, #28]
   426fa:	f011 fd91 	bl	54220 <__i2b>
   426fe:	4605      	mov	r5, r0
   42700:	e586      	b.n	42210 <_dtoa_r+0x408>
   42702:	463e      	mov	r6, r7
   42704:	4653      	mov	r3, sl
   42706:	469a      	mov	sl, r3
   42708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   4270c:	2a39      	cmp	r2, #57	; 0x39
   4270e:	d106      	bne.n	4271e <_dtoa_r+0x916>
   42710:	9a03      	ldr	r2, [sp, #12]
   42712:	429a      	cmp	r2, r3
   42714:	d1f7      	bne.n	42706 <_dtoa_r+0x8fe>
   42716:	2230      	movs	r2, #48	; 0x30
   42718:	9903      	ldr	r1, [sp, #12]
   4271a:	3601      	adds	r6, #1
   4271c:	700a      	strb	r2, [r1, #0]
   4271e:	781a      	ldrb	r2, [r3, #0]
   42720:	3201      	adds	r2, #1
   42722:	701a      	strb	r2, [r3, #0]
   42724:	e738      	b.n	42598 <_dtoa_r+0x790>
   42726:	2200      	movs	r2, #0
   42728:	4b7b      	ldr	r3, [pc, #492]	; (42918 <_dtoa_r+0xb10>)
   4272a:	f7fd fec9 	bl	404c0 <__aeabi_dmul>
   4272e:	2200      	movs	r2, #0
   42730:	2300      	movs	r3, #0
   42732:	4604      	mov	r4, r0
   42734:	460d      	mov	r5, r1
   42736:	f7fe f92b 	bl	40990 <__aeabi_dcmpeq>
   4273a:	2800      	cmp	r0, #0
   4273c:	f43f af50 	beq.w	425e0 <_dtoa_r+0x7d8>
   42740:	e782      	b.n	42648 <_dtoa_r+0x840>
   42742:	9b14      	ldr	r3, [sp, #80]	; 0x50
   42744:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   42748:	e7cc      	b.n	426e4 <_dtoa_r+0x8dc>
   4274a:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   4274e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42750:	42a3      	cmp	r3, r4
   42752:	db08      	blt.n	42766 <_dtoa_r+0x95e>
   42754:	f1b9 0f00 	cmp.w	r9, #0
   42758:	eba3 0404 	sub.w	r4, r3, r4
   4275c:	db0e      	blt.n	4277c <_dtoa_r+0x974>
   4275e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   42762:	464b      	mov	r3, r9
   42764:	e7c1      	b.n	426ea <_dtoa_r+0x8e2>
   42766:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42768:	9a10      	ldr	r2, [sp, #64]	; 0x40
   4276a:	1ae3      	subs	r3, r4, r3
   4276c:	9409      	str	r4, [sp, #36]	; 0x24
   4276e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   42772:	2400      	movs	r4, #0
   42774:	441a      	add	r2, r3
   42776:	464b      	mov	r3, r9
   42778:	9210      	str	r2, [sp, #64]	; 0x40
   4277a:	e7b6      	b.n	426ea <_dtoa_r+0x8e2>
   4277c:	9b06      	ldr	r3, [sp, #24]
   4277e:	eba3 0809 	sub.w	r8, r3, r9
   42782:	2300      	movs	r3, #0
   42784:	e7b1      	b.n	426ea <_dtoa_r+0x8e2>
   42786:	9e02      	ldr	r6, [sp, #8]
   42788:	e571      	b.n	4226e <_dtoa_r+0x466>
   4278a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   4278c:	9902      	ldr	r1, [sp, #8]
   4278e:	e570      	b.n	42272 <_dtoa_r+0x46a>
   42790:	9602      	str	r6, [sp, #8]
   42792:	e572      	b.n	4227a <_dtoa_r+0x472>
   42794:	9b08      	ldr	r3, [sp, #32]
   42796:	2b01      	cmp	r3, #1
   42798:	dc17      	bgt.n	427ca <_dtoa_r+0x9c2>
   4279a:	9b00      	ldr	r3, [sp, #0]
   4279c:	b9ab      	cbnz	r3, 427ca <_dtoa_r+0x9c2>
   4279e:	9b01      	ldr	r3, [sp, #4]
   427a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
   427a4:	b99b      	cbnz	r3, 427ce <_dtoa_r+0x9c6>
   427a6:	9b01      	ldr	r3, [sp, #4]
   427a8:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
   427ac:	0d36      	lsrs	r6, r6, #20
   427ae:	0536      	lsls	r6, r6, #20
   427b0:	b136      	cbz	r6, 427c0 <_dtoa_r+0x9b8>
   427b2:	9b06      	ldr	r3, [sp, #24]
   427b4:	2601      	movs	r6, #1
   427b6:	3301      	adds	r3, #1
   427b8:	9306      	str	r3, [sp, #24]
   427ba:	9b07      	ldr	r3, [sp, #28]
   427bc:	3301      	adds	r3, #1
   427be:	9307      	str	r3, [sp, #28]
   427c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   427c2:	2b00      	cmp	r3, #0
   427c4:	f47f ad70 	bne.w	422a8 <_dtoa_r+0x4a0>
   427c8:	9610      	str	r6, [sp, #64]	; 0x40
   427ca:	2001      	movs	r0, #1
   427cc:	e575      	b.n	422ba <_dtoa_r+0x4b2>
   427ce:	2600      	movs	r6, #0
   427d0:	e7f6      	b.n	427c0 <_dtoa_r+0x9b8>
   427d2:	f43f ad86 	beq.w	422e2 <_dtoa_r+0x4da>
   427d6:	331c      	adds	r3, #28
   427d8:	9a06      	ldr	r2, [sp, #24]
   427da:	441a      	add	r2, r3
   427dc:	4498      	add	r8, r3
   427de:	9206      	str	r2, [sp, #24]
   427e0:	9a07      	ldr	r2, [sp, #28]
   427e2:	441a      	add	r2, r3
   427e4:	9207      	str	r2, [sp, #28]
   427e6:	e57c      	b.n	422e2 <_dtoa_r+0x4da>
   427e8:	4603      	mov	r3, r0
   427ea:	e7f4      	b.n	427d6 <_dtoa_r+0x9ce>
   427ec:	9b04      	ldr	r3, [sp, #16]
   427ee:	2b00      	cmp	r3, #0
   427f0:	dc2b      	bgt.n	4284a <_dtoa_r+0xa42>
   427f2:	9b08      	ldr	r3, [sp, #32]
   427f4:	2b02      	cmp	r3, #2
   427f6:	dc09      	bgt.n	4280c <_dtoa_r+0xa04>
   427f8:	e027      	b.n	4284a <_dtoa_r+0xa42>
   427fa:	f1b9 0f00 	cmp.w	r9, #0
   427fe:	dc1d      	bgt.n	4283c <_dtoa_r+0xa34>
   42800:	9b08      	ldr	r3, [sp, #32]
   42802:	2b02      	cmp	r3, #2
   42804:	dd1a      	ble.n	4283c <_dtoa_r+0xa34>
   42806:	463e      	mov	r6, r7
   42808:	f8cd 9010 	str.w	r9, [sp, #16]
   4280c:	9b04      	ldr	r3, [sp, #16]
   4280e:	2b00      	cmp	r3, #0
   42810:	f47f ae0c 	bne.w	4242c <_dtoa_r+0x624>
   42814:	4621      	mov	r1, r4
   42816:	2205      	movs	r2, #5
   42818:	4658      	mov	r0, fp
   4281a:	f011 fcb9 	bl	54190 <__multadd>
   4281e:	4601      	mov	r1, r0
   42820:	4604      	mov	r4, r0
   42822:	9802      	ldr	r0, [sp, #8]
   42824:	f018 fecd 	bl	5b5c2 <__mcmp>
   42828:	2800      	cmp	r0, #0
   4282a:	f77f adff 	ble.w	4242c <_dtoa_r+0x624>
   4282e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   42832:	2331      	movs	r3, #49	; 0x31
   42834:	3601      	adds	r6, #1
   42836:	f80a 3b01 	strb.w	r3, [sl], #1
   4283a:	e5fb      	b.n	42434 <_dtoa_r+0x62c>
   4283c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   4283e:	463e      	mov	r6, r7
   42840:	f8cd 9010 	str.w	r9, [sp, #16]
   42844:	2b00      	cmp	r3, #0
   42846:	f47f ad83 	bne.w	42350 <_dtoa_r+0x548>
   4284a:	9f03      	ldr	r7, [sp, #12]
   4284c:	4621      	mov	r1, r4
   4284e:	9802      	ldr	r0, [sp, #8]
   42850:	f018 fdc9 	bl	5b3e6 <quorem>
   42854:	9b03      	ldr	r3, [sp, #12]
   42856:	f100 0930 	add.w	r9, r0, #48	; 0x30
   4285a:	9a04      	ldr	r2, [sp, #16]
   4285c:	f807 9b01 	strb.w	r9, [r7], #1
   42860:	1afb      	subs	r3, r7, r3
   42862:	429a      	cmp	r2, r3
   42864:	f340 80cb 	ble.w	429fe <_dtoa_r+0xbf6>
   42868:	2300      	movs	r3, #0
   4286a:	220a      	movs	r2, #10
   4286c:	9902      	ldr	r1, [sp, #8]
   4286e:	4658      	mov	r0, fp
   42870:	f011 fc8e 	bl	54190 <__multadd>
   42874:	9002      	str	r0, [sp, #8]
   42876:	e7e9      	b.n	4284c <_dtoa_r+0xa44>
   42878:	692a      	ldr	r2, [r5, #16]
   4287a:	f105 010c 	add.w	r1, r5, #12
   4287e:	300c      	adds	r0, #12
   42880:	3202      	adds	r2, #2
   42882:	0092      	lsls	r2, r2, #2
   42884:	f018 fb2e 	bl	5aee4 <memcpy>
   42888:	2201      	movs	r2, #1
   4288a:	4639      	mov	r1, r7
   4288c:	4658      	mov	r0, fp
   4288e:	f011 fde1 	bl	54454 <__lshift>
   42892:	9b03      	ldr	r3, [sp, #12]
   42894:	46a8      	mov	r8, r5
   42896:	4605      	mov	r5, r0
   42898:	f103 0a01 	add.w	sl, r3, #1
   4289c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   428a0:	4413      	add	r3, r2
   428a2:	9307      	str	r3, [sp, #28]
   428a4:	9b00      	ldr	r3, [sp, #0]
   428a6:	f003 0301 	and.w	r3, r3, #1
   428aa:	9309      	str	r3, [sp, #36]	; 0x24
   428ac:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   428b0:	4621      	mov	r1, r4
   428b2:	9802      	ldr	r0, [sp, #8]
   428b4:	9304      	str	r3, [sp, #16]
   428b6:	f018 fd96 	bl	5b3e6 <quorem>
   428ba:	4641      	mov	r1, r8
   428bc:	9006      	str	r0, [sp, #24]
   428be:	f100 0930 	add.w	r9, r0, #48	; 0x30
   428c2:	9802      	ldr	r0, [sp, #8]
   428c4:	f018 fe7d 	bl	5b5c2 <__mcmp>
   428c8:	462a      	mov	r2, r5
   428ca:	4621      	mov	r1, r4
   428cc:	4607      	mov	r7, r0
   428ce:	4658      	mov	r0, fp
   428d0:	f011 fe2c 	bl	5452c <__mdiff>
   428d4:	68c2      	ldr	r2, [r0, #12]
   428d6:	4601      	mov	r1, r0
   428d8:	b302      	cbz	r2, 4291c <_dtoa_r+0xb14>
   428da:	4658      	mov	r0, fp
   428dc:	f011 fc36 	bl	5414c <_Bfree>
   428e0:	2f00      	cmp	r7, #0
   428e2:	da3a      	bge.n	4295a <_dtoa_r+0xb52>
   428e4:	2201      	movs	r2, #1
   428e6:	9902      	ldr	r1, [sp, #8]
   428e8:	4658      	mov	r0, fp
   428ea:	f011 fdb3 	bl	54454 <__lshift>
   428ee:	4621      	mov	r1, r4
   428f0:	9002      	str	r0, [sp, #8]
   428f2:	f018 fe66 	bl	5b5c2 <__mcmp>
   428f6:	2800      	cmp	r0, #0
   428f8:	dc03      	bgt.n	42902 <_dtoa_r+0xafa>
   428fa:	d129      	bne.n	42950 <_dtoa_r+0xb48>
   428fc:	f019 0f01 	tst.w	r9, #1
   42900:	d026      	beq.n	42950 <_dtoa_r+0xb48>
   42902:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   42906:	d11d      	bne.n	42944 <_dtoa_r+0xb3c>
   42908:	e032      	b.n	42970 <_dtoa_r+0xb68>
   4290a:	4628      	mov	r0, r5
   4290c:	e7c1      	b.n	42892 <_dtoa_r+0xa8a>
   4290e:	bf00      	nop
   42910:	0005c0e0 	.word	0x0005c0e0
   42914:	40140000 	.word	0x40140000
   42918:	40240000 	.word	0x40240000
   4291c:	900a      	str	r0, [sp, #40]	; 0x28
   4291e:	9802      	ldr	r0, [sp, #8]
   42920:	f018 fe4f 	bl	5b5c2 <__mcmp>
   42924:	990a      	ldr	r1, [sp, #40]	; 0x28
   42926:	900c      	str	r0, [sp, #48]	; 0x30
   42928:	4658      	mov	r0, fp
   4292a:	f011 fc0f 	bl	5414c <_Bfree>
   4292e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   42930:	bb5a      	cbnz	r2, 4298a <_dtoa_r+0xb82>
   42932:	9b08      	ldr	r3, [sp, #32]
   42934:	b953      	cbnz	r3, 4294c <_dtoa_r+0xb44>
   42936:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42938:	b943      	cbnz	r3, 4294c <_dtoa_r+0xb44>
   4293a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   4293e:	d017      	beq.n	42970 <_dtoa_r+0xb68>
   42940:	2f00      	cmp	r7, #0
   42942:	dd05      	ble.n	42950 <_dtoa_r+0xb48>
   42944:	9b06      	ldr	r3, [sp, #24]
   42946:	f103 0931 	add.w	r9, r3, #49	; 0x31
   4294a:	e001      	b.n	42950 <_dtoa_r+0xb48>
   4294c:	2f00      	cmp	r7, #0
   4294e:	da2a      	bge.n	429a6 <_dtoa_r+0xb9e>
   42950:	f8dd a010 	ldr.w	sl, [sp, #16]
   42954:	f80a 9b01 	strb.w	r9, [sl], #1
   42958:	e56e      	b.n	42438 <_dtoa_r+0x630>
   4295a:	9b08      	ldr	r3, [sp, #32]
   4295c:	433b      	orrs	r3, r7
   4295e:	d104      	bne.n	4296a <_dtoa_r+0xb62>
   42960:	9b00      	ldr	r3, [sp, #0]
   42962:	f003 0301 	and.w	r3, r3, #1
   42966:	2b00      	cmp	r3, #0
   42968:	d0bc      	beq.n	428e4 <_dtoa_r+0xadc>
   4296a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   4296e:	d136      	bne.n	429de <_dtoa_r+0xbd6>
   42970:	9f04      	ldr	r7, [sp, #16]
   42972:	2339      	movs	r3, #57	; 0x39
   42974:	f807 3b01 	strb.w	r3, [r7], #1
   42978:	46ba      	mov	sl, r7
   4297a:	3f01      	subs	r7, #1
   4297c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   42980:	2b39      	cmp	r3, #57	; 0x39
   42982:	d05a      	beq.n	42a3a <_dtoa_r+0xc32>
   42984:	3301      	adds	r3, #1
   42986:	703b      	strb	r3, [r7, #0]
   42988:	e556      	b.n	42438 <_dtoa_r+0x630>
   4298a:	2f00      	cmp	r7, #0
   4298c:	db06      	blt.n	4299c <_dtoa_r+0xb94>
   4298e:	9b08      	ldr	r3, [sp, #32]
   42990:	433b      	orrs	r3, r7
   42992:	d106      	bne.n	429a2 <_dtoa_r+0xb9a>
   42994:	9b00      	ldr	r3, [sp, #0]
   42996:	f003 0301 	and.w	r3, r3, #1
   4299a:	b913      	cbnz	r3, 429a2 <_dtoa_r+0xb9a>
   4299c:	2a00      	cmp	r2, #0
   4299e:	dca1      	bgt.n	428e4 <_dtoa_r+0xadc>
   429a0:	e7d6      	b.n	42950 <_dtoa_r+0xb48>
   429a2:	2a00      	cmp	r2, #0
   429a4:	dce1      	bgt.n	4296a <_dtoa_r+0xb62>
   429a6:	9b07      	ldr	r3, [sp, #28]
   429a8:	4657      	mov	r7, sl
   429aa:	f80a 9c01 	strb.w	r9, [sl, #-1]
   429ae:	4553      	cmp	r3, sl
   429b0:	d02e      	beq.n	42a10 <_dtoa_r+0xc08>
   429b2:	2300      	movs	r3, #0
   429b4:	220a      	movs	r2, #10
   429b6:	9902      	ldr	r1, [sp, #8]
   429b8:	4658      	mov	r0, fp
   429ba:	f011 fbe9 	bl	54190 <__multadd>
   429be:	45a8      	cmp	r8, r5
   429c0:	9002      	str	r0, [sp, #8]
   429c2:	f04f 0300 	mov.w	r3, #0
   429c6:	f04f 020a 	mov.w	r2, #10
   429ca:	4641      	mov	r1, r8
   429cc:	4658      	mov	r0, fp
   429ce:	d10b      	bne.n	429e8 <_dtoa_r+0xbe0>
   429d0:	f011 fbde 	bl	54190 <__multadd>
   429d4:	4680      	mov	r8, r0
   429d6:	4605      	mov	r5, r0
   429d8:	f10a 0a01 	add.w	sl, sl, #1
   429dc:	e766      	b.n	428ac <_dtoa_r+0xaa4>
   429de:	f8dd a010 	ldr.w	sl, [sp, #16]
   429e2:	f109 0901 	add.w	r9, r9, #1
   429e6:	e7b5      	b.n	42954 <_dtoa_r+0xb4c>
   429e8:	f011 fbd2 	bl	54190 <__multadd>
   429ec:	4629      	mov	r1, r5
   429ee:	4680      	mov	r8, r0
   429f0:	2300      	movs	r3, #0
   429f2:	220a      	movs	r2, #10
   429f4:	4658      	mov	r0, fp
   429f6:	f011 fbcb 	bl	54190 <__multadd>
   429fa:	4605      	mov	r5, r0
   429fc:	e7ec      	b.n	429d8 <_dtoa_r+0xbd0>
   429fe:	9b04      	ldr	r3, [sp, #16]
   42a00:	f04f 0800 	mov.w	r8, #0
   42a04:	2b00      	cmp	r3, #0
   42a06:	bfcc      	ite	gt
   42a08:	461f      	movgt	r7, r3
   42a0a:	2701      	movle	r7, #1
   42a0c:	9b03      	ldr	r3, [sp, #12]
   42a0e:	441f      	add	r7, r3
   42a10:	2201      	movs	r2, #1
   42a12:	9902      	ldr	r1, [sp, #8]
   42a14:	4658      	mov	r0, fp
   42a16:	f011 fd1d 	bl	54454 <__lshift>
   42a1a:	4621      	mov	r1, r4
   42a1c:	9002      	str	r0, [sp, #8]
   42a1e:	f018 fdd0 	bl	5b5c2 <__mcmp>
   42a22:	2800      	cmp	r0, #0
   42a24:	dca8      	bgt.n	42978 <_dtoa_r+0xb70>
   42a26:	d102      	bne.n	42a2e <_dtoa_r+0xc26>
   42a28:	f019 0f01 	tst.w	r9, #1
   42a2c:	d1a4      	bne.n	42978 <_dtoa_r+0xb70>
   42a2e:	46ba      	mov	sl, r7
   42a30:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
   42a34:	2b30      	cmp	r3, #48	; 0x30
   42a36:	d0fa      	beq.n	42a2e <_dtoa_r+0xc26>
   42a38:	e4fe      	b.n	42438 <_dtoa_r+0x630>
   42a3a:	9b03      	ldr	r3, [sp, #12]
   42a3c:	42bb      	cmp	r3, r7
   42a3e:	d19b      	bne.n	42978 <_dtoa_r+0xb70>
   42a40:	2331      	movs	r3, #49	; 0x31
   42a42:	9a03      	ldr	r2, [sp, #12]
   42a44:	3601      	adds	r6, #1
   42a46:	7013      	strb	r3, [r2, #0]
   42a48:	e4f6      	b.n	42438 <_dtoa_r+0x630>
   42a4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   42a4c:	2b00      	cmp	r3, #0
   42a4e:	f47f aa25 	bne.w	41e9c <_dtoa_r+0x94>
   42a52:	4b01      	ldr	r3, [pc, #4]	; (42a58 <_dtoa_r+0xc50>)
   42a54:	f7ff ba44 	b.w	41ee0 <_dtoa_r+0xd8>
   42a58:	00060abb 	.word	0x00060abb

00042a5c <AppendCharacter.isra.0>:
 * @param zfp Pointer to file object
 *
 */
static inline void fs_file_t_init(struct fs_file_t *zfp)
{
	*zfp = (struct fs_file_t){ 0 };
   42a5c:	2300      	movs	r3, #0

	return res;
}

//append a single character to a file
static int AppendCharacter(const char *fname, char c)
   42a5e:	b530      	push	{r4, r5, lr}
   42a60:	b085      	sub	sp, #20
   42a62:	4604      	mov	r4, r0
   42a64:	460d      	mov	r5, r1

	//set variable to hold status of file
	int fileStatus;

	//open file in append and write mode
	fileStatus = fs_open(&firp,fname,FS_O_APPEND | FS_O_WRITE);
   42a66:	2222      	movs	r2, #34	; 0x22
   42a68:	4601      	mov	r1, r0
   42a6a:	a801      	add	r0, sp, #4
   42a6c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   42a70:	9303      	str	r3, [sp, #12]
   42a72:	f004 f8f3 	bl	46c5c <fs_open>
	if(fileStatus)
   42a76:	b118      	cbz	r0, 42a80 <AppendCharacter.isra.0+0x24>
    {
        printk("error open %s\n", fname);
   42a78:	4621      	mov	r1, r4
   42a7a:	4819      	ldr	r0, [pc, #100]	; (42ae0 <AppendCharacter.isra.0+0x84>)
   42a7c:	f012 fe90 	bl	557a0 <printk>
    }

	//convert characters to valid characters
	char cc;
	if( (c >= 'a' && c <= 'z') 
   42a80:	f025 0320 	bic.w	r3, r5, #32
   42a84:	3b41      	subs	r3, #65	; 0x41
   42a86:	2b19      	cmp	r3, #25
   42a88:	d907      	bls.n	42a9a <AppendCharacter.isra.0+0x3e>
		||  (c >= 'A' && c <= 'Z') 
		||  (c >= '0' && c <= '9')
   42a8a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   42a8e:	2b09      	cmp	r3, #9
   42a90:	d903      	bls.n	42a9a <AppendCharacter.isra.0+0x3e>
		||  (c == '\n') ||  (c == '_'))
   42a92:	2d0a      	cmp	r5, #10
   42a94:	bf0c      	ite	eq
   42a96:	250a      	moveq	r5, #10
   42a98:	255f      	movne	r5, #95	; 0x5f
	}
	
	

	//write the character to the file
	fileStatus = fs_write(&firp,&cc,1);
   42a9a:	2201      	movs	r2, #1
   42a9c:	f10d 0103 	add.w	r1, sp, #3
   42aa0:	a801      	add	r0, sp, #4
   42aa2:	f88d 5003 	strb.w	r5, [sp, #3]
   42aa6:	f004 f969 	bl	46d7c <fs_write>
    if(fileStatus < 0)
   42aaa:	2800      	cmp	r0, #0
   42aac:	da0d      	bge.n	42aca <AppendCharacter.isra.0+0x6e>
    {
        printk("other error write %s\n", fname);
   42aae:	4621      	mov	r1, r4
   42ab0:	480c      	ldr	r0, [pc, #48]	; (42ae4 <AppendCharacter.isra.0+0x88>)
	{
		printk("file not opened or closed %s\n", fname);
	}
	else if(fileStatus == ENOTSUP)
	{
		printk("not implemented by underlying FS %s\n", fname);
   42ab2:	f012 fe75 	bl	557a0 <printk>
	}

	//close the file
	fileStatus = fs_close(&firp);
   42ab6:	a801      	add	r0, sp, #4
   42ab8:	f004 f93c 	bl	46d34 <fs_close>
    if(fileStatus)
   42abc:	b118      	cbz	r0, 42ac6 <AppendCharacter.isra.0+0x6a>
    {
        printk("error close%s!\n", fname);
   42abe:	4621      	mov	r1, r4
   42ac0:	4809      	ldr	r0, [pc, #36]	; (42ae8 <AppendCharacter.isra.0+0x8c>)
   42ac2:	f012 fe6d 	bl	557a0 <printk>
    }

return 0;
	//end
}
   42ac6:	b005      	add	sp, #20
   42ac8:	bd30      	pop	{r4, r5, pc}
	else if(fileStatus == EBADF)
   42aca:	2809      	cmp	r0, #9
   42acc:	d102      	bne.n	42ad4 <AppendCharacter.isra.0+0x78>
		printk("file not opened or closed %s\n", fname);
   42ace:	4621      	mov	r1, r4
   42ad0:	4806      	ldr	r0, [pc, #24]	; (42aec <AppendCharacter.isra.0+0x90>)
   42ad2:	e7ee      	b.n	42ab2 <AppendCharacter.isra.0+0x56>
	else if(fileStatus == ENOTSUP)
   42ad4:	2886      	cmp	r0, #134	; 0x86
   42ad6:	d1ee      	bne.n	42ab6 <AppendCharacter.isra.0+0x5a>
		printk("not implemented by underlying FS %s\n", fname);
   42ad8:	4621      	mov	r1, r4
   42ada:	4805      	ldr	r0, [pc, #20]	; (42af0 <AppendCharacter.isra.0+0x94>)
   42adc:	e7e9      	b.n	42ab2 <AppendCharacter.isra.0+0x56>
   42ade:	bf00      	nop
   42ae0:	0005cd3a 	.word	0x0005cd3a
   42ae4:	0005cd49 	.word	0x0005cd49
   42ae8:	0005cda2 	.word	0x0005cda2
   42aec:	0005cd5f 	.word	0x0005cd5f
   42af0:	0005cd7d 	.word	0x0005cd7d

00042af4 <start_cell_measurements>:
    }
    printk("Modem response:\n%s", response);
}

static void start_cell_measurements(void)
{
   42af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   42af6:	4b0b      	ldr	r3, [pc, #44]	; (42b24 <start_cell_measurements+0x30>)
   42af8:	e8d3 3faf 	lda	r3, [r3]
	int err;

	if (!atomic_get(&connected)) {
   42afc:	b173      	cbz	r3, 42b1c <start_cell_measurements+0x28>
		return;
	}

	err = lte_lc_neighbor_cell_measurement(NULL);
   42afe:	2000      	movs	r0, #0
   42b00:	f009 fa08 	bl	4bf14 <lte_lc_neighbor_cell_measurement>
	if (err) {
   42b04:	b150      	cbz	r0, 42b1c <start_cell_measurements+0x28>
		LOG_ERR("Failed to initiate neighbor cell measurements, error: %d",
   42b06:	4b08      	ldr	r3, [pc, #32]	; (42b28 <start_cell_measurements+0x34>)
   42b08:	9003      	str	r0, [sp, #12]
   42b0a:	9302      	str	r3, [sp, #8]
   42b0c:	2300      	movs	r3, #0
   42b0e:	2201      	movs	r2, #1
   42b10:	4618      	mov	r0, r3
   42b12:	e9cd 3300 	strd	r3, r3, [sp]
   42b16:	4905      	ldr	r1, [pc, #20]	; (42b2c <start_cell_measurements+0x38>)
   42b18:	f012 fd89 	bl	5562e <z_log_msg_runtime_create.constprop.0>
			err);
	}
}
   42b1c:	b005      	add	sp, #20
   42b1e:	f85d fb04 	ldr.w	pc, [sp], #4
   42b22:	bf00      	nop
   42b24:	2001b28c 	.word	0x2001b28c
   42b28:	0005cdb2 	.word	0x0005cdb2
   42b2c:	0005bf9c 	.word	0x0005bf9c

00042b30 <lte_handler>:
{
   42b30:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (evt->type) {
   42b32:	7803      	ldrb	r3, [r0, #0]
{
   42b34:	4604      	mov	r4, r0
   42b36:	b097      	sub	sp, #92	; 0x5c
	switch (evt->type) {
   42b38:	2b07      	cmp	r3, #7
   42b3a:	d82c      	bhi.n	42b96 <lte_handler+0x66>
   42b3c:	e8df f003 	tbb	[pc, r3]
   42b40:	4b2d1d04 	.word	0x4b2d1d04
   42b44:	7e2b6e68 	.word	0x7e2b6e68
		if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   42b48:	7a03      	ldrb	r3, [r0, #8]
   42b4a:	2b01      	cmp	r3, #1
   42b4c:	d003      	beq.n	42b56 <lte_handler+0x26>
   42b4e:	2b05      	cmp	r3, #5
   42b50:	d121      	bne.n	42b96 <lte_handler+0x66>
		LOG_INF("Network registration status: %s",
   42b52:	4b57      	ldr	r3, [pc, #348]	; (42cb0 <lte_handler+0x180>)
   42b54:	e000      	b.n	42b58 <lte_handler+0x28>
   42b56:	4b57      	ldr	r3, [pc, #348]	; (42cb4 <lte_handler+0x184>)
   42b58:	9303      	str	r3, [sp, #12]
   42b5a:	4b57      	ldr	r3, [pc, #348]	; (42cb8 <lte_handler+0x188>)
   42b5c:	2203      	movs	r2, #3
   42b5e:	9302      	str	r3, [sp, #8]
   42b60:	2300      	movs	r3, #0
   42b62:	4956      	ldr	r1, [pc, #344]	; (42cbc <lte_handler+0x18c>)
   42b64:	4618      	mov	r0, r3
   42b66:	e9cd 3300 	strd	r3, r3, [sp]
   42b6a:	f012 fd60 	bl	5562e <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   42b6e:	4854      	ldr	r0, [pc, #336]	; (42cc0 <lte_handler+0x190>)
}
   42b70:	b017      	add	sp, #92	; 0x5c
   42b72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   42b76:	f00f bdb7 	b.w	526e8 <z_impl_k_sem_give>
		LOG_INF("PSM parameter update: TAU: %d, Active time: %d",
   42b7a:	68c3      	ldr	r3, [r0, #12]
   42b7c:	9304      	str	r3, [sp, #16]
   42b7e:	6883      	ldr	r3, [r0, #8]
   42b80:	9303      	str	r3, [sp, #12]
   42b82:	4b50      	ldr	r3, [pc, #320]	; (42cc4 <lte_handler+0x194>)
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   42b84:	9302      	str	r3, [sp, #8]
   42b86:	2300      	movs	r3, #0
   42b88:	2203      	movs	r2, #3
   42b8a:	4618      	mov	r0, r3
   42b8c:	e9cd 3300 	strd	r3, r3, [sp]
   42b90:	494a      	ldr	r1, [pc, #296]	; (42cbc <lte_handler+0x18c>)
   42b92:	f012 fd4c 	bl	5562e <z_log_msg_runtime_create.constprop.0>
}
   42b96:	b017      	add	sp, #92	; 0x5c
   42b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = snprintk(log_buf, sizeof(log_buf),
   42b9a:	6900      	ldr	r0, [r0, #16]
   42b9c:	f7fd fc38 	bl	40410 <__aeabi_f2d>
   42ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   42ba4:	68e0      	ldr	r0, [r4, #12]
   42ba6:	f7fd fc33 	bl	40410 <__aeabi_f2d>
   42baa:	ad07      	add	r5, sp, #28
   42bac:	e9cd 0100 	strd	r0, r1, [sp]
   42bb0:	4a45      	ldr	r2, [pc, #276]	; (42cc8 <lte_handler+0x198>)
   42bb2:	213c      	movs	r1, #60	; 0x3c
   42bb4:	4628      	mov	r0, r5
   42bb6:	f012 fe00 	bl	557ba <snprintk>
		if (len > 0) {
   42bba:	2800      	cmp	r0, #0
   42bbc:	ddeb      	ble.n	42b96 <lte_handler+0x66>
			LOG_INF("%s", log_buf);
   42bbe:	4b43      	ldr	r3, [pc, #268]	; (42ccc <lte_handler+0x19c>)
   42bc0:	9503      	str	r5, [sp, #12]
		LOG_INF("Active LTE mode changed: %s",
   42bc2:	9302      	str	r3, [sp, #8]
   42bc4:	2300      	movs	r3, #0
   42bc6:	2203      	movs	r2, #3
   42bc8:	4618      	mov	r0, r3
   42bca:	e9cd 3300 	strd	r3, r3, [sp]
   42bce:	493b      	ldr	r1, [pc, #236]	; (42cbc <lte_handler+0x18c>)
   42bd0:	f012 fd2d 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   42bd4:	e7df      	b.n	42b96 <lte_handler+0x66>
		LOG_INF("RRC mode: %s",
   42bd6:	7a01      	ldrb	r1, [r0, #8]
   42bd8:	4a3d      	ldr	r2, [pc, #244]	; (42cd0 <lte_handler+0x1a0>)
   42bda:	4b3e      	ldr	r3, [pc, #248]	; (42cd4 <lte_handler+0x1a4>)
   42bdc:	2901      	cmp	r1, #1
   42bde:	bf08      	it	eq
   42be0:	4613      	moveq	r3, r2
   42be2:	9303      	str	r3, [sp, #12]
   42be4:	4b3c      	ldr	r3, [pc, #240]	; (42cd8 <lte_handler+0x1a8>)
   42be6:	2203      	movs	r2, #3
   42be8:	9302      	str	r3, [sp, #8]
   42bea:	2300      	movs	r3, #0
   42bec:	4933      	ldr	r1, [pc, #204]	; (42cbc <lte_handler+0x18c>)
   42bee:	4618      	mov	r0, r3
   42bf0:	e9cd 3300 	strd	r3, r3, [sp]
   42bf4:	f012 fd1b 	bl	5562e <z_log_msg_runtime_create.constprop.0>
		if (evt->rrc_mode == LTE_LC_RRC_MODE_IDLE) {
   42bf8:	7a23      	ldrb	r3, [r4, #8]
   42bfa:	b90b      	cbnz	r3, 42c00 <lte_handler+0xd0>
   42bfc:	4837      	ldr	r0, [pc, #220]	; (42cdc <lte_handler+0x1ac>)
   42bfe:	e7b7      	b.n	42b70 <lte_handler+0x40>
	return z_impl_k_sem_take(sem, timeout);
   42c00:	2200      	movs	r2, #0
   42c02:	2300      	movs	r3, #0
   42c04:	4835      	ldr	r0, [pc, #212]	; (42cdc <lte_handler+0x1ac>)
}
   42c06:	b017      	add	sp, #92	; 0x5c
   42c08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   42c0c:	f00f bd92 	b.w	52734 <z_impl_k_sem_take>
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   42c10:	6943      	ldr	r3, [r0, #20]
   42c12:	9304      	str	r3, [sp, #16]
   42c14:	6903      	ldr	r3, [r0, #16]
   42c16:	9303      	str	r3, [sp, #12]
   42c18:	4b31      	ldr	r3, [pc, #196]	; (42ce0 <lte_handler+0x1b0>)
   42c1a:	e7b3      	b.n	42b84 <lte_handler+0x54>
		LOG_INF("Active LTE mode changed: %s",
   42c1c:	7a02      	ldrb	r2, [r0, #8]
   42c1e:	b14a      	cbz	r2, 42c34 <lte_handler+0x104>
   42c20:	2a07      	cmp	r2, #7
   42c22:	d009      	beq.n	42c38 <lte_handler+0x108>
   42c24:	4b2f      	ldr	r3, [pc, #188]	; (42ce4 <lte_handler+0x1b4>)
   42c26:	4930      	ldr	r1, [pc, #192]	; (42ce8 <lte_handler+0x1b8>)
   42c28:	2a09      	cmp	r2, #9
   42c2a:	bf08      	it	eq
   42c2c:	460b      	moveq	r3, r1
   42c2e:	9303      	str	r3, [sp, #12]
   42c30:	4b2e      	ldr	r3, [pc, #184]	; (42cec <lte_handler+0x1bc>)
   42c32:	e7c6      	b.n	42bc2 <lte_handler+0x92>
   42c34:	4b2e      	ldr	r3, [pc, #184]	; (42cf0 <lte_handler+0x1c0>)
   42c36:	e7fa      	b.n	42c2e <lte_handler+0xfe>
   42c38:	4b2e      	ldr	r3, [pc, #184]	; (42cf4 <lte_handler+0x1c4>)
   42c3a:	e7f8      	b.n	42c2e <lte_handler+0xfe>
		LOG_INF("Neighbor cell measurements received");
   42c3c:	4b2e      	ldr	r3, [pc, #184]	; (42cf8 <lte_handler+0x1c8>)
   42c3e:	2203      	movs	r2, #3
   42c40:	9302      	str	r3, [sp, #8]
   42c42:	2300      	movs	r3, #0
   42c44:	491d      	ldr	r1, [pc, #116]	; (42cbc <lte_handler+0x18c>)
   42c46:	4618      	mov	r0, r3
   42c48:	e9cd 3300 	strd	r3, r3, [sp]
   42c4c:	f012 fcef 	bl	5562e <z_log_msg_runtime_create.constprop.0>
		if (evt->cells_info.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   42c50:	6923      	ldr	r3, [r4, #16]
   42c52:	3301      	adds	r3, #1
   42c54:	d09f      	beq.n	42b96 <lte_handler+0x66>
		memcpy(&cell_data.current_cell,
   42c56:	4a29      	ldr	r2, [pc, #164]	; (42cfc <lte_handler+0x1cc>)
   42c58:	f104 0308 	add.w	r3, r4, #8
   42c5c:	4616      	mov	r6, r2
   42c5e:	f104 0738 	add.w	r7, r4, #56	; 0x38
   42c62:	4615      	mov	r5, r2
   42c64:	6818      	ldr	r0, [r3, #0]
   42c66:	6859      	ldr	r1, [r3, #4]
   42c68:	3308      	adds	r3, #8
   42c6a:	c503      	stmia	r5!, {r0, r1}
   42c6c:	42bb      	cmp	r3, r7
   42c6e:	462a      	mov	r2, r5
   42c70:	d1f7      	bne.n	42c62 <lte_handler+0x132>
		if (evt->cells_info.ncells_count > 0 && evt->cells_info.neighbor_cells) {
   42c72:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   42c76:	b14a      	cbz	r2, 42c8c <lte_handler+0x15c>
   42c78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   42c7a:	b1b1      	cbz	r1, 42caa <lte_handler+0x17a>
			memcpy(neighbor_cells,
   42c7c:	0112      	lsls	r2, r2, #4
   42c7e:	f44f 7388 	mov.w	r3, #272	; 0x110
   42c82:	481f      	ldr	r0, [pc, #124]	; (42d00 <lte_handler+0x1d0>)
   42c84:	f018 f93b 	bl	5aefe <__memcpy_chk>
			cell_data.ncells_count = evt->cells_info.ncells_count;
   42c88:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		LOG_INF("Neighbor cells found: %d", cell_data.ncells_count);
   42c8c:	4b1d      	ldr	r3, [pc, #116]	; (42d04 <lte_handler+0x1d4>)
			cell_data.ncells_count = 0;
   42c8e:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
		LOG_INF("Neighbor cells found: %d", cell_data.ncells_count);
   42c92:	9302      	str	r3, [sp, #8]
   42c94:	2300      	movs	r3, #0
   42c96:	9203      	str	r2, [sp, #12]
   42c98:	4618      	mov	r0, r3
   42c9a:	2203      	movs	r2, #3
   42c9c:	e9cd 3300 	strd	r3, r3, [sp]
   42ca0:	4906      	ldr	r1, [pc, #24]	; (42cbc <lte_handler+0x18c>)
   42ca2:	f012 fcc4 	bl	5562e <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   42ca6:	4818      	ldr	r0, [pc, #96]	; (42d08 <lte_handler+0x1d8>)
   42ca8:	e762      	b.n	42b70 <lte_handler+0x40>
   42caa:	460a      	mov	r2, r1
   42cac:	e7ee      	b.n	42c8c <lte_handler+0x15c>
   42cae:	bf00      	nop
   42cb0:	0005ce04 	.word	0x0005ce04
   42cb4:	0005cdeb 	.word	0x0005cdeb
   42cb8:	0005ce41 	.word	0x0005ce41
   42cbc:	0005bf9c 	.word	0x0005bf9c
   42cc0:	2001ac00 	.word	0x2001ac00
   42cc4:	0005ce61 	.word	0x0005ce61
   42cc8:	0005ce90 	.word	0x0005ce90
   42ccc:	0005d362 	.word	0x0005d362
   42cd0:	0005ce18 	.word	0x0005ce18
   42cd4:	0005ce22 	.word	0x0005ce22
   42cd8:	0005ceb9 	.word	0x0005ceb9
   42cdc:	2001ac18 	.word	0x2001ac18
   42ce0:	0005cec6 	.word	0x0005cec6
   42ce4:	0005ce32 	.word	0x0005ce32
   42ce8:	0005ce3a 	.word	0x0005ce3a
   42cec:	0005cef7 	.word	0x0005cef7
   42cf0:	0005ce2d 	.word	0x0005ce2d
   42cf4:	0005ce27 	.word	0x0005ce27
   42cf8:	0005cf13 	.word	0x0005cf13
   42cfc:	2001a500 	.word	0x2001a500
   42d00:	2001b17c 	.word	0x2001b17c
   42d04:	0005cf37 	.word	0x0005cf37
   42d08:	2001abe8 	.word	0x2001abe8

00042d0c <Tower_Read_Fail_Change>:
{
   42d0c:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   42d0e:	480e      	ldr	r0, [pc, #56]	; (42d48 <Tower_Read_Fail_Change+0x3c>)
   42d10:	f017 fcd7 	bl	5a6c2 <z_device_is_ready>
	if (!device_is_ready(Tower_Read_Fail.port)) 
   42d14:	b920      	cbnz	r0, 42d20 <Tower_Read_Fail_Change+0x14>
		printk("Tower Read Fail Button not ready!\n");
   42d16:	480d      	ldr	r0, [pc, #52]	; (42d4c <Tower_Read_Fail_Change+0x40>)
}
   42d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Tower Read Fail Button not configured!\n");
   42d1c:	f012 bd40 	b.w	557a0 <printk>
	ret = gpio_pin_configure_dt(&Tower_Read_Fail, GPIO_OUTPUT_ACTIVE);
   42d20:	480b      	ldr	r0, [pc, #44]	; (42d50 <Tower_Read_Fail_Change+0x44>)
   42d22:	f012 fc6a 	bl	555fa <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) 
   42d26:	2800      	cmp	r0, #0
   42d28:	da01      	bge.n	42d2e <Tower_Read_Fail_Change+0x22>
		printk("Tower Read Fail Button not configured!\n");
   42d2a:	480a      	ldr	r0, [pc, #40]	; (42d54 <Tower_Read_Fail_Change+0x48>)
   42d2c:	e7f4      	b.n	42d18 <Tower_Read_Fail_Change+0xc>
	ret  = gpio_pin_set_dt(&Tower_Read_Fail, HIGH);
   42d2e:	2101      	movs	r1, #1
   42d30:	4807      	ldr	r0, [pc, #28]	; (42d50 <Tower_Read_Fail_Change+0x44>)
   42d32:	f012 fc8b 	bl	5564c <gpio_pin_set_dt.isra.0>
	k_msleep(TOGGLE_TIME);
   42d36:	f012 fc9d 	bl	55674 <k_msleep.constprop.0.isra.0>
}
   42d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret  = gpio_pin_set_dt(&Tower_Read_Fail, LOW);
   42d3e:	2100      	movs	r1, #0
   42d40:	4803      	ldr	r0, [pc, #12]	; (42d50 <Tower_Read_Fail_Change+0x44>)
   42d42:	f012 bc83 	b.w	5564c <gpio_pin_set_dt.isra.0>
   42d46:	bf00      	nop
   42d48:	0005bc1c 	.word	0x0005bc1c
   42d4c:	0005cf50 	.word	0x0005cf50
   42d50:	0005c1b8 	.word	0x0005c1b8
   42d54:	0005cf73 	.word	0x0005cf73

00042d58 <Tower_Buffer_Full_Change>:
{
   42d58:	b508      	push	{r3, lr}
   42d5a:	480e      	ldr	r0, [pc, #56]	; (42d94 <Tower_Buffer_Full_Change+0x3c>)
   42d5c:	f017 fcb1 	bl	5a6c2 <z_device_is_ready>
	if (!device_is_ready(Tower_Buffer_Full.port)) 
   42d60:	b920      	cbnz	r0, 42d6c <Tower_Buffer_Full_Change+0x14>
		printk("Tower Buffer Button not ready!\n");
   42d62:	480d      	ldr	r0, [pc, #52]	; (42d98 <Tower_Buffer_Full_Change+0x40>)
}
   42d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Tower Buffer Button not configured!\n");
   42d68:	f012 bd1a 	b.w	557a0 <printk>
	ret = gpio_pin_configure_dt(&Tower_Buffer_Full, GPIO_OUTPUT_ACTIVE);
   42d6c:	480b      	ldr	r0, [pc, #44]	; (42d9c <Tower_Buffer_Full_Change+0x44>)
   42d6e:	f012 fc44 	bl	555fa <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) 
   42d72:	2800      	cmp	r0, #0
   42d74:	da01      	bge.n	42d7a <Tower_Buffer_Full_Change+0x22>
		printk("Tower Buffer Button not configured!\n");
   42d76:	480a      	ldr	r0, [pc, #40]	; (42da0 <Tower_Buffer_Full_Change+0x48>)
   42d78:	e7f4      	b.n	42d64 <Tower_Buffer_Full_Change+0xc>
	ret  = gpio_pin_set_dt(&Tower_Buffer_Full, HIGH);
   42d7a:	2101      	movs	r1, #1
   42d7c:	4807      	ldr	r0, [pc, #28]	; (42d9c <Tower_Buffer_Full_Change+0x44>)
   42d7e:	f012 fc65 	bl	5564c <gpio_pin_set_dt.isra.0>
	k_msleep(TOGGLE_TIME);
   42d82:	f012 fc77 	bl	55674 <k_msleep.constprop.0.isra.0>
}
   42d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret  = gpio_pin_set_dt(&Tower_Buffer_Full, LOW);
   42d8a:	2100      	movs	r1, #0
   42d8c:	4803      	ldr	r0, [pc, #12]	; (42d9c <Tower_Buffer_Full_Change+0x44>)
   42d8e:	f012 bc5d 	b.w	5564c <gpio_pin_set_dt.isra.0>
   42d92:	bf00      	nop
   42d94:	0005bc1c 	.word	0x0005bc1c
   42d98:	0005cf9b 	.word	0x0005cf9b
   42d9c:	0005c1b0 	.word	0x0005c1b0
   42da0:	0005cfbb 	.word	0x0005cfbb

00042da4 <power>:
{
   42da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   42da6:	4c17      	ldr	r4, [pc, #92]	; (42e04 <power+0x60>)
   42da8:	4620      	mov	r0, r4
   42daa:	f017 fc8a 	bl	5a6c2 <z_device_is_ready>
	if (!device_is_ready(cons)) {
   42dae:	b930      	cbnz	r0, 42dbe <power+0x1a>
		printk("%s: device not ready.\n", cons->name);
   42db0:	6821      	ldr	r1, [r4, #0]
   42db2:	4815      	ldr	r0, [pc, #84]	; (42e08 <power+0x64>)
}
   42db4:	b004      	add	sp, #16
   42db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("%s: device not ready.\n", cons->name);
   42dba:	f012 bcf1 	b.w	557a0 <printk>
		printk("Retained data not supported\n");
   42dbe:	4813      	ldr	r0, [pc, #76]	; (42e0c <power+0x68>)
   42dc0:	f012 fcee 	bl	557a0 <printk>
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
   42dc4:	220c      	movs	r2, #12
   42dc6:	4b12      	ldr	r3, [pc, #72]	; (42e10 <power+0x6c>)
	printk("Entering system off!\nPress Power Button to reboot\n");
   42dc8:	4812      	ldr	r0, [pc, #72]	; (42e14 <power+0x70>)
   42dca:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
                                            const nrf_gpio_pin_pull_t *  p_pull,
                                            const nrf_gpio_pin_drive_t * p_drive,
                                            const nrf_gpio_pin_sense_t * p_sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number];
   42dce:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);

    /* Clear fields that will be updated. */
    cnf &= ~to_update;
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   42dd2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
   42dd6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
   42dda:	f012 fce1 	bl	557a0 <printk>
	pm_state_force(0u, &(struct pm_state_info){PM_STATE_SOFT_OFF, 0, 0});
   42dde:	2000      	movs	r0, #0
   42de0:	2306      	movs	r3, #6
   42de2:	a901      	add	r1, sp, #4
   42de4:	e9cd 0001 	strd	r0, r0, [sp, #4]
   42de8:	9003      	str	r0, [sp, #12]
   42dea:	f88d 3004 	strb.w	r3, [sp, #4]
   42dee:	f002 fd8d 	bl	4590c <pm_state_force>
	return z_impl_k_sleep(timeout);
   42df2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   42df6:	2100      	movs	r1, #0
   42df8:	f010 f888 	bl	52f0c <z_impl_k_sleep>
	printk("ERROR: System off failed\n");
   42dfc:	4806      	ldr	r0, [pc, #24]	; (42e18 <power+0x74>)
   42dfe:	f012 fccf 	bl	557a0 <printk>
	while (true) {
   42e02:	e7fe      	b.n	42e02 <power+0x5e>
   42e04:	0005bc54 	.word	0x0005bc54
   42e08:	0005cfe0 	.word	0x0005cfe0
   42e0c:	0005cff7 	.word	0x0005cff7
   42e10:	40842500 	.word	0x40842500
   42e14:	0005d014 	.word	0x0005d014
   42e18:	0005d047 	.word	0x0005d047

00042e1c <storage>:
{
   42e1c:	b507      	push	{r0, r1, r2, lr}
		if (disk_access_init(disk_pdrv) != 0) {
   42e1e:	481c      	ldr	r0, [pc, #112]	; (42e90 <storage+0x74>)
   42e20:	f013 f868 	bl	55ef4 <disk_access_init>
   42e24:	b170      	cbz	r0, 42e44 <storage+0x28>
			printk("Storage init ERROR!");
   42e26:	481b      	ldr	r0, [pc, #108]	; (42e94 <storage+0x78>)
			printk("Unable to get sector size");
   42e28:	f012 fcba 	bl	557a0 <printk>
	mp.mnt_point = disk_mount_pt;
   42e2c:	481a      	ldr	r0, [pc, #104]	; (42e98 <storage+0x7c>)
   42e2e:	4b1b      	ldr	r3, [pc, #108]	; (42e9c <storage+0x80>)
   42e30:	60c3      	str	r3, [r0, #12]
	int res = fs_mount(&mp);
   42e32:	f004 f8df 	bl	46ff4 <fs_mount>
	if (res == FR_OK) {
   42e36:	bb40      	cbnz	r0, 42e8a <storage+0x6e>
		printk("Disk mounted.\n");
   42e38:	4819      	ldr	r0, [pc, #100]	; (42ea0 <storage+0x84>)
}
   42e3a:	b003      	add	sp, #12
   42e3c:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Error mounting disk.\n");
   42e40:	f012 bcae 	b.w	557a0 <printk>
		if (disk_access_ioctl(disk_pdrv,
   42e44:	466a      	mov	r2, sp
   42e46:	2101      	movs	r1, #1
   42e48:	4811      	ldr	r0, [pc, #68]	; (42e90 <storage+0x74>)
   42e4a:	f013 f89d 	bl	55f88 <disk_access_ioctl>
   42e4e:	b108      	cbz	r0, 42e54 <storage+0x38>
			printk("Unable to get sector count");
   42e50:	4814      	ldr	r0, [pc, #80]	; (42ea4 <storage+0x88>)
   42e52:	e7e9      	b.n	42e28 <storage+0xc>
		printk("Block count %u\n", block_count);
   42e54:	9900      	ldr	r1, [sp, #0]
   42e56:	4814      	ldr	r0, [pc, #80]	; (42ea8 <storage+0x8c>)
   42e58:	f012 fca2 	bl	557a0 <printk>
		if (disk_access_ioctl(disk_pdrv,
   42e5c:	2102      	movs	r1, #2
   42e5e:	480c      	ldr	r0, [pc, #48]	; (42e90 <storage+0x74>)
   42e60:	aa01      	add	r2, sp, #4
   42e62:	f013 f891 	bl	55f88 <disk_access_ioctl>
   42e66:	b108      	cbz	r0, 42e6c <storage+0x50>
			printk("Unable to get sector size");
   42e68:	4810      	ldr	r0, [pc, #64]	; (42eac <storage+0x90>)
   42e6a:	e7dd      	b.n	42e28 <storage+0xc>
		printk("Sector size %u\n", block_size);
   42e6c:	9901      	ldr	r1, [sp, #4]
   42e6e:	4810      	ldr	r0, [pc, #64]	; (42eb0 <storage+0x94>)
   42e70:	f012 fc96 	bl	557a0 <printk>
		memory_size_mb = (uint64_t)block_count * block_size;
   42e74:	e9dd 3100 	ldrd	r3, r1, [sp]
   42e78:	fba3 3101 	umull	r3, r1, r3, r1
		printk("Memory Size(MB) %u\n", (uint32_t)(memory_size_mb >> 20));
   42e7c:	0d1b      	lsrs	r3, r3, #20
   42e7e:	480d      	ldr	r0, [pc, #52]	; (42eb4 <storage+0x98>)
   42e80:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
   42e84:	f012 fc8c 	bl	557a0 <printk>
   42e88:	e7d0      	b.n	42e2c <storage+0x10>
		printk("Error mounting disk.\n");
   42e8a:	480b      	ldr	r0, [pc, #44]	; (42eb8 <storage+0x9c>)
   42e8c:	e7d5      	b.n	42e3a <storage+0x1e>
   42e8e:	bf00      	nop
   42e90:	0005d061 	.word	0x0005d061
   42e94:	0005d064 	.word	0x0005d064
   42e98:	2001a540 	.word	0x2001a540
   42e9c:	0005d0e1 	.word	0x0005d0e1
   42ea0:	0005d0e6 	.word	0x0005d0e6
   42ea4:	0005d078 	.word	0x0005d078
   42ea8:	0005d093 	.word	0x0005d093
   42eac:	0005d0a3 	.word	0x0005d0a3
   42eb0:	0005d0bd 	.word	0x0005d0bd
   42eb4:	0005d0cd 	.word	0x0005d0cd
   42eb8:	0005d0f5 	.word	0x0005d0f5

00042ebc <AppendString>:
{
   42ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   42ec0:	4616      	mov	r6, r2
   42ec2:	2200      	movs	r2, #0
   42ec4:	b084      	sub	sp, #16
   42ec6:	af00      	add	r7, sp, #0
   42ec8:	4604      	mov	r4, r0
   42eca:	4689      	mov	r9, r1
	if(debug == true)
   42ecc:	461d      	mov	r5, r3
   42ece:	e9c7 2201 	strd	r2, r2, [r7, #4]
   42ed2:	60fa      	str	r2, [r7, #12]
   42ed4:	f106 0807 	add.w	r8, r6, #7
   42ed8:	b99b      	cbnz	r3, 42f02 <AppendString+0x46>
	fileStatus = fs_open(&firp,fname, FS_O_APPEND | FS_O_WRITE);
   42eda:	4601      	mov	r1, r0
   42edc:	2222      	movs	r2, #34	; 0x22
   42ede:	1d38      	adds	r0, r7, #4
   42ee0:	f003 febc 	bl	46c5c <fs_open>
	if(fileStatus)
   42ee4:	b118      	cbz	r0, 42eee <AppendString+0x32>
        printk("error open %s\n", fname);
   42ee6:	4621      	mov	r1, r4
   42ee8:	483f      	ldr	r0, [pc, #252]	; (42fe8 <AppendString+0x12c>)
   42eea:	f012 fc59 	bl	557a0 <printk>
	char conStr[length];
   42eee:	f028 0807 	bic.w	r8, r8, #7
   42ef2:	ebad 0d08 	sub.w	sp, sp, r8
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   42ef6:	4649      	mov	r1, r9
   42ef8:	4668      	mov	r0, sp
   42efa:	46e8      	mov	r8, sp
   42efc:	f018 f9d9 	bl	5b2b2 <strcpy>
	if(debug == true)
   42f00:	e026      	b.n	42f50 <AppendString+0x94>
		printk("file object created!\n");
   42f02:	483a      	ldr	r0, [pc, #232]	; (42fec <AppendString+0x130>)
   42f04:	f012 fc4c 	bl	557a0 <printk>
	fileStatus = fs_open(&firp,fname, FS_O_APPEND | FS_O_WRITE);
   42f08:	2222      	movs	r2, #34	; 0x22
   42f0a:	4621      	mov	r1, r4
   42f0c:	1d38      	adds	r0, r7, #4
   42f0e:	f003 fea5 	bl	46c5c <fs_open>
	if(fileStatus)
   42f12:	b118      	cbz	r0, 42f1c <AppendString+0x60>
        printk("error open %s\n", fname);
   42f14:	4621      	mov	r1, r4
   42f16:	4834      	ldr	r0, [pc, #208]	; (42fe8 <AppendString+0x12c>)
   42f18:	f012 fc42 	bl	557a0 <printk>
		printk("file opened!\n ");
   42f1c:	4834      	ldr	r0, [pc, #208]	; (42ff0 <AppendString+0x134>)
   42f1e:	f012 fc3f 	bl	557a0 <printk>
		printk("length: %d\n", length);
   42f22:	4631      	mov	r1, r6
   42f24:	4833      	ldr	r0, [pc, #204]	; (42ff4 <AppendString+0x138>)
   42f26:	f012 fc3b 	bl	557a0 <printk>
	char conStr[length];
   42f2a:	f028 0807 	bic.w	r8, r8, #7
		printk("copied to write string\n");
   42f2e:	4832      	ldr	r0, [pc, #200]	; (42ff8 <AppendString+0x13c>)
   42f30:	f012 fc36 	bl	557a0 <printk>
	char conStr[length];
   42f34:	ebad 0d08 	sub.w	sp, sp, r8
   42f38:	4649      	mov	r1, r9
   42f3a:	4668      	mov	r0, sp
   42f3c:	f018 f9b9 	bl	5b2b2 <strcpy>
		printk("Printing string %s\n", conStr);
   42f40:	482e      	ldr	r0, [pc, #184]	; (42ffc <AppendString+0x140>)
   42f42:	4669      	mov	r1, sp
   42f44:	f012 fc2c 	bl	557a0 <printk>
			printk("Printing characters\n");
   42f48:	482d      	ldr	r0, [pc, #180]	; (43000 <AppendString+0x144>)
	char conStr[length];
   42f4a:	46e8      	mov	r8, sp
			printk("Printing characters\n");
   42f4c:	f012 fc28 	bl	557a0 <printk>
{
   42f50:	f04f 0900 	mov.w	r9, #0
				printk("%c ", conStr[loop]);
   42f54:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 43018 <AppendString+0x15c>
	for(loop = 0; loop < length; loop++)
   42f58:	45b1      	cmp	r9, r6
   42f5a:	db1f      	blt.n	42f9c <AppendString+0xe0>
	if(debug == true)
   42f5c:	b11d      	cbz	r5, 42f66 <AppendString+0xaa>
		printk("Printing string %s\n", conStr);
   42f5e:	4641      	mov	r1, r8
   42f60:	4826      	ldr	r0, [pc, #152]	; (42ffc <AppendString+0x140>)
   42f62:	f012 fc1d 	bl	557a0 <printk>
	fileStatus = fs_write(&firp,&conStr,length+1);
   42f66:	4641      	mov	r1, r8
   42f68:	1c72      	adds	r2, r6, #1
   42f6a:	1d38      	adds	r0, r7, #4
   42f6c:	f003 ff06 	bl	46d7c <fs_write>
	if(fileStatus < 0)
   42f70:	2800      	cmp	r0, #0
   42f72:	da2f      	bge.n	42fd4 <AppendString+0x118>
        printk("other error write %s\n", fname);
   42f74:	4621      	mov	r1, r4
   42f76:	4823      	ldr	r0, [pc, #140]	; (43004 <AppendString+0x148>)
		printk("not implemented by underlying FS %s\n", fname);
   42f78:	f012 fc12 	bl	557a0 <printk>
	fileStatus = fs_close(&firp);
   42f7c:	1d38      	adds	r0, r7, #4
   42f7e:	f003 fed9 	bl	46d34 <fs_close>
    if(fileStatus)
   42f82:	b118      	cbz	r0, 42f8c <AppendString+0xd0>
        printk("error close%s!\n", fname);
   42f84:	4621      	mov	r1, r4
   42f86:	4820      	ldr	r0, [pc, #128]	; (43008 <AppendString+0x14c>)
   42f88:	f012 fc0a 	bl	557a0 <printk>
	if(debug == true)
   42f8c:	b115      	cbz	r5, 42f94 <AppendString+0xd8>
		printk("Done with Append String!\n");
   42f8e:	481f      	ldr	r0, [pc, #124]	; (4300c <AppendString+0x150>)
   42f90:	f012 fc06 	bl	557a0 <printk>
}
   42f94:	3710      	adds	r7, #16
   42f96:	46bd      	mov	sp, r7
   42f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if( (conStr[loop] >= 'a' && conStr[loop] <= 'z') 
   42f9c:	f818 1009 	ldrb.w	r1, [r8, r9]
   42fa0:	f021 0320 	bic.w	r3, r1, #32
   42fa4:	3b41      	subs	r3, #65	; 0x41
   42fa6:	2b19      	cmp	r3, #25
   42fa8:	d909      	bls.n	42fbe <AppendString+0x102>
			||  (conStr[loop] >= '0' && conStr[loop] <= '9')
   42faa:	f1a1 032f 	sub.w	r3, r1, #47	; 0x2f
   42fae:	2b0b      	cmp	r3, #11
   42fb0:	d905      	bls.n	42fbe <AppendString+0x102>
			||  (conStr[loop] == '\n') ||  (conStr[loop] == '/') 
   42fb2:	290a      	cmp	r1, #10
   42fb4:	d003      	beq.n	42fbe <AppendString+0x102>
			||  (conStr[loop] == ':') || (conStr[loop] == '+') 
   42fb6:	f1a1 032a 	sub.w	r3, r1, #42	; 0x2a
   42fba:	2b01      	cmp	r3, #1
   42fbc:	d806      	bhi.n	42fcc <AppendString+0x110>
			if(debug == true)
   42fbe:	b115      	cbz	r5, 42fc6 <AppendString+0x10a>
				printk("%c ", conStr[loop]);
   42fc0:	4650      	mov	r0, sl
   42fc2:	f012 fbed 	bl	557a0 <printk>
	for(loop = 0; loop < length; loop++)
   42fc6:	f109 0901 	add.w	r9, r9, #1
   42fca:	e7c5      	b.n	42f58 <AppendString+0x9c>
			conStr[loop] = '_';
   42fcc:	235f      	movs	r3, #95	; 0x5f
   42fce:	f808 3009 	strb.w	r3, [r8, r9]
   42fd2:	e7f8      	b.n	42fc6 <AppendString+0x10a>
	else if(fileStatus == EBADF)
   42fd4:	2809      	cmp	r0, #9
   42fd6:	d102      	bne.n	42fde <AppendString+0x122>
		printk("file not opened or closed %s\n", fname);
   42fd8:	4621      	mov	r1, r4
   42fda:	480d      	ldr	r0, [pc, #52]	; (43010 <AppendString+0x154>)
   42fdc:	e7cc      	b.n	42f78 <AppendString+0xbc>
	else if(fileStatus == ENOTSUP)
   42fde:	2886      	cmp	r0, #134	; 0x86
   42fe0:	d1cc      	bne.n	42f7c <AppendString+0xc0>
		printk("not implemented by underlying FS %s\n", fname);
   42fe2:	4621      	mov	r1, r4
   42fe4:	480b      	ldr	r0, [pc, #44]	; (43014 <AppendString+0x158>)
   42fe6:	e7c7      	b.n	42f78 <AppendString+0xbc>
   42fe8:	0005cd3a 	.word	0x0005cd3a
   42fec:	0005d10b 	.word	0x0005d10b
   42ff0:	0005d121 	.word	0x0005d121
   42ff4:	0005d130 	.word	0x0005d130
   42ff8:	0005d13c 	.word	0x0005d13c
   42ffc:	0005d154 	.word	0x0005d154
   43000:	0005d168 	.word	0x0005d168
   43004:	0005cd49 	.word	0x0005cd49
   43008:	0005cda2 	.word	0x0005cda2
   4300c:	0005d181 	.word	0x0005d181
   43010:	0005cd5f 	.word	0x0005cd5f
   43014:	0005cd7d 	.word	0x0005cd7d
   43018:	0005d17d 	.word	0x0005d17d

0004301c <empty>:
{
   4301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(t1ID, 0, sizeof(t1ID));
   4301e:	240f      	movs	r4, #15
   43020:	4f23      	ldr	r7, [pc, #140]	; (430b0 <empty+0x94>)
	memset(t2ID, 0, sizeof(t2ID));
   43022:	4e24      	ldr	r6, [pc, #144]	; (430b4 <empty+0x98>)
	memset(t1ID, 0, sizeof(t1ID));
   43024:	4622      	mov	r2, r4
   43026:	2100      	movs	r1, #0
   43028:	4638      	mov	r0, r7
   4302a:	f017 ff95 	bl	5af58 <memset>
	memset(t3ID, 0, sizeof(t3ID));
   4302e:	4d22      	ldr	r5, [pc, #136]	; (430b8 <empty+0x9c>)
	memset(t2ID, 0, sizeof(t2ID));
   43030:	4622      	mov	r2, r4
   43032:	2100      	movs	r1, #0
   43034:	4630      	mov	r0, r6
   43036:	f017 ff8f 	bl	5af58 <memset>
	memset(t3ID, 0, sizeof(t3ID));
   4303a:	4622      	mov	r2, r4
	strcpy(t1ID, "empty");
   4303c:	4c1f      	ldr	r4, [pc, #124]	; (430bc <empty+0xa0>)
	memset(t3ID, 0, sizeof(t3ID));
   4303e:	2100      	movs	r1, #0
   43040:	4628      	mov	r0, r5
   43042:	f017 ff89 	bl	5af58 <memset>
	strcpy(t1ID, "empty");
   43046:	4621      	mov	r1, r4
   43048:	4638      	mov	r0, r7
   4304a:	f018 f932 	bl	5b2b2 <strcpy>
	strcpy(t2ID, "empty");
   4304e:	4621      	mov	r1, r4
   43050:	4630      	mov	r0, r6
   43052:	f018 f92e 	bl	5b2b2 <strcpy>
	strcpy(t3ID, "empty");
   43056:	4621      	mov	r1, r4
   43058:	4628      	mov	r0, r5
   4305a:	f018 f92a 	bl	5b2b2 <strcpy>
	strcpy(t1COPS, "noCOPS1");
   4305e:	4918      	ldr	r1, [pc, #96]	; (430c0 <empty+0xa4>)
   43060:	4818      	ldr	r0, [pc, #96]	; (430c4 <empty+0xa8>)
   43062:	f018 f926 	bl	5b2b2 <strcpy>
	strcpy(t2COPS, "noCOPS2");
   43066:	4918      	ldr	r1, [pc, #96]	; (430c8 <empty+0xac>)
   43068:	4818      	ldr	r0, [pc, #96]	; (430cc <empty+0xb0>)
   4306a:	f018 f922 	bl	5b2b2 <strcpy>
	strcpy(t3COPS, "noCOPS3");
   4306e:	4918      	ldr	r1, [pc, #96]	; (430d0 <empty+0xb4>)
   43070:	4818      	ldr	r0, [pc, #96]	; (430d4 <empty+0xb8>)
   43072:	f018 f91e 	bl	5b2b2 <strcpy>
	strcpy(t1SNR,"noSNR1");
   43076:	4918      	ldr	r1, [pc, #96]	; (430d8 <empty+0xbc>)
   43078:	4818      	ldr	r0, [pc, #96]	; (430dc <empty+0xc0>)
   4307a:	f018 f91a 	bl	5b2b2 <strcpy>
	strcpy(t2SNR,"noSNR2");
   4307e:	4918      	ldr	r1, [pc, #96]	; (430e0 <empty+0xc4>)
   43080:	4818      	ldr	r0, [pc, #96]	; (430e4 <empty+0xc8>)
   43082:	f018 f916 	bl	5b2b2 <strcpy>
	strcpy(t3SNR,"noSNR3");
   43086:	4918      	ldr	r1, [pc, #96]	; (430e8 <empty+0xcc>)
   43088:	4818      	ldr	r0, [pc, #96]	; (430ec <empty+0xd0>)
   4308a:	f018 f912 	bl	5b2b2 <strcpy>
	strcpy(t1Band,"noBand1");
   4308e:	4918      	ldr	r1, [pc, #96]	; (430f0 <empty+0xd4>)
   43090:	4818      	ldr	r0, [pc, #96]	; (430f4 <empty+0xd8>)
   43092:	f018 f90e 	bl	5b2b2 <strcpy>
	strcpy(t2Band,"noBand2");
   43096:	4918      	ldr	r1, [pc, #96]	; (430f8 <empty+0xdc>)
   43098:	4818      	ldr	r0, [pc, #96]	; (430fc <empty+0xe0>)
   4309a:	f018 f90a 	bl	5b2b2 <strcpy>
	strcpy(t3Band,"noBand3");
   4309e:	4918      	ldr	r1, [pc, #96]	; (43100 <empty+0xe4>)
   430a0:	4818      	ldr	r0, [pc, #96]	; (43104 <empty+0xe8>)
   430a2:	f018 f906 	bl	5b2b2 <strcpy>
}
   430a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Towers emptied!\n");
   430aa:	4817      	ldr	r0, [pc, #92]	; (43108 <empty+0xec>)
   430ac:	f012 bb78 	b.w	557a0 <printk>
   430b0:	2001dce9 	.word	0x2001dce9
   430b4:	2001dab7 	.word	0x2001dab7
   430b8:	2001d885 	.word	0x2001d885
   430bc:	0005d19b 	.word	0x0005d19b
   430c0:	0005d1a1 	.word	0x0005d1a1
   430c4:	2001dca0 	.word	0x2001dca0
   430c8:	0005d1a9 	.word	0x0005d1a9
   430cc:	2001da6e 	.word	0x2001da6e
   430d0:	0005d1b1 	.word	0x0005d1b1
   430d4:	2001d83c 	.word	0x2001d83c
   430d8:	0005d1b9 	.word	0x0005d1b9
   430dc:	2001daf8 	.word	0x2001daf8
   430e0:	0005d1c0 	.word	0x0005d1c0
   430e4:	2001d8c6 	.word	0x2001d8c6
   430e8:	0005d1c7 	.word	0x0005d1c7
   430ec:	2001d694 	.word	0x2001d694
   430f0:	0005d1ce 	.word	0x0005d1ce
   430f4:	2001dac6 	.word	0x2001dac6
   430f8:	0005d1d6 	.word	0x0005d1d6
   430fc:	2001d894 	.word	0x2001d894
   43100:	0005d1de 	.word	0x0005d1de
   43104:	2001d662 	.word	0x2001d662
   43108:	0005d1e6 	.word	0x0005d1e6

0004310c <crypto_finish>:
{
   4310c:	b508      	push	{r3, lr}
	status = psa_destroy_key(key_handle);
   4310e:	4b04      	ldr	r3, [pc, #16]	; (43120 <crypto_finish+0x14>)
   43110:	6818      	ldr	r0, [r3, #0]
   43112:	f00a f8dd 	bl	4d2d0 <psa_destroy_key>
	if (status != PSA_SUCCESS) {
   43116:	3800      	subs	r0, #0
   43118:	bf18      	it	ne
   4311a:	2001      	movne	r0, #1
}
   4311c:	4240      	negs	r0, r0
   4311e:	bd08      	pop	{r3, pc}
   43120:	2001b178 	.word	0x2001b178

00043124 <generate_key>:
	psa_key_attributes_t key_attributes = PSA_KEY_ATTRIBUTES_INIT;
   43124:	2300      	movs	r3, #0
}

static inline void psa_set_key_algorithm(psa_key_attributes_t *attributes,
                                         psa_algorithm_t alg)
{
    attributes->alg = alg;
   43126:	f240 3101 	movw	r1, #769	; 0x301
{
   4312a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	psa_key_attributes_t key_attributes = PSA_KEY_ATTRIBUTES_INIT;
   4312e:	4a3d      	ldr	r2, [pc, #244]	; (43224 <generate_key+0x100>)
{
   43130:	b0ae      	sub	sp, #184	; 0xb8
	psa_key_attributes_t key_attributes = PSA_KEY_ATTRIBUTES_INIT;
   43132:	e9cd 2308 	strd	r2, r3, [sp, #32]
   43136:	930a      	str	r3, [sp, #40]	; 0x28
	status = psa_generate_key(&key_attributes, &key_handle);
   43138:	4c3b      	ldr	r4, [pc, #236]	; (43228 <generate_key+0x104>)
   4313a:	4b3c      	ldr	r3, [pc, #240]	; (4322c <generate_key+0x108>)
   4313c:	a808      	add	r0, sp, #32
   4313e:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
   43142:	4621      	mov	r1, r4
   43144:	f00a f9e0 	bl	4d508 <psa_generate_key>
	if (status != PSA_SUCCESS) {
   43148:	4605      	mov	r5, r0
   4314a:	2800      	cmp	r0, #0
   4314c:	d167      	bne.n	4321e <generate_key+0xfa>
	psa_reset_key_attributes(&key_attributes);
   4314e:	a808      	add	r0, sp, #32
   43150:	f00a f8da 	bl	4d308 <psa_reset_key_attributes>
	uint32_t out_len = 128;
   43154:	2380      	movs	r3, #128	; 0x80
	status = psa_export_key(key_handle, out, sizeof(out), &out_len);
   43156:	2282      	movs	r2, #130	; 0x82
	uint32_t out_len = 128;
   43158:	9303      	str	r3, [sp, #12]
	status = psa_export_key(key_handle, out, sizeof(out), &out_len);
   4315a:	6820      	ldr	r0, [r4, #0]
   4315c:	ab03      	add	r3, sp, #12
   4315e:	a90d      	add	r1, sp, #52	; 0x34
   43160:	f00a f8f0 	bl	4d344 <psa_export_key>
	if(status != APP_SUCCESS)
   43164:	b110      	cbz	r0, 4316c <generate_key+0x48>
		printk("Problem with export!\n");
   43166:	4832      	ldr	r0, [pc, #200]	; (43230 <generate_key+0x10c>)
   43168:	f012 fb1a 	bl	557a0 <printk>
	printk("Key in decimal: ");
   4316c:	4831      	ldr	r0, [pc, #196]	; (43234 <generate_key+0x110>)
   4316e:	ac0d      	add	r4, sp, #52	; 0x34
   43170:	f012 fb16 	bl	557a0 <printk>
	for(loop = 0; loop < out_len; loop++)
   43174:	4627      	mov	r7, r4
   43176:	2600      	movs	r6, #0
		printk("%d ", out[loop]);
   43178:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 43248 <generate_key+0x124>
		sprintf(conD,"%d", out[loop]);
   4317c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 4324c <generate_key+0x128>
			strcat(keyDeci, conD);
   43180:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 43250 <generate_key+0x12c>
	for(loop = 0; loop < out_len; loop++)
   43184:	9b03      	ldr	r3, [sp, #12]
   43186:	42b3      	cmp	r3, r6
   43188:	d819      	bhi.n	431be <generate_key+0x9a>
	printk("\n");
   4318a:	482b      	ldr	r0, [pc, #172]	; (43238 <generate_key+0x114>)
   4318c:	f012 fb08 	bl	557a0 <printk>
	printk("Key in hex: ");
   43190:	482a      	ldr	r0, [pc, #168]	; (4323c <generate_key+0x118>)
   43192:	f012 fb05 	bl	557a0 <printk>
	for(loop = 0; loop < out_len; loop++)
   43196:	2600      	movs	r6, #0
		printk("%02x ", out[loop]);
   43198:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 43254 <generate_key+0x130>
		sprintf(conH,"%02x", out[loop]);
   4319c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 43258 <generate_key+0x134>
			strcat(keyHex, conH);
   431a0:	4f27      	ldr	r7, [pc, #156]	; (43240 <generate_key+0x11c>)
	for(loop = 0; loop < out_len; loop++)
   431a2:	9b03      	ldr	r3, [sp, #12]
   431a4:	42b3      	cmp	r3, r6
   431a6:	d822      	bhi.n	431ee <generate_key+0xca>
	printk("\n");
   431a8:	4823      	ldr	r0, [pc, #140]	; (43238 <generate_key+0x114>)
   431aa:	f012 faf9 	bl	557a0 <printk>
	printk("Key in hex: %s\n", keyHex);
   431ae:	4924      	ldr	r1, [pc, #144]	; (43240 <generate_key+0x11c>)
   431b0:	4824      	ldr	r0, [pc, #144]	; (43244 <generate_key+0x120>)
   431b2:	f012 faf5 	bl	557a0 <printk>
}
   431b6:	4628      	mov	r0, r5
   431b8:	b02e      	add	sp, #184	; 0xb8
   431ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printk("%d ", out[loop]);
   431be:	7839      	ldrb	r1, [r7, #0]
   431c0:	4648      	mov	r0, r9
   431c2:	f012 faed 	bl	557a0 <printk>
		sprintf(conD,"%d", out[loop]);
   431c6:	f817 3b01 	ldrb.w	r3, [r7], #1
   431ca:	2205      	movs	r2, #5
   431cc:	2100      	movs	r1, #0
   431ce:	9300      	str	r3, [sp, #0]
   431d0:	a804      	add	r0, sp, #16
   431d2:	4653      	mov	r3, sl
   431d4:	f017 ffe9 	bl	5b1aa <__sprintf_chk>
			strcpy(keyDeci, conD);
   431d8:	2280      	movs	r2, #128	; 0x80
   431da:	4640      	mov	r0, r8
   431dc:	a904      	add	r1, sp, #16
		if(loop == 0)
   431de:	b91e      	cbnz	r6, 431e8 <generate_key+0xc4>
			strcpy(keyDeci, conD);
   431e0:	f018 f86f 	bl	5b2c2 <__strcpy_chk>
	for(loop = 0; loop < out_len; loop++)
   431e4:	3601      	adds	r6, #1
   431e6:	e7cd      	b.n	43184 <generate_key+0x60>
			strcat(keyDeci, conD);
   431e8:	f018 f83e 	bl	5b268 <__strcat_chk>
   431ec:	e7fa      	b.n	431e4 <generate_key+0xc0>
		printk("%02x ", out[loop]);
   431ee:	7821      	ldrb	r1, [r4, #0]
   431f0:	4640      	mov	r0, r8
   431f2:	f012 fad5 	bl	557a0 <printk>
		sprintf(conH,"%02x", out[loop]);
   431f6:	f814 3b01 	ldrb.w	r3, [r4], #1
   431fa:	2205      	movs	r2, #5
   431fc:	2100      	movs	r1, #0
   431fe:	9300      	str	r3, [sp, #0]
   43200:	a806      	add	r0, sp, #24
   43202:	464b      	mov	r3, r9
   43204:	f017 ffd1 	bl	5b1aa <__sprintf_chk>
			strcpy(keyHex, conH);
   43208:	2280      	movs	r2, #128	; 0x80
   4320a:	4638      	mov	r0, r7
   4320c:	a906      	add	r1, sp, #24
		if(loop == 0)
   4320e:	b91e      	cbnz	r6, 43218 <generate_key+0xf4>
			strcpy(keyHex, conH);
   43210:	f018 f857 	bl	5b2c2 <__strcpy_chk>
	for(loop = 0; loop < out_len; loop++)
   43214:	3601      	adds	r6, #1
   43216:	e7c4      	b.n	431a2 <generate_key+0x7e>
			strcat(keyHex, conH);
   43218:	f018 f826 	bl	5b268 <__strcat_chk>
   4321c:	e7fa      	b.n	43214 <generate_key+0xf0>
		return APP_ERROR;
   4321e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   43222:	e7c8      	b.n	431b6 <generate_key+0x92>
   43224:	00802400 	.word	0x00802400
   43228:	2001b178 	.word	0x2001b178
   4322c:	05500200 	.word	0x05500200
   43230:	0005d1f7 	.word	0x0005d1f7
   43234:	0005d20d 	.word	0x0005d20d
   43238:	0005fccd 	.word	0x0005fccd
   4323c:	0005d222 	.word	0x0005d222
   43240:	2001dcf8 	.word	0x2001dcf8
   43244:	0005d23a 	.word	0x0005d23a
   43248:	0005d21e 	.word	0x0005d21e
   4324c:	0005fdff 	.word	0x0005fdff
   43250:	2001dd78 	.word	0x2001dd78
   43254:	0005d22f 	.word	0x0005d22f
   43258:	0005d235 	.word	0x0005d235

0004325c <encrypt_aes_gcm>:
{
   4325c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	status = psa_generate_random(m_iv, NRF_CRYPTO_EXAMPLE_AES_IV_SIZE);
   43260:	210c      	movs	r1, #12
{
   43262:	b08b      	sub	sp, #44	; 0x2c
	status = psa_generate_random(m_iv, NRF_CRYPTO_EXAMPLE_AES_IV_SIZE);
   43264:	485c      	ldr	r0, [pc, #368]	; (433d8 <encrypt_aes_gcm+0x17c>)
   43266:	f00a f92d 	bl	4d4c4 <psa_generate_random>
	if (status != PSA_SUCCESS) {
   4326a:	b128      	cbz	r0, 43278 <encrypt_aes_gcm+0x1c>
		return APP_ERROR;
   4326c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   43270:	4620      	mov	r0, r4
   43272:	b00b      	add	sp, #44	; 0x2c
   43274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	status = psa_aead_encrypt(key_handle,
   43278:	ab09      	add	r3, sp, #36	; 0x24
   4327a:	9306      	str	r3, [sp, #24]
   4327c:	4b57      	ldr	r3, [pc, #348]	; (433dc <encrypt_aes_gcm+0x180>)
   4327e:	f44f 6bfc 	mov.w	fp, #2016	; 0x7e0
   43282:	9304      	str	r3, [sp, #16]
   43284:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   43288:	f04f 0923 	mov.w	r9, #35	; 0x23
   4328c:	9303      	str	r3, [sp, #12]
   4328e:	4b54      	ldr	r3, [pc, #336]	; (433e0 <encrypt_aes_gcm+0x184>)
   43290:	4854      	ldr	r0, [pc, #336]	; (433e4 <encrypt_aes_gcm+0x188>)
   43292:	9302      	str	r3, [sp, #8]
   43294:	4b54      	ldr	r3, [pc, #336]	; (433e8 <encrypt_aes_gcm+0x18c>)
   43296:	f8cd b014 	str.w	fp, [sp, #20]
   4329a:	9300      	str	r3, [sp, #0]
   4329c:	f8cd 9004 	str.w	r9, [sp, #4]
   432a0:	230c      	movs	r3, #12
   432a2:	4a4d      	ldr	r2, [pc, #308]	; (433d8 <encrypt_aes_gcm+0x17c>)
   432a4:	4951      	ldr	r1, [pc, #324]	; (433ec <encrypt_aes_gcm+0x190>)
   432a6:	6800      	ldr	r0, [r0, #0]
   432a8:	f00a f870 	bl	4d38c <psa_aead_encrypt>
	if (status != PSA_SUCCESS) {
   432ac:	4604      	mov	r4, r0
   432ae:	2800      	cmp	r0, #0
   432b0:	d1dc      	bne.n	4326c <encrypt_aes_gcm+0x10>
	PRINT_HEX("IV", m_iv, sizeof(m_iv));
   432b2:	f04f 0a0c 	mov.w	sl, #12
   432b6:	f8df 814c 	ldr.w	r8, [pc, #332]	; 43404 <encrypt_aes_gcm+0x1a8>
   432ba:	4d4d      	ldr	r5, [pc, #308]	; (433f0 <encrypt_aes_gcm+0x194>)
   432bc:	4f4d      	ldr	r7, [pc, #308]	; (433f4 <encrypt_aes_gcm+0x198>)
   432be:	4e4e      	ldr	r6, [pc, #312]	; (433f8 <encrypt_aes_gcm+0x19c>)
   432c0:	4603      	mov	r3, r0
   432c2:	e9cd 0801 	strd	r0, r8, [sp, #4]
   432c6:	f8cd a010 	str.w	sl, [sp, #16]
   432ca:	9503      	str	r5, [sp, #12]
   432cc:	9000      	str	r0, [sp, #0]
   432ce:	2203      	movs	r2, #3
   432d0:	494a      	ldr	r1, [pc, #296]	; (433fc <encrypt_aes_gcm+0x1a0>)
   432d2:	f012 f9ac 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   432d6:	4620      	mov	r0, r4
   432d8:	f8cd a000 	str.w	sl, [sp]
   432dc:	2203      	movs	r2, #3
   432de:	e9cd 4601 	strd	r4, r6, [sp, #4]
   432e2:	4b3d      	ldr	r3, [pc, #244]	; (433d8 <encrypt_aes_gcm+0x17c>)
   432e4:	4945      	ldr	r1, [pc, #276]	; (433fc <encrypt_aes_gcm+0x1a0>)
   432e6:	9703      	str	r7, [sp, #12]
   432e8:	f012 f9a1 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   432ec:	9503      	str	r5, [sp, #12]
   432ee:	4d44      	ldr	r5, [pc, #272]	; (43400 <encrypt_aes_gcm+0x1a4>)
	PRINT_HEX("Additional data", m_additional_data, sizeof(m_additional_data));
   432f0:	f8df a114 	ldr.w	sl, [pc, #276]	; 43408 <encrypt_aes_gcm+0x1ac>
	PRINT_HEX("IV", m_iv, sizeof(m_iv));
   432f4:	4623      	mov	r3, r4
   432f6:	4620      	mov	r0, r4
   432f8:	2203      	movs	r2, #3
   432fa:	e9cd 4501 	strd	r4, r5, [sp, #4]
   432fe:	493f      	ldr	r1, [pc, #252]	; (433fc <encrypt_aes_gcm+0x1a0>)
   43300:	9400      	str	r4, [sp, #0]
   43302:	f012 f994 	bl	5562e <z_log_msg_runtime_create.constprop.0>
	PRINT_HEX("Additional data", m_additional_data, sizeof(m_additional_data));
   43306:	4623      	mov	r3, r4
   43308:	4620      	mov	r0, r4
   4330a:	f8cd 9010 	str.w	r9, [sp, #16]
   4330e:	2203      	movs	r2, #3
   43310:	e9cd 8a02 	strd	r8, sl, [sp, #8]
   43314:	e9cd 4400 	strd	r4, r4, [sp]
   43318:	4938      	ldr	r1, [pc, #224]	; (433fc <encrypt_aes_gcm+0x1a0>)
   4331a:	f012 f988 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   4331e:	4620      	mov	r0, r4
   43320:	e9cd 9400 	strd	r9, r4, [sp]
   43324:	2203      	movs	r2, #3
   43326:	e9cd 6702 	strd	r6, r7, [sp, #8]
   4332a:	4b2f      	ldr	r3, [pc, #188]	; (433e8 <encrypt_aes_gcm+0x18c>)
   4332c:	4933      	ldr	r1, [pc, #204]	; (433fc <encrypt_aes_gcm+0x1a0>)
   4332e:	f012 f97e 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   43332:	4623      	mov	r3, r4
   43334:	4620      	mov	r0, r4
   43336:	2203      	movs	r2, #3
   43338:	e9cd 5a02 	strd	r5, sl, [sp, #8]
   4333c:	e9cd 4400 	strd	r4, r4, [sp]
   43340:	492e      	ldr	r1, [pc, #184]	; (433fc <encrypt_aes_gcm+0x1a0>)
   43342:	f012 f974 	bl	5562e <z_log_msg_runtime_create.constprop.0>
	PRINT_HEX("Plaintext", m_plain_text, sizeof(m_plain_text));
   43346:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   4334a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4340c <encrypt_aes_gcm+0x1b0>
   4334e:	4620      	mov	r0, r4
   43350:	e9cd 8902 	strd	r8, r9, [sp, #8]
   43354:	9304      	str	r3, [sp, #16]
   43356:	2203      	movs	r2, #3
   43358:	4623      	mov	r3, r4
   4335a:	e9cd 4400 	strd	r4, r4, [sp]
   4335e:	4927      	ldr	r1, [pc, #156]	; (433fc <encrypt_aes_gcm+0x1a0>)
   43360:	f012 f965 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   43364:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   43368:	4620      	mov	r0, r4
   4336a:	9300      	str	r3, [sp, #0]
   4336c:	2203      	movs	r2, #3
   4336e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   43372:	4b1b      	ldr	r3, [pc, #108]	; (433e0 <encrypt_aes_gcm+0x184>)
   43374:	4921      	ldr	r1, [pc, #132]	; (433fc <encrypt_aes_gcm+0x1a0>)
   43376:	9401      	str	r4, [sp, #4]
   43378:	f012 f959 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   4337c:	e9cd 5902 	strd	r5, r9, [sp, #8]
	PRINT_HEX("Encrypted text", m_encrypted_text, sizeof(m_encrypted_text));
   43380:	f8df 908c 	ldr.w	r9, [pc, #140]	; 43410 <encrypt_aes_gcm+0x1b4>
	PRINT_HEX("Plaintext", m_plain_text, sizeof(m_plain_text));
   43384:	4623      	mov	r3, r4
   43386:	4620      	mov	r0, r4
   43388:	2203      	movs	r2, #3
   4338a:	e9cd 4400 	strd	r4, r4, [sp]
   4338e:	491b      	ldr	r1, [pc, #108]	; (433fc <encrypt_aes_gcm+0x1a0>)
   43390:	f012 f94d 	bl	5562e <z_log_msg_runtime_create.constprop.0>
	PRINT_HEX("Encrypted text", m_encrypted_text, sizeof(m_encrypted_text));
   43394:	4623      	mov	r3, r4
   43396:	4620      	mov	r0, r4
   43398:	2203      	movs	r2, #3
   4339a:	e9cd 8902 	strd	r8, r9, [sp, #8]
   4339e:	e9cd 4400 	strd	r4, r4, [sp]
   433a2:	4916      	ldr	r1, [pc, #88]	; (433fc <encrypt_aes_gcm+0x1a0>)
   433a4:	f8cd b010 	str.w	fp, [sp, #16]
   433a8:	f012 f941 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   433ac:	4620      	mov	r0, r4
   433ae:	2203      	movs	r2, #3
   433b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   433b4:	e9cd b400 	strd	fp, r4, [sp]
   433b8:	4b08      	ldr	r3, [pc, #32]	; (433dc <encrypt_aes_gcm+0x180>)
   433ba:	4910      	ldr	r1, [pc, #64]	; (433fc <encrypt_aes_gcm+0x1a0>)
   433bc:	f012 f937 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   433c0:	4623      	mov	r3, r4
   433c2:	2203      	movs	r2, #3
   433c4:	4620      	mov	r0, r4
   433c6:	e9cd 5902 	strd	r5, r9, [sp, #8]
   433ca:	e9cd 4400 	strd	r4, r4, [sp]
   433ce:	490b      	ldr	r1, [pc, #44]	; (433fc <encrypt_aes_gcm+0x1a0>)
   433d0:	f012 f92d 	bl	5562e <z_log_msg_runtime_create.constprop.0>
	return APP_SUCCESS;
   433d4:	e74c      	b.n	43270 <encrypt_aes_gcm+0x14>
   433d6:	bf00      	nop
   433d8:	2001d656 	.word	0x2001d656
   433dc:	2001c6a6 	.word	0x2001c6a6
   433e0:	2001ce86 	.word	0x2001ce86
   433e4:	2001b178 	.word	0x2001b178
   433e8:	2001aa00 	.word	0x2001aa00
   433ec:	05500200 	.word	0x05500200
   433f0:	0005d24a 	.word	0x0005d24a
   433f4:	0005d265 	.word	0x0005d265
   433f8:	0005d362 	.word	0x0005d362
   433fc:	0005bf9c 	.word	0x0005bf9c
   43400:	0005d26e 	.word	0x0005d26e
   43404:	0005d24d 	.word	0x0005d24d
   43408:	0005d280 	.word	0x0005d280
   4340c:	0005d290 	.word	0x0005d290
   43410:	0005d29a 	.word	0x0005d29a

00043414 <decrypt_aes_gcm>:
{
   43414:	b5f0      	push	{r4, r5, r6, r7, lr}
   43416:	b08b      	sub	sp, #44	; 0x2c
	status = psa_aead_decrypt(key_handle,
   43418:	ab09      	add	r3, sp, #36	; 0x24
   4341a:	9306      	str	r3, [sp, #24]
   4341c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
   43420:	9303      	str	r3, [sp, #12]
   43422:	4b23      	ldr	r3, [pc, #140]	; (434b0 <decrypt_aes_gcm+0x9c>)
   43424:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   43428:	9302      	str	r3, [sp, #8]
   4342a:	2323      	movs	r3, #35	; 0x23
   4342c:	4e21      	ldr	r6, [pc, #132]	; (434b4 <decrypt_aes_gcm+0xa0>)
   4342e:	9301      	str	r3, [sp, #4]
   43430:	4b21      	ldr	r3, [pc, #132]	; (434b8 <decrypt_aes_gcm+0xa4>)
   43432:	4822      	ldr	r0, [pc, #136]	; (434bc <decrypt_aes_gcm+0xa8>)
   43434:	9300      	str	r3, [sp, #0]
   43436:	9505      	str	r5, [sp, #20]
   43438:	9604      	str	r6, [sp, #16]
   4343a:	230c      	movs	r3, #12
   4343c:	4a20      	ldr	r2, [pc, #128]	; (434c0 <decrypt_aes_gcm+0xac>)
   4343e:	4921      	ldr	r1, [pc, #132]	; (434c4 <decrypt_aes_gcm+0xb0>)
   43440:	6800      	ldr	r0, [r0, #0]
   43442:	f009 fff1 	bl	4d428 <psa_aead_decrypt>
	if (status != PSA_SUCCESS) {
   43446:	4604      	mov	r4, r0
   43448:	2800      	cmp	r0, #0
   4344a:	d12d      	bne.n	434a8 <decrypt_aes_gcm+0x94>
	PRINT_HEX("Decrypted text", m_decrypted_text, sizeof(m_decrypted_text));
   4344c:	4f1e      	ldr	r7, [pc, #120]	; (434c8 <decrypt_aes_gcm+0xb4>)
   4344e:	4b1f      	ldr	r3, [pc, #124]	; (434cc <decrypt_aes_gcm+0xb8>)
   43450:	2203      	movs	r2, #3
   43452:	e9cd 0301 	strd	r0, r3, [sp, #4]
   43456:	491e      	ldr	r1, [pc, #120]	; (434d0 <decrypt_aes_gcm+0xbc>)
   43458:	4603      	mov	r3, r0
   4345a:	9000      	str	r0, [sp, #0]
   4345c:	9504      	str	r5, [sp, #16]
   4345e:	9703      	str	r7, [sp, #12]
   43460:	f012 f8e5 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   43464:	4b1b      	ldr	r3, [pc, #108]	; (434d4 <decrypt_aes_gcm+0xc0>)
   43466:	2203      	movs	r2, #3
   43468:	9303      	str	r3, [sp, #12]
   4346a:	4b1b      	ldr	r3, [pc, #108]	; (434d8 <decrypt_aes_gcm+0xc4>)
   4346c:	4620      	mov	r0, r4
   4346e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   43472:	4917      	ldr	r1, [pc, #92]	; (434d0 <decrypt_aes_gcm+0xbc>)
   43474:	4633      	mov	r3, r6
   43476:	9500      	str	r5, [sp, #0]
   43478:	f012 f8d9 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   4347c:	4b17      	ldr	r3, [pc, #92]	; (434dc <decrypt_aes_gcm+0xc8>)
   4347e:	2203      	movs	r2, #3
   43480:	4620      	mov	r0, r4
   43482:	e9cd 4301 	strd	r4, r3, [sp, #4]
   43486:	4912      	ldr	r1, [pc, #72]	; (434d0 <decrypt_aes_gcm+0xbc>)
   43488:	4623      	mov	r3, r4
   4348a:	9703      	str	r7, [sp, #12]
   4348c:	9400      	str	r4, [sp, #0]
   4348e:	f012 f8ce 	bl	5562e <z_log_msg_runtime_create.constprop.0>
	if (memcmp(m_decrypted_text, m_plain_text, NRF_CRYPTO_EXAMPLE_AES_MAX_TEXT_SIZE) != 0) {
   43492:	462a      	mov	r2, r5
   43494:	4630      	mov	r0, r6
   43496:	4912      	ldr	r1, [pc, #72]	; (434e0 <decrypt_aes_gcm+0xcc>)
   43498:	f017 fd14 	bl	5aec4 <memcmp>
   4349c:	3800      	subs	r0, #0
   4349e:	bf18      	it	ne
   434a0:	2001      	movne	r0, #1
   434a2:	4240      	negs	r0, r0
}
   434a4:	b00b      	add	sp, #44	; 0x2c
   434a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return APP_ERROR;
   434a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   434ac:	e7fa      	b.n	434a4 <decrypt_aes_gcm+0x90>
   434ae:	bf00      	nop
   434b0:	2001c6a6 	.word	0x2001c6a6
   434b4:	2001bed6 	.word	0x2001bed6
   434b8:	2001aa00 	.word	0x2001aa00
   434bc:	2001b178 	.word	0x2001b178
   434c0:	2001d656 	.word	0x2001d656
   434c4:	05500200 	.word	0x05500200
   434c8:	0005d2a9 	.word	0x0005d2a9
   434cc:	0005d24d 	.word	0x0005d24d
   434d0:	0005bf9c 	.word	0x0005bf9c
   434d4:	0005d265 	.word	0x0005d265
   434d8:	0005d362 	.word	0x0005d362
   434dc:	0005d26e 	.word	0x0005d26e
   434e0:	2001ce86 	.word	0x2001ce86

000434e4 <startCrypto>:
{
   434e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	status = crypto_init();
   434e6:	f012 f8ca 	bl	5567e <crypto_init>
	if (status != 0) {
   434ea:	b148      	cbz	r0, 43500 <startCrypto+0x1c>
		LOG_INF(APP_ERROR_MESSAGE);
   434ec:	4b0d      	ldr	r3, [pc, #52]	; (43524 <startCrypto+0x40>)
   434ee:	2203      	movs	r2, #3
   434f0:	9302      	str	r3, [sp, #8]
   434f2:	2300      	movs	r3, #0
   434f4:	490c      	ldr	r1, [pc, #48]	; (43528 <startCrypto+0x44>)
   434f6:	4618      	mov	r0, r3
   434f8:	e9cd 3300 	strd	r3, r3, [sp]
   434fc:	f012 f897 	bl	5562e <z_log_msg_runtime_create.constprop.0>
	status = generate_key();
   43500:	f7ff fe10 	bl	43124 <generate_key>
	if (status != 0) {
   43504:	b148      	cbz	r0, 4351a <startCrypto+0x36>
		LOG_INF(APP_ERROR_MESSAGE);
   43506:	4b07      	ldr	r3, [pc, #28]	; (43524 <startCrypto+0x40>)
   43508:	2203      	movs	r2, #3
   4350a:	9302      	str	r3, [sp, #8]
   4350c:	2300      	movs	r3, #0
   4350e:	4906      	ldr	r1, [pc, #24]	; (43528 <startCrypto+0x44>)
   43510:	4618      	mov	r0, r3
   43512:	e9cd 3300 	strd	r3, r3, [sp]
   43516:	f012 f88a 	bl	5562e <z_log_msg_runtime_create.constprop.0>
}
   4351a:	2000      	movs	r0, #0
   4351c:	b005      	add	sp, #20
   4351e:	f85d fb04 	ldr.w	pc, [sp], #4
   43522:	bf00      	nop
   43524:	0005d2b8 	.word	0x0005d2b8
   43528:	0005bf9c 	.word	0x0005bf9c

0004352c <encryptData>:
{
   4352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4352e:	4d1d      	ldr	r5, [pc, #116]	; (435a4 <encryptData+0x78>)
   43530:	4604      	mov	r4, r0
   43532:	460e      	mov	r6, r1
	printk("data to encrypt: %s\n", str);
   43534:	4601      	mov	r1, r0
   43536:	481c      	ldr	r0, [pc, #112]	; (435a8 <encryptData+0x7c>)
   43538:	f012 f932 	bl	557a0 <printk>
	for(loop = 0; loop < strLength; loop++)
   4353c:	462a      	mov	r2, r5
   4353e:	2300      	movs	r3, #0
   43540:	42b3      	cmp	r3, r6
   43542:	db29      	blt.n	43598 <encryptData+0x6c>
	printk("string in deci: ");
   43544:	4819      	ldr	r0, [pc, #100]	; (435ac <encryptData+0x80>)
   43546:	f012 f92b 	bl	557a0 <printk>
	for(loop = 0; loop < sizeof(m_plain_text) / sizeof(m_plain_text[0]); loop++)
   4354a:	2400      	movs	r4, #0
	printk("string in deci: ");
   4354c:	4e15      	ldr	r6, [pc, #84]	; (435a4 <encryptData+0x78>)
		printk("%d ", m_plain_text[loop]);
   4354e:	4f18      	ldr	r7, [pc, #96]	; (435b0 <encryptData+0x84>)
   43550:	4638      	mov	r0, r7
   43552:	f816 1b01 	ldrb.w	r1, [r6], #1
	for(loop = 0; loop < sizeof(m_plain_text) / sizeof(m_plain_text[0]); loop++)
   43556:	3401      	adds	r4, #1
		printk("%d ", m_plain_text[loop]);
   43558:	f012 f922 	bl	557a0 <printk>
	for(loop = 0; loop < sizeof(m_plain_text) / sizeof(m_plain_text[0]); loop++)
   4355c:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   43560:	d1f6      	bne.n	43550 <encryptData+0x24>
	printk("\nstring in deci: ");
   43562:	4814      	ldr	r0, [pc, #80]	; (435b4 <encryptData+0x88>)
   43564:	f012 f91c 	bl	557a0 <printk>
	for(loop = 0; loop < sizeof(m_plain_text) / sizeof(m_plain_text[0]); loop++)
   43568:	2400      	movs	r4, #0
		printk("%02x ", m_plain_text[loop]);
   4356a:	4e13      	ldr	r6, [pc, #76]	; (435b8 <encryptData+0x8c>)
   4356c:	4630      	mov	r0, r6
   4356e:	f815 1b01 	ldrb.w	r1, [r5], #1
	for(loop = 0; loop < sizeof(m_plain_text) / sizeof(m_plain_text[0]); loop++)
   43572:	3401      	adds	r4, #1
		printk("%02x ", m_plain_text[loop]);
   43574:	f012 f914 	bl	557a0 <printk>
	for(loop = 0; loop < sizeof(m_plain_text) / sizeof(m_plain_text[0]); loop++)
   43578:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   4357c:	d1f6      	bne.n	4356c <encryptData+0x40>
	printk("\n");
   4357e:	480f      	ldr	r0, [pc, #60]	; (435bc <encryptData+0x90>)
   43580:	f012 f90e 	bl	557a0 <printk>
	printk("Finished converting!\n");
   43584:	480e      	ldr	r0, [pc, #56]	; (435c0 <encryptData+0x94>)
   43586:	f012 f90b 	bl	557a0 <printk>
	status = encrypt_aes_gcm();
   4358a:	f7ff fe67 	bl	4325c <encrypt_aes_gcm>
	if (status != 0) {
   4358e:	3800      	subs	r0, #0
   43590:	bf18      	it	ne
   43592:	2001      	movne	r0, #1
}
   43594:	4240      	negs	r0, r0
   43596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m_plain_text[loop] = (uint8_t *)(str[loop]);
   43598:	5ce1      	ldrb	r1, [r4, r3]
	for(loop = 0; loop < strLength; loop++)
   4359a:	3301      	adds	r3, #1
		m_plain_text[loop] = (uint8_t *)(str[loop]);
   4359c:	f802 1b01 	strb.w	r1, [r2], #1
	for(loop = 0; loop < strLength; loop++)
   435a0:	e7ce      	b.n	43540 <encryptData+0x14>
   435a2:	bf00      	nop
   435a4:	2001ce86 	.word	0x2001ce86
   435a8:	0005d2d3 	.word	0x0005d2d3
   435ac:	0005d2e9 	.word	0x0005d2e9
   435b0:	0005d21e 	.word	0x0005d21e
   435b4:	0005d2e8 	.word	0x0005d2e8
   435b8:	0005d22f 	.word	0x0005d22f
   435bc:	0005fccd 	.word	0x0005fccd
   435c0:	0005d2fa 	.word	0x0005d2fa

000435c4 <secure>:
{
   435c4:	b530      	push	{r4, r5, lr}
	strcpy(all, "\n");
   435c6:	4cd0      	ldr	r4, [pc, #832]	; (43908 <secure+0x344>)
{
   435c8:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
	strcat(all, separator);
   435cc:	4dcf      	ldr	r5, [pc, #828]	; (4390c <secure+0x348>)
	strcpy(all, "\n");
   435ce:	4621      	mov	r1, r4
   435d0:	4668      	mov	r0, sp
   435d2:	f017 fe6e 	bl	5b2b2 <strcpy>
	strcat(all, separator);
   435d6:	4629      	mov	r1, r5
   435d8:	f44f 7216 	mov.w	r2, #600	; 0x258
   435dc:	4668      	mov	r0, sp
   435de:	f017 fe43 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   435e2:	4621      	mov	r1, r4
   435e4:	f44f 7216 	mov.w	r2, #600	; 0x258
   435e8:	4668      	mov	r0, sp
   435ea:	f017 fe3d 	bl	5b268 <__strcat_chk>
	strcat(all, t1ID);
   435ee:	f44f 7216 	mov.w	r2, #600	; 0x258
   435f2:	4668      	mov	r0, sp
   435f4:	49c6      	ldr	r1, [pc, #792]	; (43910 <secure+0x34c>)
   435f6:	f017 fe37 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   435fa:	4621      	mov	r1, r4
   435fc:	f44f 7216 	mov.w	r2, #600	; 0x258
   43600:	4668      	mov	r0, sp
   43602:	f017 fe31 	bl	5b268 <__strcat_chk>
	strcat(all, t1MCC);
   43606:	f44f 7216 	mov.w	r2, #600	; 0x258
   4360a:	4668      	mov	r0, sp
   4360c:	49c1      	ldr	r1, [pc, #772]	; (43914 <secure+0x350>)
   4360e:	f017 fe2b 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   43612:	4621      	mov	r1, r4
   43614:	f44f 7216 	mov.w	r2, #600	; 0x258
   43618:	4668      	mov	r0, sp
   4361a:	f017 fe25 	bl	5b268 <__strcat_chk>
	strcat(all, t1MNC);
   4361e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43622:	4668      	mov	r0, sp
   43624:	49bc      	ldr	r1, [pc, #752]	; (43918 <secure+0x354>)
   43626:	f017 fe1f 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   4362a:	4621      	mov	r1, r4
   4362c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43630:	4668      	mov	r0, sp
   43632:	f017 fe19 	bl	5b268 <__strcat_chk>
	strcat(all, t1TAC);
   43636:	f44f 7216 	mov.w	r2, #600	; 0x258
   4363a:	4668      	mov	r0, sp
   4363c:	49b7      	ldr	r1, [pc, #732]	; (4391c <secure+0x358>)
   4363e:	f017 fe13 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   43642:	4621      	mov	r1, r4
   43644:	f44f 7216 	mov.w	r2, #600	; 0x258
   43648:	4668      	mov	r0, sp
   4364a:	f017 fe0d 	bl	5b268 <__strcat_chk>
	strcat(all, t1TA);
   4364e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43652:	4668      	mov	r0, sp
   43654:	49b2      	ldr	r1, [pc, #712]	; (43920 <secure+0x35c>)
   43656:	f017 fe07 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   4365a:	4621      	mov	r1, r4
   4365c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43660:	4668      	mov	r0, sp
   43662:	f017 fe01 	bl	5b268 <__strcat_chk>
	strcat(all, t1COPS);
   43666:	f44f 7216 	mov.w	r2, #600	; 0x258
   4366a:	4668      	mov	r0, sp
   4366c:	49ad      	ldr	r1, [pc, #692]	; (43924 <secure+0x360>)
   4366e:	f017 fdfb 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   43672:	4621      	mov	r1, r4
   43674:	f44f 7216 	mov.w	r2, #600	; 0x258
   43678:	4668      	mov	r0, sp
   4367a:	f017 fdf5 	bl	5b268 <__strcat_chk>
	strcat(all, t1RSRP);
   4367e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43682:	4668      	mov	r0, sp
   43684:	49a8      	ldr	r1, [pc, #672]	; (43928 <secure+0x364>)
   43686:	f017 fdef 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   4368a:	4621      	mov	r1, r4
   4368c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43690:	4668      	mov	r0, sp
   43692:	f017 fde9 	bl	5b268 <__strcat_chk>
	strcat(all, t1RSRQ);
   43696:	f44f 7216 	mov.w	r2, #600	; 0x258
   4369a:	4668      	mov	r0, sp
   4369c:	49a3      	ldr	r1, [pc, #652]	; (4392c <secure+0x368>)
   4369e:	f017 fde3 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   436a2:	4621      	mov	r1, r4
   436a4:	f44f 7216 	mov.w	r2, #600	; 0x258
   436a8:	4668      	mov	r0, sp
   436aa:	f017 fddd 	bl	5b268 <__strcat_chk>
	strcat(all, t1SNR);
   436ae:	f44f 7216 	mov.w	r2, #600	; 0x258
   436b2:	4668      	mov	r0, sp
   436b4:	499e      	ldr	r1, [pc, #632]	; (43930 <secure+0x36c>)
   436b6:	f017 fdd7 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   436ba:	4621      	mov	r1, r4
   436bc:	f44f 7216 	mov.w	r2, #600	; 0x258
   436c0:	4668      	mov	r0, sp
   436c2:	f017 fdd1 	bl	5b268 <__strcat_chk>
	strcat(all, t1Band);
   436c6:	f44f 7216 	mov.w	r2, #600	; 0x258
   436ca:	4668      	mov	r0, sp
   436cc:	4999      	ldr	r1, [pc, #612]	; (43934 <secure+0x370>)
   436ce:	f017 fdcb 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   436d2:	4621      	mov	r1, r4
   436d4:	f44f 7216 	mov.w	r2, #600	; 0x258
   436d8:	4668      	mov	r0, sp
   436da:	f017 fdc5 	bl	5b268 <__strcat_chk>
	strcat(all, t2ID);
   436de:	f44f 7216 	mov.w	r2, #600	; 0x258
   436e2:	4668      	mov	r0, sp
   436e4:	4994      	ldr	r1, [pc, #592]	; (43938 <secure+0x374>)
   436e6:	f017 fdbf 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   436ea:	4621      	mov	r1, r4
   436ec:	f44f 7216 	mov.w	r2, #600	; 0x258
   436f0:	4668      	mov	r0, sp
   436f2:	f017 fdb9 	bl	5b268 <__strcat_chk>
	strcat(all, t2MCC);
   436f6:	f44f 7216 	mov.w	r2, #600	; 0x258
   436fa:	4668      	mov	r0, sp
   436fc:	498f      	ldr	r1, [pc, #572]	; (4393c <secure+0x378>)
   436fe:	f017 fdb3 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   43702:	4621      	mov	r1, r4
   43704:	f44f 7216 	mov.w	r2, #600	; 0x258
   43708:	4668      	mov	r0, sp
   4370a:	f017 fdad 	bl	5b268 <__strcat_chk>
	strcat(all, t2MNC);
   4370e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43712:	4668      	mov	r0, sp
   43714:	498a      	ldr	r1, [pc, #552]	; (43940 <secure+0x37c>)
   43716:	f017 fda7 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   4371a:	4621      	mov	r1, r4
   4371c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43720:	4668      	mov	r0, sp
   43722:	f017 fda1 	bl	5b268 <__strcat_chk>
	strcat(all, t2TAC);
   43726:	f44f 7216 	mov.w	r2, #600	; 0x258
   4372a:	4668      	mov	r0, sp
   4372c:	4985      	ldr	r1, [pc, #532]	; (43944 <secure+0x380>)
   4372e:	f017 fd9b 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   43732:	4621      	mov	r1, r4
   43734:	f44f 7216 	mov.w	r2, #600	; 0x258
   43738:	4668      	mov	r0, sp
   4373a:	f017 fd95 	bl	5b268 <__strcat_chk>
	strcat(all, t2TA);
   4373e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43742:	4668      	mov	r0, sp
   43744:	4980      	ldr	r1, [pc, #512]	; (43948 <secure+0x384>)
   43746:	f017 fd8f 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   4374a:	4621      	mov	r1, r4
   4374c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43750:	4668      	mov	r0, sp
   43752:	f017 fd89 	bl	5b268 <__strcat_chk>
	strcat(all, t2COPS);
   43756:	f44f 7216 	mov.w	r2, #600	; 0x258
   4375a:	4668      	mov	r0, sp
   4375c:	497b      	ldr	r1, [pc, #492]	; (4394c <secure+0x388>)
   4375e:	f017 fd83 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   43762:	4621      	mov	r1, r4
   43764:	f44f 7216 	mov.w	r2, #600	; 0x258
   43768:	4668      	mov	r0, sp
   4376a:	f017 fd7d 	bl	5b268 <__strcat_chk>
	strcat(all, t2RSRP);
   4376e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43772:	4668      	mov	r0, sp
   43774:	4976      	ldr	r1, [pc, #472]	; (43950 <secure+0x38c>)
   43776:	f017 fd77 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   4377a:	4621      	mov	r1, r4
   4377c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43780:	4668      	mov	r0, sp
   43782:	f017 fd71 	bl	5b268 <__strcat_chk>
	strcat(all, t2RSRQ);
   43786:	f44f 7216 	mov.w	r2, #600	; 0x258
   4378a:	4668      	mov	r0, sp
   4378c:	4971      	ldr	r1, [pc, #452]	; (43954 <secure+0x390>)
   4378e:	f017 fd6b 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   43792:	4621      	mov	r1, r4
   43794:	f44f 7216 	mov.w	r2, #600	; 0x258
   43798:	4668      	mov	r0, sp
   4379a:	f017 fd65 	bl	5b268 <__strcat_chk>
	strcat(all, t2SNR);
   4379e:	f44f 7216 	mov.w	r2, #600	; 0x258
   437a2:	4668      	mov	r0, sp
   437a4:	496c      	ldr	r1, [pc, #432]	; (43958 <secure+0x394>)
   437a6:	f017 fd5f 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   437aa:	4621      	mov	r1, r4
   437ac:	f44f 7216 	mov.w	r2, #600	; 0x258
   437b0:	4668      	mov	r0, sp
   437b2:	f017 fd59 	bl	5b268 <__strcat_chk>
	strcat(all, t2Band);
   437b6:	f44f 7216 	mov.w	r2, #600	; 0x258
   437ba:	4668      	mov	r0, sp
   437bc:	4967      	ldr	r1, [pc, #412]	; (4395c <secure+0x398>)
   437be:	f017 fd53 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   437c2:	4621      	mov	r1, r4
   437c4:	f44f 7216 	mov.w	r2, #600	; 0x258
   437c8:	4668      	mov	r0, sp
   437ca:	f017 fd4d 	bl	5b268 <__strcat_chk>
	strcat(all, t3ID);
   437ce:	f44f 7216 	mov.w	r2, #600	; 0x258
   437d2:	4668      	mov	r0, sp
   437d4:	4962      	ldr	r1, [pc, #392]	; (43960 <secure+0x39c>)
   437d6:	f017 fd47 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   437da:	4621      	mov	r1, r4
   437dc:	f44f 7216 	mov.w	r2, #600	; 0x258
   437e0:	4668      	mov	r0, sp
   437e2:	f017 fd41 	bl	5b268 <__strcat_chk>
	strcat(all, t3MCC);
   437e6:	f44f 7216 	mov.w	r2, #600	; 0x258
   437ea:	4668      	mov	r0, sp
   437ec:	495d      	ldr	r1, [pc, #372]	; (43964 <secure+0x3a0>)
   437ee:	f017 fd3b 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   437f2:	4621      	mov	r1, r4
   437f4:	f44f 7216 	mov.w	r2, #600	; 0x258
   437f8:	4668      	mov	r0, sp
   437fa:	f017 fd35 	bl	5b268 <__strcat_chk>
	strcat(all, t3MNC);
   437fe:	f44f 7216 	mov.w	r2, #600	; 0x258
   43802:	4668      	mov	r0, sp
   43804:	4958      	ldr	r1, [pc, #352]	; (43968 <secure+0x3a4>)
   43806:	f017 fd2f 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   4380a:	4621      	mov	r1, r4
   4380c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43810:	4668      	mov	r0, sp
   43812:	f017 fd29 	bl	5b268 <__strcat_chk>
	strcat(all, t3TAC);
   43816:	f44f 7216 	mov.w	r2, #600	; 0x258
   4381a:	4668      	mov	r0, sp
   4381c:	4953      	ldr	r1, [pc, #332]	; (4396c <secure+0x3a8>)
   4381e:	f017 fd23 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   43822:	4621      	mov	r1, r4
   43824:	f44f 7216 	mov.w	r2, #600	; 0x258
   43828:	4668      	mov	r0, sp
   4382a:	f017 fd1d 	bl	5b268 <__strcat_chk>
	strcat(all, t3TA);
   4382e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43832:	4668      	mov	r0, sp
   43834:	494e      	ldr	r1, [pc, #312]	; (43970 <secure+0x3ac>)
   43836:	f017 fd17 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   4383a:	4621      	mov	r1, r4
   4383c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43840:	4668      	mov	r0, sp
   43842:	f017 fd11 	bl	5b268 <__strcat_chk>
	strcat(all, t3COPS);
   43846:	f44f 7216 	mov.w	r2, #600	; 0x258
   4384a:	4668      	mov	r0, sp
   4384c:	4949      	ldr	r1, [pc, #292]	; (43974 <secure+0x3b0>)
   4384e:	f017 fd0b 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   43852:	4621      	mov	r1, r4
   43854:	f44f 7216 	mov.w	r2, #600	; 0x258
   43858:	4668      	mov	r0, sp
   4385a:	f017 fd05 	bl	5b268 <__strcat_chk>
	strcat(all, t3RSRP);
   4385e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43862:	4668      	mov	r0, sp
   43864:	4944      	ldr	r1, [pc, #272]	; (43978 <secure+0x3b4>)
   43866:	f017 fcff 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   4386a:	4621      	mov	r1, r4
   4386c:	f44f 7216 	mov.w	r2, #600	; 0x258
   43870:	4668      	mov	r0, sp
   43872:	f017 fcf9 	bl	5b268 <__strcat_chk>
	strcat(all, t3RSRQ);
   43876:	f44f 7216 	mov.w	r2, #600	; 0x258
   4387a:	4668      	mov	r0, sp
   4387c:	493f      	ldr	r1, [pc, #252]	; (4397c <secure+0x3b8>)
   4387e:	f017 fcf3 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   43882:	4621      	mov	r1, r4
   43884:	f44f 7216 	mov.w	r2, #600	; 0x258
   43888:	4668      	mov	r0, sp
   4388a:	f017 fced 	bl	5b268 <__strcat_chk>
	strcat(all, t3SNR);
   4388e:	f44f 7216 	mov.w	r2, #600	; 0x258
   43892:	4668      	mov	r0, sp
   43894:	493a      	ldr	r1, [pc, #232]	; (43980 <secure+0x3bc>)
   43896:	f017 fce7 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   4389a:	4621      	mov	r1, r4
   4389c:	f44f 7216 	mov.w	r2, #600	; 0x258
   438a0:	4668      	mov	r0, sp
   438a2:	f017 fce1 	bl	5b268 <__strcat_chk>
	strcat(all, t3Band);
   438a6:	f44f 7216 	mov.w	r2, #600	; 0x258
   438aa:	4668      	mov	r0, sp
   438ac:	4935      	ldr	r1, [pc, #212]	; (43984 <secure+0x3c0>)
   438ae:	f017 fcdb 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   438b2:	4621      	mov	r1, r4
   438b4:	f44f 7216 	mov.w	r2, #600	; 0x258
   438b8:	4668      	mov	r0, sp
   438ba:	f017 fcd5 	bl	5b268 <__strcat_chk>
	strcat(all, time);
   438be:	f44f 7216 	mov.w	r2, #600	; 0x258
   438c2:	4668      	mov	r0, sp
   438c4:	4930      	ldr	r1, [pc, #192]	; (43988 <secure+0x3c4>)
   438c6:	f017 fccf 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   438ca:	4621      	mov	r1, r4
   438cc:	f44f 7216 	mov.w	r2, #600	; 0x258
   438d0:	4668      	mov	r0, sp
   438d2:	f017 fcc9 	bl	5b268 <__strcat_chk>
	strcat(all, separator);
   438d6:	4629      	mov	r1, r5
   438d8:	f44f 7216 	mov.w	r2, #600	; 0x258
   438dc:	4668      	mov	r0, sp
   438de:	f017 fcc3 	bl	5b268 <__strcat_chk>
	strcat(all, "\n");
   438e2:	f44f 7216 	mov.w	r2, #600	; 0x258
   438e6:	4621      	mov	r1, r4
   438e8:	4668      	mov	r0, sp
   438ea:	f017 fcbd 	bl	5b268 <__strcat_chk>
	printk("End copying to all!\n");
   438ee:	4827      	ldr	r0, [pc, #156]	; (4398c <secure+0x3c8>)
   438f0:	f011 ff56 	bl	557a0 <printk>
	encryptData(all, strlen(all));
   438f4:	4668      	mov	r0, sp
   438f6:	f7fd fa7d 	bl	40df4 <strlen>
   438fa:	4601      	mov	r1, r0
   438fc:	4668      	mov	r0, sp
   438fe:	f7ff fe15 	bl	4352c <encryptData>
}
   43902:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   43906:	bd30      	pop	{r4, r5, pc}
   43908:	0005fccd 	.word	0x0005fccd
   4390c:	0005d310 	.word	0x0005d310
   43910:	2001dce9 	.word	0x2001dce9
   43914:	2001dcdd 	.word	0x2001dcdd
   43918:	2001dcd1 	.word	0x2001dcd1
   4391c:	2001dcc5 	.word	0x2001dcc5
   43920:	2001dcb9 	.word	0x2001dcb9
   43924:	2001dca0 	.word	0x2001dca0
   43928:	2001dc94 	.word	0x2001dc94
   4392c:	2001dc88 	.word	0x2001dc88
   43930:	2001daf8 	.word	0x2001daf8
   43934:	2001dac6 	.word	0x2001dac6
   43938:	2001dab7 	.word	0x2001dab7
   4393c:	2001daab 	.word	0x2001daab
   43940:	2001da9f 	.word	0x2001da9f
   43944:	2001da93 	.word	0x2001da93
   43948:	2001da87 	.word	0x2001da87
   4394c:	2001da6e 	.word	0x2001da6e
   43950:	2001da62 	.word	0x2001da62
   43954:	2001da56 	.word	0x2001da56
   43958:	2001d8c6 	.word	0x2001d8c6
   4395c:	2001d894 	.word	0x2001d894
   43960:	2001d885 	.word	0x2001d885
   43964:	2001d879 	.word	0x2001d879
   43968:	2001d86d 	.word	0x2001d86d
   4396c:	2001d861 	.word	0x2001d861
   43970:	2001d855 	.word	0x2001d855
   43974:	2001d83c 	.word	0x2001d83c
   43978:	2001d830 	.word	0x2001d830
   4397c:	2001d824 	.word	0x2001d824
   43980:	2001d694 	.word	0x2001d694
   43984:	2001d662 	.word	0x2001d662
   43988:	2001ddf8 	.word	0x2001ddf8
   4398c:	0005d33d 	.word	0x0005d33d

00043990 <changeCOPS>:
{
   43990:	b5f0      	push	{r4, r5, r6, r7, lr}
   43992:	b099      	sub	sp, #100	; 0x64
	char cmd[25] = "AT+COPS=1,2,\"";
   43994:	aa01      	add	r2, sp, #4
{
   43996:	4606      	mov	r6, r0
   43998:	4615      	mov	r5, r2
	char cmd[25] = "AT+COPS=1,2,\"";
   4399a:	4b15      	ldr	r3, [pc, #84]	; (439f0 <changeCOPS+0x60>)
   4399c:	f103 0708 	add.w	r7, r3, #8
   439a0:	4614      	mov	r4, r2
   439a2:	6818      	ldr	r0, [r3, #0]
   439a4:	6859      	ldr	r1, [r3, #4]
   439a6:	3308      	adds	r3, #8
   439a8:	c403      	stmia	r4!, {r0, r1}
   439aa:	42bb      	cmp	r3, r7
   439ac:	4622      	mov	r2, r4
   439ae:	d1f7      	bne.n	439a0 <changeCOPS+0x10>
   439b0:	6818      	ldr	r0, [r3, #0]
   439b2:	889b      	ldrh	r3, [r3, #4]
   439b4:	6020      	str	r0, [r4, #0]
   439b6:	80a3      	strh	r3, [r4, #4]
   439b8:	2300      	movs	r3, #0
	strcat(cmd,opName);
   439ba:	4631      	mov	r1, r6
   439bc:	2219      	movs	r2, #25
   439be:	4628      	mov	r0, r5
	char cmd[25] = "AT+COPS=1,2,\"";
   439c0:	f8cd 3016 	str.w	r3, [sp, #22]
   439c4:	f8cd 3012 	str.w	r3, [sp, #18]
   439c8:	f8cd 3019 	str.w	r3, [sp, #25]
	strcat(cmd,opName);
   439cc:	f017 fc4c 	bl	5b268 <__strcat_chk>
	strcat(cmd,"\"");
   439d0:	2219      	movs	r2, #25
   439d2:	4628      	mov	r0, r5
   439d4:	4907      	ldr	r1, [pc, #28]	; (439f4 <changeCOPS+0x64>)
   439d6:	f017 fc47 	bl	5b268 <__strcat_chk>
    err = nrf_modem_at_cmd(response, sizeof(response), cmd);
   439da:	462a      	mov	r2, r5
   439dc:	2140      	movs	r1, #64	; 0x40
   439de:	a808      	add	r0, sp, #32
   439e0:	f00d fe20 	bl	51624 <nrf_modem_at_cmd>
    printk("Modem response:\n%s", response);
   439e4:	4804      	ldr	r0, [pc, #16]	; (439f8 <changeCOPS+0x68>)
   439e6:	a908      	add	r1, sp, #32
   439e8:	f011 feda 	bl	557a0 <printk>
}
   439ec:	b019      	add	sp, #100	; 0x64
   439ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   439f0:	0005c08c 	.word	0x0005c08c
   439f4:	0005ee1e 	.word	0x0005ee1e
   439f8:	0005d352 	.word	0x0005d352

000439fc <getTime>:
}

//get the time from the towers
//if this is not collected, the board
void getTime(void)
{
   439fc:	b530      	push	{r4, r5, lr}
   439fe:	b0a1      	sub	sp, #132	; 0x84
	int err;
    char response[64];

	//clock command
	err = nrf_modem_at_cmd(response, sizeof(response), "AT+CCLK?");
   43a00:	2140      	movs	r1, #64	; 0x40
   43a02:	4a19      	ldr	r2, [pc, #100]	; (43a68 <getTime+0x6c>)
   43a04:	4668      	mov	r0, sp
   43a06:	f00d fe0d 	bl	51624 <nrf_modem_at_cmd>
        //error
    }

	int dataSize = 64;
	char data[dataSize];
	strcpy(data,response);
   43a0a:	2240      	movs	r2, #64	; 0x40
   43a0c:	4669      	mov	r1, sp
   43a0e:	eb0d 0002 	add.w	r0, sp, r2
   43a12:	f017 fc56 	bl	5b2c2 <__strcpy_chk>
	int data_length = strlen(data);
   43a16:	a810      	add	r0, sp, #64	; 0x40
   43a18:	f7fd f9ec 	bl	40df4 <strlen>
				//printk("%c", data[loop]);
			}
			//set all other characters to underscore
			else
			{
				data[loop] = '_';
   43a1c:	245f      	movs	r4, #95	; 0x5f
		for(loop = 0; loop < data_length; loop++)
   43a1e:	2100      	movs	r1, #0
   43a20:	aa10      	add	r2, sp, #64	; 0x40
   43a22:	4281      	cmp	r1, r0
   43a24:	db0a      	blt.n	43a3c <getTime+0x40>
			}
		}

		strcpy(time,data);	
   43a26:	2232      	movs	r2, #50	; 0x32
   43a28:	a910      	add	r1, sp, #64	; 0x40
   43a2a:	4810      	ldr	r0, [pc, #64]	; (43a6c <getTime+0x70>)
   43a2c:	f017 fc49 	bl	5b2c2 <__strcpy_chk>
		printk("Time: %s", time);
   43a30:	490e      	ldr	r1, [pc, #56]	; (43a6c <getTime+0x70>)
   43a32:	480f      	ldr	r0, [pc, #60]	; (43a70 <getTime+0x74>)
   43a34:	f011 feb4 	bl	557a0 <printk>

    //printk("Modem response:\n%s", response);
}
   43a38:	b021      	add	sp, #132	; 0x84
   43a3a:	bd30      	pop	{r4, r5, pc}
			if( (data[loop] >= 'a' && data[loop] <= 'z') 
   43a3c:	7813      	ldrb	r3, [r2, #0]
   43a3e:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
   43a42:	2d19      	cmp	r5, #25
   43a44:	d90c      	bls.n	43a60 <getTime+0x64>
   43a46:	2b3a      	cmp	r3, #58	; 0x3a
   43a48:	d807      	bhi.n	43a5a <getTime+0x5e>
   43a4a:	2b2e      	cmp	r3, #46	; 0x2e
   43a4c:	d808      	bhi.n	43a60 <getTime+0x64>
   43a4e:	2b0a      	cmp	r3, #10
   43a50:	d006      	beq.n	43a60 <getTime+0x64>
   43a52:	2b2b      	cmp	r3, #43	; 0x2b
   43a54:	d004      	beq.n	43a60 <getTime+0x64>
				data[loop] = '_';
   43a56:	7014      	strb	r4, [r2, #0]
   43a58:	e002      	b.n	43a60 <getTime+0x64>
   43a5a:	3b41      	subs	r3, #65	; 0x41
   43a5c:	2b19      	cmp	r3, #25
   43a5e:	d8fa      	bhi.n	43a56 <getTime+0x5a>
		for(loop = 0; loop < data_length; loop++)
   43a60:	3101      	adds	r1, #1
   43a62:	3201      	adds	r2, #1
   43a64:	e7dd      	b.n	43a22 <getTime+0x26>
   43a66:	bf00      	nop
   43a68:	0005d365 	.word	0x0005d365
   43a6c:	2001ddf8 	.word	0x2001ddf8
   43a70:	0005d36e 	.word	0x0005d36e

00043a74 <getBand>:

//get the band info
//hopefully it works
void getBand(void)
{
   43a74:	b530      	push	{r4, r5, lr}
   43a76:	b0a1      	sub	sp, #132	; 0x84
	int err;
    char response[64];

	//clock command
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XCBAND");
   43a78:	2140      	movs	r1, #64	; 0x40
   43a7a:	4a2a      	ldr	r2, [pc, #168]	; (43b24 <getBand+0xb0>)
   43a7c:	4668      	mov	r0, sp
   43a7e:	f00d fdd1 	bl	51624 <nrf_modem_at_cmd>
        //error
    }

	int dataSize = 64;
	char data[dataSize];
	strcpy(data,response);
   43a82:	2240      	movs	r2, #64	; 0x40
   43a84:	4669      	mov	r1, sp
   43a86:	eb0d 0002 	add.w	r0, sp, r2
   43a8a:	f017 fc1a 	bl	5b2c2 <__strcpy_chk>
	int data_length = strlen(data);
   43a8e:	a810      	add	r0, sp, #64	; 0x40
   43a90:	f7fd f9b0 	bl	40df4 <strlen>
				//printk("%c", data[loop]);
			}
			//set all other characters to underscore
			else
			{
				data[loop] = '_';
   43a94:	245f      	movs	r4, #95	; 0x5f
		for(loop = 0; loop < data_length; loop++)
   43a96:	2100      	movs	r1, #0
   43a98:	aa10      	add	r2, sp, #64	; 0x40
   43a9a:	4281      	cmp	r1, r0
   43a9c:	db17      	blt.n	43ace <getBand+0x5a>
			}
		}

		//strcpy(time,data);	
		//printk("Time: %s", time);
		if(strcmp(t1Band, "noBand1") == 0)
   43a9e:	4922      	ldr	r1, [pc, #136]	; (43b28 <getBand+0xb4>)
   43aa0:	4822      	ldr	r0, [pc, #136]	; (43b2c <getBand+0xb8>)
   43aa2:	f7fd f99d 	bl	40de0 <strcmp>
   43aa6:	bb38      	cbnz	r0, 43af8 <getBand+0x84>
		{
			strcpy(t1Band, data);
   43aa8:	2232      	movs	r2, #50	; 0x32
   43aaa:	4820      	ldr	r0, [pc, #128]	; (43b2c <getBand+0xb8>)
   43aac:	a910      	add	r1, sp, #64	; 0x40
		}

		else if(strcmp(t2Band, "noBand2") == 0)
		{
			strcpy(t2Band, data);
   43aae:	f017 fc08 	bl	5b2c2 <__strcpy_chk>
		else
		{
			printk("Band not stored");
		}

		printk("tower 1 band: %s\n", t1Band);
   43ab2:	491e      	ldr	r1, [pc, #120]	; (43b2c <getBand+0xb8>)
   43ab4:	481e      	ldr	r0, [pc, #120]	; (43b30 <getBand+0xbc>)
   43ab6:	f011 fe73 	bl	557a0 <printk>
		printk("tower 2 band: %s\n", t2Band);
   43aba:	491e      	ldr	r1, [pc, #120]	; (43b34 <getBand+0xc0>)
   43abc:	481e      	ldr	r0, [pc, #120]	; (43b38 <getBand+0xc4>)
   43abe:	f011 fe6f 	bl	557a0 <printk>
		printk("tower 3 band: %s\n", t3Band);
   43ac2:	491e      	ldr	r1, [pc, #120]	; (43b3c <getBand+0xc8>)
   43ac4:	481e      	ldr	r0, [pc, #120]	; (43b40 <getBand+0xcc>)
   43ac6:	f011 fe6b 	bl	557a0 <printk>


    //printk("Modem response:\n%s", response);
}
   43aca:	b021      	add	sp, #132	; 0x84
   43acc:	bd30      	pop	{r4, r5, pc}
			if( (data[loop] >= 'a' && data[loop] <= 'z') 
   43ace:	7813      	ldrb	r3, [r2, #0]
   43ad0:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
   43ad4:	2d19      	cmp	r5, #25
   43ad6:	d90c      	bls.n	43af2 <getBand+0x7e>
   43ad8:	2b3a      	cmp	r3, #58	; 0x3a
   43ada:	d807      	bhi.n	43aec <getBand+0x78>
   43adc:	2b2e      	cmp	r3, #46	; 0x2e
   43ade:	d808      	bhi.n	43af2 <getBand+0x7e>
   43ae0:	2b0a      	cmp	r3, #10
   43ae2:	d006      	beq.n	43af2 <getBand+0x7e>
   43ae4:	2b2b      	cmp	r3, #43	; 0x2b
   43ae6:	d004      	beq.n	43af2 <getBand+0x7e>
				data[loop] = '_';
   43ae8:	7014      	strb	r4, [r2, #0]
   43aea:	e002      	b.n	43af2 <getBand+0x7e>
   43aec:	3b41      	subs	r3, #65	; 0x41
   43aee:	2b19      	cmp	r3, #25
   43af0:	d8fa      	bhi.n	43ae8 <getBand+0x74>
		for(loop = 0; loop < data_length; loop++)
   43af2:	3101      	adds	r1, #1
   43af4:	3201      	adds	r2, #1
   43af6:	e7d0      	b.n	43a9a <getBand+0x26>
		else if(strcmp(t2Band, "noBand2") == 0)
   43af8:	4912      	ldr	r1, [pc, #72]	; (43b44 <getBand+0xd0>)
   43afa:	480e      	ldr	r0, [pc, #56]	; (43b34 <getBand+0xc0>)
   43afc:	f7fd f970 	bl	40de0 <strcmp>
   43b00:	b918      	cbnz	r0, 43b0a <getBand+0x96>
			strcpy(t2Band, data);
   43b02:	2232      	movs	r2, #50	; 0x32
   43b04:	480b      	ldr	r0, [pc, #44]	; (43b34 <getBand+0xc0>)
   43b06:	a910      	add	r1, sp, #64	; 0x40
   43b08:	e7d1      	b.n	43aae <getBand+0x3a>
		else if(strcmp(t3Band, "noBand3") == 0)
   43b0a:	490f      	ldr	r1, [pc, #60]	; (43b48 <getBand+0xd4>)
   43b0c:	480b      	ldr	r0, [pc, #44]	; (43b3c <getBand+0xc8>)
   43b0e:	f7fd f967 	bl	40de0 <strcmp>
   43b12:	b918      	cbnz	r0, 43b1c <getBand+0xa8>
			strcpy(t3Band, data);
   43b14:	2232      	movs	r2, #50	; 0x32
   43b16:	4809      	ldr	r0, [pc, #36]	; (43b3c <getBand+0xc8>)
   43b18:	a910      	add	r1, sp, #64	; 0x40
   43b1a:	e7c8      	b.n	43aae <getBand+0x3a>
			printk("Band not stored");
   43b1c:	480b      	ldr	r0, [pc, #44]	; (43b4c <getBand+0xd8>)
   43b1e:	f011 fe3f 	bl	557a0 <printk>
   43b22:	e7c6      	b.n	43ab2 <getBand+0x3e>
   43b24:	0005d377 	.word	0x0005d377
   43b28:	0005d1ce 	.word	0x0005d1ce
   43b2c:	2001dac6 	.word	0x2001dac6
   43b30:	0005d392 	.word	0x0005d392
   43b34:	2001d894 	.word	0x2001d894
   43b38:	0005d3a4 	.word	0x0005d3a4
   43b3c:	2001d662 	.word	0x2001d662
   43b40:	0005d3b6 	.word	0x0005d3b6
   43b44:	0005d1d6 	.word	0x0005d1d6
   43b48:	0005d1de 	.word	0x0005d1de
   43b4c:	0005d382 	.word	0x0005d382

00043b50 <button1>:
 * button 3 does nothing
 * button 4 wakes the board up
*/

void button1(void)
{
   43b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	printk("button 1 \n");
   43b52:	4814      	ldr	r0, [pc, #80]	; (43ba4 <button1+0x54>)
   43b54:	f011 fe24 	bl	557a0 <printk>
   43b58:	4b13      	ldr	r3, [pc, #76]	; (43ba8 <button1+0x58>)
   43b5a:	e8d3 3faf 	lda	r3, [r3]
	//blinkTimes(5);
	//lsdir(disk_mount_pt);
	//cfun_q();
	
	if (!atomic_get(&connected)) 
   43b5e:	b96b      	cbnz	r3, 43b7c <button1+0x2c>
	{
		LOG_INF("Ignoring button press, not connected to network");
   43b60:	4a12      	ldr	r2, [pc, #72]	; (43bac <button1+0x5c>)
   43b62:	4618      	mov	r0, r3
   43b64:	e9cd 3201 	strd	r3, r2, [sp, #4]
   43b68:	4911      	ldr	r1, [pc, #68]	; (43bb0 <button1+0x60>)
   43b6a:	2203      	movs	r2, #3
   43b6c:	9300      	str	r3, [sp, #0]
   43b6e:	f011 fd5e 	bl	5562e <z_log_msg_runtime_create.constprop.0>

	getBand();

	//readCOPS();
	//testCOPS();
}
   43b72:	b005      	add	sp, #20
   43b74:	f85d eb04 	ldr.w	lr, [sp], #4
		Tower_Read_Fail_Change();
   43b78:	f7ff b8c8 	b.w	42d0c <Tower_Read_Fail_Change>
	LOG_INF("Button 1 pressed, starting cell measurements");
   43b7c:	4b0d      	ldr	r3, [pc, #52]	; (43bb4 <button1+0x64>)
   43b7e:	2203      	movs	r2, #3
   43b80:	9302      	str	r3, [sp, #8]
   43b82:	2300      	movs	r3, #0
   43b84:	490a      	ldr	r1, [pc, #40]	; (43bb0 <button1+0x60>)
   43b86:	4618      	mov	r0, r3
   43b88:	e9cd 3300 	strd	r3, r3, [sp]
   43b8c:	f011 fd4f 	bl	5562e <z_log_msg_runtime_create.constprop.0>
	start_cell_measurements();
   43b90:	f7fe ffb0 	bl	42af4 <start_cell_measurements>
	getTime();
   43b94:	f7ff ff32 	bl	439fc <getTime>
}
   43b98:	b005      	add	sp, #20
   43b9a:	f85d eb04 	ldr.w	lr, [sp], #4
	getBand();
   43b9e:	f7ff bf69 	b.w	43a74 <getBand>
   43ba2:	bf00      	nop
   43ba4:	0005d3c8 	.word	0x0005d3c8
   43ba8:	2001b28c 	.word	0x2001b28c
   43bac:	0005d3d3 	.word	0x0005d3d3
   43bb0:	0005bf9c 	.word	0x0005bf9c
   43bb4:	0005d403 	.word	0x0005d403

00043bb8 <button2>:

void button2(void)
{
   43bb8:	b510      	push	{r4, lr}
	printk("button 2 \n");
   43bba:	48bc      	ldr	r0, [pc, #752]	; (43eac <button2+0x2f4>)
   43bbc:	f011 fdf0 	bl	557a0 <printk>
	//print_cell_data();
	//blinkTimes(5);

	//print the collected towers
	printk("Tower 1: %s\n", t1ID);
   43bc0:	49bb      	ldr	r1, [pc, #748]	; (43eb0 <button2+0x2f8>)
   43bc2:	48bc      	ldr	r0, [pc, #752]	; (43eb4 <button2+0x2fc>)
   43bc4:	f011 fdec 	bl	557a0 <printk>
	printk("Tower 2: %s\n", t2ID);
   43bc8:	49bb      	ldr	r1, [pc, #748]	; (43eb8 <button2+0x300>)
   43bca:	48bc      	ldr	r0, [pc, #752]	; (43ebc <button2+0x304>)
   43bcc:	f011 fde8 	bl	557a0 <printk>
	printk("Tower 3: %s\n", t3ID);
   43bd0:	49bb      	ldr	r1, [pc, #748]	; (43ec0 <button2+0x308>)
   43bd2:	48bc      	ldr	r0, [pc, #752]	; (43ec4 <button2+0x30c>)
   43bd4:	f011 fde4 	bl	557a0 <printk>
	
	//fix the strings so they print right
	if((strcmp(t1ID, "empty") == 0))
   43bd8:	49bb      	ldr	r1, [pc, #748]	; (43ec8 <button2+0x310>)
   43bda:	48b5      	ldr	r0, [pc, #724]	; (43eb0 <button2+0x2f8>)
   43bdc:	f7fd f900 	bl	40de0 <strcmp>
   43be0:	b918      	cbnz	r0, 43bea <button2+0x32>
	{
		strcpy(t1ID, "empty\n");
   43be2:	49ba      	ldr	r1, [pc, #744]	; (43ecc <button2+0x314>)
   43be4:	48b2      	ldr	r0, [pc, #712]	; (43eb0 <button2+0x2f8>)
   43be6:	f017 fb64 	bl	5b2b2 <strcpy>
	}

	if((strcmp(t2ID, "empty") == 0))
   43bea:	49b7      	ldr	r1, [pc, #732]	; (43ec8 <button2+0x310>)
   43bec:	48b2      	ldr	r0, [pc, #712]	; (43eb8 <button2+0x300>)
   43bee:	f7fd f8f7 	bl	40de0 <strcmp>
   43bf2:	b918      	cbnz	r0, 43bfc <button2+0x44>
	{
		strcpy(t2ID, "empty\n");
   43bf4:	49b5      	ldr	r1, [pc, #724]	; (43ecc <button2+0x314>)
   43bf6:	48b0      	ldr	r0, [pc, #704]	; (43eb8 <button2+0x300>)
   43bf8:	f017 fb5b 	bl	5b2b2 <strcpy>
	}

	if((strcmp(t3ID, "empty") == 0))
   43bfc:	49b2      	ldr	r1, [pc, #712]	; (43ec8 <button2+0x310>)
   43bfe:	48b0      	ldr	r0, [pc, #704]	; (43ec0 <button2+0x308>)
   43c00:	f7fd f8ee 	bl	40de0 <strcmp>
   43c04:	b918      	cbnz	r0, 43c0e <button2+0x56>
	{
		strcpy(t3ID, "empty\n");
   43c06:	49b1      	ldr	r1, [pc, #708]	; (43ecc <button2+0x314>)
   43c08:	48ad      	ldr	r0, [pc, #692]	; (43ec0 <button2+0x308>)
   43c0a:	f017 fb52 	bl	5b2b2 <strcpy>
	}

	//get the current time
	getTime();
   43c0e:	f7ff fef5 	bl	439fc <getTime>

	//put all the strings into a text file
	AppendString(testTxt, separator, strlen(separator), false);
   43c12:	48af      	ldr	r0, [pc, #700]	; (43ed0 <button2+0x318>)
   43c14:	f7fd f8ee 	bl	40df4 <strlen>
   43c18:	2300      	movs	r3, #0
   43c1a:	4602      	mov	r2, r0
   43c1c:	49ac      	ldr	r1, [pc, #688]	; (43ed0 <button2+0x318>)
   43c1e:	48ad      	ldr	r0, [pc, #692]	; (43ed4 <button2+0x31c>)
   43c20:	f7ff f94c 	bl	42ebc <AppendString>
	//tower 1
	AppendString(testTxt, t1ID, strlen(t1ID), false);
   43c24:	48a2      	ldr	r0, [pc, #648]	; (43eb0 <button2+0x2f8>)
   43c26:	f7fd f8e5 	bl	40df4 <strlen>
   43c2a:	2300      	movs	r3, #0
   43c2c:	4602      	mov	r2, r0
   43c2e:	49a0      	ldr	r1, [pc, #640]	; (43eb0 <button2+0x2f8>)
   43c30:	48a8      	ldr	r0, [pc, #672]	; (43ed4 <button2+0x31c>)
   43c32:	f7ff f943 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43c36:	210a      	movs	r1, #10
   43c38:	48a6      	ldr	r0, [pc, #664]	; (43ed4 <button2+0x31c>)
   43c3a:	f7fe ff0f 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1MCC, strlen(t1MCC), false);
   43c3e:	48a6      	ldr	r0, [pc, #664]	; (43ed8 <button2+0x320>)
   43c40:	f7fd f8d8 	bl	40df4 <strlen>
   43c44:	2300      	movs	r3, #0
   43c46:	4602      	mov	r2, r0
   43c48:	49a3      	ldr	r1, [pc, #652]	; (43ed8 <button2+0x320>)
   43c4a:	48a2      	ldr	r0, [pc, #648]	; (43ed4 <button2+0x31c>)
   43c4c:	f7ff f936 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43c50:	210a      	movs	r1, #10
   43c52:	48a0      	ldr	r0, [pc, #640]	; (43ed4 <button2+0x31c>)
   43c54:	f7fe ff02 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1MNC, strlen(t1MNC), false);
   43c58:	48a0      	ldr	r0, [pc, #640]	; (43edc <button2+0x324>)
   43c5a:	f7fd f8cb 	bl	40df4 <strlen>
   43c5e:	2300      	movs	r3, #0
   43c60:	4602      	mov	r2, r0
   43c62:	499e      	ldr	r1, [pc, #632]	; (43edc <button2+0x324>)
   43c64:	489b      	ldr	r0, [pc, #620]	; (43ed4 <button2+0x31c>)
   43c66:	f7ff f929 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43c6a:	210a      	movs	r1, #10
   43c6c:	4899      	ldr	r0, [pc, #612]	; (43ed4 <button2+0x31c>)
   43c6e:	f7fe fef5 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1TAC, strlen(t1TAC), false);
   43c72:	489b      	ldr	r0, [pc, #620]	; (43ee0 <button2+0x328>)
   43c74:	f7fd f8be 	bl	40df4 <strlen>
   43c78:	2300      	movs	r3, #0
   43c7a:	4602      	mov	r2, r0
   43c7c:	4998      	ldr	r1, [pc, #608]	; (43ee0 <button2+0x328>)
   43c7e:	4895      	ldr	r0, [pc, #596]	; (43ed4 <button2+0x31c>)
   43c80:	f7ff f91c 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43c84:	210a      	movs	r1, #10
   43c86:	4893      	ldr	r0, [pc, #588]	; (43ed4 <button2+0x31c>)
   43c88:	f7fe fee8 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1TA, strlen(t1TA), false);
   43c8c:	4895      	ldr	r0, [pc, #596]	; (43ee4 <button2+0x32c>)
   43c8e:	f7fd f8b1 	bl	40df4 <strlen>
   43c92:	2300      	movs	r3, #0
   43c94:	4602      	mov	r2, r0
   43c96:	4993      	ldr	r1, [pc, #588]	; (43ee4 <button2+0x32c>)
   43c98:	488e      	ldr	r0, [pc, #568]	; (43ed4 <button2+0x31c>)
   43c9a:	f7ff f90f 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43c9e:	210a      	movs	r1, #10
   43ca0:	488c      	ldr	r0, [pc, #560]	; (43ed4 <button2+0x31c>)
   43ca2:	f7fe fedb 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1RSRP, strlen(t1RSRP), false);
   43ca6:	4890      	ldr	r0, [pc, #576]	; (43ee8 <button2+0x330>)
   43ca8:	f7fd f8a4 	bl	40df4 <strlen>
   43cac:	2300      	movs	r3, #0
   43cae:	4602      	mov	r2, r0
   43cb0:	498d      	ldr	r1, [pc, #564]	; (43ee8 <button2+0x330>)
   43cb2:	4888      	ldr	r0, [pc, #544]	; (43ed4 <button2+0x31c>)
   43cb4:	f7ff f902 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43cb8:	210a      	movs	r1, #10
   43cba:	4886      	ldr	r0, [pc, #536]	; (43ed4 <button2+0x31c>)
   43cbc:	f7fe fece 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1RSRQ, strlen(t1RSRQ), false);
   43cc0:	488a      	ldr	r0, [pc, #552]	; (43eec <button2+0x334>)
   43cc2:	f7fd f897 	bl	40df4 <strlen>
   43cc6:	2300      	movs	r3, #0
   43cc8:	4602      	mov	r2, r0
   43cca:	4988      	ldr	r1, [pc, #544]	; (43eec <button2+0x334>)
   43ccc:	4881      	ldr	r0, [pc, #516]	; (43ed4 <button2+0x31c>)
   43cce:	f7ff f8f5 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43cd2:	210a      	movs	r1, #10
   43cd4:	487f      	ldr	r0, [pc, #508]	; (43ed4 <button2+0x31c>)
   43cd6:	f7fe fec1 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1SNR, strlen(t1SNR), false);
   43cda:	4885      	ldr	r0, [pc, #532]	; (43ef0 <button2+0x338>)
   43cdc:	f7fd f88a 	bl	40df4 <strlen>
   43ce0:	2300      	movs	r3, #0
   43ce2:	4602      	mov	r2, r0
   43ce4:	4982      	ldr	r1, [pc, #520]	; (43ef0 <button2+0x338>)
   43ce6:	487b      	ldr	r0, [pc, #492]	; (43ed4 <button2+0x31c>)
   43ce8:	f7ff f8e8 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43cec:	210a      	movs	r1, #10
   43cee:	4879      	ldr	r0, [pc, #484]	; (43ed4 <button2+0x31c>)
   43cf0:	f7fe feb4 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t1Band, strlen(t1Band), false);
   43cf4:	487f      	ldr	r0, [pc, #508]	; (43ef4 <button2+0x33c>)
   43cf6:	f7fd f87d 	bl	40df4 <strlen>
   43cfa:	2300      	movs	r3, #0
   43cfc:	4602      	mov	r2, r0
   43cfe:	497d      	ldr	r1, [pc, #500]	; (43ef4 <button2+0x33c>)
   43d00:	4874      	ldr	r0, [pc, #464]	; (43ed4 <button2+0x31c>)
   43d02:	f7ff f8db 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d06:	210a      	movs	r1, #10
   43d08:	4872      	ldr	r0, [pc, #456]	; (43ed4 <button2+0x31c>)
   43d0a:	f7fe fea7 	bl	42a5c <AppendCharacter.isra.0>

	//tower 2
	AppendString(testTxt, t2ID, strlen(t2ID), false);
   43d0e:	486a      	ldr	r0, [pc, #424]	; (43eb8 <button2+0x300>)
   43d10:	f7fd f870 	bl	40df4 <strlen>
   43d14:	2300      	movs	r3, #0
   43d16:	4602      	mov	r2, r0
   43d18:	4967      	ldr	r1, [pc, #412]	; (43eb8 <button2+0x300>)
   43d1a:	486e      	ldr	r0, [pc, #440]	; (43ed4 <button2+0x31c>)
   43d1c:	f7ff f8ce 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d20:	210a      	movs	r1, #10
   43d22:	486c      	ldr	r0, [pc, #432]	; (43ed4 <button2+0x31c>)
   43d24:	f7fe fe9a 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2MCC, strlen(t2MCC), false);
   43d28:	4873      	ldr	r0, [pc, #460]	; (43ef8 <button2+0x340>)
   43d2a:	f7fd f863 	bl	40df4 <strlen>
   43d2e:	2300      	movs	r3, #0
   43d30:	4602      	mov	r2, r0
   43d32:	4971      	ldr	r1, [pc, #452]	; (43ef8 <button2+0x340>)
   43d34:	4867      	ldr	r0, [pc, #412]	; (43ed4 <button2+0x31c>)
   43d36:	f7ff f8c1 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d3a:	210a      	movs	r1, #10
   43d3c:	4865      	ldr	r0, [pc, #404]	; (43ed4 <button2+0x31c>)
   43d3e:	f7fe fe8d 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2MNC, strlen(t2MNC), false);
   43d42:	486e      	ldr	r0, [pc, #440]	; (43efc <button2+0x344>)
   43d44:	f7fd f856 	bl	40df4 <strlen>
   43d48:	2300      	movs	r3, #0
   43d4a:	4602      	mov	r2, r0
   43d4c:	496b      	ldr	r1, [pc, #428]	; (43efc <button2+0x344>)
   43d4e:	4861      	ldr	r0, [pc, #388]	; (43ed4 <button2+0x31c>)
   43d50:	f7ff f8b4 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d54:	210a      	movs	r1, #10
   43d56:	485f      	ldr	r0, [pc, #380]	; (43ed4 <button2+0x31c>)
   43d58:	f7fe fe80 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2TAC, strlen(t2TAC), false);
   43d5c:	4868      	ldr	r0, [pc, #416]	; (43f00 <button2+0x348>)
   43d5e:	f7fd f849 	bl	40df4 <strlen>
   43d62:	2300      	movs	r3, #0
   43d64:	4602      	mov	r2, r0
   43d66:	4966      	ldr	r1, [pc, #408]	; (43f00 <button2+0x348>)
   43d68:	485a      	ldr	r0, [pc, #360]	; (43ed4 <button2+0x31c>)
   43d6a:	f7ff f8a7 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d6e:	210a      	movs	r1, #10
   43d70:	4858      	ldr	r0, [pc, #352]	; (43ed4 <button2+0x31c>)
   43d72:	f7fe fe73 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2TA, strlen(t2TA), false);
   43d76:	4863      	ldr	r0, [pc, #396]	; (43f04 <button2+0x34c>)
   43d78:	f7fd f83c 	bl	40df4 <strlen>
   43d7c:	2300      	movs	r3, #0
   43d7e:	4602      	mov	r2, r0
   43d80:	4960      	ldr	r1, [pc, #384]	; (43f04 <button2+0x34c>)
   43d82:	4854      	ldr	r0, [pc, #336]	; (43ed4 <button2+0x31c>)
   43d84:	f7ff f89a 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43d88:	210a      	movs	r1, #10
   43d8a:	4852      	ldr	r0, [pc, #328]	; (43ed4 <button2+0x31c>)
   43d8c:	f7fe fe66 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2RSRP, strlen(t2RSRP), false);
   43d90:	485d      	ldr	r0, [pc, #372]	; (43f08 <button2+0x350>)
   43d92:	f7fd f82f 	bl	40df4 <strlen>
   43d96:	2300      	movs	r3, #0
   43d98:	4602      	mov	r2, r0
   43d9a:	495b      	ldr	r1, [pc, #364]	; (43f08 <button2+0x350>)
   43d9c:	484d      	ldr	r0, [pc, #308]	; (43ed4 <button2+0x31c>)
   43d9e:	f7ff f88d 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43da2:	210a      	movs	r1, #10
   43da4:	484b      	ldr	r0, [pc, #300]	; (43ed4 <button2+0x31c>)
   43da6:	f7fe fe59 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2RSRQ, strlen(t2RSRQ), false);
   43daa:	4858      	ldr	r0, [pc, #352]	; (43f0c <button2+0x354>)
   43dac:	f7fd f822 	bl	40df4 <strlen>
   43db0:	2300      	movs	r3, #0
   43db2:	4602      	mov	r2, r0
   43db4:	4955      	ldr	r1, [pc, #340]	; (43f0c <button2+0x354>)
   43db6:	4847      	ldr	r0, [pc, #284]	; (43ed4 <button2+0x31c>)
   43db8:	f7ff f880 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43dbc:	210a      	movs	r1, #10
   43dbe:	4845      	ldr	r0, [pc, #276]	; (43ed4 <button2+0x31c>)
   43dc0:	f7fe fe4c 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2SNR, strlen(t2SNR), false);
   43dc4:	4852      	ldr	r0, [pc, #328]	; (43f10 <button2+0x358>)
   43dc6:	f7fd f815 	bl	40df4 <strlen>
   43dca:	2300      	movs	r3, #0
   43dcc:	4602      	mov	r2, r0
   43dce:	4950      	ldr	r1, [pc, #320]	; (43f10 <button2+0x358>)
   43dd0:	4840      	ldr	r0, [pc, #256]	; (43ed4 <button2+0x31c>)
   43dd2:	f7ff f873 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43dd6:	210a      	movs	r1, #10
   43dd8:	483e      	ldr	r0, [pc, #248]	; (43ed4 <button2+0x31c>)
   43dda:	f7fe fe3f 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t2Band, strlen(t2Band), false);
   43dde:	484d      	ldr	r0, [pc, #308]	; (43f14 <button2+0x35c>)
   43de0:	f7fd f808 	bl	40df4 <strlen>
   43de4:	2300      	movs	r3, #0
   43de6:	4602      	mov	r2, r0
   43de8:	494a      	ldr	r1, [pc, #296]	; (43f14 <button2+0x35c>)
   43dea:	483a      	ldr	r0, [pc, #232]	; (43ed4 <button2+0x31c>)
   43dec:	f7ff f866 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43df0:	210a      	movs	r1, #10
   43df2:	4838      	ldr	r0, [pc, #224]	; (43ed4 <button2+0x31c>)
   43df4:	f7fe fe32 	bl	42a5c <AppendCharacter.isra.0>

	//tower 3
	AppendString(testTxt, t3ID, strlen(t3ID), false);
   43df8:	4831      	ldr	r0, [pc, #196]	; (43ec0 <button2+0x308>)
   43dfa:	f7fc fffb 	bl	40df4 <strlen>
   43dfe:	2300      	movs	r3, #0
   43e00:	4602      	mov	r2, r0
   43e02:	492f      	ldr	r1, [pc, #188]	; (43ec0 <button2+0x308>)
   43e04:	4833      	ldr	r0, [pc, #204]	; (43ed4 <button2+0x31c>)
   43e06:	f7ff f859 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43e0a:	210a      	movs	r1, #10
   43e0c:	4831      	ldr	r0, [pc, #196]	; (43ed4 <button2+0x31c>)
   43e0e:	f7fe fe25 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3MCC, strlen(t3MCC), false);
   43e12:	4841      	ldr	r0, [pc, #260]	; (43f18 <button2+0x360>)
   43e14:	f7fc ffee 	bl	40df4 <strlen>
   43e18:	2300      	movs	r3, #0
   43e1a:	4602      	mov	r2, r0
   43e1c:	493e      	ldr	r1, [pc, #248]	; (43f18 <button2+0x360>)
   43e1e:	482d      	ldr	r0, [pc, #180]	; (43ed4 <button2+0x31c>)
   43e20:	f7ff f84c 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43e24:	210a      	movs	r1, #10
   43e26:	482b      	ldr	r0, [pc, #172]	; (43ed4 <button2+0x31c>)
   43e28:	f7fe fe18 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3MNC, strlen(t3MNC), false);
   43e2c:	483b      	ldr	r0, [pc, #236]	; (43f1c <button2+0x364>)
   43e2e:	f7fc ffe1 	bl	40df4 <strlen>
   43e32:	2300      	movs	r3, #0
   43e34:	4602      	mov	r2, r0
   43e36:	4939      	ldr	r1, [pc, #228]	; (43f1c <button2+0x364>)
   43e38:	4826      	ldr	r0, [pc, #152]	; (43ed4 <button2+0x31c>)
   43e3a:	f7ff f83f 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43e3e:	210a      	movs	r1, #10
   43e40:	4824      	ldr	r0, [pc, #144]	; (43ed4 <button2+0x31c>)
   43e42:	f7fe fe0b 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3TAC, strlen(t3TAC), false);
   43e46:	4836      	ldr	r0, [pc, #216]	; (43f20 <button2+0x368>)
   43e48:	f7fc ffd4 	bl	40df4 <strlen>
   43e4c:	2300      	movs	r3, #0
   43e4e:	4602      	mov	r2, r0
   43e50:	4933      	ldr	r1, [pc, #204]	; (43f20 <button2+0x368>)
   43e52:	4820      	ldr	r0, [pc, #128]	; (43ed4 <button2+0x31c>)
   43e54:	f7ff f832 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43e58:	210a      	movs	r1, #10
   43e5a:	481e      	ldr	r0, [pc, #120]	; (43ed4 <button2+0x31c>)
   43e5c:	f7fe fdfe 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3TA, strlen(t3TA), false);
   43e60:	4830      	ldr	r0, [pc, #192]	; (43f24 <button2+0x36c>)
   43e62:	f7fc ffc7 	bl	40df4 <strlen>
   43e66:	2300      	movs	r3, #0
   43e68:	4602      	mov	r2, r0
   43e6a:	492e      	ldr	r1, [pc, #184]	; (43f24 <button2+0x36c>)
   43e6c:	4819      	ldr	r0, [pc, #100]	; (43ed4 <button2+0x31c>)
   43e6e:	f7ff f825 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43e72:	210a      	movs	r1, #10
   43e74:	4817      	ldr	r0, [pc, #92]	; (43ed4 <button2+0x31c>)
   43e76:	f7fe fdf1 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3RSRP, strlen(t3RSRP), false);
   43e7a:	482b      	ldr	r0, [pc, #172]	; (43f28 <button2+0x370>)
   43e7c:	f7fc ffba 	bl	40df4 <strlen>
   43e80:	2300      	movs	r3, #0
   43e82:	4602      	mov	r2, r0
   43e84:	4928      	ldr	r1, [pc, #160]	; (43f28 <button2+0x370>)
   43e86:	4813      	ldr	r0, [pc, #76]	; (43ed4 <button2+0x31c>)
   43e88:	f7ff f818 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43e8c:	210a      	movs	r1, #10
   43e8e:	4811      	ldr	r0, [pc, #68]	; (43ed4 <button2+0x31c>)
   43e90:	f7fe fde4 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3RSRQ, strlen(t3RSRQ), false);
   43e94:	4825      	ldr	r0, [pc, #148]	; (43f2c <button2+0x374>)
   43e96:	f7fc ffad 	bl	40df4 <strlen>
   43e9a:	2300      	movs	r3, #0
   43e9c:	4602      	mov	r2, r0
   43e9e:	4923      	ldr	r1, [pc, #140]	; (43f2c <button2+0x374>)
   43ea0:	480c      	ldr	r0, [pc, #48]	; (43ed4 <button2+0x31c>)
   43ea2:	f7ff f80b 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43ea6:	210a      	movs	r1, #10
   43ea8:	e042      	b.n	43f30 <button2+0x378>
   43eaa:	bf00      	nop
   43eac:	0005d430 	.word	0x0005d430
   43eb0:	2001dce9 	.word	0x2001dce9
   43eb4:	0005d43b 	.word	0x0005d43b
   43eb8:	2001dab7 	.word	0x2001dab7
   43ebc:	0005d448 	.word	0x0005d448
   43ec0:	2001d885 	.word	0x2001d885
   43ec4:	0005d455 	.word	0x0005d455
   43ec8:	0005d19b 	.word	0x0005d19b
   43ecc:	0005d462 	.word	0x0005d462
   43ed0:	0005d310 	.word	0x0005d310
   43ed4:	0005d469 	.word	0x0005d469
   43ed8:	2001dcdd 	.word	0x2001dcdd
   43edc:	2001dcd1 	.word	0x2001dcd1
   43ee0:	2001dcc5 	.word	0x2001dcc5
   43ee4:	2001dcb9 	.word	0x2001dcb9
   43ee8:	2001dc94 	.word	0x2001dc94
   43eec:	2001dc88 	.word	0x2001dc88
   43ef0:	2001daf8 	.word	0x2001daf8
   43ef4:	2001dac6 	.word	0x2001dac6
   43ef8:	2001daab 	.word	0x2001daab
   43efc:	2001da9f 	.word	0x2001da9f
   43f00:	2001da93 	.word	0x2001da93
   43f04:	2001da87 	.word	0x2001da87
   43f08:	2001da62 	.word	0x2001da62
   43f0c:	2001da56 	.word	0x2001da56
   43f10:	2001d8c6 	.word	0x2001d8c6
   43f14:	2001d894 	.word	0x2001d894
   43f18:	2001d879 	.word	0x2001d879
   43f1c:	2001d86d 	.word	0x2001d86d
   43f20:	2001d861 	.word	0x2001d861
   43f24:	2001d855 	.word	0x2001d855
   43f28:	2001d830 	.word	0x2001d830
   43f2c:	2001d824 	.word	0x2001d824
   43f30:	4818      	ldr	r0, [pc, #96]	; (43f94 <button2+0x3dc>)
   43f32:	f7fe fd93 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3SNR, strlen(t3SNR), false);
   43f36:	4818      	ldr	r0, [pc, #96]	; (43f98 <button2+0x3e0>)
   43f38:	f7fc ff5c 	bl	40df4 <strlen>
   43f3c:	2300      	movs	r3, #0
   43f3e:	4602      	mov	r2, r0
   43f40:	4915      	ldr	r1, [pc, #84]	; (43f98 <button2+0x3e0>)
   43f42:	4814      	ldr	r0, [pc, #80]	; (43f94 <button2+0x3dc>)
   43f44:	f7fe ffba 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43f48:	210a      	movs	r1, #10
   43f4a:	4812      	ldr	r0, [pc, #72]	; (43f94 <button2+0x3dc>)
   43f4c:	f7fe fd86 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(testTxt, t3Band, strlen(t3Band), false);
   43f50:	4812      	ldr	r0, [pc, #72]	; (43f9c <button2+0x3e4>)
   43f52:	f7fc ff4f 	bl	40df4 <strlen>
   43f56:	2300      	movs	r3, #0
   43f58:	4602      	mov	r2, r0
   43f5a:	4910      	ldr	r1, [pc, #64]	; (43f9c <button2+0x3e4>)
   43f5c:	480d      	ldr	r0, [pc, #52]	; (43f94 <button2+0x3dc>)
   43f5e:	f7fe ffad 	bl	42ebc <AppendString>
	AppendCharacter(testTxt,'\n');
   43f62:	210a      	movs	r1, #10
   43f64:	480b      	ldr	r0, [pc, #44]	; (43f94 <button2+0x3dc>)
   43f66:	f7fe fd79 	bl	42a5c <AppendCharacter.isra.0>
	
	AppendString(testTxt, time, strlen(time), false);
   43f6a:	480d      	ldr	r0, [pc, #52]	; (43fa0 <button2+0x3e8>)
   43f6c:	f7fc ff42 	bl	40df4 <strlen>
   43f70:	2300      	movs	r3, #0
   43f72:	4602      	mov	r2, r0
   43f74:	490a      	ldr	r1, [pc, #40]	; (43fa0 <button2+0x3e8>)
   43f76:	4807      	ldr	r0, [pc, #28]	; (43f94 <button2+0x3dc>)
   43f78:	f7fe ffa0 	bl	42ebc <AppendString>
	AppendString(testTxt, separator, strlen(separator), false);
   43f7c:	4809      	ldr	r0, [pc, #36]	; (43fa4 <button2+0x3ec>)
   43f7e:	f7fc ff39 	bl	40df4 <strlen>
}
   43f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	AppendString(testTxt, separator, strlen(separator), false);
   43f86:	4602      	mov	r2, r0
   43f88:	2300      	movs	r3, #0
   43f8a:	4906      	ldr	r1, [pc, #24]	; (43fa4 <button2+0x3ec>)
   43f8c:	4801      	ldr	r0, [pc, #4]	; (43f94 <button2+0x3dc>)
   43f8e:	f7fe bf95 	b.w	42ebc <AppendString>
   43f92:	bf00      	nop
   43f94:	0005d469 	.word	0x0005d469
   43f98:	2001d694 	.word	0x2001d694
   43f9c:	2001d662 	.word	0x2001d662
   43fa0:	2001ddf8 	.word	0x2001ddf8
   43fa4:	0005d310 	.word	0x0005d310

00043fa8 <storeAES>:

void storeAES(void)
{
   43fa8:	b570      	push	{r4, r5, r6, lr}
	
	AppendString(secureTxt, time, strlen(time), false);
	AppendString(secureTxt, separator, strlen(separator), false);
	*/
	//AppendString(testTxt, keyDeci, sizeof(keyDeci), false);
	AppendCharacter(secureTxt, "\n");
   43faa:	4c19      	ldr	r4, [pc, #100]	; (44010 <storeAES+0x68>)
   43fac:	4819      	ldr	r0, [pc, #100]	; (44014 <storeAES+0x6c>)
   43fae:	b2e4      	uxtb	r4, r4
   43fb0:	4621      	mov	r1, r4
   43fb2:	f7fe fd53 	bl	42a5c <AppendCharacter.isra.0>
	AppendString(secureTxt, keyHex, strlen(keyHex), false);
   43fb6:	4818      	ldr	r0, [pc, #96]	; (44018 <storeAES+0x70>)
   43fb8:	f7fc ff1c 	bl	40df4 <strlen>
   43fbc:	2300      	movs	r3, #0
   43fbe:	4602      	mov	r2, r0
   43fc0:	4915      	ldr	r1, [pc, #84]	; (44018 <storeAES+0x70>)
   43fc2:	4814      	ldr	r0, [pc, #80]	; (44014 <storeAES+0x6c>)
   43fc4:	f7fe ff7a 	bl	42ebc <AppendString>
	AppendCharacter(secureTxt, "\n");
   43fc8:	4621      	mov	r1, r4
   43fca:	4812      	ldr	r0, [pc, #72]	; (44014 <storeAES+0x6c>)
   43fcc:	f7fe fd46 	bl	42a5c <AppendCharacter.isra.0>
	char conH[5];
	int loop;
	char secInfo[NRF_CRYPTO_EXAMPLE_AES_MAX_TEXT_SIZE +
				NRF_CRYPTO_EXAMPLE_AES_GCM_TAG_LENGTH];
	//for(loop = 0; loop < sizeof(m_encrypted_text)/sizeof(m_encrypted_text[0]); loop++)
	for(loop = 0; loop < sizeof(m_encrypted_text); loop++)
   43fd0:	2400      	movs	r4, #0
   43fd2:	4d12      	ldr	r5, [pc, #72]	; (4401c <storeAES+0x74>)
	{
		printk("%02x ", m_encrypted_text[loop]);
   43fd4:	4e12      	ldr	r6, [pc, #72]	; (44020 <storeAES+0x78>)
   43fd6:	4630      	mov	r0, r6
   43fd8:	f815 1b01 	ldrb.w	r1, [r5], #1
	for(loop = 0; loop < sizeof(m_encrypted_text); loop++)
   43fdc:	3401      	adds	r4, #1
		printk("%02x ", m_encrypted_text[loop]);
   43fde:	f011 fbdf 	bl	557a0 <printk>
	for(loop = 0; loop < sizeof(m_encrypted_text); loop++)
   43fe2:	f5b4 6ffc 	cmp.w	r4, #2016	; 0x7e0
   43fe6:	d1f6      	bne.n	43fd6 <storeAES+0x2e>
		{
			strcat(secInfo, conH);
		}
		*/
	}
	printk("\n");
   43fe8:	4809      	ldr	r0, [pc, #36]	; (44010 <storeAES+0x68>)
   43fea:	f011 fbd9 	bl	557a0 <printk>
	for(loop = 0; loop < sizeof(m_encrypted_text); loop++)
   43fee:	2400      	movs	r4, #0
   43ff0:	4d0c      	ldr	r5, [pc, #48]	; (44024 <storeAES+0x7c>)
	{
		printk("%02x ", m_decrypted_text[loop]);
   43ff2:	4e0b      	ldr	r6, [pc, #44]	; (44020 <storeAES+0x78>)
   43ff4:	4630      	mov	r0, r6
   43ff6:	f815 1b01 	ldrb.w	r1, [r5], #1
	for(loop = 0; loop < sizeof(m_encrypted_text); loop++)
   43ffa:	3401      	adds	r4, #1
		printk("%02x ", m_decrypted_text[loop]);
   43ffc:	f011 fbd0 	bl	557a0 <printk>
	for(loop = 0; loop < sizeof(m_encrypted_text); loop++)
   44000:	f5b4 6ffc 	cmp.w	r4, #2016	; 0x7e0
   44004:	d1f6      	bne.n	43ff4 <storeAES+0x4c>
	}
	printk("\n");
   44006:	4802      	ldr	r0, [pc, #8]	; (44010 <storeAES+0x68>)
	//AppendString(secureTxt, secInfo, strlen(secInfo), false);
	//AppendCharacter(secureTxt, "\n");
}
   44008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("\n");
   4400c:	f011 bbc8 	b.w	557a0 <printk>
   44010:	0005fccd 	.word	0x0005fccd
   44014:	0005d477 	.word	0x0005d477
   44018:	2001dcf8 	.word	0x2001dcf8
   4401c:	2001c6a6 	.word	0x2001c6a6
   44020:	0005d22f 	.word	0x0005d22f
   44024:	2001bed6 	.word	0x2001bed6

00044028 <button_handler>:


//custom button handler
static void button_handler(uint32_t button_states, uint32_t has_changed)
{
   44028:	b510      	push	{r4, lr}
	//this runs if the first button on the dev kit is pressed
	//typically used for querying and printing values
	//if (has_changed & button_states & DK_BTN1_MSK) 
	if (has_changed & button_states & Collect_Towers) 
   4402a:	ea01 0400 	and.w	r4, r1, r0
   4402e:	07e1      	lsls	r1, r4, #31
   44030:	d501      	bpl.n	44036 <button_handler+0xe>
	{
		button1();
   44032:	f7ff fd8d 	bl	43b50 <button1>
	}

	//this runs if the second button on the dev kit is pressed
	//stores collected towers to disk
	if (has_changed & button_states & DK_BTN2_MSK) 
   44036:	07a2      	lsls	r2, r4, #30
   44038:	d50f      	bpl.n	4405a <button_handler+0x32>
	//if (has_changed & button_states & Store_Towers)
	{
		button2();
   4403a:	f7ff fdbd 	bl	43bb8 <button2>
		
		secure();
   4403e:	f7ff fac1 	bl	435c4 <secure>

		startCrypto();
   44042:	f7ff fa4f 	bl	434e4 <startCrypto>

		//printk("")

		decryptData();
   44046:	f011 fb22 	bl	5568e <decryptData>

		//store the encrypted data to disk
		storeAES();
   4404a:	f7ff ffad 	bl	43fa8 <storeAES>

		cryptoEnd();
   4404e:	f011 fb26 	bl	5569e <cryptoEnd>
		printk("\n");
		*/


		//clear the strings
		empty();
   44052:	f7fe ffe3 	bl	4301c <empty>

		//turn the board off
		power();
   44056:	f7fe fea5 	bl	42da4 <power>
	}

	//if the useless button is pressed
	if (has_changed & button_states & Output_Other) 
   4405a:	0763      	lsls	r3, r4, #29
   4405c:	d504      	bpl.n	44068 <button_handler+0x40>
	{
		printk("button 3 \n");
	}
	
}
   4405e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("button 3 \n");
   44062:	4802      	ldr	r0, [pc, #8]	; (4406c <button_handler+0x44>)
   44064:	f011 bb9c 	b.w	557a0 <printk>
}
   44068:	bd10      	pop	{r4, pc}
   4406a:	bf00      	nop
   4406c:	0005d487 	.word	0x0005d487

00044070 <main>:


void main(void)
{
   44070:	b5f0      	push	{r4, r5, r6, r7, lr}
   44072:	b09f      	sub	sp, #124	; 0x7c
	//initialize storage	
	storage();
   44074:	f7fe fed2 	bl	42e1c <storage>

	//uses the leds as signals to the pico
	//not implemented
	int startFakeLEDs;
	startFakeLEDs = gpio_pin_set_dt(&Tower_Read_Success, LOW);
   44078:	2100      	movs	r1, #0
   4407a:	487e      	ldr	r0, [pc, #504]	; (44274 <main+0x204>)
   4407c:	f011 fae6 	bl	5564c <gpio_pin_set_dt.isra.0>
	startFakeLEDs = gpio_pin_set_dt(&Tower_Read_Fail, LOW);
   44080:	2100      	movs	r1, #0
   44082:	487d      	ldr	r0, [pc, #500]	; (44278 <main+0x208>)
   44084:	f011 fae2 	bl	5564c <gpio_pin_set_dt.isra.0>
	startFakeLEDs = gpio_pin_set_dt(&Tower_Buffer_Full, LOW);
   44088:	2100      	movs	r1, #0
   4408a:	487c      	ldr	r0, [pc, #496]	; (4427c <main+0x20c>)
   4408c:	f011 fade 	bl	5564c <gpio_pin_set_dt.isra.0>
	startFakeLEDs = gpio_pin_set_dt(&Tower_Connected, LOW);
   44090:	2100      	movs	r1, #0
   44092:	487b      	ldr	r0, [pc, #492]	; (44280 <main+0x210>)
   44094:	f011 fada 	bl	5564c <gpio_pin_set_dt.isra.0>
 * @param zdp Pointer to file object
 *
 */
static inline void fs_dir_t_init(struct fs_dir_t *zdp)
{
	*zdp = (struct fs_dir_t){ 0 };
   44098:	2300      	movs	r3, #0
	res = fs_opendir(&dirp, path);
   4409a:	497a      	ldr	r1, [pc, #488]	; (44284 <main+0x214>)
   4409c:	a817      	add	r0, sp, #92	; 0x5c
   4409e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
   440a2:	f002 fe8d 	bl	46dc0 <fs_opendir>
		printk("Error opening dir %s [%d]\n", path, res);
   440a6:	4977      	ldr	r1, [pc, #476]	; (44284 <main+0x214>)
	if (res) {
   440a8:	4602      	mov	r2, r0
   440aa:	b360      	cbz	r0, 44106 <main+0x96>
		printk("Error opening dir %s [%d]\n", path, res);
   440ac:	4876      	ldr	r0, [pc, #472]	; (44288 <main+0x218>)
   440ae:	f011 fb77 	bl	557a0 <printk>
	strcpy(t2COPS, "noCOPS2");
	strcpy(t3COPS, "noCOPS3");
	
	int err;

	LOG_INF("Program has started!");
   440b2:	2400      	movs	r4, #0
	empty();
   440b4:	f7fe ffb2 	bl	4301c <empty>
	strcpy(t1COPS, "noCOPS1");
   440b8:	4974      	ldr	r1, [pc, #464]	; (4428c <main+0x21c>)
   440ba:	4875      	ldr	r0, [pc, #468]	; (44290 <main+0x220>)
   440bc:	f017 f8f9 	bl	5b2b2 <strcpy>
	strcpy(t2COPS, "noCOPS2");
   440c0:	4974      	ldr	r1, [pc, #464]	; (44294 <main+0x224>)
   440c2:	4875      	ldr	r0, [pc, #468]	; (44298 <main+0x228>)
   440c4:	f017 f8f5 	bl	5b2b2 <strcpy>
	strcpy(t3COPS, "noCOPS3");
   440c8:	4974      	ldr	r1, [pc, #464]	; (4429c <main+0x22c>)
   440ca:	4875      	ldr	r0, [pc, #468]	; (442a0 <main+0x230>)
   440cc:	f017 f8f1 	bl	5b2b2 <strcpy>
	LOG_INF("Program has started!");
   440d0:	4b74      	ldr	r3, [pc, #464]	; (442a4 <main+0x234>)
   440d2:	2203      	movs	r2, #3
   440d4:	4620      	mov	r0, r4
   440d6:	4974      	ldr	r1, [pc, #464]	; (442a8 <main+0x238>)
   440d8:	9302      	str	r3, [sp, #8]
   440da:	e9cd 4400 	strd	r4, r4, [sp]
   440de:	4623      	mov	r3, r4
   440e0:	f011 faa5 	bl	5562e <z_log_msg_runtime_create.constprop.0>
#endif
#if defined(CONFIG_MULTICELL_LOCATION_SAMPLE_REQUEST_PERIODIC)
	k_work_init_delayable(&periodic_search_work, periodic_search_work_fn);
#endif

	err = multicell_location_provision_certificate(false);
   440e4:	4620      	mov	r0, r4
   440e6:	f009 f80b 	bl	4d100 <multicell_location_provision_certificate>
	if (err) {
   440ea:	4605      	mov	r5, r0
   440ec:	b358      	cbz	r0, 44146 <main+0xd6>
		LOG_ERR("Certificate provisioning failed, exiting application");
   440ee:	4b6f      	ldr	r3, [pc, #444]	; (442ac <main+0x23c>)
   440f0:	2201      	movs	r2, #1
   440f2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   440f6:	4620      	mov	r0, r4
   440f8:	4623      	mov	r3, r4
   440fa:	496b      	ldr	r1, [pc, #428]	; (442a8 <main+0x238>)
   440fc:	9400      	str	r4, [sp, #0]
   440fe:	f011 fa96 	bl	5562e <z_log_msg_runtime_create.constprop.0>
			}
			start_cell_measurements();
			getData = 1;
		}
	}
}
   44102:	b01f      	add	sp, #124	; 0x7c
   44104:	bdf0      	pop	{r4, r5, r6, r7, pc}
	printk("\nListing dir %s ...\n", path);
   44106:	486a      	ldr	r0, [pc, #424]	; (442b0 <main+0x240>)
   44108:	f011 fb4a 	bl	557a0 <printk>
		res = fs_readdir(&dirp, &entry);
   4410c:	4c69      	ldr	r4, [pc, #420]	; (442b4 <main+0x244>)
			printk("[FILE] %s (size = %zu)\n",
   4410e:	4e6a      	ldr	r6, [pc, #424]	; (442b8 <main+0x248>)
   44110:	1c65      	adds	r5, r4, #1
		res = fs_readdir(&dirp, &entry);
   44112:	4968      	ldr	r1, [pc, #416]	; (442b4 <main+0x244>)
   44114:	a817      	add	r0, sp, #92	; 0x5c
   44116:	f002 fecb 	bl	46eb0 <fs_readdir>
		if (res || entry.name[0] == 0) {
   4411a:	b980      	cbnz	r0, 4413e <main+0xce>
   4411c:	7863      	ldrb	r3, [r4, #1]
   4411e:	b173      	cbz	r3, 4413e <main+0xce>
		if (entry.type == FS_DIR_ENTRY_DIR) {
   44120:	7823      	ldrb	r3, [r4, #0]
   44122:	2b01      	cmp	r3, #1
   44124:	d104      	bne.n	44130 <main+0xc0>
			printk("[DIR] %s\n", entry.name);
   44126:	4629      	mov	r1, r5
   44128:	4864      	ldr	r0, [pc, #400]	; (442bc <main+0x24c>)
   4412a:	f011 fb39 	bl	557a0 <printk>
   4412e:	e7f0      	b.n	44112 <main+0xa2>
			printk("[FILE] %s (size = %zu)\n",
   44130:	4629      	mov	r1, r5
   44132:	4630      	mov	r0, r6
   44134:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   44138:	f011 fb32 	bl	557a0 <printk>
   4413c:	e7e9      	b.n	44112 <main+0xa2>
	fs_closedir(&dirp);
   4413e:	a817      	add	r0, sp, #92	; 0x5c
   44140:	f002 ff32 	bl	46fa8 <fs_closedir>
	return res;
   44144:	e7b5      	b.n	440b2 <main+0x42>
	err = dk_buttons_init(button_handler);
   44146:	485e      	ldr	r0, [pc, #376]	; (442c0 <main+0x250>)
   44148:	f006 fa4c 	bl	4a5e4 <dk_buttons_init>
	if (err) {
   4414c:	b150      	cbz	r0, 44164 <main+0xf4>
		LOG_ERR("Failed to initialize DK library, error: %d", err);
   4414e:	4b5d      	ldr	r3, [pc, #372]	; (442c4 <main+0x254>)
   44150:	9003      	str	r0, [sp, #12]
   44152:	e9cd 5301 	strd	r5, r3, [sp, #4]
   44156:	2201      	movs	r2, #1
   44158:	462b      	mov	r3, r5
   4415a:	4628      	mov	r0, r5
   4415c:	4952      	ldr	r1, [pc, #328]	; (442a8 <main+0x238>)
   4415e:	9500      	str	r5, [sp, #0]
   44160:	f011 fa65 	bl	5562e <z_log_msg_runtime_create.constprop.0>
		err = lte_lc_psm_req(false);
   44164:	2000      	movs	r0, #0
   44166:	f007 f9cf 	bl	4b508 <lte_lc_psm_req>
		if (err) {
   4416a:	b150      	cbz	r0, 44182 <main+0x112>
			LOG_ERR("Failed to disable PSM, error: %d", err);
   4416c:	4b56      	ldr	r3, [pc, #344]	; (442c8 <main+0x258>)
   4416e:	9003      	str	r0, [sp, #12]
   44170:	9302      	str	r3, [sp, #8]
   44172:	2300      	movs	r3, #0
   44174:	2201      	movs	r2, #1
   44176:	4618      	mov	r0, r3
   44178:	e9cd 3300 	strd	r3, r3, [sp]
   4417c:	494a      	ldr	r1, [pc, #296]	; (442a8 <main+0x238>)
   4417e:	f011 fa56 	bl	5562e <z_log_msg_runtime_create.constprop.0>
		err = lte_lc_edrx_req(false);
   44182:	2000      	movs	r0, #0
   44184:	f007 fb58 	bl	4b838 <lte_lc_edrx_req>
		if (err) {
   44188:	b150      	cbz	r0, 441a0 <main+0x130>
			LOG_ERR("Failed to disable eDRX, error: %d", err);
   4418a:	4b50      	ldr	r3, [pc, #320]	; (442cc <main+0x25c>)
   4418c:	9003      	str	r0, [sp, #12]
   4418e:	9302      	str	r3, [sp, #8]
   44190:	2300      	movs	r3, #0
   44192:	2201      	movs	r2, #1
   44194:	4618      	mov	r0, r3
   44196:	e9cd 3300 	strd	r3, r3, [sp]
   4419a:	4943      	ldr	r1, [pc, #268]	; (442a8 <main+0x238>)
   4419c:	f011 fa47 	bl	5562e <z_log_msg_runtime_create.constprop.0>
	err = lte_lc_init_and_connect_async(lte_handler);
   441a0:	484b      	ldr	r0, [pc, #300]	; (442d0 <main+0x260>)
   441a2:	f013 fc58 	bl	57a56 <lte_lc_init_and_connect_async>
	if (err) {
   441a6:	4604      	mov	r4, r0
   441a8:	2800      	cmp	r0, #0
   441aa:	d14b      	bne.n	44244 <main+0x1d4>
	LOG_INF("Connecting to LTE network, this may take several minutes...");
   441ac:	4b49      	ldr	r3, [pc, #292]	; (442d4 <main+0x264>)
   441ae:	2203      	movs	r2, #3
   441b0:	e9cd 0301 	strd	r0, r3, [sp, #4]
   441b4:	493c      	ldr	r1, [pc, #240]	; (442a8 <main+0x238>)
   441b6:	4603      	mov	r3, r0
   441b8:	9000      	str	r0, [sp, #0]
   441ba:	f011 fa38 	bl	5562e <z_log_msg_runtime_create.constprop.0>
	return z_impl_k_sem_take(sem, timeout);
   441be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   441c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   441c6:	4844      	ldr	r0, [pc, #272]	; (442d8 <main+0x268>)
   441c8:	f00e fab4 	bl	52734 <z_impl_k_sem_take>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   441cc:	2301      	movs	r3, #1
   441ce:	4f43      	ldr	r7, [pc, #268]	; (442dc <main+0x26c>)
   441d0:	e8d7 2fef 	ldaex	r2, [r7]
   441d4:	e8c7 3fe1 	stlex	r1, r3, [r7]
   441d8:	2900      	cmp	r1, #0
   441da:	d1f9      	bne.n	441d0 <main+0x160>
	LOG_INF("Connected to LTE network");
   441dc:	4b40      	ldr	r3, [pc, #256]	; (442e0 <main+0x270>)
   441de:	2203      	movs	r2, #3
   441e0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   441e4:	4620      	mov	r0, r4
   441e6:	4623      	mov	r3, r4
   441e8:	492f      	ldr	r1, [pc, #188]	; (442a8 <main+0x238>)
   441ea:	9400      	str	r4, [sp, #0]
   441ec:	f011 fa1f 	bl	5562e <z_log_msg_runtime_create.constprop.0>
   441f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   441f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   441f8:	483a      	ldr	r0, [pc, #232]	; (442e4 <main+0x274>)
   441fa:	f00e fa9b 	bl	52734 <z_impl_k_sem_take>
	start_cell_measurements();
   441fe:	f7fe fc79 	bl	42af4 <start_cell_measurements>
	int getData = 0;
   44202:	4625      	mov	r5, r4
   44204:	4e38      	ldr	r6, [pc, #224]	; (442e8 <main+0x278>)
	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   44206:	4c39      	ldr	r4, [pc, #228]	; (442ec <main+0x27c>)
   44208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4420c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44210:	4630      	mov	r0, r6
   44212:	f00e fa8f 	bl	52734 <z_impl_k_sem_take>
		if(getData == 1)
   44216:	2d00      	cmp	r5, #0
   44218:	f000 826e 	beq.w	446f8 <main+0x688>
			printk("Scan is not available!\n");
   4421c:	4834      	ldr	r0, [pc, #208]	; (442f0 <main+0x280>)
   4421e:	f011 fabf 	bl	557a0 <printk>
	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   44222:	68a3      	ldr	r3, [r4, #8]
   44224:	3301      	adds	r3, #1
   44226:	d16b      	bne.n	44300 <main+0x290>
		LOG_WRN("No cells were found");
   44228:	2500      	movs	r5, #0
   4422a:	4b32      	ldr	r3, [pc, #200]	; (442f4 <main+0x284>)
   4422c:	2202      	movs	r2, #2
   4422e:	4628      	mov	r0, r5
   44230:	491d      	ldr	r1, [pc, #116]	; (442a8 <main+0x238>)
   44232:	9302      	str	r3, [sp, #8]
   44234:	e9cd 5500 	strd	r5, r5, [sp]
   44238:	462b      	mov	r3, r5
   4423a:	f011 f9f8 	bl	5562e <z_log_msg_runtime_create.constprop.0>
		Tower_Read_Fail_Change();
   4423e:	f7fe fd65 	bl	42d0c <Tower_Read_Fail_Change>
		return;
   44242:	e7e1      	b.n	44208 <main+0x198>
		LOG_ERR("Modem could not be configured, error: %d",
   44244:	2500      	movs	r5, #0
   44246:	4b2c      	ldr	r3, [pc, #176]	; (442f8 <main+0x288>)
   44248:	9003      	str	r0, [sp, #12]
   4424a:	9302      	str	r3, [sp, #8]
   4424c:	4628      	mov	r0, r5
   4424e:	462b      	mov	r3, r5
   44250:	2201      	movs	r2, #1
   44252:	e9cd 5500 	strd	r5, r5, [sp]
   44256:	4914      	ldr	r1, [pc, #80]	; (442a8 <main+0x238>)
   44258:	f011 f9e9 	bl	5562e <z_log_msg_runtime_create.constprop.0>
		LOG_ERR("Failed to connect to LTE network, error: %d", err);
   4425c:	4b27      	ldr	r3, [pc, #156]	; (442fc <main+0x28c>)
   4425e:	2201      	movs	r2, #1
   44260:	e9cd 5301 	strd	r5, r3, [sp, #4]
   44264:	4628      	mov	r0, r5
   44266:	462b      	mov	r3, r5
   44268:	490f      	ldr	r1, [pc, #60]	; (442a8 <main+0x238>)
   4426a:	9403      	str	r4, [sp, #12]
   4426c:	9500      	str	r5, [sp, #0]
   4426e:	f011 f9de 	bl	5562e <z_log_msg_runtime_create.constprop.0>
		return;
   44272:	e746      	b.n	44102 <main+0x92>
   44274:	0005c1c0 	.word	0x0005c1c0
   44278:	0005c1b8 	.word	0x0005c1b8
   4427c:	0005c1b0 	.word	0x0005c1b0
   44280:	0005c1a8 	.word	0x0005c1a8
   44284:	0005d0e1 	.word	0x0005d0e1
   44288:	0005d492 	.word	0x0005d492
   4428c:	0005d1a1 	.word	0x0005d1a1
   44290:	2001dca0 	.word	0x2001dca0
   44294:	0005d1a9 	.word	0x0005d1a9
   44298:	2001da6e 	.word	0x2001da6e
   4429c:	0005d1b1 	.word	0x0005d1b1
   442a0:	2001d83c 	.word	0x2001d83c
   442a4:	0005d4e4 	.word	0x0005d4e4
   442a8:	0005bf9c 	.word	0x0005bf9c
   442ac:	0005d4f9 	.word	0x0005d4f9
   442b0:	0005d4ad 	.word	0x0005d4ad
   442b4:	2001b070 	.word	0x2001b070
   442b8:	0005d4cc 	.word	0x0005d4cc
   442bc:	0005d4c2 	.word	0x0005d4c2
   442c0:	00044029 	.word	0x00044029
   442c4:	0005d52e 	.word	0x0005d52e
   442c8:	0005d559 	.word	0x0005d559
   442cc:	0005d57a 	.word	0x0005d57a
   442d0:	00042b31 	.word	0x00042b31
   442d4:	0005d59c 	.word	0x0005d59c
   442d8:	2001ac00 	.word	0x2001ac00
   442dc:	2001b28c 	.word	0x2001b28c
   442e0:	0005d5d8 	.word	0x0005d5d8
   442e4:	2001ac18 	.word	0x2001ac18
   442e8:	2001abe8 	.word	0x2001abe8
   442ec:	2001a500 	.word	0x2001a500
   442f0:	0005d646 	.word	0x0005d646
   442f4:	0005d65e 	.word	0x0005d65e
   442f8:	0005d5f1 	.word	0x0005d5f1
   442fc:	0005d61a 	.word	0x0005d61a
	printk("Current cell:\n");
   44300:	489d      	ldr	r0, [pc, #628]	; (44578 <main+0x508>)
   44302:	f011 fa4d 	bl	557a0 <printk>
	printk("\tMCC: %03d\n", cell_data.current_cell.mcc);
   44306:	6821      	ldr	r1, [r4, #0]
   44308:	489c      	ldr	r0, [pc, #624]	; (4457c <main+0x50c>)
   4430a:	f011 fa49 	bl	557a0 <printk>
	printk("\tMNC: %03d\n", cell_data.current_cell.mnc);
   4430e:	6861      	ldr	r1, [r4, #4]
   44310:	489b      	ldr	r0, [pc, #620]	; (44580 <main+0x510>)
   44312:	f011 fa45 	bl	557a0 <printk>
	printk("\tCell ID: %d\n", cell_data.current_cell.id);
   44316:	68a1      	ldr	r1, [r4, #8]
   44318:	489a      	ldr	r0, [pc, #616]	; (44584 <main+0x514>)
   4431a:	f011 fa41 	bl	557a0 <printk>
	printk("\tTAC: %d\n", cell_data.current_cell.tac);
   4431e:	68e1      	ldr	r1, [r4, #12]
   44320:	4899      	ldr	r0, [pc, #612]	; (44588 <main+0x518>)
   44322:	f011 fa3d 	bl	557a0 <printk>
	printk("\tEARFCN: %d\n", cell_data.current_cell.earfcn);
   44326:	6921      	ldr	r1, [r4, #16]
   44328:	4898      	ldr	r0, [pc, #608]	; (4458c <main+0x51c>)
   4432a:	f011 fa39 	bl	557a0 <printk>
	printk("\tTiming advance: %d\n", cell_data.current_cell.timing_advance);
   4432e:	8aa1      	ldrh	r1, [r4, #20]
   44330:	4897      	ldr	r0, [pc, #604]	; (44590 <main+0x520>)
   44332:	f011 fa35 	bl	557a0 <printk>
	printk("\tMeasurement time: %lld\n", cell_data.current_cell.measurement_time);
   44336:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   4433a:	4896      	ldr	r0, [pc, #600]	; (44594 <main+0x524>)
   4433c:	f011 fa30 	bl	557a0 <printk>
	printk("\tPhysical cell ID: %d\n", cell_data.current_cell.phys_cell_id);
   44340:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   44342:	4895      	ldr	r0, [pc, #596]	; (44598 <main+0x528>)
   44344:	f011 fa2c 	bl	557a0 <printk>
	printk("\tRSRP: %d\n", cell_data.current_cell.rsrp);
   44348:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
   4434c:	4893      	ldr	r0, [pc, #588]	; (4459c <main+0x52c>)
   4434e:	f011 fa27 	bl	557a0 <printk>
	printk("\tRSRQ: %d\n", cell_data.current_cell.rsrq);
   44352:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   44356:	4892      	ldr	r0, [pc, #584]	; (445a0 <main+0x530>)
   44358:	f011 fa22 	bl	557a0 <printk>
	sprintf(newID,"%d",cell_data.current_cell.id);
   4435c:	68a3      	ldr	r3, [r4, #8]
   4435e:	2214      	movs	r2, #20
   44360:	2100      	movs	r1, #0
   44362:	9300      	str	r3, [sp, #0]
   44364:	a80d      	add	r0, sp, #52	; 0x34
   44366:	4b8f      	ldr	r3, [pc, #572]	; (445a4 <main+0x534>)
   44368:	f016 ff1f 	bl	5b1aa <__sprintf_chk>
	sprintf(newTA,"%d",cell_data.current_cell.timing_advance);
   4436c:	8aa3      	ldrh	r3, [r4, #20]
   4436e:	2214      	movs	r2, #20
   44370:	2100      	movs	r1, #0
   44372:	9300      	str	r3, [sp, #0]
   44374:	a812      	add	r0, sp, #72	; 0x48
   44376:	4b8b      	ldr	r3, [pc, #556]	; (445a4 <main+0x534>)
   44378:	f016 ff17 	bl	5b1aa <__sprintf_chk>
	sprintf(newMCC,"%03d",cell_data.current_cell.mcc);
   4437c:	6823      	ldr	r3, [r4, #0]
   4437e:	220d      	movs	r2, #13
   44380:	2100      	movs	r1, #0
   44382:	9300      	str	r3, [sp, #0]
   44384:	a805      	add	r0, sp, #20
   44386:	4b88      	ldr	r3, [pc, #544]	; (445a8 <main+0x538>)
   44388:	f016 ff0f 	bl	5b1aa <__sprintf_chk>
	sprintf(newMNC,"%03d",cell_data.current_cell.mnc);
   4438c:	6863      	ldr	r3, [r4, #4]
   4438e:	220d      	movs	r2, #13
   44390:	2100      	movs	r1, #0
   44392:	9300      	str	r3, [sp, #0]
   44394:	a809      	add	r0, sp, #36	; 0x24
   44396:	4b84      	ldr	r3, [pc, #528]	; (445a8 <main+0x538>)
   44398:	f016 ff07 	bl	5b1aa <__sprintf_chk>
	strcpy(newCOPS,newMCC);
   4439c:	2219      	movs	r2, #25
   4439e:	a905      	add	r1, sp, #20
   443a0:	a817      	add	r0, sp, #92	; 0x5c
   443a2:	f016 ff8e 	bl	5b2c2 <__strcpy_chk>
	strcat(newCOPS,newMNC);
   443a6:	2219      	movs	r2, #25
   443a8:	a909      	add	r1, sp, #36	; 0x24
   443aa:	a817      	add	r0, sp, #92	; 0x5c
   443ac:	f016 ff5c 	bl	5b268 <__strcat_chk>
	if(cell_data.current_cell.timing_advance != 65535)
   443b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   443b4:	8aa2      	ldrh	r2, [r4, #20]
   443b6:	429a      	cmp	r2, r3
   443b8:	f000 818e 	beq.w	446d8 <main+0x668>
		if((strstr(t1ID, "empty") != NULL) )
   443bc:	497b      	ldr	r1, [pc, #492]	; (445ac <main+0x53c>)
   443be:	487c      	ldr	r0, [pc, #496]	; (445b0 <main+0x540>)
   443c0:	f016 ffcc 	bl	5b35c <strstr>
   443c4:	2800      	cmp	r0, #0
   443c6:	f000 8084 	beq.w	444d2 <main+0x462>
			sprintf(t1ID,"%d",cell_data.current_cell.id);
   443ca:	68a3      	ldr	r3, [r4, #8]
   443cc:	220f      	movs	r2, #15
   443ce:	2100      	movs	r1, #0
   443d0:	9300      	str	r3, [sp, #0]
   443d2:	4877      	ldr	r0, [pc, #476]	; (445b0 <main+0x540>)
   443d4:	4b73      	ldr	r3, [pc, #460]	; (445a4 <main+0x534>)
   443d6:	f016 fee8 	bl	5b1aa <__sprintf_chk>
			sprintf(t1MCC,"%03d",cell_data.current_cell.mcc);
   443da:	6823      	ldr	r3, [r4, #0]
   443dc:	220c      	movs	r2, #12
   443de:	2100      	movs	r1, #0
   443e0:	9300      	str	r3, [sp, #0]
   443e2:	4874      	ldr	r0, [pc, #464]	; (445b4 <main+0x544>)
   443e4:	4b70      	ldr	r3, [pc, #448]	; (445a8 <main+0x538>)
   443e6:	f016 fee0 	bl	5b1aa <__sprintf_chk>
			sprintf(t1MNC,"%03d",cell_data.current_cell.mnc);
   443ea:	6863      	ldr	r3, [r4, #4]
   443ec:	220c      	movs	r2, #12
   443ee:	2100      	movs	r1, #0
   443f0:	9300      	str	r3, [sp, #0]
   443f2:	4871      	ldr	r0, [pc, #452]	; (445b8 <main+0x548>)
   443f4:	4b6c      	ldr	r3, [pc, #432]	; (445a8 <main+0x538>)
   443f6:	f016 fed8 	bl	5b1aa <__sprintf_chk>
			sprintf(t1TAC,"%d",cell_data.current_cell.tac);
   443fa:	68e3      	ldr	r3, [r4, #12]
   443fc:	220c      	movs	r2, #12
   443fe:	2100      	movs	r1, #0
   44400:	9300      	str	r3, [sp, #0]
   44402:	486e      	ldr	r0, [pc, #440]	; (445bc <main+0x54c>)
   44404:	4b67      	ldr	r3, [pc, #412]	; (445a4 <main+0x534>)
   44406:	f016 fed0 	bl	5b1aa <__sprintf_chk>
			sprintf(t1TA,"%d",cell_data.current_cell.timing_advance);
   4440a:	8aa3      	ldrh	r3, [r4, #20]
   4440c:	220c      	movs	r2, #12
   4440e:	2100      	movs	r1, #0
   44410:	9300      	str	r3, [sp, #0]
   44412:	486b      	ldr	r0, [pc, #428]	; (445c0 <main+0x550>)
   44414:	4b63      	ldr	r3, [pc, #396]	; (445a4 <main+0x534>)
   44416:	f016 fec8 	bl	5b1aa <__sprintf_chk>
			sprintf(t1RSRP,"%d",cell_data.current_cell.rsrp);
   4441a:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   4441e:	220c      	movs	r2, #12
   44420:	2100      	movs	r1, #0
   44422:	9300      	str	r3, [sp, #0]
   44424:	4867      	ldr	r0, [pc, #412]	; (445c4 <main+0x554>)
   44426:	4b5f      	ldr	r3, [pc, #380]	; (445a4 <main+0x534>)
   44428:	f016 febf 	bl	5b1aa <__sprintf_chk>
			sprintf(t1RSRQ,"%d",cell_data.current_cell.rsrq);
   4442c:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
   44430:	220c      	movs	r2, #12
   44432:	2100      	movs	r1, #0
   44434:	9300      	str	r3, [sp, #0]
   44436:	4864      	ldr	r0, [pc, #400]	; (445c8 <main+0x558>)
   44438:	4b5a      	ldr	r3, [pc, #360]	; (445a4 <main+0x534>)
   4443a:	f016 feb6 	bl	5b1aa <__sprintf_chk>
			strcpy(t1COPS,t1MCC);
   4443e:	2219      	movs	r2, #25
   44440:	495c      	ldr	r1, [pc, #368]	; (445b4 <main+0x544>)
   44442:	4862      	ldr	r0, [pc, #392]	; (445cc <main+0x55c>)
   44444:	f016 ff3d 	bl	5b2c2 <__strcpy_chk>
			strcat(t1COPS,t1MNC);
   44448:	2219      	movs	r2, #25
   4444a:	495b      	ldr	r1, [pc, #364]	; (445b8 <main+0x548>)
   4444c:	485f      	ldr	r0, [pc, #380]	; (445cc <main+0x55c>)
			strcat(t2COPS,t2MNC);
   4444e:	f016 ff0b 	bl	5b268 <__strcat_chk>
	printk("Currently stored towers:\n");
   44452:	485f      	ldr	r0, [pc, #380]	; (445d0 <main+0x560>)
   44454:	f011 f9a4 	bl	557a0 <printk>
	printk("Tower 1: %s\n", t1ID);
   44458:	4955      	ldr	r1, [pc, #340]	; (445b0 <main+0x540>)
   4445a:	485e      	ldr	r0, [pc, #376]	; (445d4 <main+0x564>)
   4445c:	f011 f9a0 	bl	557a0 <printk>
	printk("Tower 2: %s\n", t2ID);
   44460:	495d      	ldr	r1, [pc, #372]	; (445d8 <main+0x568>)
   44462:	485e      	ldr	r0, [pc, #376]	; (445dc <main+0x56c>)
   44464:	f011 f99c 	bl	557a0 <printk>
	printk("Tower 3: %s\n", t3ID);
   44468:	495d      	ldr	r1, [pc, #372]	; (445e0 <main+0x570>)
   4446a:	485e      	ldr	r0, [pc, #376]	; (445e4 <main+0x574>)
   4446c:	f011 f998 	bl	557a0 <printk>
	printk("Tower 1 COPS: %s\n", t1COPS);
   44470:	4956      	ldr	r1, [pc, #344]	; (445cc <main+0x55c>)
   44472:	485d      	ldr	r0, [pc, #372]	; (445e8 <main+0x578>)
   44474:	f011 f994 	bl	557a0 <printk>
	printk("Tower 2 COPS: %s\n", t2COPS);
   44478:	495c      	ldr	r1, [pc, #368]	; (445ec <main+0x57c>)
   4447a:	485d      	ldr	r0, [pc, #372]	; (445f0 <main+0x580>)
   4447c:	f011 f990 	bl	557a0 <printk>
	printk("Tower 3 COPS: %s\n", t3COPS);
   44480:	495c      	ldr	r1, [pc, #368]	; (445f4 <main+0x584>)
   44482:	485d      	ldr	r0, [pc, #372]	; (445f8 <main+0x588>)
   44484:	f011 f98c 	bl	557a0 <printk>
	if(!(strstr(t1ID, "empty") != NULL) && !(strstr(t2ID, "empty") != NULL) && !(strstr(t3ID, "empty") != NULL))
   44488:	4948      	ldr	r1, [pc, #288]	; (445ac <main+0x53c>)
   4448a:	4849      	ldr	r0, [pc, #292]	; (445b0 <main+0x540>)
   4448c:	f016 ff66 	bl	5b35c <strstr>
   44490:	b958      	cbnz	r0, 444aa <main+0x43a>
   44492:	4946      	ldr	r1, [pc, #280]	; (445ac <main+0x53c>)
   44494:	4850      	ldr	r0, [pc, #320]	; (445d8 <main+0x568>)
   44496:	f016 ff61 	bl	5b35c <strstr>
   4449a:	b930      	cbnz	r0, 444aa <main+0x43a>
   4449c:	4943      	ldr	r1, [pc, #268]	; (445ac <main+0x53c>)
   4449e:	4850      	ldr	r0, [pc, #320]	; (445e0 <main+0x570>)
   444a0:	f016 ff5c 	bl	5b35c <strstr>
   444a4:	b908      	cbnz	r0, 444aa <main+0x43a>
		Tower_Buffer_Full_Change();
   444a6:	f7fe fc57 	bl	42d58 <Tower_Buffer_Full_Change>
	if(strstr(t1COPS, t_mobile_cops) != NULL)
   444aa:	4954      	ldr	r1, [pc, #336]	; (445fc <main+0x58c>)
   444ac:	4847      	ldr	r0, [pc, #284]	; (445cc <main+0x55c>)
   444ae:	f016 ff55 	bl	5b35c <strstr>
		if(strstr(t2COPS, att_mobility_cops) != NULL)
   444b2:	4953      	ldr	r1, [pc, #332]	; (44600 <main+0x590>)
	if(strstr(t1COPS, t_mobile_cops) != NULL)
   444b4:	2800      	cmp	r0, #0
   444b6:	f000 8132 	beq.w	4471e <main+0x6ae>
		if(strstr(t2COPS, att_mobility_cops) != NULL)
   444ba:	484c      	ldr	r0, [pc, #304]	; (445ec <main+0x57c>)
   444bc:	f016 ff4e 	bl	5b35c <strstr>
   444c0:	2800      	cmp	r0, #0
   444c2:	f000 810b 	beq.w	446dc <main+0x66c>
			changeCOPS(verizon, strlen(verizon));
   444c6:	484f      	ldr	r0, [pc, #316]	; (44604 <main+0x594>)
   444c8:	f7fc fc94 	bl	40df4 <strlen>
   444cc:	4601      	mov	r1, r0
   444ce:	484d      	ldr	r0, [pc, #308]	; (44604 <main+0x594>)
   444d0:	e109      	b.n	446e6 <main+0x676>
		else if((strstr(t2ID, "empty") != NULL)  && (!(strstr(t1COPS, newCOPS) != NULL)))
   444d2:	4936      	ldr	r1, [pc, #216]	; (445ac <main+0x53c>)
   444d4:	4840      	ldr	r0, [pc, #256]	; (445d8 <main+0x568>)
   444d6:	f016 ff41 	bl	5b35c <strstr>
   444da:	2800      	cmp	r0, #0
   444dc:	f000 80a0 	beq.w	44620 <main+0x5b0>
   444e0:	483a      	ldr	r0, [pc, #232]	; (445cc <main+0x55c>)
   444e2:	a917      	add	r1, sp, #92	; 0x5c
   444e4:	f016 ff3a 	bl	5b35c <strstr>
   444e8:	4605      	mov	r5, r0
   444ea:	2800      	cmp	r0, #0
   444ec:	f040 8098 	bne.w	44620 <main+0x5b0>
			sprintf(t2ID,"%d",cell_data.current_cell.id);
   444f0:	68a3      	ldr	r3, [r4, #8]
   444f2:	4601      	mov	r1, r0
   444f4:	220f      	movs	r2, #15
   444f6:	9300      	str	r3, [sp, #0]
   444f8:	4837      	ldr	r0, [pc, #220]	; (445d8 <main+0x568>)
   444fa:	4b2a      	ldr	r3, [pc, #168]	; (445a4 <main+0x534>)
   444fc:	f016 fe55 	bl	5b1aa <__sprintf_chk>
			sprintf(t2MCC,"%03d",cell_data.current_cell.mcc);
   44500:	6823      	ldr	r3, [r4, #0]
   44502:	220c      	movs	r2, #12
   44504:	4629      	mov	r1, r5
   44506:	9300      	str	r3, [sp, #0]
   44508:	483f      	ldr	r0, [pc, #252]	; (44608 <main+0x598>)
   4450a:	4b27      	ldr	r3, [pc, #156]	; (445a8 <main+0x538>)
   4450c:	f016 fe4d 	bl	5b1aa <__sprintf_chk>
			sprintf(t2MNC,"%03d",cell_data.current_cell.mnc);
   44510:	6863      	ldr	r3, [r4, #4]
   44512:	220c      	movs	r2, #12
   44514:	4629      	mov	r1, r5
   44516:	9300      	str	r3, [sp, #0]
   44518:	483c      	ldr	r0, [pc, #240]	; (4460c <main+0x59c>)
   4451a:	4b23      	ldr	r3, [pc, #140]	; (445a8 <main+0x538>)
   4451c:	f016 fe45 	bl	5b1aa <__sprintf_chk>
			sprintf(t2TAC,"%d",cell_data.current_cell.tac);
   44520:	68e3      	ldr	r3, [r4, #12]
   44522:	220c      	movs	r2, #12
   44524:	4629      	mov	r1, r5
   44526:	9300      	str	r3, [sp, #0]
   44528:	4839      	ldr	r0, [pc, #228]	; (44610 <main+0x5a0>)
   4452a:	4b1e      	ldr	r3, [pc, #120]	; (445a4 <main+0x534>)
   4452c:	f016 fe3d 	bl	5b1aa <__sprintf_chk>
			sprintf(t2TA,"%d",cell_data.current_cell.timing_advance);
   44530:	8aa3      	ldrh	r3, [r4, #20]
   44532:	220c      	movs	r2, #12
   44534:	4629      	mov	r1, r5
   44536:	9300      	str	r3, [sp, #0]
   44538:	4836      	ldr	r0, [pc, #216]	; (44614 <main+0x5a4>)
   4453a:	4b1a      	ldr	r3, [pc, #104]	; (445a4 <main+0x534>)
   4453c:	f016 fe35 	bl	5b1aa <__sprintf_chk>
			sprintf(t2RSRP,"%d",cell_data.current_cell.rsrp);
   44540:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   44544:	220c      	movs	r2, #12
   44546:	4629      	mov	r1, r5
   44548:	9300      	str	r3, [sp, #0]
   4454a:	4833      	ldr	r0, [pc, #204]	; (44618 <main+0x5a8>)
   4454c:	4b15      	ldr	r3, [pc, #84]	; (445a4 <main+0x534>)
   4454e:	f016 fe2c 	bl	5b1aa <__sprintf_chk>
			sprintf(t2RSRQ,"%d",cell_data.current_cell.rsrq);
   44552:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
   44556:	220c      	movs	r2, #12
   44558:	4629      	mov	r1, r5
   4455a:	9300      	str	r3, [sp, #0]
   4455c:	482f      	ldr	r0, [pc, #188]	; (4461c <main+0x5ac>)
   4455e:	4b11      	ldr	r3, [pc, #68]	; (445a4 <main+0x534>)
   44560:	f016 fe23 	bl	5b1aa <__sprintf_chk>
			strcpy(t2COPS,t2MCC);
   44564:	2219      	movs	r2, #25
   44566:	4928      	ldr	r1, [pc, #160]	; (44608 <main+0x598>)
   44568:	4820      	ldr	r0, [pc, #128]	; (445ec <main+0x57c>)
   4456a:	f016 feaa 	bl	5b2c2 <__strcpy_chk>
			strcat(t2COPS,t2MNC);
   4456e:	2219      	movs	r2, #25
   44570:	4926      	ldr	r1, [pc, #152]	; (4460c <main+0x59c>)
   44572:	481e      	ldr	r0, [pc, #120]	; (445ec <main+0x57c>)
   44574:	e76b      	b.n	4444e <main+0x3de>
   44576:	bf00      	nop
   44578:	0005d672 	.word	0x0005d672
   4457c:	0005d681 	.word	0x0005d681
   44580:	0005d68d 	.word	0x0005d68d
   44584:	0005d699 	.word	0x0005d699
   44588:	0005d6a7 	.word	0x0005d6a7
   4458c:	0005d6b1 	.word	0x0005d6b1
   44590:	0005d6be 	.word	0x0005d6be
   44594:	0005d6d3 	.word	0x0005d6d3
   44598:	0005d6ec 	.word	0x0005d6ec
   4459c:	0005d703 	.word	0x0005d703
   445a0:	0005d70e 	.word	0x0005d70e
   445a4:	0005fdff 	.word	0x0005fdff
   445a8:	0005d719 	.word	0x0005d719
   445ac:	0005d19b 	.word	0x0005d19b
   445b0:	2001dce9 	.word	0x2001dce9
   445b4:	2001dcdd 	.word	0x2001dcdd
   445b8:	2001dcd1 	.word	0x2001dcd1
   445bc:	2001dcc5 	.word	0x2001dcc5
   445c0:	2001dcb9 	.word	0x2001dcb9
   445c4:	2001dc94 	.word	0x2001dc94
   445c8:	2001dc88 	.word	0x2001dc88
   445cc:	2001dca0 	.word	0x2001dca0
   445d0:	0005d752 	.word	0x0005d752
   445d4:	0005d43b 	.word	0x0005d43b
   445d8:	2001dab7 	.word	0x2001dab7
   445dc:	0005d448 	.word	0x0005d448
   445e0:	2001d885 	.word	0x2001d885
   445e4:	0005d455 	.word	0x0005d455
   445e8:	0005d76c 	.word	0x0005d76c
   445ec:	2001da6e 	.word	0x2001da6e
   445f0:	0005d77e 	.word	0x0005d77e
   445f4:	2001d83c 	.word	0x2001d83c
   445f8:	0005d790 	.word	0x0005d790
   445fc:	0005d7a2 	.word	0x0005d7a2
   44600:	0005d7a9 	.word	0x0005d7a9
   44604:	0005d7b0 	.word	0x0005d7b0
   44608:	2001daab 	.word	0x2001daab
   4460c:	2001da9f 	.word	0x2001da9f
   44610:	2001da93 	.word	0x2001da93
   44614:	2001da87 	.word	0x2001da87
   44618:	2001da62 	.word	0x2001da62
   4461c:	2001da56 	.word	0x2001da56
		else if((strstr(t3ID, "empty") != NULL) && (!(strstr(t1COPS, newCOPS) != NULL)) && (!(strstr(t2COPS, newCOPS) != NULL)))
   44620:	4956      	ldr	r1, [pc, #344]	; (4477c <main+0x70c>)
   44622:	4857      	ldr	r0, [pc, #348]	; (44780 <main+0x710>)
   44624:	f016 fe9a 	bl	5b35c <strstr>
   44628:	2800      	cmp	r0, #0
   4462a:	d04f      	beq.n	446cc <main+0x65c>
   4462c:	4855      	ldr	r0, [pc, #340]	; (44784 <main+0x714>)
   4462e:	a917      	add	r1, sp, #92	; 0x5c
   44630:	f016 fe94 	bl	5b35c <strstr>
   44634:	2800      	cmp	r0, #0
   44636:	d149      	bne.n	446cc <main+0x65c>
   44638:	4853      	ldr	r0, [pc, #332]	; (44788 <main+0x718>)
   4463a:	a917      	add	r1, sp, #92	; 0x5c
   4463c:	f016 fe8e 	bl	5b35c <strstr>
   44640:	4605      	mov	r5, r0
   44642:	2800      	cmp	r0, #0
   44644:	d142      	bne.n	446cc <main+0x65c>
			sprintf(t3ID,"%d",cell_data.current_cell.id);
   44646:	68a3      	ldr	r3, [r4, #8]
   44648:	4601      	mov	r1, r0
   4464a:	220f      	movs	r2, #15
   4464c:	9300      	str	r3, [sp, #0]
   4464e:	484c      	ldr	r0, [pc, #304]	; (44780 <main+0x710>)
   44650:	4b4e      	ldr	r3, [pc, #312]	; (4478c <main+0x71c>)
   44652:	f016 fdaa 	bl	5b1aa <__sprintf_chk>
			sprintf(t3MCC,"%03d",cell_data.current_cell.mcc);
   44656:	6823      	ldr	r3, [r4, #0]
   44658:	220c      	movs	r2, #12
   4465a:	4629      	mov	r1, r5
   4465c:	9300      	str	r3, [sp, #0]
   4465e:	484c      	ldr	r0, [pc, #304]	; (44790 <main+0x720>)
   44660:	4b4c      	ldr	r3, [pc, #304]	; (44794 <main+0x724>)
   44662:	f016 fda2 	bl	5b1aa <__sprintf_chk>
			sprintf(t3MNC,"%03d",cell_data.current_cell.mnc);
   44666:	6863      	ldr	r3, [r4, #4]
   44668:	220c      	movs	r2, #12
   4466a:	4629      	mov	r1, r5
   4466c:	9300      	str	r3, [sp, #0]
   4466e:	484a      	ldr	r0, [pc, #296]	; (44798 <main+0x728>)
   44670:	4b48      	ldr	r3, [pc, #288]	; (44794 <main+0x724>)
   44672:	f016 fd9a 	bl	5b1aa <__sprintf_chk>
			sprintf(t3TAC,"%d",cell_data.current_cell.tac);
   44676:	68e3      	ldr	r3, [r4, #12]
   44678:	220c      	movs	r2, #12
   4467a:	4629      	mov	r1, r5
   4467c:	9300      	str	r3, [sp, #0]
   4467e:	4847      	ldr	r0, [pc, #284]	; (4479c <main+0x72c>)
   44680:	4b42      	ldr	r3, [pc, #264]	; (4478c <main+0x71c>)
   44682:	f016 fd92 	bl	5b1aa <__sprintf_chk>
			sprintf(t3TA,"%d",cell_data.current_cell.timing_advance);
   44686:	8aa3      	ldrh	r3, [r4, #20]
   44688:	220c      	movs	r2, #12
   4468a:	4629      	mov	r1, r5
   4468c:	9300      	str	r3, [sp, #0]
   4468e:	4844      	ldr	r0, [pc, #272]	; (447a0 <main+0x730>)
   44690:	4b3e      	ldr	r3, [pc, #248]	; (4478c <main+0x71c>)
   44692:	f016 fd8a 	bl	5b1aa <__sprintf_chk>
			sprintf(t3RSRP,"%d",cell_data.current_cell.rsrp);
   44696:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   4469a:	220c      	movs	r2, #12
   4469c:	4629      	mov	r1, r5
   4469e:	9300      	str	r3, [sp, #0]
   446a0:	4840      	ldr	r0, [pc, #256]	; (447a4 <main+0x734>)
   446a2:	4b3a      	ldr	r3, [pc, #232]	; (4478c <main+0x71c>)
   446a4:	f016 fd81 	bl	5b1aa <__sprintf_chk>
			sprintf(t3RSRQ,"%d",cell_data.current_cell.rsrq);
   446a8:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
   446ac:	220c      	movs	r2, #12
   446ae:	4629      	mov	r1, r5
   446b0:	9300      	str	r3, [sp, #0]
   446b2:	483d      	ldr	r0, [pc, #244]	; (447a8 <main+0x738>)
   446b4:	4b35      	ldr	r3, [pc, #212]	; (4478c <main+0x71c>)
   446b6:	f016 fd78 	bl	5b1aa <__sprintf_chk>
			strcpy(t3COPS,t3MCC);
   446ba:	2219      	movs	r2, #25
   446bc:	4934      	ldr	r1, [pc, #208]	; (44790 <main+0x720>)
   446be:	483b      	ldr	r0, [pc, #236]	; (447ac <main+0x73c>)
   446c0:	f016 fdff 	bl	5b2c2 <__strcpy_chk>
			strcat(t3COPS,t3MNC);
   446c4:	2219      	movs	r2, #25
   446c6:	4934      	ldr	r1, [pc, #208]	; (44798 <main+0x728>)
   446c8:	4838      	ldr	r0, [pc, #224]	; (447ac <main+0x73c>)
   446ca:	e6c0      	b.n	4444e <main+0x3de>
			printk("Information not recorded!\n");
   446cc:	4838      	ldr	r0, [pc, #224]	; (447b0 <main+0x740>)
		printk("Invalid timing advance!\n");
   446ce:	f011 f867 	bl	557a0 <printk>
		Tower_Read_Fail_Change();
   446d2:	f7fe fb1b 	bl	42d0c <Tower_Read_Fail_Change>
   446d6:	e6bc      	b.n	44452 <main+0x3e2>
		printk("Invalid timing advance!\n");
   446d8:	4836      	ldr	r0, [pc, #216]	; (447b4 <main+0x744>)
   446da:	e7f8      	b.n	446ce <main+0x65e>
			changeCOPS(att_mobility_cops, strlen(att_mobility_cops));
   446dc:	4836      	ldr	r0, [pc, #216]	; (447b8 <main+0x748>)
   446de:	f7fc fb89 	bl	40df4 <strlen>
   446e2:	4601      	mov	r1, r0
   446e4:	4834      	ldr	r0, [pc, #208]	; (447b8 <main+0x748>)
   446e6:	f7ff f953 	bl	43990 <changeCOPS>
   446ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   446ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   446f2:	4630      	mov	r0, r6
   446f4:	f00e f81e 	bl	52734 <z_impl_k_sem_take>
			printk("Data is being gathered!\n");
   446f8:	4830      	ldr	r0, [pc, #192]	; (447bc <main+0x74c>)
   446fa:	f011 f851 	bl	557a0 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   446fe:	e8d7 3faf 	lda	r3, [r7]
			if (!atomic_get(&connected)) 
   44702:	b943      	cbnz	r3, 44716 <main+0x6a6>
				LOG_INF("Ignoring button press, not connected to network");
   44704:	4a2e      	ldr	r2, [pc, #184]	; (447c0 <main+0x750>)
   44706:	4618      	mov	r0, r3
   44708:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4470c:	492d      	ldr	r1, [pc, #180]	; (447c4 <main+0x754>)
   4470e:	2203      	movs	r2, #3
   44710:	9300      	str	r3, [sp, #0]
   44712:	f010 ff8c 	bl	5562e <z_log_msg_runtime_create.constprop.0>
			start_cell_measurements();
   44716:	f7fe f9ed 	bl	42af4 <start_cell_measurements>
			getData = 1;
   4471a:	2501      	movs	r5, #1
   4471c:	e574      	b.n	44208 <main+0x198>
	else if(strstr(t1COPS, att_mobility_cops) != NULL)
   4471e:	4819      	ldr	r0, [pc, #100]	; (44784 <main+0x714>)
   44720:	f016 fe1c 	bl	5b35c <strstr>
   44724:	b160      	cbz	r0, 44740 <main+0x6d0>
		if(strstr(t2COPS, t_mobile_cops) != NULL)
   44726:	4928      	ldr	r1, [pc, #160]	; (447c8 <main+0x758>)
   44728:	4817      	ldr	r0, [pc, #92]	; (44788 <main+0x718>)
   4472a:	f016 fe17 	bl	5b35c <strstr>
   4472e:	2800      	cmp	r0, #0
   44730:	f47f aec9 	bne.w	444c6 <main+0x456>
			changeCOPS(t_mobile_cops, strlen(t_mobile_cops));
   44734:	4824      	ldr	r0, [pc, #144]	; (447c8 <main+0x758>)
   44736:	f7fc fb5d 	bl	40df4 <strlen>
   4473a:	4601      	mov	r1, r0
   4473c:	4822      	ldr	r0, [pc, #136]	; (447c8 <main+0x758>)
   4473e:	e7d2      	b.n	446e6 <main+0x676>
	else if(strstr(t1COPS, verizon) != NULL)
   44740:	4922      	ldr	r1, [pc, #136]	; (447cc <main+0x75c>)
   44742:	4810      	ldr	r0, [pc, #64]	; (44784 <main+0x714>)
   44744:	f016 fe0a 	bl	5b35c <strstr>
   44748:	b188      	cbz	r0, 4476e <main+0x6fe>
		if(strstr(t2COPS, t_mobile_cops) != NULL)
   4474a:	491f      	ldr	r1, [pc, #124]	; (447c8 <main+0x758>)
   4474c:	480e      	ldr	r0, [pc, #56]	; (44788 <main+0x718>)
   4474e:	f016 fe05 	bl	5b35c <strstr>
   44752:	b160      	cbz	r0, 4476e <main+0x6fe>
			changeCOPS(att_mobility_cops, strlen(att_mobility_cops));
   44754:	4818      	ldr	r0, [pc, #96]	; (447b8 <main+0x748>)
   44756:	f7fc fb4d 	bl	40df4 <strlen>
   4475a:	4601      	mov	r1, r0
   4475c:	4816      	ldr	r0, [pc, #88]	; (447b8 <main+0x748>)
		changeCOPS(t_mobile_cops, strlen(t_mobile_cops));
   4475e:	f7ff f917 	bl	43990 <changeCOPS>
   44762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4476a:	4819      	ldr	r0, [pc, #100]	; (447d0 <main+0x760>)
   4476c:	e7c2      	b.n	446f4 <main+0x684>
   4476e:	4816      	ldr	r0, [pc, #88]	; (447c8 <main+0x758>)
   44770:	f7fc fb40 	bl	40df4 <strlen>
   44774:	4601      	mov	r1, r0
   44776:	4814      	ldr	r0, [pc, #80]	; (447c8 <main+0x758>)
   44778:	e7f1      	b.n	4475e <main+0x6ee>
   4477a:	bf00      	nop
   4477c:	0005d19b 	.word	0x0005d19b
   44780:	2001d885 	.word	0x2001d885
   44784:	2001dca0 	.word	0x2001dca0
   44788:	2001da6e 	.word	0x2001da6e
   4478c:	0005fdff 	.word	0x0005fdff
   44790:	2001d879 	.word	0x2001d879
   44794:	0005d719 	.word	0x0005d719
   44798:	2001d86d 	.word	0x2001d86d
   4479c:	2001d861 	.word	0x2001d861
   447a0:	2001d855 	.word	0x2001d855
   447a4:	2001d830 	.word	0x2001d830
   447a8:	2001d824 	.word	0x2001d824
   447ac:	2001d83c 	.word	0x2001d83c
   447b0:	0005d71e 	.word	0x0005d71e
   447b4:	0005d739 	.word	0x0005d739
   447b8:	0005d7a9 	.word	0x0005d7a9
   447bc:	0005d7b7 	.word	0x0005d7b7
   447c0:	0005d3d3 	.word	0x0005d3d3
   447c4:	0005bf9c 	.word	0x0005bf9c
   447c8:	0005d7a2 	.word	0x0005d7a2
   447cc:	0005d7b0 	.word	0x0005d7b0
   447d0:	2001abe8 	.word	0x2001abe8

000447d4 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   447d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   447d8:	b091      	sub	sp, #68	; 0x44
   447da:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   447dc:	f002 0304 	and.w	r3, r2, #4
   447e0:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   447e2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   447e6:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   447e8:	0784      	lsls	r4, r0, #30
{
   447ea:	4605      	mov	r5, r0
   447ec:	460e      	mov	r6, r1
   447ee:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   447f2:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   447f4:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   447f6:	f040 81bd 	bne.w	44b74 <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   447fa:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   447fc:	b130      	cbz	r0, 4480c <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   447fe:	2907      	cmp	r1, #7
   44800:	d809      	bhi.n	44816 <cbvprintf_package+0x42>
		return -ENOSPC;
   44802:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   44806:	b011      	add	sp, #68	; 0x44
   44808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   4480c:	f001 0607 	and.w	r6, r1, #7
   44810:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   44812:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   44816:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   44818:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
   4481c:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
   44820:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   44822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   44826:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   44828:	9301      	str	r3, [sp, #4]
	bool parsing = false;
   4482a:	46cb      	mov	fp, r9
	size = sizeof(char *);
   4482c:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   4482e:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
   44832:	b10d      	cbz	r5, 44838 <cbvprintf_package+0x64>
				*(const char **)buf = s;
   44834:	9800      	ldr	r0, [sp, #0]
   44836:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   44838:	9805      	ldr	r0, [sp, #20]
   4483a:	2800      	cmp	r0, #0
   4483c:	f300 80eb 	bgt.w	44a16 <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   44840:	4899      	ldr	r0, [pc, #612]	; (44aa8 <cbvprintf_package+0x2d4>)
   44842:	9a00      	ldr	r2, [sp, #0]
   44844:	4282      	cmp	r2, r0
   44846:	d303      	bcc.n	44850 <cbvprintf_package+0x7c>
   44848:	4898      	ldr	r0, [pc, #608]	; (44aac <cbvprintf_package+0x2d8>)
   4484a:	4282      	cmp	r2, r0
   4484c:	f0c0 80e3 	bcc.w	44a16 <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   44850:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   44852:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   44856:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   44858:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   4485c:	f100 8106 	bmi.w	44a6c <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   44860:	2f0f      	cmp	r7, #15
   44862:	f200 80b4 	bhi.w	449ce <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   44866:	2d00      	cmp	r5, #0
   44868:	f000 8108 	beq.w	44a7c <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
   4486c:	f107 0240 	add.w	r2, r7, #64	; 0x40
   44870:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   44874:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   44876:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   4487a:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   4487e:	9804      	ldr	r0, [sp, #16]
   44880:	3001      	adds	r0, #1
   44882:	9004      	str	r0, [sp, #16]
   44884:	e0ea      	b.n	44a5c <cbvprintf_package+0x288>
			switch (*fmt) {
   44886:	287a      	cmp	r0, #122	; 0x7a
   44888:	d860      	bhi.n	4494c <cbvprintf_package+0x178>
   4488a:	284b      	cmp	r0, #75	; 0x4b
   4488c:	d80e      	bhi.n	448ac <cbvprintf_package+0xd8>
   4488e:	2847      	cmp	r0, #71	; 0x47
   44890:	d85c      	bhi.n	4494c <cbvprintf_package+0x178>
   44892:	2829      	cmp	r0, #41	; 0x29
   44894:	d82f      	bhi.n	448f6 <cbvprintf_package+0x122>
   44896:	2825      	cmp	r0, #37	; 0x25
   44898:	d055      	beq.n	44946 <cbvprintf_package+0x172>
   4489a:	d857      	bhi.n	4494c <cbvprintf_package+0x178>
   4489c:	2820      	cmp	r0, #32
   4489e:	d07d      	beq.n	4499c <cbvprintf_package+0x1c8>
   448a0:	3823      	subs	r0, #35	; 0x23
   448a2:	f1d0 0b00 	rsbs	fp, r0, #0
   448a6:	eb4b 0b00 	adc.w	fp, fp, r0
   448aa:	e077      	b.n	4499c <cbvprintf_package+0x1c8>
   448ac:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   448b0:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   448b4:	d84a      	bhi.n	4494c <cbvprintf_package+0x178>
   448b6:	e8df f00c 	tbb	[pc, ip]
   448ba:	4971      	.short	0x4971
   448bc:	49494949 	.word	0x49494949
   448c0:	49494949 	.word	0x49494949
   448c4:	494c4949 	.word	0x494c4949
   448c8:	49494949 	.word	0x49494949
   448cc:	5a494949 	.word	0x5a494949
   448d0:	5a4c4c49 	.word	0x5a4c4c49
   448d4:	4c715a5a 	.word	0x4c715a5a
   448d8:	4971496e 	.word	0x4971496e
   448dc:	49184c18 	.word	0x49184c18
   448e0:	4c808349 	.word	0x4c808349
   448e4:	494c4949 	.word	0x494c4949
   448e8:	80          	.byte	0x80
   448e9:	00          	.byte	0x00
   448ea:	2000      	movs	r0, #0
   448ec:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   448f0:	f04f 0a04 	mov.w	sl, #4
   448f4:	e039      	b.n	4496a <cbvprintf_package+0x196>
   448f6:	2201      	movs	r2, #1
			switch (*fmt) {
   448f8:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   448fc:	fa5f fc8c 	uxtb.w	ip, ip
   44900:	fa02 fc0c 	lsl.w	ip, r2, ip
   44904:	ea1c 0f0e 	tst.w	ip, lr
   44908:	d148      	bne.n	4499c <cbvprintf_package+0x1c8>
   4490a:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   4490e:	d12e      	bne.n	4496e <cbvprintf_package+0x19a>
   44910:	ea1c 0b02 	ands.w	fp, ip, r2
   44914:	d042      	beq.n	4499c <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
   44916:	3c01      	subs	r4, #1
   44918:	4454      	add	r4, sl
   4491a:	f1ca 0c00 	rsb	ip, sl, #0
   4491e:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   44922:	2d00      	cmp	r5, #0
   44924:	d061      	beq.n	449ea <cbvprintf_package+0x216>
   44926:	eba3 0c05 	sub.w	ip, r3, r5
   4492a:	44a4      	add	ip, r4
   4492c:	4566      	cmp	r6, ip
   4492e:	f4ff af68 	bcc.w	44802 <cbvprintf_package+0x2e>
		if (is_str_arg) {
   44932:	2800      	cmp	r0, #0
   44934:	d168      	bne.n	44a08 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   44936:	2b04      	cmp	r3, #4
   44938:	d147      	bne.n	449ca <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
   4493a:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   4493e:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   44940:	2304      	movs	r3, #4
   44942:	3404      	adds	r4, #4
   44944:	e02a      	b.n	4499c <cbvprintf_package+0x1c8>
				arg_idx--;
   44946:	9a01      	ldr	r2, [sp, #4]
   44948:	3a01      	subs	r2, #1
   4494a:	9201      	str	r2, [sp, #4]
				parsing = false;
   4494c:	f04f 0b00 	mov.w	fp, #0
				continue;
   44950:	e024      	b.n	4499c <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
   44952:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   44956:	286c      	cmp	r0, #108	; 0x6c
   44958:	d134      	bne.n	449c4 <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
   4495a:	2000      	movs	r0, #0
   4495c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
   44960:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   44962:	2b6c      	cmp	r3, #108	; 0x6c
   44964:	d1c4      	bne.n	448f0 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
   44966:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   4496a:	4653      	mov	r3, sl
   4496c:	e7d3      	b.n	44916 <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
   4496e:	f108 0807 	add.w	r8, r8, #7
   44972:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   44976:	3407      	adds	r4, #7
   44978:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
   4497c:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
   44980:	b135      	cbz	r5, 44990 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
   44982:	9806      	ldr	r0, [sp, #24]
   44984:	4420      	add	r0, r4
   44986:	42b0      	cmp	r0, r6
   44988:	f63f af3b 	bhi.w	44802 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
   4498c:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
   44990:	f04f 0b00 	mov.w	fp, #0
				buf += size;
   44994:	3408      	adds	r4, #8
			switch (*fmt) {
   44996:	f04f 0a08 	mov.w	sl, #8
   4499a:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   4499c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   449a0:	2800      	cmp	r0, #0
   449a2:	d078      	beq.n	44a96 <cbvprintf_package+0x2c2>
			if (!parsing) {
   449a4:	f1bb 0f00 	cmp.w	fp, #0
   449a8:	f47f af6d 	bne.w	44886 <cbvprintf_package+0xb2>
				if (*fmt == '%') {
   449ac:	2825      	cmp	r0, #37	; 0x25
   449ae:	d1f5      	bne.n	4499c <cbvprintf_package+0x1c8>
					parsing = true;
   449b0:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
   449b4:	9b01      	ldr	r3, [sp, #4]
   449b6:	3301      	adds	r3, #1
   449b8:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
   449ba:	f04f 0a04 	mov.w	sl, #4
   449be:	e7ec      	b.n	4499a <cbvprintf_package+0x1c6>
			switch (*fmt) {
   449c0:	4658      	mov	r0, fp
   449c2:	e793      	b.n	448ec <cbvprintf_package+0x118>
   449c4:	2000      	movs	r0, #0
				parsing = false;
   449c6:	4683      	mov	fp, r0
   449c8:	e7a5      	b.n	44916 <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
   449ca:	2b08      	cmp	r3, #8
   449cc:	d002      	beq.n	449d4 <cbvprintf_package+0x200>
					return -EINVAL;
   449ce:	f06f 0015 	mvn.w	r0, #21
   449d2:	e718      	b.n	44806 <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
   449d4:	f108 0807 	add.w	r8, r8, #7
   449d8:	f028 0807 	bic.w	r8, r8, #7
   449dc:	ecb8 7b02 	vldmia	r8!, {d7}
					*(long long *)buf = v;
   449e0:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
   449e4:	2308      	movs	r3, #8
   449e6:	3408      	adds	r4, #8
   449e8:	e7d8      	b.n	4499c <cbvprintf_package+0x1c8>
		if (is_str_arg) {
   449ea:	b968      	cbnz	r0, 44a08 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
   449ec:	2b04      	cmp	r3, #4
   449ee:	d102      	bne.n	449f6 <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
   449f0:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   449f4:	e7a4      	b.n	44940 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
   449f6:	2b08      	cmp	r3, #8
   449f8:	d1e9      	bne.n	449ce <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
   449fa:	f108 0807 	add.w	r8, r8, #7
   449fe:	f028 0807 	bic.w	r8, r8, #7
   44a02:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   44a06:	e7ed      	b.n	449e4 <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   44a08:	9805      	ldr	r0, [sp, #20]
   44a0a:	3801      	subs	r0, #1
   44a0c:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   44a0e:	f858 0b04 	ldr.w	r0, [r8], #4
   44a12:	9000      	str	r0, [sp, #0]
   44a14:	e70d      	b.n	44832 <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
   44a16:	9a03      	ldr	r2, [sp, #12]
   44a18:	0790      	lsls	r0, r2, #30
   44a1a:	d520      	bpl.n	44a5e <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   44a1c:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   44a20:	eba4 0e05 	sub.w	lr, r4, r5
   44a24:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   44a28:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   44a2c:	d2cf      	bcs.n	449ce <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   44a2e:	2f0f      	cmp	r7, #15
   44a30:	d8cd      	bhi.n	449ce <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
   44a32:	b1f5      	cbz	r5, 44a72 <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
   44a34:	f107 0240 	add.w	r2, r7, #64	; 0x40
   44a38:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   44a3c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   44a3e:	b2c0      	uxtb	r0, r0
   44a40:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   44a44:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   44a48:	f1bc 0f00 	cmp.w	ip, #0
   44a4c:	f43f af17 	beq.w	4487e <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   44a50:	f060 007f 	orn	r0, r0, #127	; 0x7f
   44a54:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   44a58:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   44a5c:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   44a5e:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
   44a62:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
   44a66:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   44a68:	9206      	str	r2, [sp, #24]
   44a6a:	e797      	b.n	4499c <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   44a6c:	f04f 0c00 	mov.w	ip, #0
   44a70:	e7da      	b.n	44a28 <cbvprintf_package+0x254>
				} else if (is_ro) {
   44a72:	f1bc 0f00 	cmp.w	ip, #0
   44a76:	d001      	beq.n	44a7c <cbvprintf_package+0x2a8>
					len += 1;
   44a78:	3601      	adds	r6, #1
   44a7a:	e7ef      	b.n	44a5c <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
   44a7c:	9a02      	ldr	r2, [sp, #8]
					len += 2;
   44a7e:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   44a80:	2a00      	cmp	r2, #0
   44a82:	d1eb      	bne.n	44a5c <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
   44a84:	9800      	ldr	r0, [sp, #0]
   44a86:	e9cd 3106 	strd	r3, r1, [sp, #24]
   44a8a:	f7fc f9b3 	bl	40df4 <strlen>
   44a8e:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   44a92:	4406      	add	r6, r0
   44a94:	e7e2      	b.n	44a5c <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
   44a96:	1b63      	subs	r3, r4, r5
   44a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   44a9c:	d297      	bcs.n	449ce <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
   44a9e:	b93d      	cbnz	r5, 44ab0 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   44aa0:	f1a6 0408 	sub.w	r4, r6, #8
   44aa4:	18e0      	adds	r0, r4, r3
   44aa6:	e6ae      	b.n	44806 <cbvprintf_package+0x32>
   44aa8:	0005bb28 	.word	0x0005bb28
   44aac:	00060c34 	.word	0x00060c34
	if (rws_pos_en) {
   44ab0:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   44ab2:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
   44ab4:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   44ab6:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   44ab8:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   44abc:	b1c2      	cbz	r2, 44af0 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   44abe:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   44ac0:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   44ac4:	f1b9 0f00 	cmp.w	r9, #0
   44ac8:	d005      	beq.n	44ad6 <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
   44aca:	2200      	movs	r2, #0
   44acc:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
   44ace:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   44ad2:	4297      	cmp	r7, r2
   44ad4:	d10e      	bne.n	44af4 <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
   44ad6:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   44ada:	f1c5 0301 	rsb	r3, r5, #1
   44ade:	f10d 0820 	add.w	r8, sp, #32
   44ae2:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   44ae4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   44ae8:	4557      	cmp	r7, sl
   44aea:	d112      	bne.n	44b12 <cbvprintf_package+0x33e>
	return BUF_OFFSET;
   44aec:	1b60      	subs	r0, r4, r5
   44aee:	e68a      	b.n	44806 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   44af0:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   44af2:	e7e5      	b.n	44ac0 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   44af4:	f810 3b01 	ldrb.w	r3, [r0], #1
   44af8:	0619      	lsls	r1, r3, #24
   44afa:	d508      	bpl.n	44b0e <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
   44afc:	eb04 0e0c 	add.w	lr, r4, ip
   44b00:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   44b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   44b06:	f4ff ae7c 	bcc.w	44802 <cbvprintf_package+0x2e>
			*buf++ = pos;
   44b0a:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   44b0e:	3201      	adds	r2, #1
   44b10:	e7df      	b.n	44ad2 <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   44b12:	f1b9 0f00 	cmp.w	r9, #0
   44b16:	d003      	beq.n	44b20 <cbvprintf_package+0x34c>
   44b18:	f998 2000 	ldrsb.w	r2, [r8]
   44b1c:	2a00      	cmp	r2, #0
   44b1e:	db17      	blt.n	44b50 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
   44b20:	9b02      	ldr	r3, [sp, #8]
   44b22:	b1d3      	cbz	r3, 44b5a <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
   44b24:	f81a 200b 	ldrb.w	r2, [sl, fp]
   44b28:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   44b2c:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   44b2e:	9b01      	ldr	r3, [sp, #4]
   44b30:	1898      	adds	r0, r3, r2
   44b32:	4420      	add	r0, r4
   44b34:	4286      	cmp	r6, r0
   44b36:	f4ff ae64 	bcc.w	44802 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
   44b3a:	f898 0000 	ldrb.w	r0, [r8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   44b3e:	9900      	ldr	r1, [sp, #0]
   44b40:	f804 0b01 	strb.w	r0, [r4], #1
   44b44:	4620      	mov	r0, r4
   44b46:	9203      	str	r2, [sp, #12]
   44b48:	f016 f9cc 	bl	5aee4 <memcpy>
		buf += size;
   44b4c:	9a03      	ldr	r2, [sp, #12]
   44b4e:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   44b50:	f10a 0a01 	add.w	sl, sl, #1
   44b54:	f108 0801 	add.w	r8, r8, #1
   44b58:	e7c6      	b.n	44ae8 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   44b5a:	f898 2000 	ldrb.w	r2, [r8]
   44b5e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   44b62:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   44b64:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
   44b66:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   44b68:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   44b6c:	f7fc f942 	bl	40df4 <strlen>
   44b70:	1c42      	adds	r2, r0, #1
   44b72:	e7dc      	b.n	44b2e <cbvprintf_package+0x35a>
		return -EFAULT;
   44b74:	f06f 000d 	mvn.w	r0, #13
   44b78:	e645      	b.n	44806 <cbvprintf_package+0x32>
   44b7a:	bf00      	nop

00044b7c <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   44b7c:	2803      	cmp	r0, #3
{
   44b7e:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   44b80:	d906      	bls.n	44b90 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   44b82:	f011 fafc 	bl	5617e <__errno>
   44b86:	2309      	movs	r3, #9
   44b88:	6003      	str	r3, [r0, #0]
		return -1;
   44b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   44b8e:	bd08      	pop	{r3, pc}
   44b90:	4b04      	ldr	r3, [pc, #16]	; (44ba4 <_check_fd+0x28>)
   44b92:	eb03 1340 	add.w	r3, r3, r0, lsl #5
   44b96:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&fdtable[fd].refcount)) {
   44b9a:	2b00      	cmp	r3, #0
   44b9c:	d0f1      	beq.n	44b82 <_check_fd+0x6>
	return 0;
   44b9e:	2000      	movs	r0, #0
   44ba0:	e7f5      	b.n	44b8e <_check_fd+0x12>
   44ba2:	bf00      	nop
   44ba4:	2001b4d4 	.word	0x2001b4d4

00044ba8 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   44ba8:	b570      	push	{r4, r5, r6, lr}
   44baa:	4604      	mov	r4, r0
   44bac:	460d      	mov	r5, r1
   44bae:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   44bb0:	f7ff ffe4 	bl	44b7c <_check_fd>
   44bb4:	2800      	cmp	r0, #0
   44bb6:	db09      	blt.n	44bcc <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   44bb8:	4b06      	ldr	r3, [pc, #24]	; (44bd4 <z_get_fd_obj+0x2c>)
   44bba:	0160      	lsls	r0, r4, #5
   44bbc:	b145      	cbz	r5, 44bd0 <z_get_fd_obj+0x28>
   44bbe:	181a      	adds	r2, r3, r0
   44bc0:	6852      	ldr	r2, [r2, #4]
   44bc2:	42aa      	cmp	r2, r5
   44bc4:	d004      	beq.n	44bd0 <z_get_fd_obj+0x28>
		errno = err;
   44bc6:	f011 fada 	bl	5617e <__errno>
   44bca:	6006      	str	r6, [r0, #0]
		return NULL;
   44bcc:	2000      	movs	r0, #0
		return NULL;
	}

	return entry->obj;
}
   44bce:	bd70      	pop	{r4, r5, r6, pc}
	return entry->obj;
   44bd0:	5818      	ldr	r0, [r3, r0]
   44bd2:	e7fc      	b.n	44bce <z_get_fd_obj+0x26>
   44bd4:	2001b4cc 	.word	0x2001b4cc

00044bd8 <z_reserve_fd>:

	return entry->obj;
}

int z_reserve_fd(void)
{
   44bd8:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   44bda:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   44bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44be4:	4814      	ldr	r0, [pc, #80]	; (44c38 <z_reserve_fd+0x60>)
   44be6:	f00d fc95 	bl	52514 <z_impl_k_mutex_lock>
   44bea:	4b14      	ldr	r3, [pc, #80]	; (44c3c <z_reserve_fd+0x64>)
   44bec:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   44bf0:	b17a      	cbz	r2, 44c12 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   44bf2:	3401      	adds	r4, #1
   44bf4:	2c04      	cmp	r4, #4
   44bf6:	f103 0320 	add.w	r3, r3, #32
   44bfa:	d1f7      	bne.n	44bec <z_reserve_fd+0x14>
	errno = ENFILE;
   44bfc:	f011 fabf 	bl	5617e <__errno>
   44c00:	2317      	movs	r3, #23
	return -1;
   44c02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   44c06:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   44c08:	480b      	ldr	r0, [pc, #44]	; (44c38 <z_reserve_fd+0x60>)
   44c0a:	f00d fcfd 	bl	52608 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   44c0e:	4620      	mov	r0, r4
   44c10:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   44c12:	e8d3 0fef 	ldaex	r0, [r3]
   44c16:	3001      	adds	r0, #1
   44c18:	e8c3 0fe1 	stlex	r1, r0, [r3]
   44c1c:	2900      	cmp	r1, #0
   44c1e:	d1f8      	bne.n	44c12 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   44c20:	4807      	ldr	r0, [pc, #28]	; (44c40 <z_reserve_fd+0x68>)
   44c22:	0163      	lsls	r3, r4, #5
   44c24:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   44c28:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   44c2a:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   44c2c:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   44c2e:	4418      	add	r0, r3
   44c30:	f015 fe3e 	bl	5a8b0 <z_impl_k_mutex_init>
   44c34:	e7e8      	b.n	44c08 <z_reserve_fd+0x30>
   44c36:	bf00      	nop
   44c38:	2001ab70 	.word	0x2001ab70
   44c3c:	2001b4d4 	.word	0x2001b4d4
   44c40:	2001b4cc 	.word	0x2001b4cc

00044c44 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   44c44:	b410      	push	{r4}
   44c46:	4604      	mov	r4, r0
   44c48:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   44c4a:	4b0a      	ldr	r3, [pc, #40]	; (44c74 <z_finalize_fd+0x30>)
   44c4c:	0162      	lsls	r2, r4, #5
   44c4e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   44c52:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   44c54:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   44c56:	b148      	cbz	r0, 44c6c <z_finalize_fd+0x28>
   44c58:	68c4      	ldr	r4, [r0, #12]
   44c5a:	b13c      	cbz	r4, 44c6c <z_finalize_fd+0x28>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   44c5c:	320c      	adds	r2, #12
   44c5e:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   44c60:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   44c64:	f240 1205 	movw	r2, #261	; 0x105
   44c68:	f010 bd76 	b.w	55758 <z_fdtable_call_ioctl.constprop.0>
}
   44c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
   44c70:	4770      	bx	lr
   44c72:	bf00      	nop
   44c74:	2001b4cc 	.word	0x2001b4cc

00044c78 <z_free_fd>:

void z_free_fd(int fd)
{
   44c78:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   44c7a:	490d      	ldr	r1, [pc, #52]	; (44cb0 <z_free_fd+0x38>)
   44c7c:	0140      	lsls	r0, r0, #5
   44c7e:	f100 0308 	add.w	r3, r0, #8
   44c82:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   44c84:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   44c88:	b182      	cbz	r2, 44cac <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   44c8a:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   44c8c:	e8d3 5fef 	ldaex	r5, [r3]
   44c90:	4295      	cmp	r5, r2
   44c92:	d104      	bne.n	44c9e <z_free_fd+0x26>
   44c94:	e8c3 4fec 	stlex	ip, r4, [r3]
   44c98:	f1bc 0f00 	cmp.w	ip, #0
   44c9c:	d1f6      	bne.n	44c8c <z_free_fd+0x14>
   44c9e:	d1f1      	bne.n	44c84 <z_free_fd+0xc>
	if (old_rc != 1) {
   44ca0:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   44ca2:	bf01      	itttt	eq
   44ca4:	2300      	moveq	r3, #0
   44ca6:	180a      	addeq	r2, r1, r0
   44ca8:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   44caa:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   44cac:	bd30      	pop	{r4, r5, pc}
   44cae:	bf00      	nop
   44cb0:	2001b4cc 	.word	0x2001b4cc

00044cb4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   44cb4:	4b01      	ldr	r3, [pc, #4]	; (44cbc <char_out+0x8>)
   44cb6:	681b      	ldr	r3, [r3, #0]
   44cb8:	4718      	bx	r3
   44cba:	bf00      	nop
   44cbc:	2001a564 	.word	0x2001a564

00044cc0 <__printk_hook_install>:
	_char_out = fn;
   44cc0:	4b01      	ldr	r3, [pc, #4]	; (44cc8 <__printk_hook_install+0x8>)
   44cc2:	6018      	str	r0, [r3, #0]
}
   44cc4:	4770      	bx	lr
   44cc6:	bf00      	nop
   44cc8:	2001a564 	.word	0x2001a564

00044ccc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   44ccc:	b507      	push	{r0, r1, r2, lr}
   44cce:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   44cd0:	2100      	movs	r1, #0
   44cd2:	4602      	mov	r2, r0
   44cd4:	9100      	str	r1, [sp, #0]
   44cd6:	4803      	ldr	r0, [pc, #12]	; (44ce4 <vprintk+0x18>)
   44cd8:	f7fc f896 	bl	40e08 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   44cdc:	b003      	add	sp, #12
   44cde:	f85d fb04 	ldr.w	pc, [sp], #4
   44ce2:	bf00      	nop
   44ce4:	00044cb5 	.word	0x00044cb5

00044ce8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   44ce8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   44cea:	2500      	movs	r5, #0
{
   44cec:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   44cee:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   44cf2:	4604      	mov	r4, r0
   44cf4:	9500      	str	r5, [sp, #0]
   44cf6:	a903      	add	r1, sp, #12
   44cf8:	4805      	ldr	r0, [pc, #20]	; (44d10 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   44cfa:	9505      	str	r5, [sp, #20]
   44cfc:	f7fc f884 	bl	40e08 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   44d00:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   44d04:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   44d06:	bfb8      	it	lt
   44d08:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   44d0a:	b007      	add	sp, #28
   44d0c:	bd30      	pop	{r4, r5, pc}
   44d0e:	bf00      	nop
   44d10:	0005577b 	.word	0x0005577b

00044d14 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   44d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   44d18:	8b05      	ldrh	r5, [r0, #24]
{
   44d1a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   44d1c:	0728      	lsls	r0, r5, #28
{
   44d1e:	4690      	mov	r8, r2
	if (processing) {
   44d20:	d411      	bmi.n	44d46 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   44d22:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   44d24:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   44d28:	f040 80cd 	bne.w	44ec6 <process_event+0x1b2>
			evt = process_recheck(mgr);
   44d2c:	4620      	mov	r0, r4
   44d2e:	f010 ff20 	bl	55b72 <process_recheck>
		}

		if (evt == EVT_NOP) {
   44d32:	b178      	cbz	r0, 44d54 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   44d34:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44d36:	8b21      	ldrh	r1, [r4, #24]
   44d38:	2804      	cmp	r0, #4
   44d3a:	d811      	bhi.n	44d60 <process_event+0x4c>
   44d3c:	e8df f000 	tbb	[pc, r0]
   44d40:	856d10c3 	.word	0x856d10c3
   44d44:	95          	.byte	0x95
   44d45:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   44d46:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   44d48:	bf0c      	ite	eq
   44d4a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   44d4e:	f045 0520 	orrne.w	r5, r5, #32
   44d52:	8325      	strh	r5, [r4, #24]
   44d54:	f388 8811 	msr	BASEPRI, r8
   44d58:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   44d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44d60:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   44d64:	45aa      	cmp	sl, r5
   44d66:	f000 80a6 	beq.w	44eb6 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   44d6a:	2700      	movs	r7, #0
   44d6c:	46b9      	mov	r9, r7
   44d6e:	463e      	mov	r6, r7
   44d70:	68a3      	ldr	r3, [r4, #8]
   44d72:	2b00      	cmp	r3, #0
   44d74:	f000 80bd 	beq.w	44ef2 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   44d78:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   44d7c:	8321      	strh	r1, [r4, #24]
   44d7e:	f388 8811 	msr	BASEPRI, r8
   44d82:	f3bf 8f6f 	isb	sy
	return list->head;
   44d86:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   44d88:	2900      	cmp	r1, #0
   44d8a:	f000 80bb 	beq.w	44f04 <process_event+0x1f0>
	return node->next;
   44d8e:	680d      	ldr	r5, [r1, #0]
   44d90:	2900      	cmp	r1, #0
   44d92:	f000 80b7 	beq.w	44f04 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   44d96:	4633      	mov	r3, r6
   44d98:	4652      	mov	r2, sl
   44d9a:	4620      	mov	r0, r4
   44d9c:	f8d1 8004 	ldr.w	r8, [r1, #4]
   44da0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   44da2:	2d00      	cmp	r5, #0
   44da4:	d076      	beq.n	44e94 <process_event+0x180>
   44da6:	682b      	ldr	r3, [r5, #0]
   44da8:	4629      	mov	r1, r5
   44daa:	461d      	mov	r5, r3
   44dac:	e7f0      	b.n	44d90 <process_event+0x7c>
   44dae:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   44db2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   44db4:	2a01      	cmp	r2, #1
   44db6:	d81b      	bhi.n	44df0 <process_event+0xdc>
	list->head = NULL;
   44db8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44dba:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   44dbe:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   44dc0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44dc2:	b289      	uxth	r1, r1
	list->tail = NULL;
   44dc4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   44dc8:	d109      	bne.n	44dde <process_event+0xca>
   44dca:	463b      	mov	r3, r7
   44dcc:	e003      	b.n	44dd6 <process_event+0xc2>
				mgr->refs += 1U;
   44dce:	8b62      	ldrh	r2, [r4, #26]
   44dd0:	3201      	adds	r2, #1
   44dd2:	8362      	strh	r2, [r4, #26]
	return node->next;
   44dd4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   44dd6:	2b00      	cmp	r3, #0
   44dd8:	d1f9      	bne.n	44dce <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44dda:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   44dde:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   44de0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   44de2:	f010 fec6 	bl	55b72 <process_recheck>
   44de6:	2800      	cmp	r0, #0
   44de8:	d07b      	beq.n	44ee2 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   44dea:	f041 0120 	orr.w	r1, r1, #32
   44dee:	e077      	b.n	44ee0 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   44df0:	2b04      	cmp	r3, #4
   44df2:	d10a      	bne.n	44e0a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44df4:	f021 0107 	bic.w	r1, r1, #7
   44df8:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   44dfa:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   44dfc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   44dfe:	f010 feb8 	bl	55b72 <process_recheck>
   44e02:	b110      	cbz	r0, 44e0a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   44e04:	f041 0120 	orr.w	r1, r1, #32
   44e08:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44e0a:	8b21      	ldrh	r1, [r4, #24]
   44e0c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   44e10:	45aa      	cmp	sl, r5
   44e12:	d050      	beq.n	44eb6 <process_event+0x1a2>
   44e14:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   44e16:	46b9      	mov	r9, r7
   44e18:	e7aa      	b.n	44d70 <process_event+0x5c>
			transit = mgr->transitions->start;
   44e1a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44e1c:	f021 0107 	bic.w	r1, r1, #7
   44e20:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   44e24:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   44e26:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   44e2a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   44e2c:	d12d      	bne.n	44e8a <process_event+0x176>
		    || (transit != NULL)) {
   44e2e:	f1b9 0f00 	cmp.w	r9, #0
   44e32:	d040      	beq.n	44eb6 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   44e34:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   44e38:	8321      	strh	r1, [r4, #24]
   44e3a:	f388 8811 	msr	BASEPRI, r8
   44e3e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   44e42:	4620      	mov	r0, r4
   44e44:	4939      	ldr	r1, [pc, #228]	; (44f2c <process_event+0x218>)
   44e46:	47c8      	blx	r9
   44e48:	e029      	b.n	44e9e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44e4a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   44e4e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44e50:	f041 0104 	orr.w	r1, r1, #4
   44e54:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   44e56:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   44e58:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   44e5c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   44e5e:	d0e6      	beq.n	44e2e <process_event+0x11a>
   44e60:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44e62:	f04f 0a04 	mov.w	sl, #4
		res = 0;
   44e66:	463e      	mov	r6, r7
   44e68:	e782      	b.n	44d70 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44e6a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   44e6e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44e70:	f041 0105 	orr.w	r1, r1, #5
   44e74:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   44e76:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   44e78:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   44e7c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   44e7e:	d0d6      	beq.n	44e2e <process_event+0x11a>
   44e80:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44e82:	f04f 0a05 	mov.w	sl, #5
		res = 0;
   44e86:	463e      	mov	r6, r7
   44e88:	e772      	b.n	44d70 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   44e8a:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44e8c:	f04f 0a06 	mov.w	sl, #6
		res = 0;
   44e90:	463e      	mov	r6, r7
   44e92:	e76d      	b.n	44d70 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   44e94:	462b      	mov	r3, r5
   44e96:	e787      	b.n	44da8 <process_event+0x94>
			if (transit != NULL) {
   44e98:	f1b9 0f00 	cmp.w	r9, #0
   44e9c:	d1d1      	bne.n	44e42 <process_event+0x12e>
	__asm__ volatile(
   44e9e:	f04f 0320 	mov.w	r3, #32
   44ea2:	f3ef 8811 	mrs	r8, BASEPRI
   44ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   44eaa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   44eae:	8b23      	ldrh	r3, [r4, #24]
   44eb0:	f023 0308 	bic.w	r3, r3, #8
   44eb4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   44eb6:	8b25      	ldrh	r5, [r4, #24]
   44eb8:	06ea      	lsls	r2, r5, #27
   44eba:	d52e      	bpl.n	44f1a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   44ebc:	f025 0310 	bic.w	r3, r5, #16
   44ec0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   44ec2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   44ec6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   44ec8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   44eca:	2e00      	cmp	r6, #0
   44ecc:	f6bf af6f 	bge.w	44dae <process_event+0x9a>
	list->head = NULL;
   44ed0:	2300      	movs	r3, #0
		*clients = mgr->clients;
   44ed2:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   44ed4:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   44ed8:	f021 0107 	bic.w	r1, r1, #7
   44edc:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   44ee0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   44ee2:	8b21      	ldrh	r1, [r4, #24]
   44ee4:	f04f 0900 	mov.w	r9, #0
   44ee8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   44eec:	45aa      	cmp	sl, r5
   44eee:	f47f af3f 	bne.w	44d70 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   44ef2:	2f00      	cmp	r7, #0
   44ef4:	d09b      	beq.n	44e2e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   44ef6:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   44efa:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   44efc:	f388 8811 	msr	BASEPRI, r8
   44f00:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   44f04:	2f00      	cmp	r7, #0
   44f06:	d0c7      	beq.n	44e98 <process_event+0x184>
	return node->next;
   44f08:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   44f0a:	4639      	mov	r1, r7
   44f0c:	4633      	mov	r3, r6
   44f0e:	4652      	mov	r2, sl
   44f10:	4620      	mov	r0, r4
   44f12:	f010 fe5a 	bl	55bca <notify_one>
	list->head = node;
   44f16:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   44f18:	e7f4      	b.n	44f04 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   44f1a:	06ab      	lsls	r3, r5, #26
   44f1c:	f57f af1a 	bpl.w	44d54 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   44f20:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   44f24:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   44f26:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   44f2a:	e6ff      	b.n	44d2c <process_event+0x18>
   44f2c:	00055bf7 	.word	0x00055bf7

00044f30 <extract_decimal>:
{
   44f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   44f32:	4602      	mov	r2, r0
   44f34:	6801      	ldr	r1, [r0, #0]
		val = 10U * val + *sp++ - '0';
   44f36:	270a      	movs	r7, #10
	size_t val = 0;
   44f38:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   44f3a:	4e07      	ldr	r6, [pc, #28]	; (44f58 <extract_decimal+0x28>)
   44f3c:	460b      	mov	r3, r1
   44f3e:	781c      	ldrb	r4, [r3, #0]
   44f40:	3101      	adds	r1, #1
   44f42:	5d35      	ldrb	r5, [r6, r4]
   44f44:	076d      	lsls	r5, r5, #29
   44f46:	d401      	bmi.n	44f4c <extract_decimal+0x1c>
	*str = sp;
   44f48:	6013      	str	r3, [r2, #0]
}
   44f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   44f4c:	fb07 4300 	mla	r3, r7, r0, r4
   44f50:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   44f54:	e7f2      	b.n	44f3c <extract_decimal+0xc>
   44f56:	bf00      	nop
   44f58:	0006098d 	.word	0x0006098d

00044f5c <encode_uint>:
{
   44f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44f60:	4615      	mov	r5, r2
   44f62:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   44f64:	78d3      	ldrb	r3, [r2, #3]
   44f66:	4a22      	ldr	r2, [pc, #136]	; (44ff0 <encode_uint+0x94>)
	switch (specifier) {
   44f68:	2b6f      	cmp	r3, #111	; 0x6f
   44f6a:	f812 b003 	ldrb.w	fp, [r2, r3]
{
   44f6e:	4680      	mov	r8, r0
   44f70:	460f      	mov	r7, r1
   44f72:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   44f76:	d029      	beq.n	44fcc <encode_uint+0x70>
   44f78:	d824      	bhi.n	44fc4 <encode_uint+0x68>
		return 10;
   44f7a:	2b58      	cmp	r3, #88	; 0x58
   44f7c:	bf0c      	ite	eq
   44f7e:	2610      	moveq	r6, #16
   44f80:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   44f82:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   44f86:	4632      	mov	r2, r6
   44f88:	2300      	movs	r3, #0
   44f8a:	4640      	mov	r0, r8
   44f8c:	4639      	mov	r1, r7
   44f8e:	f7fb fdbf 	bl	40b10 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   44f92:	2a09      	cmp	r2, #9
   44f94:	b2d4      	uxtb	r4, r2
   44f96:	d81e      	bhi.n	44fd6 <encode_uint+0x7a>
   44f98:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   44f9a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   44f9c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   44f9e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   44fa2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   44fa6:	d301      	bcc.n	44fac <encode_uint+0x50>
   44fa8:	45d1      	cmp	r9, sl
   44faa:	d811      	bhi.n	44fd0 <encode_uint+0x74>
	if (conv->flag_hash) {
   44fac:	782b      	ldrb	r3, [r5, #0]
   44fae:	069b      	lsls	r3, r3, #26
   44fb0:	d505      	bpl.n	44fbe <encode_uint+0x62>
		if (radix == 8) {
   44fb2:	2e08      	cmp	r6, #8
   44fb4:	d115      	bne.n	44fe2 <encode_uint+0x86>
			conv->altform_0 = true;
   44fb6:	78ab      	ldrb	r3, [r5, #2]
   44fb8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   44fbc:	70ab      	strb	r3, [r5, #2]
}
   44fbe:	4648      	mov	r0, r9
   44fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   44fc4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   44fc8:	2b70      	cmp	r3, #112	; 0x70
   44fca:	e7d7      	b.n	44f7c <encode_uint+0x20>
	switch (specifier) {
   44fcc:	2608      	movs	r6, #8
   44fce:	e7d8      	b.n	44f82 <encode_uint+0x26>
		value /= radix;
   44fd0:	4680      	mov	r8, r0
   44fd2:	460f      	mov	r7, r1
   44fd4:	e7d7      	b.n	44f86 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   44fd6:	f1bb 0f01 	cmp.w	fp, #1
   44fda:	bf0c      	ite	eq
   44fdc:	3437      	addeq	r4, #55	; 0x37
   44fde:	3457      	addne	r4, #87	; 0x57
   44fe0:	e7db      	b.n	44f9a <encode_uint+0x3e>
		} else if (radix == 16) {
   44fe2:	2e10      	cmp	r6, #16
   44fe4:	d1eb      	bne.n	44fbe <encode_uint+0x62>
			conv->altform_0c = true;
   44fe6:	78ab      	ldrb	r3, [r5, #2]
   44fe8:	f043 0310 	orr.w	r3, r3, #16
   44fec:	e7e6      	b.n	44fbc <encode_uint+0x60>
   44fee:	bf00      	nop
   44ff0:	0006098d 	.word	0x0006098d

00044ff4 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   44ff4:	f04f 0220 	mov.w	r2, #32
   44ff8:	f3ef 8311 	mrs	r3, BASEPRI
   44ffc:	f382 8812 	msr	BASEPRI_MAX, r2
   45000:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   45004:	2101      	movs	r1, #1
   45006:	4a04      	ldr	r2, [pc, #16]	; (45018 <nordicsemi_nrf91_init+0x24>)
   45008:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   4500c:	f383 8811 	msr	BASEPRI, r3
   45010:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   45014:	2000      	movs	r0, #0
   45016:	4770      	bx	lr
   45018:	40039000 	.word	0x40039000

0004501c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   4501c:	b120      	cbz	r0, 45028 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   4501e:	4b03      	ldr	r3, [pc, #12]	; (4502c <arch_busy_wait+0x10>)
   45020:	0180      	lsls	r0, r0, #6
   45022:	f043 0301 	orr.w	r3, r3, #1
   45026:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   45028:	4770      	bx	lr
   4502a:	bf00      	nop
   4502c:	0005c0b0 	.word	0x0005c0b0

00045030 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   45030:	f00a b946 	b.w	4f2c0 <SystemInit>

00045034 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
   45034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45038:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
   4503a:	482f      	ldr	r0, [pc, #188]	; (450f8 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
   4503c:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   4503e:	f010 fede 	bl	55dfe <atomic_inc>
   45042:	4606      	mov	r6, r0
   45044:	b970      	cbnz	r0, 45064 <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   45046:	4c2d      	ldr	r4, [pc, #180]	; (450fc <z_log_init.isra.0+0xc8>)
	uint32_t mask = 0;
   45048:	4605      	mov	r5, r0
   4504a:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
   4504c:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   45050:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 45100 <z_log_init.isra.0+0xcc>
   45054:	4554      	cmp	r4, sl
   45056:	d307      	bcc.n	45068 <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
   45058:	f1b9 0f00 	cmp.w	r9, #0
   4505c:	d002      	beq.n	45064 <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
   4505e:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
   45062:	b9e5      	cbnz	r5, 4509e <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
   45064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
   45068:	7b23      	ldrb	r3, [r4, #12]
   4506a:	b173      	cbz	r3, 4508a <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
   4506c:	6823      	ldr	r3, [r4, #0]
   4506e:	68db      	ldr	r3, [r3, #12]
   45070:	b10b      	cbz	r3, 45076 <z_log_init.isra.0+0x42>
		backend->api->init(backend);
   45072:	4620      	mov	r0, r4
   45074:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   45076:	6823      	ldr	r3, [r4, #0]
   45078:	691b      	ldr	r3, [r3, #16]
   4507a:	b943      	cbnz	r3, 4508e <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
   4507c:	6863      	ldr	r3, [r4, #4]
   4507e:	2204      	movs	r2, #4
   45080:	4620      	mov	r0, r4
   45082:	6819      	ldr	r1, [r3, #0]
   45084:	f000 f8c0 	bl	45208 <log_backend_enable>
			i++;
   45088:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   4508a:	3410      	adds	r4, #16
   4508c:	e7e2      	b.n	45054 <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
   4508e:	4620      	mov	r0, r4
   45090:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   45092:	2800      	cmp	r0, #0
   45094:	d0f2      	beq.n	4507c <z_log_init.isra.0+0x48>
				mask |= BIT(i);
   45096:	fa0b f306 	lsl.w	r3, fp, r6
   4509a:	431d      	orrs	r5, r3
   4509c:	e7f4      	b.n	45088 <z_log_init.isra.0+0x54>
   4509e:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
   450a0:	fa95 f4a5 	rbit	r4, r5
   450a4:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
   450a8:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   450ac:	0126      	lsls	r6, r4, #4
   450ae:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
   450b2:	ea6f 0b03 	mvn.w	fp, r3
   450b6:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   450ba:	7b23      	ldrb	r3, [r4, #12]
   450bc:	b163      	cbz	r3, 450d8 <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
   450be:	f858 3006 	ldr.w	r3, [r8, r6]
   450c2:	691b      	ldr	r3, [r3, #16]
   450c4:	b993      	cbnz	r3, 450ec <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
   450c6:	4446      	add	r6, r8
			log_backend_enable(backend,
   450c8:	6873      	ldr	r3, [r6, #4]
   450ca:	2204      	movs	r2, #4
   450cc:	4620      	mov	r0, r4
   450ce:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   450d0:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
   450d4:	f000 f898 	bl	45208 <log_backend_enable>
	while (mask_cpy) {
   450d8:	2d00      	cmp	r5, #0
   450da:	d1e1      	bne.n	450a0 <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   450dc:	b127      	cbz	r7, 450e8 <z_log_init.isra.0+0xb4>
	return z_impl_k_sleep(timeout);
   450de:	f44f 70a4 	mov.w	r0, #328	; 0x148
   450e2:	2100      	movs	r1, #0
   450e4:	f00d ff12 	bl	52f0c <z_impl_k_sleep>
   450e8:	464d      	mov	r5, r9
   450ea:	e7ba      	b.n	45062 <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
   450ec:	4620      	mov	r0, r4
   450ee:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   450f0:	2800      	cmp	r0, #0
   450f2:	d1f1      	bne.n	450d8 <z_log_init.isra.0+0xa4>
   450f4:	e7e7      	b.n	450c6 <z_log_init.isra.0+0x92>
   450f6:	bf00      	nop
   450f8:	2001b554 	.word	0x2001b554
   450fc:	0005c054 	.word	0x0005c054
   45100:	0005c064 	.word	0x0005c064

00045104 <log_format_func_t_get>:
}
   45104:	4b01      	ldr	r3, [pc, #4]	; (4510c <log_format_func_t_get+0x8>)
   45106:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   4510a:	4770      	bx	lr
   4510c:	0005c1c8 	.word	0x0005c1c8

00045110 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
   45110:	b508      	push	{r3, lr}
   45112:	4603      	mov	r3, r0
   45114:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   45116:	b12b      	cbz	r3, 45124 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
   45118:	4a04      	ldr	r2, [pc, #16]	; (4512c <log_set_timestamp_func+0x1c>)
   4511a:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
   4511c:	f000 fa7c 	bl	45618 <log_output_timestamp_freq_set>
	}

	return 0;
   45120:	2000      	movs	r0, #0
}
   45122:	bd08      	pop	{r3, pc}
		return -EINVAL;
   45124:	f06f 0015 	mvn.w	r0, #21
   45128:	e7fb      	b.n	45122 <log_set_timestamp_func+0x12>
   4512a:	bf00      	nop
   4512c:	2001a568 	.word	0x2001a568

00045130 <log_core_init>:
	panic_mode = false;
   45130:	2300      	movs	r3, #0
   45132:	4a04      	ldr	r2, [pc, #16]	; (45144 <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
   45134:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
   45138:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   4513a:	4a03      	ldr	r2, [pc, #12]	; (45148 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
   4513c:	4803      	ldr	r0, [pc, #12]	; (4514c <log_core_init+0x1c>)
	dropped_cnt = 0;
   4513e:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   45140:	f7ff bfe6 	b.w	45110 <log_set_timestamp_func>
   45144:	2001de2a 	.word	0x2001de2a
   45148:	2001b54c 	.word	0x2001b54c
   4514c:	00055dfb 	.word	0x00055dfb

00045150 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
   45150:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   45152:	4d0b      	ldr	r5, [pc, #44]	; (45180 <z_impl_log_panic+0x30>)
   45154:	7829      	ldrb	r1, [r5, #0]
   45156:	b941      	cbnz	r1, 4516a <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
   45158:	2001      	movs	r0, #1
   4515a:	f7ff ff6b 	bl	45034 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
   4515e:	4c09      	ldr	r4, [pc, #36]	; (45184 <z_impl_log_panic+0x34>)
   45160:	4e09      	ldr	r6, [pc, #36]	; (45188 <z_impl_log_panic+0x38>)
   45162:	42b4      	cmp	r4, r6
   45164:	d302      	bcc.n	4516c <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
   45166:	2301      	movs	r3, #1
   45168:	702b      	strb	r3, [r5, #0]
}
   4516a:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   4516c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   4516e:	795b      	ldrb	r3, [r3, #5]
   45170:	b11b      	cbz	r3, 4517a <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
   45172:	6823      	ldr	r3, [r4, #0]
   45174:	4620      	mov	r0, r4
   45176:	689b      	ldr	r3, [r3, #8]
   45178:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   4517a:	3410      	adds	r4, #16
   4517c:	e7f1      	b.n	45162 <z_impl_log_panic+0x12>
   4517e:	bf00      	nop
   45180:	2001de2a 	.word	0x2001de2a
   45184:	0005c054 	.word	0x0005c054
   45188:	0005c064 	.word	0x0005c064

0004518c <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
   4518c:	b510      	push	{r4, lr}
   4518e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   45190:	4806      	ldr	r0, [pc, #24]	; (451ac <z_log_dropped+0x20>)
   45192:	f010 fe34 	bl	55dfe <atomic_inc>
	if (buffered) {
   45196:	b13c      	cbz	r4, 451a8 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   45198:	4b05      	ldr	r3, [pc, #20]	; (451b0 <z_log_dropped+0x24>)
   4519a:	e8d3 1fef 	ldaex	r1, [r3]
   4519e:	3901      	subs	r1, #1
   451a0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   451a4:	2a00      	cmp	r2, #0
   451a6:	d1f8      	bne.n	4519a <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
   451a8:	bd10      	pop	{r4, pc}
   451aa:	bf00      	nop
   451ac:	2001b54c 	.word	0x2001b54c
   451b0:	2001b550 	.word	0x2001b550

000451b4 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
   451b4:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   451b6:	4b0a      	ldr	r3, [pc, #40]	; (451e0 <z_log_msg_commit+0x2c>)
{
   451b8:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
   451ba:	681b      	ldr	r3, [r3, #0]
   451bc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   451be:	4c09      	ldr	r4, [pc, #36]	; (451e4 <z_log_msg_commit+0x30>)
   451c0:	4e09      	ldr	r6, [pc, #36]	; (451e8 <z_log_msg_commit+0x34>)
	msg->hdr.timestamp = timestamp_func();
   451c2:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   451c4:	42b4      	cmp	r4, r6
   451c6:	d300      	bcc.n	451ca <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
   451c8:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   451ca:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   451cc:	795b      	ldrb	r3, [r3, #5]
   451ce:	b123      	cbz	r3, 451da <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
   451d0:	6823      	ldr	r3, [r4, #0]
   451d2:	4629      	mov	r1, r5
   451d4:	4620      	mov	r0, r4
   451d6:	681b      	ldr	r3, [r3, #0]
   451d8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   451da:	3410      	adds	r4, #16
   451dc:	e7f2      	b.n	451c4 <z_log_msg_commit+0x10>
   451de:	bf00      	nop
   451e0:	2001a568 	.word	0x2001a568
   451e4:	0005c054 	.word	0x0005c054
   451e8:	0005c064 	.word	0x0005c064

000451ec <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   451ec:	4a04      	ldr	r2, [pc, #16]	; (45200 <log_source_name_get+0x14>)
   451ee:	4b05      	ldr	r3, [pc, #20]	; (45204 <log_source_name_get+0x18>)
   451f0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   451f2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   451f6:	bf34      	ite	cc
   451f8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   451fc:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   451fe:	4770      	bx	lr
   45200:	0005bf34 	.word	0x0005bf34
   45204:	0005c054 	.word	0x0005c054

00045208 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   45208:	4b08      	ldr	r3, [pc, #32]	; (4522c <log_backend_enable+0x24>)
{
   4520a:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   4520c:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
   4520e:	6844      	ldr	r4, [r0, #4]
   45210:	111b      	asrs	r3, r3, #4
   45212:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   45214:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   45216:	6843      	ldr	r3, [r0, #4]
   45218:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
   4521a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   4521c:	6843      	ldr	r3, [r0, #4]
   4521e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   45220:	6843      	ldr	r3, [r0, #4]
   45222:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   45224:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_log_notify_backend_enabled();
   45228:	f010 bdf9 	b.w	55e1e <z_log_notify_backend_enabled>
   4522c:	0005c054 	.word	0x0005c054

00045230 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   45230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45234:	b085      	sub	sp, #20
   45236:	af02      	add	r7, sp, #8
   45238:	4604      	mov	r4, r0
   4523a:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
   4523e:	460e      	mov	r6, r1
   45240:	4693      	mov	fp, r2
   45242:	4698      	mov	r8, r3
   45244:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
   45246:	f1ba 0f00 	cmp.w	sl, #0
   4524a:	d035      	beq.n	452b8 <z_impl_z_log_msg_runtime_vcreate+0x88>
		va_list ap2;

		va_copy(ap2, ap);
   4524c:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   45250:	f8cd 9000 	str.w	r9, [sp]
   45254:	2110      	movs	r1, #16
   45256:	4653      	mov	r3, sl
   45258:	2000      	movs	r0, #0
   4525a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   4525c:	f7ff faba 	bl	447d4 <cbvprintf_package>
   45260:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   45262:	4a16      	ldr	r2, [pc, #88]	; (452bc <z_impl_z_log_msg_runtime_vcreate+0x8c>)
   45264:	f004 0407 	and.w	r4, r4, #7
   45268:	f00b 0b07 	and.w	fp, fp, #7
   4526c:	00e4      	lsls	r4, r4, #3
   4526e:	ea02 2241 	and.w	r2, r2, r1, lsl #9
   45272:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   45276:	4314      	orrs	r4, r2
   45278:	4a11      	ldr	r2, [pc, #68]	; (452c0 <z_impl_z_log_msg_runtime_vcreate+0x90>)
   4527a:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   4527e:	3517      	adds	r5, #23
   45280:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
   45282:	f025 0507 	bic.w	r5, r5, #7
   45286:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
   4528a:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
   4528c:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
   4528e:	f1ba 0f00 	cmp.w	sl, #0
   45292:	d007      	beq.n	452a4 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   45294:	f8cd 9000 	str.w	r9, [sp]
   45298:	4653      	mov	r3, sl
   4529a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   4529c:	f105 0010 	add.w	r0, r5, #16
   452a0:	f7ff fa98 	bl	447d4 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   452a4:	4643      	mov	r3, r8
   452a6:	4622      	mov	r2, r4
   452a8:	4631      	mov	r1, r6
   452aa:	4628      	mov	r0, r5
   452ac:	f010 fdba 	bl	55e24 <z_log_msg_finalize>
	}
}
   452b0:	370c      	adds	r7, #12
   452b2:	46bd      	mov	sp, r7
   452b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   452b8:	4651      	mov	r1, sl
   452ba:	e7d2      	b.n	45262 <z_impl_z_log_msg_runtime_vcreate+0x32>
   452bc:	0007fe00 	.word	0x0007fe00
   452c0:	7ff80000 	.word	0x7ff80000

000452c4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   452c4:	b40e      	push	{r1, r2, r3}
   452c6:	b503      	push	{r0, r1, lr}
   452c8:	ab03      	add	r3, sp, #12
   452ca:	f853 2b04 	ldr.w	r2, [r3], #4
   452ce:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   452d0:	4804      	ldr	r0, [pc, #16]	; (452e4 <print_formatted+0x20>)
	va_start(args, fmt);
   452d2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   452d4:	f010 fde9 	bl	55eaa <cbvprintf>
	va_end(args);

	return length;
}
   452d8:	b002      	add	sp, #8
   452da:	f85d eb04 	ldr.w	lr, [sp], #4
   452de:	b003      	add	sp, #12
   452e0:	4770      	bx	lr
   452e2:	bf00      	nop
   452e4:	00055e59 	.word	0x00055e59

000452e8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   452e8:	06ca      	lsls	r2, r1, #27
   452ea:	d405      	bmi.n	452f8 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   452ec:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   452ee:	bf4c      	ite	mi
   452f0:	4902      	ldrmi	r1, [pc, #8]	; (452fc <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   452f2:	4903      	ldrpl	r1, [pc, #12]	; (45300 <newline_print+0x18>)
   452f4:	f7ff bfe6 	b.w	452c4 <print_formatted>
	}
}
   452f8:	4770      	bx	lr
   452fa:	bf00      	nop
   452fc:	0005fccd 	.word	0x0005fccd
   45300:	0005fccc 	.word	0x0005fccc

00045304 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   45304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45308:	b08b      	sub	sp, #44	; 0x2c
   4530a:	469a      	mov	sl, r3
   4530c:	e9dd 7315 	ldrd	r7, r3, [sp, #84]	; 0x54
   45310:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   45314:	9306      	str	r3, [sp, #24]
   45316:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   45318:	4604      	mov	r4, r0
   4531a:	460d      	mov	r5, r1
   4531c:	9e18      	ldr	r6, [sp, #96]	; 0x60
   4531e:	9208      	str	r2, [sp, #32]
   45320:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   45322:	f1bb 0f00 	cmp.w	fp, #0
   45326:	f000 8085 	beq.w	45434 <log_output_process+0x130>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   4532a:	f006 0301 	and.w	r3, r6, #1
   4532e:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   45330:	f006 0308 	and.w	r3, r6, #8
   45334:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   45336:	f010 fd73 	bl	55e20 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   4533a:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
   4533e:	4602      	mov	r2, r0
   45340:	2800      	cmp	r0, #0
   45342:	d047      	beq.n	453d4 <log_output_process+0xd0>
		length += print_formatted(output, "%s ", tag);
   45344:	4620      	mov	r0, r4
   45346:	4984      	ldr	r1, [pc, #528]	; (45558 <log_output_process+0x254>)
   45348:	f7ff ffbc 	bl	452c4 <print_formatted>
   4534c:	4680      	mov	r8, r0
	if (stamp) {
   4534e:	f1b9 0f00 	cmp.w	r9, #0
   45352:	d008      	beq.n	45366 <log_output_process+0x62>
	if (!format) {
   45354:	f016 0f44 	tst.w	r6, #68	; 0x44
   45358:	d13e      	bne.n	453d8 <log_output_process+0xd4>
		length = print_formatted(output, "[%08lu] ", timestamp);
   4535a:	462a      	mov	r2, r5
   4535c:	4620      	mov	r0, r4
   4535e:	497f      	ldr	r1, [pc, #508]	; (4555c <log_output_process+0x258>)
   45360:	f7ff ffb0 	bl	452c4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   45364:	4480      	add	r8, r0
	if (color) {
   45366:	9b09      	ldr	r3, [sp, #36]	; 0x24
   45368:	b153      	cbz	r3, 45380 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
   4536a:	4b7d      	ldr	r3, [pc, #500]	; (45560 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
   4536c:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
   4536e:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
   45372:	4b7c      	ldr	r3, [pc, #496]	; (45564 <log_output_process+0x260>)
   45374:	497c      	ldr	r1, [pc, #496]	; (45568 <log_output_process+0x264>)
   45376:	2a00      	cmp	r2, #0
   45378:	bf08      	it	eq
   4537a:	461a      	moveq	r2, r3
   4537c:	f7ff ffa2 	bl	452c4 <print_formatted>
	if (level_on) {
   45380:	9b07      	ldr	r3, [sp, #28]
   45382:	2b00      	cmp	r3, #0
   45384:	d054      	beq.n	45430 <log_output_process+0x12c>
		total += print_formatted(output, "<%s> ", severity[level]);
   45386:	4b79      	ldr	r3, [pc, #484]	; (4556c <log_output_process+0x268>)
   45388:	4620      	mov	r0, r4
   4538a:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
   4538e:	4978      	ldr	r1, [pc, #480]	; (45570 <log_output_process+0x26c>)
   45390:	f7ff ff98 	bl	452c4 <print_formatted>
   45394:	4605      	mov	r5, r0
	if (domain) {
   45396:	9b08      	ldr	r3, [sp, #32]
   45398:	b12b      	cbz	r3, 453a6 <log_output_process+0xa2>
		total += print_formatted(output, "%s/", domain);
   4539a:	461a      	mov	r2, r3
   4539c:	4620      	mov	r0, r4
   4539e:	4975      	ldr	r1, [pc, #468]	; (45574 <log_output_process+0x270>)
   453a0:	f7ff ff90 	bl	452c4 <print_formatted>
   453a4:	4405      	add	r5, r0
	if (source) {
   453a6:	f1ba 0f00 	cmp.w	sl, #0
   453aa:	d005      	beq.n	453b8 <log_output_process+0xb4>
		total += print_formatted(output,
   453ac:	4652      	mov	r2, sl
   453ae:	4620      	mov	r0, r4
   453b0:	4971      	ldr	r1, [pc, #452]	; (45578 <log_output_process+0x274>)
   453b2:	f7ff ff87 	bl	452c4 <print_formatted>
   453b6:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   453b8:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   453ba:	2f00      	cmp	r7, #0
   453bc:	d148      	bne.n	45450 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   453be:	9b05      	ldr	r3, [sp, #20]
   453c0:	2b00      	cmp	r3, #0
   453c2:	d14e      	bne.n	45462 <log_output_process+0x15e>
	if (color) {
   453c4:	07f3      	lsls	r3, r6, #31
   453c6:	f100 80c0 	bmi.w	4554a <log_output_process+0x246>
	newline_print(output, flags);
   453ca:	4631      	mov	r1, r6
   453cc:	4620      	mov	r0, r4
   453ce:	f7ff ff8b 	bl	452e8 <newline_print>
}
   453d2:	e0b4      	b.n	4553e <log_output_process+0x23a>
	uint32_t length = 0U;
   453d4:	4680      	mov	r8, r0
   453d6:	e7ba      	b.n	4534e <log_output_process+0x4a>
	} else if (freq != 0U) {
   453d8:	4b68      	ldr	r3, [pc, #416]	; (4557c <log_output_process+0x278>)
   453da:	6818      	ldr	r0, [r3, #0]
   453dc:	2800      	cmp	r0, #0
   453de:	d0c1      	beq.n	45364 <log_output_process+0x60>
		timestamp /= timestamp_div;
   453e0:	4b67      	ldr	r3, [pc, #412]	; (45580 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   453e2:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
   453e6:	681b      	ldr	r3, [r3, #0]
   453e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   453ec:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   453f0:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   453f4:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
   453f8:	fb09 f505 	mul.w	r5, r9, r5
   453fc:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   45400:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
   45404:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   45408:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   4540c:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
   45410:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   45414:	fb09 f505 	mul.w	r5, r9, r5
   45418:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   4541c:	fb0c 1113 	mls	r1, ip, r3, r1
   45420:	4620      	mov	r0, r4
   45422:	9100      	str	r1, [sp, #0]
   45424:	e9cd e501 	strd	lr, r5, [sp, #4]
   45428:	4956      	ldr	r1, [pc, #344]	; (45584 <log_output_process+0x280>)
   4542a:	f7ff ff4b 	bl	452c4 <print_formatted>
   4542e:	e799      	b.n	45364 <log_output_process+0x60>
	int total = 0;
   45430:	9d07      	ldr	r5, [sp, #28]
   45432:	e7b0      	b.n	45396 <log_output_process+0x92>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   45434:	f1ba 0f01 	cmp.w	sl, #1
   45438:	d106      	bne.n	45448 <log_output_process+0x144>
	if (package) {
   4543a:	2f00      	cmp	r7, #0
   4543c:	d165      	bne.n	4550a <log_output_process+0x206>
	if (data_len) {
   4543e:	9b05      	ldr	r3, [sp, #20]
   45440:	2b00      	cmp	r3, #0
   45442:	d07c      	beq.n	4553e <log_output_process+0x23a>
		prefix_offset = 0;
   45444:	2500      	movs	r5, #0
   45446:	e00c      	b.n	45462 <log_output_process+0x15e>
	if (package) {
   45448:	2f00      	cmp	r7, #0
   4544a:	d0f8      	beq.n	4543e <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   4544c:	484e      	ldr	r0, [pc, #312]	; (45588 <log_output_process+0x284>)
   4544e:	e05d      	b.n	4550c <log_output_process+0x208>
		cb = out_func;
   45450:	484e      	ldr	r0, [pc, #312]	; (4558c <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   45452:	463b      	mov	r3, r7
   45454:	4622      	mov	r2, r4
   45456:	494e      	ldr	r1, [pc, #312]	; (45590 <log_output_process+0x28c>)
   45458:	f010 f929 	bl	556ae <cbpprintf_external>
	if (data_len) {
   4545c:	9b05      	ldr	r3, [sp, #20]
   4545e:	2b00      	cmp	r3, #0
   45460:	d069      	beq.n	45536 <log_output_process+0x232>
		print_formatted(output, " ");
   45462:	f8df 8140 	ldr.w	r8, [pc, #320]	; 455a4 <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
   45466:	f8df 9140 	ldr.w	r9, [pc, #320]	; 455a8 <log_output_process+0x2a4>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   4546a:	9f05      	ldr	r7, [sp, #20]
	newline_print(output, flags);
   4546c:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   4546e:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   45470:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   45472:	bf28      	it	cs
   45474:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
   45476:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
   4547a:	f7ff ff35 	bl	452e8 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   4547e:	4555      	cmp	r5, sl
   45480:	dc46      	bgt.n	45510 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
   45482:	9b06      	ldr	r3, [sp, #24]
   45484:	4649      	mov	r1, r9
   45486:	4620      	mov	r0, r4
   45488:	781a      	ldrb	r2, [r3, #0]
   4548a:	f7ff ff1b 	bl	452c4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   4548e:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
   45492:	f01a 0f07 	tst.w	sl, #7
   45496:	d103      	bne.n	454a0 <log_output_process+0x19c>
			print_formatted(output, " ");
   45498:	4641      	mov	r1, r8
   4549a:	4620      	mov	r0, r4
   4549c:	f7ff ff12 	bl	452c4 <print_formatted>
		if (i < length) {
   454a0:	4557      	cmp	r7, sl
   454a2:	d93c      	bls.n	4551e <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
   454a4:	9b06      	ldr	r3, [sp, #24]
   454a6:	4649      	mov	r1, r9
   454a8:	4620      	mov	r0, r4
   454aa:	f813 200a 	ldrb.w	r2, [r3, sl]
   454ae:	f7ff ff09 	bl	452c4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   454b2:	f10a 0a01 	add.w	sl, sl, #1
   454b6:	f1ba 0f10 	cmp.w	sl, #16
   454ba:	d1ea      	bne.n	45492 <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   454bc:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
   454c0:	4620      	mov	r0, r4
   454c2:	4934      	ldr	r1, [pc, #208]	; (45594 <log_output_process+0x290>)
   454c4:	f7ff fefe 	bl	452c4 <print_formatted>
		if (i < length) {
   454c8:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
   454ca:	9b06      	ldr	r3, [sp, #24]
			print_formatted(output, "%c",
   454cc:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
   454ce:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
   454d0:	4b31      	ldr	r3, [pc, #196]	; (45598 <log_output_process+0x294>)
   454d2:	5c99      	ldrb	r1, [r3, r2]
   454d4:	f011 0f97 	tst.w	r1, #151	; 0x97
   454d8:	bf08      	it	eq
   454da:	222e      	moveq	r2, #46	; 0x2e
   454dc:	492f      	ldr	r1, [pc, #188]	; (4559c <log_output_process+0x298>)
   454de:	f7ff fef1 	bl	452c4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   454e2:	f10a 0a01 	add.w	sl, sl, #1
   454e6:	f1ba 0f10 	cmp.w	sl, #16
   454ea:	d01d      	beq.n	45528 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
   454ec:	f01a 0f07 	tst.w	sl, #7
   454f0:	d103      	bne.n	454fa <log_output_process+0x1f6>
			print_formatted(output, " ");
   454f2:	4641      	mov	r1, r8
   454f4:	4620      	mov	r0, r4
   454f6:	f7ff fee5 	bl	452c4 <print_formatted>
		if (i < length) {
   454fa:	4557      	cmp	r7, sl
   454fc:	4652      	mov	r2, sl
   454fe:	d8e4      	bhi.n	454ca <log_output_process+0x1c6>
			print_formatted(output, " ");
   45500:	4641      	mov	r1, r8
   45502:	4620      	mov	r0, r4
   45504:	f7ff fede 	bl	452c4 <print_formatted>
   45508:	e7eb      	b.n	454e2 <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   4550a:	4820      	ldr	r0, [pc, #128]	; (4558c <log_output_process+0x288>)
		prefix_offset = 0;
   4550c:	465d      	mov	r5, fp
   4550e:	e7a0      	b.n	45452 <log_output_process+0x14e>
		print_formatted(output, " ");
   45510:	4641      	mov	r1, r8
   45512:	4620      	mov	r0, r4
   45514:	f7ff fed6 	bl	452c4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   45518:	f10a 0a01 	add.w	sl, sl, #1
   4551c:	e7af      	b.n	4547e <log_output_process+0x17a>
			print_formatted(output, "   ");
   4551e:	4620      	mov	r0, r4
   45520:	491f      	ldr	r1, [pc, #124]	; (455a0 <log_output_process+0x29c>)
   45522:	f7ff fecf 	bl	452c4 <print_formatted>
   45526:	e7c4      	b.n	454b2 <log_output_process+0x1ae>
		data += length;
   45528:	9b06      	ldr	r3, [sp, #24]
   4552a:	443b      	add	r3, r7
   4552c:	9306      	str	r3, [sp, #24]
	} while (len);
   4552e:	9b05      	ldr	r3, [sp, #20]
   45530:	1bdb      	subs	r3, r3, r7
   45532:	9305      	str	r3, [sp, #20]
   45534:	d199      	bne.n	4546a <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   45536:	f1bb 0f00 	cmp.w	fp, #0
   4553a:	f47f af43 	bne.w	453c4 <log_output_process+0xc0>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   4553e:	4620      	mov	r0, r4
}
   45540:	b00b      	add	sp, #44	; 0x2c
   45542:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   45546:	f010 bcb7 	b.w	55eb8 <log_output_flush>
		print_formatted(output, "%s", log_color);
   4554a:	4620      	mov	r0, r4
   4554c:	4a05      	ldr	r2, [pc, #20]	; (45564 <log_output_process+0x260>)
   4554e:	4906      	ldr	r1, [pc, #24]	; (45568 <log_output_process+0x264>)
   45550:	f7ff feb8 	bl	452c4 <print_formatted>
}
   45554:	e739      	b.n	453ca <log_output_process+0xc6>
   45556:	bf00      	nop
   45558:	0005d802 	.word	0x0005d802
   4555c:	0005d806 	.word	0x0005d806
   45560:	0005c1d8 	.word	0x0005c1d8
   45564:	0005d7fd 	.word	0x0005d7fd
   45568:	0005d362 	.word	0x0005d362
   4556c:	0005c1ec 	.word	0x0005c1ec
   45570:	0005d82b 	.word	0x0005d82b
   45574:	0005d831 	.word	0x0005d831
   45578:	0005d835 	.word	0x0005d835
   4557c:	2001b55c 	.word	0x2001b55c
   45580:	2001b558 	.word	0x2001b558
   45584:	0005d80f 	.word	0x0005d80f
   45588:	00055e75 	.word	0x00055e75
   4558c:	00055e59 	.word	0x00055e59
   45590:	00055eab 	.word	0x00055eab
   45594:	0005d83a 	.word	0x0005d83a
   45598:	0006098d 	.word	0x0006098d
   4559c:	0005f09b 	.word	0x0005f09b
   455a0:	000607c2 	.word	0x000607c2
   455a4:	0005d12e 	.word	0x0005d12e
   455a8:	0005d22f 	.word	0x0005d22f

000455ac <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   455ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   455b0:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   455b2:	684b      	ldr	r3, [r1, #4]
   455b4:	4605      	mov	r5, r0
   455b6:	460c      	mov	r4, r1
   455b8:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   455ba:	688e      	ldr	r6, [r1, #8]
   455bc:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
   455be:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   455c2:	b15b      	cbz	r3, 455dc <log_output_msg_process+0x30>
   455c4:	4a13      	ldr	r2, [pc, #76]	; (45614 <log_output_msg_process+0x68>)
   455c6:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   455c8:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   455cc:	2900      	cmp	r1, #0
   455ce:	db1f      	blt.n	45610 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   455d0:	7820      	ldrb	r0, [r4, #0]
   455d2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   455d6:	f7ff fe09 	bl	451ec <log_source_name_get>
   455da:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   455dc:	4621      	mov	r1, r4
   455de:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
   455e2:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   455e4:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   455e8:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   455ea:	eb01 0402 	add.w	r4, r1, r2
   455ee:	bf08      	it	eq
   455f0:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
   455f2:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   455f6:	e9cd 0803 	strd	r0, r8, [sp, #12]
   455fa:	e9cd 1401 	strd	r1, r4, [sp, #4]
   455fe:	2200      	movs	r2, #0
   45600:	4631      	mov	r1, r6
   45602:	4628      	mov	r0, r5
   45604:	9700      	str	r7, [sp, #0]
   45606:	f7ff fe7d 	bl	45304 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   4560a:	b006      	add	sp, #24
   4560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   45610:	2300      	movs	r3, #0
   45612:	e7e3      	b.n	455dc <log_output_msg_process+0x30>
   45614:	0005bf34 	.word	0x0005bf34

00045618 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   45618:	2100      	movs	r1, #0
   4561a:	2301      	movs	r3, #1
   4561c:	4a06      	ldr	r2, [pc, #24]	; (45638 <log_output_timestamp_freq_set+0x20>)
   4561e:	4290      	cmp	r0, r2
   45620:	d806      	bhi.n	45630 <log_output_timestamp_freq_set+0x18>
   45622:	4a06      	ldr	r2, [pc, #24]	; (4563c <log_output_timestamp_freq_set+0x24>)
   45624:	b901      	cbnz	r1, 45628 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   45626:	2301      	movs	r3, #1
   45628:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   4562a:	4b05      	ldr	r3, [pc, #20]	; (45640 <log_output_timestamp_freq_set+0x28>)
   4562c:	6018      	str	r0, [r3, #0]
}
   4562e:	4770      	bx	lr
		timestamp_div *= 2U;
   45630:	2101      	movs	r1, #1
		frequency /= 2U;
   45632:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   45634:	005b      	lsls	r3, r3, #1
   45636:	e7f2      	b.n	4561e <log_output_timestamp_freq_set+0x6>
   45638:	000f4240 	.word	0x000f4240
   4563c:	2001b558 	.word	0x2001b558
   45640:	2001b55c 	.word	0x2001b55c

00045644 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   45644:	4b01      	ldr	r3, [pc, #4]	; (4564c <format_set+0x8>)
	return 0;
}
   45646:	2000      	movs	r0, #0
	log_format_current = log_type;
   45648:	6019      	str	r1, [r3, #0]
}
   4564a:	4770      	bx	lr
   4564c:	2001b574 	.word	0x2001b574

00045650 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   45650:	2201      	movs	r2, #1
   45652:	4b02      	ldr	r3, [pc, #8]	; (4565c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   45654:	4802      	ldr	r0, [pc, #8]	; (45660 <panic+0x10>)
   45656:	701a      	strb	r2, [r3, #0]
   45658:	f010 bc2e 	b.w	55eb8 <log_output_flush>
   4565c:	2001de2c 	.word	0x2001de2c
   45660:	0005c21c 	.word	0x0005c21c

00045664 <process>:
{
   45664:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   45666:	4b06      	ldr	r3, [pc, #24]	; (45680 <process+0x1c>)
{
   45668:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   4566a:	6818      	ldr	r0, [r3, #0]
   4566c:	f7ff fd4a 	bl	45104 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   45670:	4621      	mov	r1, r4
}
   45672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   45676:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   45678:	220f      	movs	r2, #15
   4567a:	4802      	ldr	r0, [pc, #8]	; (45684 <process+0x20>)
   4567c:	4718      	bx	r3
   4567e:	bf00      	nop
   45680:	2001b574 	.word	0x2001b574
   45684:	0005c21c 	.word	0x0005c21c

00045688 <char_out>:
{
   45688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4568a:	460d      	mov	r5, r1
   4568c:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   4568e:	4f06      	ldr	r7, [pc, #24]	; (456a8 <char_out+0x20>)
   45690:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   45692:	42b4      	cmp	r4, r6
   45694:	d101      	bne.n	4569a <char_out+0x12>
}
   45696:	4628      	mov	r0, r5
   45698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   4569a:	f814 1b01 	ldrb.w	r1, [r4], #1
   4569e:	68bb      	ldr	r3, [r7, #8]
   456a0:	4801      	ldr	r0, [pc, #4]	; (456a8 <char_out+0x20>)
   456a2:	685b      	ldr	r3, [r3, #4]
   456a4:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   456a6:	e7f4      	b.n	45692 <char_out+0xa>
   456a8:	0005bc54 	.word	0x0005bc54

000456ac <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
   456ac:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   456ae:	4804      	ldr	r0, [pc, #16]	; (456c0 <disk_init+0x14>)
   456b0:	f015 f8fe 	bl	5a8b0 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   456b4:	4b03      	ldr	r3, [pc, #12]	; (456c4 <disk_init+0x18>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
   456b6:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   456b8:	e9c3 3300 	strd	r3, r3, [r3]
   456bc:	bd08      	pop	{r3, pc}
   456be:	bf00      	nop
   456c0:	2001b578 	.word	0x2001b578
   456c4:	2001b58c 	.word	0x2001b58c

000456c8 <disk_access_get_di>:
{
   456c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   456ca:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
   456cc:	f7fb fb92 	bl	40df4 <strlen>
   456d0:	4605      	mov	r5, r0
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   456d2:	4f12      	ldr	r7, [pc, #72]	; (4571c <disk_access_get_di+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
   456d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   456d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   456dc:	4810      	ldr	r0, [pc, #64]	; (45720 <disk_access_get_di+0x58>)
   456de:	f00c ff19 	bl	52514 <z_impl_k_mutex_lock>
   456e2:	683c      	ldr	r4, [r7, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   456e4:	42bc      	cmp	r4, r7
   456e6:	d10a      	bne.n	456fe <disk_access_get_di+0x36>
	struct disk_info *disk = NULL, *itr;
   456e8:	2400      	movs	r4, #0
   456ea:	e012      	b.n	45712 <disk_access_get_di+0x4a>
		if (strlen(itr->name) != name_len) {
   456ec:	68a0      	ldr	r0, [r4, #8]
   456ee:	f7fb fb81 	bl	40df4 <strlen>
   456f2:	42a8      	cmp	r0, r5
   456f4:	d006      	beq.n	45704 <disk_access_get_di+0x3c>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   456f6:	687b      	ldr	r3, [r7, #4]
   456f8:	429c      	cmp	r4, r3
   456fa:	d0f5      	beq.n	456e8 <disk_access_get_di+0x20>
   456fc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
   456fe:	2c00      	cmp	r4, #0
   45700:	d1f4      	bne.n	456ec <disk_access_get_di+0x24>
   45702:	e7f1      	b.n	456e8 <disk_access_get_di+0x20>
		if (strncmp(name, itr->name, name_len) == 0) {
   45704:	462a      	mov	r2, r5
   45706:	4630      	mov	r0, r6
   45708:	68a1      	ldr	r1, [r4, #8]
   4570a:	f015 fdf6 	bl	5b2fa <strncmp>
   4570e:	2800      	cmp	r0, #0
   45710:	d1f1      	bne.n	456f6 <disk_access_get_di+0x2e>
	return z_impl_k_mutex_unlock(mutex);
   45712:	4803      	ldr	r0, [pc, #12]	; (45720 <disk_access_get_di+0x58>)
   45714:	f00c ff78 	bl	52608 <z_impl_k_mutex_unlock>
}
   45718:	4620      	mov	r0, r4
   4571a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4571c:	2001b58c 	.word	0x2001b58c
   45720:	2001b578 	.word	0x2001b578

00045724 <disk_access_register>:
{
   45724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   45726:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   45728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4572c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45730:	4812      	ldr	r0, [pc, #72]	; (4577c <disk_access_register+0x58>)
   45732:	f00c feef 	bl	52514 <z_impl_k_mutex_lock>
	if ((disk == NULL) || (disk->name == NULL)) {
   45736:	b10c      	cbz	r4, 4573c <disk_access_register+0x18>
   45738:	68a0      	ldr	r0, [r4, #8]
   4573a:	b988      	cbnz	r0, 45760 <disk_access_register+0x3c>
		LOG_ERR("invalid disk interface!!");
   4573c:	4b10      	ldr	r3, [pc, #64]	; (45780 <disk_access_register+0x5c>)
		LOG_ERR("disk interface already registered!!");
   4573e:	9302      	str	r3, [sp, #8]
   45740:	2300      	movs	r3, #0
   45742:	2201      	movs	r2, #1
   45744:	4618      	mov	r0, r3
   45746:	e9cd 3300 	strd	r3, r3, [sp]
   4574a:	490e      	ldr	r1, [pc, #56]	; (45784 <disk_access_register+0x60>)
   4574c:	f010 fbc2 	bl	55ed4 <z_log_msg_runtime_create.constprop.0>
		rc = -EINVAL;
   45750:	f06f 0415 	mvn.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
   45754:	4809      	ldr	r0, [pc, #36]	; (4577c <disk_access_register+0x58>)
   45756:	f00c ff57 	bl	52608 <z_impl_k_mutex_unlock>
}
   4575a:	4620      	mov	r0, r4
   4575c:	b004      	add	sp, #16
   4575e:	bd10      	pop	{r4, pc}
	if (disk_access_get_di(disk->name) != NULL) {
   45760:	f7ff ffb2 	bl	456c8 <disk_access_get_di>
   45764:	b108      	cbz	r0, 4576a <disk_access_register+0x46>
		LOG_ERR("disk interface already registered!!");
   45766:	4b08      	ldr	r3, [pc, #32]	; (45788 <disk_access_register+0x64>)
   45768:	e7e9      	b.n	4573e <disk_access_register+0x1a>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   4576a:	4b08      	ldr	r3, [pc, #32]	; (4578c <disk_access_register+0x68>)
   4576c:	685a      	ldr	r2, [r3, #4]

	node->next = list;
	node->prev = tail;
   4576e:	e9c4 3200 	strd	r3, r2, [r4]

	tail->next = node;
   45772:	6014      	str	r4, [r2, #0]
	list->tail = node;
   45774:	605c      	str	r4, [r3, #4]
	int rc = 0;
   45776:	4604      	mov	r4, r0
   45778:	e7ec      	b.n	45754 <disk_access_register+0x30>
   4577a:	bf00      	nop
   4577c:	2001b578 	.word	0x2001b578
   45780:	0005d876 	.word	0x0005d876
   45784:	0005bf54 	.word	0x0005bf54
   45788:	0005d88f 	.word	0x0005d88f
   4578c:	2001b58c 	.word	0x2001b58c

00045790 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   45790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45794:	4605      	mov	r5, r0
   45796:	460e      	mov	r6, r1
   45798:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   4579a:	4c10      	ldr	r4, [pc, #64]	; (457dc <z_impl_zsock_socket+0x4c>)
   4579c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 457e0 <z_impl_zsock_socket+0x50>
   457a0:	4544      	cmp	r4, r8
   457a2:	d307      	bcc.n	457b4 <z_impl_zsock_socket+0x24>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   457a4:	f010 fceb 	bl	5617e <__errno>
   457a8:	236a      	movs	r3, #106	; 0x6a
   457aa:	6003      	str	r3, [r0, #0]
	return -1;
}
   457ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   457b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
   457b4:	6823      	ldr	r3, [r4, #0]
   457b6:	42ab      	cmp	r3, r5
   457b8:	d000      	beq.n	457bc <z_impl_zsock_socket+0x2c>
   457ba:	b963      	cbnz	r3, 457d6 <z_impl_zsock_socket+0x46>
		if (!sock_family->is_supported(family, type, proto)) {
   457bc:	463a      	mov	r2, r7
   457be:	4631      	mov	r1, r6
   457c0:	4628      	mov	r0, r5
   457c2:	68a3      	ldr	r3, [r4, #8]
   457c4:	4798      	blx	r3
   457c6:	b130      	cbz	r0, 457d6 <z_impl_zsock_socket+0x46>
		return sock_family->handler(family, type, proto);
   457c8:	463a      	mov	r2, r7
   457ca:	4631      	mov	r1, r6
   457cc:	4628      	mov	r0, r5
   457ce:	68e3      	ldr	r3, [r4, #12]
}
   457d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
   457d4:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   457d6:	3410      	adds	r4, #16
   457d8:	e7e2      	b.n	457a0 <z_impl_zsock_socket+0x10>
   457da:	bf00      	nop
   457dc:	0005bf24 	.word	0x0005bf24
   457e0:	0005bf34 	.word	0x0005bf34

000457e4 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   457e4:	4b01      	ldr	r3, [pc, #4]	; (457ec <socket_offload_dns_register+0x8>)
   457e6:	6018      	str	r0, [r3, #0]
}
   457e8:	4770      	bx	lr
   457ea:	bf00      	nop
   457ec:	2001b594 	.word	0x2001b594

000457f0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   457f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   457f4:	4605      	mov	r5, r0
	__asm__ volatile(
   457f6:	f04f 0320 	mov.w	r3, #32
   457fa:	f3ef 8611 	mrs	r6, BASEPRI
   457fe:	f383 8812 	msr	BASEPRI_MAX, r3
   45802:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   45806:	f04f 090c 	mov.w	r9, #12
	return list->head;
   4580a:	4b0d      	ldr	r3, [pc, #52]	; (45840 <pm_state_notify+0x50>)
   4580c:	4f0d      	ldr	r7, [pc, #52]	; (45844 <pm_state_notify+0x54>)
   4580e:	681c      	ldr	r4, [r3, #0]
   45810:	f8df 8034 	ldr.w	r8, [pc, #52]	; 45848 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   45814:	b92c      	cbnz	r4, 45822 <pm_state_notify+0x32>
	__asm__ volatile(
   45816:	f386 8811 	msr	BASEPRI, r6
   4581a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   4581e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   45822:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   45826:	2d00      	cmp	r5, #0
   45828:	bf18      	it	ne
   4582a:	4613      	movne	r3, r2
		if (callback) {
   4582c:	b12b      	cbz	r3, 4583a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   4582e:	f898 2014 	ldrb.w	r2, [r8, #20]
   45832:	fb09 f202 	mul.w	r2, r9, r2
   45836:	5cb8      	ldrb	r0, [r7, r2]
   45838:	4798      	blx	r3
	return node->next;
   4583a:	6824      	ldr	r4, [r4, #0]
   4583c:	e7ea      	b.n	45814 <pm_state_notify+0x24>
   4583e:	bf00      	nop
   45840:	2001b5b4 	.word	0x2001b5b4
   45844:	2001b5a8 	.word	0x2001b5a8
   45848:	2001bc78 	.word	0x2001bc78

0004584c <pm_resume_devices>:
{
   4584c:	b570      	push	{r4, r5, r6, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
   4584e:	4d08      	ldr	r5, [pc, #32]	; (45870 <pm_resume_devices+0x24>)
		pm_device_action_run(__pm_device_slots_start[i],
   45850:	4e08      	ldr	r6, [pc, #32]	; (45874 <pm_resume_devices+0x28>)
	for (int i = (num_susp - 1); i >= 0; i--) {
   45852:	682c      	ldr	r4, [r5, #0]
   45854:	3c01      	subs	r4, #1
   45856:	2c00      	cmp	r4, #0
   45858:	da02      	bge.n	45860 <pm_resume_devices+0x14>
	num_susp = 0;
   4585a:	2300      	movs	r3, #0
   4585c:	602b      	str	r3, [r5, #0]
}
   4585e:	bd70      	pop	{r4, r5, r6, pc}
		pm_device_action_run(__pm_device_slots_start[i],
   45860:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   45864:	2101      	movs	r1, #1
   45866:	f000 f9bd 	bl	45be4 <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
   4586a:	3c01      	subs	r4, #1
   4586c:	e7f3      	b.n	45856 <pm_resume_devices+0xa>
   4586e:	bf00      	nop
   45870:	2001b598 	.word	0x2001b598
   45874:	2001aab4 	.word	0x2001aab4

00045878 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   45878:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   4587a:	ab0b      	add	r3, sp, #44	; 0x2c
   4587c:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   4587e:	9303      	str	r3, [sp, #12]
   45880:	4b05      	ldr	r3, [pc, #20]	; (45898 <z_log_msg_runtime_create.constprop.0+0x20>)
   45882:	2201      	movs	r2, #1
   45884:	9302      	str	r3, [sp, #8]
   45886:	2300      	movs	r3, #0
   45888:	4618      	mov	r0, r3
   4588a:	e9cd 3300 	strd	r3, r3, [sp]
   4588e:	f7ff fccf 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   45892:	b007      	add	sp, #28
   45894:	f85d fb04 	ldr.w	pc, [sp], #4
   45898:	0005d8b8 	.word	0x0005d8b8

0004589c <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   4589c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   4589e:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   458a0:	4b16      	ldr	r3, [pc, #88]	; (458fc <pm_system_resume+0x60>)
   458a2:	7d1c      	ldrb	r4, [r3, #20]
   458a4:	f004 031f 	and.w	r3, r4, #31
   458a8:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   458aa:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   458ac:	4b14      	ldr	r3, [pc, #80]	; (45900 <pm_system_resume+0x64>)
   458ae:	0961      	lsrs	r1, r4, #5
   458b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   458b4:	e8d3 1fef 	ldaex	r1, [r3]
   458b8:	ea01 0500 	and.w	r5, r1, r0
   458bc:	e8c3 5fe6 	stlex	r6, r5, [r3]
   458c0:	2e00      	cmp	r6, #0
   458c2:	d1f7      	bne.n	458b4 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   458c4:	420a      	tst	r2, r1
   458c6:	d013      	beq.n	458f0 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   458c8:	4b0e      	ldr	r3, [pc, #56]	; (45904 <pm_system_resume+0x68>)
   458ca:	4d0f      	ldr	r5, [pc, #60]	; (45908 <pm_system_resume+0x6c>)
   458cc:	b18b      	cbz	r3, 458f2 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   458ce:	230c      	movs	r3, #12
   458d0:	4363      	muls	r3, r4
   458d2:	18ea      	adds	r2, r5, r3
   458d4:	7851      	ldrb	r1, [r2, #1]
   458d6:	5ce8      	ldrb	r0, [r5, r3]
   458d8:	f010 fa87 	bl	55dea <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   458dc:	2000      	movs	r0, #0
   458de:	f7ff ff87 	bl	457f0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   458e2:	230c      	movs	r3, #12
   458e4:	435c      	muls	r4, r3
   458e6:	2300      	movs	r3, #0
   458e8:	192a      	adds	r2, r5, r4
   458ea:	512b      	str	r3, [r5, r4]
   458ec:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   458f0:	bd70      	pop	{r4, r5, r6, pc}
   458f2:	f383 8811 	msr	BASEPRI, r3
   458f6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   458fa:	e7ef      	b.n	458dc <pm_system_resume+0x40>
   458fc:	2001bc78 	.word	0x2001bc78
   45900:	2001b5bc 	.word	0x2001b5bc
   45904:	00055deb 	.word	0x00055deb
   45908:	2001b5a8 	.word	0x2001b5a8

0004590c <pm_state_force>:

bool pm_state_force(uint8_t cpu, const struct pm_state_info *info)
{
   4590c:	b510      	push	{r4, lr}
	__asm__ volatile(
   4590e:	f04f 0320 	mov.w	r3, #32
   45912:	f3ef 8411 	mrs	r4, BASEPRI
   45916:	f383 8812 	msr	BASEPRI_MAX, r3
   4591a:	f3bf 8f6f 	isb	sy

	__ASSERT(info->state < PM_STATE_COUNT,
		 "Invalid power state %d!", info->state);

	key = k_spin_lock(&pm_forced_state_lock);
	z_cpus_pm_forced_state[cpu] = *info;
   4591e:	220c      	movs	r2, #12
   45920:	4b05      	ldr	r3, [pc, #20]	; (45938 <pm_state_force+0x2c>)
   45922:	fb02 3300 	mla	r3, r2, r0, r3
   45926:	c907      	ldmia	r1, {r0, r1, r2}
   45928:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	__asm__ volatile(
   4592c:	f384 8811 	msr	BASEPRI, r4
   45930:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&pm_forced_state_lock, key);

	return true;
}
   45934:	2001      	movs	r0, #1
   45936:	bd10      	pop	{r4, pc}
   45938:	2001b59c 	.word	0x2001b59c

0004593c <pm_system_suspend>:

bool pm_system_suspend(int32_t ticks)
{
   4593c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t id = CURRENT_CPU;
   45940:	4b6d      	ldr	r3, [pc, #436]	; (45af8 <pm_system_suspend+0x1bc>)
{
   45942:	4606      	mov	r6, r0
	uint8_t id = CURRENT_CPU;
   45944:	7d1c      	ldrb	r4, [r3, #20]
{
   45946:	b088      	sub	sp, #32
	__asm__ volatile(
   45948:	f04f 0320 	mov.w	r3, #32
   4594c:	f3ef 8711 	mrs	r7, BASEPRI
   45950:	f383 8812 	msr	BASEPRI_MAX, r3
   45954:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   45958:	250c      	movs	r5, #12
   4595a:	4365      	muls	r5, r4
   4595c:	4b67      	ldr	r3, [pc, #412]	; (45afc <pm_system_suspend+0x1c0>)
   4595e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 45b20 <pm_system_suspend+0x1e4>
   45962:	5d59      	ldrb	r1, [r3, r5]
   45964:	195a      	adds	r2, r3, r5
   45966:	2900      	cmp	r1, #0
   45968:	d072      	beq.n	45a50 <pm_system_suspend+0x114>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   4596a:	ca07      	ldmia	r2, {r0, r1, r2}
   4596c:	eb08 0c05 	add.w	ip, r8, r5
   45970:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   45974:	2200      	movs	r2, #0
   45976:	555a      	strb	r2, [r3, r5]
	__asm__ volatile(
   45978:	f387 8811 	msr	BASEPRI, r7
   4597c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   45980:	230c      	movs	r3, #12
   45982:	4363      	muls	r3, r4
   45984:	eb08 0203 	add.w	r2, r8, r3
   45988:	f818 3003 	ldrb.w	r3, [r8, r3]
   4598c:	2b00      	cmp	r3, #0
   4598e:	f000 80a5 	beq.w	45adc <pm_system_suspend+0x1a0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   45992:	1c73      	adds	r3, r6, #1
   45994:	d00f      	beq.n	459b6 <pm_system_suspend+0x7a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   45996:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   4599a:	2100      	movs	r1, #0
   4599c:	6897      	ldr	r7, [r2, #8]
   4599e:	4d58      	ldr	r5, [pc, #352]	; (45b00 <pm_system_suspend+0x1c4>)
   459a0:	2300      	movs	r3, #0
   459a2:	fbe7 5100 	umlal	r5, r1, r7, r0
   459a6:	4a57      	ldr	r2, [pc, #348]	; (45b04 <pm_system_suspend+0x1c8>)
   459a8:	4628      	mov	r0, r5
   459aa:	f7fb f8b1 	bl	40b10 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   459ae:	2101      	movs	r1, #1
   459b0:	1a30      	subs	r0, r6, r0
   459b2:	f015 f995 	bl	5ace0 <z_set_timeout_expiry>
			     z_cpus_pm_state[id].exit_latency_us),
				     true);
	}

#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if ((z_cpus_pm_state[id].state != PM_STATE_RUNTIME_IDLE) &&
   459b6:	230c      	movs	r3, #12
   459b8:	4363      	muls	r3, r4
   459ba:	f818 3003 	ldrb.w	r3, [r8, r3]
   459be:	4f52      	ldr	r7, [pc, #328]	; (45b08 <pm_system_suspend+0x1cc>)
   459c0:	2b01      	cmp	r3, #1
   459c2:	d016      	beq.n	459f2 <pm_system_suspend+0xb6>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   459c4:	e8d7 5fef 	ldaex	r5, [r7]
   459c8:	3d01      	subs	r5, #1
   459ca:	e8c7 5fe3 	stlex	r3, r5, [r7]
   459ce:	2b00      	cmp	r3, #0
   459d0:	d1f8      	bne.n	459c4 <pm_system_suspend+0x88>
   459d2:	b975      	cbnz	r5, 459f2 <pm_system_suspend+0xb6>
	devc = z_device_get_all_static(&devs);
   459d4:	a807      	add	r0, sp, #28
   459d6:	f00c fb11 	bl	51ffc <z_device_get_all_static>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   459da:	231c      	movs	r3, #28
   459dc:	4358      	muls	r0, r3
	num_susp = 0;
   459de:	f8df a144 	ldr.w	sl, [pc, #324]	; 45b24 <pm_system_suspend+0x1e8>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   459e2:	381c      	subs	r0, #28
	num_susp = 0;
   459e4:	f8ca 5000 	str.w	r5, [sl]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   459e8:	9d07      	ldr	r5, [sp, #28]
   459ea:	4405      	add	r5, r0
   459ec:	9b07      	ldr	r3, [sp, #28]
   459ee:	429d      	cmp	r5, r3
   459f0:	d239      	bcs.n	45a66 <pm_system_suspend+0x12a>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   459f2:	f00d f9cd 	bl	52d90 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   459f6:	2001      	movs	r0, #1
   459f8:	f7ff fefa 	bl	457f0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   459fc:	4b43      	ldr	r3, [pc, #268]	; (45b0c <pm_system_suspend+0x1d0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   459fe:	0962      	lsrs	r2, r4, #5
   45a00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   45a04:	2201      	movs	r2, #1
   45a06:	f004 011f 	and.w	r1, r4, #31
   45a0a:	408a      	lsls	r2, r1
   45a0c:	e8d3 0fef 	ldaex	r0, [r3]
   45a10:	4310      	orrs	r0, r2
   45a12:	e8c3 0fe1 	stlex	r1, r0, [r3]
   45a16:	2900      	cmp	r1, #0
   45a18:	d1f8      	bne.n	45a0c <pm_system_suspend+0xd0>
	if (pm_state_set != NULL) {
   45a1a:	4b3d      	ldr	r3, [pc, #244]	; (45b10 <pm_system_suspend+0x1d4>)
   45a1c:	b143      	cbz	r3, 45a30 <pm_system_suspend+0xf4>
		pm_state_set(info->state, info->substate_id);
   45a1e:	230c      	movs	r3, #12
   45a20:	435c      	muls	r4, r3
   45a22:	eb08 0304 	add.w	r3, r8, r4
   45a26:	7859      	ldrb	r1, [r3, #1]
   45a28:	f818 0004 	ldrb.w	r0, [r8, r4]
   45a2c:	f010 f9d1 	bl	55dd2 <pm_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   45a30:	e8d7 3fef 	ldaex	r3, [r7]
   45a34:	1c5a      	adds	r2, r3, #1
   45a36:	e8c7 2fe1 	stlex	r1, r2, [r7]
   45a3a:	2900      	cmp	r1, #0
   45a3c:	d1f8      	bne.n	45a30 <pm_system_suspend+0xf4>
	state_set(&z_cpus_pm_state[id]);
	pm_stats_stop();

	/* Wake up sequence starts here */
#if defined(CONFIG_PM_DEVICE) && !defined(CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE)
	if (atomic_add(&z_cpus_active, 1) == 0) {
   45a3e:	b90b      	cbnz	r3, 45a44 <pm_system_suspend+0x108>
		pm_resume_devices();
   45a40:	f7ff ff04 	bl	4584c <pm_resume_devices>
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   45a44:	f7ff ff2a 	bl	4589c <pm_system_resume>
	k_sched_unlock();
   45a48:	f00d f9b6 	bl	52db8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   45a4c:	2001      	movs	r0, #1
   45a4e:	e046      	b.n	45ade <pm_system_suspend+0x1a2>
		info = pm_policy_next_state(id, ticks);
   45a50:	4601      	mov	r1, r0
   45a52:	4620      	mov	r0, r4
   45a54:	f000 f868 	bl	45b28 <pm_policy_next_state>
		if (info != NULL) {
   45a58:	2800      	cmp	r0, #0
   45a5a:	d08d      	beq.n	45978 <pm_system_suspend+0x3c>
			z_cpus_pm_state[id] = *info;
   45a5c:	c807      	ldmia	r0, {r0, r1, r2}
   45a5e:	4445      	add	r5, r8
   45a60:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   45a64:	e788      	b.n	45978 <pm_system_suspend+0x3c>
		if (pm_device_is_busy(dev) || pm_device_state_is_locked(dev)
   45a66:	4628      	mov	r0, r5
   45a68:	f010 faaa 	bl	55fc0 <pm_device_is_busy>
   45a6c:	2800      	cmp	r0, #0
   45a6e:	d141      	bne.n	45af4 <pm_system_suspend+0x1b8>
   45a70:	4628      	mov	r0, r5
   45a72:	f010 fab5 	bl	55fe0 <pm_device_state_is_locked>
   45a76:	2800      	cmp	r0, #0
   45a78:	d13c      	bne.n	45af4 <pm_system_suspend+0x1b8>
		    || pm_device_wakeup_is_enabled(dev) ||
   45a7a:	4628      	mov	r0, r5
   45a7c:	f010 faa8 	bl	55fd0 <pm_device_wakeup_is_enabled>
   45a80:	4606      	mov	r6, r0
   45a82:	bbb8      	cbnz	r0, 45af4 <pm_system_suspend+0x1b8>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
   45a84:	4601      	mov	r1, r0
   45a86:	4628      	mov	r0, r5
   45a88:	f000 f8ac 	bl	45be4 <pm_device_action_run>
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
   45a8c:	f020 0320 	bic.w	r3, r0, #32
   45a90:	3378      	adds	r3, #120	; 0x78
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
   45a92:	4681      	mov	r9, r0
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
   45a94:	d02e      	beq.n	45af4 <pm_system_suspend+0x1b8>
   45a96:	f110 0f86 	cmn.w	r0, #134	; 0x86
   45a9a:	d02b      	beq.n	45af4 <pm_system_suspend+0x1b8>
		} else if (ret < 0) {
   45a9c:	2800      	cmp	r0, #0
   45a9e:	da21      	bge.n	45ae4 <pm_system_suspend+0x1a8>
			LOG_ERR("Device %s did not enter %s state (%d)",
   45aa0:	2001      	movs	r0, #1
   45aa2:	682d      	ldr	r5, [r5, #0]
   45aa4:	f000 f892 	bl	45bcc <pm_device_state_str>
   45aa8:	4b1a      	ldr	r3, [pc, #104]	; (45b14 <pm_system_suspend+0x1d8>)
   45aaa:	2201      	movs	r2, #1
   45aac:	e9cd 0904 	strd	r0, r9, [sp, #16]
   45ab0:	e9cd 6301 	strd	r6, r3, [sp, #4]
   45ab4:	4630      	mov	r0, r6
   45ab6:	4633      	mov	r3, r6
   45ab8:	4917      	ldr	r1, [pc, #92]	; (45b18 <pm_system_suspend+0x1dc>)
   45aba:	9503      	str	r5, [sp, #12]
   45abc:	9600      	str	r6, [sp, #0]
   45abe:	f7ff fedb 	bl	45878 <z_log_msg_runtime_create.constprop.0>
			pm_resume_devices();
   45ac2:	f7ff fec3 	bl	4584c <pm_resume_devices>
			z_cpus_pm_state[id].state = PM_STATE_ACTIVE;
   45ac6:	230c      	movs	r3, #12
   45ac8:	4363      	muls	r3, r4
   45aca:	f808 6003 	strb.w	r6, [r8, r3]
   45ace:	e8d7 3fef 	ldaex	r3, [r7]
   45ad2:	3301      	adds	r3, #1
   45ad4:	e8c7 3fe2 	stlex	r2, r3, [r7]
   45ad8:	2a00      	cmp	r2, #0
   45ada:	d1f8      	bne.n	45ace <pm_system_suspend+0x192>
		return false;
   45adc:	2000      	movs	r0, #0
}
   45ade:	b008      	add	sp, #32
   45ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		__pm_device_slots_start[num_susp] = dev;
   45ae4:	f8da 3000 	ldr.w	r3, [sl]
   45ae8:	4a0c      	ldr	r2, [pc, #48]	; (45b1c <pm_system_suspend+0x1e0>)
   45aea:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
		num_susp++;
   45aee:	3301      	adds	r3, #1
   45af0:	f8ca 3000 	str.w	r3, [sl]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   45af4:	3d1c      	subs	r5, #28
   45af6:	e779      	b.n	459ec <pm_system_suspend+0xb0>
   45af8:	2001bc78 	.word	0x2001bc78
   45afc:	2001b59c 	.word	0x2001b59c
   45b00:	000f423f 	.word	0x000f423f
   45b04:	000f4240 	.word	0x000f4240
   45b08:	2001a56c 	.word	0x2001a56c
   45b0c:	2001b5bc 	.word	0x2001b5bc
   45b10:	00055dd3 	.word	0x00055dd3
   45b14:	0005d8b8 	.word	0x0005d8b8
   45b18:	0005c014 	.word	0x0005c014
   45b1c:	2001aab4 	.word	0x2001aab4
   45b20:	2001b5a8 	.word	0x2001b5a8
   45b24:	2001b598 	.word	0x2001b598

00045b28 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   45b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45b2c:	b085      	sub	sp, #20
   45b2e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   45b30:	a903      	add	r1, sp, #12
   45b32:	f000 f843 	bl	45bbc <pm_state_cpu_get_all>
   45b36:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   45b3a:	4604      	mov	r4, r0
   45b3c:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   45b40:	4b1b      	ldr	r3, [pc, #108]	; (45bb0 <pm_policy_next_state+0x88>)
   45b42:	9d03      	ldr	r5, [sp, #12]
   45b44:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   45b48:	1e43      	subs	r3, r0, #1
   45b4a:	b21b      	sxth	r3, r3
   45b4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   45b50:	f8df 8064 	ldr.w	r8, [pc, #100]	; 45bb8 <pm_policy_next_state+0x90>
   45b54:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   45b58:	b924      	cbnz	r4, 45b64 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   45b5a:	46a1      	mov	r9, r4
}
   45b5c:	4648      	mov	r0, r9
   45b5e:	b005      	add	sp, #20
   45b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45b64:	46c4      	mov	ip, r8
   45b66:	4659      	mov	r1, fp
   45b68:	6868      	ldr	r0, [r5, #4]
   45b6a:	2300      	movs	r3, #0
   45b6c:	fbe0 c107 	umlal	ip, r1, r0, r7
   45b70:	4a10      	ldr	r2, [pc, #64]	; (45bb4 <pm_policy_next_state+0x8c>)
   45b72:	4660      	mov	r0, ip
   45b74:	f7fa ffcc 	bl	40b10 <__aeabi_uldivmod>
   45b78:	46c4      	mov	ip, r8
   45b7a:	4659      	mov	r1, fp
   45b7c:	9001      	str	r0, [sp, #4]
   45b7e:	68a8      	ldr	r0, [r5, #8]
   45b80:	2300      	movs	r3, #0
   45b82:	fbe0 c107 	umlal	ip, r1, r0, r7
   45b86:	4a0b      	ldr	r2, [pc, #44]	; (45bb4 <pm_policy_next_state+0x8c>)
   45b88:	4660      	mov	r0, ip
   45b8a:	f7fa ffc1 	bl	40b10 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   45b8e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
   45b92:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   45b94:	d001      	beq.n	45b9a <pm_policy_next_state+0x72>
   45b96:	4582      	cmp	sl, r0
   45b98:	d905      	bls.n	45ba6 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   45b9a:	1c73      	adds	r3, r6, #1
   45b9c:	d0de      	beq.n	45b5c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   45b9e:	9b01      	ldr	r3, [sp, #4]
   45ba0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   45ba2:	42b0      	cmp	r0, r6
   45ba4:	d9da      	bls.n	45b5c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   45ba6:	3c01      	subs	r4, #1
   45ba8:	b2a4      	uxth	r4, r4
   45baa:	3d0c      	subs	r5, #12
   45bac:	e7d4      	b.n	45b58 <pm_policy_next_state+0x30>
   45bae:	bf00      	nop
   45bb0:	2001a570 	.word	0x2001a570
   45bb4:	000f4240 	.word	0x000f4240
   45bb8:	000f423f 	.word	0x000f423f

00045bbc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   45bbc:	b908      	cbnz	r0, 45bc2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   45bbe:	4b02      	ldr	r3, [pc, #8]	; (45bc8 <pm_state_cpu_get_all+0xc>)
   45bc0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   45bc2:	2000      	movs	r0, #0
   45bc4:	4770      	bx	lr
   45bc6:	bf00      	nop
   45bc8:	0005c22c 	.word	0x0005c22c

00045bcc <pm_device_state_str>:
	[PM_DEVICE_ACTION_TURN_ON] = PM_DEVICE_STATE_OFF,
};

const char *pm_device_state_str(enum pm_device_state state)
{
	switch (state) {
   45bcc:	2803      	cmp	r0, #3
   45bce:	bf9a      	itte	ls
   45bd0:	4b02      	ldrls	r3, [pc, #8]	; (45bdc <pm_device_state_str+0x10>)
   45bd2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
   45bd6:	4802      	ldrhi	r0, [pc, #8]	; (45be0 <pm_device_state_str+0x14>)
	case PM_DEVICE_STATE_OFF:
		return "off";
	default:
		return "";
	}
}
   45bd8:	4770      	bx	lr
   45bda:	bf00      	nop
   45bdc:	0005c22c 	.word	0x0005c22c
   45be0:	0005fcce 	.word	0x0005fcce

00045be4 <pm_device_action_run>:

int pm_device_action_run(const struct device *dev,
			 enum pm_device_action action)
{
   45be4:	b570      	push	{r4, r5, r6, lr}
	struct pm_device *pm = dev->pm;
   45be6:	6984      	ldr	r4, [r0, #24]
{
   45be8:	4603      	mov	r3, r0
   45bea:	460d      	mov	r5, r1
	int ret;

	if (pm == NULL) {
   45bec:	b38c      	cbz	r4, 45c52 <pm_device_action_run+0x6e>
		return -ENOSYS;
	}

	if (pm_device_state_is_locked(dev)) {
   45bee:	f010 f9f7 	bl	55fe0 <pm_device_state_is_locked>
   45bf2:	bb88      	cbnz	r0, 45c58 <pm_device_action_run+0x74>
		return -EPERM;
	}

	/* Validate action against current state */
	if (pm->state == action_target_state[action]) {
   45bf4:	481d      	ldr	r0, [pc, #116]	; (45c6c <pm_device_action_run+0x88>)
   45bf6:	7a22      	ldrb	r2, [r4, #8]
   45bf8:	5c46      	ldrb	r6, [r0, r1]
   45bfa:	42b2      	cmp	r2, r6
   45bfc:	d02f      	beq.n	45c5e <pm_device_action_run+0x7a>
		return -EALREADY;
	}
	if (pm->state != action_expected_state[action]) {
   45bfe:	481c      	ldr	r0, [pc, #112]	; (45c70 <pm_device_action_run+0x8c>)
   45c00:	5c40      	ldrb	r0, [r0, r1]
   45c02:	4290      	cmp	r0, r2
   45c04:	d12e      	bne.n	45c64 <pm_device_action_run+0x80>
		return -ENOTSUP;
	}

	ret = pm->action_cb(dev, action);
   45c06:	4618      	mov	r0, r3
   45c08:	68e2      	ldr	r2, [r4, #12]
   45c0a:	4790      	blx	r2
	if (ret < 0) {
   45c0c:	2800      	cmp	r0, #0
   45c0e:	da11      	bge.n	45c34 <pm_device_action_run+0x50>
		 * physical behavior.
		 *
		 * The function will still return the error code so the domain
		 * can take whatever action is more appropriated.
		 */
		switch (action) {
   45c10:	2d02      	cmp	r5, #2
   45c12:	d00d      	beq.n	45c30 <pm_device_action_run+0x4c>
   45c14:	2d03      	cmp	r5, #3
   45c16:	d10c      	bne.n	45c32 <pm_device_action_run+0x4e>
		case PM_DEVICE_ACTION_TURN_ON:
			/* Store an error flag when the transition explicitly fails */
			if (ret != -ENOTSUP) {
   45c18:	f110 0f86 	cmn.w	r0, #134	; 0x86
   45c1c:	d008      	beq.n	45c30 <pm_device_action_run+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45c1e:	1d23      	adds	r3, r4, #4
   45c20:	e8d3 1fef 	ldaex	r1, [r3]
   45c24:	f041 0102 	orr.w	r1, r1, #2
   45c28:	e8c3 1fe2 	stlex	r2, r1, [r3]
   45c2c:	2a00      	cmp	r2, #0
   45c2e:	d1f7      	bne.n	45c20 <pm_device_action_run+0x3c>
				atomic_set_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
			}
			__fallthrough;
		case PM_DEVICE_ACTION_TURN_OFF:
			pm->state = action_target_state[action];
   45c30:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
		atomic_clear_bit(&pm->flags, PM_DEVICE_FLAG_TURN_ON_FAILED);
	}

	return 0;
}
   45c32:	bd70      	pop	{r4, r5, r6, pc}
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
   45c34:	2d02      	cmp	r5, #2
	pm->state = action_target_state[action];
   45c36:	7226      	strb	r6, [r4, #8]
	if (action == PM_DEVICE_ACTION_TURN_OFF) {
   45c38:	d001      	beq.n	45c3e <pm_device_action_run+0x5a>
	return 0;
   45c3a:	2000      	movs	r0, #0
   45c3c:	e7f9      	b.n	45c32 <pm_device_action_run+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45c3e:	3404      	adds	r4, #4
   45c40:	e8d4 3fef 	ldaex	r3, [r4]
   45c44:	f023 0302 	bic.w	r3, r3, #2
   45c48:	e8c4 3fe2 	stlex	r2, r3, [r4]
   45c4c:	2a00      	cmp	r2, #0
   45c4e:	d0f4      	beq.n	45c3a <pm_device_action_run+0x56>
   45c50:	e7f6      	b.n	45c40 <pm_device_action_run+0x5c>
		return -ENOSYS;
   45c52:	f06f 0057 	mvn.w	r0, #87	; 0x57
   45c56:	e7ec      	b.n	45c32 <pm_device_action_run+0x4e>
		return -EPERM;
   45c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   45c5c:	e7e9      	b.n	45c32 <pm_device_action_run+0x4e>
		return -EALREADY;
   45c5e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   45c62:	e7e6      	b.n	45c32 <pm_device_action_run+0x4e>
		return -ENOTSUP;
   45c64:	f06f 0085 	mvn.w	r0, #133	; 0x85
   45c68:	e7e3      	b.n	45c32 <pm_device_action_run+0x4e>
   45c6a:	bf00      	nop
   45c6c:	0005d8fd 	.word	0x0005d8fd
   45c70:	0005d8f9 	.word	0x0005d8f9

00045c74 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   45c74:	4901      	ldr	r1, [pc, #4]	; (45c7c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   45c76:	2210      	movs	r2, #16
	str	r2, [r1]
   45c78:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   45c7a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   45c7c:	e000ed10 	.word	0xe000ed10

00045c80 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   45c80:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   45c82:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   45c84:	f380 8811 	msr	BASEPRI, r0
	isb
   45c88:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   45c8c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   45c90:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   45c92:	b662      	cpsie	i
	isb
   45c94:	f3bf 8f6f 	isb	sy

	bx	lr
   45c98:	4770      	bx	lr
   45c9a:	bf00      	nop

00045c9c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   45c9c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   45c9e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   45ca0:	f381 8811 	msr	BASEPRI, r1

	wfe
   45ca4:	bf20      	wfe

	msr	BASEPRI, r0
   45ca6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   45caa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   45cac:	4770      	bx	lr
   45cae:	bf00      	nop

00045cb0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   45cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   45cb4:	4680      	mov	r8, r0

	if (esf != NULL) {
   45cb6:	460d      	mov	r5, r1
{
   45cb8:	b08c      	sub	sp, #48	; 0x30
	if (esf != NULL) {
   45cba:	2900      	cmp	r1, #0
   45cbc:	d077      	beq.n	45dae <z_arm_fatal_error+0xfe>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   45cbe:	2400      	movs	r4, #0
   45cc0:	688b      	ldr	r3, [r1, #8]
   45cc2:	2201      	movs	r2, #1
   45cc4:	9305      	str	r3, [sp, #20]
   45cc6:	684b      	ldr	r3, [r1, #4]
   45cc8:	4620      	mov	r0, r4
   45cca:	9304      	str	r3, [sp, #16]
   45ccc:	680b      	ldr	r3, [r1, #0]
   45cce:	493b      	ldr	r1, [pc, #236]	; (45dbc <z_arm_fatal_error+0x10c>)
   45cd0:	9303      	str	r3, [sp, #12]
   45cd2:	4b3b      	ldr	r3, [pc, #236]	; (45dc0 <z_arm_fatal_error+0x110>)
   45cd4:	e9cd 4400 	strd	r4, r4, [sp]
   45cd8:	9302      	str	r3, [sp, #8]
   45cda:	4623      	mov	r3, r4
   45cdc:	f010 f988 	bl	55ff0 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   45ce0:	696b      	ldr	r3, [r5, #20]
   45ce2:	2201      	movs	r2, #1
   45ce4:	9305      	str	r3, [sp, #20]
   45ce6:	692b      	ldr	r3, [r5, #16]
   45ce8:	4620      	mov	r0, r4
   45cea:	9304      	str	r3, [sp, #16]
   45cec:	68eb      	ldr	r3, [r5, #12]
   45cee:	4933      	ldr	r1, [pc, #204]	; (45dbc <z_arm_fatal_error+0x10c>)
   45cf0:	9303      	str	r3, [sp, #12]
   45cf2:	4b34      	ldr	r3, [pc, #208]	; (45dc4 <z_arm_fatal_error+0x114>)
   45cf4:	9400      	str	r4, [sp, #0]
   45cf6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   45cfa:	4623      	mov	r3, r4
   45cfc:	f010 f978 	bl	55ff0 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   45d00:	69eb      	ldr	r3, [r5, #28]
   45d02:	2201      	movs	r2, #1
   45d04:	9303      	str	r3, [sp, #12]
   45d06:	4b30      	ldr	r3, [pc, #192]	; (45dc8 <z_arm_fatal_error+0x118>)
   45d08:	4620      	mov	r0, r4
   45d0a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   45d0e:	492b      	ldr	r1, [pc, #172]	; (45dbc <z_arm_fatal_error+0x10c>)
   45d10:	4623      	mov	r3, r4
   45d12:	9400      	str	r4, [sp, #0]
   45d14:	f010 f96c 	bl	55ff0 <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   45d18:	462f      	mov	r7, r5
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   45d1a:	4626      	mov	r6, r4
   45d1c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 45dd4 <z_arm_fatal_error+0x124>
   45d20:	f8df a098 	ldr.w	sl, [pc, #152]	; 45dbc <z_arm_fatal_error+0x10c>
   45d24:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   45d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   45d2c:	1ce3      	adds	r3, r4, #3
   45d2e:	9309      	str	r3, [sp, #36]	; 0x24
   45d30:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
   45d34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   45d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   45d3c:	1ca3      	adds	r3, r4, #2
   45d3e:	9307      	str	r3, [sp, #28]
   45d40:	edcd 7a08 	vstr	s15, [sp, #32]
   45d44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   45d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   45d4c:	1c63      	adds	r3, r4, #1
   45d4e:	9305      	str	r3, [sp, #20]
   45d50:	edcd 7a06 	vstr	s15, [sp, #24]
   45d54:	edd7 7a08 	vldr	s15, [r7, #32]
   45d58:	2300      	movs	r3, #0
   45d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   45d5e:	e9cd 9402 	strd	r9, r4, [sp, #8]
   45d62:	edcd 7a04 	vstr	s15, [sp, #16]
   45d66:	2201      	movs	r2, #1
   45d68:	4651      	mov	r1, sl
   45d6a:	4618      	mov	r0, r3
   45d6c:	e9cd 6600 	strd	r6, r6, [sp]
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   45d70:	3404      	adds	r4, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   45d72:	f010 f93d 	bl	55ff0 <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   45d76:	2c10      	cmp	r4, #16
   45d78:	f107 0710 	add.w	r7, r7, #16
   45d7c:	d1d2      	bne.n	45d24 <z_arm_fatal_error+0x74>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
   45d7e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   45d80:	2201      	movs	r2, #1
   45d82:	9303      	str	r3, [sp, #12]
   45d84:	4b11      	ldr	r3, [pc, #68]	; (45dcc <z_arm_fatal_error+0x11c>)
   45d86:	490d      	ldr	r1, [pc, #52]	; (45dbc <z_arm_fatal_error+0x10c>)
   45d88:	e9cd 6301 	strd	r6, r3, [sp, #4]
   45d8c:	2300      	movs	r3, #0
   45d8e:	9600      	str	r6, [sp, #0]
   45d90:	4618      	mov	r0, r3
   45d92:	f010 f92d 	bl	55ff0 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   45d96:	69ab      	ldr	r3, [r5, #24]
   45d98:	2201      	movs	r2, #1
   45d9a:	9303      	str	r3, [sp, #12]
   45d9c:	4b0c      	ldr	r3, [pc, #48]	; (45dd0 <z_arm_fatal_error+0x120>)
   45d9e:	4907      	ldr	r1, [pc, #28]	; (45dbc <z_arm_fatal_error+0x10c>)
   45da0:	e9cd 6301 	strd	r6, r3, [sp, #4]
   45da4:	2300      	movs	r3, #0
   45da6:	9600      	str	r6, [sp, #0]
   45da8:	4618      	mov	r0, r3
   45daa:	f010 f921 	bl	55ff0 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   45dae:	4629      	mov	r1, r5
   45db0:	4640      	mov	r0, r8
}
   45db2:	b00c      	add	sp, #48	; 0x30
   45db4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
   45db8:	f00c b934 	b.w	52024 <z_fatal_error>
   45dbc:	0005c00c 	.word	0x0005c00c
   45dc0:	0005d901 	.word	0x0005d901
   45dc4:	0005d930 	.word	0x0005d930
   45dc8:	0005d95f 	.word	0x0005d95f
   45dcc:	0005d9b1 	.word	0x0005d9b1
   45dd0:	0005d9c0 	.word	0x0005d9c0
   45dd4:	0005d96e 	.word	0x0005d96e

00045dd8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   45dd8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   45dda:	2800      	cmp	r0, #0
   45ddc:	db07      	blt.n	45dee <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   45dde:	2301      	movs	r3, #1
   45de0:	0941      	lsrs	r1, r0, #5
   45de2:	4a03      	ldr	r2, [pc, #12]	; (45df0 <arch_irq_enable+0x18>)
   45de4:	f000 001f 	and.w	r0, r0, #31
   45de8:	4083      	lsls	r3, r0
   45dea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   45dee:	4770      	bx	lr
   45df0:	e000e100 	.word	0xe000e100

00045df4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   45df4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   45df6:	2800      	cmp	r0, #0
   45df8:	db0c      	blt.n	45e14 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   45dfa:	2201      	movs	r2, #1
   45dfc:	4906      	ldr	r1, [pc, #24]	; (45e18 <arch_irq_disable+0x24>)
   45dfe:	0943      	lsrs	r3, r0, #5
   45e00:	f000 001f 	and.w	r0, r0, #31
   45e04:	4082      	lsls	r2, r0
   45e06:	3320      	adds	r3, #32
   45e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   45e0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   45e10:	f3bf 8f6f 	isb	sy
}
   45e14:	4770      	bx	lr
   45e16:	bf00      	nop
   45e18:	e000e100 	.word	0xe000e100

00045e1c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   45e1c:	4b05      	ldr	r3, [pc, #20]	; (45e34 <arch_irq_is_enabled+0x18>)
   45e1e:	0942      	lsrs	r2, r0, #5
   45e20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   45e24:	2301      	movs	r3, #1
   45e26:	f000 001f 	and.w	r0, r0, #31
   45e2a:	fa03 f000 	lsl.w	r0, r3, r0
}
   45e2e:	4010      	ands	r0, r2
   45e30:	4770      	bx	lr
   45e32:	bf00      	nop
   45e34:	e000e100 	.word	0xe000e100

00045e38 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   45e38:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   45e3a:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
   45e3c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45e40:	bfac      	ite	ge
   45e42:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45e46:	4b06      	ldrlt	r3, [pc, #24]	; (45e60 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45e48:	ea4f 1141 	mov.w	r1, r1, lsl #5
   45e4c:	b2c9      	uxtb	r1, r1
   45e4e:	bfab      	itete	ge
   45e50:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45e54:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45e58:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   45e5c:	5419      	strblt	r1, [r3, r0]
}
   45e5e:	4770      	bx	lr
   45e60:	e000ed14 	.word	0xe000ed14

00045e64 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   45e64:	bf30      	wfi
    b z_SysNmiOnReset
   45e66:	f7ff bffd 	b.w	45e64 <z_SysNmiOnReset>
   45e6a:	bf00      	nop

00045e6c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   45e6c:	4a14      	ldr	r2, [pc, #80]	; (45ec0 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   45e6e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   45e70:	4b14      	ldr	r3, [pc, #80]	; (45ec4 <z_arm_prep_c+0x58>)
   45e72:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   45e76:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   45e78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   45e7c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   45e80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   45e84:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   45e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   45e8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   45e90:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   45e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   45e98:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   45e9c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   45ea0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   45ea4:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   45ea8:	2300      	movs	r3, #0
   45eaa:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   45eae:	f00c f959 	bl	52164 <z_bss_zero>
	z_data_copy();
   45eb2:	f00d f8bd 	bl	53030 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   45eb6:	f000 fbb3 	bl	46620 <z_arm_interrupt_init>
	z_cstart();
   45eba:	f00c f993 	bl	521e4 <z_cstart>
   45ebe:	bf00      	nop
   45ec0:	00040000 	.word	0x00040000
   45ec4:	e000ed00 	.word	0xe000ed00

00045ec8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   45ec8:	4a09      	ldr	r2, [pc, #36]	; (45ef0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   45eca:	490a      	ldr	r1, [pc, #40]	; (45ef4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   45ecc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   45ece:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   45ed0:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   45ed2:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   45ed4:	4908      	ldr	r1, [pc, #32]	; (45ef8 <arch_swap+0x30>)
   45ed6:	684b      	ldr	r3, [r1, #4]
   45ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   45edc:	604b      	str	r3, [r1, #4]
   45ede:	2300      	movs	r3, #0
   45ee0:	f383 8811 	msr	BASEPRI, r3
   45ee4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   45ee8:	6893      	ldr	r3, [r2, #8]
}
   45eea:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   45eec:	4770      	bx	lr
   45eee:	bf00      	nop
   45ef0:	2001bc78 	.word	0x2001bc78
   45ef4:	0005c890 	.word	0x0005c890
   45ef8:	e000ed00 	.word	0xe000ed00

00045efc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   45efc:	4922      	ldr	r1, [pc, #136]	; (45f88 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   45efe:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   45f00:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   45f04:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   45f08:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   45f0a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   45f0e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   45f12:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   45f16:	d103      	bne.n	45f20 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   45f18:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   45f1c:	ec80 8a10 	vstmia	r0, {s16-s31}

00045f20 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   45f20:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   45f22:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   45f26:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   45f2a:	4f18      	ldr	r7, [pc, #96]	; (45f8c <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   45f2c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   45f30:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
   45f32:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   45f34:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   45f36:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   45f3a:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   45f3c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   45f3e:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   45f40:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   45f44:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   45f48:	d003      	beq.n	45f52 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   45f4a:	2300      	movs	r3, #0
    vmsr fpscr, r3
   45f4c:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   45f50:	e003      	b.n	45f5a <in_fp_endif>

00045f52 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   45f52:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   45f56:	ec90 8a10 	vldmia	r0, {s16-s31}

00045f5a <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   45f5a:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   45f5e:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   45f62:	f383 8814 	msr	CONTROL, r3
    isb
   45f66:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   45f6a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   45f6e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   45f72:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   45f76:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   45f7a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   45f7c:	f010 f857 	bl	5602e <configure_builtin_stack_guard>
    pop {r2, lr}
   45f80:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   45f84:	4770      	bx	lr
   45f86:	0000      	.short	0x0000
    ldr r1, =_kernel
   45f88:	2001bc78 	.word	0x2001bc78
    ldr v4, =_SCS_ICSR
   45f8c:	e000ed04 	.word	0xe000ed04

00045f90 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   45f90:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   45f94:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   45f96:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   45f9a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   45f9e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   45fa0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   45fa4:	2902      	cmp	r1, #2
    beq _oops
   45fa6:	d0ff      	beq.n	45fa8 <_oops>

00045fa8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   45fa8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   45faa:	f010 f831 	bl	56010 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   45fae:	bd01      	pop	{r0, pc}

00045fb0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   45fb0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   45fb4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   45fb6:	490d      	ldr	r1, [pc, #52]	; (45fec <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   45fb8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   45fbc:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   45fbe:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   45fc2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   45fc6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   45fc8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   45fcc:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   45fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   45fd4:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   45fd8:	2300      	movs	r3, #0
   45fda:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   45fdc:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   45fe0:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   45fe2:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   45fe4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   45fe8:	4770      	bx	lr
   45fea:	bf00      	nop
   45fec:	000557d5 	.word	0x000557d5

00045ff0 <arch_switch_to_main_thread>:
   45ff0:	2300      	movs	r3, #0
   45ff2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   45ff6:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_CPU_CORTEX_M) && defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   45ffa:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   45ffe:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   46002:	f3bf 8f6f 	isb	sy
   46006:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   4600a:	4b09      	ldr	r3, [pc, #36]	; (46030 <arch_switch_to_main_thread+0x40>)
   4600c:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   4600e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   46010:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   46014:	4610      	mov	r0, r2
   46016:	f381 8809 	msr	PSP, r1
   4601a:	2100      	movs	r1, #0
   4601c:	b663      	cpsie	if
   4601e:	f381 8811 	msr	BASEPRI, r1
   46022:	f3bf 8f6f 	isb	sy
   46026:	2200      	movs	r2, #0
   46028:	2300      	movs	r3, #0
   4602a:	f00f fbd3 	bl	557d4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   4602e:	bf00      	nop
   46030:	2001bc78 	.word	0x2001bc78

00046034 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   46034:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   46036:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   46038:	4a0b      	ldr	r2, [pc, #44]	; (46068 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   4603a:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
   4603c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   4603e:	bf1e      	ittt	ne
	movne	r1, #0
   46040:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   46042:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
   46044:	f014 fc25 	blne	5a892 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   46048:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   4604a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   4604e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   46052:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   46056:	4905      	ldr	r1, [pc, #20]	; (4606c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   46058:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   4605a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   4605c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   4605e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   46062:	4903      	ldr	r1, [pc, #12]	; (46070 <_isr_wrapper+0x3c>)
	bx r1
   46064:	4708      	bx	r1
   46066:	0000      	.short	0x0000
	ldr r2, =_kernel
   46068:	2001bc78 	.word	0x2001bc78
	ldr r1, =_sw_isr_table
   4606c:	0005bce0 	.word	0x0005bce0
	ldr r1, =z_arm_int_exit
   46070:	00046075 	.word	0x00046075

00046074 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   46074:	4b04      	ldr	r3, [pc, #16]	; (46088 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   46076:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   46078:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
   4607a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   4607c:	d003      	beq.n	46086 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   4607e:	4903      	ldr	r1, [pc, #12]	; (4608c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   46080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   46084:	600a      	str	r2, [r1, #0]

00046086 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   46086:	4770      	bx	lr
	ldr r3, =_kernel
   46088:	2001bc78 	.word	0x2001bc78
	ldr r1, =_SCS_ICSR
   4608c:	e000ed04 	.word	0xe000ed04

00046090 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   46090:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   46092:	2400      	movs	r4, #0
   46094:	4b3d      	ldr	r3, [pc, #244]	; (4618c <mem_manage_fault.constprop.0+0xfc>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   46096:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   46098:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   4609a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   4609c:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   4609e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   460a0:	2201      	movs	r2, #1
   460a2:	4620      	mov	r0, r4
   460a4:	e9cd 4400 	strd	r4, r4, [sp]
   460a8:	4939      	ldr	r1, [pc, #228]	; (46190 <mem_manage_fault.constprop.0+0x100>)
   460aa:	f00f ffc4 	bl	56036 <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   460ae:	4b39      	ldr	r3, [pc, #228]	; (46194 <mem_manage_fault.constprop.0+0x104>)
   460b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   460b2:	06dd      	lsls	r5, r3, #27
   460b4:	d509      	bpl.n	460ca <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   460b6:	4b38      	ldr	r3, [pc, #224]	; (46198 <mem_manage_fault.constprop.0+0x108>)
   460b8:	2201      	movs	r2, #1
   460ba:	e9cd 4301 	strd	r4, r3, [sp, #4]
   460be:	4620      	mov	r0, r4
   460c0:	4623      	mov	r3, r4
   460c2:	4933      	ldr	r1, [pc, #204]	; (46190 <mem_manage_fault.constprop.0+0x100>)
   460c4:	9400      	str	r4, [sp, #0]
   460c6:	f00f ffb6 	bl	56036 <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   460ca:	4b32      	ldr	r3, [pc, #200]	; (46194 <mem_manage_fault.constprop.0+0x104>)
   460cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   460ce:	0718      	lsls	r0, r3, #28
   460d0:	d509      	bpl.n	460e6 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   460d2:	4b32      	ldr	r3, [pc, #200]	; (4619c <mem_manage_fault.constprop.0+0x10c>)
   460d4:	2201      	movs	r2, #1
   460d6:	9302      	str	r3, [sp, #8]
   460d8:	2300      	movs	r3, #0
   460da:	492d      	ldr	r1, [pc, #180]	; (46190 <mem_manage_fault.constprop.0+0x100>)
   460dc:	4618      	mov	r0, r3
   460de:	e9cd 3300 	strd	r3, r3, [sp]
   460e2:	f00f ffa8 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   460e6:	4d2b      	ldr	r5, [pc, #172]	; (46194 <mem_manage_fault.constprop.0+0x104>)
   460e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   460ea:	0799      	lsls	r1, r3, #30
   460ec:	d51e      	bpl.n	4612c <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
   460ee:	2400      	movs	r4, #0
   460f0:	4b2b      	ldr	r3, [pc, #172]	; (461a0 <mem_manage_fault.constprop.0+0x110>)
   460f2:	2201      	movs	r2, #1
   460f4:	9302      	str	r3, [sp, #8]
   460f6:	4620      	mov	r0, r4
   460f8:	4623      	mov	r3, r4
   460fa:	e9cd 4400 	strd	r4, r4, [sp]
   460fe:	4924      	ldr	r1, [pc, #144]	; (46190 <mem_manage_fault.constprop.0+0x100>)
   46100:	f00f ff99 	bl	56036 <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   46104:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   46106:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   46108:	0612      	lsls	r2, r2, #24
   4610a:	d50f      	bpl.n	4612c <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   4610c:	9303      	str	r3, [sp, #12]
   4610e:	4b25      	ldr	r3, [pc, #148]	; (461a4 <mem_manage_fault.constprop.0+0x114>)
   46110:	2201      	movs	r2, #1
   46112:	e9cd 4301 	strd	r4, r3, [sp, #4]
   46116:	4620      	mov	r0, r4
   46118:	4623      	mov	r3, r4
   4611a:	491d      	ldr	r1, [pc, #116]	; (46190 <mem_manage_fault.constprop.0+0x100>)
   4611c:	9400      	str	r4, [sp, #0]
   4611e:	f00f ff8a 	bl	56036 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   46122:	b11f      	cbz	r7, 4612c <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   46124:	6aab      	ldr	r3, [r5, #40]	; 0x28
   46126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   4612a:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   4612c:	4b19      	ldr	r3, [pc, #100]	; (46194 <mem_manage_fault.constprop.0+0x104>)
   4612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   46130:	07dc      	lsls	r4, r3, #31
   46132:	d509      	bpl.n	46148 <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
   46134:	4b1c      	ldr	r3, [pc, #112]	; (461a8 <mem_manage_fault.constprop.0+0x118>)
   46136:	2201      	movs	r2, #1
   46138:	9302      	str	r3, [sp, #8]
   4613a:	2300      	movs	r3, #0
   4613c:	4914      	ldr	r1, [pc, #80]	; (46190 <mem_manage_fault.constprop.0+0x100>)
   4613e:	4618      	mov	r0, r3
   46140:	e9cd 3300 	strd	r3, r3, [sp]
   46144:	f00f ff77 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   46148:	4b12      	ldr	r3, [pc, #72]	; (46194 <mem_manage_fault.constprop.0+0x104>)
   4614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   4614c:	0698      	lsls	r0, r3, #26
   4614e:	d509      	bpl.n	46164 <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
   46150:	4b16      	ldr	r3, [pc, #88]	; (461ac <mem_manage_fault.constprop.0+0x11c>)
   46152:	2201      	movs	r2, #1
   46154:	9302      	str	r3, [sp, #8]
   46156:	2300      	movs	r3, #0
   46158:	490d      	ldr	r1, [pc, #52]	; (46190 <mem_manage_fault.constprop.0+0x100>)
   4615a:	4618      	mov	r0, r3
   4615c:	e9cd 3300 	strd	r3, r3, [sp]
   46160:	f00f ff69 	bl	56036 <z_log_msg_runtime_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   46164:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   46166:	4b0b      	ldr	r3, [pc, #44]	; (46194 <mem_manage_fault.constprop.0+0x104>)
   46168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   4616a:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   4616c:	bf58      	it	pl
   4616e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   46170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   46172:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   46174:	bf42      	ittt	mi
   46176:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   46178:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   4617c:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   4617e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   46180:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   46184:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   46186:	7030      	strb	r0, [r6, #0]

	return reason;
}
   46188:	b005      	add	sp, #20
   4618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4618c:	0005d9ee 	.word	0x0005d9ee
   46190:	0005c00c 	.word	0x0005c00c
   46194:	e000ed00 	.word	0xe000ed00
   46198:	0005da04 	.word	0x0005da04
   4619c:	0005da37 	.word	0x0005da37
   461a0:	0005da4a 	.word	0x0005da4a
   461a4:	0005da62 	.word	0x0005da62
   461a8:	0005da78 	.word	0x0005da78
   461ac:	0005da97 	.word	0x0005da97

000461b0 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   461b0:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   461b2:	2400      	movs	r4, #0
   461b4:	4b3b      	ldr	r3, [pc, #236]	; (462a4 <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   461b6:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
   461b8:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   461ba:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   461bc:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   461be:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   461c0:	2201      	movs	r2, #1
   461c2:	4620      	mov	r0, r4
   461c4:	e9cd 4400 	strd	r4, r4, [sp]
   461c8:	4937      	ldr	r1, [pc, #220]	; (462a8 <bus_fault.constprop.0+0xf8>)
   461ca:	f00f ff34 	bl	56036 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   461ce:	4b37      	ldr	r3, [pc, #220]	; (462ac <bus_fault.constprop.0+0xfc>)
   461d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   461d2:	04db      	lsls	r3, r3, #19
   461d4:	d509      	bpl.n	461ea <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   461d6:	4b36      	ldr	r3, [pc, #216]	; (462b0 <bus_fault.constprop.0+0x100>)
   461d8:	2201      	movs	r2, #1
   461da:	e9cd 4301 	strd	r4, r3, [sp, #4]
   461de:	4620      	mov	r0, r4
   461e0:	4623      	mov	r3, r4
   461e2:	4931      	ldr	r1, [pc, #196]	; (462a8 <bus_fault.constprop.0+0xf8>)
   461e4:	9400      	str	r4, [sp, #0]
   461e6:	f00f ff26 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   461ea:	4b30      	ldr	r3, [pc, #192]	; (462ac <bus_fault.constprop.0+0xfc>)
   461ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   461ee:	051d      	lsls	r5, r3, #20
   461f0:	d509      	bpl.n	46206 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   461f2:	4b30      	ldr	r3, [pc, #192]	; (462b4 <bus_fault.constprop.0+0x104>)
   461f4:	2201      	movs	r2, #1
   461f6:	9302      	str	r3, [sp, #8]
   461f8:	2300      	movs	r3, #0
   461fa:	492b      	ldr	r1, [pc, #172]	; (462a8 <bus_fault.constprop.0+0xf8>)
   461fc:	4618      	mov	r0, r3
   461fe:	e9cd 3300 	strd	r3, r3, [sp]
   46202:	f00f ff18 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   46206:	4d29      	ldr	r5, [pc, #164]	; (462ac <bus_fault.constprop.0+0xfc>)
   46208:	6aab      	ldr	r3, [r5, #40]	; 0x28
   4620a:	059c      	lsls	r4, r3, #22
   4620c:	d51e      	bpl.n	4624c <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   4620e:	2400      	movs	r4, #0
   46210:	4b29      	ldr	r3, [pc, #164]	; (462b8 <bus_fault.constprop.0+0x108>)
   46212:	2201      	movs	r2, #1
   46214:	4620      	mov	r0, r4
   46216:	9302      	str	r3, [sp, #8]
   46218:	e9cd 4400 	strd	r4, r4, [sp]
   4621c:	4623      	mov	r3, r4
   4621e:	4922      	ldr	r1, [pc, #136]	; (462a8 <bus_fault.constprop.0+0xf8>)
   46220:	f00f ff09 	bl	56036 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   46224:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   46226:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   46228:	0410      	lsls	r0, r2, #16
   4622a:	d50f      	bpl.n	4624c <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   4622c:	9303      	str	r3, [sp, #12]
   4622e:	4b23      	ldr	r3, [pc, #140]	; (462bc <bus_fault.constprop.0+0x10c>)
   46230:	2201      	movs	r2, #1
   46232:	e9cd 4301 	strd	r4, r3, [sp, #4]
   46236:	4620      	mov	r0, r4
   46238:	4623      	mov	r3, r4
   4623a:	491b      	ldr	r1, [pc, #108]	; (462a8 <bus_fault.constprop.0+0xf8>)
   4623c:	9400      	str	r4, [sp, #0]
   4623e:	f00f fefa 	bl	56036 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   46242:	b11f      	cbz	r7, 4624c <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   46244:	6aab      	ldr	r3, [r5, #40]	; 0x28
   46246:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   4624a:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   4624c:	4b17      	ldr	r3, [pc, #92]	; (462ac <bus_fault.constprop.0+0xfc>)
   4624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   46250:	0559      	lsls	r1, r3, #21
   46252:	d509      	bpl.n	46268 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   46254:	4b1a      	ldr	r3, [pc, #104]	; (462c0 <bus_fault.constprop.0+0x110>)
   46256:	2201      	movs	r2, #1
   46258:	9302      	str	r3, [sp, #8]
   4625a:	2300      	movs	r3, #0
   4625c:	4912      	ldr	r1, [pc, #72]	; (462a8 <bus_fault.constprop.0+0xf8>)
   4625e:	4618      	mov	r0, r3
   46260:	e9cd 3300 	strd	r3, r3, [sp]
   46264:	f00f fee7 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   46268:	4a10      	ldr	r2, [pc, #64]	; (462ac <bus_fault.constprop.0+0xfc>)
   4626a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   4626c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   46270:	d012      	beq.n	46298 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   46272:	4b14      	ldr	r3, [pc, #80]	; (462c4 <bus_fault.constprop.0+0x114>)
   46274:	9302      	str	r3, [sp, #8]
   46276:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   46278:	2201      	movs	r2, #1
   4627a:	4618      	mov	r0, r3
   4627c:	e9cd 3300 	strd	r3, r3, [sp]
   46280:	4909      	ldr	r1, [pc, #36]	; (462a8 <bus_fault.constprop.0+0xf8>)
   46282:	f00f fed8 	bl	56036 <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   46286:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   46288:	4a08      	ldr	r2, [pc, #32]	; (462ac <bus_fault.constprop.0+0xfc>)
   4628a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   4628c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   46290:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   46292:	7030      	strb	r0, [r6, #0]

	return reason;
}
   46294:	b005      	add	sp, #20
   46296:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   46298:	6a92      	ldr	r2, [r2, #40]	; 0x28
   4629a:	0492      	lsls	r2, r2, #18
   4629c:	d5f3      	bpl.n	46286 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   4629e:	4a0a      	ldr	r2, [pc, #40]	; (462c8 <bus_fault.constprop.0+0x118>)
   462a0:	9202      	str	r2, [sp, #8]
   462a2:	e7e9      	b.n	46278 <bus_fault.constprop.0+0xc8>
   462a4:	0005dac6 	.word	0x0005dac6
   462a8:	0005c00c 	.word	0x0005c00c
   462ac:	e000ed00 	.word	0xe000ed00
   462b0:	0005dadc 	.word	0x0005dadc
   462b4:	0005da37 	.word	0x0005da37
   462b8:	0005daed 	.word	0x0005daed
   462bc:	0005db06 	.word	0x0005db06
   462c0:	0005db1b 	.word	0x0005db1b
   462c4:	0005db36 	.word	0x0005db36
   462c8:	0005da97 	.word	0x0005da97

000462cc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   462cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   462ce:	2400      	movs	r4, #0
   462d0:	4b3b      	ldr	r3, [pc, #236]	; (463c0 <usage_fault.constprop.0+0xf4>)
   462d2:	2201      	movs	r2, #1
   462d4:	9302      	str	r3, [sp, #8]
   462d6:	4620      	mov	r0, r4
   462d8:	4623      	mov	r3, r4
   462da:	e9cd 4400 	strd	r4, r4, [sp]
   462de:	4939      	ldr	r1, [pc, #228]	; (463c4 <usage_fault.constprop.0+0xf8>)
   462e0:	f00f fea9 	bl	56036 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   462e4:	4b38      	ldr	r3, [pc, #224]	; (463c8 <usage_fault.constprop.0+0xfc>)
   462e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   462e8:	019b      	lsls	r3, r3, #6
   462ea:	d509      	bpl.n	46300 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   462ec:	4b37      	ldr	r3, [pc, #220]	; (463cc <usage_fault.constprop.0+0x100>)
   462ee:	2201      	movs	r2, #1
   462f0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   462f4:	4620      	mov	r0, r4
   462f6:	4623      	mov	r3, r4
   462f8:	4932      	ldr	r1, [pc, #200]	; (463c4 <usage_fault.constprop.0+0xf8>)
   462fa:	9400      	str	r4, [sp, #0]
   462fc:	f00f fe9b 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   46300:	4b31      	ldr	r3, [pc, #196]	; (463c8 <usage_fault.constprop.0+0xfc>)
   46302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   46304:	01dc      	lsls	r4, r3, #7
   46306:	d509      	bpl.n	4631c <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   46308:	4b31      	ldr	r3, [pc, #196]	; (463d0 <usage_fault.constprop.0+0x104>)
   4630a:	2201      	movs	r2, #1
   4630c:	9302      	str	r3, [sp, #8]
   4630e:	2300      	movs	r3, #0
   46310:	492c      	ldr	r1, [pc, #176]	; (463c4 <usage_fault.constprop.0+0xf8>)
   46312:	4618      	mov	r0, r3
   46314:	e9cd 3300 	strd	r3, r3, [sp]
   46318:	f00f fe8d 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   4631c:	4b2a      	ldr	r3, [pc, #168]	; (463c8 <usage_fault.constprop.0+0xfc>)
   4631e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   46320:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   46324:	d00a      	beq.n	4633c <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   46326:	4b2b      	ldr	r3, [pc, #172]	; (463d4 <usage_fault.constprop.0+0x108>)
   46328:	2201      	movs	r2, #1
   4632a:	9302      	str	r3, [sp, #8]
   4632c:	2300      	movs	r3, #0
   4632e:	4925      	ldr	r1, [pc, #148]	; (463c4 <usage_fault.constprop.0+0xf8>)
   46330:	4618      	mov	r0, r3
   46332:	e9cd 3300 	strd	r3, r3, [sp]
   46336:	f00f fe7e 	bl	56036 <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   4633a:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   4633c:	4b22      	ldr	r3, [pc, #136]	; (463c8 <usage_fault.constprop.0+0xfc>)
   4633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   46340:	0318      	lsls	r0, r3, #12
   46342:	d509      	bpl.n	46358 <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
   46344:	4b24      	ldr	r3, [pc, #144]	; (463d8 <usage_fault.constprop.0+0x10c>)
   46346:	2201      	movs	r2, #1
   46348:	9302      	str	r3, [sp, #8]
   4634a:	2300      	movs	r3, #0
   4634c:	491d      	ldr	r1, [pc, #116]	; (463c4 <usage_fault.constprop.0+0xf8>)
   4634e:	4618      	mov	r0, r3
   46350:	e9cd 3300 	strd	r3, r3, [sp]
   46354:	f00f fe6f 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   46358:	4b1b      	ldr	r3, [pc, #108]	; (463c8 <usage_fault.constprop.0+0xfc>)
   4635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   4635c:	0359      	lsls	r1, r3, #13
   4635e:	d509      	bpl.n	46374 <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   46360:	4b1e      	ldr	r3, [pc, #120]	; (463dc <usage_fault.constprop.0+0x110>)
   46362:	2201      	movs	r2, #1
   46364:	9302      	str	r3, [sp, #8]
   46366:	2300      	movs	r3, #0
   46368:	4916      	ldr	r1, [pc, #88]	; (463c4 <usage_fault.constprop.0+0xf8>)
   4636a:	4618      	mov	r0, r3
   4636c:	e9cd 3300 	strd	r3, r3, [sp]
   46370:	f00f fe61 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   46374:	4b14      	ldr	r3, [pc, #80]	; (463c8 <usage_fault.constprop.0+0xfc>)
   46376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   46378:	039a      	lsls	r2, r3, #14
   4637a:	d509      	bpl.n	46390 <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   4637c:	4b18      	ldr	r3, [pc, #96]	; (463e0 <usage_fault.constprop.0+0x114>)
   4637e:	2201      	movs	r2, #1
   46380:	9302      	str	r3, [sp, #8]
   46382:	2300      	movs	r3, #0
   46384:	490f      	ldr	r1, [pc, #60]	; (463c4 <usage_fault.constprop.0+0xf8>)
   46386:	4618      	mov	r0, r3
   46388:	e9cd 3300 	strd	r3, r3, [sp]
   4638c:	f00f fe53 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   46390:	4b0d      	ldr	r3, [pc, #52]	; (463c8 <usage_fault.constprop.0+0xfc>)
   46392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   46394:	03db      	lsls	r3, r3, #15
   46396:	d509      	bpl.n	463ac <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   46398:	4b12      	ldr	r3, [pc, #72]	; (463e4 <usage_fault.constprop.0+0x118>)
   4639a:	2201      	movs	r2, #1
   4639c:	9302      	str	r3, [sp, #8]
   4639e:	2300      	movs	r3, #0
   463a0:	4908      	ldr	r1, [pc, #32]	; (463c4 <usage_fault.constprop.0+0xf8>)
   463a2:	4618      	mov	r0, r3
   463a4:	e9cd 3300 	strd	r3, r3, [sp]
   463a8:	f00f fe45 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   463ac:	4a06      	ldr	r2, [pc, #24]	; (463c8 <usage_fault.constprop.0+0xfc>)

	return reason;
}
   463ae:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   463b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   463b2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   463b6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   463ba:	6293      	str	r3, [r2, #40]	; 0x28
}
   463bc:	b004      	add	sp, #16
   463be:	bd10      	pop	{r4, pc}
   463c0:	0005db4e 	.word	0x0005db4e
   463c4:	0005c00c 	.word	0x0005c00c
   463c8:	e000ed00 	.word	0xe000ed00
   463cc:	0005db66 	.word	0x0005db66
   463d0:	0005db79 	.word	0x0005db79
   463d4:	0005db93 	.word	0x0005db93
   463d8:	0005dbbd 	.word	0x0005dbbd
   463dc:	0005dbdb 	.word	0x0005dbdb
   463e0:	0005dc00 	.word	0x0005dc00
   463e4:	0005dc1a 	.word	0x0005dc1a

000463e8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   463e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   463ec:	4b75      	ldr	r3, [pc, #468]	; (465c4 <z_arm_fault+0x1dc>)
{
   463ee:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   463f0:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   463f4:	4689      	mov	r9, r1
   463f6:	4614      	mov	r4, r2
   463f8:	2600      	movs	r6, #0
   463fa:	b0a3      	sub	sp, #140	; 0x8c
   463fc:	f3c8 0708 	ubfx	r7, r8, #0, #9
   46400:	f386 8811 	msr	BASEPRI, r6
   46404:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   46408:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   4640c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   46410:	d125      	bne.n	4645e <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   46412:	f012 0301 	ands.w	r3, r2, #1
   46416:	d122      	bne.n	4645e <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   46418:	0651      	lsls	r1, r2, #25
   4641a:	d403      	bmi.n	46424 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   4641c:	0722      	lsls	r2, r4, #28
   4641e:	d40d      	bmi.n	4643c <z_arm_fault+0x54>
			*nested_exc = true;
   46420:	2601      	movs	r6, #1
   46422:	e00d      	b.n	46440 <z_arm_fault+0x58>
		PR_FAULT_INFO("Exception occurred in Secure State");
   46424:	4a68      	ldr	r2, [pc, #416]	; (465c8 <z_arm_fault+0x1e0>)
   46426:	4618      	mov	r0, r3
   46428:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4642c:	4967      	ldr	r1, [pc, #412]	; (465cc <z_arm_fault+0x1e4>)
   4642e:	2201      	movs	r2, #1
   46430:	9300      	str	r3, [sp, #0]
   46432:	f00f fe00 	bl	56036 <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   46436:	f014 0404 	ands.w	r4, r4, #4
   4643a:	d000      	beq.n	4643e <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)psp;
   4643c:	464d      	mov	r5, r9
	*nested_exc = false;
   4643e:	2600      	movs	r6, #0
	*recoverable = false;
   46440:	f04f 0900 	mov.w	r9, #0
	switch (fault) {
   46444:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   46446:	f88d 901f 	strb.w	r9, [sp, #31]
	switch (fault) {
   4644a:	2b09      	cmp	r3, #9
   4644c:	f200 80a0 	bhi.w	46590 <z_arm_fault+0x1a8>
   46450:	e8df f003 	tbb	[pc, r3]
   46454:	90989407 	.word	0x90989407
   46458:	9e9e9e9e 	.word	0x9e9e9e9e
   4645c:	9c9e      	.short	0x9c9e
		return NULL;
   4645e:	4635      	mov	r5, r6
   46460:	e7ee      	b.n	46440 <z_arm_fault+0x58>
	PR_FAULT_INFO("***** HARD FAULT *****");
   46462:	4b5b      	ldr	r3, [pc, #364]	; (465d0 <z_arm_fault+0x1e8>)
   46464:	2201      	movs	r2, #1
   46466:	e9cd 9301 	strd	r9, r3, [sp, #4]
   4646a:	2300      	movs	r3, #0
   4646c:	4957      	ldr	r1, [pc, #348]	; (465cc <z_arm_fault+0x1e4>)
   4646e:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   46470:	4f54      	ldr	r7, [pc, #336]	; (465c4 <z_arm_fault+0x1dc>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   46472:	f8cd 9000 	str.w	r9, [sp]
   46476:	f00f fdde 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
   4647a:	f88d 901f 	strb.w	r9, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   4647e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   46480:	f014 0402 	ands.w	r4, r4, #2
   46484:	d005      	beq.n	46492 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   46486:	4b53      	ldr	r3, [pc, #332]	; (465d4 <z_arm_fault+0x1ec>)
	PR_FAULT_INFO(
   46488:	e9cd 9301 	strd	r9, r3, [sp, #4]
   4648c:	f8cd 9000 	str.w	r9, [sp]
   46490:	e006      	b.n	464a0 <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   46492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   46494:	2b00      	cmp	r3, #0
   46496:	da0b      	bge.n	464b0 <z_arm_fault+0xc8>
		PR_EXC("  Debug event");
   46498:	4b4f      	ldr	r3, [pc, #316]	; (465d8 <z_arm_fault+0x1f0>)
   4649a:	9400      	str	r4, [sp, #0]
   4649c:	e9cd 4301 	strd	r4, r3, [sp, #4]
	PR_FAULT_INFO(
   464a0:	2300      	movs	r3, #0
   464a2:	2201      	movs	r2, #1
   464a4:	4618      	mov	r0, r3
   464a6:	4949      	ldr	r1, [pc, #292]	; (465cc <z_arm_fault+0x1e4>)
   464a8:	f00f fdc5 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   464ac:	2400      	movs	r4, #0
   464ae:	e030      	b.n	46512 <z_arm_fault+0x12a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   464b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   464b2:	005b      	lsls	r3, r3, #1
   464b4:	d5fa      	bpl.n	464ac <z_arm_fault+0xc4>
		PR_EXC("  Fault escalation (see below)");
   464b6:	4b49      	ldr	r3, [pc, #292]	; (465dc <z_arm_fault+0x1f4>)
   464b8:	2201      	movs	r2, #1
   464ba:	e9cd 4301 	strd	r4, r3, [sp, #4]
   464be:	4620      	mov	r0, r4
   464c0:	4623      	mov	r3, r4
   464c2:	4942      	ldr	r1, [pc, #264]	; (465cc <z_arm_fault+0x1e4>)
   464c4:	9400      	str	r4, [sp, #0]
   464c6:	f00f fdb6 	bl	56036 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   464ca:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   464cc:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   464ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   464d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   464d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   464d8:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   464dc:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   464de:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   464e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   464e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   464e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   464ec:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   464f0:	f64d 7302 	movw	r3, #57090	; 0xdf02
   464f4:	429a      	cmp	r2, r3
   464f6:	d126      	bne.n	46546 <z_arm_fault+0x15e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   464f8:	682b      	ldr	r3, [r5, #0]
   464fa:	4620      	mov	r0, r4
   464fc:	9303      	str	r3, [sp, #12]
   464fe:	4b38      	ldr	r3, [pc, #224]	; (465e0 <z_arm_fault+0x1f8>)
   46500:	9400      	str	r4, [sp, #0]
   46502:	e9cd 4301 	strd	r4, r3, [sp, #4]
   46506:	2201      	movs	r2, #1
   46508:	4623      	mov	r3, r4
   4650a:	4930      	ldr	r1, [pc, #192]	; (465cc <z_arm_fault+0x1e4>)
   4650c:	f00f fd93 	bl	56036 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   46510:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   46512:	f89d 301f 	ldrb.w	r3, [sp, #31]
   46516:	b99b      	cbnz	r3, 46540 <z_arm_fault+0x158>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   46518:	2268      	movs	r2, #104	; 0x68
   4651a:	4629      	mov	r1, r5
   4651c:	a808      	add	r0, sp, #32
   4651e:	f014 fce1 	bl	5aee4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   46522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   46524:	2e00      	cmp	r6, #0
   46526:	d047      	beq.n	465b8 <z_arm_fault+0x1d0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   46528:	f3c3 0208 	ubfx	r2, r3, #0, #9
   4652c:	b922      	cbnz	r2, 46538 <z_arm_fault+0x150>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   4652e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   46532:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   46536:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   46538:	4620      	mov	r0, r4
   4653a:	a908      	add	r1, sp, #32
   4653c:	f7ff fbb8 	bl	45cb0 <z_arm_fatal_error>
}
   46540:	b023      	add	sp, #140	; 0x8c
   46542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   46546:	6abb      	ldr	r3, [r7, #40]	; 0x28
   46548:	b2db      	uxtb	r3, r3
   4654a:	b12b      	cbz	r3, 46558 <z_arm_fault+0x170>
			reason = mem_manage_fault(esf, 1, recoverable);
   4654c:	2001      	movs	r0, #1
   4654e:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
   46552:	f7ff fd9d 	bl	46090 <mem_manage_fault.constprop.0>
   46556:	e00f      	b.n	46578 <z_arm_fault+0x190>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   46558:	6abb      	ldr	r3, [r7, #40]	; 0x28
   4655a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   4655e:	d005      	beq.n	4656c <z_arm_fault+0x184>
			reason = bus_fault(esf, 1, recoverable);
   46560:	2001      	movs	r0, #1
   46562:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
   46566:	f7ff fe23 	bl	461b0 <bus_fault.constprop.0>
   4656a:	e005      	b.n	46578 <z_arm_fault+0x190>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   4656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   4656e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   46572:	d39b      	bcc.n	464ac <z_arm_fault+0xc4>
			reason = usage_fault(esf);
   46574:	f7ff feaa 	bl	462cc <usage_fault.constprop.0>
   46578:	4604      	mov	r4, r0
   4657a:	e7ca      	b.n	46512 <z_arm_fault+0x12a>
		reason = mem_manage_fault(esf, 0, recoverable);
   4657c:	2000      	movs	r0, #0
   4657e:	f10d 011f 	add.w	r1, sp, #31
   46582:	e7e6      	b.n	46552 <z_arm_fault+0x16a>
		reason = bus_fault(esf, 0, recoverable);
   46584:	2000      	movs	r0, #0
   46586:	f10d 011f 	add.w	r1, sp, #31
   4658a:	e7ec      	b.n	46566 <z_arm_fault+0x17e>
	PR_FAULT_INFO(
   4658c:	4b15      	ldr	r3, [pc, #84]	; (465e4 <z_arm_fault+0x1fc>)
   4658e:	e77b      	b.n	46488 <z_arm_fault+0xa0>
	PR_FAULT_INFO("***** %s %d) *****",
   46590:	4a15      	ldr	r2, [pc, #84]	; (465e8 <z_arm_fault+0x200>)
   46592:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   46596:	4b15      	ldr	r3, [pc, #84]	; (465ec <z_arm_fault+0x204>)
   46598:	bf18      	it	ne
   4659a:	4613      	movne	r3, r2
   4659c:	3f10      	subs	r7, #16
   4659e:	e9cd 3703 	strd	r3, r7, [sp, #12]
   465a2:	4b13      	ldr	r3, [pc, #76]	; (465f0 <z_arm_fault+0x208>)
   465a4:	2201      	movs	r2, #1
   465a6:	9302      	str	r3, [sp, #8]
   465a8:	2300      	movs	r3, #0
   465aa:	4908      	ldr	r1, [pc, #32]	; (465cc <z_arm_fault+0x1e4>)
   465ac:	4618      	mov	r0, r3
   465ae:	e9cd 3300 	strd	r3, r3, [sp]
   465b2:	f00f fd40 	bl	56036 <z_log_msg_runtime_create.constprop.0>
}
   465b6:	e779      	b.n	464ac <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   465b8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   465bc:	f023 0301 	bic.w	r3, r3, #1
   465c0:	e7b9      	b.n	46536 <z_arm_fault+0x14e>
   465c2:	bf00      	nop
   465c4:	e000ed00 	.word	0xe000ed00
   465c8:	0005dc73 	.word	0x0005dc73
   465cc:	0005c00c 	.word	0x0005c00c
   465d0:	0005dc96 	.word	0x0005dc96
   465d4:	0005dcad 	.word	0x0005dcad
   465d8:	0005dcce 	.word	0x0005dcce
   465dc:	0005dcdc 	.word	0x0005dcdc
   465e0:	0005dcfb 	.word	0x0005dcfb
   465e4:	0005dd17 	.word	0x0005dd17
   465e8:	0005dc5a 	.word	0x0005dc5a
   465ec:	0005dc45 	.word	0x0005dc45
   465f0:	0005dd3b 	.word	0x0005dd3b

000465f4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   465f4:	4b04      	ldr	r3, [pc, #16]	; (46608 <z_arm_fault_init+0x14>)
   465f6:	695a      	ldr	r2, [r3, #20]
   465f8:	f042 0210 	orr.w	r2, r2, #16
   465fc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   465fe:	695a      	ldr	r2, [r3, #20]
   46600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   46604:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   46606:	4770      	bx	lr
   46608:	e000ed00 	.word	0xe000ed00

0004660c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   4660c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   46610:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   46614:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   46616:	4672      	mov	r2, lr
	bl z_arm_fault
   46618:	f7ff fee6 	bl	463e8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   4661c:	bd01      	pop	{r0, pc}
   4661e:	bf00      	nop

00046620 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   46620:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   46622:	2120      	movs	r1, #32
   46624:	4803      	ldr	r0, [pc, #12]	; (46634 <z_arm_interrupt_init+0x14>)
   46626:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   46628:	3301      	adds	r3, #1
   4662a:	2b41      	cmp	r3, #65	; 0x41
   4662c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   46630:	d1f9      	bne.n	46626 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   46632:	4770      	bx	lr
   46634:	e000e100 	.word	0xe000e100

00046638 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   46638:	2000      	movs	r0, #0
    msr CONTROL, r0
   4663a:	f380 8814 	msr	CONTROL, r0
    isb
   4663e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   46642:	2000      	movs	r0, #0
    msr MSPLIM, r0
   46644:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   46648:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   4664c:	f7fe fcf0 	bl	45030 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   46650:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   46652:	490e      	ldr	r1, [pc, #56]	; (4668c <__start+0x54>)
    str r0, [r1]
   46654:	6008      	str	r0, [r1, #0]
    dsb
   46656:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   4665a:	480d      	ldr	r0, [pc, #52]	; (46690 <__start+0x58>)
    msr msp, r0
   4665c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   46660:	f000 f83e 	bl	466e0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   46664:	2020      	movs	r0, #32
    msr BASEPRI, r0
   46666:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   4666a:	480a      	ldr	r0, [pc, #40]	; (46694 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   4666c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   46670:	1840      	adds	r0, r0, r1
    msr PSP, r0
   46672:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   46676:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   4667a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   4667c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   4667e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   46682:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   46686:	f7ff fbf1 	bl	45e6c <z_arm_prep_c>
   4668a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   4668c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   46690:	20022780 	.word	0x20022780
    ldr r0, =z_interrupt_stacks
   46694:	20020e40 	.word	0x20020e40

00046698 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   46698:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   4669c:	4905      	ldr	r1, [pc, #20]	; (466b4 <sys_arch_reboot+0x1c>)
   4669e:	4b06      	ldr	r3, [pc, #24]	; (466b8 <sys_arch_reboot+0x20>)
   466a0:	68ca      	ldr	r2, [r1, #12]
   466a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   466a6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   466a8:	60cb      	str	r3, [r1, #12]
   466aa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   466ae:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   466b0:	e7fd      	b.n	466ae <sys_arch_reboot+0x16>
   466b2:	bf00      	nop
   466b4:	e000ed00 	.word	0xe000ed00
   466b8:	05fa0004 	.word	0x05fa0004

000466bc <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   466bc:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   466be:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   466c0:	4906      	ldr	r1, [pc, #24]	; (466dc <z_arm_clear_arm_mpu_config+0x20>)
   466c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   466c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   466ca:	4293      	cmp	r3, r2
   466cc:	db00      	blt.n	466d0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   466ce:	4770      	bx	lr
  mpu->RNR = rnr;
   466d0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   466d4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   466d8:	3301      	adds	r3, #1
   466da:	e7f6      	b.n	466ca <z_arm_clear_arm_mpu_config+0xe>
   466dc:	e000ed00 	.word	0xe000ed00

000466e0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   466e0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   466e2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   466e4:	2400      	movs	r4, #0
   466e6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   466ea:	f7ff ffe7 	bl	466bc <z_arm_clear_arm_mpu_config>
   466ee:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   466f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   466f4:	4a0c      	ldr	r2, [pc, #48]	; (46728 <z_arm_init_arch_hw_at_boot+0x48>)
   466f6:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   466fa:	3301      	adds	r3, #1
   466fc:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   466fe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   46702:	d1f8      	bne.n	466f6 <z_arm_init_arch_hw_at_boot+0x16>
   46704:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   46706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4670a:	4a07      	ldr	r2, [pc, #28]	; (46728 <z_arm_init_arch_hw_at_boot+0x48>)
   4670c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   46710:	3301      	adds	r3, #1
   46712:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   46714:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   46718:	d1f8      	bne.n	4670c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   4671a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   4671c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   46720:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   46724:	bd10      	pop	{r4, pc}
   46726:	bf00      	nop
   46728:	e000e100 	.word	0xe000e100

0004672c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   4672c:	4b08      	ldr	r3, [pc, #32]	; (46750 <z_impl_k_thread_abort+0x24>)
   4672e:	689b      	ldr	r3, [r3, #8]
   46730:	4283      	cmp	r3, r0
   46732:	d10b      	bne.n	4674c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   46734:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   46738:	b143      	cbz	r3, 4674c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   4673a:	4b06      	ldr	r3, [pc, #24]	; (46754 <z_impl_k_thread_abort+0x28>)
   4673c:	685a      	ldr	r2, [r3, #4]
   4673e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   46742:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   46744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   46746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   4674a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   4674c:	f00c bbfe 	b.w	52f4c <z_thread_abort>
   46750:	2001bc78 	.word	0x2001bc78
   46754:	e000ed00 	.word	0xe000ed00

00046758 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   46758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   4675a:	4c09      	ldr	r4, [pc, #36]	; (46780 <z_arm_configure_static_mpu_regions+0x28>)
   4675c:	4a09      	ldr	r2, [pc, #36]	; (46784 <z_arm_configure_static_mpu_regions+0x2c>)
   4675e:	4623      	mov	r3, r4
   46760:	2101      	movs	r1, #1
   46762:	4809      	ldr	r0, [pc, #36]	; (46788 <z_arm_configure_static_mpu_regions+0x30>)
   46764:	f000 f918 	bl	46998 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   46768:	2300      	movs	r3, #0
   4676a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   4676c:	4b07      	ldr	r3, [pc, #28]	; (4678c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   4676e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   46770:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   46772:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   46774:	9301      	str	r3, [sp, #4]
   46776:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   46778:	f000 f918 	bl	469ac <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   4677c:	b004      	add	sp, #16
   4677e:	bd10      	pop	{r4, pc}
   46780:	20040000 	.word	0x20040000
   46784:	2001a500 	.word	0x2001a500
   46788:	0005c23c 	.word	0x0005c23c
   4678c:	2001ac70 	.word	0x2001ac70

00046790 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   46790:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   46792:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   46794:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   46796:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   4679a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   4679e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   467a0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   467a2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   467a4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   467a8:	4905      	ldr	r1, [pc, #20]	; (467c0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   467aa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   467ae:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   467b2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   467b6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   467ba:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   467be:	bd10      	pop	{r4, pc}
   467c0:	e000ed00 	.word	0xe000ed00

000467c4 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   467c4:	280f      	cmp	r0, #15
{
   467c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   467c8:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
   467ca:	d90f      	bls.n	467ec <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   467cc:	4b09      	ldr	r3, [pc, #36]	; (467f4 <region_allocate_and_init+0x30>)
   467ce:	9003      	str	r0, [sp, #12]
   467d0:	9302      	str	r3, [sp, #8]
   467d2:	2300      	movs	r3, #0
   467d4:	2201      	movs	r2, #1
   467d6:	4618      	mov	r0, r3
   467d8:	e9cd 3300 	strd	r3, r3, [sp]
   467dc:	4906      	ldr	r1, [pc, #24]	; (467f8 <region_allocate_and_init+0x34>)
   467de:	f00f fc71 	bl	560c4 <z_log_msg_runtime_create.constprop.0>
   467e2:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   467e6:	4620      	mov	r0, r4
   467e8:	b004      	add	sp, #16
   467ea:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   467ec:	f7ff ffd0 	bl	46790 <region_init>
	return index;
   467f0:	e7f9      	b.n	467e6 <region_allocate_and_init+0x22>
   467f2:	bf00      	nop
   467f4:	0005dd52 	.word	0x0005dd52
   467f8:	0005bfb4 	.word	0x0005bfb4

000467fc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   467fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46800:	4689      	mov	r9, r1
   46802:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   46804:	4606      	mov	r6, r0
   46806:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   4680a:	4d54      	ldr	r5, [pc, #336]	; (4695c <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   4680c:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
   4680e:	45c8      	cmp	r8, r9
   46810:	da2d      	bge.n	4686e <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
   46812:	f8d6 a004 	ldr.w	sl, [r6, #4]
   46816:	f1ba 0f00 	cmp.w	sl, #0
   4681a:	d04a      	beq.n	468b2 <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
   4681c:	f1ba 0f1f 	cmp.w	sl, #31
   46820:	d917      	bls.n	46852 <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
   46822:	f01a 0f1f 	tst.w	sl, #31
   46826:	d114      	bne.n	46852 <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
   46828:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   4682c:	f01b 0f1f 	tst.w	fp, #31
   46830:	d10f      	bne.n	46852 <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   46832:	4658      	mov	r0, fp
   46834:	f00f fc3d 	bl	560b2 <arm_cmse_mpu_region_get>
   46838:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   4683a:	eb0a 000b 	add.w	r0, sl, fp
   4683e:	3801      	subs	r0, #1
   46840:	f00f fc37 	bl	560b2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   46844:	4287      	cmp	r7, r0
   46846:	d016      	beq.n	46876 <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   46848:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   4684c:	4b44      	ldr	r3, [pc, #272]	; (46960 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   4684e:	9703      	str	r7, [sp, #12]
   46850:	e002      	b.n	46858 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   46852:	4b44      	ldr	r3, [pc, #272]	; (46964 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   46854:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
   46858:	9302      	str	r3, [sp, #8]
   4685a:	2300      	movs	r3, #0
   4685c:	2201      	movs	r2, #1
   4685e:	4618      	mov	r0, r3
   46860:	e9cd 3300 	strd	r3, r3, [sp]
   46864:	4940      	ldr	r1, [pc, #256]	; (46968 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   46866:	f00f fc2d 	bl	560c4 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   4686a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   4686e:	4620      	mov	r0, r4
   46870:	b009      	add	sp, #36	; 0x24
   46872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   46876:	f117 0f16 	cmn.w	r7, #22
   4687a:	d0e7      	beq.n	4684c <mpu_configure_regions_and_partition.constprop.0+0x50>
   4687c:	42bc      	cmp	r4, r7
   4687e:	dde5      	ble.n	4684c <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
   46880:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   46884:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   46888:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   4688c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   46890:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   46894:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   46898:	e9d6 3200 	ldrd	r3, r2, [r6]
   4689c:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   4689e:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   468a0:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
   468a4:	d11d      	bne.n	468e2 <mpu_configure_regions_and_partition.constprop.0+0xe6>
   468a6:	45d3      	cmp	fp, sl
   468a8:	d107      	bne.n	468ba <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
   468aa:	4631      	mov	r1, r6
   468ac:	b2f8      	uxtb	r0, r7
   468ae:	f00f fc19 	bl	560e4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   468b2:	f108 0801 	add.w	r8, r8, #1
   468b6:	360c      	adds	r6, #12
   468b8:	e7a9      	b.n	4680e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   468ba:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   468bc:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   468c0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   468c4:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   468c8:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   468cc:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
   468ce:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   468d2:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   468d4:	f00f fc06 	bl	560e4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   468d8:	f110 0f16 	cmn.w	r0, #22
   468dc:	d0c5      	beq.n	4686a <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
   468de:	1c44      	adds	r4, r0, #1
   468e0:	e7e7      	b.n	468b2 <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
   468e2:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   468e6:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   468ea:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
   468ec:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   468f0:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   468f4:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   468f6:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   468f8:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   468fa:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
   468fc:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   46900:	d0e8      	beq.n	468d4 <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
   46902:	f00f fbef 	bl	560e4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   46906:	f110 0f16 	cmn.w	r0, #22
   4690a:	d0ae      	beq.n	4686a <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
   4690c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   46910:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   46914:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
   46918:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
   4691c:	f362 0304 	bfi	r3, r2, #0, #5
   46920:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
   46924:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   46928:	f89d 2018 	ldrb.w	r2, [sp, #24]
   4692c:	085b      	lsrs	r3, r3, #1
   4692e:	f363 1247 	bfi	r2, r3, #5, #3
   46932:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
   46936:	e9d6 3200 	ldrd	r3, r2, [r6]
   4693a:	4413      	add	r3, r2
   4693c:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   4693e:	f023 031f 	bic.w	r3, r3, #31
   46942:	445b      	add	r3, fp
   46944:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   46948:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   4694a:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   4694e:	a904      	add	r1, sp, #16
   46950:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   46952:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   46954:	f7ff ff36 	bl	467c4 <region_allocate_and_init>
   46958:	e7be      	b.n	468d8 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   4695a:	bf00      	nop
   4695c:	e000ed00 	.word	0xe000ed00
   46960:	0005dd9b 	.word	0x0005dd9b
   46964:	0005dd78 	.word	0x0005dd78
   46968:	0005bfb4 	.word	0x0005bfb4

0004696c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   4696c:	2205      	movs	r2, #5
   4696e:	4b04      	ldr	r3, [pc, #16]	; (46980 <arm_core_mpu_enable+0x14>)
   46970:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   46974:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   46978:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   4697c:	4770      	bx	lr
   4697e:	bf00      	nop
   46980:	e000ed00 	.word	0xe000ed00

00046984 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   46984:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   46988:	2200      	movs	r2, #0
   4698a:	4b02      	ldr	r3, [pc, #8]	; (46994 <arm_core_mpu_disable+0x10>)
   4698c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   46990:	4770      	bx	lr
   46992:	bf00      	nop
   46994:	e000ed00 	.word	0xe000ed00

00046998 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   46998:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   4699a:	4c03      	ldr	r4, [pc, #12]	; (469a8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   4699c:	7822      	ldrb	r2, [r4, #0]
   4699e:	f7ff ff2d 	bl	467fc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   469a2:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   469a4:	bd10      	pop	{r4, pc}
   469a6:	bf00      	nop
   469a8:	2001de2d 	.word	0x2001de2d

000469ac <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   469ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   469b0:	4d29      	ldr	r5, [pc, #164]	; (46a58 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   469b2:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   469b4:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   469b6:	f04f 0800 	mov.w	r8, #0
   469ba:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
   469bc:	4f27      	ldr	r7, [pc, #156]	; (46a5c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   469be:	45d0      	cmp	r8, sl
   469c0:	da1b      	bge.n	469fa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   469c2:	f8d6 9004 	ldr.w	r9, [r6, #4]
   469c6:	f1b9 0f00 	cmp.w	r9, #0
   469ca:	d03f      	beq.n	46a4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   469cc:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   469ce:	4608      	mov	r0, r1
   469d0:	9101      	str	r1, [sp, #4]
   469d2:	f00f fb6e 	bl	560b2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   469d6:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   469d8:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   469da:	eb09 0001 	add.w	r0, r9, r1
   469de:	3801      	subs	r0, #1
   469e0:	f00f fb67 	bl	560b2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   469e4:	4284      	cmp	r4, r0
   469e6:	f04f 0214 	mov.w	r2, #20
   469ea:	4b1d      	ldr	r3, [pc, #116]	; (46a60 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   469ec:	d008      	beq.n	46a00 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   469ee:	fb02 f308 	mul.w	r3, r2, r8
   469f2:	f06f 0215 	mvn.w	r2, #21
   469f6:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   469fa:	b003      	add	sp, #12
   469fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   46a00:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   46a04:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   46a06:	d0f8      	beq.n	469fa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   46a08:	7819      	ldrb	r1, [r3, #0]
   46a0a:	42a1      	cmp	r1, r4
   46a0c:	ddf5      	ble.n	469fa <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
   46a0e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   46a12:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   46a16:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   46a1a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   46a1e:	f100 0108 	add.w	r1, r0, #8
   46a22:	7b00      	ldrb	r0, [r0, #12]
   46a24:	f364 0004 	bfi	r0, r4, #0, #5
   46a28:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   46a2a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   46a2e:	790c      	ldrb	r4, [r1, #4]
   46a30:	0840      	lsrs	r0, r0, #1
   46a32:	f360 1447 	bfi	r4, r0, #5, #3
   46a36:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   46a38:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   46a3c:	f021 011f 	bic.w	r1, r1, #31
   46a40:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
   46a42:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   46a46:	f021 011f 	bic.w	r1, r1, #31
   46a4a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   46a4c:	f108 0801 	add.w	r8, r8, #1
   46a50:	3514      	adds	r5, #20
   46a52:	360c      	adds	r6, #12
   46a54:	e7b3      	b.n	469be <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   46a56:	bf00      	nop
   46a58:	2001b5c0 	.word	0x2001b5c0
   46a5c:	e000ed00 	.word	0xe000ed00
   46a60:	2001de2d 	.word	0x2001de2d

00046a64 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   46a64:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   46a66:	4d0e      	ldr	r5, [pc, #56]	; (46aa0 <z_arm_mpu_init+0x3c>)
   46a68:	682c      	ldr	r4, [r5, #0]
   46a6a:	2c10      	cmp	r4, #16
   46a6c:	d815      	bhi.n	46a9a <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   46a6e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   46a70:	f7ff ff88 	bl	46984 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   46a74:	4b0b      	ldr	r3, [pc, #44]	; (46aa4 <z_arm_mpu_init+0x40>)
   46a76:	4a0c      	ldr	r2, [pc, #48]	; (46aa8 <z_arm_mpu_init+0x44>)
   46a78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   46a7c:	4284      	cmp	r4, r0
   46a7e:	d105      	bne.n	46a8c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   46a80:	4b0a      	ldr	r3, [pc, #40]	; (46aac <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   46a82:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   46a84:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   46a86:	f7ff ff71 	bl	4696c <arm_core_mpu_enable>
}
   46a8a:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   46a8c:	6869      	ldr	r1, [r5, #4]
   46a8e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   46a92:	f7ff fe7d 	bl	46790 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   46a96:	3001      	adds	r0, #1
   46a98:	e7f0      	b.n	46a7c <z_arm_mpu_init+0x18>
		return -1;
   46a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46a9e:	e7f4      	b.n	46a8a <z_arm_mpu_init+0x26>
   46aa0:	0005c248 	.word	0x0005c248
   46aa4:	e000ed00 	.word	0xe000ed00
   46aa8:	0044ffaa 	.word	0x0044ffaa
   46aac:	2001de2d 	.word	0x2001de2d

00046ab0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   46ab0:	4b01      	ldr	r3, [pc, #4]	; (46ab8 <__stdout_hook_install+0x8>)
   46ab2:	6018      	str	r0, [r3, #0]
}
   46ab4:	4770      	bx	lr
   46ab6:	bf00      	nop
   46ab8:	2001a578 	.word	0x2001a578

00046abc <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   46abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46abe:	4606      	mov	r6, r0
   46ac0:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   46ac2:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   46ac4:	4f06      	ldr	r7, [pc, #24]	; (46ae0 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   46ac6:	42ac      	cmp	r4, r5
   46ac8:	da08      	bge.n	46adc <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   46aca:	683b      	ldr	r3, [r7, #0]
   46acc:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   46ace:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   46ad0:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   46ad2:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   46ad6:	d001      	beq.n	46adc <z_impl_zephyr_read_stdin+0x20>
   46ad8:	280d      	cmp	r0, #13
   46ada:	d1f4      	bne.n	46ac6 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   46adc:	4620      	mov	r0, r4
   46ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   46ae0:	2001a574 	.word	0x2001a574

00046ae4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   46ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46ae6:	460d      	mov	r5, r1
   46ae8:	4f09      	ldr	r7, [pc, #36]	; (46b10 <z_impl_zephyr_write_stdout+0x2c>)
   46aea:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   46aec:	f1c0 0401 	rsb	r4, r0, #1
   46af0:	19a3      	adds	r3, r4, r6
   46af2:	429d      	cmp	r5, r3
   46af4:	dc01      	bgt.n	46afa <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   46af6:	4628      	mov	r0, r5
   46af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   46afa:	7873      	ldrb	r3, [r6, #1]
   46afc:	2b0a      	cmp	r3, #10
   46afe:	d102      	bne.n	46b06 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   46b00:	200d      	movs	r0, #13
   46b02:	683b      	ldr	r3, [r7, #0]
   46b04:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   46b06:	683b      	ldr	r3, [r7, #0]
   46b08:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   46b0c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   46b0e:	e7ef      	b.n	46af0 <z_impl_zephyr_write_stdout+0xc>
   46b10:	2001a578 	.word	0x2001a578

00046b14 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   46b14:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   46b16:	2105      	movs	r1, #5
   46b18:	4801      	ldr	r0, [pc, #4]	; (46b20 <_exit+0xc>)
   46b1a:	f7ff ffe3 	bl	46ae4 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   46b1e:	e7fe      	b.n	46b1e <_exit+0xa>
   46b20:	0005ddbe 	.word	0x0005ddbe

00046b24 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   46b24:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   46b26:	4c07      	ldr	r4, [pc, #28]	; (46b44 <_sbrk+0x20>)
   46b28:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   46b2a:	18c2      	adds	r2, r0, r3
   46b2c:	4806      	ldr	r0, [pc, #24]	; (46b48 <_sbrk+0x24>)
   46b2e:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   46b32:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   46b36:	428a      	cmp	r2, r1
		heap_sz += count;
   46b38:	bf36      	itet	cc
   46b3a:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   46b3c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   46b40:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   46b42:	bd10      	pop	{r4, pc}
   46b44:	2001b5d4 	.word	0x2001b5d4
   46b48:	20025680 	.word	0x20025680

00046b4c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   46b4c:	b508      	push	{r3, lr}
   46b4e:	211d      	movs	r1, #29
   46b50:	4804      	ldr	r0, [pc, #16]	; (46b64 <__chk_fail+0x18>)
   46b52:	f7ff ffc7 	bl	46ae4 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   46b56:	4040      	eors	r0, r0
   46b58:	f380 8811 	msr	BASEPRI, r0
   46b5c:	f04f 0003 	mov.w	r0, #3
   46b60:	df02      	svc	2
	CODE_UNREACHABLE;
   46b62:	bf00      	nop
   46b64:	0005ddc4 	.word	0x0005ddc4

00046b68 <registry_find>:
static struct registry_entry *registry_find(int type)
{
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
   46b68:	4b08      	ldr	r3, [pc, #32]	; (46b8c <registry_find+0x24>)
{
   46b6a:	4602      	mov	r2, r0
		if ((ep->fstp != NULL) && (ep->type == type)) {
   46b6c:	6859      	ldr	r1, [r3, #4]
   46b6e:	b111      	cbz	r1, 46b76 <registry_find+0xe>
   46b70:	6819      	ldr	r1, [r3, #0]
   46b72:	4288      	cmp	r0, r1
   46b74:	d007      	beq.n	46b86 <registry_find+0x1e>
   46b76:	68d8      	ldr	r0, [r3, #12]
   46b78:	b130      	cbz	r0, 46b88 <registry_find+0x20>
   46b7a:	6899      	ldr	r1, [r3, #8]
		struct registry_entry *ep = &registry[i];
   46b7c:	4804      	ldr	r0, [pc, #16]	; (46b90 <registry_find+0x28>)
   46b7e:	428a      	cmp	r2, r1
   46b80:	bf18      	it	ne
   46b82:	2000      	movne	r0, #0
   46b84:	4770      	bx	lr
   46b86:	4618      	mov	r0, r3
			return ep;
		}
	}
	return NULL;
}
   46b88:	4770      	bx	lr
   46b8a:	bf00      	nop
   46b8c:	2001b5d8 	.word	0x2001b5d8
   46b90:	2001b5e0 	.word	0x2001b5e0

00046b94 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   46b94:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   46b96:	4804      	ldr	r0, [pc, #16]	; (46ba8 <fs_init+0x14>)
   46b98:	f013 fe8a 	bl	5a8b0 <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
   46b9c:	4b03      	ldr	r3, [pc, #12]	; (46bac <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   46b9e:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   46ba0:	e9c3 3300 	strd	r3, r3, [r3]
   46ba4:	bd08      	pop	{r3, pc}
   46ba6:	bf00      	nop
   46ba8:	2001b5e8 	.word	0x2001b5e8
   46bac:	2001b5fc 	.word	0x2001b5fc

00046bb0 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   46bb0:	4602      	mov	r2, r0
   46bb2:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   46bb4:	4801      	ldr	r0, [pc, #4]	; (46bbc <k_mutex_lock.constprop.0.isra.0+0xc>)
   46bb6:	f00b bcad 	b.w	52514 <z_impl_k_mutex_lock>
   46bba:	bf00      	nop
   46bbc:	2001b5e8 	.word	0x2001b5e8

00046bc0 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   46bc0:	4801      	ldr	r0, [pc, #4]	; (46bc8 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   46bc2:	f00b bd21 	b.w	52608 <z_impl_k_mutex_unlock>
   46bc6:	bf00      	nop
   46bc8:	2001b5e8 	.word	0x2001b5e8

00046bcc <fs_get_mnt_point>:
{
   46bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46bd0:	4682      	mov	sl, r0
	size_t len, name_len = strlen(name);
   46bd2:	4608      	mov	r0, r1
{
   46bd4:	460e      	mov	r6, r1
   46bd6:	4617      	mov	r7, r2
	size_t len, name_len = strlen(name);
   46bd8:	f7fa f90c 	bl	40df4 <strlen>
   46bdc:	f04f 0900 	mov.w	r9, #0
   46be0:	4683      	mov	fp, r0
	k_mutex_lock(&mutex, K_FOREVER);
   46be2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   46be6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46bea:	f7ff ffe1 	bl	46bb0 <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
   46bee:	4b1a      	ldr	r3, [pc, #104]	; (46c58 <fs_get_mnt_point+0x8c>)
   46bf0:	46c8      	mov	r8, r9
   46bf2:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   46bf4:	429c      	cmp	r4, r3
   46bf6:	bf08      	it	eq
   46bf8:	2400      	moveq	r4, #0
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
   46bfa:	b954      	cbnz	r4, 46c12 <fs_get_mnt_point+0x46>
	k_mutex_unlock(&mutex);
   46bfc:	f7ff ffe0 	bl	46bc0 <k_mutex_unlock.constprop.0.isra.0>
	if (mnt_p == NULL) {
   46c00:	f1b8 0f00 	cmp.w	r8, #0
   46c04:	d025      	beq.n	46c52 <fs_get_mnt_point+0x86>
	*mnt_pntp = mnt_p;
   46c06:	f8ca 8000 	str.w	r8, [sl]
	if (match_len) {
   46c0a:	b9f7      	cbnz	r7, 46c4a <fs_get_mnt_point+0x7e>
	return 0;
   46c0c:	2000      	movs	r0, #0
}
   46c0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = itr->mountp_len;
   46c12:	69a5      	ldr	r5, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
   46c14:	45a9      	cmp	r9, r5
   46c16:	d807      	bhi.n	46c28 <fs_get_mnt_point+0x5c>
   46c18:	45ab      	cmp	fp, r5
   46c1a:	d305      	bcc.n	46c28 <fs_get_mnt_point+0x5c>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
   46c1c:	2d01      	cmp	r5, #1
   46c1e:	d90a      	bls.n	46c36 <fs_get_mnt_point+0x6a>
   46c20:	5d72      	ldrb	r2, [r6, r5]
   46c22:	2a2f      	cmp	r2, #47	; 0x2f
   46c24:	d007      	beq.n	46c36 <fs_get_mnt_point+0x6a>
   46c26:	b132      	cbz	r2, 46c36 <fs_get_mnt_point+0x6a>
   46c28:	464d      	mov	r5, r9
	return (node == list->tail) ? NULL : node->next;
   46c2a:	685a      	ldr	r2, [r3, #4]
   46c2c:	4294      	cmp	r4, r2
   46c2e:	d0e5      	beq.n	46bfc <fs_get_mnt_point+0x30>
   46c30:	46a9      	mov	r9, r5
   46c32:	6824      	ldr	r4, [r4, #0]
   46c34:	e7e1      	b.n	46bfa <fs_get_mnt_point+0x2e>
		if (strncmp(name, itr->mnt_point, len) == 0) {
   46c36:	462a      	mov	r2, r5
   46c38:	4630      	mov	r0, r6
   46c3a:	68e1      	ldr	r1, [r4, #12]
   46c3c:	f014 fb5d 	bl	5b2fa <strncmp>
   46c40:	4b05      	ldr	r3, [pc, #20]	; (46c58 <fs_get_mnt_point+0x8c>)
   46c42:	2800      	cmp	r0, #0
   46c44:	d1f0      	bne.n	46c28 <fs_get_mnt_point+0x5c>
   46c46:	46a0      	mov	r8, r4
   46c48:	e7ef      	b.n	46c2a <fs_get_mnt_point+0x5e>
		*match_len = mnt_p->mountp_len;
   46c4a:	f8d8 3018 	ldr.w	r3, [r8, #24]
   46c4e:	603b      	str	r3, [r7, #0]
   46c50:	e7dc      	b.n	46c0c <fs_get_mnt_point+0x40>
		return -ENOENT;
   46c52:	f06f 0001 	mvn.w	r0, #1
   46c56:	e7da      	b.n	46c0e <fs_get_mnt_point+0x42>
   46c58:	2001b5fc 	.word	0x2001b5fc

00046c5c <fs_open>:
{
   46c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46c60:	4605      	mov	r5, r0
   46c62:	4617      	mov	r7, r2
	if ((file_name == NULL) ||
   46c64:	460e      	mov	r6, r1
{
   46c66:	b086      	sub	sp, #24
	if ((file_name == NULL) ||
   46c68:	b979      	cbnz	r1, 46c8a <fs_open+0x2e>
		LOG_ERR("invalid file name!!");
   46c6a:	4b2e      	ldr	r3, [pc, #184]	; (46d24 <fs_open+0xc8>)
   46c6c:	2201      	movs	r2, #1
   46c6e:	9302      	str	r3, [sp, #8]
   46c70:	2300      	movs	r3, #0
   46c72:	492d      	ldr	r1, [pc, #180]	; (46d28 <fs_open+0xcc>)
   46c74:	4618      	mov	r0, r3
   46c76:	e9cd 3300 	strd	r3, r3, [sp]
   46c7a:	f00f fa82 	bl	56182 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   46c7e:	f06f 0415 	mvn.w	r4, #21
}
   46c82:	4620      	mov	r0, r4
   46c84:	b006      	add	sp, #24
   46c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
   46c8a:	4608      	mov	r0, r1
   46c8c:	f7fa f8b2 	bl	40df4 <strlen>
	if ((file_name == NULL) ||
   46c90:	2801      	cmp	r0, #1
   46c92:	d9ea      	bls.n	46c6a <fs_open+0xe>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
   46c94:	7833      	ldrb	r3, [r6, #0]
   46c96:	2b2f      	cmp	r3, #47	; 0x2f
   46c98:	d1e7      	bne.n	46c6a <fs_open+0xe>
	if (zfp->mp != NULL) {
   46c9a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   46c9e:	f1b8 0f00 	cmp.w	r8, #0
   46ca2:	d136      	bne.n	46d12 <fs_open+0xb6>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
   46ca4:	4642      	mov	r2, r8
   46ca6:	4631      	mov	r1, r6
   46ca8:	a805      	add	r0, sp, #20
   46caa:	f7ff ff8f 	bl	46bcc <fs_get_mnt_point>
	if (rc < 0) {
   46cae:	1e04      	subs	r4, r0, #0
   46cb0:	da0b      	bge.n	46cca <fs_open+0x6e>
		LOG_ERR("mount point not found!!");
   46cb2:	4b1e      	ldr	r3, [pc, #120]	; (46d2c <fs_open+0xd0>)
   46cb4:	2201      	movs	r2, #1
   46cb6:	e9cd 8301 	strd	r8, r3, [sp, #4]
   46cba:	4640      	mov	r0, r8
   46cbc:	4643      	mov	r3, r8
   46cbe:	491a      	ldr	r1, [pc, #104]	; (46d28 <fs_open+0xcc>)
   46cc0:	f8cd 8000 	str.w	r8, [sp]
   46cc4:	f00f fa5d 	bl	56182 <z_log_msg_runtime_create.constprop.0>
		return rc;
   46cc8:	e7db      	b.n	46c82 <fs_open+0x26>
	if (((mp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) &&
   46cca:	9b05      	ldr	r3, [sp, #20]
   46ccc:	f893 2020 	ldrb.w	r2, [r3, #32]
   46cd0:	0792      	lsls	r2, r2, #30
   46cd2:	d502      	bpl.n	46cda <fs_open+0x7e>
   46cd4:	f017 0f12 	tst.w	r7, #18
   46cd8:	d11e      	bne.n	46d18 <fs_open+0xbc>
	CHECKIF(mp->fs->open == NULL) {
   46cda:	69da      	ldr	r2, [r3, #28]
   46cdc:	6812      	ldr	r2, [r2, #0]
   46cde:	b1f2      	cbz	r2, 46d1e <fs_open+0xc2>
	zfp->mp = mp;
   46ce0:	606b      	str	r3, [r5, #4]
	rc = mp->fs->open(zfp, file_name, flags);
   46ce2:	69db      	ldr	r3, [r3, #28]
   46ce4:	463a      	mov	r2, r7
   46ce6:	4631      	mov	r1, r6
   46ce8:	4628      	mov	r0, r5
   46cea:	681b      	ldr	r3, [r3, #0]
   46cec:	4798      	blx	r3
	if (rc < 0) {
   46cee:	1e04      	subs	r4, r0, #0
   46cf0:	da0d      	bge.n	46d0e <fs_open+0xb2>
		LOG_ERR("file open error (%d)", rc);
   46cf2:	2600      	movs	r6, #0
   46cf4:	4b0e      	ldr	r3, [pc, #56]	; (46d30 <fs_open+0xd4>)
   46cf6:	2201      	movs	r2, #1
   46cf8:	9302      	str	r3, [sp, #8]
   46cfa:	4630      	mov	r0, r6
   46cfc:	4633      	mov	r3, r6
   46cfe:	e9cd 6600 	strd	r6, r6, [sp]
   46d02:	4909      	ldr	r1, [pc, #36]	; (46d28 <fs_open+0xcc>)
   46d04:	9403      	str	r4, [sp, #12]
   46d06:	f00f fa3c 	bl	56182 <z_log_msg_runtime_create.constprop.0>
		zfp->mp = NULL;
   46d0a:	606e      	str	r6, [r5, #4]
		return rc;
   46d0c:	e7b9      	b.n	46c82 <fs_open+0x26>
	zfp->flags = flags;
   46d0e:	722f      	strb	r7, [r5, #8]
	return rc;
   46d10:	e7b7      	b.n	46c82 <fs_open+0x26>
		return -EBUSY;
   46d12:	f06f 040f 	mvn.w	r4, #15
   46d16:	e7b4      	b.n	46c82 <fs_open+0x26>
		return -EROFS;
   46d18:	f06f 041d 	mvn.w	r4, #29
   46d1c:	e7b1      	b.n	46c82 <fs_open+0x26>
		return -ENOTSUP;
   46d1e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46d22:	e7ae      	b.n	46c82 <fs_open+0x26>
   46d24:	0005ddf1 	.word	0x0005ddf1
   46d28:	0005bf6c 	.word	0x0005bf6c
   46d2c:	0005de05 	.word	0x0005de05
   46d30:	0005de1d 	.word	0x0005de1d

00046d34 <fs_close>:
{
   46d34:	b530      	push	{r4, r5, lr}
	if (zfp->mp == NULL) {
   46d36:	6844      	ldr	r4, [r0, #4]
{
   46d38:	4605      	mov	r5, r0
   46d3a:	b085      	sub	sp, #20
	if (zfp->mp == NULL) {
   46d3c:	b18c      	cbz	r4, 46d62 <fs_close+0x2e>
	CHECKIF(zfp->mp->fs->close == NULL) {
   46d3e:	69e3      	ldr	r3, [r4, #28]
   46d40:	69db      	ldr	r3, [r3, #28]
   46d42:	b19b      	cbz	r3, 46d6c <fs_close+0x38>
	rc = zfp->mp->fs->close(zfp);
   46d44:	4798      	blx	r3
	if (rc < 0) {
   46d46:	1e04      	subs	r4, r0, #0
   46d48:	f04f 0300 	mov.w	r3, #0
   46d4c:	da0c      	bge.n	46d68 <fs_close+0x34>
		LOG_ERR("file close error (%d)", rc);
   46d4e:	4a09      	ldr	r2, [pc, #36]	; (46d74 <fs_close+0x40>)
   46d50:	4618      	mov	r0, r3
   46d52:	e9cd 3201 	strd	r3, r2, [sp, #4]
   46d56:	4908      	ldr	r1, [pc, #32]	; (46d78 <fs_close+0x44>)
   46d58:	2201      	movs	r2, #1
   46d5a:	9403      	str	r4, [sp, #12]
   46d5c:	9300      	str	r3, [sp, #0]
   46d5e:	f00f fa10 	bl	56182 <z_log_msg_runtime_create.constprop.0>
}
   46d62:	4620      	mov	r0, r4
   46d64:	b005      	add	sp, #20
   46d66:	bd30      	pop	{r4, r5, pc}
	zfp->mp = NULL;
   46d68:	606b      	str	r3, [r5, #4]
	return rc;
   46d6a:	e7fa      	b.n	46d62 <fs_close+0x2e>
		return -ENOTSUP;
   46d6c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46d70:	e7f7      	b.n	46d62 <fs_close+0x2e>
   46d72:	bf00      	nop
   46d74:	0005de32 	.word	0x0005de32
   46d78:	0005bf6c 	.word	0x0005bf6c

00046d7c <fs_write>:
{
   46d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (zfp->mp == NULL) {
   46d7e:	6843      	ldr	r3, [r0, #4]
   46d80:	b19b      	cbz	r3, 46daa <fs_write+0x2e>
	CHECKIF(zfp->mp->fs->write == NULL) {
   46d82:	69db      	ldr	r3, [r3, #28]
   46d84:	689b      	ldr	r3, [r3, #8]
   46d86:	b19b      	cbz	r3, 46db0 <fs_write+0x34>
	rc = zfp->mp->fs->write(zfp, ptr, size);
   46d88:	4798      	blx	r3
	if (rc < 0) {
   46d8a:	1e04      	subs	r4, r0, #0
   46d8c:	da0a      	bge.n	46da4 <fs_write+0x28>
		LOG_ERR("file write error (%d)", rc);
   46d8e:	4b0a      	ldr	r3, [pc, #40]	; (46db8 <fs_write+0x3c>)
   46d90:	2201      	movs	r2, #1
   46d92:	9302      	str	r3, [sp, #8]
   46d94:	2300      	movs	r3, #0
   46d96:	4909      	ldr	r1, [pc, #36]	; (46dbc <fs_write+0x40>)
   46d98:	4618      	mov	r0, r3
   46d9a:	e9cd 3300 	strd	r3, r3, [sp]
   46d9e:	9403      	str	r4, [sp, #12]
   46da0:	f00f f9ef 	bl	56182 <z_log_msg_runtime_create.constprop.0>
}
   46da4:	4620      	mov	r0, r4
   46da6:	b004      	add	sp, #16
   46da8:	bd10      	pop	{r4, pc}
		return -EBADF;
   46daa:	f06f 0408 	mvn.w	r4, #8
   46dae:	e7f9      	b.n	46da4 <fs_write+0x28>
		return -ENOTSUP;
   46db0:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46db4:	e7f6      	b.n	46da4 <fs_write+0x28>
   46db6:	bf00      	nop
   46db8:	0005de48 	.word	0x0005de48
   46dbc:	0005bf6c 	.word	0x0005bf6c

00046dc0 <fs_opendir>:
{
   46dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   46dc2:	4606      	mov	r6, r0
	if ((abs_path == NULL) ||
   46dc4:	460f      	mov	r7, r1
{
   46dc6:	b087      	sub	sp, #28
	if ((abs_path == NULL) ||
   46dc8:	b971      	cbnz	r1, 46de8 <fs_opendir+0x28>
		LOG_ERR("invalid directory name!!");
   46dca:	4b33      	ldr	r3, [pc, #204]	; (46e98 <fs_opendir+0xd8>)
   46dcc:	2201      	movs	r2, #1
   46dce:	9302      	str	r3, [sp, #8]
   46dd0:	2300      	movs	r3, #0
   46dd2:	4932      	ldr	r1, [pc, #200]	; (46e9c <fs_opendir+0xdc>)
   46dd4:	4618      	mov	r0, r3
   46dd6:	e9cd 3300 	strd	r3, r3, [sp]
   46dda:	f00f f9d2 	bl	56182 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   46dde:	f06f 0415 	mvn.w	r4, #21
}
   46de2:	4620      	mov	r0, r4
   46de4:	b007      	add	sp, #28
   46de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
   46de8:	4608      	mov	r0, r1
   46dea:	f7fa f803 	bl	40df4 <strlen>
	if ((abs_path == NULL) ||
   46dee:	2800      	cmp	r0, #0
   46df0:	d0eb      	beq.n	46dca <fs_opendir+0xa>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
   46df2:	783b      	ldrb	r3, [r7, #0]
   46df4:	2b2f      	cmp	r3, #47	; 0x2f
   46df6:	d1e8      	bne.n	46dca <fs_opendir+0xa>
	if (zdp->mp != NULL || zdp->dirp != NULL) {
   46df8:	6873      	ldr	r3, [r6, #4]
   46dfa:	2b00      	cmp	r3, #0
   46dfc:	d145      	bne.n	46e8a <fs_opendir+0xca>
   46dfe:	6835      	ldr	r5, [r6, #0]
   46e00:	2d00      	cmp	r5, #0
   46e02:	d142      	bne.n	46e8a <fs_opendir+0xca>
	if (strcmp(abs_path, "/") == 0) {
   46e04:	4638      	mov	r0, r7
   46e06:	4926      	ldr	r1, [pc, #152]	; (46ea0 <fs_opendir+0xe0>)
   46e08:	f7f9 ffea 	bl	40de0 <strcmp>
   46e0c:	4604      	mov	r4, r0
   46e0e:	b980      	cbnz	r0, 46e32 <fs_opendir+0x72>
		k_mutex_lock(&mutex, K_FOREVER);
   46e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46e14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   46e18:	f7ff feca 	bl	46bb0 <k_mutex_lock.constprop.0.isra.0>
	return list->head == list;
   46e1c:	4a21      	ldr	r2, [pc, #132]	; (46ea4 <fs_opendir+0xe4>)
		zdp->mp = NULL;
   46e1e:	6074      	str	r4, [r6, #4]
   46e20:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   46e22:	4293      	cmp	r3, r2
   46e24:	bf14      	ite	ne
   46e26:	461d      	movne	r5, r3
   46e28:	4625      	moveq	r5, r4
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
   46e2a:	6035      	str	r5, [r6, #0]
		k_mutex_unlock(&mutex);
   46e2c:	f7ff fec8 	bl	46bc0 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   46e30:	e7d7      	b.n	46de2 <fs_opendir+0x22>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
   46e32:	462a      	mov	r2, r5
   46e34:	4639      	mov	r1, r7
   46e36:	a805      	add	r0, sp, #20
   46e38:	f7ff fec8 	bl	46bcc <fs_get_mnt_point>
	if (rc < 0) {
   46e3c:	1e04      	subs	r4, r0, #0
   46e3e:	da0a      	bge.n	46e56 <fs_opendir+0x96>
		LOG_ERR("mount point not found!!");
   46e40:	4b19      	ldr	r3, [pc, #100]	; (46ea8 <fs_opendir+0xe8>)
   46e42:	2201      	movs	r2, #1
   46e44:	e9cd 5301 	strd	r5, r3, [sp, #4]
   46e48:	4628      	mov	r0, r5
   46e4a:	462b      	mov	r3, r5
   46e4c:	4913      	ldr	r1, [pc, #76]	; (46e9c <fs_opendir+0xdc>)
   46e4e:	9500      	str	r5, [sp, #0]
   46e50:	f00f f997 	bl	56182 <z_log_msg_runtime_create.constprop.0>
		return rc;
   46e54:	e7c5      	b.n	46de2 <fs_opendir+0x22>
	CHECKIF(mp->fs->opendir == NULL) {
   46e56:	9b05      	ldr	r3, [sp, #20]
   46e58:	69da      	ldr	r2, [r3, #28]
   46e5a:	6a12      	ldr	r2, [r2, #32]
   46e5c:	b1c2      	cbz	r2, 46e90 <fs_opendir+0xd0>
	zdp->mp = mp;
   46e5e:	6073      	str	r3, [r6, #4]
	rc = zdp->mp->fs->opendir(zdp, abs_path);
   46e60:	69db      	ldr	r3, [r3, #28]
   46e62:	4639      	mov	r1, r7
   46e64:	4630      	mov	r0, r6
   46e66:	6a1b      	ldr	r3, [r3, #32]
   46e68:	4798      	blx	r3
	if (rc < 0) {
   46e6a:	1e04      	subs	r4, r0, #0
   46e6c:	dab9      	bge.n	46de2 <fs_opendir+0x22>
		LOG_ERR("directory open error (%d)", rc);
   46e6e:	4b0f      	ldr	r3, [pc, #60]	; (46eac <fs_opendir+0xec>)
		zdp->dirp = NULL;
   46e70:	e9c6 5500 	strd	r5, r5, [r6]
		LOG_ERR("directory open error (%d)", rc);
   46e74:	2201      	movs	r2, #1
   46e76:	e9cd 5301 	strd	r5, r3, [sp, #4]
   46e7a:	4628      	mov	r0, r5
   46e7c:	462b      	mov	r3, r5
   46e7e:	4907      	ldr	r1, [pc, #28]	; (46e9c <fs_opendir+0xdc>)
   46e80:	9403      	str	r4, [sp, #12]
   46e82:	9500      	str	r5, [sp, #0]
   46e84:	f00f f97d 	bl	56182 <z_log_msg_runtime_create.constprop.0>
   46e88:	e7ab      	b.n	46de2 <fs_opendir+0x22>
		return -EBUSY;
   46e8a:	f06f 040f 	mvn.w	r4, #15
   46e8e:	e7a8      	b.n	46de2 <fs_opendir+0x22>
		return -ENOTSUP;
   46e90:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46e94:	e7a5      	b.n	46de2 <fs_opendir+0x22>
   46e96:	bf00      	nop
   46e98:	0005de5e 	.word	0x0005de5e
   46e9c:	0005bf6c 	.word	0x0005bf6c
   46ea0:	0005d833 	.word	0x0005d833
   46ea4:	2001b5fc 	.word	0x2001b5fc
   46ea8:	0005de05 	.word	0x0005de05
   46eac:	0005de77 	.word	0x0005de77

00046eb0 <fs_readdir>:
{
   46eb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (zdp->mp) {
   46eb4:	6847      	ldr	r7, [r0, #4]
{
   46eb6:	4606      	mov	r6, r0
   46eb8:	460d      	mov	r5, r1
	if (zdp->mp) {
   46eba:	2f00      	cmp	r7, #0
   46ebc:	d02f      	beq.n	46f1e <fs_readdir+0x6e>
		CHECKIF(zdp->mp->fs->readdir == NULL) {
   46ebe:	69fb      	ldr	r3, [r7, #28]
   46ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   46ec2:	2b00      	cmp	r3, #0
   46ec4:	d063      	beq.n	46f8e <fs_readdir+0xde>
			if ((strcmp(entry->name, ".") != 0)
   46ec6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 46fa0 <fs_readdir+0xf0>
   46eca:	1c4f      	adds	r7, r1, #1
			rc = zdp->mp->fs->readdir(zdp, entry);
   46ecc:	6873      	ldr	r3, [r6, #4]
   46ece:	4629      	mov	r1, r5
   46ed0:	69db      	ldr	r3, [r3, #28]
   46ed2:	4630      	mov	r0, r6
   46ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   46ed6:	4798      	blx	r3
			if (rc < 0) {
   46ed8:	1e04      	subs	r4, r0, #0
   46eda:	db14      	blt.n	46f06 <fs_readdir+0x56>
			if (entry->name[0] == 0) {
   46edc:	786b      	ldrb	r3, [r5, #1]
   46ede:	b173      	cbz	r3, 46efe <fs_readdir+0x4e>
			if (entry->type != FS_DIR_ENTRY_DIR) {
   46ee0:	782b      	ldrb	r3, [r5, #0]
   46ee2:	2b01      	cmp	r3, #1
   46ee4:	d10b      	bne.n	46efe <fs_readdir+0x4e>
			if ((strcmp(entry->name, ".") != 0)
   46ee6:	4641      	mov	r1, r8
   46ee8:	4638      	mov	r0, r7
   46eea:	f7f9 ff79 	bl	40de0 <strcmp>
   46eee:	2800      	cmp	r0, #0
   46ef0:	d0ec      	beq.n	46ecc <fs_readdir+0x1c>
			    && (strcmp(entry->name, "..") != 0)) {
   46ef2:	4638      	mov	r0, r7
   46ef4:	4927      	ldr	r1, [pc, #156]	; (46f94 <fs_readdir+0xe4>)
   46ef6:	f7f9 ff73 	bl	40de0 <strcmp>
   46efa:	2800      	cmp	r0, #0
   46efc:	d0e6      	beq.n	46ecc <fs_readdir+0x1c>
}
   46efe:	4620      	mov	r0, r4
   46f00:	b004      	add	sp, #16
   46f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERR("directory read error (%d)", rc);
   46f06:	4b24      	ldr	r3, [pc, #144]	; (46f98 <fs_readdir+0xe8>)
   46f08:	2201      	movs	r2, #1
   46f0a:	9302      	str	r3, [sp, #8]
   46f0c:	2300      	movs	r3, #0
   46f0e:	4923      	ldr	r1, [pc, #140]	; (46f9c <fs_readdir+0xec>)
   46f10:	4618      	mov	r0, r3
   46f12:	e9cd 3300 	strd	r3, r3, [sp]
   46f16:	9403      	str	r4, [sp, #12]
   46f18:	f00f f933 	bl	56182 <z_log_msg_runtime_create.constprop.0>
   46f1c:	e7ef      	b.n	46efe <fs_readdir+0x4e>
	if (zdp->dirp == NULL) {
   46f1e:	6803      	ldr	r3, [r0, #0]
   46f20:	b913      	cbnz	r3, 46f28 <fs_readdir+0x78>
		entry->name[0] = 0;
   46f22:	704b      	strb	r3, [r1, #1]
		return 0;
   46f24:	2400      	movs	r4, #0
   46f26:	e7ea      	b.n	46efe <fs_readdir+0x4e>
	return list->head == list;
   46f28:	f8df 8078 	ldr.w	r8, [pc, #120]	; 46fa4 <fs_readdir+0xf4>
	k_mutex_lock(&mutex, K_FOREVER);
   46f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46f30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   46f34:	f7ff fe3c 	bl	46bb0 <k_mutex_lock.constprop.0.isra.0>
   46f38:	f8d8 4000 	ldr.w	r4, [r8]
	return (node == list->tail) ? NULL : node->next;
   46f3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   46f40:	4544      	cmp	r4, r8
   46f42:	bf08      	it	eq
   46f44:	2400      	moveq	r4, #0
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
   46f46:	b924      	cbnz	r4, 46f52 <fs_readdir+0xa2>
	k_mutex_unlock(&mutex);
   46f48:	f7ff fe3a 	bl	46bc0 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOENT;
   46f4c:	f06f 0401 	mvn.w	r4, #1
   46f50:	e7d5      	b.n	46efe <fs_readdir+0x4e>
		if (node == zdp->dirp) {
   46f52:	6832      	ldr	r2, [r6, #0]
   46f54:	42a2      	cmp	r2, r4
   46f56:	d116      	bne.n	46f86 <fs_readdir+0xd6>
			entry->type = FS_DIR_ENTRY_DIR;
   46f58:	2301      	movs	r3, #1
   46f5a:	4628      	mov	r0, r5
   46f5c:	f800 3b01 	strb.w	r3, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
   46f60:	68e1      	ldr	r1, [r4, #12]
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   46f62:	22ff      	movs	r2, #255	; 0xff
   46f64:	4419      	add	r1, r3
   46f66:	f014 f9da 	bl	5b31e <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
   46f6a:	2300      	movs	r3, #0
   46f6c:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
			entry->size = 0;
   46f70:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
	return (node == list->tail) ? NULL : node->next;
   46f74:	f8d8 3004 	ldr.w	r3, [r8, #4]
   46f78:	429c      	cmp	r4, r3
   46f7a:	bf18      	it	ne
   46f7c:	6827      	ldrne	r7, [r4, #0]
	k_mutex_unlock(&mutex);
   46f7e:	f7ff fe1f 	bl	46bc0 <k_mutex_unlock.constprop.0.isra.0>
	zdp->dirp = next;
   46f82:	6037      	str	r7, [r6, #0]
	return 0;
   46f84:	e7ce      	b.n	46f24 <fs_readdir+0x74>
   46f86:	429c      	cmp	r4, r3
   46f88:	d0de      	beq.n	46f48 <fs_readdir+0x98>
   46f8a:	6824      	ldr	r4, [r4, #0]
   46f8c:	e7db      	b.n	46f46 <fs_readdir+0x96>
			return  -ENOTSUP;
   46f8e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46f92:	e7b4      	b.n	46efe <fs_readdir+0x4e>
   46f94:	0005d5d5 	.word	0x0005d5d5
   46f98:	0005de91 	.word	0x0005de91
   46f9c:	0005bf6c 	.word	0x0005bf6c
   46fa0:	0005d5d6 	.word	0x0005d5d6
   46fa4:	2001b5fc 	.word	0x2001b5fc

00046fa8 <fs_closedir>:
{
   46fa8:	b530      	push	{r4, r5, lr}
	if (zdp->mp == NULL) {
   46faa:	6844      	ldr	r4, [r0, #4]
{
   46fac:	4605      	mov	r5, r0
   46fae:	b085      	sub	sp, #20
	if (zdp->mp == NULL) {
   46fb0:	b91c      	cbnz	r4, 46fba <fs_closedir+0x12>
		zdp->dirp = NULL;
   46fb2:	6004      	str	r4, [r0, #0]
}
   46fb4:	4620      	mov	r0, r4
   46fb6:	b005      	add	sp, #20
   46fb8:	bd30      	pop	{r4, r5, pc}
	CHECKIF(zdp->mp->fs->closedir == NULL) {
   46fba:	69e3      	ldr	r3, [r4, #28]
   46fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   46fbe:	b193      	cbz	r3, 46fe6 <fs_closedir+0x3e>
	rc = zdp->mp->fs->closedir(zdp);
   46fc0:	4798      	blx	r3
	if (rc < 0) {
   46fc2:	1e04      	subs	r4, r0, #0
   46fc4:	f04f 0300 	mov.w	r3, #0
   46fc8:	da0a      	bge.n	46fe0 <fs_closedir+0x38>
		LOG_ERR("directory close error (%d)", rc);
   46fca:	4a08      	ldr	r2, [pc, #32]	; (46fec <fs_closedir+0x44>)
   46fcc:	4618      	mov	r0, r3
   46fce:	e9cd 3201 	strd	r3, r2, [sp, #4]
   46fd2:	4907      	ldr	r1, [pc, #28]	; (46ff0 <fs_closedir+0x48>)
   46fd4:	2201      	movs	r2, #1
   46fd6:	9403      	str	r4, [sp, #12]
   46fd8:	9300      	str	r3, [sp, #0]
   46fda:	f00f f8d2 	bl	56182 <z_log_msg_runtime_create.constprop.0>
		return rc;
   46fde:	e7e9      	b.n	46fb4 <fs_closedir+0xc>
	zdp->dirp = NULL;
   46fe0:	e9c5 3300 	strd	r3, r3, [r5]
	return rc;
   46fe4:	e7e6      	b.n	46fb4 <fs_closedir+0xc>
		return -ENOTSUP;
   46fe6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   46fea:	e7e3      	b.n	46fb4 <fs_closedir+0xc>
   46fec:	0005deab 	.word	0x0005deab
   46ff0:	0005bf6c 	.word	0x0005bf6c

00046ff4 <fs_mount>:
{
   46ff4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
   46ff8:	4604      	mov	r4, r0
   46ffa:	b108      	cbz	r0, 47000 <fs_mount+0xc>
   46ffc:	68c0      	ldr	r0, [r0, #12]
   46ffe:	b960      	cbnz	r0, 4701a <fs_mount+0x26>
		LOG_ERR("mount point not initialized!!");
   47000:	4b50      	ldr	r3, [pc, #320]	; (47144 <fs_mount+0x150>)
		LOG_ERR("invalid mount point!!");
   47002:	9302      	str	r3, [sp, #8]
   47004:	2300      	movs	r3, #0
   47006:	2201      	movs	r2, #1
   47008:	4618      	mov	r0, r3
   4700a:	e9cd 3300 	strd	r3, r3, [sp]
   4700e:	494e      	ldr	r1, [pc, #312]	; (47148 <fs_mount+0x154>)
   47010:	f00f f8b7 	bl	56182 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   47014:	f06f 0515 	mvn.w	r5, #21
   47018:	e00d      	b.n	47036 <fs_mount+0x42>
	if (sys_dnode_is_linked(&mp->node)) {
   4701a:	6823      	ldr	r3, [r4, #0]
   4701c:	b17b      	cbz	r3, 4703e <fs_mount+0x4a>
		LOG_ERR("file system already mounted!!");
   4701e:	4b4b      	ldr	r3, [pc, #300]	; (4714c <fs_mount+0x158>)
   47020:	2201      	movs	r2, #1
   47022:	9302      	str	r3, [sp, #8]
   47024:	2300      	movs	r3, #0
   47026:	4948      	ldr	r1, [pc, #288]	; (47148 <fs_mount+0x154>)
   47028:	4618      	mov	r0, r3
   4702a:	e9cd 3300 	strd	r3, r3, [sp]
   4702e:	f00f f8a8 	bl	56182 <z_log_msg_runtime_create.constprop.0>
		return -EBUSY;
   47032:	f06f 050f 	mvn.w	r5, #15
}
   47036:	4628      	mov	r0, r5
   47038:	b004      	add	sp, #16
   4703a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = strlen(mp->mnt_point);
   4703e:	f7f9 fed9 	bl	40df4 <strlen>
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
   47042:	2801      	cmp	r0, #1
	len = strlen(mp->mnt_point);
   47044:	4607      	mov	r7, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
   47046:	d903      	bls.n	47050 <fs_mount+0x5c>
   47048:	68e3      	ldr	r3, [r4, #12]
   4704a:	781b      	ldrb	r3, [r3, #0]
   4704c:	2b2f      	cmp	r3, #47	; 0x2f
   4704e:	d001      	beq.n	47054 <fs_mount+0x60>
		LOG_ERR("invalid mount point!!");
   47050:	4b3f      	ldr	r3, [pc, #252]	; (47150 <fs_mount+0x15c>)
   47052:	e7d6      	b.n	47002 <fs_mount+0xe>
	return list->head == list;
   47054:	4e3f      	ldr	r6, [pc, #252]	; (47154 <fs_mount+0x160>)
	k_mutex_lock(&mutex, K_FOREVER);
   47056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4705a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   4705e:	f7ff fda7 	bl	46bb0 <k_mutex_lock.constprop.0.isra.0>
   47062:	6835      	ldr	r5, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   47064:	42b5      	cmp	r5, r6
   47066:	d11a      	bne.n	4709e <fs_mount+0xaa>
	fs = fs_type_get(mp->type);
   47068:	68a5      	ldr	r5, [r4, #8]
	struct registry_entry *ep = registry_find(type);
   4706a:	4628      	mov	r0, r5
   4706c:	f7ff fd7c 	bl	46b68 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   47070:	b120      	cbz	r0, 4707c <fs_mount+0x88>
   47072:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (fs == NULL) {
   47076:	f1b8 0f00 	cmp.w	r8, #0
   4707a:	d12a      	bne.n	470d2 <fs_mount+0xde>
		LOG_ERR("requested file system type not registered!!");
   4707c:	4b36      	ldr	r3, [pc, #216]	; (47158 <fs_mount+0x164>)
   4707e:	2201      	movs	r2, #1
   47080:	9302      	str	r3, [sp, #8]
   47082:	2300      	movs	r3, #0
   47084:	4930      	ldr	r1, [pc, #192]	; (47148 <fs_mount+0x154>)
   47086:	4618      	mov	r0, r3
   47088:	e9cd 3300 	strd	r3, r3, [sp]
   4708c:	f00f f879 	bl	56182 <z_log_msg_runtime_create.constprop.0>
		rc = -ENOENT;
   47090:	f06f 0501 	mvn.w	r5, #1
		goto mount_err;
   47094:	e01a      	b.n	470cc <fs_mount+0xd8>
	return (node == list->tail) ? NULL : node->next;
   47096:	6873      	ldr	r3, [r6, #4]
   47098:	429d      	cmp	r5, r3
   4709a:	d0e5      	beq.n	47068 <fs_mount+0x74>
   4709c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
   4709e:	2d00      	cmp	r5, #0
   470a0:	d0e2      	beq.n	47068 <fs_mount+0x74>
		if (len != itr->mountp_len) {
   470a2:	69ab      	ldr	r3, [r5, #24]
   470a4:	42bb      	cmp	r3, r7
   470a6:	d1f6      	bne.n	47096 <fs_mount+0xa2>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
   470a8:	463a      	mov	r2, r7
   470aa:	68e9      	ldr	r1, [r5, #12]
   470ac:	68e0      	ldr	r0, [r4, #12]
   470ae:	f014 f924 	bl	5b2fa <strncmp>
   470b2:	4603      	mov	r3, r0
   470b4:	2800      	cmp	r0, #0
   470b6:	d1ee      	bne.n	47096 <fs_mount+0xa2>
			LOG_ERR("mount point already exists!!");
   470b8:	4a28      	ldr	r2, [pc, #160]	; (4715c <fs_mount+0x168>)
   470ba:	4923      	ldr	r1, [pc, #140]	; (47148 <fs_mount+0x154>)
   470bc:	e9cd 0201 	strd	r0, r2, [sp, #4]
   470c0:	9000      	str	r0, [sp, #0]
   470c2:	2201      	movs	r2, #1
   470c4:	f00f f85d 	bl	56182 <z_log_msg_runtime_create.constprop.0>
			rc = -EBUSY;
   470c8:	f06f 050f 	mvn.w	r5, #15
	k_mutex_unlock(&mutex);
   470cc:	f7ff fd78 	bl	46bc0 <k_mutex_unlock.constprop.0.isra.0>
	return rc;
   470d0:	e7b1      	b.n	47036 <fs_mount+0x42>
	CHECKIF(fs->mount == NULL) {
   470d2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   470d6:	b963      	cbnz	r3, 470f2 <fs_mount+0xfe>
		LOG_ERR("fs type %d does not support mounting", mp->type);
   470d8:	4a21      	ldr	r2, [pc, #132]	; (47160 <fs_mount+0x16c>)
   470da:	9503      	str	r5, [sp, #12]
   470dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   470e0:	4618      	mov	r0, r3
   470e2:	2201      	movs	r2, #1
   470e4:	4918      	ldr	r1, [pc, #96]	; (47148 <fs_mount+0x154>)
   470e6:	9300      	str	r3, [sp, #0]
   470e8:	f00f f84b 	bl	56182 <z_log_msg_runtime_create.constprop.0>
		rc = -ENOTSUP;
   470ec:	f06f 0585 	mvn.w	r5, #133	; 0x85
		goto mount_err;
   470f0:	e7ec      	b.n	470cc <fs_mount+0xd8>
	if (fs->unmount == NULL) {
   470f2:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
   470f6:	b953      	cbnz	r3, 4710e <fs_mount+0x11a>
		LOG_WRN("mount path %s is not unmountable",
   470f8:	68e2      	ldr	r2, [r4, #12]
   470fa:	4618      	mov	r0, r3
   470fc:	9203      	str	r2, [sp, #12]
   470fe:	4a19      	ldr	r2, [pc, #100]	; (47164 <fs_mount+0x170>)
   47100:	4911      	ldr	r1, [pc, #68]	; (47148 <fs_mount+0x154>)
   47102:	e9cd 3201 	strd	r3, r2, [sp, #4]
   47106:	9300      	str	r3, [sp, #0]
   47108:	2202      	movs	r2, #2
   4710a:	f00f f83a 	bl	56182 <z_log_msg_runtime_create.constprop.0>
	rc = fs->mount(mp);
   4710e:	4620      	mov	r0, r4
   47110:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   47114:	4798      	blx	r3
	if (rc < 0) {
   47116:	1e05      	subs	r5, r0, #0
   47118:	da0b      	bge.n	47132 <fs_mount+0x13e>
		LOG_ERR("fs mount error (%d)", rc);
   4711a:	4b13      	ldr	r3, [pc, #76]	; (47168 <fs_mount+0x174>)
   4711c:	2201      	movs	r2, #1
   4711e:	9302      	str	r3, [sp, #8]
   47120:	2300      	movs	r3, #0
   47122:	4909      	ldr	r1, [pc, #36]	; (47148 <fs_mount+0x154>)
   47124:	4618      	mov	r0, r3
   47126:	e9cd 3300 	strd	r3, r3, [sp]
   4712a:	9503      	str	r5, [sp, #12]
   4712c:	f00f f829 	bl	56182 <z_log_msg_runtime_create.constprop.0>
		goto mount_err;
   47130:	e7cc      	b.n	470cc <fs_mount+0xd8>
	sys_dnode_t *const tail = list->tail;
   47132:	6873      	ldr	r3, [r6, #4]
	mp->fs = fs;
   47134:	e9c4 7806 	strd	r7, r8, [r4, #24]
	node->prev = tail;
   47138:	e9c4 6300 	strd	r6, r3, [r4]
	tail->next = node;
   4713c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   4713e:	6074      	str	r4, [r6, #4]
	LOG_DBG("fs mounted at %s", mp->mnt_point);
   47140:	e7c4      	b.n	470cc <fs_mount+0xd8>
   47142:	bf00      	nop
   47144:	0005dec6 	.word	0x0005dec6
   47148:	0005bf6c 	.word	0x0005bf6c
   4714c:	0005dee4 	.word	0x0005dee4
   47150:	0005df02 	.word	0x0005df02
   47154:	2001b5fc 	.word	0x2001b5fc
   47158:	0005df35 	.word	0x0005df35
   4715c:	0005df18 	.word	0x0005df18
   47160:	0005df61 	.word	0x0005df61
   47164:	0005df86 	.word	0x0005df86
   47168:	0005dfa7 	.word	0x0005dfa7

0004716c <fs_register>:
{
   4716c:	b538      	push	{r3, r4, r5, lr}
   4716e:	4604      	mov	r4, r0
   47170:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
   47172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   47176:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   4717a:	f7ff fd19 	bl	46bb0 <k_mutex_lock.constprop.0.isra.0>
	struct registry_entry *ep = registry_find(type);
   4717e:	4620      	mov	r0, r4
   47180:	f7ff fcf2 	bl	46b68 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   47184:	b108      	cbz	r0, 4718a <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
   47186:	6843      	ldr	r3, [r0, #4]
   47188:	b97b      	cbnz	r3, 471aa <fs_register+0x3e>
		if (ep->fstp == NULL) {
   4718a:	4b0b      	ldr	r3, [pc, #44]	; (471b8 <fs_register+0x4c>)
   4718c:	685a      	ldr	r2, [r3, #4]
   4718e:	b112      	cbz	r2, 47196 <fs_register+0x2a>
   47190:	68da      	ldr	r2, [r3, #12]
   47192:	b96a      	cbnz	r2, 471b0 <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
   47194:	2201      	movs	r2, #1
			ep->type = type;
   47196:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			rv = 0;
   4719a:	2400      	movs	r4, #0
			ep->fstp = fstp;
   4719c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   471a0:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
   471a2:	f7ff fd0d 	bl	46bc0 <k_mutex_unlock.constprop.0.isra.0>
}
   471a6:	4620      	mov	r0, r4
   471a8:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
   471aa:	f06f 0477 	mvn.w	r4, #119	; 0x77
   471ae:	e7f8      	b.n	471a2 <fs_register+0x36>
	int rv = -ENOSPC;
   471b0:	f06f 041b 	mvn.w	r4, #27
   471b4:	e7f5      	b.n	471a2 <fs_register+0x36>
   471b6:	bf00      	nop
   471b8:	2001b5d8 	.word	0x2001b5d8

000471bc <translate_error>:
K_MEM_SLAB_DEFINE(fatfs_filep_pool, sizeof(FIL),
			CONFIG_FS_FATFS_NUM_FILES, 4);

static int translate_error(int error)
{
	switch (error) {
   471bc:	2813      	cmp	r0, #19
   471be:	bfda      	itte	le
   471c0:	4b02      	ldrle	r3, [pc, #8]	; (471cc <translate_error+0x10>)
   471c2:	5618      	ldrsble	r0, [r3, r0]
{
   471c4:	f06f 0004 	mvngt.w	r0, #4
	case FR_NOT_READY:
		return -EIO;
	}

	return -EIO;
}
   471c8:	4770      	bx	lr
   471ca:	bf00      	nop
   471cc:	0005dfbe 	.word	0x0005dfbe

000471d0 <fatfs_init>:

static int fatfs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return fs_register(FS_FATFS, &fatfs_fs);
   471d0:	2000      	movs	r0, #0
   471d2:	4901      	ldr	r1, [pc, #4]	; (471d8 <fatfs_init+0x8>)
   471d4:	f7ff bfca 	b.w	4716c <fs_register>
   471d8:	0005c270 	.word	0x0005c270

000471dc <fatfs_mount>:
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
   471dc:	2201      	movs	r2, #1
{
   471de:	b530      	push	{r4, r5, lr}
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
   471e0:	68c1      	ldr	r1, [r0, #12]
{
   471e2:	4604      	mov	r4, r0
   471e4:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
   471e8:	6900      	ldr	r0, [r0, #16]
   471ea:	4411      	add	r1, r2
   471ec:	f007 f90e 	bl	4e40c <f_mount>
	if (res == FR_NO_FILESYSTEM &&
   471f0:	280d      	cmp	r0, #13
   471f2:	d119      	bne.n	47228 <fatfs_mount+0x4c>
	    (mountp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) {
   471f4:	f894 3020 	ldrb.w	r3, [r4, #32]
	if (res == FR_NO_FILESYSTEM &&
   471f8:	079a      	lsls	r2, r3, #30
   471fa:	d422      	bmi.n	47242 <fatfs_mount+0x66>
	if (res == FR_NO_FILESYSTEM &&
   471fc:	07db      	lsls	r3, r3, #31
   471fe:	d41a      	bmi.n	47236 <fatfs_mount+0x5a>
		MKFS_PARM mkfs_opt = {
   47200:	466d      	mov	r5, sp
   47202:	4b12      	ldr	r3, [pc, #72]	; (4724c <fatfs_mount+0x70>)
   47204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   47206:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		res = f_mkfs(&mountp->mnt_point[1], &mkfs_opt, work, sizeof(work));
   4720a:	68e0      	ldr	r0, [r4, #12]
   4720c:	f44f 7300 	mov.w	r3, #512	; 0x200
   47210:	4629      	mov	r1, r5
   47212:	aa04      	add	r2, sp, #16
   47214:	3001      	adds	r0, #1
   47216:	f007 f91d 	bl	4e454 <f_mkfs>
		if (res == FR_OK) {
   4721a:	b960      	cbnz	r0, 47236 <fatfs_mount+0x5a>
			res = f_mount((FATFS *)mountp->fs_data,
   4721c:	2201      	movs	r2, #1
					&mountp->mnt_point[1], 1);
   4721e:	68e1      	ldr	r1, [r4, #12]
			res = f_mount((FATFS *)mountp->fs_data,
   47220:	6920      	ldr	r0, [r4, #16]
   47222:	4411      	add	r1, r2
   47224:	f007 f8f2 	bl	4e40c <f_mount>
	if (res == FR_OK) {
   47228:	b928      	cbnz	r0, 47236 <fatfs_mount+0x5a>
		mountp->flags |= FS_MOUNT_FLAG_USE_DISK_ACCESS;
   4722a:	f894 3020 	ldrb.w	r3, [r4, #32]
   4722e:	f043 0308 	orr.w	r3, r3, #8
   47232:	f884 3020 	strb.w	r3, [r4, #32]
}
   47236:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   4723a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
   4723e:	f7ff bfbd 	b.w	471bc <translate_error>
}
   47242:	f06f 001d 	mvn.w	r0, #29
   47246:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   4724a:	bd30      	pop	{r4, r5, pc}
   4724c:	0005c070 	.word	0x0005c070

00047250 <fatfs_closedir>:
{
   47250:	b538      	push	{r3, r4, r5, lr}
   47252:	4604      	mov	r4, r0
	res = f_closedir(zdp->dirp);
   47254:	6800      	ldr	r0, [r0, #0]
   47256:	f012 f80a 	bl	5926e <f_closedir>
   4725a:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
   4725c:	4621      	mov	r1, r4
   4725e:	4804      	ldr	r0, [pc, #16]	; (47270 <fatfs_closedir+0x20>)
   47260:	f013 fae1 	bl	5a826 <k_mem_slab_free>
	return translate_error(res);
   47264:	4628      	mov	r0, r5
}
   47266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
   4726a:	f7ff bfa7 	b.w	471bc <translate_error>
   4726e:	bf00      	nop
   47270:	2001aac0 	.word	0x2001aac0

00047274 <fatfs_close>:
{
   47274:	b538      	push	{r3, r4, r5, lr}
   47276:	4604      	mov	r4, r0
	res = f_close(zfp->filep);
   47278:	6800      	ldr	r0, [r0, #0]
   4727a:	f011 feb9 	bl	58ff0 <f_close>
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
   4727e:	4621      	mov	r1, r4
	res = f_close(zfp->filep);
   47280:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
   47282:	4805      	ldr	r0, [pc, #20]	; (47298 <fatfs_close+0x24>)
   47284:	f013 facf 	bl	5a826 <k_mem_slab_free>
	zfp->filep = NULL;
   47288:	2300      	movs	r3, #0
   4728a:	6023      	str	r3, [r4, #0]
	return translate_error(res);
   4728c:	4628      	mov	r0, r5
}
   4728e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return translate_error(res);
   47292:	f7ff bf93 	b.w	471bc <translate_error>
   47296:	bf00      	nop
   47298:	2001aadc 	.word	0x2001aadc

0004729c <fatfs_opendir>:
{
   4729c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
   4729e:	2200      	movs	r2, #0
{
   472a0:	4606      	mov	r6, r0
   472a2:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
   472a4:	2300      	movs	r3, #0
   472a6:	4810      	ldr	r0, [pc, #64]	; (472e8 <fatfs_opendir+0x4c>)
   472a8:	a901      	add	r1, sp, #4
   472aa:	f00b f831 	bl	52310 <k_mem_slab_alloc>
   472ae:	4604      	mov	r4, r0
   472b0:	b9b0      	cbnz	r0, 472e0 <fatfs_opendir+0x44>
		(void)memset(ptr, 0, sizeof(DIR));
   472b2:	9b01      	ldr	r3, [sp, #4]
__ssp_bos_icheck3(memset, void *, int)
   472b4:	4601      	mov	r1, r0
   472b6:	2250      	movs	r2, #80	; 0x50
   472b8:	4618      	mov	r0, r3
   472ba:	f013 fe4d 	bl	5af58 <memset>
	res = f_opendir(zdp->dirp, &path[1]);
   472be:	1c69      	adds	r1, r5, #1
		zdp->dirp = ptr;
   472c0:	6030      	str	r0, [r6, #0]
	res = f_opendir(zdp->dirp, &path[1]);
   472c2:	f011 ff90 	bl	591e6 <f_opendir>
	if (res != FR_OK) {
   472c6:	4605      	mov	r5, r0
   472c8:	b120      	cbz	r0, 472d4 <fatfs_opendir+0x38>
		k_mem_slab_free(&fatfs_dirp_pool, &ptr);
   472ca:	4807      	ldr	r0, [pc, #28]	; (472e8 <fatfs_opendir+0x4c>)
   472cc:	a901      	add	r1, sp, #4
   472ce:	f013 faaa 	bl	5a826 <k_mem_slab_free>
		zdp->dirp = NULL;
   472d2:	6034      	str	r4, [r6, #0]
	return translate_error(res);
   472d4:	4628      	mov	r0, r5
}
   472d6:	b002      	add	sp, #8
   472d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return translate_error(res);
   472dc:	f7ff bf6e 	b.w	471bc <translate_error>
}
   472e0:	f06f 000b 	mvn.w	r0, #11
   472e4:	b002      	add	sp, #8
   472e6:	bd70      	pop	{r4, r5, r6, pc}
   472e8:	2001aac0 	.word	0x2001aac0

000472ec <fatfs_open>:
{
   472ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
   472ee:	2300      	movs	r3, #0
{
   472f0:	4606      	mov	r6, r0
   472f2:	460d      	mov	r5, r1
   472f4:	4617      	mov	r7, r2
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
   472f6:	4812      	ldr	r0, [pc, #72]	; (47340 <fatfs_open+0x54>)
   472f8:	2200      	movs	r2, #0
   472fa:	a901      	add	r1, sp, #4
   472fc:	f00b f808 	bl	52310 <k_mem_slab_alloc>
   47300:	4604      	mov	r4, r0
   47302:	b9c0      	cbnz	r0, 47336 <fatfs_open+0x4a>
		(void)memset(ptr, 0, sizeof(FIL));
   47304:	9b01      	ldr	r3, [sp, #4]
   47306:	4601      	mov	r1, r0
   47308:	2250      	movs	r2, #80	; 0x50
   4730a:	4618      	mov	r0, r3
   4730c:	f013 fe24 	bl	5af58 <memset>
	res = f_open(zfp->filep, &file_name[1], fs_mode);
   47310:	1c69      	adds	r1, r5, #1
		zfp->filep = ptr;
   47312:	6030      	str	r0, [r6, #0]
	res = f_open(zfp->filep, &file_name[1], fs_mode);
   47314:	f007 0213 	and.w	r2, r7, #19
   47318:	f011 fb17 	bl	5894a <f_open>
	if (res != FR_OK) {
   4731c:	4605      	mov	r5, r0
   4731e:	b120      	cbz	r0, 4732a <fatfs_open+0x3e>
		k_mem_slab_free(&fatfs_filep_pool, &ptr);
   47320:	4807      	ldr	r0, [pc, #28]	; (47340 <fatfs_open+0x54>)
   47322:	a901      	add	r1, sp, #4
   47324:	f013 fa7f 	bl	5a826 <k_mem_slab_free>
		zfp->filep = NULL;
   47328:	6034      	str	r4, [r6, #0]
	return translate_error(res);
   4732a:	4628      	mov	r0, r5
}
   4732c:	b003      	add	sp, #12
   4732e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return translate_error(res);
   47332:	f7ff bf43 	b.w	471bc <translate_error>
}
   47336:	f06f 000b 	mvn.w	r0, #11
   4733a:	b003      	add	sp, #12
   4733c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4733e:	bf00      	nop
   47340:	2001aadc 	.word	0x2001aadc

00047344 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   47344:	4602      	mov	r2, r0
   47346:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   47348:	4801      	ldr	r0, [pc, #4]	; (47350 <k_mutex_lock.constprop.0.isra.0+0xc>)
   4734a:	f00b b8e3 	b.w	52514 <z_impl_k_mutex_lock>
   4734e:	bf00      	nop
   47350:	2001abac 	.word	0x2001abac

00047354 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   47354:	4801      	ldr	r0, [pc, #4]	; (4735c <k_mutex_unlock.constprop.0.isra.0+0x8>)
   47356:	f00b b957 	b.w	52608 <z_impl_k_mutex_unlock>
   4735a:	bf00      	nop
   4735c:	2001abac 	.word	0x2001abac

00047360 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   47360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   47362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   47366:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   4736a:	f7ff ffeb 	bl	47344 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   4736e:	4c0c      	ldr	r4, [pc, #48]	; (473a0 <net_if_init+0x40>)
   47370:	4e0c      	ldr	r6, [pc, #48]	; (473a4 <net_if_init+0x44>)
   47372:	42b4      	cmp	r4, r6
   47374:	4627      	mov	r7, r4
   47376:	d303      	bcc.n	47380 <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   47378:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   4737c:	f7ff bfea 	b.w	47354 <k_mutex_unlock.constprop.0.isra.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   47380:	f854 0b04 	ldr.w	r0, [r4], #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   47384:	6803      	ldr	r3, [r0, #0]
   47386:	689d      	ldr	r5, [r3, #8]
	if (!api || !api->init) {
   47388:	2d00      	cmp	r5, #0
   4738a:	d0f2      	beq.n	47372 <net_if_init+0x12>
   4738c:	682b      	ldr	r3, [r5, #0]
   4738e:	2b00      	cmp	r3, #0
   47390:	d0ef      	beq.n	47372 <net_if_init+0x12>
	net_if_flag_test_and_set(iface, NET_IF_LOWER_UP);
   47392:	2109      	movs	r1, #9
   47394:	f00f f892 	bl	564bc <net_if_flag_test_and_set.isra.0>
	api->init(iface);
   47398:	4638      	mov	r0, r7
   4739a:	682b      	ldr	r3, [r5, #0]
   4739c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   4739e:	e7e8      	b.n	47372 <net_if_init+0x12>
   473a0:	2001ac48 	.word	0x2001ac48
   473a4:	2001ac4c 	.word	0x2001ac4c

000473a8 <net_if_post_init>:

void net_if_post_init(void)
{
   473a8:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   473aa:	4c07      	ldr	r4, [pc, #28]	; (473c8 <net_if_post_init+0x20>)
   473ac:	4d07      	ldr	r5, [pc, #28]	; (473cc <net_if_post_init+0x24>)
   473ae:	42ac      	cmp	r4, r5
   473b0:	d300      	bcc.n	473b4 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   473b2:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   473b4:	2103      	movs	r1, #3
   473b6:	4620      	mov	r0, r4
   473b8:	f00f f82c 	bl	56414 <net_if_flag_is_set>
   473bc:	b910      	cbnz	r0, 473c4 <net_if_post_init+0x1c>
			net_if_up(iface);
   473be:	4620      	mov	r0, r4
   473c0:	f00f f88e 	bl	564e0 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   473c4:	3404      	adds	r4, #4
   473c6:	e7f2      	b.n	473ae <net_if_post_init+0x6>
   473c8:	2001ac48 	.word	0x2001ac48
   473cc:	2001ac4c 	.word	0x2001ac4c

000473d0 <sd_common_init>:
 * This function performs the following portions of SD initialization
 * - CMD0 (SD reset)
 * - CMD8 (SD voltage check)
 */
static int sd_common_init(struct sd_card *card)
{
   473d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   473d4:	4605      	mov	r5, r0
   473d6:	b08e      	sub	sp, #56	; 0x38
	int ret;

	/* Reset card with CMD0 */
	ret = sd_idle(card);
   473d8:	6800      	ldr	r0, [r0, #0]
   473da:	f00f f8cd 	bl	56578 <sd_idle.isra.0>
	if (ret) {
   473de:	4604      	mov	r4, r0
   473e0:	b168      	cbz	r0, 473fe <sd_common_init+0x2e>
		LOG_ERR("Card error on CMD0");
   473e2:	4b3b      	ldr	r3, [pc, #236]	; (474d0 <sd_common_init+0x100>)
   473e4:	2201      	movs	r2, #1
   473e6:	9302      	str	r3, [sp, #8]
   473e8:	2300      	movs	r3, #0
   473ea:	493a      	ldr	r1, [pc, #232]	; (474d4 <sd_common_init+0x104>)
   473ec:	4618      	mov	r0, r3
   473ee:	e9cd 3300 	strd	r3, r3, [sp]
   473f2:	f00f f8aa 	bl	5654a <z_log_msg_runtime_create.constprop.0>
		IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
		/* Enable CRC for spi commands using CMD59 */
		ret = sd_enable_crc(card);
	}
	return ret;
}
   473f6:	4620      	mov	r0, r4
   473f8:	b00e      	add	sp, #56	; 0x38
   473fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   473fe:	260b      	movs	r6, #11
		LOG_INF("Legacy card detected, no CMD8 support");
   47400:	4f35      	ldr	r7, [pc, #212]	; (474d8 <sd_common_init+0x108>)
   47402:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 474d4 <sd_common_init+0x104>
	struct sdhc_command cmd = {0};
   47406:	2218      	movs	r2, #24
   47408:	2100      	movs	r1, #0
   4740a:	a807      	add	r0, sp, #28
   4740c:	f013 fda4 	bl	5af58 <memset>
	cmd.arg = SD_IF_COND_VHS_3V3 | SD_IF_COND_CHECK;
   47410:	2008      	movs	r0, #8
   47412:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   47416:	e9cd 0305 	strd	r0, r3, [sp, #20]
	cmd.response_type = (SD_RSP_TYPE_R7 | SD_SPI_RSP_TYPE_R7);
   4741a:	2379      	movs	r3, #121	; 0x79
   4741c:	930b      	str	r3, [sp, #44]	; 0x2c
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   4741e:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47420:	6828      	ldr	r0, [r5, #0]
   47422:	a905      	add	r1, sp, #20
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47424:	930d      	str	r3, [sp, #52]	; 0x34
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47426:	f00f f89f 	bl	56568 <sdhc_request.constprop.0>
	if (ret) {
   4742a:	4604      	mov	r4, r0
   4742c:	b978      	cbnz	r0, 4744e <sd_common_init+0x7e>
	if (card->host_props.is_spi) {
   4742e:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
   47432:	b1f2      	cbz	r2, 47472 <sd_common_init+0xa2>
		resp = cmd.response[1];
   47434:	9b08      	ldr	r3, [sp, #32]
	if ((resp & 0xFF) != SD_IF_COND_CHECK) {
   47436:	b2d9      	uxtb	r1, r3
   47438:	29aa      	cmp	r1, #170	; 0xaa
   4743a:	d01c      	beq.n	47476 <sd_common_init+0xa6>
		LOG_INF("Legacy card detected, no CMD8 support");
   4743c:	2300      	movs	r3, #0
   4743e:	2203      	movs	r2, #3
   47440:	4641      	mov	r1, r8
   47442:	4618      	mov	r0, r3
   47444:	e9cd 3300 	strd	r3, r3, [sp]
   47448:	9702      	str	r7, [sp, #8]
   4744a:	f00f f87e 	bl	5654a <z_log_msg_runtime_create.constprop.0>
	struct sd_card *card,
	int retries)
{
	int ret = -ETIMEDOUT;

	while (retries-- >= 0) {
   4744e:	3e01      	subs	r6, #1
   47450:	d1d9      	bne.n	47406 <sd_common_init+0x36>
		LOG_INF("Card does not support CMD8, assuming legacy card");
   47452:	4b22      	ldr	r3, [pc, #136]	; (474dc <sd_common_init+0x10c>)
   47454:	4630      	mov	r0, r6
   47456:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4745a:	2203      	movs	r2, #3
   4745c:	4633      	mov	r3, r6
   4745e:	491d      	ldr	r1, [pc, #116]	; (474d4 <sd_common_init+0x104>)
   47460:	9600      	str	r6, [sp, #0]
   47462:	f00f f872 	bl	5654a <z_log_msg_runtime_create.constprop.0>
		return sd_idle(card);
   47466:	6828      	ldr	r0, [r5, #0]
}
   47468:	b00e      	add	sp, #56	; 0x38
   4746a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sd_idle(card);
   4746e:	f00f b883 	b.w	56578 <sd_idle.isra.0>
		resp = cmd.response[0];
   47472:	9b07      	ldr	r3, [sp, #28]
   47474:	e7df      	b.n	47436 <sd_common_init+0x66>
	if ((resp & SD_IF_COND_VHS_MASK) != SD_IF_COND_VHS_3V3) {
   47476:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   4747a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   4747e:	d00c      	beq.n	4749a <sd_common_init+0xca>
		LOG_ERR("Card error on CMD 8");
   47480:	4b17      	ldr	r3, [pc, #92]	; (474e0 <sd_common_init+0x110>)
   47482:	2201      	movs	r2, #1
   47484:	9302      	str	r3, [sp, #8]
   47486:	2300      	movs	r3, #0
   47488:	4912      	ldr	r1, [pc, #72]	; (474d4 <sd_common_init+0x104>)
   4748a:	4618      	mov	r0, r3
   4748c:	e9cd 3300 	strd	r3, r3, [sp]
   47490:	f00f f85b 	bl	5654a <z_log_msg_runtime_create.constprop.0>
		return ret;
   47494:	f06f 0485 	mvn.w	r4, #133	; 0x85
   47498:	e7ad      	b.n	473f6 <sd_common_init+0x26>
	card->flags |= SD_SDHC_FLAG;
   4749a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   4749c:	f043 0308 	orr.w	r3, r3, #8
   474a0:	676b      	str	r3, [r5, #116]	; 0x74
	if (card->host_props.is_spi &&
   474a2:	2a00      	cmp	r2, #0
   474a4:	d0a7      	beq.n	473f6 <sd_common_init+0x26>
	struct sdhc_command cmd = {0};
   474a6:	2218      	movs	r2, #24
   474a8:	2100      	movs	r1, #0
   474aa:	a807      	add	r0, sp, #28
   474ac:	682c      	ldr	r4, [r5, #0]
   474ae:	f013 fd53 	bl	5af58 <memset>
	cmd.arg = 0x1; /* Enable CRC */
   474b2:	223b      	movs	r2, #59	; 0x3b
   474b4:	2301      	movs	r3, #1
   474b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
	cmd.response_type = SD_SPI_RSP_TYPE_R1;
   474ba:	2310      	movs	r3, #16
   474bc:	930b      	str	r3, [sp, #44]	; 0x2c
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   474be:	23c8      	movs	r3, #200	; 0xc8
	return sdhc_request(card->sdhc, &cmd, NULL);
   474c0:	4620      	mov	r0, r4
   474c2:	a905      	add	r1, sp, #20
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   474c4:	930d      	str	r3, [sp, #52]	; 0x34
	return sdhc_request(card->sdhc, &cmd, NULL);
   474c6:	f00f f84f 	bl	56568 <sdhc_request.constprop.0>
   474ca:	4604      	mov	r4, r0
   474cc:	e793      	b.n	473f6 <sd_common_init+0x26>
   474ce:	bf00      	nop
   474d0:	0005dfda 	.word	0x0005dfda
   474d4:	0005c02c 	.word	0x0005c02c
   474d8:	0005dfed 	.word	0x0005dfed
   474dc:	0005e027 	.word	0x0005e027
   474e0:	0005e013 	.word	0x0005e013

000474e4 <sd_init_io>:

static int sd_init_io(struct sd_card *card)
{
   474e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bus_io->bus_mode = SDHC_BUSMODE_PUSHPULL;
	bus_io->power_mode = SDHC_POWER_ON;
	bus_io->bus_width = SDHC_BUS_WIDTH1BIT;
	/* Cards start with legacy timing and 3.3V signalling at power on */
	bus_io->timing = SDHC_TIMING_LEGACY;
	bus_io->signal_voltage = SD_VOL_3_3_V;
   474e8:	2701      	movs	r7, #1
	bus_io->bus_mode = SDHC_BUSMODE_PUSHPULL;
   474ea:	2600      	movs	r6, #0
   474ec:	4b1b      	ldr	r3, [pc, #108]	; (4755c <sd_init_io+0x78>)
	struct sdhc_io *bus_io = &card->bus_io;
   474ee:	f100 0804 	add.w	r8, r0, #4
	bus_io->bus_mode = SDHC_BUSMODE_PUSHPULL;
   474f2:	e9c0 6301 	strd	r6, r3, [r0, #4]
	bus_io->signal_voltage = SD_VOL_3_3_V;
   474f6:	7347      	strb	r7, [r0, #13]
{
   474f8:	4604      	mov	r4, r0

	/* Toggle power to card to reset it */
	LOG_DBG("Resetting power to card");
	bus_io->power_mode = SDHC_POWER_OFF;
	ret = sdhc_set_io(card->sdhc, bus_io);
   474fa:	4641      	mov	r1, r8
   474fc:	6800      	ldr	r0, [r0, #0]
   474fe:	f00f f81b 	bl	56538 <sdhc_set_io>
	if (ret) {
   47502:	4605      	mov	r5, r0
   47504:	b168      	cbz	r0, 47522 <sd_init_io+0x3e>
	}
	sd_delay(card->host_props.power_delay);
	bus_io->power_mode = SDHC_POWER_ON;
	ret = sdhc_set_io(card->sdhc, bus_io);
	if (ret) {
		LOG_ERR("Could not disable card power via SDHC");
   47506:	4b16      	ldr	r3, [pc, #88]	; (47560 <sd_init_io+0x7c>)
	sd_delay(card->host_props.power_delay);
	/* Start bus clock */
	bus_io->clock = SDMMC_CLOCK_400KHZ;
	ret = sdhc_set_io(card->sdhc, bus_io);
	if (ret) {
		LOG_ERR("Could not start bus clock");
   47508:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4750c:	463a      	mov	r2, r7
   4750e:	4633      	mov	r3, r6
   47510:	4630      	mov	r0, r6
   47512:	4914      	ldr	r1, [pc, #80]	; (47564 <sd_init_io+0x80>)
   47514:	9600      	str	r6, [sp, #0]
   47516:	f00f f818 	bl	5654a <z_log_msg_runtime_create.constprop.0>
		return ret;
	}
	return 0;
}
   4751a:	4628      	mov	r0, r5
   4751c:	b004      	add	sp, #16
   4751e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_msleep(millis);
   47522:	6b20      	ldr	r0, [r4, #48]	; 0x30
   47524:	f00f f83a 	bl	5659c <k_msleep.isra.0>
	bus_io->power_mode = SDHC_POWER_ON;
   47528:	2302      	movs	r3, #2
	ret = sdhc_set_io(card->sdhc, bus_io);
   4752a:	4641      	mov	r1, r8
   4752c:	6820      	ldr	r0, [r4, #0]
	bus_io->power_mode = SDHC_POWER_ON;
   4752e:	7263      	strb	r3, [r4, #9]
	ret = sdhc_set_io(card->sdhc, bus_io);
   47530:	f00f f802 	bl	56538 <sdhc_set_io>
	if (ret) {
   47534:	4605      	mov	r5, r0
   47536:	2800      	cmp	r0, #0
   47538:	d1e5      	bne.n	47506 <sd_init_io+0x22>
	card->flags = 0U;
   4753a:	6760      	str	r0, [r4, #116]	; 0x74
	card->card_voltage = SD_VOL_3_3_V;
   4753c:	7427      	strb	r7, [r4, #16]
   4753e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   47540:	f00f f82c 	bl	5659c <k_msleep.isra.0>
	bus_io->clock = SDMMC_CLOCK_400KHZ;
   47544:	4b08      	ldr	r3, [pc, #32]	; (47568 <sd_init_io+0x84>)
	ret = sdhc_set_io(card->sdhc, bus_io);
   47546:	4641      	mov	r1, r8
   47548:	6820      	ldr	r0, [r4, #0]
	bus_io->clock = SDMMC_CLOCK_400KHZ;
   4754a:	6063      	str	r3, [r4, #4]
	ret = sdhc_set_io(card->sdhc, bus_io);
   4754c:	f00e fff4 	bl	56538 <sdhc_set_io>
	if (ret) {
   47550:	4605      	mov	r5, r0
   47552:	2800      	cmp	r0, #0
   47554:	d0e1      	beq.n	4751a <sd_init_io+0x36>
		LOG_ERR("Could not start bus clock");
   47556:	4b05      	ldr	r3, [pc, #20]	; (4756c <sd_init_io+0x88>)
   47558:	e7d6      	b.n	47508 <sd_init_io+0x24>
   4755a:	bf00      	nop
   4755c:	01010102 	.word	0x01010102
   47560:	0005e058 	.word	0x0005e058
   47564:	0005c02c 	.word	0x0005c02c
   47568:	00061a80 	.word	0x00061a80
   4756c:	0005e07e 	.word	0x0005e07e

00047570 <sd_command_init>:

/*
 * Performs init flow described in section 3.6 of SD specification.
 */
static int sd_command_init(struct sd_card *card)
{
   47570:	b5f0      	push	{r4, r5, r6, r7, lr}
   47572:	4605      	mov	r5, r0
   47574:	b085      	sub	sp, #20
   47576:	2001      	movs	r0, #1
   47578:	f00f f810 	bl	5659c <k_msleep.isra.0>
	sd_delay(1);
	/*
	 * Start card initialization and identification
	 * flow described in section 3.6 of SD specification
	 */
	ret = sd_common_init(card);
   4757c:	4628      	mov	r0, r5
   4757e:	f7ff ff27 	bl	473d0 <sd_common_init>
	if (ret) {
   47582:	4604      	mov	r4, r0
   47584:	bb28      	cbnz	r0, 475d2 <sd_command_init+0x62>
	ret = sd_test_sdio(card);
   47586:	4628      	mov	r0, r5
   47588:	f00f f81b 	bl	565c2 <sd_test_sdio>
	if ((ret == SD_NOT_SDIO) && card->type == CARD_SDMMC) {
   4758c:	2802      	cmp	r0, #2
   4758e:	d123      	bne.n	475d8 <sd_command_init+0x68>
   47590:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
   47594:	bb6b      	cbnz	r3, 475f2 <sd_command_init+0x82>
		LOG_INF("Detected SD card");
   47596:	4b30      	ldr	r3, [pc, #192]	; (47658 <sd_command_init+0xe8>)
   47598:	2203      	movs	r2, #3
   4759a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4759e:	4620      	mov	r0, r4
   475a0:	4623      	mov	r3, r4
   475a2:	492e      	ldr	r1, [pc, #184]	; (4765c <sd_command_init+0xec>)
   475a4:	9400      	str	r4, [sp, #0]
		LOG_INF("Detected SDIO card");
   475a6:	f00e ffd0 	bl	5654a <z_log_msg_runtime_create.constprop.0>
	ret = sd_check_card_type(card);
	if (ret) {
		LOG_ERR("Unusable card");
		return -ENOTSUP;
	}
	if (card->type == CARD_SDMMC) {
   475aa:	f895 7072 	ldrb.w	r7, [r5, #114]	; 0x72
   475ae:	2f00      	cmp	r7, #0
   475b0:	d149      	bne.n	47646 <sd_command_init+0xd6>
		/*
		 * Reset the card first- CMD5 sent to see if it is SDIO card
		 * may have left it in error state
		 */
		ret = sd_common_init(card);
   475b2:	4628      	mov	r0, r5
   475b4:	f7ff ff0c 	bl	473d0 <sd_common_init>
		if (ret) {
   475b8:	4606      	mov	r6, r0
   475ba:	b390      	cbz	r0, 47622 <sd_command_init+0xb2>
			LOG_ERR("Init after CMD5 failed");
   475bc:	4b28      	ldr	r3, [pc, #160]	; (47660 <sd_command_init+0xf0>)
   475be:	2201      	movs	r2, #1
   475c0:	e9cd 7301 	strd	r7, r3, [sp, #4]
   475c4:	4638      	mov	r0, r7
   475c6:	463b      	mov	r3, r7
   475c8:	4924      	ldr	r1, [pc, #144]	; (4765c <sd_command_init+0xec>)
   475ca:	9700      	str	r7, [sp, #0]
   475cc:	f00e ffbd 	bl	5654a <z_log_msg_runtime_create.constprop.0>
			return ret;
   475d0:	4634      	mov	r4, r6
	if (ret) {
		LOG_ERR("Card init failed");
		return ret;
	}
	return 0;
}
   475d2:	4620      	mov	r0, r4
   475d4:	b005      	add	sp, #20
   475d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if ((ret == 0) && card->type == CARD_SDIO) {
   475d8:	b958      	cbnz	r0, 475f2 <sd_command_init+0x82>
   475da:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
   475de:	2b01      	cmp	r3, #1
   475e0:	d107      	bne.n	475f2 <sd_command_init+0x82>
		LOG_INF("Detected SDIO card");
   475e2:	4b20      	ldr	r3, [pc, #128]	; (47664 <sd_command_init+0xf4>)
   475e4:	2203      	movs	r2, #3
   475e6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   475ea:	491c      	ldr	r1, [pc, #112]	; (4765c <sd_command_init+0xec>)
   475ec:	4623      	mov	r3, r4
   475ee:	9400      	str	r4, [sp, #0]
   475f0:	e7d9      	b.n	475a6 <sd_command_init+0x36>
	LOG_ERR("No usable card type was found");
   475f2:	2400      	movs	r4, #0
   475f4:	4b1c      	ldr	r3, [pc, #112]	; (47668 <sd_command_init+0xf8>)
   475f6:	2201      	movs	r2, #1
   475f8:	9302      	str	r3, [sp, #8]
   475fa:	4620      	mov	r0, r4
   475fc:	4623      	mov	r3, r4
   475fe:	e9cd 4400 	strd	r4, r4, [sp]
   47602:	4916      	ldr	r1, [pc, #88]	; (4765c <sd_command_init+0xec>)
   47604:	f00e ffa1 	bl	5654a <z_log_msg_runtime_create.constprop.0>
		LOG_ERR("Unusable card");
   47608:	4b18      	ldr	r3, [pc, #96]	; (4766c <sd_command_init+0xfc>)
   4760a:	2201      	movs	r2, #1
   4760c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   47610:	4623      	mov	r3, r4
   47612:	9400      	str	r4, [sp, #0]
		LOG_ERR("SDIO cards not currently supported");
   47614:	4618      	mov	r0, r3
   47616:	4911      	ldr	r1, [pc, #68]	; (4765c <sd_command_init+0xec>)
   47618:	f00e ff97 	bl	5654a <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   4761c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   47620:	e7d7      	b.n	475d2 <sd_command_init+0x62>
		ret = sdmmc_card_init(card);
   47622:	4628      	mov	r0, r5
   47624:	f000 f984 	bl	47930 <sdmmc_card_init>
	if (ret) {
   47628:	4605      	mov	r5, r0
   4762a:	2800      	cmp	r0, #0
   4762c:	d0d1      	beq.n	475d2 <sd_command_init+0x62>
		LOG_ERR("Card init failed");
   4762e:	4b10      	ldr	r3, [pc, #64]	; (47670 <sd_command_init+0x100>)
   47630:	2201      	movs	r2, #1
   47632:	e9cd 6301 	strd	r6, r3, [sp, #4]
   47636:	4630      	mov	r0, r6
   47638:	4633      	mov	r3, r6
   4763a:	4908      	ldr	r1, [pc, #32]	; (4765c <sd_command_init+0xec>)
   4763c:	9600      	str	r6, [sp, #0]
   4763e:	f00e ff84 	bl	5654a <z_log_msg_runtime_create.constprop.0>
		return ret;
   47642:	462c      	mov	r4, r5
   47644:	e7c5      	b.n	475d2 <sd_command_init+0x62>
	} else if (card->type == CARD_SDIO) {
   47646:	2f01      	cmp	r7, #1
   47648:	d1c3      	bne.n	475d2 <sd_command_init+0x62>
		LOG_ERR("SDIO cards not currently supported");
   4764a:	4b0a      	ldr	r3, [pc, #40]	; (47674 <sd_command_init+0x104>)
   4764c:	463a      	mov	r2, r7
   4764e:	9302      	str	r3, [sp, #8]
   47650:	2300      	movs	r3, #0
   47652:	e9cd 3300 	strd	r3, r3, [sp]
   47656:	e7dd      	b.n	47614 <sd_command_init+0xa4>
   47658:	0005e098 	.word	0x0005e098
   4765c:	0005c02c 	.word	0x0005c02c
   47660:	0005e0e8 	.word	0x0005e0e8
   47664:	0005e0a9 	.word	0x0005e0a9
   47668:	0005e0bc 	.word	0x0005e0bc
   4766c:	0005e0da 	.word	0x0005e0da
   47670:	0005e122 	.word	0x0005e122
   47674:	0005e0ff 	.word	0x0005e0ff

00047678 <sd_init>:

/* Initializes SD/SDIO card */
int sd_init(const struct device *sdhc_dev, struct sd_card *card)
{
   47678:	b5f0      	push	{r4, r5, r6, r7, lr}
   4767a:	460d      	mov	r5, r1
   4767c:	b085      	sub	sp, #20
	int ret;

	if (!sdhc_dev) {
   4767e:	2800      	cmp	r0, #0
   47680:	d063      	beq.n	4774a <sd_init+0xd2>
		return -ENODEV;
	}
	card->sdhc = sdhc_dev;
   47682:	f841 0b28 	str.w	r0, [r1], #40
	struct sdhc_host_props *props)
{
	const struct sdhc_driver_api *api =
		(const struct sdhc_driver_api *)dev->api;

	if (!api->get_host_props) {
   47686:	6883      	ldr	r3, [r0, #8]
   47688:	699b      	ldr	r3, [r3, #24]
   4768a:	b17b      	cbz	r3, 476ac <sd_init+0x34>
		return -ENOSYS;
	}

	return api->get_host_props(dev, props);
   4768c:	4798      	blx	r3
	ret = sdhc_get_host_props(card->sdhc, &card->host_props);
	if (ret) {
   4768e:	4604      	mov	r4, r0
   47690:	b178      	cbz	r0, 476b2 <sd_init+0x3a>
		LOG_ERR("SD host controller returned invalid properties");
   47692:	4b2f      	ldr	r3, [pc, #188]	; (47750 <sd_init+0xd8>)
		LOG_DBG("Could not init card mutex");
		return ret;
	}
	ret = k_mutex_lock(&card->lock, K_MSEC(CONFIG_SD_INIT_TIMEOUT));
	if (ret) {
		LOG_ERR("Timeout while trying to acquire card mutex");
   47694:	9302      	str	r3, [sp, #8]
   47696:	2300      	movs	r3, #0
   47698:	2201      	movs	r2, #1
   4769a:	4618      	mov	r0, r3
   4769c:	e9cd 3300 	strd	r3, r3, [sp]
   476a0:	492c      	ldr	r1, [pc, #176]	; (47754 <sd_init+0xdc>)
   476a2:	f00e ff52 	bl	5654a <z_log_msg_runtime_create.constprop.0>
	if (ret) {
		LOG_DBG("Could not unlock card mutex");
		return ret;
	}
	return ret;
}
   476a6:	4620      	mov	r0, r4
   476a8:	b005      	add	sp, #20
   476aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOSYS;
   476ac:	f06f 0457 	mvn.w	r4, #87	; 0x57
   476b0:	e7ef      	b.n	47692 <sd_init+0x1a>
	ret = k_mutex_init(&card->lock);
   476b2:	f105 0614 	add.w	r6, r5, #20
	return z_impl_k_mutex_init(mutex);
   476b6:	4630      	mov	r0, r6
   476b8:	f013 f8fa 	bl	5a8b0 <z_impl_k_mutex_init>
	if (ret) {
   476bc:	4604      	mov	r4, r0
   476be:	2800      	cmp	r0, #0
   476c0:	d1f1      	bne.n	476a6 <sd_init+0x2e>
	return z_impl_k_mutex_lock(mutex, timeout);
   476c2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   476c6:	2300      	movs	r3, #0
   476c8:	4630      	mov	r0, r6
   476ca:	f00a ff23 	bl	52514 <z_impl_k_mutex_lock>
	if (ret) {
   476ce:	4604      	mov	r4, r0
   476d0:	b108      	cbz	r0, 476d6 <sd_init+0x5e>
		LOG_ERR("Timeout while trying to acquire card mutex");
   476d2:	4b21      	ldr	r3, [pc, #132]	; (47758 <sd_init+0xe0>)
   476d4:	e7de      	b.n	47694 <sd_init+0x1c>
	ret = sd_init_io(card);
   476d6:	4628      	mov	r0, r5
   476d8:	f7ff ff04 	bl	474e4 <sd_init_io>
	if (ret) {
   476dc:	4604      	mov	r4, r0
   476de:	b118      	cbz	r0, 476e8 <sd_init+0x70>
			k_mutex_unlock(&card->lock);
   476e0:	4630      	mov	r0, r6
   476e2:	f00e ff30 	bl	56546 <k_mutex_unlock>
			return ret;
   476e6:	e7de      	b.n	476a6 <sd_init+0x2e>
	ret = sd_command_init(card);
   476e8:	4628      	mov	r0, r5
   476ea:	f7ff ff41 	bl	47570 <sd_command_init>
	if (ret == SD_RESTART) {
   476ee:	2803      	cmp	r0, #3
	ret = sd_command_init(card);
   476f0:	4604      	mov	r4, r0
	if (ret == SD_RESTART) {
   476f2:	d119      	bne.n	47728 <sd_init+0xb0>
		card->status = CARD_ERROR;
   476f4:	2701      	movs	r7, #1
		ret = sd_init_io(card);
   476f6:	4628      	mov	r0, r5
		card->status = CARD_ERROR;
   476f8:	f885 7071 	strb.w	r7, [r5, #113]	; 0x71
		ret = sd_init_io(card);
   476fc:	f7ff fef2 	bl	474e4 <sd_init_io>
		if (ret) {
   47700:	4604      	mov	r4, r0
   47702:	b150      	cbz	r0, 4771a <sd_init+0xa2>
			LOG_ERR("Failed to reset SDHC I/O");
   47704:	4b15      	ldr	r3, [pc, #84]	; (4775c <sd_init+0xe4>)
			LOG_ERR("Failed to init SD card after I/O reset");
   47706:	9302      	str	r3, [sp, #8]
   47708:	2300      	movs	r3, #0
   4770a:	463a      	mov	r2, r7
   4770c:	4618      	mov	r0, r3
   4770e:	e9cd 3300 	strd	r3, r3, [sp]
   47712:	4910      	ldr	r1, [pc, #64]	; (47754 <sd_init+0xdc>)
   47714:	f00e ff19 	bl	5654a <z_log_msg_runtime_create.constprop.0>
   47718:	e7e2      	b.n	476e0 <sd_init+0x68>
		ret = sd_command_init(card);
   4771a:	4628      	mov	r0, r5
   4771c:	f7ff ff28 	bl	47570 <sd_command_init>
		if (ret) {
   47720:	4604      	mov	r4, r0
   47722:	b148      	cbz	r0, 47738 <sd_init+0xc0>
			LOG_ERR("Failed to init SD card after I/O reset");
   47724:	4b0e      	ldr	r3, [pc, #56]	; (47760 <sd_init+0xe8>)
   47726:	e7ee      	b.n	47706 <sd_init+0x8e>
	} else if (ret != 0) {
   47728:	b130      	cbz	r0, 47738 <sd_init+0xc0>
		k_mutex_unlock(&card->lock);
   4772a:	4630      	mov	r0, r6
   4772c:	f00e ff0b 	bl	56546 <k_mutex_unlock>
		card->status = CARD_ERROR;
   47730:	2301      	movs	r3, #1
   47732:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
		return ret;
   47736:	e7b6      	b.n	476a6 <sd_init+0x2e>
	card->status = CARD_INITIALIZED;
   47738:	2302      	movs	r3, #2
	ret = k_mutex_unlock(&card->lock);
   4773a:	4630      	mov	r0, r6
	card->status = CARD_INITIALIZED;
   4773c:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
}
   47740:	b005      	add	sp, #20
   47742:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ret = k_mutex_unlock(&card->lock);
   47746:	f00e befe 	b.w	56546 <k_mutex_unlock>
		return -ENODEV;
   4774a:	f06f 0412 	mvn.w	r4, #18
   4774e:	e7aa      	b.n	476a6 <sd_init+0x2e>
   47750:	0005e133 	.word	0x0005e133
   47754:	0005c02c 	.word	0x0005c02c
   47758:	0005e162 	.word	0x0005e162
   4775c:	0005e18d 	.word	0x0005e18d
   47760:	0005e1a6 	.word	0x0005e1a6

00047764 <sdmmc_app_command>:
	return 0;
}

/* Helper to send SD app command */
static int sdmmc_app_command(struct sd_card *card, int relative_card_address)
{
   47764:	b530      	push	{r4, r5, lr}
   47766:	b08f      	sub	sp, #60	; 0x3c
   47768:	4605      	mov	r5, r0
   4776a:	460c      	mov	r4, r1
	struct sdhc_command cmd = {0};
   4776c:	2218      	movs	r2, #24
   4776e:	2100      	movs	r1, #0
   47770:	a807      	add	r0, sp, #28
   47772:	f013 fbf1 	bl	5af58 <memset>
	int ret;

	cmd.opcode = SD_APP_CMD;
   47776:	2337      	movs	r3, #55	; 0x37
   47778:	9305      	str	r3, [sp, #20]
	cmd.arg = relative_card_address << 16U;
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   4777a:	2311      	movs	r3, #17
   4777c:	930b      	str	r3, [sp, #44]	; 0x2c
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   4777e:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47780:	2200      	movs	r2, #0
   47782:	6828      	ldr	r0, [r5, #0]
	cmd.arg = relative_card_address << 16U;
   47784:	0424      	lsls	r4, r4, #16
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47786:	a905      	add	r1, sp, #20
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47788:	930d      	str	r3, [sp, #52]	; 0x34
	cmd.arg = relative_card_address << 16U;
   4778a:	9406      	str	r4, [sp, #24]
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   4778c:	f00e ff50 	bl	56630 <sdhc_request>
   47790:	4603      	mov	r3, r0
	if (ret) {
   47792:	b9f8      	cbnz	r0, 477d4 <sdmmc_app_command+0x70>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
   47794:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   47796:	2a01      	cmp	r2, #1
   47798:	d111      	bne.n	477be <sdmmc_app_command+0x5a>
		return (cmd->response[0U] & SD_R1_ERR_FLAGS);
   4779a:	9907      	ldr	r1, [sp, #28]
		/* We want to retry transmission */
		return SD_RETRY;
	}
	ret = sdmmc_check_response(&cmd);
	if (ret) {
   4779c:	4a0e      	ldr	r2, [pc, #56]	; (477d8 <sdmmc_app_command+0x74>)
   4779e:	400a      	ands	r2, r1
   477a0:	b16a      	cbz	r2, 477be <sdmmc_app_command+0x5a>
		LOG_WRN("SD app command failed with R1 response of 0x%X",
   477a2:	4a0e      	ldr	r2, [pc, #56]	; (477dc <sdmmc_app_command+0x78>)
   477a4:	9103      	str	r1, [sp, #12]
   477a6:	e9cd 0201 	strd	r0, r2, [sp, #4]
   477aa:	490d      	ldr	r1, [pc, #52]	; (477e0 <sdmmc_app_command+0x7c>)
   477ac:	2202      	movs	r2, #2
   477ae:	9000      	str	r0, [sp, #0]
   477b0:	f00e ffbe 	bl	56730 <z_log_msg_runtime_create.constprop.0>
			cmd.response[0]);
		return -EIO;
   477b4:	f06f 0304 	mvn.w	r3, #4
	if ((!card->host_props.is_spi) && !(cmd.response[0U] & SD_R1_APP_CMD)) {
		/* Command succeeded, but card not ready for app command. No APP CMD support */
		return -ENOTSUP;
	}
	return 0;
}
   477b8:	4618      	mov	r0, r3
   477ba:	b00f      	add	sp, #60	; 0x3c
   477bc:	bd30      	pop	{r4, r5, pc}
	if ((!card->host_props.is_spi) && !(cmd.response[0U] & SD_R1_APP_CMD)) {
   477be:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
   477c2:	2a00      	cmp	r2, #0
   477c4:	d1f8      	bne.n	477b8 <sdmmc_app_command+0x54>
		return -ENOTSUP;
   477c6:	9a07      	ldr	r2, [sp, #28]
   477c8:	f012 0f20 	tst.w	r2, #32
   477cc:	bf08      	it	eq
   477ce:	f06f 0385 	mvneq.w	r3, #133	; 0x85
   477d2:	e7f1      	b.n	477b8 <sdmmc_app_command+0x54>
		return SD_RETRY;
   477d4:	2301      	movs	r3, #1
   477d6:	e7ef      	b.n	477b8 <sdmmc_app_command+0x54>
   477d8:	fdf98008 	.word	0xfdf98008
   477dc:	0005e1d0 	.word	0x0005e1d0
   477e0:	0005c02c 	.word	0x0005c02c

000477e4 <sdmmc_wait_ready>:
	return -EBUSY;
}

/* Waits for SD card to be ready for data. Returns 0 if card is ready */
static int sdmmc_wait_ready(struct sd_card *card)
{
   477e4:	b570      	push	{r4, r5, r6, lr}
   477e6:	4604      	mov	r4, r0
	int ret, timeout = CONFIG_SD_DATA_TIMEOUT * 1000;
   477e8:	4d0c      	ldr	r5, [pc, #48]	; (4781c <sdmmc_wait_ready+0x38>)
	bool busy = true;

	do {
		busy = sdhc_card_busy(card->sdhc);
   477ea:	6820      	ldr	r0, [r4, #0]
   477ec:	f00e ff2e 	bl	5664c <sdhc_card_busy>
		if (!busy) {
   477f0:	b138      	cbz	r0, 47802 <sdmmc_wait_ready+0x1e>
	z_impl_k_busy_wait(usec_to_wait);
   477f2:	207d      	movs	r0, #125	; 0x7d
			ret = sd_retry(sdmmc_read_status, card, CONFIG_SD_RETRY_COUNT);
			busy = (ret != 0);
		} else {
			/* Delay 125us before polling again */
			k_busy_wait(125);
			timeout -= 125;
   477f4:	3d7d      	subs	r5, #125	; 0x7d
   477f6:	f013 fa95 	bl	5ad24 <z_impl_k_busy_wait>
		}
	} while (busy && (timeout > 0));
   477fa:	2d00      	cmp	r5, #0
   477fc:	dcf5      	bgt.n	477ea <sdmmc_wait_ready+0x6>
   477fe:	2001      	movs	r0, #1
   47800:	e00b      	b.n	4781a <sdmmc_wait_ready+0x36>
   47802:	260c      	movs	r6, #12
	int ret = -ETIMEDOUT;
   47804:	f06f 0073 	mvn.w	r0, #115	; 0x73
	while (retries-- >= 0) {
   47808:	3e01      	subs	r6, #1
   4780a:	d004      	beq.n	47816 <sdmmc_wait_ready+0x32>
		/* Try cmd */
		ret = cmd(card);
   4780c:	4620      	mov	r0, r4
   4780e:	f00e ff50 	bl	566b2 <sdmmc_read_status>
		 * Functions have 3 possible responses:
		 * 0: success
		 * SD_RETRY: retry command
		 * other: does not retry
		 */
		if (ret != SD_RETRY) {
   47812:	2801      	cmp	r0, #1
   47814:	d0f8      	beq.n	47808 <sdmmc_wait_ready+0x24>
			break;
		}
	}
	return ret == SD_RETRY ? -ETIMEDOUT : ret;
   47816:	2800      	cmp	r0, #0
   47818:	d1e7      	bne.n	477ea <sdmmc_wait_ready+0x6>
	return busy;
}
   4781a:	bd70      	pop	{r4, r5, r6, pc}
   4781c:	00989680 	.word	0x00989680

00047820 <sdmmc_set_bus_speed>:
{
   47820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	switch (card->card_speed) {
   47822:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
{
   47826:	4606      	mov	r6, r0
	uint8_t *status = card->card_buffer;
   47828:	f100 0378 	add.w	r3, r0, #120	; 0x78
	switch (card->card_speed) {
   4782c:	2a04      	cmp	r2, #4
   4782e:	d81e      	bhi.n	4786e <sdmmc_set_bus_speed+0x4e>
   47830:	e8df f002 	tbb	[pc, r2]
   47834:	2a212427 	.word	0x2a212427
   47838:	03          	.byte	0x03
   47839:	00          	.byte	0x00
		timing = SDHC_TIMING_DDR50;
   4783a:	2507      	movs	r5, #7
	switch (card->card_speed) {
   4783c:	491f      	ldr	r1, [pc, #124]	; (478bc <sdmmc_set_bus_speed+0x9c>)
		card->switch_caps.uhs_max_dtr = SD_CLOCK_208MHZ;
   4783e:	6571      	str	r1, [r6, #84]	; 0x54
	ret = sdmmc_switch(card, SD_SWITCH_SET, SD_GRP_TIMING_MODE,
   47840:	6830      	ldr	r0, [r6, #0]
   47842:	2100      	movs	r1, #0
   47844:	f00e ff83 	bl	5674e <sdmmc_switch.constprop.0.isra.0>
	if (ret) {
   47848:	4604      	mov	r4, r0
   4784a:	b988      	cbnz	r0, 47870 <sdmmc_set_bus_speed+0x50>
	if ((status[16] & 0xF) != card->card_speed) {
   4784c:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
   47850:	f896 2070 	ldrb.w	r2, [r6, #112]	; 0x70
   47854:	f003 030f 	and.w	r3, r3, #15
   47858:	429a      	cmp	r2, r3
   4785a:	d018      	beq.n	4788e <sdmmc_set_bus_speed+0x6e>
		LOG_WRN("Card did not accept new speed");
   4785c:	4b18      	ldr	r3, [pc, #96]	; (478c0 <sdmmc_set_bus_speed+0xa0>)
   4785e:	2202      	movs	r2, #2
   47860:	e9cd 0301 	strd	r0, r3, [sp, #4]
   47864:	4917      	ldr	r1, [pc, #92]	; (478c4 <sdmmc_set_bus_speed+0xa4>)
   47866:	4603      	mov	r3, r0
   47868:	9000      	str	r0, [sp, #0]
   4786a:	f00e ff61 	bl	56730 <z_log_msg_runtime_create.constprop.0>
		return 0;
   4786e:	2400      	movs	r4, #0
}
   47870:	4620      	mov	r0, r4
   47872:	b004      	add	sp, #16
   47874:	bd70      	pop	{r4, r5, r6, pc}
		timing = SDHC_TIMING_SDR50;
   47876:	2505      	movs	r5, #5
		break;
   47878:	4913      	ldr	r1, [pc, #76]	; (478c8 <sdmmc_set_bus_speed+0xa8>)
   4787a:	e7e0      	b.n	4783e <sdmmc_set_bus_speed+0x1e>
		timing = SDHC_TIMING_SDR25;
   4787c:	2504      	movs	r5, #4
		break;
   4787e:	490f      	ldr	r1, [pc, #60]	; (478bc <sdmmc_set_bus_speed+0x9c>)
   47880:	e7dd      	b.n	4783e <sdmmc_set_bus_speed+0x1e>
		timing = SDHC_TIMING_SDR12;
   47882:	2503      	movs	r5, #3
		break;
   47884:	4911      	ldr	r1, [pc, #68]	; (478cc <sdmmc_set_bus_speed+0xac>)
   47886:	e7da      	b.n	4783e <sdmmc_set_bus_speed+0x1e>
	switch (card->card_speed) {
   47888:	2506      	movs	r5, #6
   4788a:	4911      	ldr	r1, [pc, #68]	; (478d0 <sdmmc_set_bus_speed+0xb0>)
   4788c:	e7d7      	b.n	4783e <sdmmc_set_bus_speed+0x1e>
		card->bus_io.clock = card->switch_caps.uhs_max_dtr;
   4788e:	4631      	mov	r1, r6
   47890:	6d73      	ldr	r3, [r6, #84]	; 0x54
		card->bus_io.timing = timing;
   47892:	72f5      	strb	r5, [r6, #11]
		card->bus_io.clock = card->switch_caps.uhs_max_dtr;
   47894:	f841 3f04 	str.w	r3, [r1, #4]!
		ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47898:	6830      	ldr	r0, [r6, #0]
   4789a:	f00e fed0 	bl	5663e <sdhc_set_io>
		if (ret) {
   4789e:	4604      	mov	r4, r0
   478a0:	2800      	cmp	r0, #0
   478a2:	d0e4      	beq.n	4786e <sdmmc_set_bus_speed+0x4e>
			LOG_ERR("Failed to change host bus speed");
   478a4:	4b0b      	ldr	r3, [pc, #44]	; (478d4 <sdmmc_set_bus_speed+0xb4>)
   478a6:	2201      	movs	r2, #1
   478a8:	9302      	str	r3, [sp, #8]
   478aa:	2300      	movs	r3, #0
   478ac:	4905      	ldr	r1, [pc, #20]	; (478c4 <sdmmc_set_bus_speed+0xa4>)
   478ae:	4618      	mov	r0, r3
   478b0:	e9cd 3300 	strd	r3, r3, [sp]
   478b4:	f00e ff3c 	bl	56730 <z_log_msg_runtime_create.constprop.0>
			return ret;
   478b8:	e7da      	b.n	47870 <sdmmc_set_bus_speed+0x50>
   478ba:	bf00      	nop
   478bc:	02faf080 	.word	0x02faf080
   478c0:	0005e1ff 	.word	0x0005e1ff
   478c4:	0005c02c 	.word	0x0005c02c
   478c8:	05f5e100 	.word	0x05f5e100
   478cc:	017d7840 	.word	0x017d7840
   478d0:	0c65d400 	.word	0x0c65d400
   478d4:	0005e21d 	.word	0x0005e21d

000478d8 <sdmmc_set_bus_width.constprop.0>:
static int sdmmc_set_bus_width(struct sd_card *card, enum sdhc_bus_width width)
   478d8:	b510      	push	{r4, lr}
   478da:	4604      	mov	r4, r0
   478dc:	b08a      	sub	sp, #40	; 0x28
	struct sdhc_command cmd = {0};
   478de:	2100      	movs	r1, #0
   478e0:	2224      	movs	r2, #36	; 0x24
   478e2:	a801      	add	r0, sp, #4
   478e4:	f013 fb38 	bl	5af58 <memset>
	ret = sdmmc_app_command(card, card->relative_addr);
   478e8:	4620      	mov	r0, r4
   478ea:	6e21      	ldr	r1, [r4, #96]	; 0x60
   478ec:	f7ff ff3a 	bl	47764 <sdmmc_app_command>
	if (ret) {
   478f0:	b9d0      	cbnz	r0, 47928 <sdmmc_set_bus_width.constprop.0+0x50>
	cmd.opcode = SD_APP_SET_BUS_WIDTH;
   478f2:	2306      	movs	r3, #6
   478f4:	9301      	str	r3, [sp, #4]
	cmd.response_type = SD_RSP_TYPE_R1;
   478f6:	2301      	movs	r3, #1
   478f8:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   478fa:	23c8      	movs	r3, #200	; 0xc8
   478fc:	9309      	str	r3, [sp, #36]	; 0x24
		cmd.arg = 2U;
   478fe:	2302      	movs	r3, #2
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47900:	4602      	mov	r2, r0
   47902:	a901      	add	r1, sp, #4
   47904:	6820      	ldr	r0, [r4, #0]
		cmd.arg = 2U;
   47906:	9302      	str	r3, [sp, #8]
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47908:	f00e fe92 	bl	56630 <sdhc_request>
	if (ret) {
   4790c:	b960      	cbnz	r0, 47928 <sdmmc_set_bus_width.constprop.0+0x50>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
   4790e:	9b07      	ldr	r3, [sp, #28]
   47910:	2b01      	cmp	r3, #1
   47912:	d103      	bne.n	4791c <sdmmc_set_bus_width.constprop.0+0x44>
		return (cmd->response[0U] & SD_R1_ERR_FLAGS);
   47914:	4805      	ldr	r0, [pc, #20]	; (4792c <sdmmc_set_bus_width.constprop.0+0x54>)
   47916:	9b03      	ldr	r3, [sp, #12]
   47918:	4018      	ands	r0, r3
	if (ret) {
   4791a:	b928      	cbnz	r0, 47928 <sdmmc_set_bus_width.constprop.0+0x50>
	card->bus_io.bus_width = width;
   4791c:	2304      	movs	r3, #4
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   4791e:	6820      	ldr	r0, [r4, #0]
	card->bus_io.bus_width = width;
   47920:	72a3      	strb	r3, [r4, #10]
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47922:	18e1      	adds	r1, r4, r3
   47924:	f00e fe8b 	bl	5663e <sdhc_set_io>
}
   47928:	b00a      	add	sp, #40	; 0x28
   4792a:	bd10      	pop	{r4, pc}
   4792c:	fdf98008 	.word	0xfdf98008

00047930 <sdmmc_card_init>:
{
   47930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
   47934:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
   47938:	4604      	mov	r4, r0
   4793a:	b095      	sub	sp, #84	; 0x54
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
   4793c:	2b00      	cmp	r3, #0
   4793e:	f000 80f8 	beq.w	47b32 <sdmmc_card_init+0x202>
	cmd.arg = arg;
   47942:	233a      	movs	r3, #58	; 0x3a
   47944:	2200      	movs	r2, #0
   47946:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
	cmd.response_type = SD_SPI_RSP_TYPE_R3;
   4794a:	2340      	movs	r3, #64	; 0x40
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   4794c:	6800      	ldr	r0, [r0, #0]
   4794e:	a90b      	add	r1, sp, #44	; 0x2c
	cmd.response_type = SD_SPI_RSP_TYPE_R3;
   47950:	9311      	str	r3, [sp, #68]	; 0x44
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47952:	f00e fe6d 	bl	56630 <sdhc_request>
	card->ocr = cmd.response[1];
   47956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		if (ret) {
   47958:	4605      	mov	r5, r0
	card->ocr = cmd.response[1];
   4795a:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (ret) {
   4795c:	2800      	cmp	r0, #0
   4795e:	d178      	bne.n	47a52 <sdmmc_card_init+0x122>
	cmd.opcode = SD_APP_SEND_OP_COND;
   47960:	2329      	movs	r3, #41	; 0x29
		if (card->flags & SD_SDHC_FLAG) {
   47962:	6f66      	ldr	r6, [r4, #116]	; 0x74
   47964:	f3c6 06c0 	ubfx	r6, r6, #3, #1
   47968:	07b6      	lsls	r6, r6, #30
	cmd.arg = ocr_arg;
   4796a:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	cmd.response_type = (SD_RSP_TYPE_R3 | SD_SPI_RSP_TYPE_R1);
   4796e:	2314      	movs	r3, #20
   47970:	9311      	str	r3, [sp, #68]	; 0x44
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47972:	23c8      	movs	r3, #200	; 0xc8
   47974:	9313      	str	r3, [sp, #76]	; 0x4c
		ret = sdmmc_app_command(card, 0U);
   47976:	2100      	movs	r1, #0
   47978:	4620      	mov	r0, r4
   4797a:	f7ff fef3 	bl	47764 <sdmmc_app_command>
		if (ret == SD_RETRY) {
   4797e:	2801      	cmp	r0, #1
		ret = sdmmc_app_command(card, 0U);
   47980:	4602      	mov	r2, r0
		if (ret == SD_RETRY) {
   47982:	d030      	beq.n	479e6 <sdmmc_card_init+0xb6>
		} else if (ret) {
   47984:	2800      	cmp	r0, #0
   47986:	f040 82d0 	bne.w	47f2a <sdmmc_card_init+0x5fa>
		ret = sdhc_request(card->sdhc, &cmd, NULL);
   4798a:	6820      	ldr	r0, [r4, #0]
   4798c:	a90b      	add	r1, sp, #44	; 0x2c
   4798e:	f00e fe4f 	bl	56630 <sdhc_request>
		if (ret) {
   47992:	4602      	mov	r2, r0
   47994:	2800      	cmp	r0, #0
   47996:	f040 82c8 	bne.w	47f2a <sdmmc_card_init+0x5fa>
		if (ocr_arg == 0) {
   4799a:	b12e      	cbz	r6, 479a8 <sdmmc_card_init+0x78>
		if (card->host_props.is_spi) {
   4799c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
			if (!(cmd.response[0] & SD_SPI_R1IDLE_STATE)) {
   479a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		if (card->host_props.is_spi) {
   479a2:	b1d2      	cbz	r2, 479da <sdmmc_card_init+0xaa>
			if (!(cmd.response[0] & SD_SPI_R1IDLE_STATE)) {
   479a4:	07df      	lsls	r7, r3, #31
   479a6:	d41b      	bmi.n	479e0 <sdmmc_card_init+0xb0>
	cmd.opcode = SD_SPI_READ_OCR;
   479a8:	233a      	movs	r3, #58	; 0x3a
	cmd.arg = arg;
   479aa:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	cmd.response_type = SD_SPI_RSP_TYPE_R3;
   479ae:	2340      	movs	r3, #64	; 0x40
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   479b0:	2200      	movs	r2, #0
   479b2:	6820      	ldr	r0, [r4, #0]
   479b4:	a90b      	add	r1, sp, #44	; 0x2c
	cmd.response_type = SD_SPI_RSP_TYPE_R3;
   479b6:	9311      	str	r3, [sp, #68]	; 0x44
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   479b8:	f00e fe3a 	bl	56630 <sdhc_request>
	card->ocr = cmd.response[1];
   479bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (ret) {
   479be:	4605      	mov	r5, r0
	card->ocr = cmd.response[1];
   479c0:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (ret) {
   479c2:	b308      	cbz	r0, 47a08 <sdmmc_card_init+0xd8>
		LOG_ERR("Failed to query card OCR");
   479c4:	4ba1      	ldr	r3, [pc, #644]	; (47c4c <sdmmc_card_init+0x31c>)
		LOG_ERR("Failed to raise bus frequency to 25MHz");
   479c6:	9302      	str	r3, [sp, #8]
   479c8:	2300      	movs	r3, #0
   479ca:	2201      	movs	r2, #1
   479cc:	4618      	mov	r0, r3
   479ce:	e9cd 3300 	strd	r3, r3, [sp]
   479d2:	499f      	ldr	r1, [pc, #636]	; (47c50 <sdmmc_card_init+0x320>)
   479d4:	f00e feac 	bl	56730 <z_log_msg_runtime_create.constprop.0>
		return ret;
   479d8:	e03b      	b.n	47a52 <sdmmc_card_init+0x122>
			if ((cmd.response[0U] & SD_OCR_PWR_BUSY_FLAG)) {
   479da:	2b00      	cmp	r3, #0
   479dc:	f2c0 82a3 	blt.w	47f26 <sdmmc_card_init+0x5f6>
	k_msleep(millis);
   479e0:	200a      	movs	r0, #10
   479e2:	f00e fee6 	bl	567b2 <k_msleep.isra.0>
	for (retries = 0; retries < CONFIG_SD_OCR_RETRY_COUNT; retries++) {
   479e6:	3501      	adds	r5, #1
   479e8:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   479ec:	d1c3      	bne.n	47976 <sdmmc_card_init+0x46>
		LOG_ERR("Card never left busy state");
   479ee:	4b99      	ldr	r3, [pc, #612]	; (47c54 <sdmmc_card_init+0x324>)
   479f0:	2201      	movs	r2, #1
   479f2:	9302      	str	r3, [sp, #8]
   479f4:	2300      	movs	r3, #0
   479f6:	4996      	ldr	r1, [pc, #600]	; (47c50 <sdmmc_card_init+0x320>)
   479f8:	4618      	mov	r0, r3
   479fa:	e9cd 3300 	strd	r3, r3, [sp]
   479fe:	f00e fe97 	bl	56730 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   47a02:	f06f 0573 	mvn.w	r5, #115	; 0x73
   47a06:	e024      	b.n	47a52 <sdmmc_card_init+0x122>
	if (card->ocr & SD_OCR_CARD_CAP_FLAG) {
   47a08:	005d      	lsls	r5, r3, #1
		card->flags |= SD_HIGH_CAPACITY_FLAG;
   47a0a:	bf48      	it	mi
   47a0c:	6f62      	ldrmi	r2, [r4, #116]	; 0x74
		(!card->host_props.is_spi) &&
   47a0e:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
		card->flags |= SD_HIGH_CAPACITY_FLAG;
   47a12:	bf44      	itt	mi
   47a14:	f042 0202 	orrmi.w	r2, r2, #2
   47a18:	6762      	strmi	r2, [r4, #116]	; 0x74
	if (card->ocr & SD_OCR_SWITCH_18_ACCEPT_FLAG) {
   47a1a:	01d8      	lsls	r0, r3, #7
		card->flags |= SD_1800MV_FLAG;
   47a1c:	bf42      	ittt	mi
   47a1e:	6f62      	ldrmi	r2, [r4, #116]	; 0x74
   47a20:	f042 0220 	orrmi.w	r2, r2, #32
   47a24:	6762      	strmi	r2, [r4, #116]	; 0x74
	if (card->ocr & SD_OCR_VDD29_30FLAG) {
   47a26:	0399      	lsls	r1, r3, #14
		card->flags |= SD_3000MV_FLAG;
   47a28:	bf42      	ittt	mi
   47a2a:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
   47a2c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
   47a30:	6763      	strmi	r3, [r4, #116]	; 0x74
	if ((card->flags & SD_1800MV_FLAG) &&
   47a32:	6f63      	ldr	r3, [r4, #116]	; 0x74
   47a34:	069a      	lsls	r2, r3, #26
   47a36:	d578      	bpl.n	47b2a <sdmmc_card_init+0x1fa>
   47a38:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   47a3c:	079b      	lsls	r3, r3, #30
   47a3e:	d574      	bpl.n	47b2a <sdmmc_card_init+0x1fa>
		(!card->host_props.is_spi) &&
   47a40:	b15d      	cbz	r5, 47a5a <sdmmc_card_init+0x12a>
		ret = sdmmc_spi_read_cxd(card, SD_SEND_CID, cid);
   47a42:	210a      	movs	r1, #10
   47a44:	4620      	mov	r0, r4
   47a46:	aa0b      	add	r2, sp, #44	; 0x2c
   47a48:	f00e fe07 	bl	5665a <sdmmc_spi_read_cxd>
	if (ret) {
   47a4c:	4605      	mov	r5, r0
   47a4e:	2800      	cmp	r0, #0
   47a50:	d072      	beq.n	47b38 <sdmmc_card_init+0x208>
}
   47a52:	4628      	mov	r0, r5
   47a54:	b015      	add	sp, #84	; 0x54
   47a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct sdhc_command cmd = {0};
   47a5a:	221c      	movs	r2, #28
   47a5c:	4629      	mov	r1, r5
   47a5e:	a80c      	add	r0, sp, #48	; 0x30
   47a60:	f013 fa7a 	bl	5af58 <memset>
	cmd.opcode = SD_VOL_SWITCH;
   47a64:	230b      	movs	r3, #11
   47a66:	930b      	str	r3, [sp, #44]	; 0x2c
	cmd.response_type = SD_RSP_TYPE_R1;
   47a68:	2301      	movs	r3, #1
   47a6a:	9311      	str	r3, [sp, #68]	; 0x44
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47a6c:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47a6e:	462a      	mov	r2, r5
   47a70:	6820      	ldr	r0, [r4, #0]
   47a72:	a90b      	add	r1, sp, #44	; 0x2c
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47a74:	9313      	str	r3, [sp, #76]	; 0x4c
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   47a76:	f00e fddb 	bl	56630 <sdhc_request>
	if (ret) {
   47a7a:	2800      	cmp	r0, #0
   47a7c:	d138      	bne.n	47af0 <sdmmc_card_init+0x1c0>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
   47a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   47a80:	2b01      	cmp	r3, #1
   47a82:	d103      	bne.n	47a8c <sdmmc_card_init+0x15c>
	if (ret) {
   47a84:	4b74      	ldr	r3, [pc, #464]	; (47c58 <sdmmc_card_init+0x328>)
   47a86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   47a88:	4013      	ands	r3, r2
   47a8a:	bb8b      	cbnz	r3, 47af0 <sdmmc_card_init+0x1c0>
	if (!(sdhc_card_busy(card->sdhc))) {
   47a8c:	6820      	ldr	r0, [r4, #0]
   47a8e:	f00e fddd 	bl	5664c <sdhc_card_busy>
   47a92:	b930      	cbnz	r0, 47aa2 <sdmmc_card_init+0x172>
   47a94:	2001      	movs	r0, #1
   47a96:	f00e fe8c 	bl	567b2 <k_msleep.isra.0>
		if (!sdhc_card_busy(card->sdhc)) {
   47a9a:	6820      	ldr	r0, [r4, #0]
   47a9c:	f00e fdd6 	bl	5664c <sdhc_card_busy>
   47aa0:	b330      	cbz	r0, 47af0 <sdmmc_card_init+0x1c0>
	card->bus_io.clock = 0;
   47aa2:	4626      	mov	r6, r4
   47aa4:	2300      	movs	r3, #0
	sd_clock = card->bus_io.clock;
   47aa6:	f8d4 8004 	ldr.w	r8, [r4, #4]
	card->bus_io.clock = 0;
   47aaa:	f846 3f04 	str.w	r3, [r6, #4]!
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47aae:	4631      	mov	r1, r6
   47ab0:	6820      	ldr	r0, [r4, #0]
   47ab2:	f00e fdc4 	bl	5663e <sdhc_set_io>
	if (ret) {
   47ab6:	b9d8      	cbnz	r0, 47af0 <sdmmc_card_init+0x1c0>
	card->bus_io.signal_voltage = SD_VOL_1_8_V;
   47ab8:	2703      	movs	r7, #3
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47aba:	4631      	mov	r1, r6
   47abc:	6820      	ldr	r0, [r4, #0]
	card->bus_io.signal_voltage = SD_VOL_1_8_V;
   47abe:	7367      	strb	r7, [r4, #13]
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47ac0:	f00e fdbd 	bl	5663e <sdhc_set_io>
	if (ret) {
   47ac4:	4605      	mov	r5, r0
   47ac6:	b998      	cbnz	r0, 47af0 <sdmmc_card_init+0x1c0>
   47ac8:	200a      	movs	r0, #10
   47aca:	f00e fe72 	bl	567b2 <k_msleep.isra.0>
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47ace:	4631      	mov	r1, r6
   47ad0:	6820      	ldr	r0, [r4, #0]
	card->bus_io.clock = sd_clock;
   47ad2:	f8c4 8004 	str.w	r8, [r4, #4]
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47ad6:	f00e fdb2 	bl	5663e <sdhc_set_io>
	if (ret) {
   47ada:	b1a0      	cbz	r0, 47b06 <sdmmc_card_init+0x1d6>
		LOG_ERR("Failed to restart SD clock");
   47adc:	4b5f      	ldr	r3, [pc, #380]	; (47c5c <sdmmc_card_init+0x32c>)
   47ade:	2201      	movs	r2, #1
   47ae0:	e9cd 5301 	strd	r5, r3, [sp, #4]
   47ae4:	4628      	mov	r0, r5
   47ae6:	462b      	mov	r3, r5
   47ae8:	4959      	ldr	r1, [pc, #356]	; (47c50 <sdmmc_card_init+0x320>)
   47aea:	9500      	str	r5, [sp, #0]
   47aec:	f00e fe20 	bl	56730 <z_log_msg_runtime_create.constprop.0>
			card->host_props.host_caps.vol_180_support = false;
   47af0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
			return SD_RESTART;
   47af4:	2503      	movs	r5, #3
			card->host_props.host_caps.vol_180_support = false;
   47af6:	f36f 0341 	bfc	r3, #1, #1
   47afa:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			card->status = CARD_ERROR;
   47afe:	2301      	movs	r3, #1
   47b00:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
			return SD_RESTART;
   47b04:	e7a5      	b.n	47a52 <sdmmc_card_init+0x122>
   47b06:	2001      	movs	r0, #1
   47b08:	f00e fe53 	bl	567b2 <k_msleep.isra.0>
	if (sdhc_card_busy(card->sdhc)) {
   47b0c:	6820      	ldr	r0, [r4, #0]
   47b0e:	f00e fd9d 	bl	5664c <sdhc_card_busy>
   47b12:	4603      	mov	r3, r0
   47b14:	2800      	cmp	r0, #0
   47b16:	d1eb      	bne.n	47af0 <sdmmc_card_init+0x1c0>
	LOG_INF("Card switched to 1.8V signaling");
   47b18:	4a51      	ldr	r2, [pc, #324]	; (47c60 <sdmmc_card_init+0x330>)
	card->card_voltage = SD_VOL_1_8_V;
   47b1a:	7427      	strb	r7, [r4, #16]
	LOG_INF("Card switched to 1.8V signaling");
   47b1c:	494c      	ldr	r1, [pc, #304]	; (47c50 <sdmmc_card_init+0x320>)
   47b1e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   47b22:	9000      	str	r0, [sp, #0]
   47b24:	463a      	mov	r2, r7
   47b26:	f00e fe03 	bl	56730 <z_log_msg_runtime_create.constprop.0>
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
   47b2a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   47b2e:	2b00      	cmp	r3, #0
   47b30:	d187      	bne.n	47a42 <sdmmc_card_init+0x112>
		return -ENOTSUP;
   47b32:	f06f 0585 	mvn.w	r5, #133	; 0x85
   47b36:	e78c      	b.n	47a52 <sdmmc_card_init+0x122>
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
   47b38:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   47b3c:	2b00      	cmp	r3, #0
   47b3e:	d0f8      	beq.n	47b32 <sdmmc_card_init+0x202>
		ret = sdmmc_spi_read_cxd(card, SD_SEND_CSD, csd);
   47b40:	2109      	movs	r1, #9
   47b42:	4620      	mov	r0, r4
   47b44:	aa0b      	add	r2, sp, #44	; 0x2c
   47b46:	f00e fd88 	bl	5665a <sdmmc_spi_read_cxd>
	if (ret) {
   47b4a:	4605      	mov	r5, r0
   47b4c:	2800      	cmp	r0, #0
   47b4e:	d180      	bne.n	47a52 <sdmmc_card_init+0x122>
	csd->cmd_class = (uint16_t)((raw_csd[2U] &
   47b50:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
	switch (csd->csd_structure) {
   47b54:	0f92      	lsrs	r2, r2, #30
   47b56:	d010      	beq.n	47b7a <sdmmc_card_init+0x24a>
   47b58:	2a01      	cmp	r2, #1
   47b5a:	d026      	beq.n	47baa <sdmmc_card_init+0x27a>
	if (card->host_props.f_max < SD_CLOCK_25MHZ) {
   47b5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   47b5e:	4e41      	ldr	r6, [pc, #260]	; (47c64 <sdmmc_card_init+0x334>)
   47b60:	42b3      	cmp	r3, r6
   47b62:	d92b      	bls.n	47bbc <sdmmc_card_init+0x28c>
   47b64:	4b40      	ldr	r3, [pc, #256]	; (47c68 <sdmmc_card_init+0x338>)
		card->bus_io.clock = card->host_props.f_max;
   47b66:	4621      	mov	r1, r4
   47b68:	f841 3f04 	str.w	r3, [r1, #4]!
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
   47b6c:	6820      	ldr	r0, [r4, #0]
   47b6e:	f00e fd66 	bl	5663e <sdhc_set_io>
	if (ret) {
   47b72:	4605      	mov	r5, r0
   47b74:	b378      	cbz	r0, 47bd6 <sdmmc_card_init+0x2a6>
		LOG_ERR("Failed to raise bus frequency to 25MHz");
   47b76:	4b3d      	ldr	r3, [pc, #244]	; (47c6c <sdmmc_card_init+0x33c>)
   47b78:	e725      	b.n	479c6 <sdmmc_card_init+0x96>
		csd->device_size = (uint32_t)((raw_csd[2U] &
   47b7a:	f640 72fc 	movw	r2, #4092	; 0xffc
		csd->device_size |= (uint32_t)((raw_csd[1U] &
   47b7e:	990c      	ldr	r1, [sp, #48]	; 0x30
	csd->read_blk_len = (uint8_t)((raw_csd[2U] &
   47b80:	f3c3 4003 	ubfx	r0, r3, #16, #4
		csd->device_size = (uint32_t)((raw_csd[2U] &
   47b84:	ea02 0383 	and.w	r3, r2, r3, lsl #2
		csd->device_size |= (uint32_t)((raw_csd[1U] &
   47b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
		csd->dev_size_mul = (uint8_t)((raw_csd[1U] &
   47b8c:	f3c1 31c2 	ubfx	r1, r1, #15, #3
		tmp_blk_count = ((csd->device_size + 1U) <<
   47b90:	3301      	adds	r3, #1
			(csd->dev_size_mul + 2U));
   47b92:	3102      	adds	r1, #2
		if (tmp_blk_size != SDMMC_DEFAULT_BLOCK_SIZE) {
   47b94:	2809      	cmp	r0, #9
		tmp_blk_count = ((csd->device_size + 1U) <<
   47b96:	fa03 f301 	lsl.w	r3, r3, r1
		if (tmp_blk_size != SDMMC_DEFAULT_BLOCK_SIZE) {
   47b9a:	d001      	beq.n	47ba0 <sdmmc_card_init+0x270>
			tmp_blk_count = (tmp_blk_count * tmp_blk_size);
   47b9c:	4083      	lsls	r3, r0
			tmp_blk_count = (tmp_blk_count / tmp_blk_size);
   47b9e:	0a5b      	lsrs	r3, r3, #9
			*blk_count = tmp_blk_count;
   47ba0:	6663      	str	r3, [r4, #100]	; 0x64
			*blk_size = tmp_blk_size;
   47ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
   47ba6:	66a3      	str	r3, [r4, #104]	; 0x68
   47ba8:	e7d8      	b.n	47b5c <sdmmc_card_init+0x22c>
			0xFFFF0000U) >> 16U);
   47baa:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
			0x3FU) << 16U);
   47bae:	041b      	lsls	r3, r3, #16
		csd->device_size = (uint32_t)((raw_csd[2U] &
   47bb0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
		csd->device_size |= (uint32_t)((raw_csd[1U] &
   47bb4:	4313      	orrs	r3, r2
		tmp_blk_count = ((csd->device_size + 1U) * 1024U);
   47bb6:	3301      	adds	r3, #1
   47bb8:	029b      	lsls	r3, r3, #10
   47bba:	e7f1      	b.n	47ba0 <sdmmc_card_init+0x270>
		LOG_INF("Maximum SD clock is under 25MHz, using clock of %dHz",
   47bbc:	9303      	str	r3, [sp, #12]
   47bbe:	4b2c      	ldr	r3, [pc, #176]	; (47c70 <sdmmc_card_init+0x340>)
   47bc0:	2203      	movs	r2, #3
   47bc2:	9302      	str	r3, [sp, #8]
   47bc4:	2300      	movs	r3, #0
   47bc6:	4922      	ldr	r1, [pc, #136]	; (47c50 <sdmmc_card_init+0x320>)
   47bc8:	4618      	mov	r0, r3
   47bca:	e9cd 3300 	strd	r3, r3, [sp]
   47bce:	f00e fdaf 	bl	56730 <z_log_msg_runtime_create.constprop.0>
		card->bus_io.clock = card->host_props.f_max;
   47bd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   47bd4:	e7c7      	b.n	47b66 <sdmmc_card_init+0x236>
	struct sdhc_command cmd = {0};
   47bd6:	4601      	mov	r1, r0
   47bd8:	2224      	movs	r2, #36	; 0x24
   47bda:	a80b      	add	r0, sp, #44	; 0x2c
   47bdc:	f013 f9bc 	bl	5af58 <memset>
	struct sdhc_data data = {0};
   47be0:	4629      	mov	r1, r5
   47be2:	2218      	movs	r2, #24
   47be4:	a805      	add	r0, sp, #20
   47be6:	f013 f9b7 	bl	5af58 <memset>
	ret = sdmmc_app_command(card, card->relative_addr);
   47bea:	4620      	mov	r0, r4
   47bec:	6e21      	ldr	r1, [r4, #96]	; 0x60
   47bee:	f7ff fdb9 	bl	47764 <sdmmc_app_command>
	if (ret) {
   47bf2:	4605      	mov	r5, r0
   47bf4:	2800      	cmp	r0, #0
   47bf6:	f47f af2c 	bne.w	47a52 <sdmmc_card_init+0x122>
	cmd.opcode = SD_APP_SEND_SCR;
   47bfa:	2333      	movs	r3, #51	; 0x33
	cmd.arg = 0;
   47bfc:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
	cmd.response_type =  (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   47c00:	2311      	movs	r3, #17
   47c02:	9311      	str	r3, [sp, #68]	; 0x44
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47c04:	23c8      	movs	r3, #200	; 0xc8
	data.blocks = 1U;
   47c06:	2708      	movs	r7, #8
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47c08:	9313      	str	r3, [sp, #76]	; 0x4c
	data.blocks = 1U;
   47c0a:	2301      	movs	r3, #1
   47c0c:	e9cd 7306 	strd	r7, r3, [sp, #24]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   47c10:	f242 7310 	movw	r3, #10000	; 0x2710
	ret = sdhc_request(card->sdhc, &cmd, &data);
   47c14:	6820      	ldr	r0, [r4, #0]
	uint32_t *scr = (uint32_t *)card->card_buffer;
   47c16:	f104 0878 	add.w	r8, r4, #120	; 0x78
	ret = sdhc_request(card->sdhc, &cmd, &data);
   47c1a:	aa05      	add	r2, sp, #20
   47c1c:	a90b      	add	r1, sp, #44	; 0x2c
	data.data = scr;
   47c1e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   47c22:	930a      	str	r3, [sp, #40]	; 0x28
	ret = sdhc_request(card->sdhc, &cmd, &data);
   47c24:	f00e fd04 	bl	56630 <sdhc_request>
	if (ret) {
   47c28:	4605      	mov	r5, r0
   47c2a:	2800      	cmp	r0, #0
   47c2c:	f47f af11 	bne.w	47a52 <sdmmc_card_init+0x122>
	raw_scr[0] = sys_be32_to_cpu(scr[0]);
   47c30:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   47c32:	ba0a      	rev	r2, r1
	if ((uint8_t)((raw_scr[0U] & 0x8000U) >> 15U)) {
   47c34:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
	scr->sd_spec = (uint8_t)((raw_scr[0U] & 0xF000000U) >> 24U);
   47c38:	f001 030f 	and.w	r3, r1, #15
	if ((uint8_t)((raw_scr[0U] & 0x8000U) >> 15U)) {
   47c3c:	b2d2      	uxtb	r2, r2
   47c3e:	d119      	bne.n	47c74 <sdmmc_card_init+0x344>
	switch (scr->sd_spec) {
   47c40:	2b01      	cmp	r3, #1
   47c42:	d069      	beq.n	47d18 <sdmmc_card_init+0x3e8>
   47c44:	2b02      	cmp	r3, #2
   47c46:	d119      	bne.n	47c7c <sdmmc_card_init+0x34c>
		tmp_version = SD_SPEC_VER2_0;
   47c48:	2704      	movs	r7, #4
   47c4a:	e019      	b.n	47c80 <sdmmc_card_init+0x350>
   47c4c:	0005e23d 	.word	0x0005e23d
   47c50:	0005c02c 	.word	0x0005c02c
   47c54:	0005e3a5 	.word	0x0005e3a5
   47c58:	fdf98008 	.word	0xfdf98008
   47c5c:	0005e256 	.word	0x0005e256
   47c60:	0005e271 	.word	0x0005e271
   47c64:	017d783f 	.word	0x017d783f
   47c68:	017d7840 	.word	0x017d7840
   47c6c:	0005e2c6 	.word	0x0005e2c6
   47c70:	0005e291 	.word	0x0005e291
	switch (scr->sd_spec) {
   47c74:	2b01      	cmp	r3, #1
   47c76:	d04f      	beq.n	47d18 <sdmmc_card_init+0x3e8>
   47c78:	2b02      	cmp	r3, #2
   47c7a:	d001      	beq.n	47c80 <sdmmc_card_init+0x350>
   47c7c:	b90b      	cbnz	r3, 47c82 <sdmmc_card_init+0x352>
   47c7e:	2701      	movs	r7, #1
		*version = tmp_version;
   47c80:	66e7      	str	r7, [r4, #108]	; 0x6c
	if (card_scr.sd_width & 0x4U) {
   47c82:	0549      	lsls	r1, r1, #21
		card->flags |= SD_4BITS_WIDTH;
   47c84:	bf42      	ittt	mi
   47c86:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
   47c88:	f043 0304 	orrmi.w	r3, r3, #4
   47c8c:	6763      	strmi	r3, [r4, #116]	; 0x74
	if (card_scr.cmd_support & 0x1U) {
   47c8e:	07d3      	lsls	r3, r2, #31
		card->flags |= SD_SPEED_CLASS_CONTROL_FLAG;
   47c90:	bf42      	ittt	mi
   47c92:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
   47c94:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
   47c98:	6763      	strmi	r3, [r4, #116]	; 0x74
	if (card_scr.cmd_support & 0x2U) {
   47c9a:	0797      	lsls	r7, r2, #30
		card->flags |= SD_CMD23_FLAG;
   47c9c:	bf42      	ittt	mi
   47c9e:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
   47ca0:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
   47ca4:	6763      	strmi	r3, [r4, #116]	; 0x74
	if ((card->flags & SD_1800MV_FLAG) &&
   47ca6:	6f61      	ldr	r1, [r4, #116]	; 0x74
   47ca8:	0688      	lsls	r0, r1, #26
   47caa:	f140 80e7 	bpl.w	47e7c <sdmmc_card_init+0x54c>
		props->host_caps.uhs_2_support |
   47cae:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	return (props->host_caps.sdr50_support |
   47cb2:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
		props->host_caps.uhs_2_support |
   47cb6:	f3c2 0380 	ubfx	r3, r2, #2, #1
		props->host_caps.sdr104_support |
   47cba:	f3c2 0700 	ubfx	r7, r2, #0, #1
	return (props->host_caps.sdr50_support |
   47cbe:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
		props->host_caps.uhs_2_support |
   47cc2:	433b      	orrs	r3, r7
		props->host_caps.ddr50_support)
   47cc4:	f3c2 0240 	ubfx	r2, r2, #1, #1
		props->host_caps.sdr104_support |
   47cc8:	4313      	orrs	r3, r2
	if ((card->flags & SD_1800MV_FLAG) &&
   47cca:	ea13 0350 	ands.w	r3, r3, r0, lsr #1
   47cce:	f000 80d5 	beq.w	47e7c <sdmmc_card_init+0x54c>
		sdmmc_host_uhs(&card->host_props) &&
   47cd2:	f894 9048 	ldrb.w	r9, [r4, #72]	; 0x48
   47cd6:	f1b9 0f00 	cmp.w	r9, #0
   47cda:	f040 80cf 	bne.w	47e7c <sdmmc_card_init+0x54c>
	ret = sdmmc_set_bus_width(card, SDHC_BUS_WIDTH4BIT);
   47cde:	4620      	mov	r0, r4
   47ce0:	f7ff fdfa 	bl	478d8 <sdmmc_set_bus_width.constprop.0>
	if (ret) {
   47ce4:	4607      	mov	r7, r0
   47ce6:	b1c8      	cbz	r0, 47d1c <sdmmc_card_init+0x3ec>
		LOG_ERR("Failed to change card bus width to 4 bits");
   47ce8:	4b91      	ldr	r3, [pc, #580]	; (47f30 <sdmmc_card_init+0x600>)
   47cea:	2201      	movs	r2, #1
   47cec:	e9cd 9301 	strd	r9, r3, [sp, #4]
   47cf0:	4648      	mov	r0, r9
   47cf2:	464b      	mov	r3, r9
   47cf4:	498f      	ldr	r1, [pc, #572]	; (47f34 <sdmmc_card_init+0x604>)
   47cf6:	f8cd 9000 	str.w	r9, [sp]
   47cfa:	f00e fd19 	bl	56730 <z_log_msg_runtime_create.constprop.0>
   47cfe:	463e      	mov	r6, r7
			LOG_ERR("UHS card init failed");
   47d00:	4b8d      	ldr	r3, [pc, #564]	; (47f38 <sdmmc_card_init+0x608>)
			LOG_ERR("HS card init failed");
   47d02:	9302      	str	r3, [sp, #8]
   47d04:	2300      	movs	r3, #0
   47d06:	2201      	movs	r2, #1
   47d08:	4618      	mov	r0, r3
   47d0a:	e9cd 3300 	strd	r3, r3, [sp]
   47d0e:	4989      	ldr	r1, [pc, #548]	; (47f34 <sdmmc_card_init+0x604>)
   47d10:	f00e fd0e 	bl	56730 <z_log_msg_runtime_create.constprop.0>
   47d14:	4635      	mov	r5, r6
   47d16:	e69c      	b.n	47a52 <sdmmc_card_init+0x122>
		tmp_version = SD_SPEC_VER1_1;
   47d18:	2702      	movs	r7, #2
   47d1a:	e7b1      	b.n	47c80 <sdmmc_card_init+0x350>
	if (card->host_props.host_caps.sdr104_support &&
   47d1c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   47d20:	07da      	lsls	r2, r3, #31
   47d22:	d534      	bpl.n	47d8e <sdmmc_card_init+0x45e>
   47d24:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
   47d28:	0710      	lsls	r0, r2, #28
   47d2a:	d530      	bpl.n	47d8e <sdmmc_card_init+0x45e>
		(card->switch_caps.bus_speed & UHS_SDR104_BUS_SPEED) &&
   47d2c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   47d2e:	4a83      	ldr	r2, [pc, #524]	; (47f3c <sdmmc_card_init+0x60c>)
   47d30:	4291      	cmp	r1, r2
   47d32:	d92c      	bls.n	47d8e <sdmmc_card_init+0x45e>
		card->card_speed = SD_TIMING_SDR104;
   47d34:	2203      	movs	r2, #3
		card->card_speed = SD_TIMING_SDR12;
   47d36:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
	if (card->host_props.host_caps.drv_type_c_support &&
   47d3a:	06d8      	lsls	r0, r3, #27
   47d3c:	d44e      	bmi.n	47ddc <sdmmc_card_init+0x4ac>
		(card->card_speed != SD_TIMING_SDR104) &&
   47d3e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
	if ((card->card_speed != SD_TIMING_SDR50) &&
   47d42:	3b02      	subs	r3, #2
   47d44:	2b02      	cmp	r3, #2
   47d46:	d959      	bls.n	47dfc <sdmmc_card_init+0x4cc>
	ret = sdmmc_set_bus_speed(card);
   47d48:	4620      	mov	r0, r4
   47d4a:	f7ff fd69 	bl	47820 <sdmmc_set_bus_speed>
	if (ret) {
   47d4e:	4606      	mov	r6, r0
   47d50:	2800      	cmp	r0, #0
   47d52:	d1d5      	bne.n	47d00 <sdmmc_card_init+0x3d0>
		card->card_speed == SD_TIMING_SDR104 ||
   47d54:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
	if (card->card_speed == SD_TIMING_SDR50 ||
   47d58:	3b02      	subs	r3, #2
   47d5a:	2b02      	cmp	r3, #2
   47d5c:	f63f ae79 	bhi.w	47a52 <sdmmc_card_init+0x122>
		ret = sdhc_execute_tuning(card->sdhc);
   47d60:	6820      	ldr	r0, [r4, #0]
	if (!api->execute_tuning) {
   47d62:	6883      	ldr	r3, [r0, #8]
   47d64:	691b      	ldr	r3, [r3, #16]
   47d66:	2b00      	cmp	r3, #0
   47d68:	f000 8085 	beq.w	47e76 <sdmmc_card_init+0x546>
	return api->execute_tuning(dev);
   47d6c:	4798      	blx	r3
		if (ret) {
   47d6e:	4606      	mov	r6, r0
   47d70:	2800      	cmp	r0, #0
   47d72:	f43f ae6e 	beq.w	47a52 <sdmmc_card_init+0x122>
			LOG_ERR("SD tuning failed: %d", ret);
   47d76:	4b72      	ldr	r3, [pc, #456]	; (47f40 <sdmmc_card_init+0x610>)
   47d78:	2201      	movs	r2, #1
   47d7a:	9302      	str	r3, [sp, #8]
   47d7c:	2300      	movs	r3, #0
   47d7e:	496d      	ldr	r1, [pc, #436]	; (47f34 <sdmmc_card_init+0x604>)
   47d80:	4618      	mov	r0, r3
   47d82:	e9cd 3300 	strd	r3, r3, [sp]
   47d86:	9603      	str	r6, [sp, #12]
   47d88:	f00e fcd2 	bl	56730 <z_log_msg_runtime_create.constprop.0>
		if (ret) {
   47d8c:	e7b8      	b.n	47d00 <sdmmc_card_init+0x3d0>
	} else if (card->host_props.host_caps.ddr50_support &&
   47d8e:	0799      	lsls	r1, r3, #30
   47d90:	d509      	bpl.n	47da6 <sdmmc_card_init+0x476>
   47d92:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
   47d96:	06d2      	lsls	r2, r2, #27
   47d98:	d505      	bpl.n	47da6 <sdmmc_card_init+0x476>
		(card->switch_caps.bus_speed & UHS_DDR50_BUS_SPEED) &&
   47d9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   47d9c:	4a69      	ldr	r2, [pc, #420]	; (47f44 <sdmmc_card_init+0x614>)
   47d9e:	4291      	cmp	r1, r2
   47da0:	d901      	bls.n	47da6 <sdmmc_card_init+0x476>
		card->card_speed = SD_TIMING_DDR50;
   47da2:	2204      	movs	r2, #4
   47da4:	e7c7      	b.n	47d36 <sdmmc_card_init+0x406>
	} else if (card->host_props.host_caps.sdr50_support &&
   47da6:	f994 2037 	ldrsb.w	r2, [r4, #55]	; 0x37
   47daa:	2a00      	cmp	r2, #0
   47dac:	da09      	bge.n	47dc2 <sdmmc_card_init+0x492>
   47dae:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
   47db2:	0750      	lsls	r0, r2, #29
   47db4:	d505      	bpl.n	47dc2 <sdmmc_card_init+0x492>
		(card->switch_caps.bus_speed & UHS_SDR50_BUS_SPEED) &&
   47db6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   47db8:	4a63      	ldr	r2, [pc, #396]	; (47f48 <sdmmc_card_init+0x618>)
   47dba:	4291      	cmp	r1, r2
   47dbc:	d901      	bls.n	47dc2 <sdmmc_card_init+0x492>
		card->card_speed = SD_TIMING_SDR50;
   47dbe:	2202      	movs	r2, #2
   47dc0:	e7b9      	b.n	47d36 <sdmmc_card_init+0x406>
	} else if (card->host_props.host_caps.high_spd_support &&
   47dc2:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   47dc6:	06d1      	lsls	r1, r2, #27
   47dc8:	d5b7      	bpl.n	47d3a <sdmmc_card_init+0x40a>
   47dca:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
   47dce:	07d2      	lsls	r2, r2, #31
   47dd0:	d5b3      	bpl.n	47d3a <sdmmc_card_init+0x40a>
		(card->switch_caps.bus_speed & UHS_SDR12_BUS_SPEED) &&
   47dd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   47dd4:	42b2      	cmp	r2, r6
   47dd6:	d9b0      	bls.n	47d3a <sdmmc_card_init+0x40a>
		card->card_speed = SD_TIMING_SDR12;
   47dd8:	2200      	movs	r2, #0
   47dda:	e7ac      	b.n	47d36 <sdmmc_card_init+0x406>
	if (card->host_props.host_caps.drv_type_c_support &&
   47ddc:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
   47de0:	0759      	lsls	r1, r3, #29
   47de2:	d5ac      	bpl.n	47d3e <sdmmc_card_init+0x40e>
		card->bus_io.driver_type = SD_DRIVER_TYPE_C;
   47de4:	2304      	movs	r3, #4
		ret = sdmmc_switch(card, SD_SWITCH_SET,
   47de6:	2202      	movs	r2, #2
		card->bus_io.driver_type = SD_DRIVER_TYPE_C;
   47de8:	7323      	strb	r3, [r4, #12]
		ret = sdmmc_switch(card, SD_SWITCH_SET,
   47dea:	4611      	mov	r1, r2
   47dec:	4643      	mov	r3, r8
   47dee:	6820      	ldr	r0, [r4, #0]
   47df0:	f00e fcad 	bl	5674e <sdmmc_switch.constprop.0.isra.0>
	if (ret) {
   47df4:	4606      	mov	r6, r0
   47df6:	2800      	cmp	r0, #0
   47df8:	d182      	bne.n	47d00 <sdmmc_card_init+0x3d0>
   47dfa:	e7a0      	b.n	47d3e <sdmmc_card_init+0x40e>
	} else if (card->host_props.max_current_180 >= 800 &&
   47dfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   47dfe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   47e02:	d328      	bcc.n	47e56 <sdmmc_card_init+0x526>
   47e04:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
   47e08:	071a      	lsls	r2, r3, #28
   47e0a:	d42e      	bmi.n	47e6a <sdmmc_card_init+0x53a>
	} else if (card->host_props.max_current_180 >= 600 &&
   47e0c:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
   47e10:	075b      	lsls	r3, r3, #29
   47e12:	d42c      	bmi.n	47e6e <sdmmc_card_init+0x53e>
	} else if (card->host_props.max_current_180 >= 400 &&
   47e14:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
   47e18:	079e      	lsls	r6, r3, #30
   47e1a:	d42a      	bmi.n	47e72 <sdmmc_card_init+0x542>
	} else if (card->host_props.max_current_180 >= 200 &&
   47e1c:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
   47e20:	07d8      	lsls	r0, r3, #31
   47e22:	d591      	bpl.n	47d48 <sdmmc_card_init+0x418>
		ret = sdmmc_switch(card, SD_SWITCH_SET, SD_GRP_CURRENT_LIMIT_MODE,
   47e24:	4643      	mov	r3, r8
   47e26:	2103      	movs	r1, #3
   47e28:	6820      	ldr	r0, [r4, #0]
   47e2a:	b2fa      	uxtb	r2, r7
   47e2c:	f00e fc8f 	bl	5674e <sdmmc_switch.constprop.0.isra.0>
		if (ret) {
   47e30:	4606      	mov	r6, r0
   47e32:	2800      	cmp	r0, #0
   47e34:	f47f af64 	bne.w	47d00 <sdmmc_card_init+0x3d0>
		if (((status[15] >> 4) & 0x0F) != max_current) {
   47e38:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
   47e3c:	ebb7 1f13 	cmp.w	r7, r3, lsr #4
   47e40:	d082      	beq.n	47d48 <sdmmc_card_init+0x418>
			LOG_WRN("Card did not accept current limit");
   47e42:	4b42      	ldr	r3, [pc, #264]	; (47f4c <sdmmc_card_init+0x61c>)
   47e44:	2202      	movs	r2, #2
   47e46:	e9cd 0301 	strd	r0, r3, [sp, #4]
   47e4a:	493a      	ldr	r1, [pc, #232]	; (47f34 <sdmmc_card_init+0x604>)
   47e4c:	4603      	mov	r3, r0
   47e4e:	9000      	str	r0, [sp, #0]
   47e50:	f00e fc6e 	bl	56730 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   47e54:	e778      	b.n	47d48 <sdmmc_card_init+0x418>
	} else if (card->host_props.max_current_180 >= 600 &&
   47e56:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   47e5a:	d2d7      	bcs.n	47e0c <sdmmc_card_init+0x4dc>
	} else if (card->host_props.max_current_180 >= 400 &&
   47e5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   47e60:	d2d8      	bcs.n	47e14 <sdmmc_card_init+0x4e4>
	} else if (card->host_props.max_current_180 >= 200 &&
   47e62:	2bc7      	cmp	r3, #199	; 0xc7
   47e64:	f67f af70 	bls.w	47d48 <sdmmc_card_init+0x418>
   47e68:	e7d8      	b.n	47e1c <sdmmc_card_init+0x4ec>
		max_current = SD_SET_CURRENT_800MA;
   47e6a:	2703      	movs	r7, #3
   47e6c:	e7da      	b.n	47e24 <sdmmc_card_init+0x4f4>
		max_current = SD_SET_CURRENT_600MA;
   47e6e:	2702      	movs	r7, #2
   47e70:	e7d8      	b.n	47e24 <sdmmc_card_init+0x4f4>
		max_current = SD_SET_CURRENT_400MA;
   47e72:	2701      	movs	r7, #1
   47e74:	e7d6      	b.n	47e24 <sdmmc_card_init+0x4f4>
		return -ENOSYS;
   47e76:	f06f 0657 	mvn.w	r6, #87	; 0x57
   47e7a:	e77c      	b.n	47d76 <sdmmc_card_init+0x446>
		if ((card->flags & SD_HIGH_CAPACITY_FLAG) == 0) {
   47e7c:	f011 0602 	ands.w	r6, r1, #2
   47e80:	d123      	bne.n	47eca <sdmmc_card_init+0x59a>
	struct sdhc_command cmd = {0};
   47e82:	2218      	movs	r2, #24
   47e84:	4631      	mov	r1, r6
   47e86:	a80d      	add	r0, sp, #52	; 0x34
   47e88:	6827      	ldr	r7, [r4, #0]
	cmd.arg = block_len;
   47e8a:	f44f 7800 	mov.w	r8, #512	; 0x200
	struct sdhc_command cmd = {0};
   47e8e:	f013 f863 	bl	5af58 <memset>
	cmd.arg = block_len;
   47e92:	2310      	movs	r3, #16
   47e94:	e9cd 380b 	strd	r3, r8, [sp, #44]	; 0x2c
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   47e98:	23c8      	movs	r3, #200	; 0xc8
   47e9a:	9313      	str	r3, [sp, #76]	; 0x4c
	cmd.response_type =  (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   47e9c:	2311      	movs	r3, #17
	return sdhc_request(card->sdhc, &cmd, NULL);
   47e9e:	4638      	mov	r0, r7
   47ea0:	4632      	mov	r2, r6
   47ea2:	a90b      	add	r1, sp, #44	; 0x2c
	cmd.response_type =  (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   47ea4:	9311      	str	r3, [sp, #68]	; 0x44
	return sdhc_request(card->sdhc, &cmd, NULL);
   47ea6:	f00e fbc3 	bl	56630 <sdhc_request>
			if (ret) {
   47eaa:	4607      	mov	r7, r0
   47eac:	b158      	cbz	r0, 47ec6 <sdmmc_card_init+0x596>
				LOG_ERR("Could not set SD blocklen to 512");
   47eae:	4b28      	ldr	r3, [pc, #160]	; (47f50 <sdmmc_card_init+0x620>)
   47eb0:	2201      	movs	r2, #1
   47eb2:	e9cd 6301 	strd	r6, r3, [sp, #4]
   47eb6:	4630      	mov	r0, r6
   47eb8:	4633      	mov	r3, r6
   47eba:	491e      	ldr	r1, [pc, #120]	; (47f34 <sdmmc_card_init+0x604>)
   47ebc:	9600      	str	r6, [sp, #0]
   47ebe:	f00e fc37 	bl	56730 <z_log_msg_runtime_create.constprop.0>
				return ret;
   47ec2:	463d      	mov	r5, r7
   47ec4:	e5c5      	b.n	47a52 <sdmmc_card_init+0x122>
			card->block_size = 512;
   47ec6:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
	if ((!card->host_props.host_caps.high_spd_support) ||
   47eca:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   47ece:	06da      	lsls	r2, r3, #27
   47ed0:	f57f adbf 	bpl.w	47a52 <sdmmc_card_init+0x122>
   47ed4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   47ed6:	2b01      	cmp	r3, #1
   47ed8:	f67f adbb 	bls.w	47a52 <sdmmc_card_init+0x122>
		(card->sd_version < SD_SPEC_VER1_1) ||
   47edc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   47ede:	2b00      	cmp	r3, #0
   47ee0:	f43f adb7 	beq.w	47a52 <sdmmc_card_init+0x122>
	card->card_speed = SD_TIMING_SDR25;
   47ee4:	2701      	movs	r7, #1
	ret = sdmmc_set_bus_speed(card);
   47ee6:	4620      	mov	r0, r4
	card->card_speed = SD_TIMING_SDR25;
   47ee8:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
	ret = sdmmc_set_bus_speed(card);
   47eec:	f7ff fc98 	bl	47820 <sdmmc_set_bus_speed>
	if (ret) {
   47ef0:	4606      	mov	r6, r0
   47ef2:	b158      	cbz	r0, 47f0c <sdmmc_card_init+0x5dc>
		LOG_ERR("Failed to switch card to HS mode");
   47ef4:	4b17      	ldr	r3, [pc, #92]	; (47f54 <sdmmc_card_init+0x624>)
			LOG_ERR("Failed to change card bus width to 4 bits");
   47ef6:	9302      	str	r3, [sp, #8]
   47ef8:	2300      	movs	r3, #0
   47efa:	463a      	mov	r2, r7
   47efc:	4618      	mov	r0, r3
   47efe:	e9cd 3300 	strd	r3, r3, [sp]
   47f02:	490c      	ldr	r1, [pc, #48]	; (47f34 <sdmmc_card_init+0x604>)
   47f04:	f00e fc14 	bl	56730 <z_log_msg_runtime_create.constprop.0>
			LOG_ERR("HS card init failed");
   47f08:	4b13      	ldr	r3, [pc, #76]	; (47f58 <sdmmc_card_init+0x628>)
   47f0a:	e6fa      	b.n	47d02 <sdmmc_card_init+0x3d2>
	if (card->flags & SD_4BITS_WIDTH) {
   47f0c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   47f0e:	075b      	lsls	r3, r3, #29
   47f10:	f57f ad9f 	bpl.w	47a52 <sdmmc_card_init+0x122>
		ret = sdmmc_set_bus_width(card, SDHC_BUS_WIDTH4BIT);
   47f14:	4620      	mov	r0, r4
   47f16:	f7ff fcdf 	bl	478d8 <sdmmc_set_bus_width.constprop.0>
		if (ret) {
   47f1a:	4606      	mov	r6, r0
   47f1c:	2800      	cmp	r0, #0
   47f1e:	f43f ad98 	beq.w	47a52 <sdmmc_card_init+0x122>
			LOG_ERR("Failed to change card bus width to 4 bits");
   47f22:	4b03      	ldr	r3, [pc, #12]	; (47f30 <sdmmc_card_init+0x600>)
   47f24:	e7e7      	b.n	47ef6 <sdmmc_card_init+0x5c6>
		card->ocr = cmd.response[0U];
   47f26:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (ret) {
   47f28:	e53e      	b.n	479a8 <sdmmc_card_init+0x78>
   47f2a:	4615      	mov	r5, r2
   47f2c:	e591      	b.n	47a52 <sdmmc_card_init+0x122>
   47f2e:	bf00      	nop
   47f30:	0005e2ed 	.word	0x0005e2ed
   47f34:	0005c02c 	.word	0x0005c02c
   47f38:	0005e34e 	.word	0x0005e34e
   47f3c:	0c65d3ff 	.word	0x0c65d3ff
   47f40:	0005e339 	.word	0x0005e339
   47f44:	02faf07f 	.word	0x02faf07f
   47f48:	05f5e0ff 	.word	0x05f5e0ff
   47f4c:	0005e317 	.word	0x0005e317
   47f50:	0005e363 	.word	0x0005e363
   47f54:	0005e384 	.word	0x0005e384
   47f58:	0005e34f 	.word	0x0005e34f

00047f5c <sdmmc_read_blocks>:
}

/* Reads data from SD card memory card */
int sdmmc_read_blocks(struct sd_card *card, uint8_t *rbuf,
	uint32_t start_block, uint32_t num_blocks)
{
   47f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   47f60:	4614      	mov	r4, r2
   47f62:	461e      	mov	r6, r3
	int ret;
	uint32_t rlen;
	uint32_t sector;
	uint8_t *buf_offset;

	if ((start_block + num_blocks) > card->block_count) {
   47f64:	441a      	add	r2, r3
   47f66:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   47f68:	4605      	mov	r5, r0
	if ((start_block + num_blocks) > card->block_count) {
   47f6a:	429a      	cmp	r2, r3
{
   47f6c:	4689      	mov	r9, r1
   47f6e:	b095      	sub	sp, #84	; 0x54
	if ((start_block + num_blocks) > card->block_count) {
   47f70:	f200 8086 	bhi.w	48080 <sdmmc_read_blocks+0x124>
		return -EINVAL;
	}
	if (card->type == CARD_SDIO) {
   47f74:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
   47f78:	2b01      	cmp	r3, #1
   47f7a:	d10f      	bne.n	47f9c <sdmmc_read_blocks+0x40>
		LOG_WRN("SDIO does not support MMC commands");
   47f7c:	4b42      	ldr	r3, [pc, #264]	; (48088 <sdmmc_read_blocks+0x12c>)
   47f7e:	2202      	movs	r2, #2
   47f80:	9302      	str	r3, [sp, #8]
   47f82:	2300      	movs	r3, #0
   47f84:	4941      	ldr	r1, [pc, #260]	; (4808c <sdmmc_read_blocks+0x130>)
   47f86:	4618      	mov	r0, r3
   47f88:	e9cd 3300 	strd	r3, r3, [sp]
   47f8c:	f00e fbd0 	bl	56730 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   47f90:	f06f 0485 	mvn.w	r4, #133	; 0x85
			return ret;
		}
	}
	k_mutex_unlock(&card->lock);
	return 0;
}
   47f94:	4620      	mov	r0, r4
   47f96:	b015      	add	sp, #84	; 0x54
   47f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = k_mutex_lock(&card->lock, K_NO_WAIT);
   47f9c:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   47fa0:	2200      	movs	r2, #0
   47fa2:	2300      	movs	r3, #0
   47fa4:	4640      	mov	r0, r8
   47fa6:	f00a fab5 	bl	52514 <z_impl_k_mutex_lock>
	if (ret) {
   47faa:	4607      	mov	r7, r0
   47fac:	b160      	cbz	r0, 47fc8 <sdmmc_read_blocks+0x6c>
		LOG_WRN("Could not get SD card mutex");
   47fae:	4b38      	ldr	r3, [pc, #224]	; (48090 <sdmmc_read_blocks+0x134>)
   47fb0:	2202      	movs	r2, #2
   47fb2:	9302      	str	r3, [sp, #8]
   47fb4:	2300      	movs	r3, #0
   47fb6:	4935      	ldr	r1, [pc, #212]	; (4808c <sdmmc_read_blocks+0x130>)
   47fb8:	4618      	mov	r0, r3
   47fba:	e9cd 3300 	strd	r3, r3, [sp]
   47fbe:	f00e fbb7 	bl	56730 <z_log_msg_runtime_create.constprop.0>
		return -EBUSY;
   47fc2:	f06f 040f 	mvn.w	r4, #15
   47fc6:	e7e5      	b.n	47f94 <sdmmc_read_blocks+0x38>
	struct sdhc_command cmd = {0};
   47fc8:	4601      	mov	r1, r0
   47fca:	2210      	movs	r2, #16
   47fcc:	a80d      	add	r0, sp, #52	; 0x34
   47fce:	f012 ffc3 	bl	5af58 <memset>
	cmd.opcode = (num_blocks == 1U) ? SD_READ_SINGLE_BLOCK : SD_READ_MULTIPLE_BLOCK;
   47fd2:	2e01      	cmp	r6, #1
   47fd4:	bf0c      	ite	eq
   47fd6:	2311      	moveq	r3, #17
   47fd8:	2312      	movne	r3, #18
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
   47fda:	6f6a      	ldr	r2, [r5, #116]	; 0x74
	struct sdhc_data data = {0};
   47fdc:	9708      	str	r7, [sp, #32]
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
   47fde:	0797      	lsls	r7, r2, #30
		cmd.arg = start_block;
   47fe0:	bf48      	it	mi
   47fe2:	4622      	movmi	r2, r4
	cmd.opcode = (num_blocks == 1U) ? SD_READ_SINGLE_BLOCK : SD_READ_MULTIPLE_BLOCK;
   47fe4:	930b      	str	r3, [sp, #44]	; 0x2c
		cmd.arg = start_block * card->block_size;
   47fe6:	6eab      	ldr	r3, [r5, #104]	; 0x68
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   47fe8:	f04f 00c8 	mov.w	r0, #200	; 0xc8
		cmd.arg = start_block * card->block_size;
   47fec:	bf58      	it	pl
   47fee:	fb03 f204 	mulpl.w	r2, r3, r4
   47ff2:	920c      	str	r2, [sp, #48]	; 0x30
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   47ff4:	2211      	movs	r2, #17
   47ff6:	9211      	str	r2, [sp, #68]	; 0x44
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   47ff8:	2203      	movs	r2, #3
	data.block_size = card->block_size;
   47ffa:	e9cd 4305 	strd	r4, r3, [sp, #20]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   47ffe:	f242 7310 	movw	r3, #10000	; 0x2710
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   48002:	e9cd 2012 	strd	r2, r0, [sp, #72]	; 0x48
	ret = sdhc_request(card->sdhc, &cmd, &data);
   48006:	a90b      	add	r1, sp, #44	; 0x2c
   48008:	6828      	ldr	r0, [r5, #0]
   4800a:	aa05      	add	r2, sp, #20
	data.blocks = num_blocks;
   4800c:	9607      	str	r6, [sp, #28]
	data.data = rbuf;
   4800e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   48012:	930a      	str	r3, [sp, #40]	; 0x28
	ret = sdhc_request(card->sdhc, &cmd, &data);
   48014:	f00e fb0c 	bl	56630 <sdhc_request>
	if (ret) {
   48018:	4604      	mov	r4, r0
   4801a:	b1a8      	cbz	r0, 48048 <sdmmc_read_blocks+0xec>
		LOG_ERR("Failed to read from SDMMC %d", ret);
   4801c:	4b1d      	ldr	r3, [pc, #116]	; (48094 <sdmmc_read_blocks+0x138>)
   4801e:	9003      	str	r0, [sp, #12]
   48020:	9302      	str	r3, [sp, #8]
   48022:	2300      	movs	r3, #0
   48024:	2201      	movs	r2, #1
   48026:	4618      	mov	r0, r3
   48028:	e9cd 3300 	strd	r3, r3, [sp]
   4802c:	4917      	ldr	r1, [pc, #92]	; (4808c <sdmmc_read_blocks+0x130>)
   4802e:	f00e fb7f 	bl	56730 <z_log_msg_runtime_create.constprop.0>
			LOG_ERR("Card read failed");
   48032:	4b19      	ldr	r3, [pc, #100]	; (48098 <sdmmc_read_blocks+0x13c>)
   48034:	2201      	movs	r2, #1
   48036:	9302      	str	r3, [sp, #8]
   48038:	2300      	movs	r3, #0
   4803a:	4914      	ldr	r1, [pc, #80]	; (4808c <sdmmc_read_blocks+0x130>)
   4803c:	4618      	mov	r0, r3
   4803e:	e9cd 3300 	strd	r3, r3, [sp]
   48042:	f00e fb75 	bl	56730 <z_log_msg_runtime_create.constprop.0>
   48046:	e002      	b.n	4804e <sdmmc_read_blocks+0xf2>
	if (!card->host_props.is_spi) {
   48048:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   4804c:	b11b      	cbz	r3, 48056 <sdmmc_read_blocks+0xfa>
			k_mutex_unlock(&card->lock);
   4804e:	4640      	mov	r0, r8
   48050:	f00e fbad 	bl	567ae <k_mutex_unlock.isra.0>
			return ret;
   48054:	e79e      	b.n	47f94 <sdmmc_read_blocks+0x38>
		ret = sdmmc_wait_ready(card);
   48056:	4628      	mov	r0, r5
   48058:	f7ff fbc4 	bl	477e4 <sdmmc_wait_ready>
		if (ret) {
   4805c:	2800      	cmp	r0, #0
   4805e:	d0f6      	beq.n	4804e <sdmmc_read_blocks+0xf2>
			LOG_ERR("Card did not return to ready state");
   48060:	4b0e      	ldr	r3, [pc, #56]	; (4809c <sdmmc_read_blocks+0x140>)
   48062:	4620      	mov	r0, r4
   48064:	e9cd 4301 	strd	r4, r3, [sp, #4]
   48068:	2201      	movs	r2, #1
   4806a:	4623      	mov	r3, r4
   4806c:	4907      	ldr	r1, [pc, #28]	; (4808c <sdmmc_read_blocks+0x130>)
   4806e:	9400      	str	r4, [sp, #0]
   48070:	f00e fb5e 	bl	56730 <z_log_msg_runtime_create.constprop.0>
			k_mutex_unlock(&card->lock);
   48074:	4640      	mov	r0, r8
   48076:	f00e fb9a 	bl	567ae <k_mutex_unlock.isra.0>
			return -ETIMEDOUT;
   4807a:	f06f 0473 	mvn.w	r4, #115	; 0x73
   4807e:	e7d8      	b.n	48032 <sdmmc_read_blocks+0xd6>
		return -EINVAL;
   48080:	f06f 0415 	mvn.w	r4, #21
   48084:	e786      	b.n	47f94 <sdmmc_read_blocks+0x38>
   48086:	bf00      	nop
   48088:	0005e3c0 	.word	0x0005e3c0
   4808c:	0005c02c 	.word	0x0005c02c
   48090:	0005e3e3 	.word	0x0005e3e3
   48094:	0005e3ff 	.word	0x0005e3ff
   48098:	0005e43f 	.word	0x0005e43f
   4809c:	0005e41c 	.word	0x0005e41c

000480a0 <sdmmc_write_blocks>:
}

/* Writes data to SD card memory card */
int sdmmc_write_blocks(struct sd_card *card, const uint8_t *wbuf,
	uint32_t start_block, uint32_t num_blocks)
{
   480a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   480a4:	4614      	mov	r4, r2
   480a6:	461f      	mov	r7, r3
	int ret;
	uint32_t wlen;
	uint32_t sector;
	const uint8_t *buf_offset;

	if ((start_block + num_blocks) > card->block_count) {
   480a8:	441a      	add	r2, r3
   480aa:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   480ac:	4606      	mov	r6, r0
	if ((start_block + num_blocks) > card->block_count) {
   480ae:	429a      	cmp	r2, r3
{
   480b0:	4689      	mov	r9, r1
   480b2:	b0a5      	sub	sp, #148	; 0x94
	if ((start_block + num_blocks) > card->block_count) {
   480b4:	f200 80c6 	bhi.w	48244 <sdmmc_write_blocks+0x1a4>
		return -EINVAL;
	}
	if (card->type == CARD_SDIO) {
   480b8:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
   480bc:	2b01      	cmp	r3, #1
   480be:	d10f      	bne.n	480e0 <sdmmc_write_blocks+0x40>
		LOG_WRN("SDIO does not support MMC commands");
   480c0:	4b62      	ldr	r3, [pc, #392]	; (4824c <sdmmc_write_blocks+0x1ac>)
   480c2:	2202      	movs	r2, #2
   480c4:	9302      	str	r3, [sp, #8]
   480c6:	2300      	movs	r3, #0
   480c8:	4961      	ldr	r1, [pc, #388]	; (48250 <sdmmc_write_blocks+0x1b0>)
   480ca:	4618      	mov	r0, r3
   480cc:	e9cd 3300 	strd	r3, r3, [sp]
   480d0:	f00e fb2e 	bl	56730 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   480d4:	f06f 0485 	mvn.w	r4, #133	; 0x85
			return ret;
		}
	}
	k_mutex_unlock(&card->lock);
	return 0;
}
   480d8:	4620      	mov	r0, r4
   480da:	b025      	add	sp, #148	; 0x94
   480dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = k_mutex_lock(&card->lock, K_NO_WAIT);
   480e0:	f100 0514 	add.w	r5, r0, #20
   480e4:	2200      	movs	r2, #0
   480e6:	2300      	movs	r3, #0
   480e8:	4628      	mov	r0, r5
   480ea:	f00a fa13 	bl	52514 <z_impl_k_mutex_lock>
	if (ret) {
   480ee:	4680      	mov	r8, r0
   480f0:	b160      	cbz	r0, 4810c <sdmmc_write_blocks+0x6c>
		LOG_WRN("Could not get SD card mutex");
   480f2:	4b58      	ldr	r3, [pc, #352]	; (48254 <sdmmc_write_blocks+0x1b4>)
   480f4:	2202      	movs	r2, #2
   480f6:	9302      	str	r3, [sp, #8]
   480f8:	2300      	movs	r3, #0
   480fa:	4955      	ldr	r1, [pc, #340]	; (48250 <sdmmc_write_blocks+0x1b0>)
   480fc:	4618      	mov	r0, r3
   480fe:	e9cd 3300 	strd	r3, r3, [sp]
   48102:	f00e fb15 	bl	56730 <z_log_msg_runtime_create.constprop.0>
		return -EBUSY;
   48106:	f06f 040f 	mvn.w	r4, #15
   4810a:	e7e5      	b.n	480d8 <sdmmc_write_blocks+0x38>
	struct sdhc_command cmd = {0};
   4810c:	4601      	mov	r1, r0
   4810e:	2210      	movs	r2, #16
   48110:	a814      	add	r0, sp, #80	; 0x50
   48112:	f012 ff21 	bl	5af58 <memset>
	cmd.opcode = (num_blocks == 1) ? SD_WRITE_SINGLE_BLOCK : SD_WRITE_MULTIPLE_BLOCK;
   48116:	2f01      	cmp	r7, #1
   48118:	bf0c      	ite	eq
   4811a:	2318      	moveq	r3, #24
   4811c:	2319      	movne	r3, #25
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
   4811e:	6f72      	ldr	r2, [r6, #116]	; 0x74
	cmd.opcode = (num_blocks == 1) ? SD_WRITE_SINGLE_BLOCK : SD_WRITE_MULTIPLE_BLOCK;
   48120:	9312      	str	r3, [sp, #72]	; 0x48
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
   48122:	0792      	lsls	r2, r2, #30
		cmd.arg = start_block;
   48124:	bf48      	it	mi
   48126:	4622      	movmi	r2, r4
		cmd.arg = start_block * card->block_size;
   48128:	6eb3      	ldr	r3, [r6, #104]	; 0x68
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   4812a:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
		cmd.arg = start_block * card->block_size;
   4812e:	bf58      	it	pl
   48130:	fb03 f204 	mulpl.w	r2, r3, r4
   48134:	9213      	str	r2, [sp, #76]	; 0x4c
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   48136:	2211      	movs	r2, #17
   48138:	9218      	str	r2, [sp, #96]	; 0x60
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   4813a:	2203      	movs	r2, #3
	data.block_size = card->block_size;
   4813c:	e9cd 4306 	strd	r4, r3, [sp, #24]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   48140:	f242 7310 	movw	r3, #10000	; 0x2710
	cmd.retries = CONFIG_SD_DATA_RETRIES;
   48144:	e9cd 2e19 	strd	r2, lr, [sp, #100]	; 0x64
	ret = sdhc_request(card->sdhc, &cmd, &data);
   48148:	6830      	ldr	r0, [r6, #0]
   4814a:	aa06      	add	r2, sp, #24
   4814c:	a912      	add	r1, sp, #72	; 0x48
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   4814e:	930b      	str	r3, [sp, #44]	; 0x2c
	struct sdhc_data data = {0};
   48150:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	data.blocks = num_blocks;
   48154:	9708      	str	r7, [sp, #32]
	data.data = (uint8_t *)wbuf;
   48156:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
	ret = sdhc_request(card->sdhc, &cmd, &data);
   4815a:	f00e fa69 	bl	56630 <sdhc_request>
	if (ret) {
   4815e:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
   48162:	2800      	cmp	r0, #0
   48164:	d057      	beq.n	48216 <sdmmc_write_blocks+0x176>
			ret = sdmmc_read_status(card);
   48166:	4630      	mov	r0, r6
		if (card->host_props.is_spi) {
   48168:	2b00      	cmp	r3, #0
   4816a:	d051      	beq.n	48210 <sdmmc_write_blocks+0x170>
			ret = sdmmc_read_status(card);
   4816c:	f00e faa1 	bl	566b2 <sdmmc_read_status>
			ret = sdmmc_wait_ready(card);
   48170:	4604      	mov	r4, r0
		if (ret) {
   48172:	2800      	cmp	r0, #0
   48174:	d13e      	bne.n	481f4 <sdmmc_write_blocks+0x154>
	struct sdhc_command cmd = {0};
   48176:	4601      	mov	r1, r0
   48178:	2224      	movs	r2, #36	; 0x24
   4817a:	a81b      	add	r0, sp, #108	; 0x6c
   4817c:	f012 feec 	bl	5af58 <memset>
	struct sdhc_data data = {0};
   48180:	4621      	mov	r1, r4
   48182:	2218      	movs	r2, #24
   48184:	a80c      	add	r0, sp, #48	; 0x30
   48186:	f012 fee7 	bl	5af58 <memset>
	ret = sdmmc_app_command(card, card->relative_addr);
   4818a:	4630      	mov	r0, r6
   4818c:	6e31      	ldr	r1, [r6, #96]	; 0x60
   4818e:	f7ff fae9 	bl	47764 <sdmmc_app_command>
	if (ret) {
   48192:	4604      	mov	r4, r0
   48194:	bb70      	cbnz	r0, 481f4 <sdmmc_write_blocks+0x154>
	cmd.opcode = SD_APP_SEND_NUM_WRITTEN_BLK;
   48196:	2316      	movs	r3, #22
	cmd.arg = 0;
   48198:	e9cd 301b 	strd	r3, r0, [sp, #108]	; 0x6c
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   4819c:	2311      	movs	r3, #17
   4819e:	9321      	str	r3, [sp, #132]	; 0x84
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   481a0:	23c8      	movs	r3, #200	; 0xc8
	data.blocks = 1U;
   481a2:	2004      	movs	r0, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   481a4:	9323      	str	r3, [sp, #140]	; 0x8c
	data.blocks = 1U;
   481a6:	2301      	movs	r3, #1
   481a8:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
	uint32_t *blocks = (uint32_t *)card->card_buffer;
   481ac:	f106 0378 	add.w	r3, r6, #120	; 0x78
	data.data = blocks;
   481b0:	9310      	str	r3, [sp, #64]	; 0x40
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   481b2:	f242 7310 	movw	r3, #10000	; 0x2710
	ret = sdhc_request(card->sdhc, &cmd, &data);
   481b6:	6830      	ldr	r0, [r6, #0]
   481b8:	aa0c      	add	r2, sp, #48	; 0x30
   481ba:	a91b      	add	r1, sp, #108	; 0x6c
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   481bc:	9311      	str	r3, [sp, #68]	; 0x44
	ret = sdhc_request(card->sdhc, &cmd, &data);
   481be:	f00e fa37 	bl	56630 <sdhc_request>
	if (ret) {
   481c2:	4604      	mov	r4, r0
   481c4:	b9b0      	cbnz	r0, 481f4 <sdmmc_write_blocks+0x154>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
   481c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   481c8:	2b01      	cmp	r3, #1
   481ca:	d103      	bne.n	481d4 <sdmmc_write_blocks+0x134>
		return (cmd->response[0U] & SD_R1_ERR_FLAGS);
   481cc:	4c22      	ldr	r4, [pc, #136]	; (48258 <sdmmc_write_blocks+0x1b8>)
   481ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   481d0:	401c      	ands	r4, r3
	if (ret) {
   481d2:	b97c      	cbnz	r4, 481f4 <sdmmc_write_blocks+0x154>
	*num_written = sys_be32_to_cpu(blocks[0]);
   481d4:	6fb3      	ldr	r3, [r6, #120]	; 0x78
		LOG_ERR("Only %d blocks of %d were written", blocks, num_blocks);
   481d6:	2201      	movs	r2, #1
   481d8:	ba1b      	rev	r3, r3
   481da:	e9cd 3703 	strd	r3, r7, [sp, #12]
   481de:	4b1f      	ldr	r3, [pc, #124]	; (4825c <sdmmc_write_blocks+0x1bc>)
   481e0:	491b      	ldr	r1, [pc, #108]	; (48250 <sdmmc_write_blocks+0x1b0>)
   481e2:	9302      	str	r3, [sp, #8]
   481e4:	2300      	movs	r3, #0
   481e6:	4618      	mov	r0, r3
   481e8:	e9cd 3300 	strd	r3, r3, [sp]
   481ec:	f00e faa0 	bl	56730 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   481f0:	f06f 0404 	mvn.w	r4, #4
			LOG_ERR("Write failed");
   481f4:	4b1a      	ldr	r3, [pc, #104]	; (48260 <sdmmc_write_blocks+0x1c0>)
   481f6:	2201      	movs	r2, #1
   481f8:	9302      	str	r3, [sp, #8]
   481fa:	2300      	movs	r3, #0
   481fc:	4914      	ldr	r1, [pc, #80]	; (48250 <sdmmc_write_blocks+0x1b0>)
   481fe:	4618      	mov	r0, r3
   48200:	e9cd 3300 	strd	r3, r3, [sp]
   48204:	f00e fa94 	bl	56730 <z_log_msg_runtime_create.constprop.0>
			k_mutex_unlock(&card->lock);
   48208:	4628      	mov	r0, r5
   4820a:	f00e fad0 	bl	567ae <k_mutex_unlock.isra.0>
			return ret;
   4820e:	e763      	b.n	480d8 <sdmmc_write_blocks+0x38>
			ret = sdmmc_wait_ready(card);
   48210:	f7ff fae8 	bl	477e4 <sdmmc_wait_ready>
   48214:	e7ac      	b.n	48170 <sdmmc_write_blocks+0xd0>
		ret = sdmmc_read_status(card);
   48216:	4630      	mov	r0, r6
	if (card->host_props.is_spi) {
   48218:	b18b      	cbz	r3, 4823e <sdmmc_write_blocks+0x19e>
		ret = sdmmc_read_status(card);
   4821a:	f00e fa4a 	bl	566b2 <sdmmc_read_status>
		ret = sdmmc_wait_ready(card);
   4821e:	4604      	mov	r4, r0
	if (ret) {
   48220:	2800      	cmp	r0, #0
   48222:	d0f1      	beq.n	48208 <sdmmc_write_blocks+0x168>
		LOG_ERR("Card did not return to ready state");
   48224:	4b0f      	ldr	r3, [pc, #60]	; (48264 <sdmmc_write_blocks+0x1c4>)
   48226:	2201      	movs	r2, #1
   48228:	9302      	str	r3, [sp, #8]
   4822a:	2300      	movs	r3, #0
   4822c:	4908      	ldr	r1, [pc, #32]	; (48250 <sdmmc_write_blocks+0x1b0>)
   4822e:	4618      	mov	r0, r3
   48230:	e9cd 3300 	strd	r3, r3, [sp]
   48234:	f00e fa7c 	bl	56730 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   48238:	f06f 0473 	mvn.w	r4, #115	; 0x73
   4823c:	e7da      	b.n	481f4 <sdmmc_write_blocks+0x154>
		ret = sdmmc_wait_ready(card);
   4823e:	f7ff fad1 	bl	477e4 <sdmmc_wait_ready>
   48242:	e7ec      	b.n	4821e <sdmmc_write_blocks+0x17e>
		return -EINVAL;
   48244:	f06f 0415 	mvn.w	r4, #21
   48248:	e746      	b.n	480d8 <sdmmc_write_blocks+0x38>
   4824a:	bf00      	nop
   4824c:	0005e3c0 	.word	0x0005e3c0
   48250:	0005c02c 	.word	0x0005c02c
   48254:	0005e3e3 	.word	0x0005e3e3
   48258:	fdf98008 	.word	0xfdf98008
   4825c:	0005e450 	.word	0x0005e450
   48260:	0005e472 	.word	0x0005e472
   48264:	0005e41c 	.word	0x0005e41c

00048268 <disk_sdmmc_init>:
static struct disk_info sdmmc_disk = {
	.ops = &sdmmc_disk_ops,
};

static int disk_sdmmc_init(const struct device *dev)
{
   48268:	4603      	mov	r3, r0
	struct sdmmc_data *data = dev->data;

	data->status = SD_UNINIT;
   4826a:	2100      	movs	r1, #0
	struct sdmmc_data *data = dev->data;
   4826c:	6902      	ldr	r2, [r0, #16]
	sdmmc_disk.dev = dev;
   4826e:	4804      	ldr	r0, [pc, #16]	; (48280 <disk_sdmmc_init+0x18>)
	data->status = SD_UNINIT;
   48270:	f882 10b8 	strb.w	r1, [r2, #184]	; 0xb8
	sdmmc_disk.dev = dev;
   48274:	6103      	str	r3, [r0, #16]
	sdmmc_disk.name = data->name;
   48276:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   4827a:	6083      	str	r3, [r0, #8]

	return disk_access_register(&sdmmc_disk);
   4827c:	f7fd ba52 	b.w	45724 <disk_access_register>
   48280:	2001a63c 	.word	0x2001a63c

00048284 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   48284:	4b08      	ldr	r3, [pc, #32]	; (482a8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   48286:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   48288:	1ac3      	subs	r3, r0, r3
{
   4828a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   4828c:	4907      	ldr	r1, [pc, #28]	; (482ac <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   4828e:	109b      	asrs	r3, r3, #2
{
   48290:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   48292:	4359      	muls	r1, r3
   48294:	2240      	movs	r2, #64	; 0x40
   48296:	4806      	ldr	r0, [pc, #24]	; (482b0 <onoff_stop+0x2c>)
   48298:	f00e fb02 	bl	568a0 <stop>
	notify(mgr, res);
   4829c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   4829e:	4601      	mov	r1, r0
	notify(mgr, res);
   482a0:	4620      	mov	r0, r4
}
   482a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   482a6:	4718      	bx	r3
   482a8:	2001b618 	.word	0x2001b618
   482ac:	b6db6db7 	.word	0xb6db6db7
   482b0:	0005bc00 	.word	0x0005bc00

000482b4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   482b4:	2340      	movs	r3, #64	; 0x40
{
   482b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   482b8:	4c0b      	ldr	r4, [pc, #44]	; (482e8 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   482ba:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   482bc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   482be:	460b      	mov	r3, r1
{
   482c0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   482c2:	490a      	ldr	r1, [pc, #40]	; (482ec <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   482c4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   482c6:	4361      	muls	r1, r4
{
   482c8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   482ca:	4a09      	ldr	r2, [pc, #36]	; (482f0 <onoff_start+0x3c>)
   482cc:	4809      	ldr	r0, [pc, #36]	; (482f4 <onoff_start+0x40>)
   482ce:	f00e fb13 	bl	568f8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   482d2:	1e01      	subs	r1, r0, #0
   482d4:	da05      	bge.n	482e2 <onoff_start+0x2e>
		notify(mgr, err);
   482d6:	4630      	mov	r0, r6
   482d8:	462b      	mov	r3, r5
	}
}
   482da:	b002      	add	sp, #8
   482dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   482e0:	4718      	bx	r3
}
   482e2:	b002      	add	sp, #8
   482e4:	bd70      	pop	{r4, r5, r6, pc}
   482e6:	bf00      	nop
   482e8:	2001b618 	.word	0x2001b618
   482ec:	b6db6db7 	.word	0xb6db6db7
   482f0:	00056963 	.word	0x00056963
   482f4:	0005bc00 	.word	0x0005bc00

000482f8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   482f8:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   482fa:	2200      	movs	r2, #0
   482fc:	2101      	movs	r1, #1
{
   482fe:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   48300:	2005      	movs	r0, #5
   48302:	f7fd fd99 	bl	45e38 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   48306:	480f      	ldr	r0, [pc, #60]	; (48344 <clk_init+0x4c>)
   48308:	f007 f882 	bl	4f410 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   4830c:	4b0e      	ldr	r3, [pc, #56]	; (48348 <clk_init+0x50>)
   4830e:	4298      	cmp	r0, r3
   48310:	d115      	bne.n	4833e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   48312:	f007 f88d 	bl	4f430 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   48316:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   48318:	490c      	ldr	r1, [pc, #48]	; (4834c <clk_init+0x54>)
   4831a:	4630      	mov	r0, r6
   4831c:	f00d fc7a 	bl	55c14 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   48320:	2800      	cmp	r0, #0
   48322:	db0b      	blt.n	4833c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   48324:	2501      	movs	r5, #1
   48326:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   48328:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   4832a:	4908      	ldr	r1, [pc, #32]	; (4834c <clk_init+0x54>)
   4832c:	f104 001c 	add.w	r0, r4, #28
   48330:	f00d fc70 	bl	55c14 <onoff_manager_init>
		if (err < 0) {
   48334:	2800      	cmp	r0, #0
   48336:	db01      	blt.n	4833c <clk_init+0x44>
	}

	return 0;
   48338:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   4833a:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   4833c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   4833e:	f06f 0004 	mvn.w	r0, #4
   48342:	e7fb      	b.n	4833c <clk_init+0x44>
   48344:	00048385 	.word	0x00048385
   48348:	0bad0000 	.word	0x0bad0000
   4834c:	0005c2d0 	.word	0x0005c2d0

00048350 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   48350:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   48352:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   48354:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   48356:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   48358:	434b      	muls	r3, r1
   4835a:	4808      	ldr	r0, [pc, #32]	; (4837c <clkstarted_handle.constprop.0+0x2c>)
   4835c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   4835e:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   48360:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   48364:	4418      	add	r0, r3
	sub_data->cb = NULL;
   48366:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   48368:	f00e fa87 	bl	5687a <set_on_state>
	if (callback) {
   4836c:	b12d      	cbz	r5, 4837a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   4836e:	4632      	mov	r2, r6
   48370:	462b      	mov	r3, r5
}
   48372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   48376:	4802      	ldr	r0, [pc, #8]	; (48380 <clkstarted_handle.constprop.0+0x30>)
   48378:	4718      	bx	r3
}
   4837a:	bd70      	pop	{r4, r5, r6, pc}
   4837c:	2001b618 	.word	0x2001b618
   48380:	0005bc00 	.word	0x0005bc00

00048384 <clock_event_handler>:
	switch (event) {
   48384:	b110      	cbz	r0, 4838c <clock_event_handler+0x8>
   48386:	2801      	cmp	r0, #1
   48388:	d004      	beq.n	48394 <clock_event_handler+0x10>
   4838a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   4838c:	4b03      	ldr	r3, [pc, #12]	; (4839c <clock_event_handler+0x18>)
   4838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   48390:	075b      	lsls	r3, r3, #29
   48392:	d101      	bne.n	48398 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   48394:	f7ff bfdc 	b.w	48350 <clkstarted_handle.constprop.0>
}
   48398:	4770      	bx	lr
   4839a:	bf00      	nop
   4839c:	2001b618 	.word	0x2001b618

000483a0 <generic_hfclk_start>:
{
   483a0:	b508      	push	{r3, lr}
	__asm__ volatile(
   483a2:	f04f 0320 	mov.w	r3, #32
   483a6:	f3ef 8111 	mrs	r1, BASEPRI
   483aa:	f383 8812 	msr	BASEPRI_MAX, r3
   483ae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   483b2:	4a11      	ldr	r2, [pc, #68]	; (483f8 <generic_hfclk_start+0x58>)
   483b4:	6813      	ldr	r3, [r2, #0]
   483b6:	f043 0002 	orr.w	r0, r3, #2
   483ba:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   483bc:	07da      	lsls	r2, r3, #31
   483be:	d408      	bmi.n	483d2 <generic_hfclk_start+0x32>
	__asm__ volatile(
   483c0:	f381 8811 	msr	BASEPRI, r1
   483c4:	f3bf 8f6f 	isb	sy
}
   483c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   483cc:	2001      	movs	r0, #1
   483ce:	f007 b83f 	b.w	4f450 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   483d2:	4b0a      	ldr	r3, [pc, #40]	; (483fc <generic_hfclk_start+0x5c>)
   483d4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   483d8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   483dc:	07d3      	lsls	r3, r2, #31
   483de:	d5ef      	bpl.n	483c0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   483e0:	4807      	ldr	r0, [pc, #28]	; (48400 <generic_hfclk_start+0x60>)
   483e2:	f00e fa4a 	bl	5687a <set_on_state>
   483e6:	f381 8811 	msr	BASEPRI, r1
   483ea:	f3bf 8f6f 	isb	sy
}
   483ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   483f2:	2000      	movs	r0, #0
   483f4:	f7ff bfac 	b.w	48350 <clkstarted_handle.constprop.0>
   483f8:	2001b668 	.word	0x2001b668
   483fc:	40005000 	.word	0x40005000
   48400:	2001b658 	.word	0x2001b658

00048404 <api_blocking_start>:
{
   48404:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   48406:	2200      	movs	r2, #0
   48408:	2301      	movs	r3, #1
   4840a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   4840e:	ab04      	add	r3, sp, #16
   48410:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   48414:	4a09      	ldr	r2, [pc, #36]	; (4843c <api_blocking_start+0x38>)
   48416:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   48418:	f8cd d000 	str.w	sp, [sp]
   4841c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   48420:	f00e fa98 	bl	56954 <api_start>
	if (err < 0) {
   48424:	2800      	cmp	r0, #0
   48426:	db05      	blt.n	48434 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   48428:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   4842c:	2300      	movs	r3, #0
   4842e:	4668      	mov	r0, sp
   48430:	f00a f980 	bl	52734 <z_impl_k_sem_take>
}
   48434:	b007      	add	sp, #28
   48436:	f85d fb04 	ldr.w	pc, [sp], #4
   4843a:	bf00      	nop
   4843c:	00056983 	.word	0x00056983

00048440 <generic_hfclk_stop>:
   48440:	4b07      	ldr	r3, [pc, #28]	; (48460 <generic_hfclk_stop+0x20>)
   48442:	e8d3 2fef 	ldaex	r2, [r3]
   48446:	f022 0102 	bic.w	r1, r2, #2
   4844a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   4844e:	2800      	cmp	r0, #0
   48450:	d1f7      	bne.n	48442 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   48452:	07d3      	lsls	r3, r2, #31
   48454:	d402      	bmi.n	4845c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   48456:	2001      	movs	r0, #1
   48458:	f011 ba46 	b.w	598e8 <nrfx_clock_stop>
}
   4845c:	4770      	bx	lr
   4845e:	bf00      	nop
   48460:	2001b668 	.word	0x2001b668

00048464 <z_nrf_clock_control_lf_on>:
{
   48464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   48468:	2201      	movs	r2, #1
   4846a:	4607      	mov	r7, r0
   4846c:	4935      	ldr	r1, [pc, #212]	; (48544 <z_nrf_clock_control_lf_on+0xe0>)
   4846e:	e8d1 3fef 	ldaex	r3, [r1]
   48472:	e8c1 2fe0 	stlex	r0, r2, [r1]
   48476:	2800      	cmp	r0, #0
   48478:	d1f9      	bne.n	4846e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   4847a:	b933      	cbnz	r3, 4848a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   4847c:	4932      	ldr	r1, [pc, #200]	; (48548 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   4847e:	4833      	ldr	r0, [pc, #204]	; (4854c <z_nrf_clock_control_lf_on+0xe8>)
   48480:	604b      	str	r3, [r1, #4]
   48482:	60cb      	str	r3, [r1, #12]
   48484:	608a      	str	r2, [r1, #8]
   48486:	f00d fbd8 	bl	55c3a <onoff_request>
	switch (start_mode) {
   4848a:	1e7b      	subs	r3, r7, #1
   4848c:	2b01      	cmp	r3, #1
   4848e:	d828      	bhi.n	484e2 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   48490:	2f01      	cmp	r7, #1
   48492:	d106      	bne.n	484a2 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   48494:	4b2e      	ldr	r3, [pc, #184]	; (48550 <z_nrf_clock_control_lf_on+0xec>)
   48496:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   4849a:	f003 0303 	and.w	r3, r3, #3
   4849e:	2b02      	cmp	r3, #2
   484a0:	d01f      	beq.n	484e2 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   484a2:	f012 f9e9 	bl	5a878 <k_is_in_isr>
   484a6:	4605      	mov	r5, r0
   484a8:	b9e8      	cbnz	r0, 484e6 <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   484aa:	4b2a      	ldr	r3, [pc, #168]	; (48554 <z_nrf_clock_control_lf_on+0xf0>)
   484ac:	781b      	ldrb	r3, [r3, #0]
   484ae:	b1d3      	cbz	r3, 484e6 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   484b0:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   484b2:	4606      	mov	r6, r0
   484b4:	4b26      	ldr	r3, [pc, #152]	; (48550 <z_nrf_clock_control_lf_on+0xec>)
   484b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   484ba:	4c25      	ldr	r4, [pc, #148]	; (48550 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   484bc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 48558 <z_nrf_clock_control_lf_on+0xf4>
   484c0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   484c4:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   484c8:	03d2      	lsls	r2, r2, #15
   484ca:	d516      	bpl.n	484fa <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   484cc:	f003 0303 	and.w	r3, r3, #3
   484d0:	2b02      	cmp	r3, #2
   484d2:	d001      	beq.n	484d8 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   484d4:	2f01      	cmp	r7, #1
   484d6:	d110      	bne.n	484fa <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   484d8:	b375      	cbz	r5, 48538 <z_nrf_clock_control_lf_on+0xd4>
   484da:	f386 8811 	msr	BASEPRI, r6
   484de:	f3bf 8f6f 	isb	sy
}
   484e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   484e6:	f04f 0320 	mov.w	r3, #32
   484ea:	f3ef 8611 	mrs	r6, BASEPRI
   484ee:	f383 8812 	msr	BASEPRI_MAX, r3
   484f2:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   484f6:	2501      	movs	r5, #1
   484f8:	e7df      	b.n	484ba <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   484fa:	b1c5      	cbz	r5, 4852e <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   484fc:	4630      	mov	r0, r6
   484fe:	f7fd fbcd 	bl	45c9c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   48502:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   48506:	b2db      	uxtb	r3, r3
   48508:	2b01      	cmp	r3, #1
   4850a:	d1d9      	bne.n	484c0 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   4850c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   48510:	2a00      	cmp	r2, #0
   48512:	d0d5      	beq.n	484c0 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   48514:	2200      	movs	r2, #0
   48516:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   4851a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   4851e:	2202      	movs	r2, #2
   48520:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   48524:	2220      	movs	r2, #32
   48526:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4852a:	60a3      	str	r3, [r4, #8]
}
   4852c:	e7c8      	b.n	484c0 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   4852e:	2100      	movs	r1, #0
   48530:	2021      	movs	r0, #33	; 0x21
   48532:	f00a fceb 	bl	52f0c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   48536:	e7e4      	b.n	48502 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   48538:	2202      	movs	r2, #2
   4853a:	4b05      	ldr	r3, [pc, #20]	; (48550 <z_nrf_clock_control_lf_on+0xec>)
   4853c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   48540:	e7cf      	b.n	484e2 <z_nrf_clock_control_lf_on+0x7e>
   48542:	bf00      	nop
   48544:	2001b614 	.word	0x2001b614
   48548:	2001b604 	.word	0x2001b604
   4854c:	2001b634 	.word	0x2001b634
   48550:	40005000 	.word	0x40005000
   48554:	2002083d 	.word	0x2002083d
   48558:	e000e100 	.word	0xe000e100

0004855c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   4855c:	b508      	push	{r3, lr}
   4855e:	4807      	ldr	r0, [pc, #28]	; (4857c <uart_console_init+0x20>)
   48560:	f012 f8af 	bl	5a6c2 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   48564:	b138      	cbz	r0, 48576 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   48566:	4806      	ldr	r0, [pc, #24]	; (48580 <uart_console_init+0x24>)
   48568:	f7fe faa2 	bl	46ab0 <__stdout_hook_install>
	__printk_hook_install(console_out);
   4856c:	4804      	ldr	r0, [pc, #16]	; (48580 <uart_console_init+0x24>)
   4856e:	f7fc fba7 	bl	44cc0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   48572:	2000      	movs	r0, #0
}
   48574:	bd08      	pop	{r3, pc}
		return -ENODEV;
   48576:	f06f 0012 	mvn.w	r0, #18
   4857a:	e7fb      	b.n	48574 <uart_console_init+0x18>
   4857c:	0005bc54 	.word	0x0005bc54
   48580:	00048585 	.word	0x00048585

00048584 <console_out>:
	if ('\n' == c) {
   48584:	280a      	cmp	r0, #10
{
   48586:	b538      	push	{r3, r4, r5, lr}
   48588:	4604      	mov	r4, r0
   4858a:	4d07      	ldr	r5, [pc, #28]	; (485a8 <console_out+0x24>)
	if ('\n' == c) {
   4858c:	d104      	bne.n	48598 <console_out+0x14>
   4858e:	68ab      	ldr	r3, [r5, #8]
   48590:	210d      	movs	r1, #13
   48592:	4628      	mov	r0, r5
   48594:	685b      	ldr	r3, [r3, #4]
   48596:	4798      	blx	r3
   48598:	68ab      	ldr	r3, [r5, #8]
   4859a:	4803      	ldr	r0, [pc, #12]	; (485a8 <console_out+0x24>)
   4859c:	685b      	ldr	r3, [r3, #4]
   4859e:	b2e1      	uxtb	r1, r4
   485a0:	4798      	blx	r3
}
   485a2:	4620      	mov	r0, r4
   485a4:	bd38      	pop	{r3, r4, r5, pc}
   485a6:	bf00      	nop
   485a8:	0005bc54 	.word	0x0005bc54

000485ac <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   485ac:	b530      	push	{r4, r5, lr}
	return port->config;
   485ae:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   485b0:	f001 041f 	and.w	r4, r1, #31
   485b4:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   485b6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   485ba:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   485bc:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   485c0:	d105      	bne.n	485ce <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   485c2:	4620      	mov	r0, r4
   485c4:	f007 fa0a 	bl	4f9dc <nrfx_gpiote_trigger_disable>

		return 0;
   485c8:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   485ca:	b005      	add	sp, #20
   485cc:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   485ce:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   485d0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   485d4:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   485d8:	d114      	bne.n	48604 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   485da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   485de:	bf0c      	ite	eq
   485e0:	2304      	moveq	r3, #4
   485e2:	2305      	movne	r3, #5
   485e4:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   485e8:	2300      	movs	r3, #0
   485ea:	4620      	mov	r0, r4
   485ec:	4619      	mov	r1, r3
   485ee:	aa02      	add	r2, sp, #8
   485f0:	f007 f82a 	bl	4f648 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   485f4:	4b1c      	ldr	r3, [pc, #112]	; (48668 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   485f6:	4298      	cmp	r0, r3
   485f8:	d133      	bne.n	48662 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   485fa:	2101      	movs	r1, #1
   485fc:	4620      	mov	r0, r4
   485fe:	f007 f9a9 	bl	4f954 <nrfx_gpiote_trigger_enable>
	return 0;
   48602:	e7e1      	b.n	485c8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   48604:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   48608:	d020      	beq.n	4864c <gpio_nrfx_pin_interrupt_configure+0xa0>
   4860a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   4860e:	bf14      	ite	ne
   48610:	2301      	movne	r3, #1
   48612:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   48614:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   48618:	6883      	ldr	r3, [r0, #8]
   4861a:	40cb      	lsrs	r3, r1
   4861c:	07d9      	lsls	r1, r3, #31
   4861e:	d4e3      	bmi.n	485e8 <gpio_nrfx_pin_interrupt_configure+0x3c>
   48620:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   48624:	d1e0      	bne.n	485e8 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   48626:	4a11      	ldr	r2, [pc, #68]	; (4866c <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   48628:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   4862c:	3380      	adds	r3, #128	; 0x80
   4862e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   48632:	07db      	lsls	r3, r3, #31
   48634:	d4d8      	bmi.n	485e8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   48636:	f10d 0507 	add.w	r5, sp, #7
   4863a:	4629      	mov	r1, r5
   4863c:	4620      	mov	r0, r4
   4863e:	f007 f935 	bl	4f8ac <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   48642:	4b0b      	ldr	r3, [pc, #44]	; (48670 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   48644:	4298      	cmp	r0, r3
   48646:	d003      	beq.n	48650 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
   48648:	9503      	str	r5, [sp, #12]
   4864a:	e7cd      	b.n	485e8 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   4864c:	2303      	movs	r3, #3
   4864e:	e7e1      	b.n	48614 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   48650:	4628      	mov	r0, r5
   48652:	f007 f979 	bl	4f948 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   48656:	4b04      	ldr	r3, [pc, #16]	; (48668 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   48658:	4298      	cmp	r0, r3
   4865a:	d0f5      	beq.n	48648 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   4865c:	f06f 000b 	mvn.w	r0, #11
   48660:	e7b3      	b.n	485ca <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   48662:	f06f 0015 	mvn.w	r0, #21
   48666:	e7b0      	b.n	485ca <gpio_nrfx_pin_interrupt_configure+0x1e>
   48668:	0bad0000 	.word	0x0bad0000
   4866c:	40842500 	.word	0x40842500
   48670:	0bad0004 	.word	0x0bad0004

00048674 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   48674:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   48676:	f007 f957 	bl	4f928 <nrfx_gpiote_is_init>
   4867a:	4604      	mov	r4, r0
   4867c:	b968      	cbnz	r0, 4869a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   4867e:	f007 f92b 	bl	4f8d8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   48682:	4b08      	ldr	r3, [pc, #32]	; (486a4 <gpio_nrfx_init+0x30>)
   48684:	4298      	cmp	r0, r3
   48686:	d10a      	bne.n	4869e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   48688:	4621      	mov	r1, r4
   4868a:	4807      	ldr	r0, [pc, #28]	; (486a8 <gpio_nrfx_init+0x34>)
   4868c:	f007 f908 	bl	4f8a0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   48690:	4622      	mov	r2, r4
   48692:	2105      	movs	r1, #5
   48694:	2031      	movs	r0, #49	; 0x31
   48696:	f7fd fbcf 	bl	45e38 <z_arm_irq_priority_set>
		return 0;
   4869a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   4869c:	bd10      	pop	{r4, pc}
		return -EIO;
   4869e:	f06f 0004 	mvn.w	r0, #4
   486a2:	e7fb      	b.n	4869c <gpio_nrfx_init+0x28>
   486a4:	0bad0000 	.word	0x0bad0000
   486a8:	000486ad 	.word	0x000486ad

000486ac <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   486ac:	0943      	lsrs	r3, r0, #5
{
   486ae:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   486b0:	d107      	bne.n	486c2 <nrfx_gpio_handler+0x16>
	return list->head;
   486b2:	4b0b      	ldr	r3, [pc, #44]	; (486e0 <nrfx_gpio_handler+0x34>)
   486b4:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   486b6:	b121      	cbz	r1, 486c2 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   486b8:	2501      	movs	r5, #1
	return node->next;
   486ba:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   486bc:	4e09      	ldr	r6, [pc, #36]	; (486e4 <nrfx_gpio_handler+0x38>)
   486be:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   486c0:	b901      	cbnz	r1, 486c4 <nrfx_gpio_handler+0x18>
}
   486c2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   486c4:	688a      	ldr	r2, [r1, #8]
   486c6:	402a      	ands	r2, r5
   486c8:	d002      	beq.n	486d0 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   486ca:	4630      	mov	r0, r6
   486cc:	684b      	ldr	r3, [r1, #4]
   486ce:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   486d0:	b11c      	cbz	r4, 486da <nrfx_gpio_handler+0x2e>
   486d2:	6823      	ldr	r3, [r4, #0]
   486d4:	4621      	mov	r1, r4
   486d6:	461c      	mov	r4, r3
   486d8:	e7f2      	b.n	486c0 <nrfx_gpio_handler+0x14>
   486da:	4623      	mov	r3, r4
   486dc:	e7fa      	b.n	486d4 <nrfx_gpio_handler+0x28>
   486de:	bf00      	nop
   486e0:	2001b66c 	.word	0x2001b66c
   486e4:	0005bc1c 	.word	0x0005bc1c

000486e8 <gpio_nrfx_pin_configure>:
{
   486e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   486ec:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   486ee:	f001 051f 	and.w	r5, r1, #31
   486f2:	7b3b      	ldrb	r3, [r7, #12]
{
   486f4:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   486f6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   486fa:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   486fc:	4628      	mov	r0, r5
   486fe:	f10d 0103 	add.w	r1, sp, #3
   48702:	f007 f8d3 	bl	4f8ac <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   48706:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   4870a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   4870c:	d10b      	bne.n	48726 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   4870e:	4628      	mov	r0, r5
   48710:	f007 f98c 	bl	4fa2c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   48714:	4b3c      	ldr	r3, [pc, #240]	; (48808 <gpio_nrfx_pin_configure+0x120>)
   48716:	4598      	cmp	r8, r3
   48718:	d103      	bne.n	48722 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   4871a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   4871e:	f007 f90d 	bl	4f93c <nrfx_gpiote_channel_free>
		return 0;
   48722:	2000      	movs	r0, #0
   48724:	e00c      	b.n	48740 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   48726:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   48728:	4628      	mov	r0, r5
   4872a:	4619      	mov	r1, r3
   4872c:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   4872e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   48732:	f006 ff89 	bl	4f648 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   48736:	4b34      	ldr	r3, [pc, #208]	; (48808 <gpio_nrfx_pin_configure+0x120>)
   48738:	4298      	cmp	r0, r3
   4873a:	d004      	beq.n	48746 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   4873c:	f06f 0015 	mvn.w	r0, #21
}
   48740:	b004      	add	sp, #16
   48742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   48746:	4580      	cmp	r8, r0
   48748:	d103      	bne.n	48752 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   4874a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   4874e:	f007 f8f5 	bl	4f93c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   48752:	03a3      	lsls	r3, r4, #14
   48754:	d549      	bpl.n	487ea <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   48756:	f240 3306 	movw	r3, #774	; 0x306
   4875a:	4023      	ands	r3, r4
   4875c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   48760:	d019      	beq.n	48796 <gpio_nrfx_pin_configure+0xae>
   48762:	d80c      	bhi.n	4877e <gpio_nrfx_pin_configure+0x96>
   48764:	2b06      	cmp	r3, #6
   48766:	d017      	beq.n	48798 <gpio_nrfx_pin_configure+0xb0>
   48768:	d804      	bhi.n	48774 <gpio_nrfx_pin_configure+0x8c>
   4876a:	b1ab      	cbz	r3, 48798 <gpio_nrfx_pin_configure+0xb0>
   4876c:	2b02      	cmp	r3, #2
   4876e:	d1e5      	bne.n	4873c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   48770:	2304      	movs	r3, #4
   48772:	e011      	b.n	48798 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   48774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   48778:	d1e0      	bne.n	4873c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   4877a:	2301      	movs	r3, #1
   4877c:	e00c      	b.n	48798 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   4877e:	f240 2202 	movw	r2, #514	; 0x202
   48782:	4293      	cmp	r3, r2
   48784:	d026      	beq.n	487d4 <gpio_nrfx_pin_configure+0xec>
   48786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   4878a:	d025      	beq.n	487d8 <gpio_nrfx_pin_configure+0xf0>
   4878c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   48790:	d1d4      	bne.n	4873c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   48792:	2302      	movs	r3, #2
   48794:	e000      	b.n	48798 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   48796:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   48798:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   4879c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   487a0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   487a4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   487a6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   487aa:	bf4c      	ite	mi
   487ac:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   487ae:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   487b2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   487b4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   487b8:	d510      	bpl.n	487dc <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   487ba:	2301      	movs	r3, #1
   487bc:	687a      	ldr	r2, [r7, #4]
   487be:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   487c0:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   487c2:	2200      	movs	r2, #0
   487c4:	4628      	mov	r0, r5
   487c6:	a901      	add	r1, sp, #4
   487c8:	f006 ffea 	bl	4f7a0 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   487cc:	4b0e      	ldr	r3, [pc, #56]	; (48808 <gpio_nrfx_pin_configure+0x120>)
   487ce:	4298      	cmp	r0, r3
   487d0:	d0a7      	beq.n	48722 <gpio_nrfx_pin_configure+0x3a>
   487d2:	e7b3      	b.n	4873c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   487d4:	2305      	movs	r3, #5
   487d6:	e7df      	b.n	48798 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   487d8:	2303      	movs	r3, #3
   487da:	e7dd      	b.n	48798 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   487dc:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   487de:	bf41      	itttt	mi
   487e0:	2301      	movmi	r3, #1
   487e2:	687a      	ldrmi	r2, [r7, #4]
   487e4:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   487e6:	60d3      	strmi	r3, [r2, #12]
}
   487e8:	e7eb      	b.n	487c2 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   487ea:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   487ec:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   487f0:	bf4c      	ite	mi
   487f2:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   487f4:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   487f8:	461a      	mov	r2, r3
   487fa:	4628      	mov	r0, r5
   487fc:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   487fe:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   48802:	f006 ff21 	bl	4f648 <nrfx_gpiote_input_configure>
   48806:	e7e1      	b.n	487cc <gpio_nrfx_pin_configure+0xe4>
   48808:	0bad0000 	.word	0x0bad0000

0004880c <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   4880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   48810:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   48812:	6905      	ldr	r5, [r0, #16]
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   48814:	2100      	movs	r1, #0
   48816:	6a60      	ldr	r0, [r4, #36]	; 0x24
{
   48818:	b086      	sub	sp, #24
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   4881a:	f00e f92a 	bl	56a72 <pinctrl_apply_state>
	if (err < 0) {
   4881e:	2800      	cmp	r0, #0
   48820:	db22      	blt.n	48868 <spi_nrfx_init+0x5c>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   48822:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   48824:	6a23      	ldr	r3, [r4, #32]
   48826:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   48828:	68ac      	ldr	r4, [r5, #8]
   4882a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   4882e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   48832:	429c      	cmp	r4, r3
   48834:	d304      	bcc.n	48840 <spi_nrfx_init+0x34>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   48836:	4628      	mov	r0, r5
   48838:	f00e f97a 	bl	56b30 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   4883c:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   4883e:	e013      	b.n	48868 <spi_nrfx_init+0x5c>
		if (!device_is_ready(cs_gpio->port)) {
   48840:	6820      	ldr	r0, [r4, #0]
   48842:	f011 ff3e 	bl	5a6c2 <z_device_is_ready>
   48846:	4603      	mov	r3, r0
   48848:	b988      	cbnz	r0, 4886e <spi_nrfx_init+0x62>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   4884a:	7922      	ldrb	r2, [r4, #4]
   4884c:	4919      	ldr	r1, [pc, #100]	; (488b4 <spi_nrfx_init+0xa8>)
   4884e:	9204      	str	r2, [sp, #16]
   48850:	6822      	ldr	r2, [r4, #0]
   48852:	6812      	ldr	r2, [r2, #0]
   48854:	9000      	str	r0, [sp, #0]
   48856:	9203      	str	r2, [sp, #12]
   48858:	4a17      	ldr	r2, [pc, #92]	; (488b8 <spi_nrfx_init+0xac>)
   4885a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   4885e:	2201      	movs	r2, #1
   48860:	f00e f8f7 	bl	56a52 <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   48864:	f06f 0012 	mvn.w	r0, #18
#endif
}
   48868:	b006      	add	sp, #24
   4886a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
   4886e:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   48870:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   48872:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   48874:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   48878:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   4887a:	f8dc 7000 	ldr.w	r7, [ip]
	return gpio_pin_configure(spec->port,
   4887e:	bf54      	ite	pl
   48880:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   48884:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   48888:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   4888c:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   48890:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
   48892:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   48896:	bf4c      	ite	mi
   48898:	ea47 070e 	orrmi.w	r7, r7, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   4889c:	ea27 070e 	bicpl.w	r7, r7, lr
   488a0:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
   488a4:	f8d8 3000 	ldr.w	r3, [r8]
   488a8:	4798      	blx	r3
		if (ret < 0) {
   488aa:	2800      	cmp	r0, #0
   488ac:	dbdc      	blt.n	48868 <spi_nrfx_init+0x5c>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   488ae:	3408      	adds	r4, #8
   488b0:	e7bb      	b.n	4882a <spi_nrfx_init+0x1e>
   488b2:	bf00      	nop
   488b4:	0005c044 	.word	0x0005c044
   488b8:	0005e4b4 	.word	0x0005e4b4

000488bc <transfer_next_chunk>:
{
   488bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   488be:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   488c0:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   488c2:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   488c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   488c6:	b98d      	cbnz	r5, 488ec <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   488c8:	2b00      	cmp	r3, #0
   488ca:	d137      	bne.n	4893c <transfer_next_chunk+0x80>
	int error = 0;
   488cc:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   488ce:	2200      	movs	r2, #0
   488d0:	4620      	mov	r0, r4
   488d2:	4611      	mov	r1, r2
   488d4:	f00e f90a 	bl	56aec <_spi_context_cs_control>
	ctx->sync_status = status;
   488d8:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   488da:	f104 0028 	add.w	r0, r4, #40	; 0x28
   488de:	f009 ff03 	bl	526e8 <z_impl_k_sem_give>
	dev_data->busy = false;
   488e2:	2300      	movs	r3, #0
   488e4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   488e8:	b004      	add	sp, #16
   488ea:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   488ec:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   488ee:	bb0b      	cbnz	r3, 48934 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   488f0:	bb39      	cbnz	r1, 48942 <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   488f2:	f641 72ff 	movw	r2, #8191	; 0x1fff
   488f6:	42aa      	cmp	r2, r5
   488f8:	bf28      	it	cs
   488fa:	462a      	movcs	r2, r5
   488fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   488fe:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   48900:	9100      	str	r1, [sp, #0]
   48902:	b11b      	cbz	r3, 4890c <transfer_next_chunk+0x50>
   48904:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   48906:	2b00      	cmp	r3, #0
   48908:	bf18      	it	ne
   4890a:	4613      	movne	r3, r2
   4890c:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   4890e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   48910:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   48912:	b11b      	cbz	r3, 4891c <transfer_next_chunk+0x60>
   48914:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   48916:	2b00      	cmp	r3, #0
   48918:	bf18      	it	ne
   4891a:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   4891c:	2200      	movs	r2, #0
   4891e:	4669      	mov	r1, sp
   48920:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   48922:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   48924:	f007 faec 	bl	4ff00 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   48928:	4b0d      	ldr	r3, [pc, #52]	; (48960 <transfer_next_chunk+0xa4>)
   4892a:	4298      	cmp	r0, r3
   4892c:	d0dc      	beq.n	488e8 <transfer_next_chunk+0x2c>
			error = -EIO;
   4892e:	f06f 0504 	mvn.w	r5, #4
   48932:	e7cc      	b.n	488ce <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   48934:	429d      	cmp	r5, r3
   48936:	bf28      	it	cs
   48938:	461d      	movcs	r5, r3
   4893a:	e7d9      	b.n	488f0 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   4893c:	461d      	mov	r5, r3
   4893e:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   48940:	e7d7      	b.n	488f2 <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   48942:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   48946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   4894a:	d0d2      	beq.n	488f2 <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   4894c:	2d40      	cmp	r5, #64	; 0x40
   4894e:	bf28      	it	cs
   48950:	2540      	movcs	r5, #64	; 0x40
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   48952:	6f20      	ldr	r0, [r4, #112]	; 0x70
   48954:	462a      	mov	r2, r5
   48956:	f012 fac5 	bl	5aee4 <memcpy>
			tx_buf = dev_data->buffer;
   4895a:	6f21      	ldr	r1, [r4, #112]	; 0x70
   4895c:	e7c9      	b.n	488f2 <transfer_next_chunk+0x36>
   4895e:	bf00      	nop
   48960:	0bad0000 	.word	0x0bad0000

00048964 <event_handler>:
{
   48964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   48966:	7803      	ldrb	r3, [r0, #0]
{
   48968:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   4896a:	2b00      	cmp	r3, #0
   4896c:	d154      	bne.n	48a18 <event_handler+0xb4>
	if (!ctx->tx_len) {
   4896e:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   48970:	6e89      	ldr	r1, [r1, #104]	; 0x68
   48972:	b152      	cbz	r2, 4898a <event_handler+0x26>
	if (len > ctx->tx_len) {
   48974:	4291      	cmp	r1, r2
   48976:	d91d      	bls.n	489b4 <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   48978:	4a28      	ldr	r2, [pc, #160]	; (48a1c <event_handler+0xb8>)
   4897a:	4618      	mov	r0, r3
   4897c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   48980:	4927      	ldr	r1, [pc, #156]	; (48a20 <event_handler+0xbc>)
   48982:	2201      	movs	r2, #1
   48984:	9300      	str	r3, [sp, #0]
   48986:	f00e f864 	bl	56a52 <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   4898a:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   4898c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   4898e:	b15b      	cbz	r3, 489a8 <event_handler+0x44>
	if (len > ctx->rx_len) {
   48990:	429a      	cmp	r2, r3
   48992:	d928      	bls.n	489e6 <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   48994:	4b21      	ldr	r3, [pc, #132]	; (48a1c <event_handler+0xb8>)
   48996:	2201      	movs	r2, #1
   48998:	9302      	str	r3, [sp, #8]
   4899a:	2300      	movs	r3, #0
   4899c:	4920      	ldr	r1, [pc, #128]	; (48a20 <event_handler+0xbc>)
   4899e:	4618      	mov	r0, r3
   489a0:	e9cd 3300 	strd	r3, r3, [sp]
   489a4:	f00e f855 	bl	56a52 <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   489a8:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   489aa:	b004      	add	sp, #16
   489ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   489b0:	f7ff bf84 	b.w	488bc <transfer_next_chunk>
	ctx->tx_len -= len;
   489b4:	1a52      	subs	r2, r2, r1
   489b6:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   489b8:	b97a      	cbnz	r2, 489da <event_handler+0x76>
		++ctx->current_tx;
   489ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   489bc:	f104 0258 	add.w	r2, r4, #88	; 0x58
		++ctx->current_tx;
   489c0:	3308      	adds	r3, #8
   489c2:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   489c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   489c6:	f104 0148 	add.w	r1, r4, #72	; 0x48
		--ctx->tx_count;
   489ca:	3b01      	subs	r3, #1
   489cc:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   489ce:	f104 0044 	add.w	r0, r4, #68	; 0x44
   489d2:	f00e f82b 	bl	56a2c <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   489d6:	6560      	str	r0, [r4, #84]	; 0x54
   489d8:	e7d7      	b.n	4898a <event_handler+0x26>
	} else if (ctx->tx_buf) {
   489da:	6d63      	ldr	r3, [r4, #84]	; 0x54
   489dc:	2b00      	cmp	r3, #0
   489de:	d0d4      	beq.n	4898a <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   489e0:	440b      	add	r3, r1
   489e2:	6563      	str	r3, [r4, #84]	; 0x54
   489e4:	e7d1      	b.n	4898a <event_handler+0x26>
	ctx->rx_len -= len;
   489e6:	1a9b      	subs	r3, r3, r2
   489e8:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   489ea:	b97b      	cbnz	r3, 48a0c <event_handler+0xa8>
		++ctx->current_rx;
   489ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   489ee:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   489f2:	3308      	adds	r3, #8
   489f4:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   489f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   489f8:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   489fc:	3b01      	subs	r3, #1
   489fe:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   48a00:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   48a04:	f00e f812 	bl	56a2c <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   48a08:	65e0      	str	r0, [r4, #92]	; 0x5c
   48a0a:	e7cd      	b.n	489a8 <event_handler+0x44>
	} else if (ctx->rx_buf) {
   48a0c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   48a0e:	2b00      	cmp	r3, #0
   48a10:	d0ca      	beq.n	489a8 <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   48a12:	4413      	add	r3, r2
   48a14:	65e3      	str	r3, [r4, #92]	; 0x5c
   48a16:	e7c7      	b.n	489a8 <event_handler+0x44>
}
   48a18:	b004      	add	sp, #16
   48a1a:	bd10      	pop	{r4, pc}
   48a1c:	0005e4d8 	.word	0x0005e4d8
   48a20:	0005c044 	.word	0x0005c044

00048a24 <spi_nrfx_transceive>:
{
   48a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   48a28:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   48a2a:	888b      	ldrh	r3, [r1, #4]
   48a2c:	460f      	mov	r7, r1
   48a2e:	0499      	lsls	r1, r3, #18
   48a30:	4680      	mov	r8, r0
   48a32:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   48a34:	6904      	ldr	r4, [r0, #16]
{
   48a36:	b08f      	sub	sp, #60	; 0x3c
   48a38:	d436      	bmi.n	48aa8 <spi_nrfx_transceive+0x84>
	return z_impl_k_sem_take(sem, timeout);
   48a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   48a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48a42:	f104 0010 	add.w	r0, r4, #16
   48a46:	f009 fe75 	bl	52734 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   48a4a:	6067      	str	r7, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   48a4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   48a50:	f8d8 a010 	ldr.w	sl, [r8, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   48a54:	9305      	str	r3, [sp, #20]
	uint32_t max_freq = dev_config->max_freq;
   48a56:	689b      	ldr	r3, [r3, #8]
   48a58:	9307      	str	r3, [sp, #28]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   48a5a:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   48a5e:	9306      	str	r3, [sp, #24]
   48a60:	b123      	cbz	r3, 48a6c <spi_nrfx_transceive+0x48>
   48a62:	f8da 3000 	ldr.w	r3, [sl]
   48a66:	429f      	cmp	r7, r3
   48a68:	f000 80c2 	beq.w	48bf0 <spi_nrfx_transceive+0x1cc>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   48a6c:	88be      	ldrh	r6, [r7, #4]
   48a6e:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   48a72:	d020      	beq.n	48ab6 <spi_nrfx_transceive+0x92>
		LOG_ERR("Half-duplex not supported");
   48a74:	4b95      	ldr	r3, [pc, #596]	; (48ccc <spi_nrfx_transceive+0x2a8>)
   48a76:	2201      	movs	r2, #1
   48a78:	9302      	str	r3, [sp, #8]
   48a7a:	2300      	movs	r3, #0
   48a7c:	4994      	ldr	r1, [pc, #592]	; (48cd0 <spi_nrfx_transceive+0x2ac>)
   48a7e:	4618      	mov	r0, r3
   48a80:	e9cd 3300 	strd	r3, r3, [sp]
   48a84:	f00d ffe5 	bl	56a52 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   48a88:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   48a8c:	6823      	ldr	r3, [r4, #0]
   48a8e:	889b      	ldrh	r3, [r3, #4]
   48a90:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   48a94:	d104      	bne.n	48aa0 <spi_nrfx_transceive+0x7c>
		ctx->owner = NULL;
   48a96:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   48a98:	f104 0010 	add.w	r0, r4, #16
   48a9c:	f009 fe24 	bl	526e8 <z_impl_k_sem_give>
}
   48aa0:	4628      	mov	r0, r5
   48aa2:	b00f      	add	sp, #60	; 0x3c
   48aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   48aa8:	69a3      	ldr	r3, [r4, #24]
   48aaa:	2b00      	cmp	r3, #0
   48aac:	d1c5      	bne.n	48a3a <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   48aae:	6863      	ldr	r3, [r4, #4]
   48ab0:	429f      	cmp	r7, r3
   48ab2:	d1c2      	bne.n	48a3a <spi_nrfx_transceive+0x16>
   48ab4:	e7ca      	b.n	48a4c <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   48ab6:	f016 0201 	ands.w	r2, r6, #1
   48aba:	d00e      	beq.n	48ada <spi_nrfx_transceive+0xb6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   48abc:	f8d8 2000 	ldr.w	r2, [r8]
   48ac0:	4618      	mov	r0, r3
   48ac2:	9203      	str	r2, [sp, #12]
   48ac4:	4a83      	ldr	r2, [pc, #524]	; (48cd4 <spi_nrfx_transceive+0x2b0>)
   48ac6:	4982      	ldr	r1, [pc, #520]	; (48cd0 <spi_nrfx_transceive+0x2ac>)
   48ac8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   48acc:	9300      	str	r3, [sp, #0]
   48ace:	2201      	movs	r2, #1
   48ad0:	f00d ffbf 	bl	56a52 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   48ad4:	f06f 0515 	mvn.w	r5, #21
   48ad8:	e7d8      	b.n	48a8c <spi_nrfx_transceive+0x68>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   48ada:	f016 0308 	ands.w	r3, r6, #8
   48ade:	d00a      	beq.n	48af6 <spi_nrfx_transceive+0xd2>
		LOG_ERR("Loopback mode is not supported");
   48ae0:	4b7d      	ldr	r3, [pc, #500]	; (48cd8 <spi_nrfx_transceive+0x2b4>)
   48ae2:	9200      	str	r2, [sp, #0]
   48ae4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   48ae8:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   48aea:	2201      	movs	r2, #1
   48aec:	4618      	mov	r0, r3
   48aee:	4978      	ldr	r1, [pc, #480]	; (48cd0 <spi_nrfx_transceive+0x2ac>)
   48af0:	f00d ffaf 	bl	56a52 <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   48af4:	e7ee      	b.n	48ad4 <spi_nrfx_transceive+0xb0>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   48af6:	f3c6 1245 	ubfx	r2, r6, #5, #6
   48afa:	2a08      	cmp	r2, #8
   48afc:	d004      	beq.n	48b08 <spi_nrfx_transceive+0xe4>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   48afe:	4a77      	ldr	r2, [pc, #476]	; (48cdc <spi_nrfx_transceive+0x2b8>)
   48b00:	e9cd 3201 	strd	r3, r2, [sp, #4]
   48b04:	9300      	str	r3, [sp, #0]
   48b06:	e7f0      	b.n	48aea <spi_nrfx_transceive+0xc6>
	if (spi_cfg->frequency < 125000) {
   48b08:	683d      	ldr	r5, [r7, #0]
   48b0a:	4a75      	ldr	r2, [pc, #468]	; (48ce0 <spi_nrfx_transceive+0x2bc>)
   48b0c:	4295      	cmp	r5, r2
   48b0e:	d801      	bhi.n	48b14 <spi_nrfx_transceive+0xf0>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   48b10:	4a74      	ldr	r2, [pc, #464]	; (48ce4 <spi_nrfx_transceive+0x2c0>)
   48b12:	e7f5      	b.n	48b00 <spi_nrfx_transceive+0xdc>
	config = dev_config->def_config;
   48b14:	9b05      	ldr	r3, [sp, #20]
   48b16:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   48b1a:	f103 0e0c 	add.w	lr, r3, #12
   48b1e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   48b22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   48b26:	f8de 3000 	ldr.w	r3, [lr]
   48b2a:	f8cc 3000 	str.w	r3, [ip]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   48b2e:	9b07      	ldr	r3, [sp, #28]
   48b30:	42ab      	cmp	r3, r5
   48b32:	bf28      	it	cs
   48b34:	462b      	movcs	r3, r5
   48b36:	461d      	mov	r5, r3
	if (frequency < 250000) {
   48b38:	4b6b      	ldr	r3, [pc, #428]	; (48ce8 <spi_nrfx_transceive+0x2c4>)
   48b3a:	429d      	cmp	r5, r3
   48b3c:	d940      	bls.n	48bc0 <spi_nrfx_transceive+0x19c>
	} else if (frequency < 500000) {
   48b3e:	4b6b      	ldr	r3, [pc, #428]	; (48cec <spi_nrfx_transceive+0x2c8>)
   48b40:	429d      	cmp	r5, r3
   48b42:	d940      	bls.n	48bc6 <spi_nrfx_transceive+0x1a2>
	} else if (frequency < 1000000) {
   48b44:	4b6a      	ldr	r3, [pc, #424]	; (48cf0 <spi_nrfx_transceive+0x2cc>)
   48b46:	429d      	cmp	r5, r3
   48b48:	d940      	bls.n	48bcc <spi_nrfx_transceive+0x1a8>
	} else if (frequency < 2000000) {
   48b4a:	4b6a      	ldr	r3, [pc, #424]	; (48cf4 <spi_nrfx_transceive+0x2d0>)
   48b4c:	429d      	cmp	r5, r3
   48b4e:	d940      	bls.n	48bd2 <spi_nrfx_transceive+0x1ae>
	} else if (frequency < 4000000) {
   48b50:	4b69      	ldr	r3, [pc, #420]	; (48cf8 <spi_nrfx_transceive+0x2d4>)
   48b52:	429d      	cmp	r5, r3
   48b54:	d940      	bls.n	48bd8 <spi_nrfx_transceive+0x1b4>
		return NRF_SPIM_FREQ_4M;
   48b56:	4b69      	ldr	r3, [pc, #420]	; (48cfc <spi_nrfx_transceive+0x2d8>)
   48b58:	429d      	cmp	r5, r3
   48b5a:	bf2c      	ite	cs
   48b5c:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
   48b60:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   48b64:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   48b66:	950b      	str	r5, [sp, #44]	; 0x2c
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   48b68:	f006 0304 	and.w	r3, r6, #4
   48b6c:	d537      	bpl.n	48bde <spi_nrfx_transceive+0x1ba>
			return NRF_SPIM_MODE_2;
   48b6e:	2b00      	cmp	r3, #0
   48b70:	bf14      	ite	ne
   48b72:	2303      	movne	r3, #3
   48b74:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   48b76:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (dev_data->initialized) {
   48b7a:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
   48b7c:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   48b80:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
	if (dev_data->initialized) {
   48b84:	b12b      	cbz	r3, 48b92 <spi_nrfx_transceive+0x16e>
		nrfx_spim_uninit(&dev_config->spim);
   48b86:	9805      	ldr	r0, [sp, #20]
   48b88:	f007 f972 	bl	4fe70 <nrfx_spim_uninit>
		dev_data->initialized = false;
   48b8c:	2300      	movs	r3, #0
   48b8e:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   48b92:	4653      	mov	r3, sl
   48b94:	4a5a      	ldr	r2, [pc, #360]	; (48d00 <spi_nrfx_transceive+0x2dc>)
   48b96:	9805      	ldr	r0, [sp, #20]
   48b98:	a909      	add	r1, sp, #36	; 0x24
   48b9a:	f007 f8c1 	bl	4fd20 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   48b9e:	4b59      	ldr	r3, [pc, #356]	; (48d04 <spi_nrfx_transceive+0x2e0>)
   48ba0:	4298      	cmp	r0, r3
   48ba2:	d020      	beq.n	48be6 <spi_nrfx_transceive+0x1c2>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   48ba4:	4b58      	ldr	r3, [pc, #352]	; (48d08 <spi_nrfx_transceive+0x2e4>)
   48ba6:	9003      	str	r0, [sp, #12]
   48ba8:	9302      	str	r3, [sp, #8]
   48baa:	2300      	movs	r3, #0
   48bac:	2201      	movs	r2, #1
   48bae:	4618      	mov	r0, r3
   48bb0:	e9cd 3300 	strd	r3, r3, [sp]
   48bb4:	4946      	ldr	r1, [pc, #280]	; (48cd0 <spi_nrfx_transceive+0x2ac>)
   48bb6:	f00d ff4c 	bl	56a52 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   48bba:	f06f 0504 	mvn.w	r5, #4
   48bbe:	e765      	b.n	48a8c <spi_nrfx_transceive+0x68>
		return NRF_SPIM_FREQ_125K;
   48bc0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   48bc4:	e7ce      	b.n	48b64 <spi_nrfx_transceive+0x140>
		return NRF_SPIM_FREQ_250K;
   48bc6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   48bca:	e7cb      	b.n	48b64 <spi_nrfx_transceive+0x140>
		return NRF_SPIM_FREQ_500K;
   48bcc:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   48bd0:	e7c8      	b.n	48b64 <spi_nrfx_transceive+0x140>
		return NRF_SPIM_FREQ_1M;
   48bd2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   48bd6:	e7c5      	b.n	48b64 <spi_nrfx_transceive+0x140>
		return NRF_SPIM_FREQ_2M;
   48bd8:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   48bdc:	e7c2      	b.n	48b64 <spi_nrfx_transceive+0x140>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   48bde:	3b00      	subs	r3, #0
   48be0:	bf18      	it	ne
   48be2:	2301      	movne	r3, #1
   48be4:	e7c7      	b.n	48b76 <spi_nrfx_transceive+0x152>
	dev_data->initialized = true;
   48be6:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   48be8:	f8ca 7000 	str.w	r7, [sl]
	dev_data->initialized = true;
   48bec:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   48bf0:	2301      	movs	r3, #1
   48bf2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   48bf6:	f1b9 0f00 	cmp.w	r9, #0
   48bfa:	d154      	bne.n	48ca6 <spi_nrfx_transceive+0x282>
   48bfc:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   48c00:	2300      	movs	r3, #0
   48c02:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   48c04:	f104 0258 	add.w	r2, r4, #88	; 0x58
   48c08:	f104 0148 	add.w	r1, r4, #72	; 0x48
   48c0c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   48c10:	f00d ff0c 	bl	56a2c <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   48c14:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   48c16:	f1bb 0f00 	cmp.w	fp, #0
   48c1a:	d14c      	bne.n	48cb6 <spi_nrfx_transceive+0x292>
   48c1c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   48c20:	2300      	movs	r3, #0
   48c22:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   48c24:	f104 0260 	add.w	r2, r4, #96	; 0x60
   48c28:	f104 0150 	add.w	r1, r4, #80	; 0x50
   48c2c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   48c30:	f00d fefc 	bl	56a2c <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   48c34:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   48c36:	2101      	movs	r1, #1
   48c38:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   48c3a:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   48c3c:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   48c3e:	4620      	mov	r0, r4
   48c40:	f00d ff54 	bl	56aec <_spi_context_cs_control>
		transfer_next_chunk(dev);
   48c44:	4640      	mov	r0, r8
   48c46:	f7ff fe39 	bl	488bc <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   48c4a:	6e25      	ldr	r5, [r4, #96]	; 0x60
   48c4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   48c4e:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   48c50:	429d      	cmp	r5, r3
   48c52:	bf38      	it	cc
   48c54:	461d      	movcc	r5, r3
   48c56:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   48c5a:	435d      	muls	r5, r3
			     ctx->config->frequency;
   48c5c:	f857 3b28 	ldr.w	r3, [r7], #40
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   48c60:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   48c64:	681b      	ldr	r3, [r3, #0]
   48c66:	4631      	mov	r1, r6
   48c68:	fbb5 f5f3 	udiv	r5, r5, r3
   48c6c:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   48c70:	35c8      	adds	r5, #200	; 0xc8
   48c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48c76:	2300      	movs	r3, #0
   48c78:	fbe5 010c 	umlal	r0, r1, r5, ip
   48c7c:	f7f7 ff48 	bl	40b10 <__aeabi_uldivmod>
   48c80:	4602      	mov	r2, r0
   48c82:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   48c84:	4638      	mov	r0, r7
   48c86:	f009 fd55 	bl	52734 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   48c8a:	b1e0      	cbz	r0, 48cc6 <spi_nrfx_transceive+0x2a2>
		LOG_ERR("Timeout waiting for transfer complete");
   48c8c:	4b1f      	ldr	r3, [pc, #124]	; (48d0c <spi_nrfx_transceive+0x2e8>)
   48c8e:	2201      	movs	r2, #1
   48c90:	e9cd 6301 	strd	r6, r3, [sp, #4]
   48c94:	4630      	mov	r0, r6
   48c96:	4633      	mov	r3, r6
   48c98:	490d      	ldr	r1, [pc, #52]	; (48cd0 <spi_nrfx_transceive+0x2ac>)
   48c9a:	9600      	str	r6, [sp, #0]
   48c9c:	f00d fed9 	bl	56a52 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   48ca0:	f06f 0573 	mvn.w	r5, #115	; 0x73
   48ca4:	e6f2      	b.n	48a8c <spi_nrfx_transceive+0x68>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   48ca6:	f8d9 3000 	ldr.w	r3, [r9]
   48caa:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   48cac:	2b00      	cmp	r3, #0
   48cae:	d0a7      	beq.n	48c00 <spi_nrfx_transceive+0x1dc>
   48cb0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   48cb4:	e7a5      	b.n	48c02 <spi_nrfx_transceive+0x1de>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   48cb6:	f8db 3000 	ldr.w	r3, [fp]
   48cba:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   48cbc:	2b00      	cmp	r3, #0
   48cbe:	d0af      	beq.n	48c20 <spi_nrfx_transceive+0x1fc>
   48cc0:	f8db 3004 	ldr.w	r3, [fp, #4]
   48cc4:	e7ad      	b.n	48c22 <spi_nrfx_transceive+0x1fe>
	status = ctx->sync_status;
   48cc6:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   48cc8:	e6e0      	b.n	48a8c <spi_nrfx_transceive+0x68>
   48cca:	bf00      	nop
   48ccc:	0005e4f6 	.word	0x0005e4f6
   48cd0:	0005c044 	.word	0x0005c044
   48cd4:	0005e510 	.word	0x0005e510
   48cd8:	0005e532 	.word	0x0005e532
   48cdc:	0005e551 	.word	0x0005e551
   48ce0:	0001e847 	.word	0x0001e847
   48ce4:	0005e580 	.word	0x0005e580
   48ce8:	0003d08f 	.word	0x0003d08f
   48cec:	0007a11f 	.word	0x0007a11f
   48cf0:	000f423f 	.word	0x000f423f
   48cf4:	001e847f 	.word	0x001e847f
   48cf8:	003d08ff 	.word	0x003d08ff
   48cfc:	007a1200 	.word	0x007a1200
   48d00:	00048965 	.word	0x00048965
   48d04:	0bad0000 	.word	0x0bad0000
   48d08:	0005e5b1 	.word	0x0005e5b1
   48d0c:	0005e5d8 	.word	0x0005e5d8

00048d10 <sdhc_spi_rx>:
};

/* Receives a block of bytes */
static int sdhc_spi_rx(const struct device *spi_dev, struct spi_config *spi_cfg,
	uint8_t *buf, int len)
{
   48d10:	b510      	push	{r4, lr}
	struct spi_buf tx_bufs[] = {
   48d12:	4c09      	ldr	r4, [pc, #36]	; (48d38 <sdhc_spi_rx+0x28>)
{
   48d14:	b088      	sub	sp, #32
	struct spi_buf tx_bufs[] = {
   48d16:	e9cd 4300 	strd	r4, r3, [sp]
			.buf = (uint8_t *)sdhc_ones,
			.len = len
		}
	};

	const struct spi_buf_set tx = {
   48d1a:	2401      	movs	r4, #1
		.buffers = tx_bufs,
		.count = 1,
	};

	struct spi_buf rx_bufs[] = {
   48d1c:	9305      	str	r3, [sp, #20]
			.buf = buf,
			.len = len
		}
	};

	const struct spi_buf_set rx = {
   48d1e:	ab04      	add	r3, sp, #16
	struct spi_buf rx_bufs[] = {
   48d20:	e9cd 4203 	strd	r4, r2, [sp, #12]
	const struct spi_buf_set rx = {
   48d24:	e9cd 3406 	strd	r3, r4, [sp, #24]
		.buffers = rx_bufs,
		.count = 1,
	};

	return spi_transceive(spi_dev, spi_cfg, &tx, &rx);
   48d28:	aa02      	add	r2, sp, #8
   48d2a:	ab06      	add	r3, sp, #24
	const struct spi_buf_set tx = {
   48d2c:	f8cd d008 	str.w	sp, [sp, #8]
	return spi_transceive(spi_dev, spi_cfg, &tx, &rx);
   48d30:	f00d ff34 	bl	56b9c <spi_transceive>
}
   48d34:	b008      	add	sp, #32
   48d36:	bd10      	pop	{r4, pc}
   48d38:	0005e66d 	.word	0x0005e66d

00048d3c <sdhc_spi_reset>:
static int sdhc_spi_reset(const struct device *dev)
{
	struct sdhc_spi_data *data = dev->data;

	/* Reset host I/O */
	data->spi_cfg->frequency = SDMMC_CLOCK_400KHZ;
   48d3c:	6903      	ldr	r3, [r0, #16]
   48d3e:	4a02      	ldr	r2, [pc, #8]	; (48d48 <sdhc_spi_reset+0xc>)
   48d40:	685b      	ldr	r3, [r3, #4]
	return 0;
}
   48d42:	2000      	movs	r0, #0
	data->spi_cfg->frequency = SDMMC_CLOCK_400KHZ;
   48d44:	601a      	str	r2, [r3, #0]
}
   48d46:	4770      	bx	lr
   48d48:	00061a80 	.word	0x00061a80

00048d4c <sdhc_spi_get_host_props>:
{
   48d4c:	460b      	mov	r3, r1
   48d4e:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
   48d50:	2224      	movs	r2, #36	; 0x24
	const struct sdhc_spi_config *cfg = dev->config;
   48d52:	6844      	ldr	r4, [r0, #4]
   48d54:	2100      	movs	r1, #0
   48d56:	4618      	mov	r0, r3
   48d58:	f012 f8fe 	bl	5af58 <memset>
	props->f_min = SDMMC_CLOCK_400KHZ;
   48d5c:	4a07      	ldr	r2, [pc, #28]	; (48d7c <sdhc_spi_get_host_props+0x30>)
   48d5e:	6042      	str	r2, [r0, #4]
	props->f_max = cfg->spi_max_freq;
   48d60:	68e2      	ldr	r2, [r4, #12]
   48d62:	6002      	str	r2, [r0, #0]
	props->power_delay = 1000; /* SPI always needs 1ms power delay */
   48d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48d68:	6082      	str	r2, [r0, #8]
	props->host_caps.vol_330_support = true;
   48d6a:	7b82      	ldrb	r2, [r0, #14]
   48d6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   48d70:	7382      	strb	r2, [r0, #14]
	props->is_spi = true;
   48d72:	2201      	movs	r2, #1
   48d74:	f880 2020 	strb.w	r2, [r0, #32]
}
   48d78:	2000      	movs	r0, #0
   48d7a:	bd10      	pop	{r4, pc}
   48d7c:	00061a80 	.word	0x00061a80

00048d80 <sdhc_skip.constprop.0>:
static int sdhc_skip(const struct device *dev, uint8_t skip_val)
   48d80:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t retries = SD_SPI_SKIP_RETRIES;
   48d82:	4c0c      	ldr	r4, [pc, #48]	; (48db4 <sdhc_skip.constprop.0+0x34>)
	const struct sdhc_spi_config *config = dev->config;
   48d84:	6845      	ldr	r5, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   48d86:	6906      	ldr	r6, [r0, #16]
		ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg,
   48d88:	2301      	movs	r3, #1
   48d8a:	6871      	ldr	r1, [r6, #4]
   48d8c:	6828      	ldr	r0, [r5, #0]
   48d8e:	f10d 0207 	add.w	r2, sp, #7
   48d92:	f7ff ffbd 	bl	48d10 <sdhc_spi_rx>
		if (ret) {
   48d96:	b928      	cbnz	r0, 48da4 <sdhc_skip.constprop.0+0x24>
	} while (buf == skip_val && retries--);
   48d98:	f89d 0007 	ldrb.w	r0, [sp, #7]
   48d9c:	28ff      	cmp	r0, #255	; 0xff
   48d9e:	d103      	bne.n	48da8 <sdhc_skip.constprop.0+0x28>
   48da0:	3c01      	subs	r4, #1
   48da2:	d2f1      	bcs.n	48d88 <sdhc_skip.constprop.0+0x8>
}
   48da4:	b002      	add	sp, #8
   48da6:	bd70      	pop	{r4, r5, r6, pc}
	if (retries == 0) {
   48da8:	2c00      	cmp	r4, #0
   48daa:	d1fb      	bne.n	48da4 <sdhc_skip.constprop.0+0x24>
		return -ETIMEDOUT;
   48dac:	f06f 0073 	mvn.w	r0, #115	; 0x73
   48db0:	e7f8      	b.n	48da4 <sdhc_skip.constprop.0+0x24>
   48db2:	bf00      	nop
   48db4:	000f4240 	.word	0x000f4240

00048db8 <sdhc_spi_set_io>:
{
   48db8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct sdhc_spi_data *data = dev->data;
   48dbc:	6904      	ldr	r4, [r0, #16]
	if (ios->clock != data->spi_cfg->frequency) {
   48dbe:	680b      	ldr	r3, [r1, #0]
{
   48dc0:	460e      	mov	r6, r1
	if (ios->clock != data->spi_cfg->frequency) {
   48dc2:	6861      	ldr	r1, [r4, #4]
	const struct sdhc_spi_config *cfg = dev->config;
   48dc4:	6847      	ldr	r7, [r0, #4]
	if (ios->clock != data->spi_cfg->frequency) {
   48dc6:	680a      	ldr	r2, [r1, #0]
   48dc8:	4293      	cmp	r3, r2
   48dca:	d016      	beq.n	48dfa <sdhc_spi_set_io+0x42>
		if (ios->clock > cfg->spi_max_freq) {
   48dcc:	68fa      	ldr	r2, [r7, #12]
   48dce:	4293      	cmp	r3, r2
   48dd0:	d904      	bls.n	48ddc <sdhc_spi_set_io+0x24>
			return -ENOTSUP;
   48dd2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   48dd6:	b004      	add	sp, #16
   48dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ios->clock != 0) {
   48ddc:	b16b      	cbz	r3, 48dfa <sdhc_spi_set_io+0x42>
			if (data->spi_cfg == &data->cfg_a) {
   48dde:	f104 0508 	add.w	r5, r4, #8
   48de2:	42a9      	cmp	r1, r5
				memcpy(&data->cfg_b, &data->cfg_a,
   48de4:	f104 0214 	add.w	r2, r4, #20
			if (data->spi_cfg == &data->cfg_a) {
   48de8:	d135      	bne.n	48e56 <sdhc_spi_set_io+0x9e>
				data->cfg_a.frequency = ios->clock;
   48dea:	60a3      	str	r3, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   48dec:	680b      	ldr	r3, [r1, #0]
   48dee:	6163      	str	r3, [r4, #20]
   48df0:	684b      	ldr	r3, [r1, #4]
   48df2:	6053      	str	r3, [r2, #4]
   48df4:	688b      	ldr	r3, [r1, #8]
   48df6:	6093      	str	r3, [r2, #8]
				data->spi_cfg = &data->cfg_b;
   48df8:	6062      	str	r2, [r4, #4]
	if (ios->bus_mode != SDHC_BUSMODE_PUSHPULL) {
   48dfa:	7933      	ldrb	r3, [r6, #4]
   48dfc:	2b02      	cmp	r3, #2
   48dfe:	d1e8      	bne.n	48dd2 <sdhc_spi_set_io+0x1a>
	if (data->power_mode != ios->power_mode) {
   48e00:	7973      	ldrb	r3, [r6, #5]
   48e02:	7822      	ldrb	r2, [r4, #0]
   48e04:	429a      	cmp	r2, r3
   48e06:	d040      	beq.n	48e8a <sdhc_spi_set_io+0xd2>
		if (ios->power_mode == SDHC_POWER_ON) {
   48e08:	2b02      	cmp	r3, #2
   48e0a:	d139      	bne.n	48e80 <sdhc_spi_set_io+0xc8>
	struct sdhc_spi_data *data = dev->data;
   48e0c:	6902      	ldr	r2, [r0, #16]
	const struct sdhc_spi_config *config = dev->config;
   48e0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_config *spi_cfg = data->spi_cfg;
   48e12:	6855      	ldr	r5, [r2, #4]
	if (spi_cfg->frequency == 0) {
   48e14:	682b      	ldr	r3, [r5, #0]
   48e16:	b90b      	cbnz	r3, 48e1c <sdhc_spi_set_io+0x64>
		spi_cfg->frequency = SDMMC_CLOCK_400KHZ;
   48e18:	4b26      	ldr	r3, [pc, #152]	; (48eb4 <sdhc_spi_set_io+0xfc>)
   48e1a:	602b      	str	r3, [r5, #0]
	spi_cfg->operation |= SPI_CS_ACTIVE_HIGH;
   48e1c:	88ab      	ldrh	r3, [r5, #4]
	ret = sdhc_spi_rx(config->spi_dev, spi_cfg, data->scratch, 10);
   48e1e:	4629      	mov	r1, r5
	spi_cfg->operation |= SPI_CS_ACTIVE_HIGH;
   48e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   48e24:	80ab      	strh	r3, [r5, #4]
	ret = sdhc_spi_rx(config->spi_dev, spi_cfg, data->scratch, 10);
   48e26:	f8d8 0000 	ldr.w	r0, [r8]
   48e2a:	230a      	movs	r3, #10
   48e2c:	3220      	adds	r2, #32
   48e2e:	f7ff ff6f 	bl	48d10 <sdhc_spi_rx>
	if (ret != 0) {
   48e32:	b1c8      	cbz	r0, 48e68 <sdhc_spi_set_io+0xb0>
		spi_cfg->operation &= ~SPI_CS_ACTIVE_HIGH;
   48e34:	88ab      	ldrh	r3, [r5, #4]
   48e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   48e3a:	80ab      	strh	r3, [r5, #4]
				LOG_ERR("Card SCLK init sequence failed");
   48e3c:	4b1e      	ldr	r3, [pc, #120]	; (48eb8 <sdhc_spi_set_io+0x100>)
   48e3e:	2201      	movs	r2, #1
   48e40:	9302      	str	r3, [sp, #8]
   48e42:	2300      	movs	r3, #0
   48e44:	491d      	ldr	r1, [pc, #116]	; (48ebc <sdhc_spi_set_io+0x104>)
   48e46:	4618      	mov	r0, r3
   48e48:	e9cd 3300 	strd	r3, r3, [sp]
   48e4c:	f00d fed7 	bl	56bfe <z_log_msg_runtime_create.constprop.0>
				return -EIO;
   48e50:	f06f 0004 	mvn.w	r0, #4
   48e54:	e7bf      	b.n	48dd6 <sdhc_spi_set_io+0x1e>
				data->cfg_b.frequency = ios->clock;
   48e56:	6163      	str	r3, [r4, #20]
   48e58:	6963      	ldr	r3, [r4, #20]
   48e5a:	60a3      	str	r3, [r4, #8]
   48e5c:	6853      	ldr	r3, [r2, #4]
   48e5e:	606b      	str	r3, [r5, #4]
   48e60:	6893      	ldr	r3, [r2, #8]
   48e62:	60ab      	str	r3, [r5, #8]
				data->spi_cfg = &data->cfg_a;
   48e64:	6065      	str	r5, [r4, #4]
   48e66:	e7c8      	b.n	48dfa <sdhc_spi_set_io+0x42>
	ret = spi_release(config->spi_dev, spi_cfg);
   48e68:	f8d8 0000 	ldr.w	r0, [r8]
				     const struct spi_config *config)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->release(dev, config);
   48e6c:	6883      	ldr	r3, [r0, #8]
   48e6e:	4629      	mov	r1, r5
   48e70:	685b      	ldr	r3, [r3, #4]
   48e72:	4798      	blx	r3
	spi_cfg->operation &= ~SPI_CS_ACTIVE_HIGH;
   48e74:	88ab      	ldrh	r3, [r5, #4]
   48e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   48e7a:	80ab      	strh	r3, [r5, #4]
			if (sdhc_spi_init_card(dev) != 0) {
   48e7c:	2800      	cmp	r0, #0
   48e7e:	d1dd      	bne.n	48e3c <sdhc_spi_set_io+0x84>
		if (cfg->pwr_gpio.port) {
   48e80:	687a      	ldr	r2, [r7, #4]
			if (ios->power_mode == SDHC_POWER_ON) {
   48e82:	7973      	ldrb	r3, [r6, #5]
		if (cfg->pwr_gpio.port) {
   48e84:	b94a      	cbnz	r2, 48e9a <sdhc_spi_set_io+0xe2>
		data->power_mode = ios->power_mode;
   48e86:	7973      	ldrb	r3, [r6, #5]
   48e88:	7023      	strb	r3, [r4, #0]
	if (ios->bus_width != SDHC_BUS_WIDTH1BIT) {
   48e8a:	79b3      	ldrb	r3, [r6, #6]
   48e8c:	2b01      	cmp	r3, #1
   48e8e:	d1a0      	bne.n	48dd2 <sdhc_spi_set_io+0x1a>
	if (ios->signal_voltage != SD_VOL_3_3_V) {
   48e90:	7a73      	ldrb	r3, [r6, #9]
   48e92:	2b01      	cmp	r3, #1
   48e94:	d19d      	bne.n	48dd2 <sdhc_spi_set_io+0x1a>
	return 0;
   48e96:	2000      	movs	r0, #0
   48e98:	e79d      	b.n	48dd6 <sdhc_spi_set_io+0x1e>
			if (ios->power_mode == SDHC_POWER_ON) {
   48e9a:	2b02      	cmp	r3, #2
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 1)) {
   48e9c:	f107 0004 	add.w	r0, r7, #4
			if (ios->power_mode == SDHC_POWER_ON) {
   48ea0:	d105      	bne.n	48eae <sdhc_spi_set_io+0xf6>
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 1)) {
   48ea2:	2101      	movs	r1, #1
   48ea4:	f00d fe66 	bl	56b74 <gpio_pin_set_dt>
   48ea8:	2800      	cmp	r0, #0
   48eaa:	d0ec      	beq.n	48e86 <sdhc_spi_set_io+0xce>
   48eac:	e7d0      	b.n	48e50 <sdhc_spi_set_io+0x98>
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 0)) {
   48eae:	2100      	movs	r1, #0
   48eb0:	e7f8      	b.n	48ea4 <sdhc_spi_set_io+0xec>
   48eb2:	bf00      	nop
   48eb4:	00061a80 	.word	0x00061a80
   48eb8:	0005e615 	.word	0x0005e615
   48ebc:	0005c034 	.word	0x0005c034

00048ec0 <sdhc_spi_request>:
{
   48ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sdhc_spi_config *config = dev->config;
   48ec4:	6843      	ldr	r3, [r0, #4]
{
   48ec6:	b09f      	sub	sp, #124	; 0x7c
	const struct sdhc_spi_config *config = dev->config;
   48ec8:	9306      	str	r3, [sp, #24]
	struct sdhc_spi_data *dev_data = dev->data;
   48eca:	6903      	ldr	r3, [r0, #16]
	int ret, retries = cmd->retries;
   48ecc:	f8d1 a01c 	ldr.w	sl, [r1, #28]
{
   48ed0:	4605      	mov	r5, r0
   48ed2:	4689      	mov	r9, r1
   48ed4:	4616      	mov	r6, r2
	const struct sdhc_command stop_cmd = {
   48ed6:	2100      	movs	r1, #0
   48ed8:	2214      	movs	r2, #20
   48eda:	a816      	add	r0, sp, #88	; 0x58
	struct sdhc_spi_data *dev_data = dev->data;
   48edc:	9307      	str	r3, [sp, #28]
	const struct sdhc_command stop_cmd = {
   48ede:	f012 f83b 	bl	5af58 <memset>
   48ee2:	230c      	movs	r3, #12
   48ee4:	2120      	movs	r1, #32
   48ee6:	9315      	str	r3, [sp, #84]	; 0x54
   48ee8:	2301      	movs	r3, #1
   48eea:	e9cd 131b 	strd	r1, r3, [sp, #108]	; 0x6c
   48eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   48ef2:	931d      	str	r3, [sp, #116]	; 0x74
	if (data == NULL) {
   48ef4:	2e00      	cmp	r6, #0
   48ef6:	d05c      	beq.n	48fb2 <sdhc_spi_request+0xf2>
			ret = sdhc_spi_send_cmd(dev, cmd, true);
   48ef8:	2201      	movs	r2, #1
   48efa:	4649      	mov	r1, r9
   48efc:	4628      	mov	r0, r5
   48efe:	f00d fec9 	bl	56c94 <sdhc_spi_send_cmd>
			if (ret) {
   48f02:	4604      	mov	r4, r0
   48f04:	2800      	cmp	r0, #0
   48f06:	f040 8090 	bne.w	4902a <sdhc_spi_request+0x16a>
			if ((cmd->opcode == SD_WRITE_SINGLE_BLOCK) ||
   48f0a:	f8d9 2000 	ldr.w	r2, [r9]
	const struct sdhc_spi_config *config = dev->config;
   48f0e:	686b      	ldr	r3, [r5, #4]
			if ((cmd->opcode == SD_WRITE_SINGLE_BLOCK) ||
   48f10:	3a18      	subs	r2, #24
   48f12:	2a01      	cmp	r2, #1
	const struct sdhc_spi_config *config = dev->config;
   48f14:	9304      	str	r3, [sp, #16]
	struct sdhc_spi_data *dev_data = dev->data;
   48f16:	f8d5 b010 	ldr.w	fp, [r5, #16]
	uint8_t *write_location = data->data, crc[SD_SPI_CRC16_SIZE];
   48f1a:	6937      	ldr	r7, [r6, #16]
			.len = data->block_size,
   48f1c:	e9d6 3801 	ldrd	r3, r8, [r6, #4]
			if ((cmd->opcode == SD_WRITE_SINGLE_BLOCK) ||
   48f20:	f200 809e 	bhi.w	49060 <sdhc_spi_request+0x1a0>
	struct spi_buf tx_bufs[] = {
   48f24:	9312      	str	r3, [sp, #72]	; 0x48
   48f26:	ab0b      	add	r3, sp, #44	; 0x2c
   48f28:	9313      	str	r3, [sp, #76]	; 0x4c
   48f2a:	2302      	movs	r3, #2
   48f2c:	9314      	str	r3, [sp, #80]	; 0x50
	struct spi_buf_set tx = {
   48f2e:	ab0f      	add	r3, sp, #60	; 0x3c
   48f30:	930d      	str	r3, [sp, #52]	; 0x34
   48f32:	2303      	movs	r3, #3
	struct spi_buf tx_bufs[] = {
   48f34:	aa08      	add	r2, sp, #32
   48f36:	920f      	str	r2, [sp, #60]	; 0x3c
   48f38:	2201      	movs	r2, #1
		token = SD_SPI_TOKEN_MULTI_WRITE;
   48f3a:	f1b8 0f02 	cmp.w	r8, #2
	struct spi_buf_set tx = {
   48f3e:	930e      	str	r3, [sp, #56]	; 0x38
		token = SD_SPI_TOKEN_MULTI_WRITE;
   48f40:	bf34      	ite	cc
   48f42:	23fe      	movcc	r3, #254	; 0xfe
   48f44:	23fc      	movcs	r3, #252	; 0xfc
	struct spi_buf tx_bufs[] = {
   48f46:	e9cd 2710 	strd	r2, r7, [sp, #64]	; 0x40
   48f4a:	f88d 3020 	strb.w	r3, [sp, #32]
	while (remaining--) {
   48f4e:	f1b8 0f00 	cmp.w	r8, #0
   48f52:	d13f      	bne.n	48fd4 <sdhc_spi_request+0x114>
	if (data->blocks > 1) {
   48f54:	68b3      	ldr	r3, [r6, #8]
   48f56:	2b01      	cmp	r3, #1
   48f58:	d917      	bls.n	48f8a <sdhc_spi_request+0xca>
		token = SD_SPI_TOKEN_STOP_TRAN;
   48f5a:	23fd      	movs	r3, #253	; 0xfd
   48f5c:	f88d 3020 	strb.w	r3, [sp, #32]
		tx.count = 1;
   48f60:	2301      	movs	r3, #1
	return spi_transceive(dev, config, tx_bufs, NULL);
   48f62:	9804      	ldr	r0, [sp, #16]
   48f64:	930e      	str	r3, [sp, #56]	; 0x38
   48f66:	f8db 1004 	ldr.w	r1, [fp, #4]
   48f6a:	4643      	mov	r3, r8
   48f6c:	6800      	ldr	r0, [r0, #0]
   48f6e:	aa0d      	add	r2, sp, #52	; 0x34
   48f70:	f00d fe14 	bl	56b9c <spi_transceive>
		if (ret) {
   48f74:	4604      	mov	r4, r0
   48f76:	2800      	cmp	r0, #0
   48f78:	d16c      	bne.n	49054 <sdhc_spi_request+0x194>
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
   48f7a:	4642      	mov	r2, r8
   48f7c:	4628      	mov	r0, r5
   48f7e:	6971      	ldr	r1, [r6, #20]
   48f80:	f00d fe4d 	bl	56c1e <sdhc_spi_wait_unbusy>
		if (ret) {
   48f84:	4604      	mov	r4, r0
			if (ret || (cmd->opcode == SD_READ_MULTIPLE_BLOCK)) {
   48f86:	2c00      	cmp	r4, #0
   48f88:	d164      	bne.n	49054 <sdhc_spi_request+0x194>
   48f8a:	f8d9 3000 	ldr.w	r3, [r9]
   48f8e:	2b12      	cmp	r3, #18
   48f90:	d104      	bne.n	48f9c <sdhc_spi_request+0xdc>
				sdhc_spi_send_cmd(dev,
   48f92:	2200      	movs	r2, #0
   48f94:	4628      	mov	r0, r5
   48f96:	a915      	add	r1, sp, #84	; 0x54
   48f98:	f00d fe7c 	bl	56c94 <sdhc_spi_send_cmd>
	return spi_release(config->spi_dev, dev_data->spi_cfg);
   48f9c:	9b06      	ldr	r3, [sp, #24]
   48f9e:	6818      	ldr	r0, [r3, #0]
   48fa0:	9b07      	ldr	r3, [sp, #28]
   48fa2:	6859      	ldr	r1, [r3, #4]
	return api->release(dev, config);
   48fa4:	6883      	ldr	r3, [r0, #8]
   48fa6:	685b      	ldr	r3, [r3, #4]
}
   48fa8:	b01f      	add	sp, #124	; 0x7c
   48faa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   48fae:	4718      	bx	r3
		} while ((ret != 0) && (retries-- > 0));
   48fb0:	469a      	mov	sl, r3
			ret = sdhc_spi_send_cmd(dev, cmd, false);
   48fb2:	2200      	movs	r2, #0
   48fb4:	4649      	mov	r1, r9
   48fb6:	4628      	mov	r0, r5
   48fb8:	f00d fe6c 	bl	56c94 <sdhc_spi_send_cmd>
		} while ((ret != 0) && (retries-- > 0));
   48fbc:	4604      	mov	r4, r0
   48fbe:	2800      	cmp	r0, #0
   48fc0:	d0ec      	beq.n	48f9c <sdhc_spi_request+0xdc>
   48fc2:	f1ba 0f00 	cmp.w	sl, #0
   48fc6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   48fca:	dcf1      	bgt.n	48fb0 <sdhc_spi_request+0xf0>
}
   48fcc:	4620      	mov	r0, r4
   48fce:	b01f      	add	sp, #124	; 0x7c
   48fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_put_be16(crc16_itu_t(0, write_location, data->block_size),
   48fd4:	4639      	mov	r1, r7
   48fd6:	6872      	ldr	r2, [r6, #4]
   48fd8:	2000      	movs	r0, #0
   48fda:	f00c fb99 	bl	55710 <crc16_itu_t>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val >> 8;
   48fde:	ba40      	rev16	r0, r0
   48fe0:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
	return spi_transceive(dev, config, tx_bufs, NULL);
   48fe4:	9804      	ldr	r0, [sp, #16]
   48fe6:	2300      	movs	r3, #0
   48fe8:	f8db 1004 	ldr.w	r1, [fp, #4]
   48fec:	6800      	ldr	r0, [r0, #0]
   48fee:	aa0d      	add	r2, sp, #52	; 0x34
   48ff0:	f00d fdd4 	bl	56b9c <spi_transceive>
		if (ret) {
   48ff4:	4604      	mov	r4, r0
   48ff6:	bb68      	cbnz	r0, 49054 <sdhc_spi_request+0x194>
		ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
   48ff8:	9804      	ldr	r0, [sp, #16]
   48ffa:	2301      	movs	r3, #1
   48ffc:	f8db 1004 	ldr.w	r1, [fp, #4]
   49000:	6800      	ldr	r0, [r0, #0]
   49002:	aa09      	add	r2, sp, #36	; 0x24
   49004:	f7ff fe84 	bl	48d10 <sdhc_spi_rx>
		if (ret) {
   49008:	4604      	mov	r4, r0
   4900a:	bb18      	cbnz	r0, 49054 <sdhc_spi_request+0x194>
		if ((resp & 0xF) != SD_SPI_RESPONSE_ACCEPTED) {
   4900c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   49010:	f003 030f 	and.w	r3, r3, #15
   49014:	2b05      	cmp	r3, #5
   49016:	d00f      	beq.n	49038 <sdhc_spi_request+0x178>
			if ((resp & 0xF) == SD_SPI_RESPONSE_CRC_ERR) {
   49018:	2b0b      	cmp	r3, #11
   4901a:	d13a      	bne.n	49092 <sdhc_spi_request+0x1d2>
				sdhc_spi_send_cmd(dev,
   4901c:	4602      	mov	r2, r0
   4901e:	a915      	add	r1, sp, #84	; 0x54
   49020:	4628      	mov	r0, r5
   49022:	f00d fe37 	bl	56c94 <sdhc_spi_send_cmd>
   49026:	f06f 0489 	mvn.w	r4, #137	; 0x89
		} while ((ret != 0) && (retries-- > 0));
   4902a:	f1ba 0f00 	cmp.w	sl, #0
   4902e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   49032:	ddcb      	ble.n	48fcc <sdhc_spi_request+0x10c>
   49034:	469a      	mov	sl, r3
   49036:	e75f      	b.n	48ef8 <sdhc_spi_request+0x38>
		write_location += data->block_size;
   49038:	6873      	ldr	r3, [r6, #4]
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
   4903a:	4602      	mov	r2, r0
		write_location += data->block_size;
   4903c:	441f      	add	r7, r3
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
   4903e:	4628      	mov	r0, r5
   49040:	6971      	ldr	r1, [r6, #20]
		tx_bufs[1].buf = write_location;
   49042:	9711      	str	r7, [sp, #68]	; 0x44
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
   49044:	f00d fdeb 	bl	56c1e <sdhc_spi_wait_unbusy>
		if (ret) {
   49048:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   4904c:	4604      	mov	r4, r0
   4904e:	2800      	cmp	r0, #0
   49050:	f43f af7d 	beq.w	48f4e <sdhc_spi_request+0x8e>
				sdhc_spi_send_cmd(dev,
   49054:	2200      	movs	r2, #0
   49056:	4628      	mov	r0, r5
   49058:	a915      	add	r1, sp, #84	; 0x54
   4905a:	f00d fe1b 	bl	56c94 <sdhc_spi_send_cmd>
		} while ((ret != 0) && (retries-- > 0));
   4905e:	e7e4      	b.n	4902a <sdhc_spi_request+0x16a>
	const struct spi_buf tx_bufs[] = {
   49060:	4a39      	ldr	r2, [pc, #228]	; (49148 <sdhc_spi_request+0x288>)
	const struct spi_buf_set rx = {
   49062:	a90d      	add	r1, sp, #52	; 0x34
	const struct spi_buf tx_bufs[] = {
   49064:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	const struct spi_buf_set tx = {
   49068:	aa09      	add	r2, sp, #36	; 0x24
   4906a:	920b      	str	r2, [sp, #44]	; 0x2c
   4906c:	2201      	movs	r2, #1
	if (data->block_size > 512) {
   4906e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	struct spi_buf rx_bufs[] = {
   49072:	e9cd 270c 	strd	r2, r7, [sp, #48]	; 0x30
	const struct spi_buf_set rx = {
   49076:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
	struct spi_buf rx_bufs[] = {
   4907a:	930e      	str	r3, [sp, #56]	; 0x38
	if (data->block_size > 512) {
   4907c:	d902      	bls.n	49084 <sdhc_spi_request+0x1c4>
		return -ENOTSUP;
   4907e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   49082:	e7e7      	b.n	49054 <sdhc_spi_request+0x194>
	ret = sdhc_skip(dev, 0xff);
   49084:	4628      	mov	r0, r5
   49086:	f7ff fe7b 	bl	48d80 <sdhc_skip.constprop.0>
	if (ret < 0) {
   4908a:	1e04      	subs	r4, r0, #0
   4908c:	dbe2      	blt.n	49054 <sdhc_spi_request+0x194>
	if (ret != SD_SPI_TOKEN_SINGLE)	{
   4908e:	2cfe      	cmp	r4, #254	; 0xfe
   49090:	d053      	beq.n	4913a <sdhc_spi_request+0x27a>
		return -EIO;
   49092:	f06f 0404 	mvn.w	r4, #4
   49096:	e7dd      	b.n	49054 <sdhc_spi_request+0x194>
		ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
   49098:	9804      	ldr	r0, [sp, #16]
   4909a:	2303      	movs	r3, #3
   4909c:	f8db 1004 	ldr.w	r1, [fp, #4]
   490a0:	aa08      	add	r2, sp, #32
   490a2:	6800      	ldr	r0, [r0, #0]
   490a4:	f7ff fe34 	bl	48d10 <sdhc_spi_rx>
		if (crc16_itu_t(0, read_location, data->block_size) !=
   490a8:	4639      	mov	r1, r7
		ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
   490aa:	4604      	mov	r4, r0
		if (crc16_itu_t(0, read_location, data->block_size) !=
   490ac:	6872      	ldr	r2, [r6, #4]
   490ae:	2000      	movs	r0, #0
   490b0:	f00c fb2e 	bl	55710 <crc16_itu_t>
   490b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   490b8:	ba5b      	rev16	r3, r3
   490ba:	b29b      	uxth	r3, r3
   490bc:	4283      	cmp	r3, r0
   490be:	d00c      	beq.n	490da <sdhc_spi_request+0x21a>
			LOG_ERR("Bad data CRC");
   490c0:	4b22      	ldr	r3, [pc, #136]	; (4914c <sdhc_spi_request+0x28c>)
   490c2:	2201      	movs	r2, #1
   490c4:	9302      	str	r3, [sp, #8]
   490c6:	2300      	movs	r3, #0
   490c8:	4921      	ldr	r1, [pc, #132]	; (49150 <sdhc_spi_request+0x290>)
   490ca:	4618      	mov	r0, r3
   490cc:	e9cd 3300 	strd	r3, r3, [sp]
   490d0:	f00d fd95 	bl	56bfe <z_log_msg_runtime_create.constprop.0>
			return -EILSEQ;
   490d4:	f06f 0489 	mvn.w	r4, #137	; 0x89
   490d8:	e7bc      	b.n	49054 <sdhc_spi_request+0x194>
		read_location += data->block_size;
   490da:	6873      	ldr	r3, [r6, #4]
   490dc:	441f      	add	r7, r3
		if (remaining) {
   490de:	9b05      	ldr	r3, [sp, #20]
		rx_bufs[0].buf = read_location;
   490e0:	970d      	str	r7, [sp, #52]	; 0x34
		if (remaining) {
   490e2:	2b00      	cmp	r3, #0
   490e4:	f43f af4f 	beq.w	48f86 <sdhc_spi_request+0xc6>
			ret = sdhc_skip(dev, 0xff);
   490e8:	4628      	mov	r0, r5
   490ea:	f7ff fe49 	bl	48d80 <sdhc_skip.constprop.0>
			if (ret != SD_SPI_TOKEN_SINGLE) {
   490ee:	28fe      	cmp	r0, #254	; 0xfe
   490f0:	d00a      	beq.n	49108 <sdhc_spi_request+0x248>
				LOG_ERR("Bad token");
   490f2:	4b18      	ldr	r3, [pc, #96]	; (49154 <sdhc_spi_request+0x294>)
   490f4:	2201      	movs	r2, #1
   490f6:	9302      	str	r3, [sp, #8]
   490f8:	2300      	movs	r3, #0
   490fa:	4915      	ldr	r1, [pc, #84]	; (49150 <sdhc_spi_request+0x290>)
   490fc:	4618      	mov	r0, r3
   490fe:	e9cd 3300 	strd	r3, r3, [sp]
   49102:	f00d fd7c 	bl	56bfe <z_log_msg_runtime_create.constprop.0>
			if (ret || (cmd->opcode == SD_READ_MULTIPLE_BLOCK)) {
   49106:	e7c4      	b.n	49092 <sdhc_spi_request+0x1d2>
	while (remaining--) {
   49108:	9b05      	ldr	r3, [sp, #20]
   4910a:	3b01      	subs	r3, #1
   4910c:	9305      	str	r3, [sp, #20]
		ret = spi_transceive(config->spi_dev,
   4910e:	9804      	ldr	r0, [sp, #16]
   49110:	f8db 1004 	ldr.w	r1, [fp, #4]
   49114:	6800      	ldr	r0, [r0, #0]
   49116:	ab0f      	add	r3, sp, #60	; 0x3c
   49118:	aa0b      	add	r2, sp, #44	; 0x2c
   4911a:	f00d fd3f 	bl	56b9c <spi_transceive>
		if (ret) {
   4911e:	4604      	mov	r4, r0
   49120:	2800      	cmp	r0, #0
   49122:	d0b9      	beq.n	49098 <sdhc_spi_request+0x1d8>
			LOG_ERR("Data write failed");
   49124:	4b0c      	ldr	r3, [pc, #48]	; (49158 <sdhc_spi_request+0x298>)
   49126:	2201      	movs	r2, #1
   49128:	9302      	str	r3, [sp, #8]
   4912a:	2300      	movs	r3, #0
   4912c:	4908      	ldr	r1, [pc, #32]	; (49150 <sdhc_spi_request+0x290>)
   4912e:	4618      	mov	r0, r3
   49130:	e9cd 3300 	strd	r3, r3, [sp]
   49134:	f00d fd63 	bl	56bfe <z_log_msg_runtime_create.constprop.0>
			if (ret || (cmd->opcode == SD_READ_MULTIPLE_BLOCK)) {
   49138:	e78c      	b.n	49054 <sdhc_spi_request+0x194>
	while (remaining--) {
   4913a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   4913e:	9305      	str	r3, [sp, #20]
   49140:	f1b8 0f00 	cmp.w	r8, #0
   49144:	d1e3      	bne.n	4910e <sdhc_spi_request+0x24e>
   49146:	e785      	b.n	49054 <sdhc_spi_request+0x194>
   49148:	0005e66d 	.word	0x0005e66d
   4914c:	0005e646 	.word	0x0005e646
   49150:	0005c034 	.word	0x0005c034
   49154:	0005e653 	.word	0x0005e653
   49158:	0005e634 	.word	0x0005e634

0004915c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   4915c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   4915e:	ab0b      	add	r3, sp, #44	; 0x2c
   49160:	9305      	str	r3, [sp, #20]
   49162:	9303      	str	r3, [sp, #12]
   49164:	4b05      	ldr	r3, [pc, #20]	; (4917c <z_log_msg_runtime_create.constprop.0+0x20>)
   49166:	2201      	movs	r2, #1
   49168:	9302      	str	r3, [sp, #8]
   4916a:	2300      	movs	r3, #0
   4916c:	4618      	mov	r0, r3
   4916e:	e9cd 3300 	strd	r3, r3, [sp]
   49172:	f7fc f85d 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   49176:	b007      	add	sp, #28
   49178:	f85d fb04 	ldr.w	pc, [sp], #4
   4917c:	0005e86d 	.word	0x0005e86d

00049180 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   49180:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   49182:	794b      	ldrb	r3, [r1, #5]
   49184:	2b01      	cmp	r3, #1
   49186:	d026      	beq.n	491d6 <uarte_nrfx_configure+0x56>
   49188:	2b03      	cmp	r3, #3
   4918a:	d121      	bne.n	491d0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   4918c:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   4918e:	798b      	ldrb	r3, [r1, #6]
   49190:	2b03      	cmp	r3, #3
   49192:	d11d      	bne.n	491d0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   49194:	79ce      	ldrb	r6, [r1, #7]
   49196:	b10e      	cbz	r6, 4919c <uarte_nrfx_configure+0x1c>
   49198:	2e01      	cmp	r6, #1
   4919a:	d119      	bne.n	491d0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   4919c:	790a      	ldrb	r2, [r1, #4]
   4919e:	b112      	cbz	r2, 491a6 <uarte_nrfx_configure+0x26>
   491a0:	2a02      	cmp	r2, #2
   491a2:	d115      	bne.n	491d0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   491a4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   491a6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   491a8:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   491aa:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   491ae:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   491b0:	d067      	beq.n	49282 <uarte_nrfx_configure+0x102>
   491b2:	d82d      	bhi.n	49210 <uarte_nrfx_configure+0x90>
   491b4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   491b8:	d066      	beq.n	49288 <uarte_nrfx_configure+0x108>
   491ba:	d816      	bhi.n	491ea <uarte_nrfx_configure+0x6a>
   491bc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   491c0:	d064      	beq.n	4928c <uarte_nrfx_configure+0x10c>
   491c2:	d80a      	bhi.n	491da <uarte_nrfx_configure+0x5a>
   491c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   491c8:	d063      	beq.n	49292 <uarte_nrfx_configure+0x112>
   491ca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   491ce:	d063      	beq.n	49298 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   491d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   491d4:	e054      	b.n	49280 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   491d6:	2500      	movs	r5, #0
   491d8:	e7d9      	b.n	4918e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   491da:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   491de:	d05e      	beq.n	4929e <uarte_nrfx_configure+0x11e>
   491e0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   491e4:	d1f4      	bne.n	491d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   491e6:	4b38      	ldr	r3, [pc, #224]	; (492c8 <uarte_nrfx_configure+0x148>)
   491e8:	e03c      	b.n	49264 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   491ea:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   491ee:	d059      	beq.n	492a4 <uarte_nrfx_configure+0x124>
   491f0:	d807      	bhi.n	49202 <uarte_nrfx_configure+0x82>
   491f2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   491f6:	d057      	beq.n	492a8 <uarte_nrfx_configure+0x128>
   491f8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   491fc:	d1e8      	bne.n	491d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   491fe:	4b33      	ldr	r3, [pc, #204]	; (492cc <uarte_nrfx_configure+0x14c>)
   49200:	e030      	b.n	49264 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   49202:	f647 2412 	movw	r4, #31250	; 0x7a12
   49206:	42a3      	cmp	r3, r4
   49208:	d1e2      	bne.n	491d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   4920a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   4920e:	e029      	b.n	49264 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   49210:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   49214:	d04a      	beq.n	492ac <uarte_nrfx_configure+0x12c>
   49216:	d813      	bhi.n	49240 <uarte_nrfx_configure+0xc0>
   49218:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   4921c:	d049      	beq.n	492b2 <uarte_nrfx_configure+0x132>
   4921e:	d809      	bhi.n	49234 <uarte_nrfx_configure+0xb4>
   49220:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   49224:	42a3      	cmp	r3, r4
   49226:	d046      	beq.n	492b6 <uarte_nrfx_configure+0x136>
   49228:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   4922c:	d1d0      	bne.n	491d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   4922e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   49232:	e017      	b.n	49264 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   49234:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   49238:	d1ca      	bne.n	491d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   4923a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   4923e:	e011      	b.n	49264 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   49240:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   49244:	d03a      	beq.n	492bc <uarte_nrfx_configure+0x13c>
   49246:	d808      	bhi.n	4925a <uarte_nrfx_configure+0xda>
   49248:	4c21      	ldr	r4, [pc, #132]	; (492d0 <uarte_nrfx_configure+0x150>)
   4924a:	42a3      	cmp	r3, r4
   4924c:	d039      	beq.n	492c2 <uarte_nrfx_configure+0x142>
   4924e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   49252:	d1bd      	bne.n	491d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   49254:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   49258:	e004      	b.n	49264 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   4925a:	4c1e      	ldr	r4, [pc, #120]	; (492d4 <uarte_nrfx_configure+0x154>)
   4925c:	42a3      	cmp	r3, r4
   4925e:	d1b7      	bne.n	491d0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   49260:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   49264:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   49266:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   4926a:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   4926c:	4335      	orrs	r5, r6
   4926e:	681b      	ldr	r3, [r3, #0]
   49270:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   49272:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   49276:	1d23      	adds	r3, r4, #4
   49278:	c903      	ldmia	r1, {r0, r1}
   4927a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   4927e:	2000      	movs	r0, #0
}
   49280:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   49282:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   49286:	e7ed      	b.n	49264 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   49288:	4b13      	ldr	r3, [pc, #76]	; (492d8 <uarte_nrfx_configure+0x158>)
   4928a:	e7eb      	b.n	49264 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   4928c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   49290:	e7e8      	b.n	49264 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   49292:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   49296:	e7e5      	b.n	49264 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   49298:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   4929c:	e7e2      	b.n	49264 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   4929e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   492a2:	e7df      	b.n	49264 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   492a4:	4b0d      	ldr	r3, [pc, #52]	; (492dc <uarte_nrfx_configure+0x15c>)
   492a6:	e7dd      	b.n	49264 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   492a8:	4b0d      	ldr	r3, [pc, #52]	; (492e0 <uarte_nrfx_configure+0x160>)
   492aa:	e7db      	b.n	49264 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   492ac:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   492b0:	e7d8      	b.n	49264 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   492b2:	4b0c      	ldr	r3, [pc, #48]	; (492e4 <uarte_nrfx_configure+0x164>)
   492b4:	e7d6      	b.n	49264 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   492b6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   492ba:	e7d3      	b.n	49264 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   492bc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   492c0:	e7d0      	b.n	49264 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   492c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   492c6:	e7cd      	b.n	49264 <uarte_nrfx_configure+0xe4>
   492c8:	0013b000 	.word	0x0013b000
   492cc:	004ea000 	.word	0x004ea000
   492d0:	0003d090 	.word	0x0003d090
   492d4:	000f4240 	.word	0x000f4240
   492d8:	00275000 	.word	0x00275000
   492dc:	0075c000 	.word	0x0075c000
   492e0:	003af000 	.word	0x003af000
   492e4:	013a9000 	.word	0x013a9000

000492e8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   492e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   492ec:	4680      	mov	r8, r0
   492ee:	2200      	movs	r2, #0
   492f0:	2101      	movs	r1, #1
   492f2:	2008      	movs	r0, #8
   492f4:	f7fc fda0 	bl	45e38 <z_arm_irq_priority_set>
   492f8:	2008      	movs	r0, #8
   492fa:	f7fc fd6d 	bl	45dd8 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   492fe:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   49300:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   49304:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   49308:	683c      	ldr	r4, [r7, #0]
   4930a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   4930e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   49312:	68f8      	ldr	r0, [r7, #12]
   49314:	f00d ff29 	bl	5716a <pinctrl_apply_state>
	if (err < 0) {
   49318:	1e05      	subs	r5, r0, #0
   4931a:	db1b      	blt.n	49354 <uarte_0_init+0x6c>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   4931c:	4640      	mov	r0, r8
   4931e:	1d31      	adds	r1, r6, #4
   49320:	f7ff ff2e 	bl	49180 <uarte_nrfx_configure>
	if (err) {
   49324:	4605      	mov	r5, r0
   49326:	b9a8      	cbnz	r0, 49354 <uarte_0_init+0x6c>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   49328:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   4932a:	0799      	lsls	r1, r3, #30
   4932c:	d523      	bpl.n	49376 <uarte_0_init+0x8e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   4932e:	f106 001c 	add.w	r0, r6, #28
   49332:	f006 f901 	bl	4f538 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   49336:	4b24      	ldr	r3, [pc, #144]	; (493c8 <uarte_0_init+0xe0>)
   49338:	4298      	cmp	r0, r3
   4933a:	d00f      	beq.n	4935c <uarte_0_init+0x74>
		LOG_ERR("Failed to allocate PPI Channel");
   4933c:	4b23      	ldr	r3, [pc, #140]	; (493cc <uarte_0_init+0xe4>)
   4933e:	4628      	mov	r0, r5
   49340:	e9cd 5301 	strd	r5, r3, [sp, #4]
   49344:	9500      	str	r5, [sp, #0]
   49346:	462b      	mov	r3, r5
   49348:	2201      	movs	r2, #1
   4934a:	4921      	ldr	r1, [pc, #132]	; (493d0 <uarte_0_init+0xe8>)
   4934c:	f7ff ff06 	bl	4915c <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   49350:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   49354:	4628      	mov	r0, r5
   49356:	b004      	add	sp, #16
   49358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   4935c:	7f33      	ldrb	r3, [r6, #28]
   4935e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   49362:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   49366:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   4936a:	2301      	movs	r3, #1
   4936c:	7f32      	ldrb	r2, [r6, #28]
   4936e:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   49370:	4a18      	ldr	r2, [pc, #96]	; (493d4 <uarte_0_init+0xec>)
   49372:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   49376:	2308      	movs	r3, #8
   49378:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   4937c:	7a3b      	ldrb	r3, [r7, #8]
   4937e:	b953      	cbnz	r3, 49396 <uarte_0_init+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   49380:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   49384:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   49388:	69b3      	ldr	r3, [r6, #24]
   4938a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   4938e:	2301      	movs	r3, #1
   49390:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   49394:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   49396:	687b      	ldr	r3, [r7, #4]
   49398:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   4939a:	bf5c      	itt	pl
   4939c:	f44f 7380 	movpl.w	r3, #256	; 0x100
   493a0:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   493a4:	687b      	ldr	r3, [r7, #4]
   493a6:	06db      	lsls	r3, r3, #27
   493a8:	bf44      	itt	mi
   493aa:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   493ae:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   493b2:	6973      	ldr	r3, [r6, #20]
   493b4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   493b8:	2300      	movs	r3, #0
   493ba:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   493be:	2301      	movs	r3, #1
   493c0:	60a3      	str	r3, [r4, #8]
   493c2:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   493c4:	e7c6      	b.n	49354 <uarte_0_init+0x6c>
   493c6:	bf00      	nop
   493c8:	0bad0000 	.word	0x0bad0000
   493cc:	0005e86d 	.word	0x0005e86d
   493d0:	0005c04c 	.word	0x0005c04c
   493d4:	40017000 	.word	0x40017000

000493d8 <uarte_nrfx_poll_out>:
{
   493d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   493da:	4604      	mov	r4, r0
   493dc:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   493de:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   493e0:	f011 fa4a 	bl	5a878 <k_is_in_isr>
   493e4:	b9b0      	cbnz	r0, 49414 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   493e6:	4b21      	ldr	r3, [pc, #132]	; (4946c <uarte_nrfx_poll_out+0x94>)
   493e8:	781b      	ldrb	r3, [r3, #0]
   493ea:	b19b      	cbz	r3, 49414 <uarte_nrfx_poll_out+0x3c>
{
   493ec:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   493ee:	6860      	ldr	r0, [r4, #4]
   493f0:	f00d fe11 	bl	57016 <is_tx_ready.isra.0>
   493f4:	bb00      	cbnz	r0, 49438 <uarte_nrfx_poll_out+0x60>
   493f6:	2001      	movs	r0, #1
   493f8:	f010 fa74 	bl	598e4 <nrfx_busy_wait>
   493fc:	3e01      	subs	r6, #1
   493fe:	d1f6      	bne.n	493ee <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   49400:	2100      	movs	r1, #0
   49402:	2021      	movs	r0, #33	; 0x21
   49404:	f009 fd82 	bl	52f0c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   49408:	e7f0      	b.n	493ec <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   4940a:	f381 8811 	msr	BASEPRI, r1
   4940e:	f3bf 8f6f 	isb	sy
}
   49412:	e7f5      	b.n	49400 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   49414:	f04f 0320 	mov.w	r3, #32
   49418:	f3ef 8111 	mrs	r1, BASEPRI
   4941c:	f383 8812 	msr	BASEPRI_MAX, r3
   49420:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   49424:	6860      	ldr	r0, [r4, #4]
   49426:	460e      	mov	r6, r1
   49428:	f00d fdf5 	bl	57016 <is_tx_ready.isra.0>
   4942c:	b990      	cbnz	r0, 49454 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   4942e:	f381 8811 	msr	BASEPRI, r1
   49432:	f3bf 8f6f 	isb	sy
}
   49436:	e7ed      	b.n	49414 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   49438:	f04f 0320 	mov.w	r3, #32
   4943c:	f3ef 8111 	mrs	r1, BASEPRI
   49440:	f383 8812 	msr	BASEPRI_MAX, r3
   49444:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   49448:	6860      	ldr	r0, [r4, #4]
   4944a:	460e      	mov	r6, r1
   4944c:	f00d fde3 	bl	57016 <is_tx_ready.isra.0>
   49450:	2800      	cmp	r0, #0
   49452:	d0da      	beq.n	4940a <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   49454:	697b      	ldr	r3, [r7, #20]
	tx_start(dev, data->char_out, 1);
   49456:	2201      	movs	r2, #1
	*data->char_out = c;
   49458:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   4945a:	4620      	mov	r0, r4
   4945c:	6979      	ldr	r1, [r7, #20]
   4945e:	f00d fdac 	bl	56fba <tx_start>
	__asm__ volatile(
   49462:	f386 8811 	msr	BASEPRI, r6
   49466:	f3bf 8f6f 	isb	sy
}
   4946a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4946c:	2002083d 	.word	0x2002083d

00049470 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   49470:	2301      	movs	r3, #1
   49472:	4083      	lsls	r3, r0
{
   49474:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   49476:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   49478:	4a0b      	ldr	r2, [pc, #44]	; (494a8 <compare_int_lock+0x38>)
   4947a:	e8d2 1fef 	ldaex	r1, [r2]
   4947e:	ea01 0504 	and.w	r5, r1, r4
   49482:	e8c2 5fe6 	stlex	r6, r5, [r2]
   49486:	2e00      	cmp	r6, #0
   49488:	d1f7      	bne.n	4947a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   4948a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   4948e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   49490:	4806      	ldr	r0, [pc, #24]	; (494ac <compare_int_lock+0x3c>)
   49492:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   49496:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   4949a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   4949e:	420b      	tst	r3, r1
}
   494a0:	bf14      	ite	ne
   494a2:	2001      	movne	r0, #1
   494a4:	2000      	moveq	r0, #0
   494a6:	bd70      	pop	{r4, r5, r6, pc}
   494a8:	2001b67c 	.word	0x2001b67c
   494ac:	40015000 	.word	0x40015000

000494b0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   494b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   494b2:	491b      	ldr	r1, [pc, #108]	; (49520 <sys_clock_timeout_handler+0x70>)
{
   494b4:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   494b6:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   494ba:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   494bc:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   494c0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   494c4:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   494c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   494ca:	d30f      	bcc.n	494ec <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   494cc:	f009 fe96 	bl	531fc <sys_clock_announce>
    return p_reg->CC[ch];
   494d0:	00a3      	lsls	r3, r4, #2
   494d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   494d6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   494da:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   494de:	4295      	cmp	r5, r2
   494e0:	d11d      	bne.n	4951e <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   494e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   494e6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   494ea:	e012      	b.n	49512 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   494ec:	4b0d      	ldr	r3, [pc, #52]	; (49524 <sys_clock_timeout_handler+0x74>)
   494ee:	681b      	ldr	r3, [r3, #0]
   494f0:	0a1a      	lsrs	r2, r3, #8
   494f2:	061b      	lsls	r3, r3, #24
   494f4:	195e      	adds	r6, r3, r5
   494f6:	4b0c      	ldr	r3, [pc, #48]	; (49528 <sys_clock_timeout_handler+0x78>)
   494f8:	f142 0700 	adc.w	r7, r2, #0
   494fc:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   49500:	f009 fe7c 	bl	531fc <sys_clock_announce>
    return p_reg->CC[ch];
   49504:	4a09      	ldr	r2, [pc, #36]	; (4952c <sys_clock_timeout_handler+0x7c>)
   49506:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   4950a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   4950e:	429d      	cmp	r5, r3
   49510:	d105      	bne.n	4951e <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   49512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   49516:	4a05      	ldr	r2, [pc, #20]	; (4952c <sys_clock_timeout_handler+0x7c>)
   49518:	40a3      	lsls	r3, r4
   4951a:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   4951e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   49520:	2001ac80 	.word	0x2001ac80
   49524:	2001b680 	.word	0x2001b680
   49528:	2001ac88 	.word	0x2001ac88
   4952c:	40015000 	.word	0x40015000

00049530 <compare_int_unlock>:
	if (key) {
   49530:	b1d9      	cbz	r1, 4956a <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   49532:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   49534:	4a0d      	ldr	r2, [pc, #52]	; (4956c <compare_int_unlock+0x3c>)
   49536:	4083      	lsls	r3, r0
   49538:	e8d2 cfef 	ldaex	ip, [r2]
   4953c:	ea4c 0c03 	orr.w	ip, ip, r3
   49540:	e8c2 cfe1 	stlex	r1, ip, [r2]
   49544:	2900      	cmp	r1, #0
   49546:	d1f7      	bne.n	49538 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   49548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   4954c:	4a08      	ldr	r2, [pc, #32]	; (49570 <compare_int_unlock+0x40>)
   4954e:	4083      	lsls	r3, r0
   49550:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   49554:	4b07      	ldr	r3, [pc, #28]	; (49574 <compare_int_unlock+0x44>)
   49556:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   4955a:	40c3      	lsrs	r3, r0
   4955c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   4955e:	bf42      	ittt	mi
   49560:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   49564:	4b04      	ldrmi	r3, [pc, #16]	; (49578 <compare_int_unlock+0x48>)
   49566:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   4956a:	4770      	bx	lr
   4956c:	2001b67c 	.word	0x2001b67c
   49570:	40015000 	.word	0x40015000
   49574:	2001b678 	.word	0x2001b678
   49578:	e000e100 	.word	0xe000e100

0004957c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   4957c:	4b0d      	ldr	r3, [pc, #52]	; (495b4 <z_nrf_rtc_timer_read+0x38>)
   4957e:	6818      	ldr	r0, [r3, #0]
   49580:	0a01      	lsrs	r1, r0, #8
   49582:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   49584:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   49588:	4b0b      	ldr	r3, [pc, #44]	; (495b8 <z_nrf_rtc_timer_read+0x3c>)
   4958a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   4958e:	1818      	adds	r0, r3, r0
   49590:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   49594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   49598:	d20a      	bcs.n	495b0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   4959a:	4b08      	ldr	r3, [pc, #32]	; (495bc <z_nrf_rtc_timer_read+0x40>)
   4959c:	e9d3 2300 	ldrd	r2, r3, [r3]
   495a0:	4290      	cmp	r0, r2
   495a2:	eb71 0303 	sbcs.w	r3, r1, r3
   495a6:	d203      	bcs.n	495b0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   495a8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   495ac:	f141 0100 	adc.w	r1, r1, #0
}
   495b0:	4770      	bx	lr
   495b2:	bf00      	nop
   495b4:	2001b680 	.word	0x2001b680
   495b8:	40015000 	.word	0x40015000
   495bc:	2001ac88 	.word	0x2001ac88

000495c0 <compare_set>:
{
   495c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   495c4:	4614      	mov	r4, r2
   495c6:	461d      	mov	r5, r3
   495c8:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   495ca:	f7ff ff51 	bl	49470 <compare_int_lock>
   495ce:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   495d0:	f7ff ffd4 	bl	4957c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   495d4:	42a0      	cmp	r0, r4
   495d6:	eb71 0305 	sbcs.w	r3, r1, r5
   495da:	d27a      	bcs.n	496d2 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
   495dc:	4b44      	ldr	r3, [pc, #272]	; (496f0 <compare_set+0x130>)
   495de:	1a20      	subs	r0, r4, r0
   495e0:	eb65 0101 	sbc.w	r1, r5, r1
   495e4:	4298      	cmp	r0, r3
   495e6:	f171 0100 	sbcs.w	r1, r1, #0
   495ea:	d27d      	bcs.n	496e8 <compare_set+0x128>
		if (target_time != cc_data[chan].target_time) {
   495ec:	4b41      	ldr	r3, [pc, #260]	; (496f4 <compare_set+0x134>)
   495ee:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   495f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   495f6:	429d      	cmp	r5, r3
   495f8:	bf08      	it	eq
   495fa:	4294      	cmpeq	r4, r2
   495fc:	d054      	beq.n	496a8 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   495fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   49602:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   49606:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   49608:	2100      	movs	r1, #0
   4960a:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   4960e:	f107 0850 	add.w	r8, r7, #80	; 0x50
   49612:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   49616:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   4961a:	40bb      	lsls	r3, r7
   4961c:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
   49620:	fa1f f888 	uxth.w	r8, r8
   49624:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   49628:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   4962a:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   4962e:	4b32      	ldr	r3, [pc, #200]	; (496f8 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   49630:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   49634:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   49638:	eba0 000a 	sub.w	r0, r0, sl
   4963c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   49640:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   49644:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   49646:	f8c9 2540 	str.w	r2, [r9, #1344]	; 0x540
   4964a:	d104      	bne.n	49656 <compare_set+0x96>
	z_impl_k_busy_wait(usec_to_wait);
   4964c:	2013      	movs	r0, #19
   4964e:	f011 fb69 	bl	5ad24 <z_impl_k_busy_wait>
   49652:	2100      	movs	r1, #0
   49654:	4b28      	ldr	r3, [pc, #160]	; (496f8 <compare_set+0x138>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   49656:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   4965a:	eba6 000c 	sub.w	r0, r6, ip
   4965e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   49662:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   49666:	bf88      	it	hi
   49668:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   4966a:	f8c8 1000 	str.w	r1, [r8]
    p_reg->EVTENSET = mask;
   4966e:	9a01      	ldr	r2, [sp, #4]
   49670:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   49674:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   49678:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   4967c:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   49680:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
   49684:	4582      	cmp	sl, r0
   49686:	d006      	beq.n	49696 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
   49688:	1a30      	subs	r0, r6, r0
   4968a:	3802      	subs	r0, #2
   4968c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   49690:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   49694:	d81b      	bhi.n	496ce <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
   49696:	eba6 060b 	sub.w	r6, r6, fp
   4969a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   4969e:	1936      	adds	r6, r6, r4
   496a0:	f145 0300 	adc.w	r3, r5, #0
   496a4:	4634      	mov	r4, r6
   496a6:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   496a8:	4912      	ldr	r1, [pc, #72]	; (496f4 <compare_set+0x134>)
	cc_data[chan].callback = handler;
   496aa:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   496ac:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   496b0:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   496b4:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   496b6:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   496b8:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   496ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   496bc:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   496be:	4638      	mov	r0, r7
   496c0:	9900      	ldr	r1, [sp, #0]
   496c2:	f7ff ff35 	bl	49530 <compare_int_unlock>
}
   496c6:	4620      	mov	r0, r4
   496c8:	b003      	add	sp, #12
   496ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   496ce:	4630      	mov	r0, r6
   496d0:	e7b0      	b.n	49634 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   496d2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   496d4:	4a09      	ldr	r2, [pc, #36]	; (496fc <compare_set+0x13c>)
   496d6:	40bb      	lsls	r3, r7
   496d8:	e8d2 0fef 	ldaex	r0, [r2]
   496dc:	4318      	orrs	r0, r3
   496de:	e8c2 0fe1 	stlex	r1, r0, [r2]
   496e2:	2900      	cmp	r1, #0
   496e4:	d0e0      	beq.n	496a8 <compare_set+0xe8>
   496e6:	e7f7      	b.n	496d8 <compare_set+0x118>
			return -EINVAL;
   496e8:	f06f 0415 	mvn.w	r4, #21
   496ec:	e7e7      	b.n	496be <compare_set+0xfe>
   496ee:	bf00      	nop
   496f0:	01000001 	.word	0x01000001
   496f4:	2001ac70 	.word	0x2001ac70
   496f8:	40015000 	.word	0x40015000
   496fc:	2001b678 	.word	0x2001b678

00049700 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   49700:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   49702:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   49704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   49708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   4970c:	4d16      	ldr	r5, [pc, #88]	; (49768 <sys_clock_driver_init+0x68>)
   4970e:	4b17      	ldr	r3, [pc, #92]	; (4976c <sys_clock_driver_init+0x6c>)
   49710:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   49714:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   49718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   4971c:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   4971e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   49722:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   49726:	4b12      	ldr	r3, [pc, #72]	; (49770 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   49728:	2101      	movs	r1, #1
   4972a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   4972e:	2015      	movs	r0, #21
   49730:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   49734:	4622      	mov	r2, r4
   49736:	f7fc fb7f 	bl	45e38 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   4973a:	2015      	movs	r0, #21
   4973c:	f7fc fb4c 	bl	45dd8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   49740:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   49742:	4a0c      	ldr	r2, [pc, #48]	; (49774 <sys_clock_driver_init+0x74>)
   49744:	60ab      	str	r3, [r5, #8]
   49746:	602b      	str	r3, [r5, #0]
   49748:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   4974a:	4b0b      	ldr	r3, [pc, #44]	; (49778 <sys_clock_driver_init+0x78>)
   4974c:	4a0b      	ldr	r2, [pc, #44]	; (4977c <sys_clock_driver_init+0x7c>)
   4974e:	9300      	str	r3, [sp, #0]
   49750:	4620      	mov	r0, r4
   49752:	2300      	movs	r3, #0
   49754:	9401      	str	r4, [sp, #4]
   49756:	f7ff ff33 	bl	495c0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   4975a:	4630      	mov	r0, r6
   4975c:	f7fe fe82 	bl	48464 <z_nrf_clock_control_lf_on>

	return 0;
}
   49760:	4620      	mov	r0, r4
   49762:	b002      	add	sp, #8
   49764:	bd70      	pop	{r4, r5, r6, pc}
   49766:	bf00      	nop
   49768:	40015000 	.word	0x40015000
   4976c:	2001ac70 	.word	0x2001ac70
   49770:	e000e100 	.word	0xe000e100
   49774:	2001b67c 	.word	0x2001b67c
   49778:	000494b1 	.word	0x000494b1
   4977c:	007fffff 	.word	0x007fffff

00049780 <rtc_nrf_isr>:
{
   49780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   49784:	4b31      	ldr	r3, [pc, #196]	; (4984c <rtc_nrf_isr+0xcc>)
   49786:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   4978a:	0792      	lsls	r2, r2, #30
   4978c:	d50b      	bpl.n	497a6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4978e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   49792:	b142      	cbz	r2, 497a6 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   49794:	2200      	movs	r2, #0
   49796:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   4979a:	4a2d      	ldr	r2, [pc, #180]	; (49850 <rtc_nrf_isr+0xd0>)
   4979c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   497a0:	6813      	ldr	r3, [r2, #0]
   497a2:	3301      	adds	r3, #1
   497a4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   497a6:	f04f 0320 	mov.w	r3, #32
   497aa:	f3ef 8211 	mrs	r2, BASEPRI
   497ae:	f383 8812 	msr	BASEPRI_MAX, r3
   497b2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   497b6:	4c25      	ldr	r4, [pc, #148]	; (4984c <rtc_nrf_isr+0xcc>)
   497b8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   497bc:	03db      	lsls	r3, r3, #15
   497be:	d525      	bpl.n	4980c <rtc_nrf_isr+0x8c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   497c0:	4b24      	ldr	r3, [pc, #144]	; (49854 <rtc_nrf_isr+0xd4>)
   497c2:	e8d3 1fef 	ldaex	r1, [r3]
   497c6:	f021 0001 	bic.w	r0, r1, #1
   497ca:	e8c3 0fe5 	stlex	r5, r0, [r3]
   497ce:	2d00      	cmp	r5, #0
   497d0:	d1f7      	bne.n	497c2 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   497d2:	b911      	cbnz	r1, 497da <rtc_nrf_isr+0x5a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   497d4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   497d8:	b1c3      	cbz	r3, 4980c <rtc_nrf_isr+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   497da:	2500      	movs	r5, #0
   497dc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   497e0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
   497e4:	f382 8811 	msr	BASEPRI, r2
   497e8:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   497ec:	f7ff fec6 	bl	4957c <z_nrf_rtc_timer_read>
	__asm__ volatile(
   497f0:	f04f 0320 	mov.w	r3, #32
   497f4:	f3ef 8211 	mrs	r2, BASEPRI
   497f8:	f383 8812 	msr	BASEPRI_MAX, r3
   497fc:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   49800:	4b15      	ldr	r3, [pc, #84]	; (49858 <rtc_nrf_isr+0xd8>)
   49802:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   49806:	42b0      	cmp	r0, r6
   49808:	41b9      	sbcs	r1, r7
   4980a:	d206      	bcs.n	4981a <rtc_nrf_isr+0x9a>
	__asm__ volatile(
   4980c:	f382 8811 	msr	BASEPRI, r2
   49810:	f3bf 8f6f 	isb	sy
}
   49814:	b003      	add	sp, #12
   49816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   4981a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   4981e:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   49822:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
   49826:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   49828:	e9c3 8902 	strd	r8, r9, [r3, #8]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   4982c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   49830:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   49834:	f382 8811 	msr	BASEPRI, r2
   49838:	f3bf 8f6f 	isb	sy
		if (handler) {
   4983c:	2900      	cmp	r1, #0
   4983e:	d0e9      	beq.n	49814 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   49840:	9000      	str	r0, [sp, #0]
   49842:	4632      	mov	r2, r6
   49844:	463b      	mov	r3, r7
   49846:	4628      	mov	r0, r5
   49848:	4788      	blx	r1
}
   4984a:	e7e3      	b.n	49814 <rtc_nrf_isr+0x94>
   4984c:	40015000 	.word	0x40015000
   49850:	2001b680 	.word	0x2001b680
   49854:	2001b678 	.word	0x2001b678
   49858:	2001ac70 	.word	0x2001ac70

0004985c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   4985c:	1c43      	adds	r3, r0, #1
{
   4985e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   49860:	d020      	beq.n	498a4 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   49862:	2801      	cmp	r0, #1
   49864:	dd20      	ble.n	498a8 <sys_clock_set_timeout+0x4c>
   49866:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   4986a:	da1f      	bge.n	498ac <sys_clock_set_timeout+0x50>
   4986c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   4986e:	f7ff fe85 	bl	4957c <z_nrf_rtc_timer_read>
   49872:	4b0f      	ldr	r3, [pc, #60]	; (498b0 <sys_clock_set_timeout+0x54>)
   49874:	e9d3 1300 	ldrd	r1, r3, [r3]
   49878:	1a42      	subs	r2, r0, r1
		ticks = 0;
   4987a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   4987e:	bf28      	it	cs
   49880:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   49882:	480c      	ldr	r0, [pc, #48]	; (498b4 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   49884:	3201      	adds	r2, #1
   49886:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   49888:	4282      	cmp	r2, r0
   4988a:	bf28      	it	cs
   4988c:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   4988e:	2000      	movs	r0, #0
   49890:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   49892:	4909      	ldr	r1, [pc, #36]	; (498b8 <sys_clock_set_timeout+0x5c>)
   49894:	9001      	str	r0, [sp, #4]
   49896:	9100      	str	r1, [sp, #0]
   49898:	f143 0300 	adc.w	r3, r3, #0
   4989c:	f7ff fe90 	bl	495c0 <compare_set>
}
   498a0:	b002      	add	sp, #8
   498a2:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   498a4:	4803      	ldr	r0, [pc, #12]	; (498b4 <sys_clock_set_timeout+0x58>)
   498a6:	e7e1      	b.n	4986c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   498a8:	2400      	movs	r4, #0
   498aa:	e7e0      	b.n	4986e <sys_clock_set_timeout+0x12>
   498ac:	4c01      	ldr	r4, [pc, #4]	; (498b4 <sys_clock_set_timeout+0x58>)
   498ae:	e7de      	b.n	4986e <sys_clock_set_timeout+0x12>
   498b0:	2001ac80 	.word	0x2001ac80
   498b4:	007fffff 	.word	0x007fffff
   498b8:	000494b1 	.word	0x000494b1

000498bc <sys_clock_elapsed>:
{
   498bc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   498be:	f7ff fe5d 	bl	4957c <z_nrf_rtc_timer_read>
   498c2:	4b02      	ldr	r3, [pc, #8]	; (498cc <sys_clock_elapsed+0x10>)
   498c4:	681b      	ldr	r3, [r3, #0]
}
   498c6:	1ac0      	subs	r0, r0, r3
   498c8:	bd08      	pop	{r3, pc}
   498ca:	bf00      	nop
   498cc:	2001ac80 	.word	0x2001ac80

000498d0 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   498d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   498d4:	2601      	movs	r6, #1
    p_reg->OUTSET = set_mask;
   498d6:	4d3c      	ldr	r5, [pc, #240]	; (499c8 <pinctrl_configure_pins+0xf8>)
   498d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   498dc:	4281      	cmp	r1, r0
   498de:	d102      	bne.n	498e6 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   498e0:	2000      	movs	r0, #0
}
   498e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   498e6:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   498e8:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   498ec:	f3c4 2743 	ubfx	r7, r4, #9, #4
			pin = 0xFFFFFFFFU;
   498f0:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   498f2:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   498f6:	bf08      	it	eq
   498f8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   498fc:	2c19      	cmp	r4, #25
   498fe:	d85f      	bhi.n	499c0 <pinctrl_configure_pins+0xf0>
   49900:	e8df f004 	tbb	[pc, r4]
   49904:	201d170d 	.word	0x201d170d
   49908:	5e204823 	.word	0x5e204823
   4990c:	5e5e5e5e 	.word	0x5e5e5e5e
   49910:	5e5e5e5e 	.word	0x5e5e5e5e
   49914:	5e5e5e5e 	.word	0x5e5e5e5e
   49918:	554d5e5e 	.word	0x554d5e5e
   4991c:	5b58      	.short	0x5b58
			NRF_PSEL_UART(reg, TXD) = pin;
   4991e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   49922:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   49926:	fa06 f404 	lsl.w	r4, r6, r4
}
   4992a:	f04f 0c01 	mov.w	ip, #1
    p_reg->OUTSET = set_mask;
   4992e:	60ac      	str	r4, [r5, #8]
   49930:	e003      	b.n	4993a <pinctrl_configure_pins+0x6a>
			NRF_PSEL_UART(reg, RXD) = pin;
   49932:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   49936:	f04f 0c00 	mov.w	ip, #0
}
   4993a:	46e6      	mov	lr, ip
   4993c:	e010      	b.n	49960 <pinctrl_configure_pins+0x90>
			NRF_PSEL_UART(reg, RTS) = pin;
   4993e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    if (value == 0)
   49942:	e7ee      	b.n	49922 <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
   49944:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   49948:	e7f5      	b.n	49936 <pinctrl_configure_pins+0x66>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   4994a:	f04f 0c00 	mov.w	ip, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   4994e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   49952:	f04f 0e01 	mov.w	lr, #1
    *p_pin = pin_number & 0x1F;
   49956:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   4995a:	fa06 f404 	lsl.w	r4, r6, r4
    p_reg->OUTCLR = clr_mask;
   4995e:	60ec      	str	r4, [r5, #12]
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   49960:	f850 4b04 	ldr.w	r4, [r0], #4
    *p_pin = pin_number & 0x1F;
   49964:	f003 031f 	and.w	r3, r3, #31
   49968:	f404 5800 	and.w	r8, r4, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   4996c:	f1b8 0f00 	cmp.w	r8, #0
   49970:	bf1c      	itt	ne
   49972:	f04f 0e00 	movne.w	lr, #0
   49976:	f04f 0c01 	movne.w	ip, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   4997a:	f3c4 18c1 	ubfx	r8, r4, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   4997e:	023c      	lsls	r4, r7, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   49980:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
   49984:	ea44 040e 	orr.w	r4, r4, lr
   49988:	ea44 044c 	orr.w	r4, r4, ip, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   4998c:	3380      	adds	r3, #128	; 0x80
   4998e:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   49992:	e7a3      	b.n	498dc <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   49994:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   49998:	f04f 0c01 	mov.w	ip, #1
   4999c:	e7d9      	b.n	49952 <pinctrl_configure_pins+0x82>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   4999e:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   499a2:	6804      	ldr	r4, [r0, #0]
   499a4:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   499a8:	2c00      	cmp	r4, #0
   499aa:	d0f5      	beq.n	49998 <pinctrl_configure_pins+0xc8>
   499ac:	e7b9      	b.n	49922 <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   499ae:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   499b2:	e7f6      	b.n	499a2 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   499b4:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   499b8:	e7f3      	b.n	499a2 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   499ba:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   499be:	e7f0      	b.n	499a2 <pinctrl_configure_pins+0xd2>
		switch (NRF_GET_FUN(pins[i])) {
   499c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   499c4:	e78d      	b.n	498e2 <pinctrl_configure_pins+0x12>
   499c6:	bf00      	nop
   499c8:	40842500 	.word	0x40842500

000499cc <_nrf_modem_lib_init>:
			nrf_modem_at_err(err), nrf_modem_at_err_type(err));
	}
}

static int _nrf_modem_lib_init(const struct device *unused)
{
   499cc:	b570      	push	{r4, r5, r6, lr}
	int err;
	(void) err;

	if (!first_time_init) {
   499ce:	4d1b      	ldr	r5, [pc, #108]	; (49a3c <_nrf_modem_lib_init+0x70>)
   499d0:	4c1b      	ldr	r4, [pc, #108]	; (49a40 <_nrf_modem_lib_init+0x74>)
   499d2:	782b      	ldrb	r3, [r5, #0]
   499d4:	b933      	cbnz	r3, 499e4 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   499d6:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   499da:	481a      	ldr	r0, [pc, #104]	; (49a44 <_nrf_modem_lib_init+0x78>)
   499dc:	f010 ff68 	bl	5a8b0 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   499e0:	2301      	movs	r3, #1
   499e2:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_IPC_IRQ, CONFIG_NRF_MODEM_LIB_IPC_IRQ_PRIO,
   499e4:	2200      	movs	r2, #0
   499e6:	2101      	movs	r1, #1
   499e8:	202a      	movs	r0, #42	; 0x2a
   499ea:	f7fc fa25 	bl	45e38 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   499ee:	2100      	movs	r1, #0
   499f0:	4815      	ldr	r0, [pc, #84]	; (49a48 <_nrf_modem_lib_init+0x7c>)
   499f2:	f008 f8fd 	bl	51bf0 <nrf_modem_init>
   499f6:	4d15      	ldr	r5, [pc, #84]	; (49a4c <_nrf_modem_lib_init+0x80>)
   499f8:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   499fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   499fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   49a02:	4810      	ldr	r0, [pc, #64]	; (49a44 <_nrf_modem_lib_init+0x78>)
   49a04:	f008 fd86 	bl	52514 <z_impl_k_mutex_lock>
	return list->head;
   49a08:	6820      	ldr	r0, [r4, #0]
	if (IS_ENABLED(CONFIG_NRF_MODEM_LIB_LOG_FW_VERSION_UUID)) {
		log_fw_version_uuid();
	}

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   49a0a:	b120      	cbz	r0, 49a16 <_nrf_modem_lib_init+0x4a>
	return node->next;
   49a0c:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   49a0e:	3004      	adds	r0, #4
   49a10:	f008 fe6a 	bl	526e8 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   49a14:	b944      	cbnz	r4, 49a28 <_nrf_modem_lib_init+0x5c>
	return z_impl_k_mutex_unlock(mutex);
   49a16:	480b      	ldr	r0, [pc, #44]	; (49a44 <_nrf_modem_lib_init+0x78>)
   49a18:	f008 fdf6 	bl	52608 <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&slist_mutex);

	LOG_DBG("Modem library has initialized, ret %d", init_ret);
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   49a1c:	4c0c      	ldr	r4, [pc, #48]	; (49a50 <_nrf_modem_lib_init+0x84>)
   49a1e:	4e0d      	ldr	r6, [pc, #52]	; (49a54 <_nrf_modem_lib_init+0x88>)
   49a20:	42b4      	cmp	r4, r6
   49a22:	d304      	bcc.n	49a2e <_nrf_modem_lib_init+0x62>
		 */
		return 0;
	}

	return init_ret;
}
   49a24:	2000      	movs	r0, #0
   49a26:	bd70      	pop	{r4, r5, r6, pc}
   49a28:	4620      	mov	r0, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   49a2a:	6824      	ldr	r4, [r4, #0]
   49a2c:	e7ef      	b.n	49a0e <_nrf_modem_lib_init+0x42>
		e->callback(init_ret, e->context);
   49a2e:	e9d4 3100 	ldrd	r3, r1, [r4]
   49a32:	6828      	ldr	r0, [r5, #0]
   49a34:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   49a36:	3408      	adds	r4, #8
   49a38:	e7f2      	b.n	49a20 <_nrf_modem_lib_init+0x54>
   49a3a:	bf00      	nop
   49a3c:	2001de90 	.word	0x2001de90
   49a40:	2001b69c 	.word	0x2001b69c
   49a44:	2001b688 	.word	0x2001b688
   49a48:	0005c460 	.word	0x0005c460
   49a4c:	2001b684 	.word	0x2001b684
   49a50:	00060c14 	.word	0x00060c14
   49a54:	00060c2c 	.word	0x00060c2c

00049a58 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   49a58:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   49a5a:	4b0f      	ldr	r3, [pc, #60]	; (49a98 <thread_monitor_entry_get+0x40>)
{
   49a5c:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   49a5e:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   49a60:	4b0e      	ldr	r3, [pc, #56]	; (49a9c <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   49a62:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   49a64:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   49a66:	4618      	mov	r0, r3
   49a68:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   49a6a:	42b8      	cmp	r0, r7
   49a6c:	d301      	bcc.n	49a72 <thread_monitor_entry_get+0x1a>
   49a6e:	3d01      	subs	r5, #1
   49a70:	d104      	bne.n	49a7c <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   49a72:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   49a74:	3a01      	subs	r2, #1
	new_entry->id = id;
   49a76:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   49a78:	605a      	str	r2, [r3, #4]
}
   49a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
   49a7c:	6804      	ldr	r4, [r0, #0]
   49a7e:	428c      	cmp	r4, r1
   49a80:	d0fb      	beq.n	49a7a <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
   49a82:	b13c      	cbz	r4, 49a94 <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
   49a84:	6844      	ldr	r4, [r0, #4]
   49a86:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   49a88:	42a6      	cmp	r6, r4
   49a8a:	bfbc      	itt	lt
   49a8c:	4603      	movlt	r3, r0
   49a8e:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   49a90:	3008      	adds	r0, #8
   49a92:	e7ea      	b.n	49a6a <thread_monitor_entry_get+0x12>
   49a94:	4603      	mov	r3, r0
   49a96:	e7ec      	b.n	49a72 <thread_monitor_entry_get+0x1a>
   49a98:	2001b734 	.word	0x2001b734
   49a9c:	2001b740 	.word	0x2001b740

00049aa0 <on_init>:
	list->head = NULL;
   49aa0:	2000      	movs	r0, #0
   49aa2:	4b05      	ldr	r3, [pc, #20]	; (49ab8 <on_init+0x18>)
	list->tail = NULL;
   49aa4:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   49aa8:	4b04      	ldr	r3, [pc, #16]	; (49abc <on_init+0x1c>)
   49aaa:	e8d3 2fef 	ldaex	r2, [r3]
   49aae:	e8c3 0fe1 	stlex	r1, r0, [r3]
   49ab2:	2900      	cmp	r1, #0
   49ab4:	d1f9      	bne.n	49aaa <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   49ab6:	4770      	bx	lr
   49ab8:	2001b738 	.word	0x2001b738
   49abc:	2001b734 	.word	0x2001b734

00049ac0 <nrf_modem_os_timedwait>:
{
   49ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   49ac4:	b088      	sub	sp, #32
   49ac6:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
   49ac8:	f010 fdf3 	bl	5a6b2 <nrf_modem_is_initialized>
   49acc:	b920      	cbnz	r0, 49ad8 <nrf_modem_os_timedwait+0x18>
		return -NRF_ESHUTDOWN;
   49ace:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   49ad2:	b008      	add	sp, #32
   49ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   49ad8:	f011 f922 	bl	5ad20 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   49adc:	6833      	ldr	r3, [r6, #0]
   49ade:	4604      	mov	r4, r0
   49ae0:	2b00      	cmp	r3, #0
   49ae2:	460f      	mov	r7, r1
   49ae4:	d104      	bne.n	49af0 <nrf_modem_os_timedwait+0x30>
	z_impl_k_yield();
   49ae6:	f009 f98f 	bl	52e08 <z_impl_k_yield>
		return -NRF_EAGAIN;
   49aea:	f06f 000a 	mvn.w	r0, #10
   49aee:	e7f0      	b.n	49ad2 <nrf_modem_os_timedwait+0x12>
		*timeout = SYS_FOREVER_MS;
   49af0:	bfbc      	itt	lt
   49af2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   49af6:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   49af8:	2201      	movs	r2, #1
   49afa:	2100      	movs	r1, #0
   49afc:	a802      	add	r0, sp, #8
   49afe:	f010 ff5b 	bl	5a9b8 <z_impl_k_sem_init>
   49b02:	f10d 0804 	add.w	r8, sp, #4
	__asm__ volatile(
   49b06:	f04f 0320 	mov.w	r3, #32
   49b0a:	f3ef 8a11 	mrs	sl, BASEPRI
   49b0e:	f383 8812 	msr	BASEPRI_MAX, r3
   49b12:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   49b16:	f009 fa13 	bl	52f40 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   49b1a:	f7ff ff9d 	bl	49a58 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   49b1e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 49c40 <nrf_modem_os_timedwait+0x180>
   49b22:	6842      	ldr	r2, [r0, #4]
   49b24:	f8d9 3000 	ldr.w	r3, [r9]
   49b28:	429a      	cmp	r2, r3
   49b2a:	d16d      	bne.n	49c08 <nrf_modem_os_timedwait+0x148>
	parent->next = child;
   49b2c:	2300      	movs	r3, #0
	return list->tail;
   49b2e:	4d43      	ldr	r5, [pc, #268]	; (49c3c <nrf_modem_os_timedwait+0x17c>)
	parent->next = child;
   49b30:	9301      	str	r3, [sp, #4]
	return list->tail;
   49b32:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   49b34:	2b00      	cmp	r3, #0
   49b36:	d16e      	bne.n	49c16 <nrf_modem_os_timedwait+0x156>
	list->head = node;
   49b38:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
   49b3c:	f38a 8811 	msr	BASEPRI, sl
   49b40:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   49b44:	6833      	ldr	r3, [r6, #0]
   49b46:	1c5a      	adds	r2, r3, #1
   49b48:	d06a      	beq.n	49c20 <nrf_modem_os_timedwait+0x160>
   49b4a:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   49b4e:	f240 30e7 	movw	r0, #999	; 0x3e7
   49b52:	2100      	movs	r1, #0
   49b54:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   49b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   49b5c:	2300      	movs	r3, #0
   49b5e:	fbcc 010e 	smlal	r0, r1, ip, lr
   49b62:	f7f6 ffd5 	bl	40b10 <__aeabi_uldivmod>
   49b66:	4602      	mov	r2, r0
   49b68:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   49b6a:	a802      	add	r0, sp, #8
   49b6c:	f008 fde2 	bl	52734 <z_impl_k_sem_take>
	__asm__ volatile(
   49b70:	f04f 0320 	mov.w	r3, #32
   49b74:	f3ef 8a11 	mrs	sl, BASEPRI
   49b78:	f383 8812 	msr	BASEPRI_MAX, r3
   49b7c:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49b80:	2200      	movs	r2, #0
	return list->head;
   49b82:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49b84:	b15b      	cbz	r3, 49b9e <nrf_modem_os_timedwait+0xde>
   49b86:	4543      	cmp	r3, r8
   49b88:	d154      	bne.n	49c34 <nrf_modem_os_timedwait+0x174>
	return node->next;
   49b8a:	9901      	ldr	r1, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   49b8c:	2a00      	cmp	r2, #0
   49b8e:	d14b      	bne.n	49c28 <nrf_modem_os_timedwait+0x168>
   49b90:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   49b92:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   49b94:	429a      	cmp	r2, r3
   49b96:	d100      	bne.n	49b9a <nrf_modem_os_timedwait+0xda>
	list->tail = node;
   49b98:	6069      	str	r1, [r5, #4]
	parent->next = child;
   49b9a:	2300      	movs	r3, #0
   49b9c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   49b9e:	f009 f9cf 	bl	52f40 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   49ba2:	f7ff ff59 	bl	49a58 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   49ba6:	f8d9 3000 	ldr.w	r3, [r9]
   49baa:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   49bac:	f38a 8811 	msr	BASEPRI, sl
   49bb0:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   49bb4:	f010 fd7d 	bl	5a6b2 <nrf_modem_is_initialized>
   49bb8:	2800      	cmp	r0, #0
   49bba:	d088      	beq.n	49ace <nrf_modem_os_timedwait+0xe>
	if (*timeout == SYS_FOREVER_MS) {
   49bbc:	6835      	ldr	r5, [r6, #0]
   49bbe:	1c6b      	adds	r3, r5, #1
   49bc0:	d027      	beq.n	49c12 <nrf_modem_os_timedwait+0x152>
	return z_impl_k_uptime_ticks();
   49bc2:	f011 f8ad 	bl	5ad20 <z_impl_k_uptime_ticks>
   49bc6:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   49bca:	fba0 320e 	umull	r3, r2, r0, lr
   49bce:	fb0e 2101 	mla	r1, lr, r1, r2
   49bd2:	fba4 420e 	umull	r4, r2, r4, lr
   49bd6:	fb0e 2207 	mla	r2, lr, r7, r2
   49bda:	0bdb      	lsrs	r3, r3, #15
   49bdc:	0be4      	lsrs	r4, r4, #15
   49bde:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   49be2:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
   49be6:	1b1b      	subs	r3, r3, r4
   49be8:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   49bec:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   49bf0:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
   49bf4:	1aed      	subs	r5, r5, r3
   49bf6:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   49bfa:	f1bc 0f00 	cmp.w	ip, #0
   49bfe:	bfb8      	it	lt
   49c00:	2500      	movlt	r5, #0
   49c02:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
   49c04:	b92d      	cbnz	r5, 49c12 <nrf_modem_os_timedwait+0x152>
   49c06:	e770      	b.n	49aea <nrf_modem_os_timedwait+0x2a>
	entry->cnt = rpc_event_cnt;
   49c08:	6043      	str	r3, [r0, #4]
   49c0a:	f38a 8811 	msr	BASEPRI, sl
   49c0e:	f3bf 8f6f 	isb	sy
		return 0;
   49c12:	2000      	movs	r0, #0
   49c14:	e75d      	b.n	49ad2 <nrf_modem_os_timedwait+0x12>
   49c16:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   49c1a:	f8c5 8004 	str.w	r8, [r5, #4]
   49c1e:	e78d      	b.n	49b3c <nrf_modem_os_timedwait+0x7c>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   49c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   49c24:	4613      	mov	r3, r2
   49c26:	e7a0      	b.n	49b6a <nrf_modem_os_timedwait+0xaa>
	parent->next = child;
   49c28:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   49c2a:	6869      	ldr	r1, [r5, #4]
   49c2c:	4299      	cmp	r1, r3
	list->tail = node;
   49c2e:	bf08      	it	eq
   49c30:	606a      	streq	r2, [r5, #4]
}
   49c32:	e7b2      	b.n	49b9a <nrf_modem_os_timedwait+0xda>
	return node->next;
   49c34:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   49c36:	681b      	ldr	r3, [r3, #0]
   49c38:	e7a4      	b.n	49b84 <nrf_modem_os_timedwait+0xc4>
   49c3a:	bf00      	nop
   49c3c:	2001b738 	.word	0x2001b738
   49c40:	2001b734 	.word	0x2001b734

00049c44 <nrf_modem_os_sem_init>:
{
   49c44:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   49c46:	6804      	ldr	r4, [r0, #0]
   49c48:	4b0a      	ldr	r3, [pc, #40]	; (49c74 <nrf_modem_os_sem_init+0x30>)
   49c4a:	b12c      	cbz	r4, 49c58 <nrf_modem_os_sem_init+0x14>
   49c4c:	429c      	cmp	r4, r3
   49c4e:	d303      	bcc.n	49c58 <nrf_modem_os_sem_init+0x14>
   49c50:	f103 0590 	add.w	r5, r3, #144	; 0x90
   49c54:	42ac      	cmp	r4, r5
   49c56:	d308      	bcc.n	49c6a <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   49c58:	4d07      	ldr	r5, [pc, #28]	; (49c78 <nrf_modem_os_sem_init+0x34>)
   49c5a:	782c      	ldrb	r4, [r5, #0]
   49c5c:	1c66      	adds	r6, r4, #1
   49c5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   49c62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   49c66:	702e      	strb	r6, [r5, #0]
   49c68:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   49c6a:	6800      	ldr	r0, [r0, #0]
}
   49c6c:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
   49c6e:	f010 bea3 	b.w	5a9b8 <z_impl_k_sem_init>
   49c72:	bf00      	nop
   49c74:	2001b6a4 	.word	0x2001b6a4
   49c78:	2001de91 	.word	0x2001de91

00049c7c <nrf_modem_os_event_notify>:
{
   49c7c:	b510      	push	{r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   49c7e:	4b08      	ldr	r3, [pc, #32]	; (49ca0 <nrf_modem_os_event_notify+0x24>)
   49c80:	e8d3 1fef 	ldaex	r1, [r3]
   49c84:	3101      	adds	r1, #1
   49c86:	e8c3 1fe2 	stlex	r2, r1, [r3]
   49c8a:	2a00      	cmp	r2, #0
   49c8c:	d1f8      	bne.n	49c80 <nrf_modem_os_event_notify+0x4>
	return list->head;
   49c8e:	4b05      	ldr	r3, [pc, #20]	; (49ca4 <nrf_modem_os_event_notify+0x28>)
   49c90:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   49c92:	b904      	cbnz	r4, 49c96 <nrf_modem_os_event_notify+0x1a>
}
   49c94:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   49c96:	1d20      	adds	r0, r4, #4
   49c98:	f008 fd26 	bl	526e8 <z_impl_k_sem_give>
	return node->next;
   49c9c:	6824      	ldr	r4, [r4, #0]
   49c9e:	e7f8      	b.n	49c92 <nrf_modem_os_event_notify+0x16>
   49ca0:	2001b734 	.word	0x2001b734
   49ca4:	2001b738 	.word	0x2001b738

00049ca8 <nrf_modem_os_alloc>:
{
   49ca8:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   49caa:	2200      	movs	r2, #0
   49cac:	2300      	movs	r3, #0
   49cae:	4801      	ldr	r0, [pc, #4]	; (49cb4 <nrf_modem_os_alloc+0xc>)
   49cb0:	f010 bd7c 	b.w	5a7ac <k_heap_alloc>
   49cb4:	2001b790 	.word	0x2001b790

00049cb8 <nrf_modem_os_free>:
{
   49cb8:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   49cba:	4801      	ldr	r0, [pc, #4]	; (49cc0 <nrf_modem_os_free+0x8>)
   49cbc:	f010 bd80 	b.w	5a7c0 <k_heap_free>
   49cc0:	2001b790 	.word	0x2001b790

00049cc4 <nrf_modem_os_shm_tx_alloc>:
{
   49cc4:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   49cc6:	2200      	movs	r2, #0
   49cc8:	2300      	movs	r3, #0
   49cca:	4801      	ldr	r0, [pc, #4]	; (49cd0 <nrf_modem_os_shm_tx_alloc+0xc>)
   49ccc:	f010 bd6e 	b.w	5a7ac <k_heap_alloc>
   49cd0:	2001b7a4 	.word	0x2001b7a4

00049cd4 <nrf_modem_os_shm_tx_free>:
{
   49cd4:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   49cd6:	4801      	ldr	r0, [pc, #4]	; (49cdc <nrf_modem_os_shm_tx_free+0x8>)
   49cd8:	f010 bd72 	b.w	5a7c0 <k_heap_free>
   49cdc:	2001b7a4 	.word	0x2001b7a4

00049ce0 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   49ce0:	b508      	push	{r3, lr}
	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   49ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   49ce6:	4906      	ldr	r1, [pc, #24]	; (49d00 <nrf_modem_os_init+0x20>)
   49ce8:	4806      	ldr	r0, [pc, #24]	; (49d04 <nrf_modem_os_init+0x24>)
   49cea:	f010 fd09 	bl	5a700 <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   49cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   49cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   49cf6:	4904      	ldr	r1, [pc, #16]	; (49d08 <nrf_modem_os_init+0x28>)
   49cf8:	4804      	ldr	r0, [pc, #16]	; (49d0c <nrf_modem_os_init+0x2c>)
   49cfa:	f010 bd01 	b.w	5a700 <k_heap_init>
   49cfe:	bf00      	nop
   49d00:	2001de92 	.word	0x2001de92
   49d04:	2001b790 	.word	0x2001b790
   49d08:	200164e8 	.word	0x200164e8
   49d0c:	2001b7a4 	.word	0x2001b7a4

00049d10 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   49d10:	2801      	cmp	r0, #1
   49d12:	d00e      	beq.n	49d32 <z_to_nrf_optname+0x22>
   49d14:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   49d18:	d113      	bne.n	49d42 <z_to_nrf_optname+0x32>
	case SOL_TLS:
		switch (z_in_optname) {
   49d1a:	1e4b      	subs	r3, r1, #1
   49d1c:	2b0d      	cmp	r3, #13
   49d1e:	d810      	bhi.n	49d42 <z_to_nrf_optname+0x32>
   49d20:	e8df f003 	tbb	[pc, r3]
   49d24:	0f626262 	.word	0x0f626262
   49d28:	0f0f6262 	.word	0x0f0f6262
   49d2c:	620f0f0f 	.word	0x620f0f0f
   49d30:	6262      	.short	0x6262
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   49d32:	2937      	cmp	r1, #55	; 0x37
   49d34:	dc05      	bgt.n	49d42 <z_to_nrf_optname+0x32>
   49d36:	2913      	cmp	r1, #19
   49d38:	dc06      	bgt.n	49d48 <z_to_nrf_optname+0x38>
   49d3a:	2902      	cmp	r1, #2
   49d3c:	d054      	beq.n	49de8 <z_to_nrf_optname+0xd8>
   49d3e:	2904      	cmp	r1, #4
   49d40:	d052      	beq.n	49de8 <z_to_nrf_optname+0xd8>
   49d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		retval = -1;
		break;
	}

	return retval;
}
   49d46:	4770      	bx	lr
   49d48:	f1a1 0314 	sub.w	r3, r1, #20
   49d4c:	2b23      	cmp	r3, #35	; 0x23
   49d4e:	d8f8      	bhi.n	49d42 <z_to_nrf_optname+0x32>
   49d50:	a001      	add	r0, pc, #4	; (adr r0, 49d58 <z_to_nrf_optname+0x48>)
   49d52:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   49d56:	bf00      	nop
   49d58:	00049de9 	.word	0x00049de9
   49d5c:	00049de9 	.word	0x00049de9
   49d60:	00049d43 	.word	0x00049d43
   49d64:	00049d43 	.word	0x00049d43
   49d68:	00049d43 	.word	0x00049d43
   49d6c:	00049de9 	.word	0x00049de9
   49d70:	00049d43 	.word	0x00049d43
   49d74:	00049d43 	.word	0x00049d43
   49d78:	00049d43 	.word	0x00049d43
   49d7c:	00049d43 	.word	0x00049d43
   49d80:	00049de9 	.word	0x00049de9
   49d84:	00049de9 	.word	0x00049de9
   49d88:	00049de9 	.word	0x00049de9
   49d8c:	00049d43 	.word	0x00049d43
   49d90:	00049d43 	.word	0x00049d43
   49d94:	00049d43 	.word	0x00049d43
   49d98:	00049d43 	.word	0x00049d43
   49d9c:	00049d43 	.word	0x00049d43
   49da0:	00049d43 	.word	0x00049d43
   49da4:	00049d43 	.word	0x00049d43
   49da8:	00049d43 	.word	0x00049d43
   49dac:	00049d43 	.word	0x00049d43
   49db0:	00049d43 	.word	0x00049d43
   49db4:	00049d43 	.word	0x00049d43
   49db8:	00049d43 	.word	0x00049d43
   49dbc:	00049d43 	.word	0x00049d43
   49dc0:	00049d43 	.word	0x00049d43
   49dc4:	00049d43 	.word	0x00049d43
   49dc8:	00049d43 	.word	0x00049d43
   49dcc:	00049d43 	.word	0x00049d43
   49dd0:	00049de9 	.word	0x00049de9
   49dd4:	00049de9 	.word	0x00049de9
   49dd8:	00049de9 	.word	0x00049de9
   49ddc:	00049de9 	.word	0x00049de9
   49de0:	00049de9 	.word	0x00049de9
   49de4:	00049de9 	.word	0x00049de9
	int retval = 0;
   49de8:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   49dea:	6011      	str	r1, [r2, #0]
   49dec:	4770      	bx	lr
   49dee:	bf00      	nop

00049df0 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   49df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   49df4:	4b05      	ldr	r3, [pc, #20]	; (49e0c <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   49df6:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   49df8:	601a      	str	r2, [r3, #0]
   49dfa:	609a      	str	r2, [r3, #8]
   49dfc:	611a      	str	r2, [r3, #16]
   49dfe:	619a      	str	r2, [r3, #24]
   49e00:	621a      	str	r2, [r3, #32]
   49e02:	629a      	str	r2, [r3, #40]	; 0x28
   49e04:	631a      	str	r2, [r3, #48]	; 0x30
   49e06:	639a      	str	r2, [r3, #56]	; 0x38
}
   49e08:	4770      	bx	lr
   49e0a:	bf00      	nop
   49e0c:	2001b7bc 	.word	0x2001b7bc

00049e10 <nrf91_socket_offload_ioctl>:
{
   49e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   49e14:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
	int sd = OBJ_TO_SD(obj);
   49e18:	6804      	ldr	r4, [r0, #0]
{
   49e1a:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   49e1c:	2b03      	cmp	r3, #3
   49e1e:	d852      	bhi.n	49ec6 <nrf91_socket_offload_ioctl+0xb6>
   49e20:	e8df f003 	tbb	[pc, r3]
   49e24:	4d087502 	.word	0x4d087502
		return -EXDEV;
   49e28:	f06f 0411 	mvn.w	r4, #17
}
   49e2c:	4620      	mov	r0, r4
   49e2e:	b011      	add	sp, #68	; 0x44
   49e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   49e34:	2700      	movs	r7, #0
		nfds = va_arg(args, int);
   49e36:	e9d2 9800 	ldrd	r9, r8, [r2]
		timeout = va_arg(args, int);
   49e3a:	466e      	mov	r6, sp
   49e3c:	464d      	mov	r5, r9
	int retval = 0;
   49e3e:	463c      	mov	r4, r7
		tmp[i].events = 0;
   49e40:	46ba      	mov	sl, r7
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   49e42:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   49e44:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   49e48:	4668      	mov	r0, sp
   49e4a:	2240      	movs	r2, #64	; 0x40
   49e4c:	f011 f884 	bl	5af58 <memset>
			obj = z_get_fd_obj(fds[i].fd,
   49e50:	4930      	ldr	r1, [pc, #192]	; (49f14 <nrf91_socket_offload_ioctl+0x104>)
	for (int i = 0; i < nfds; i++) {
   49e52:	45b8      	cmp	r8, r7
   49e54:	dc0c      	bgt.n	49e70 <nrf91_socket_offload_ioctl+0x60>
	if (retval > 0) {
   49e56:	2c00      	cmp	r4, #0
   49e58:	d1e8      	bne.n	49e2c <nrf91_socket_offload_ioctl+0x1c>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   49e5a:	465a      	mov	r2, fp
   49e5c:	4641      	mov	r1, r8
   49e5e:	4668      	mov	r0, sp
   49e60:	f010 fb02 	bl	5a468 <nrf_poll>
		fds[i].revents = tmp[i].revents;
   49e64:	f109 0306 	add.w	r3, r9, #6
	for (int i = 0; i < nfds; i++) {
   49e68:	45a0      	cmp	r8, r4
   49e6a:	dc1c      	bgt.n	49ea6 <nrf91_socket_offload_ioctl+0x96>
	return retval;
   49e6c:	4604      	mov	r4, r0
		return nrf91_socket_offload_poll(fds, nfds, timeout);
   49e6e:	e7dd      	b.n	49e2c <nrf91_socket_offload_ioctl+0x1c>
		tmp[i].events = 0;
   49e70:	f8a6 a004 	strh.w	sl, [r6, #4]
		if (fds[i].fd < 0) {
   49e74:	6828      	ldr	r0, [r5, #0]
		fds[i].revents = 0;
   49e76:	f8a5 a006 	strh.w	sl, [r5, #6]
		if (fds[i].fd < 0) {
   49e7a:	2800      	cmp	r0, #0
   49e7c:	da04      	bge.n	49e88 <nrf91_socket_offload_ioctl+0x78>
			tmp[i].fd = fds[i].fd;
   49e7e:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   49e80:	3701      	adds	r7, #1
   49e82:	3608      	adds	r6, #8
   49e84:	3508      	adds	r5, #8
   49e86:	e7e4      	b.n	49e52 <nrf91_socket_offload_ioctl+0x42>
			obj = z_get_fd_obj(fds[i].fd,
   49e88:	2286      	movs	r2, #134	; 0x86
   49e8a:	f7fa fe8d 	bl	44ba8 <z_get_fd_obj>
			if (obj != NULL) {
   49e8e:	4921      	ldr	r1, [pc, #132]	; (49f14 <nrf91_socket_offload_ioctl+0x104>)
   49e90:	b128      	cbz	r0, 49e9e <nrf91_socket_offload_ioctl+0x8e>
				tmp[i].fd = OBJ_TO_SD(obj);
   49e92:	6803      	ldr	r3, [r0, #0]
   49e94:	6033      	str	r3, [r6, #0]
		tmp[i].events = fds[i].events;
   49e96:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   49e9a:	80b3      	strh	r3, [r6, #4]
   49e9c:	e7f0      	b.n	49e80 <nrf91_socket_offload_ioctl+0x70>
				fds[i].revents = POLLNVAL;
   49e9e:	2320      	movs	r3, #32
				retval++;
   49ea0:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   49ea2:	80eb      	strh	r3, [r5, #6]
				retval++;
   49ea4:	e7f7      	b.n	49e96 <nrf91_socket_offload_ioctl+0x86>
		if (fds[i].fd < 0) {
   49ea6:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
   49eaa:	2a00      	cmp	r2, #0
		fds[i].revents = tmp[i].revents;
   49eac:	bfa2      	ittt	ge
   49eae:	eb0d 02c4 	addge.w	r2, sp, r4, lsl #3
   49eb2:	f9b2 2006 	ldrshge.w	r2, [r2, #6]
   49eb6:	f823 2034 	strhge.w	r2, [r3, r4, lsl #3]
	for (int i = 0; i < nfds; i++) {
   49eba:	3401      	adds	r4, #1
   49ebc:	e7d4      	b.n	49e68 <nrf91_socket_offload_ioctl+0x58>
		ctx->lock = va_arg(args, struct k_mutex *);
   49ebe:	6813      	ldr	r3, [r2, #0]
		return 0;
   49ec0:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   49ec2:	6043      	str	r3, [r0, #4]
		return 0;
   49ec4:	e7b2      	b.n	49e2c <nrf91_socket_offload_ioctl+0x1c>
	switch (cmd) {
   49ec6:	2903      	cmp	r1, #3
   49ec8:	d012      	beq.n	49ef0 <nrf91_socket_offload_ioctl+0xe0>
   49eca:	2904      	cmp	r1, #4
   49ecc:	d118      	bne.n	49f00 <nrf91_socket_offload_ioctl+0xf0>
		flags = va_arg(args, int);
   49ece:	6815      	ldr	r5, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK) {
   49ed0:	f435 4380 	bics.w	r3, r5, #16384	; 0x4000
   49ed4:	d003      	beq.n	49ede <nrf91_socket_offload_ioctl+0xce>
			errno = EINVAL;
   49ed6:	f00c f952 	bl	5617e <__errno>
   49eda:	2316      	movs	r3, #22
   49edc:	6003      	str	r3, [r0, #0]
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   49ede:	2104      	movs	r1, #4
   49ee0:	4620      	mov	r0, r4
   49ee2:	f3c5 3280 	ubfx	r2, r5, #14, #1
}
   49ee6:	b011      	add	sp, #68	; 0x44
   49ee8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   49eec:	f010 bb53 	b.w	5a596 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   49ef0:	4620      	mov	r0, r4
   49ef2:	2200      	movs	r2, #0
   49ef4:	f010 fb4f 	bl	5a596 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   49ef8:	0384      	lsls	r4, r0, #14
   49efa:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   49efe:	e795      	b.n	49e2c <nrf91_socket_offload_ioctl+0x1c>
		errno = EINVAL;
   49f00:	f00c f93d 	bl	5617e <__errno>
   49f04:	2316      	movs	r3, #22
		retval = -1;
   49f06:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		errno = EINVAL;
   49f0a:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   49f0c:	e78e      	b.n	49e2c <nrf91_socket_offload_ioctl+0x1c>
	switch (request) {
   49f0e:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   49f12:	e78b      	b.n	49e2c <nrf91_socket_offload_ioctl+0x1c>
   49f14:	0005c490 	.word	0x0005c490

00049f18 <nrf91_socket_iface_init>:
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;
   49f18:	4b03      	ldr	r3, [pc, #12]	; (49f28 <nrf91_socket_iface_init+0x10>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   49f1a:	4a04      	ldr	r2, [pc, #16]	; (49f2c <nrf91_socket_iface_init+0x14>)
	nrf91_socket_iface_data.iface = iface;
   49f1c:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   49f1e:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   49f20:	4803      	ldr	r0, [pc, #12]	; (49f30 <nrf91_socket_iface_init+0x18>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   49f22:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   49f24:	f7fb bc5e 	b.w	457e4 <socket_offload_dns_register>
   49f28:	2001b7b8 	.word	0x2001b7b8
   49f2c:	0004a2c5 	.word	0x0004a2c5
   49f30:	0005c488 	.word	0x0005c488

00049f34 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   49f34:	490b      	ldr	r1, [pc, #44]	; (49f64 <nrf91_socket_is_supported+0x30>)
{
   49f36:	4603      	mov	r3, r0
	if (offload_disabled) {
   49f38:	7808      	ldrb	r0, [r1, #0]
   49f3a:	b980      	cbnz	r0, 49f5e <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   49f3c:	490a      	ldr	r1, [pc, #40]	; (49f68 <nrf91_socket_is_supported+0x34>)
   49f3e:	7809      	ldrb	r1, [r1, #0]
   49f40:	b139      	cbz	r1, 49f52 <nrf91_socket_is_supported+0x1e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   49f42:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   49f46:	2902      	cmp	r1, #2
   49f48:	d90a      	bls.n	49f60 <nrf91_socket_is_supported+0x2c>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   49f4a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   49f4e:	2a01      	cmp	r2, #1
   49f50:	d906      	bls.n	49f60 <nrf91_socket_is_supported+0x2c>
	return (family == AF_PACKET) || (family == AF_INET) || (family == AF_INET6);
   49f52:	3b01      	subs	r3, #1
   49f54:	2b02      	cmp	r3, #2
   49f56:	bf8c      	ite	hi
   49f58:	2000      	movhi	r0, #0
   49f5a:	2001      	movls	r0, #1
	return af_is_supported(family);
   49f5c:	4770      	bx	lr
		return false;
   49f5e:	2000      	movs	r0, #0
}
   49f60:	4770      	bx	lr
   49f62:	bf00      	nop
   49f64:	2001e313 	.word	0x2001e313
   49f68:	2001e312 	.word	0x2001e312

00049f6c <nrf91_socket_offload_getaddrinfo>:
{
   49f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49f70:	4614      	mov	r4, r2
   49f72:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   49f74:	2100      	movs	r1, #0
{
   49f76:	b08b      	sub	sp, #44	; 0x2c
   49f78:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   49f7a:	2220      	movs	r2, #32
   49f7c:	a802      	add	r0, sp, #8
{
   49f7e:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   49f80:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   49f82:	f010 ffe9 	bl	5af58 <memset>
	if (hints != NULL) {
   49f86:	b15c      	cbz	r4, 49fa0 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   49f88:	6863      	ldr	r3, [r4, #4]
   49f8a:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   49f8c:	68e3      	ldr	r3, [r4, #12]
   49f8e:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   49f90:	68a3      	ldr	r3, [r4, #8]
   49f92:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   49f94:	6923      	ldr	r3, [r4, #16]
   49f96:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   49f98:	69e3      	ldr	r3, [r4, #28]
   49f9a:	b103      	cbz	r3, 49f9e <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   49f9c:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   49f9e:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   49fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   49fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   49fa8:	4834      	ldr	r0, [pc, #208]	; (4a07c <nrf91_socket_offload_getaddrinfo+0x110>)
   49faa:	f00d fb25 	bl	575f8 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   49fae:	4631      	mov	r1, r6
   49fb0:	4622      	mov	r2, r4
   49fb2:	4628      	mov	r0, r5
   49fb4:	ab01      	add	r3, sp, #4
   49fb6:	f006 fc85 	bl	508c4 <nrf_getaddrinfo>
	if (retval != 0) {
   49fba:	4606      	mov	r6, r0
   49fbc:	b948      	cbnz	r0, 49fd2 <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   49fbe:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   49fc0:	4681      	mov	r9, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   49fc2:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   49fc6:	9d01      	ldr	r5, [sp, #4]
	*res = NULL;
   49fc8:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   49fca:	b94d      	cbnz	r5, 49fe0 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   49fcc:	9801      	ldr	r0, [sp, #4]
   49fce:	f00f fe0a 	bl	59be6 <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   49fd2:	482a      	ldr	r0, [pc, #168]	; (4a07c <nrf91_socket_offload_getaddrinfo+0x110>)
   49fd4:	f00d fb12 	bl	575fc <k_mutex_unlock.isra.0>
}
   49fd8:	4630      	mov	r0, r6
   49fda:	b00b      	add	sp, #44	; 0x2c
   49fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   49fe0:	2050      	movs	r0, #80	; 0x50
   49fe2:	f010 ff47 	bl	5ae74 <k_malloc>
		if (next_z_res == NULL) {
   49fe6:	4604      	mov	r4, r0
   49fe8:	2800      	cmp	r0, #0
   49fea:	d040      	beq.n	4a06e <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_next = NULL;
   49fec:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   49ff0:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_in->ai_flags;
   49ff4:	682b      	ldr	r3, [r5, #0]
   49ff6:	6043      	str	r3, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   49ff8:	68ab      	ldr	r3, [r5, #8]
   49ffa:	60c3      	str	r3, [r0, #12]
	z_out->ai_family = nrf_in->ai_family;
   49ffc:	686b      	ldr	r3, [r5, #4]
   49ffe:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   4a000:	68eb      	ldr	r3, [r5, #12]
   4a002:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   4a004:	f8d5 b004 	ldr.w	fp, [r5, #4]
   4a008:	f1bb 0f01 	cmp.w	fp, #1
   4a00c:	d114      	bne.n	4a038 <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   4a00e:	2008      	movs	r0, #8
   4a010:	f010 ff30 	bl	5ae74 <k_malloc>
   4a014:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   4a016:	b338      	cbz	r0, 4a068 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   4a018:	2308      	movs	r3, #8
   4a01a:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   4a01c:	696b      	ldr	r3, [r5, #20]
	ptr->sin_port = nrf_in->sin_port;
   4a01e:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_family = AF_INET;
   4a020:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_port = nrf_in->sin_port;
   4a024:	8042      	strh	r2, [r0, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   4a026:	68db      	ldr	r3, [r3, #12]
   4a028:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   4a02a:	f1b8 0f00 	cmp.w	r8, #0
   4a02e:	d121      	bne.n	4a074 <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   4a030:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   4a032:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   4a034:	69ed      	ldr	r5, [r5, #28]
   4a036:	e7c8      	b.n	49fca <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   4a038:	f1bb 0f02 	cmp.w	fp, #2
   4a03c:	d009      	beq.n	4a052 <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   4a03e:	f010 ff12 	bl	5ae66 <k_free>
			retval = DNS_EAI_FAMILY;
   4a042:	f06f 0605 	mvn.w	r6, #5
		nrf91_socket_offload_freeaddrinfo(*res);
   4a046:	6838      	ldr	r0, [r7, #0]
   4a048:	f00d fa0b 	bl	57462 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   4a04c:	2300      	movs	r3, #0
   4a04e:	603b      	str	r3, [r7, #0]
   4a050:	e7bc      	b.n	49fcc <nrf91_socket_offload_getaddrinfo+0x60>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   4a052:	2018      	movs	r0, #24
   4a054:	f010 ff0e 	bl	5ae74 <k_malloc>
   4a058:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   4a05a:	b128      	cbz	r0, 4a068 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   4a05c:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   4a060:	6969      	ldr	r1, [r5, #20]
   4a062:	f00d fa0b 	bl	5747c <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   4a066:	e7e0      	b.n	4a02a <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   4a068:	4620      	mov	r0, r4
   4a06a:	f010 fefc 	bl	5ae66 <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   4a06e:	f06f 0609 	mvn.w	r6, #9
   4a072:	e7e8      	b.n	4a046 <nrf91_socket_offload_getaddrinfo+0xda>
			latest_z_res->ai_next = next_z_res;
   4a074:	f8c8 4000 	str.w	r4, [r8]
   4a078:	e7db      	b.n	4a032 <nrf91_socket_offload_getaddrinfo+0xc6>
   4a07a:	bf00      	nop
   4a07c:	2001ab84 	.word	0x2001ab84

0004a080 <nrf91_socket_offload_sendmsg>:
{
   4a080:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   4a084:	4607      	mov	r7, r0
   4a086:	4690      	mov	r8, r2
	if (msg == NULL) {
   4a088:	460c      	mov	r4, r1
   4a08a:	b379      	cbz	r1, 4a0ec <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a08c:	2300      	movs	r3, #0
	ssize_t len = 0;
   4a08e:	461a      	mov	r2, r3
   4a090:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a092:	4283      	cmp	r3, r0
   4a094:	d134      	bne.n	4a100 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   4a096:	2a80      	cmp	r2, #128	; 0x80
   4a098:	d871      	bhi.n	4a17e <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   4a09a:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   4a09c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4a0a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4a0a4:	4838      	ldr	r0, [pc, #224]	; (4a188 <nrf91_socket_offload_sendmsg+0x108>)
   4a0a6:	f00d faa7 	bl	575f8 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   4a0aa:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   4a0ac:	4e37      	ldr	r6, [pc, #220]	; (4a18c <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   4a0ae:	68e3      	ldr	r3, [r4, #12]
   4a0b0:	429d      	cmp	r5, r3
   4a0b2:	d32c      	bcc.n	4a10e <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   4a0b4:	2600      	movs	r6, #0
		ret = 0;
   4a0b6:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   4a0b8:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 4a18c <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   4a0bc:	45b1      	cmp	r9, r6
   4a0be:	dd11      	ble.n	4a0e4 <nrf91_socket_offload_sendmsg+0x64>
   4a0c0:	b985      	cbnz	r5, 4a0e4 <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   4a0c2:	6863      	ldr	r3, [r4, #4]
   4a0c4:	4638      	mov	r0, r7
   4a0c6:	9301      	str	r3, [sp, #4]
   4a0c8:	6823      	ldr	r3, [r4, #0]
   4a0ca:	eba9 0206 	sub.w	r2, r9, r6
   4a0ce:	9300      	str	r3, [sp, #0]
   4a0d0:	eb0a 0106 	add.w	r1, sl, r6
   4a0d4:	4643      	mov	r3, r8
   4a0d6:	f00d f9fe 	bl	574d6 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   4a0da:	1e05      	subs	r5, r0, #0
   4a0dc:	ddee      	ble.n	4a0bc <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   4a0de:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   4a0e0:	45b1      	cmp	r9, r6
   4a0e2:	dcee      	bgt.n	4a0c2 <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   4a0e4:	4828      	ldr	r0, [pc, #160]	; (4a188 <nrf91_socket_offload_sendmsg+0x108>)
   4a0e6:	f00d fa89 	bl	575fc <k_mutex_unlock.isra.0>
		return ret;
   4a0ea:	e005      	b.n	4a0f8 <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   4a0ec:	f00c f847 	bl	5617e <__errno>
   4a0f0:	2316      	movs	r3, #22
		return -1;
   4a0f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		errno = EINVAL;
   4a0f6:	6003      	str	r3, [r0, #0]
}
   4a0f8:	4628      	mov	r0, r5
   4a0fa:	b002      	add	sp, #8
   4a0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   4a100:	68a1      	ldr	r1, [r4, #8]
   4a102:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   4a106:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a108:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   4a10a:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a10c:	e7c1      	b.n	4a092 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   4a10e:	68a3      	ldr	r3, [r4, #8]
   4a110:	eb06 0009 	add.w	r0, r6, r9
   4a114:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   4a118:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   4a11c:	6852      	ldr	r2, [r2, #4]
   4a11e:	f010 fee1 	bl	5aee4 <memcpy>
			len += msg->msg_iov[i].iov_len;
   4a122:	68a3      	ldr	r3, [r4, #8]
   4a124:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   4a128:	4453      	add	r3, sl
   4a12a:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   4a12c:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   4a12e:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   4a130:	e7bd      	b.n	4a0ae <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   4a132:	68a3      	ldr	r3, [r4, #8]
   4a134:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   4a138:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   4a13c:	685b      	ldr	r3, [r3, #4]
   4a13e:	b13b      	cbz	r3, 4a150 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   4a140:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   4a144:	68a3      	ldr	r3, [r4, #8]
   4a146:	eb03 020a 	add.w	r2, r3, sl
   4a14a:	6852      	ldr	r2, [r2, #4]
   4a14c:	4591      	cmp	r9, r2
   4a14e:	d304      	bcc.n	4a15a <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a150:	3601      	adds	r6, #1
   4a152:	68e3      	ldr	r3, [r4, #12]
   4a154:	429e      	cmp	r6, r3
   4a156:	d3ec      	bcc.n	4a132 <nrf91_socket_offload_sendmsg+0xb2>
   4a158:	e7ce      	b.n	4a0f8 <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   4a15a:	f853 100a 	ldr.w	r1, [r3, sl]
   4a15e:	6863      	ldr	r3, [r4, #4]
   4a160:	4449      	add	r1, r9
   4a162:	9301      	str	r3, [sp, #4]
   4a164:	6823      	ldr	r3, [r4, #0]
   4a166:	4638      	mov	r0, r7
   4a168:	9300      	str	r3, [sp, #0]
   4a16a:	eba2 0209 	sub.w	r2, r2, r9
   4a16e:	4643      	mov	r3, r8
   4a170:	f00d f9b1 	bl	574d6 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   4a174:	1e01      	subs	r1, r0, #0
   4a176:	db05      	blt.n	4a184 <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   4a178:	4489      	add	r9, r1
			len += ret;
   4a17a:	440d      	add	r5, r1
   4a17c:	e7e2      	b.n	4a144 <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   4a17e:	2600      	movs	r6, #0
	len = 0;
   4a180:	4635      	mov	r5, r6
   4a182:	e7e6      	b.n	4a152 <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   4a184:	460d      	mov	r5, r1
   4a186:	e7b7      	b.n	4a0f8 <nrf91_socket_offload_sendmsg+0x78>
   4a188:	2001abc0 	.word	0x2001abc0
   4a18c:	2001e292 	.word	0x2001e292

0004a190 <allocate_ctx>:
{
   4a190:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   4a192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4a196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   4a19a:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   4a19c:	480b      	ldr	r0, [pc, #44]	; (4a1cc <allocate_ctx+0x3c>)
   4a19e:	f00d fa2b 	bl	575f8 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   4a1a2:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   4a1a4:	4a0a      	ldr	r2, [pc, #40]	; (4a1d0 <allocate_ctx+0x40>)
   4a1a6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   4a1aa:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   4a1ae:	3101      	adds	r1, #1
   4a1b0:	d106      	bne.n	4a1c0 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   4a1b2:	f842 5033 	str.w	r5, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   4a1b6:	4805      	ldr	r0, [pc, #20]	; (4a1cc <allocate_ctx+0x3c>)
   4a1b8:	f00d fa20 	bl	575fc <k_mutex_unlock.isra.0>
}
   4a1bc:	4620      	mov	r0, r4
   4a1be:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   4a1c0:	3301      	adds	r3, #1
   4a1c2:	2b08      	cmp	r3, #8
   4a1c4:	d1ef      	bne.n	4a1a6 <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   4a1c6:	2400      	movs	r4, #0
   4a1c8:	e7f5      	b.n	4a1b6 <allocate_ctx+0x26>
   4a1ca:	bf00      	nop
   4a1cc:	2001ab5c 	.word	0x2001ab5c
   4a1d0:	2001b7bc 	.word	0x2001b7bc

0004a1d4 <release_ctx>:
{
   4a1d4:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   4a1d6:	4d09      	ldr	r5, [pc, #36]	; (4a1fc <release_ctx+0x28>)
{
   4a1d8:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   4a1da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4a1de:	4628      	mov	r0, r5
   4a1e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4a1e4:	f00d fa08 	bl	575f8 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   4a1e8:	2300      	movs	r3, #0
   4a1ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4a1ee:	e9c4 2300 	strd	r2, r3, [r4]
	k_mutex_unlock(&ctx_lock);
   4a1f2:	4628      	mov	r0, r5
}
   4a1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   4a1f8:	f00d ba00 	b.w	575fc <k_mutex_unlock.isra.0>
   4a1fc:	2001ab5c 	.word	0x2001ab5c

0004a200 <nrf91_socket_offload_accept>:
{
   4a200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4a204:	b08b      	sub	sp, #44	; 0x2c
   4a206:	4607      	mov	r7, r0
   4a208:	460c      	mov	r4, r1
   4a20a:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   4a20c:	f7fa fce4 	bl	44bd8 <z_reserve_fd>
   4a210:	4606      	mov	r6, r0
	if (fd < 0) {
   4a212:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   4a214:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   4a216:	db1e      	blt.n	4a256 <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   4a218:	b304      	cbz	r4, 4a25c <nrf91_socket_offload_accept+0x5c>
   4a21a:	b315      	cbz	r5, 4a262 <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   4a21c:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   4a21e:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   4a220:	2b08      	cmp	r3, #8
   4a222:	bf14      	ite	ne
   4a224:	2324      	movne	r3, #36	; 0x24
   4a226:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   4a228:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   4a22c:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   4a22e:	4649      	mov	r1, r9
   4a230:	f00f fe5c 	bl	59eec <nrf_accept>
	if (new_sd < 0) {
   4a234:	f1b0 0800 	subs.w	r8, r0, #0
   4a238:	db0a      	blt.n	4a250 <nrf91_socket_offload_accept+0x50>
	ctx = allocate_ctx(new_sd);
   4a23a:	f7ff ffa9 	bl	4a190 <allocate_ctx>
	if (ctx == NULL) {
   4a23e:	4607      	mov	r7, r0
   4a240:	b990      	cbnz	r0, 4a268 <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   4a242:	f00b ff9c 	bl	5617e <__errno>
   4a246:	230c      	movs	r3, #12
   4a248:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   4a24a:	4640      	mov	r0, r8
   4a24c:	f006 fdf0 	bl	50e30 <nrf_close>
	z_free_fd(fd);
   4a250:	4630      	mov	r0, r6
   4a252:	f7fa fd11 	bl	44c78 <z_free_fd>
		return -1;
   4a256:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4a25a:	e018      	b.n	4a28e <nrf91_socket_offload_accept+0x8e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   4a25c:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   4a25e:	46a1      	mov	r9, r4
   4a260:	e7e5      	b.n	4a22e <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   4a262:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   4a264:	46a9      	mov	r9, r5
   4a266:	e7e2      	b.n	4a22e <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   4a268:	b164      	cbz	r4, 4a284 <nrf91_socket_offload_accept+0x84>
   4a26a:	b15d      	cbz	r5, 4a284 <nrf91_socket_offload_accept+0x84>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   4a26c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   4a270:	2b01      	cmp	r3, #1
   4a272:	d110      	bne.n	4a296 <nrf91_socket_offload_accept+0x96>
			*addrlen = sizeof(struct sockaddr_in);
   4a274:	2208      	movs	r2, #8
   4a276:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   4a278:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   4a27c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   4a27e:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   4a280:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   4a282:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   4a284:	4639      	mov	r1, r7
   4a286:	4630      	mov	r0, r6
   4a288:	4a0d      	ldr	r2, [pc, #52]	; (4a2c0 <nrf91_socket_offload_accept+0xc0>)
   4a28a:	f7fa fcdb 	bl	44c44 <z_finalize_fd>
}
   4a28e:	4630      	mov	r0, r6
   4a290:	b00b      	add	sp, #44	; 0x2c
   4a292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   4a296:	2b02      	cmp	r3, #2
   4a298:	d106      	bne.n	4a2a8 <nrf91_socket_offload_accept+0xa8>
			*addrlen = sizeof(struct sockaddr_in6);
   4a29a:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   4a29c:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   4a29e:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   4a2a0:	a901      	add	r1, sp, #4
   4a2a2:	f00d f8eb 	bl	5747c <nrf_to_z_ipv6>
   4a2a6:	e7ed      	b.n	4a284 <nrf91_socket_offload_accept+0x84>
			errno = ENOTSUP;
   4a2a8:	f00b ff69 	bl	5617e <__errno>
   4a2ac:	2386      	movs	r3, #134	; 0x86
   4a2ae:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   4a2b0:	4640      	mov	r0, r8
   4a2b2:	f006 fdbd 	bl	50e30 <nrf_close>
		release_ctx(ctx);
   4a2b6:	4638      	mov	r0, r7
   4a2b8:	f7ff ff8c 	bl	4a1d4 <release_ctx>
   4a2bc:	e7c8      	b.n	4a250 <nrf91_socket_offload_accept+0x50>
   4a2be:	bf00      	nop
   4a2c0:	0005c490 	.word	0x0005c490

0004a2c4 <nrf91_socket_create>:
{
   4a2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (type & SOCK_NATIVE) {
   4a2c8:	1e0d      	subs	r5, r1, #0
{
   4a2ca:	4607      	mov	r7, r0
   4a2cc:	4690      	mov	r8, r2
	if (type & SOCK_NATIVE) {
   4a2ce:	da12      	bge.n	4a2f6 <nrf91_socket_create+0x32>
	k_sched_lock();
   4a2d0:	f008 fd5e 	bl	52d90 <k_sched_lock>
	*offload_lock = true;
   4a2d4:	4e1c      	ldr	r6, [pc, #112]	; (4a348 <nrf91_socket_create+0x84>)
   4a2d6:	2301      	movs	r3, #1
   4a2d8:	7033      	strb	r3, [r6, #0]
		union { uintptr_t x; int val; } parm2 = { .val = proto };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_SOCKET);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_socket(family, type, proto);
   4a2da:	4642      	mov	r2, r8
   4a2dc:	4638      	mov	r0, r7
   4a2de:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   4a2e2:	f7fb fa55 	bl	45790 <z_impl_zsock_socket>
	*offload_lock = false;
   4a2e6:	2300      	movs	r3, #0
   4a2e8:	7033      	strb	r3, [r6, #0]
   4a2ea:	4604      	mov	r4, r0
	k_sched_unlock();
   4a2ec:	f008 fd64 	bl	52db8 <k_sched_unlock>
}
   4a2f0:	4620      	mov	r0, r4
   4a2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   4a2f6:	006b      	lsls	r3, r5, #1
   4a2f8:	d503      	bpl.n	4a302 <nrf91_socket_create+0x3e>
	k_sched_lock();
   4a2fa:	f008 fd49 	bl	52d90 <k_sched_lock>
	*offload_lock = true;
   4a2fe:	4e13      	ldr	r6, [pc, #76]	; (4a34c <nrf91_socket_create+0x88>)
   4a300:	e7e9      	b.n	4a2d6 <nrf91_socket_create+0x12>
	fd = z_reserve_fd();
   4a302:	f7fa fc69 	bl	44bd8 <z_reserve_fd>
	if (fd < 0) {
   4a306:	1e04      	subs	r4, r0, #0
   4a308:	db09      	blt.n	4a31e <nrf91_socket_create+0x5a>
	retval = nrf_socket(family, type, proto);
   4a30a:	4629      	mov	r1, r5
   4a30c:	4642      	mov	r2, r8
   4a30e:	4638      	mov	r0, r7
   4a310:	f00f fc7a 	bl	59c08 <nrf_socket>
	if (sd < 0) {
   4a314:	1e05      	subs	r5, r0, #0
   4a316:	da05      	bge.n	4a324 <nrf91_socket_create+0x60>
		z_free_fd(fd);
   4a318:	4620      	mov	r0, r4
   4a31a:	f7fa fcad 	bl	44c78 <z_free_fd>
		return -1;
   4a31e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   4a322:	e7e5      	b.n	4a2f0 <nrf91_socket_create+0x2c>
	ctx = allocate_ctx(sd);
   4a324:	f7ff ff34 	bl	4a190 <allocate_ctx>
	if (ctx == NULL) {
   4a328:	4601      	mov	r1, r0
   4a32a:	b938      	cbnz	r0, 4a33c <nrf91_socket_create+0x78>
		errno = ENOMEM;
   4a32c:	f00b ff27 	bl	5617e <__errno>
   4a330:	230c      	movs	r3, #12
   4a332:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   4a334:	4628      	mov	r0, r5
   4a336:	f006 fd7b 	bl	50e30 <nrf_close>
		z_free_fd(fd);
   4a33a:	e7ed      	b.n	4a318 <nrf91_socket_create+0x54>
	z_finalize_fd(fd, ctx,
   4a33c:	4620      	mov	r0, r4
   4a33e:	4a04      	ldr	r2, [pc, #16]	; (4a350 <nrf91_socket_create+0x8c>)
   4a340:	f7fa fc80 	bl	44c44 <z_finalize_fd>
	return fd;
   4a344:	e7d4      	b.n	4a2f0 <nrf91_socket_create+0x2c>
   4a346:	bf00      	nop
   4a348:	2001e313 	.word	0x2001e313
   4a34c:	2001e312 	.word	0x2001e312
   4a350:	0005c490 	.word	0x0005c490

0004a354 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   4a354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   4a356:	ab0b      	add	r3, sp, #44	; 0x2c
   4a358:	9305      	str	r3, [sp, #20]
   4a35a:	9303      	str	r3, [sp, #12]
   4a35c:	4b05      	ldr	r3, [pc, #20]	; (4a374 <z_log_msg_runtime_create.constprop.0+0x20>)
   4a35e:	2201      	movs	r2, #1
   4a360:	9302      	str	r3, [sp, #8]
   4a362:	2300      	movs	r3, #0
   4a364:	4618      	mov	r0, r3
   4a366:	e9cd 3300 	strd	r3, r3, [sp]
   4a36a:	f7fa ff61 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   4a36e:	b007      	add	sp, #28
   4a370:	f85d fb04 	ldr.w	pc, [sp], #4
   4a374:	0005e8cb 	.word	0x0005e8cb

0004a378 <nrf_modem_fault_handler>:

LOG_MODULE_DECLARE(nrf_modem, CONFIG_NRF_MODEM_LIB_LOG_LEVEL);

#if CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
   4a378:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
   4a37a:	6843      	ldr	r3, [r0, #4]
   4a37c:	2201      	movs	r2, #1
   4a37e:	9304      	str	r3, [sp, #16]
   4a380:	6803      	ldr	r3, [r0, #0]
   4a382:	4906      	ldr	r1, [pc, #24]	; (4a39c <nrf_modem_fault_handler+0x24>)
   4a384:	9303      	str	r3, [sp, #12]
   4a386:	4b06      	ldr	r3, [pc, #24]	; (4a3a0 <nrf_modem_fault_handler+0x28>)
   4a388:	9302      	str	r3, [sp, #8]
   4a38a:	2300      	movs	r3, #0
   4a38c:	4618      	mov	r0, r3
   4a38e:	e9cd 3300 	strd	r3, r3, [sp]
   4a392:	f7ff ffdf 	bl	4a354 <z_log_msg_runtime_create.constprop.0>
}
   4a396:	b007      	add	sp, #28
   4a398:	f85d fb04 	ldr.w	pc, [sp], #4
   4a39c:	0005c004 	.word	0x0005c004
   4a3a0:	0005e8cb 	.word	0x0005e8cb

0004a3a4 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   4a3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   4a3a8:	2400      	movs	r4, #0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   4a3aa:	f04f 0801 	mov.w	r8, #1
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a3ae:	4625      	mov	r5, r4
   4a3b0:	4e16      	ldr	r6, [pc, #88]	; (4a40c <get_buttons+0x68>)
{
   4a3b2:	b087      	sub	sp, #28
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   4a3b4:	6830      	ldr	r0, [r6, #0]
   4a3b6:	7937      	ldrb	r7, [r6, #4]
	const struct gpio_driver_data *const data =
   4a3b8:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   4a3bc:	6883      	ldr	r3, [r0, #8]
   4a3be:	a905      	add	r1, sp, #20
   4a3c0:	685b      	ldr	r3, [r3, #4]
   4a3c2:	4798      	blx	r3
	if (ret == 0) {
   4a3c4:	2800      	cmp	r0, #0
   4a3c6:	d009      	beq.n	4a3dc <get_buttons+0x38>
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
   4a3c8:	db11      	blt.n	4a3ee <get_buttons+0x4a>
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if (val) {
			ret |= 1U << i;
   4a3ca:	fa08 f305 	lsl.w	r3, r8, r5
   4a3ce:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a3d0:	3501      	adds	r5, #1
   4a3d2:	2d04      	cmp	r5, #4
   4a3d4:	f106 0608 	add.w	r6, r6, #8
   4a3d8:	d1ec      	bne.n	4a3b4 <get_buttons+0x10>
   4a3da:	e013      	b.n	4a404 <get_buttons+0x60>
		*value ^= data->invert;
   4a3dc:	f8d9 2000 	ldr.w	r2, [r9]
   4a3e0:	9b05      	ldr	r3, [sp, #20]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   4a3e2:	fa08 f707 	lsl.w	r7, r8, r7
		*value ^= data->invert;
   4a3e6:	4053      	eors	r3, r2
		if (val) {
   4a3e8:	423b      	tst	r3, r7
   4a3ea:	d0f1      	beq.n	4a3d0 <get_buttons+0x2c>
   4a3ec:	e7ed      	b.n	4a3ca <get_buttons+0x26>
			LOG_ERR("Cannot read gpio pin");
   4a3ee:	2400      	movs	r4, #0
   4a3f0:	4b07      	ldr	r3, [pc, #28]	; (4a410 <get_buttons+0x6c>)
   4a3f2:	2201      	movs	r2, #1
   4a3f4:	9302      	str	r3, [sp, #8]
   4a3f6:	4620      	mov	r0, r4
   4a3f8:	4623      	mov	r3, r4
   4a3fa:	e9cd 4400 	strd	r4, r4, [sp]
   4a3fe:	4905      	ldr	r1, [pc, #20]	; (4a414 <get_buttons+0x70>)
   4a400:	f00d f97d 	bl	576fe <z_log_msg_runtime_create.constprop.0>
		}
	}

	return ret;
}
   4a404:	4620      	mov	r0, r4
   4a406:	b007      	add	sp, #28
   4a408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   4a40c:	0005c4d0 	.word	0x0005c4d0
   4a410:	0005e8e7 	.word	0x0005e8e7
   4a414:	0005bf5c 	.word	0x0005bf5c

0004a418 <callback_ctrl>:
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   4a418:	2800      	cmp	r0, #0
{
   4a41a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   4a41e:	bf0c      	ite	eq
   4a420:	f44f 1600 	moveq.w	r6, #2097152	; 0x200000
   4a424:	f04f 6698 	movne.w	r6, #79691776	; 0x4c00000
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   4a428:	2500      	movs	r5, #0
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   4a42a:	f04f 0801 	mov.w	r8, #1
   4a42e:	4c11      	ldr	r4, [pc, #68]	; (4a474 <callback_ctrl+0x5c>)
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   4a430:	f406 0700 	and.w	r7, r6, #8388608	; 0x800000
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   4a434:	6820      	ldr	r0, [r4, #0]
   4a436:	7921      	ldrb	r1, [r4, #4]
	const struct gpio_driver_api *api =
   4a438:	f8d0 c008 	ldr.w	ip, [r0, #8]
	const struct gpio_driver_data *const data =
   4a43c:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   4a43e:	b1bf      	cbz	r7, 4a470 <callback_ctrl+0x58>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   4a440:	6812      	ldr	r2, [r2, #0]
   4a442:	fa08 f301 	lsl.w	r3, r8, r1
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   4a446:	4213      	tst	r3, r2
   4a448:	bf0c      	ite	eq
   4a44a:	f04f 6298 	moveq.w	r2, #79691776	; 0x4c00000
   4a44e:	f04f 7230 	movne.w	r2, #46137344	; 0x2c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   4a452:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   4a456:	f8dc 9018 	ldr.w	r9, [ip, #24]
   4a45a:	f402 02c0 	and.w	r2, r2, #6291456	; 0x600000
   4a45e:	3501      	adds	r5, #1
   4a460:	47c8      	blx	r9
   4a462:	2d04      	cmp	r5, #4
   4a464:	d002      	beq.n	4a46c <callback_ctrl+0x54>
   4a466:	3408      	adds	r4, #8
   4a468:	2800      	cmp	r0, #0
   4a46a:	d0e3      	beq.n	4a434 <callback_ctrl+0x1c>
}
   4a46c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4a470:	4632      	mov	r2, r6
   4a472:	e7ee      	b.n	4a452 <callback_ctrl+0x3a>
   4a474:	0005c4d0 	.word	0x0005c4d0

0004a478 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   4a478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__asm__ volatile(
   4a47a:	f04f 0320 	mov.w	r3, #32
   4a47e:	f3ef 8411 	mrs	r4, BASEPRI
   4a482:	f383 8812 	msr	BASEPRI_MAX, r3
   4a486:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   4a48a:	2000      	movs	r0, #0
   4a48c:	f7ff ffc4 	bl	4a418 <callback_ctrl>

	if (err) {
   4a490:	b148      	cbz	r0, 4a4a6 <button_pressed+0x2e>
		LOG_ERR("Cannot disable callbacks");
   4a492:	4b0d      	ldr	r3, [pc, #52]	; (4a4c8 <button_pressed+0x50>)
   4a494:	2201      	movs	r2, #1
   4a496:	9302      	str	r3, [sp, #8]
   4a498:	2300      	movs	r3, #0
   4a49a:	490c      	ldr	r1, [pc, #48]	; (4a4cc <button_pressed+0x54>)
   4a49c:	4618      	mov	r0, r3
   4a49e:	e9cd 3300 	strd	r3, r3, [sp]
   4a4a2:	f00d f92c 	bl	576fe <z_log_msg_runtime_create.constprop.0>
	}

	switch (state) {
   4a4a6:	4b0a      	ldr	r3, [pc, #40]	; (4a4d0 <button_pressed+0x58>)
   4a4a8:	781a      	ldrb	r2, [r3, #0]
   4a4aa:	b932      	cbnz	r2, 4a4ba <button_pressed+0x42>
	case STATE_WAITING:
		state = STATE_SCANNING;
   4a4ac:	2201      	movs	r2, #1
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   4a4ae:	4809      	ldr	r0, [pc, #36]	; (4a4d4 <button_pressed+0x5c>)
		state = STATE_SCANNING;
   4a4b0:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   4a4b2:	2221      	movs	r2, #33	; 0x21
   4a4b4:	2300      	movs	r3, #0
   4a4b6:	f008 fa5b 	bl	52970 <k_work_reschedule>
	__asm__ volatile(
   4a4ba:	f384 8811 	msr	BASEPRI, r4
   4a4be:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   4a4c2:	b004      	add	sp, #16
   4a4c4:	bd10      	pop	{r4, pc}
   4a4c6:	bf00      	nop
   4a4c8:	0005e8fc 	.word	0x0005e8fc
   4a4cc:	0005bf5c 	.word	0x0005bf5c
   4a4d0:	2001e314 	.word	0x2001e314
   4a4d4:	2001ac90 	.word	0x2001ac90

0004a4d8 <buttons_scan_fn>:
{
   4a4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   4a4da:	b085      	sub	sp, #20
	button_scan = get_buttons();
   4a4dc:	f7ff ff62 	bl	4a3a4 <get_buttons>
   4a4e0:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4a4e2:	4b2e      	ldr	r3, [pc, #184]	; (4a59c <buttons_scan_fn+0xc4>)
   4a4e4:	e8d3 2fef 	ldaex	r2, [r3]
   4a4e8:	e8c3 4fe1 	stlex	r1, r4, [r3]
   4a4ec:	2900      	cmp	r1, #0
   4a4ee:	d1f9      	bne.n	4a4e4 <buttons_scan_fn+0xc>
	if (!initial_run) {
   4a4f0:	4b2b      	ldr	r3, [pc, #172]	; (4a5a0 <buttons_scan_fn+0xc8>)
   4a4f2:	4f2c      	ldr	r7, [pc, #176]	; (4a5a4 <buttons_scan_fn+0xcc>)
   4a4f4:	781a      	ldrb	r2, [r3, #0]
   4a4f6:	bb3a      	cbnz	r2, 4a548 <buttons_scan_fn+0x70>
		if (button_scan != last_button_scan) {
   4a4f8:	683e      	ldr	r6, [r7, #0]
   4a4fa:	42a6      	cmp	r6, r4
   4a4fc:	d019      	beq.n	4a532 <buttons_scan_fn+0x5a>
	if (button_handler_cb != NULL) {
   4a4fe:	4b2a      	ldr	r3, [pc, #168]	; (4a5a8 <buttons_scan_fn+0xd0>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   4a500:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   4a502:	681b      	ldr	r3, [r3, #0]
   4a504:	b10b      	cbz	r3, 4a50a <buttons_scan_fn+0x32>
		button_handler_cb(button_state, has_changed);
   4a506:	4631      	mov	r1, r6
   4a508:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   4a50a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4a50e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4a512:	4826      	ldr	r0, [pc, #152]	; (4a5ac <buttons_scan_fn+0xd4>)
   4a514:	f007 fffe 	bl	52514 <z_impl_k_mutex_lock>
	return list->head;
   4a518:	4b25      	ldr	r3, [pc, #148]	; (4a5b0 <buttons_scan_fn+0xd8>)
   4a51a:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   4a51c:	b135      	cbz	r5, 4a52c <buttons_scan_fn+0x54>
   4a51e:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   4a520:	682b      	ldr	r3, [r5, #0]
   4a522:	4631      	mov	r1, r6
   4a524:	4620      	mov	r0, r4
   4a526:	4798      	blx	r3
	return node->next;
   4a528:	686d      	ldr	r5, [r5, #4]
   4a52a:	e7f7      	b.n	4a51c <buttons_scan_fn+0x44>
	return z_impl_k_mutex_unlock(mutex);
   4a52c:	481f      	ldr	r0, [pc, #124]	; (4a5ac <buttons_scan_fn+0xd4>)
   4a52e:	f008 f86b 	bl	52608 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   4a532:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   4a534:	b15c      	cbz	r4, 4a54e <buttons_scan_fn+0x76>
		k_work_reschedule(&buttons_scan,
   4a536:	f44f 72a4 	mov.w	r2, #328	; 0x148
   4a53a:	2300      	movs	r3, #0
   4a53c:	481d      	ldr	r0, [pc, #116]	; (4a5b4 <buttons_scan_fn+0xdc>)
}
   4a53e:	b005      	add	sp, #20
   4a540:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		k_work_reschedule(&buttons_scan,
   4a544:	f008 ba14 	b.w	52970 <k_work_reschedule>
		initial_run = false;
   4a548:	2200      	movs	r2, #0
   4a54a:	701a      	strb	r2, [r3, #0]
   4a54c:	e7f1      	b.n	4a532 <buttons_scan_fn+0x5a>
	__asm__ volatile(
   4a54e:	f04f 0320 	mov.w	r3, #32
   4a552:	f3ef 8611 	mrs	r6, BASEPRI
   4a556:	f383 8812 	msr	BASEPRI_MAX, r3
   4a55a:	f3bf 8f6f 	isb	sy
		switch (state) {
   4a55e:	4b16      	ldr	r3, [pc, #88]	; (4a5b8 <buttons_scan_fn+0xe0>)
   4a560:	781d      	ldrb	r5, [r3, #0]
   4a562:	2d01      	cmp	r5, #1
   4a564:	d005      	beq.n	4a572 <buttons_scan_fn+0x9a>
	__asm__ volatile(
   4a566:	f386 8811 	msr	BASEPRI, r6
   4a56a:	f3bf 8f6f 	isb	sy
}
   4a56e:	b005      	add	sp, #20
   4a570:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = callback_ctrl(true);
   4a572:	4628      	mov	r0, r5
			state = STATE_WAITING;
   4a574:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   4a576:	f7ff ff4f 	bl	4a418 <callback_ctrl>
   4a57a:	f386 8811 	msr	BASEPRI, r6
   4a57e:	f3bf 8f6f 	isb	sy
		if (err) {
   4a582:	2800      	cmp	r0, #0
   4a584:	d0f3      	beq.n	4a56e <buttons_scan_fn+0x96>
			LOG_ERR("Cannot enable callbacks");
   4a586:	4b0d      	ldr	r3, [pc, #52]	; (4a5bc <buttons_scan_fn+0xe4>)
   4a588:	462a      	mov	r2, r5
   4a58a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4a58e:	4620      	mov	r0, r4
   4a590:	4623      	mov	r3, r4
   4a592:	490b      	ldr	r1, [pc, #44]	; (4a5c0 <buttons_scan_fn+0xe8>)
   4a594:	9400      	str	r4, [sp, #0]
   4a596:	f00d f8b2 	bl	576fe <z_log_msg_runtime_create.constprop.0>
}
   4a59a:	e7e8      	b.n	4a56e <buttons_scan_fn+0x96>
   4a59c:	2001b82c 	.word	0x2001b82c
   4a5a0:	2001aa23 	.word	0x2001aa23
   4a5a4:	2001b800 	.word	0x2001b800
   4a5a8:	2001b830 	.word	0x2001b830
   4a5ac:	2001b804 	.word	0x2001b804
   4a5b0:	2001b818 	.word	0x2001b818
   4a5b4:	2001ac90 	.word	0x2001ac90
   4a5b8:	2001e314 	.word	0x2001e314
   4a5bc:	0005e915 	.word	0x0005e915
   4a5c0:	0005bf5c 	.word	0x0005bf5c

0004a5c4 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4a5c4:	4b05      	ldr	r3, [pc, #20]	; (4a5dc <dk_read_buttons+0x18>)
   4a5c6:	e8d3 3faf 	lda	r3, [r3]
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   4a5ca:	b100      	cbz	r0, 4a5ce <dk_read_buttons+0xa>
		*button_state = current_state;
   4a5cc:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   4a5ce:	4804      	ldr	r0, [pc, #16]	; (4a5e0 <dk_read_buttons+0x1c>)
   4a5d0:	b111      	cbz	r1, 4a5d8 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   4a5d2:	6802      	ldr	r2, [r0, #0]
   4a5d4:	405a      	eors	r2, r3
   4a5d6:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   4a5d8:	6003      	str	r3, [r0, #0]
}
   4a5da:	4770      	bx	lr
   4a5dc:	2001b82c 	.word	0x2001b82c
   4a5e0:	2001b7fc 	.word	0x2001b7fc

0004a5e4 <dk_buttons_init>:
{
   4a5e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   4a5e8:	4b3a      	ldr	r3, [pc, #232]	; (4a6d4 <dk_buttons_init+0xf0>)
{
   4a5ea:	b085      	sub	sp, #20
	button_handler_cb = button_handler;
   4a5ec:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   4a5ee:	4d3a      	ldr	r5, [pc, #232]	; (4a6d8 <dk_buttons_init+0xf4>)
   4a5f0:	483a      	ldr	r0, [pc, #232]	; (4a6dc <dk_buttons_init+0xf8>)
   4a5f2:	f010 f95d 	bl	5a8b0 <z_impl_k_mutex_init>
   4a5f6:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a5f8:	2700      	movs	r7, #0
   4a5fa:	46a8      	mov	r8, r5
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   4a5fc:	88f3      	ldrh	r3, [r6, #6]
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   4a5fe:	4630      	mov	r0, r6
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   4a600:	f013 0f01 	tst.w	r3, #1
   4a604:	bf0c      	ite	eq
   4a606:	2120      	moveq	r1, #32
   4a608:	2110      	movne	r1, #16
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   4a60a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   4a60e:	f00d f861 	bl	576d4 <gpio_pin_configure_dt>
		if (err) {
   4a612:	4604      	mov	r4, r0
   4a614:	b168      	cbz	r0, 4a632 <dk_buttons_init+0x4e>
			LOG_ERR("Cannot configure button gpio");
   4a616:	4b32      	ldr	r3, [pc, #200]	; (4a6e0 <dk_buttons_init+0xfc>)
			LOG_ERR("Cannot disable callbacks()");
   4a618:	9302      	str	r3, [sp, #8]
   4a61a:	2300      	movs	r3, #0
   4a61c:	2201      	movs	r2, #1
   4a61e:	4618      	mov	r0, r3
   4a620:	e9cd 3300 	strd	r3, r3, [sp]
   4a624:	492f      	ldr	r1, [pc, #188]	; (4a6e4 <dk_buttons_init+0x100>)
   4a626:	f00d f86a 	bl	576fe <z_log_msg_runtime_create.constprop.0>
}
   4a62a:	4620      	mov	r0, r4
   4a62c:	b005      	add	sp, #20
   4a62e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a632:	3701      	adds	r7, #1
   4a634:	2f04      	cmp	r7, #4
   4a636:	f106 0608 	add.w	r6, r6, #8
   4a63a:	d1df      	bne.n	4a5fc <dk_buttons_init+0x18>
	uint32_t pin_mask = 0;
   4a63c:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a63e:	4607      	mov	r7, r0
		pin_mask |= BIT(buttons[i].pin);
   4a640:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   4a644:	6828      	ldr	r0, [r5, #0]
   4a646:	7929      	ldrb	r1, [r5, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   4a648:	6883      	ldr	r3, [r0, #8]
   4a64a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   4a64e:	699c      	ldr	r4, [r3, #24]
   4a650:	2300      	movs	r3, #0
   4a652:	47a0      	blx	r4
		if (err) {
   4a654:	4604      	mov	r4, r0
   4a656:	b108      	cbz	r0, 4a65c <dk_buttons_init+0x78>
			LOG_ERR("Cannot disable callbacks()");
   4a658:	4b23      	ldr	r3, [pc, #140]	; (4a6e8 <dk_buttons_init+0x104>)
   4a65a:	e7dd      	b.n	4a618 <dk_buttons_init+0x34>
		pin_mask |= BIT(buttons[i].pin);
   4a65c:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a65e:	3701      	adds	r7, #1
		pin_mask |= BIT(buttons[i].pin);
   4a660:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a664:	2f04      	cmp	r7, #4
		pin_mask |= BIT(buttons[i].pin);
   4a666:	ea46 0603 	orr.w	r6, r6, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a66a:	f105 0508 	add.w	r5, r5, #8
   4a66e:	d1e9      	bne.n	4a644 <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a670:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   4a672:	4f1e      	ldr	r7, [pc, #120]	; (4a6ec <dk_buttons_init+0x108>)
   4a674:	4b1e      	ldr	r3, [pc, #120]	; (4a6f0 <dk_buttons_init+0x10c>)
	callback->pin_mask = pin_mask;
   4a676:	e9c7 3601 	strd	r3, r6, [r7, #4]
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   4a67a:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   4a67e:	6883      	ldr	r3, [r0, #8]
   4a680:	69db      	ldr	r3, [r3, #28]
   4a682:	b133      	cbz	r3, 4a692 <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   4a684:	2201      	movs	r2, #1
   4a686:	4639      	mov	r1, r7
   4a688:	4798      	blx	r3
		if (err) {
   4a68a:	4604      	mov	r4, r0
   4a68c:	b120      	cbz	r0, 4a698 <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
   4a68e:	4b19      	ldr	r3, [pc, #100]	; (4a6f4 <dk_buttons_init+0x110>)
   4a690:	e7c2      	b.n	4a618 <dk_buttons_init+0x34>
		return -ENOTSUP;
   4a692:	f06f 0485 	mvn.w	r4, #133	; 0x85
   4a696:	e7fa      	b.n	4a68e <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   4a698:	3501      	adds	r5, #1
   4a69a:	2d04      	cmp	r5, #4
   4a69c:	d1ed      	bne.n	4a67a <dk_buttons_init+0x96>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   4a69e:	4916      	ldr	r1, [pc, #88]	; (4a6f8 <dk_buttons_init+0x114>)
   4a6a0:	4816      	ldr	r0, [pc, #88]	; (4a6fc <dk_buttons_init+0x118>)
   4a6a2:	f010 fa06 	bl	5aab2 <k_work_init_delayable>
	state = STATE_SCANNING;
   4a6a6:	2201      	movs	r2, #1
   4a6a8:	4b15      	ldr	r3, [pc, #84]	; (4a700 <dk_buttons_init+0x11c>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   4a6aa:	4814      	ldr	r0, [pc, #80]	; (4a6fc <dk_buttons_init+0x118>)
	state = STATE_SCANNING;
   4a6ac:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   4a6ae:	2300      	movs	r3, #0
   4a6b0:	2200      	movs	r2, #0
   4a6b2:	f008 f929 	bl	52908 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   4a6b6:	4621      	mov	r1, r4
   4a6b8:	4620      	mov	r0, r4
   4a6ba:	f7ff ff83 	bl	4a5c4 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   4a6be:	f7ff fe71 	bl	4a3a4 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4a6c2:	4b10      	ldr	r3, [pc, #64]	; (4a704 <dk_buttons_init+0x120>)
   4a6c4:	e8d3 2fef 	ldaex	r2, [r3]
   4a6c8:	e8c3 0fe1 	stlex	r1, r0, [r3]
   4a6cc:	2900      	cmp	r1, #0
   4a6ce:	d0ac      	beq.n	4a62a <dk_buttons_init+0x46>
   4a6d0:	e7f8      	b.n	4a6c4 <dk_buttons_init+0xe0>
   4a6d2:	bf00      	nop
   4a6d4:	2001b830 	.word	0x2001b830
   4a6d8:	0005c4d0 	.word	0x0005c4d0
   4a6dc:	2001b804 	.word	0x2001b804
   4a6e0:	0005e92d 	.word	0x0005e92d
   4a6e4:	0005bf5c 	.word	0x0005bf5c
   4a6e8:	0005e94a 	.word	0x0005e94a
   4a6ec:	2001b820 	.word	0x2001b820
   4a6f0:	0004a479 	.word	0x0004a479
   4a6f4:	0005e965 	.word	0x0005e965
   4a6f8:	0004a4d9 	.word	0x0004a4d9
   4a6fc:	2001ac90 	.word	0x2001ac90
   4a700:	2001e314 	.word	0x2001e314
   4a704:	2001b82c 	.word	0x2001b82c

0004a708 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   4a708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   4a70a:	4809      	ldr	r0, [pc, #36]	; (4a730 <at_monitor_sys_init+0x28>)
   4a70c:	f006 ff3c 	bl	51588 <nrf_modem_at_notif_handler_set>
	if (err) {
   4a710:	b150      	cbz	r0, 4a728 <at_monitor_sys_init+0x20>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   4a712:	4b08      	ldr	r3, [pc, #32]	; (4a734 <at_monitor_sys_init+0x2c>)
   4a714:	9003      	str	r0, [sp, #12]
   4a716:	9302      	str	r3, [sp, #8]
   4a718:	2300      	movs	r3, #0
   4a71a:	2201      	movs	r2, #1
   4a71c:	4618      	mov	r0, r3
   4a71e:	e9cd 3300 	strd	r3, r3, [sp]
   4a722:	4905      	ldr	r1, [pc, #20]	; (4a738 <at_monitor_sys_init+0x30>)
   4a724:	f00c fffb 	bl	5771e <z_log_msg_runtime_create.constprop.0>
	}

	return 0;
}
   4a728:	2000      	movs	r0, #0
   4a72a:	b005      	add	sp, #20
   4a72c:	f85d fb04 	ldr.w	pc, [sp], #4
   4a730:	0004a73d 	.word	0x0004a73d
   4a734:	0005e98d 	.word	0x0005e98d
   4a738:	0005bf3c 	.word	0x0005bf3c

0004a73c <at_monitor_dispatch>:
{
   4a73c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4a73e:	4605      	mov	r5, r0
	monitored = false;
   4a740:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a742:	4c20      	ldr	r4, [pc, #128]	; (4a7c4 <at_monitor_dispatch+0x88>)
   4a744:	4f20      	ldr	r7, [pc, #128]	; (4a7c8 <at_monitor_dispatch+0x8c>)
{
   4a746:	b085      	sub	sp, #20
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a748:	42bc      	cmp	r4, r7
   4a74a:	d317      	bcc.n	4a77c <at_monitor_dispatch+0x40>
	if (!monitored) {
   4a74c:	b1a6      	cbz	r6, 4a778 <at_monitor_dispatch+0x3c>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   4a74e:	4628      	mov	r0, r5
   4a750:	f7f6 fb50 	bl	40df4 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   4a754:	2200      	movs	r2, #0
   4a756:	1d41      	adds	r1, r0, #5
   4a758:	2300      	movs	r3, #0
   4a75a:	481c      	ldr	r0, [pc, #112]	; (4a7cc <at_monitor_dispatch+0x90>)
   4a75c:	f010 f826 	bl	5a7ac <k_heap_alloc>
   4a760:	4604      	mov	r4, r0
	if (!at_notif) {
   4a762:	bb00      	cbnz	r0, 4a7a6 <at_monitor_dispatch+0x6a>
		LOG_WRN("No heap space for incoming notification: %s",
   4a764:	4b1a      	ldr	r3, [pc, #104]	; (4a7d0 <at_monitor_dispatch+0x94>)
   4a766:	2202      	movs	r2, #2
   4a768:	e9cd 0301 	strd	r0, r3, [sp, #4]
   4a76c:	4919      	ldr	r1, [pc, #100]	; (4a7d4 <at_monitor_dispatch+0x98>)
   4a76e:	4603      	mov	r3, r0
   4a770:	9503      	str	r5, [sp, #12]
   4a772:	9000      	str	r0, [sp, #0]
   4a774:	f00c ffd3 	bl	5771e <z_log_msg_runtime_create.constprop.0>
}
   4a778:	b005      	add	sp, #20
   4a77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return mon->flags.paused;
   4a77c:	7a23      	ldrb	r3, [r4, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   4a77e:	07da      	lsls	r2, r3, #31
   4a780:	d405      	bmi.n	4a78e <at_monitor_dispatch+0x52>
   4a782:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   4a784:	b929      	cbnz	r1, 4a792 <at_monitor_dispatch+0x56>
	return mon->flags.direct;
   4a786:	7a23      	ldrb	r3, [r4, #8]
			if (is_direct(e)) {
   4a788:	079b      	lsls	r3, r3, #30
   4a78a:	d408      	bmi.n	4a79e <at_monitor_dispatch+0x62>
				monitored = true;
   4a78c:	2601      	movs	r6, #1
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a78e:	340c      	adds	r4, #12
   4a790:	e7da      	b.n	4a748 <at_monitor_dispatch+0xc>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   4a792:	4628      	mov	r0, r5
   4a794:	f010 fde2 	bl	5b35c <strstr>
   4a798:	2800      	cmp	r0, #0
   4a79a:	d1f4      	bne.n	4a786 <at_monitor_dispatch+0x4a>
   4a79c:	e7f7      	b.n	4a78e <at_monitor_dispatch+0x52>
				e->handler(notif);
   4a79e:	4628      	mov	r0, r5
   4a7a0:	6863      	ldr	r3, [r4, #4]
   4a7a2:	4798      	blx	r3
   4a7a4:	e7f3      	b.n	4a78e <at_monitor_dispatch+0x52>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   4a7a6:	4629      	mov	r1, r5
   4a7a8:	3004      	adds	r0, #4
   4a7aa:	f010 fd82 	bl	5b2b2 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   4a7ae:	4621      	mov	r1, r4
   4a7b0:	4809      	ldr	r0, [pc, #36]	; (4a7d8 <at_monitor_dispatch+0x9c>)
   4a7b2:	f010 f8f6 	bl	5a9a2 <k_queue_append>
	k_work_submit(&at_monitor_work);
   4a7b6:	4809      	ldr	r0, [pc, #36]	; (4a7dc <at_monitor_dispatch+0xa0>)
}
   4a7b8:	b005      	add	sp, #20
   4a7ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_work_submit(&at_monitor_work);
   4a7be:	f008 b83b 	b.w	52838 <k_work_submit>
   4a7c2:	bf00      	nop
   4a7c4:	2001aa44 	.word	0x2001aa44
   4a7c8:	2001aaa4 	.word	0x2001aaa4
   4a7cc:	2001ab0c 	.word	0x2001ab0c
   4a7d0:	0005e9ba 	.word	0x0005e9ba
   4a7d4:	0005bf3c 	.word	0x0005bf3c
   4a7d8:	2001ac30 	.word	0x2001ac30
   4a7dc:	2001a77c 	.word	0x2001a77c

0004a7e0 <at_monitor_task>:
{
   4a7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   4a7e4:	4e14      	ldr	r6, [pc, #80]	; (4a838 <at_monitor_task+0x58>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a7e6:	4f15      	ldr	r7, [pc, #84]	; (4a83c <at_monitor_task+0x5c>)
		k_heap_free(&at_monitor_heap, at_notif);
   4a7e8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4a844 <at_monitor_task+0x64>
   4a7ec:	2200      	movs	r2, #0
   4a7ee:	2300      	movs	r3, #0
   4a7f0:	4630      	mov	r0, r6
   4a7f2:	f007 ff45 	bl	52680 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   4a7f6:	4605      	mov	r5, r0
   4a7f8:	b9c8      	cbnz	r0, 4a82e <at_monitor_task+0x4e>
}
   4a7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   4a7fe:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   4a800:	07da      	lsls	r2, r3, #31
   4a802:	d406      	bmi.n	4a812 <at_monitor_task+0x32>
   4a804:	079b      	lsls	r3, r3, #30
   4a806:	d404      	bmi.n	4a812 <at_monitor_task+0x32>
   4a808:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   4a80a:	b951      	cbnz	r1, 4a822 <at_monitor_task+0x42>
				e->handler(at_notif->data);
   4a80c:	4648      	mov	r0, r9
   4a80e:	6863      	ldr	r3, [r4, #4]
   4a810:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a812:	340c      	adds	r4, #12
   4a814:	42bc      	cmp	r4, r7
   4a816:	d3f2      	bcc.n	4a7fe <at_monitor_task+0x1e>
		k_heap_free(&at_monitor_heap, at_notif);
   4a818:	4629      	mov	r1, r5
   4a81a:	4640      	mov	r0, r8
   4a81c:	f00f ffd0 	bl	5a7c0 <k_heap_free>
   4a820:	e7e4      	b.n	4a7ec <at_monitor_task+0xc>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   4a822:	4648      	mov	r0, r9
   4a824:	f010 fd9a 	bl	5b35c <strstr>
   4a828:	2800      	cmp	r0, #0
   4a82a:	d1ef      	bne.n	4a80c <at_monitor_task+0x2c>
   4a82c:	e7f1      	b.n	4a812 <at_monitor_task+0x32>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   4a82e:	4c04      	ldr	r4, [pc, #16]	; (4a840 <at_monitor_task+0x60>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   4a830:	f105 0904 	add.w	r9, r5, #4
   4a834:	e7ee      	b.n	4a814 <at_monitor_task+0x34>
   4a836:	bf00      	nop
   4a838:	2001ac30 	.word	0x2001ac30
   4a83c:	2001aaa4 	.word	0x2001aaa4
   4a840:	2001aa44 	.word	0x2001aa44
   4a844:	2001ab0c 	.word	0x2001ab0c

0004a848 <z_impl_uart_irq_rx_enable.constprop.0>:
__syscall void uart_irq_rx_enable(const struct device *dev);

static inline void z_impl_uart_irq_rx_enable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   4a848:	4802      	ldr	r0, [pc, #8]	; (4a854 <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_enable != NULL) {
   4a84a:	6883      	ldr	r3, [r0, #8]
   4a84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   4a84e:	b103      	cbz	r3, 4a852 <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
   4a850:	4718      	bx	r3
	}
#else
	ARG_UNUSED(dev);
#endif
}
   4a852:	4770      	bx	lr
   4a854:	0005bc54 	.word	0x0005bc54

0004a858 <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   4a858:	b538      	push	{r3, r4, r5, lr}
	api->poll_out(dev, out_char);
   4a85a:	4d05      	ldr	r5, [pc, #20]	; (4a870 <write_uart_string+0x18>)
   4a85c:	1e44      	subs	r4, r0, #1
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
   4a85e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   4a862:	b901      	cbnz	r1, 4a866 <write_uart_string+0xe>
		uart_poll_out(uart_dev, str[i]);
	}
}
   4a864:	bd38      	pop	{r3, r4, r5, pc}
   4a866:	68ab      	ldr	r3, [r5, #8]
   4a868:	4801      	ldr	r0, [pc, #4]	; (4a870 <write_uart_string+0x18>)
   4a86a:	685b      	ldr	r3, [r3, #4]
   4a86c:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   4a86e:	e7f6      	b.n	4a85e <write_uart_string+0x6>
   4a870:	0005bc54 	.word	0x0005bc54

0004a874 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   4a874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   4a876:	4b0f      	ldr	r3, [pc, #60]	; (4a8b4 <cmd_send+0x40>)
   4a878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   4a87c:	4618      	mov	r0, r3
   4a87e:	4a0e      	ldr	r2, [pc, #56]	; (4a8b8 <cmd_send+0x44>)
   4a880:	f006 fed0 	bl	51624 <nrf_modem_at_cmd>
	if (err < 0) {
   4a884:	2800      	cmp	r0, #0
   4a886:	da0a      	bge.n	4a89e <cmd_send+0x2a>
		LOG_ERR("Error while processing AT command: %d", err);
   4a888:	4b0c      	ldr	r3, [pc, #48]	; (4a8bc <cmd_send+0x48>)
   4a88a:	9003      	str	r0, [sp, #12]
   4a88c:	9302      	str	r3, [sp, #8]
   4a88e:	2300      	movs	r3, #0
   4a890:	2201      	movs	r2, #1
   4a892:	4618      	mov	r0, r3
   4a894:	e9cd 3300 	strd	r3, r3, [sp]
   4a898:	4909      	ldr	r1, [pc, #36]	; (4a8c0 <cmd_send+0x4c>)
   4a89a:	f00c ff51 	bl	57740 <z_log_msg_runtime_create.constprop.0>
	}

	write_uart_string(at_buf);
   4a89e:	4805      	ldr	r0, [pc, #20]	; (4a8b4 <cmd_send+0x40>)
   4a8a0:	f7ff ffda 	bl	4a858 <write_uart_string>

	at_buf_busy = false;
   4a8a4:	2200      	movs	r2, #0
   4a8a6:	4b07      	ldr	r3, [pc, #28]	; (4a8c4 <cmd_send+0x50>)
   4a8a8:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
}
   4a8aa:	b005      	add	sp, #20
   4a8ac:	f85d eb04 	ldr.w	lr, [sp], #4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   4a8b0:	f7ff bfca 	b.w	4a848 <z_impl_uart_irq_rx_enable.constprop.0>
   4a8b4:	2001e316 	.word	0x2001e316
   4a8b8:	0005d362 	.word	0x0005d362
   4a8bc:	0005e9f1 	.word	0x0005e9f1
   4a8c0:	0005bf34 	.word	0x0005bf34
   4a8c4:	2001f316 	.word	0x2001f316

0004a8c8 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   4a8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   4a8ca:	4604      	mov	r4, r0
   4a8cc:	b087      	sub	sp, #28
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   4a8ce:	6883      	ldr	r3, [r0, #8]
   4a8d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   4a8d2:	b103      	cbz	r3, 4a8d6 <isr+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   4a8d4:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   4a8d6:	68a3      	ldr	r3, [r4, #8]
   4a8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   4a8da:	b9c3      	cbnz	r3, 4a90e <isr+0x46>

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!at_buf_busy) &&
   4a8dc:	4e50      	ldr	r6, [pc, #320]	; (4aa20 <isr+0x158>)
		if (at_cmd_len > 0) {
   4a8de:	4d51      	ldr	r5, [pc, #324]	; (4aa24 <isr+0x15c>)
	while ((!at_buf_busy) &&
   4a8e0:	7833      	ldrb	r3, [r6, #0]
   4a8e2:	b9c3      	cbnz	r3, 4a916 <isr+0x4e>
	if (api->fifo_read == NULL) {
   4a8e4:	68a3      	ldr	r3, [r4, #8]
   4a8e6:	699b      	ldr	r3, [r3, #24]
   4a8e8:	b12b      	cbz	r3, 4a8f6 <isr+0x2e>
	return api->fifo_read(dev, rx_data, size);
   4a8ea:	2201      	movs	r2, #1
   4a8ec:	4620      	mov	r0, r4
   4a8ee:	f10d 0117 	add.w	r1, sp, #23
   4a8f2:	4798      	blx	r3
   4a8f4:	b178      	cbz	r0, 4a916 <isr+0x4e>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
   4a8f6:	f89d 3017 	ldrb.w	r3, [sp, #23]
	switch (character) {
   4a8fa:	2b08      	cmp	r3, #8
   4a8fc:	d001      	beq.n	4a902 <isr+0x3a>
   4a8fe:	2b7f      	cmp	r3, #127	; 0x7f
   4a900:	d10b      	bne.n	4a91a <isr+0x52>
		if (at_cmd_len > 0) {
   4a902:	682b      	ldr	r3, [r5, #0]
   4a904:	2b00      	cmp	r3, #0
   4a906:	d0eb      	beq.n	4a8e0 <isr+0x18>
			at_cmd_len--;
   4a908:	3b01      	subs	r3, #1
   4a90a:	602b      	str	r3, [r5, #0]
   4a90c:	e7e8      	b.n	4a8e0 <isr+0x18>
	return api->irq_rx_ready(dev);
   4a90e:	4620      	mov	r0, r4
   4a910:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   4a912:	2800      	cmp	r0, #0
   4a914:	d1e2      	bne.n	4a8dc <isr+0x14>
	}
}
   4a916:	b007      	add	sp, #28
   4a918:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!inside_quotes) {
   4a91a:	4843      	ldr	r0, [pc, #268]	; (4aa28 <isr+0x160>)
   4a91c:	7802      	ldrb	r2, [r0, #0]
   4a91e:	2a00      	cmp	r2, #0
   4a920:	d151      	bne.n	4a9c6 <isr+0xfe>
		switch (character) {
   4a922:	2b0a      	cmp	r3, #10
   4a924:	d023      	beq.n	4a96e <isr+0xa6>
   4a926:	2b0d      	cmp	r3, #13
   4a928:	d00e      	beq.n	4a948 <isr+0x80>
   4a92a:	2b00      	cmp	r3, #0
   4a92c:	d14b      	bne.n	4a9c6 <isr+0xfe>
			if (term_mode == MODE_NULL_TERM) {
   4a92e:	4a3f      	ldr	r2, [pc, #252]	; (4aa2c <isr+0x164>)
   4a930:	7812      	ldrb	r2, [r2, #0]
   4a932:	b16a      	cbz	r2, 4a950 <isr+0x88>
			LOG_WRN("Ignored null; would terminate string early.");
   4a934:	4a3e      	ldr	r2, [pc, #248]	; (4aa30 <isr+0x168>)
   4a936:	4618      	mov	r0, r3
   4a938:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4a93c:	493d      	ldr	r1, [pc, #244]	; (4aa34 <isr+0x16c>)
   4a93e:	2202      	movs	r2, #2
   4a940:	9300      	str	r3, [sp, #0]
   4a942:	f00c fefd 	bl	57740 <z_log_msg_runtime_create.constprop.0>
			return;
   4a946:	e7cb      	b.n	4a8e0 <isr+0x18>
			if (term_mode == MODE_CR) {
   4a948:	4a38      	ldr	r2, [pc, #224]	; (4aa2c <isr+0x164>)
   4a94a:	7812      	ldrb	r2, [r2, #0]
   4a94c:	2a01      	cmp	r2, #1
   4a94e:	d130      	bne.n	4a9b2 <isr+0xea>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   4a950:	2200      	movs	r2, #0
   4a952:	4934      	ldr	r1, [pc, #208]	; (4aa24 <isr+0x15c>)
   4a954:	4b38      	ldr	r3, [pc, #224]	; (4aa38 <isr+0x170>)
   4a956:	680f      	ldr	r7, [r1, #0]
	at_cmd_len = 0;
   4a958:	600a      	str	r2, [r1, #0]
   4a95a:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   4a95c:	55da      	strb	r2, [r3, r7]
	inside_quotes = false;
   4a95e:	7002      	strb	r2, [r0, #0]
		if (*c > ' ') {
   4a960:	f813 2b01 	ldrb.w	r2, [r3], #1
   4a964:	2a20      	cmp	r2, #32
   4a966:	d84b      	bhi.n	4aa00 <isr+0x138>
		} else if (*c == '\0') {
   4a968:	2a00      	cmp	r2, #0
   4a96a:	d1f9      	bne.n	4a960 <isr+0x98>
   4a96c:	e7b8      	b.n	4a8e0 <isr+0x18>
			if (term_mode == MODE_LF) {
   4a96e:	4a2f      	ldr	r2, [pc, #188]	; (4aa2c <isr+0x164>)
   4a970:	7817      	ldrb	r7, [r2, #0]
   4a972:	2f02      	cmp	r7, #2
   4a974:	d0ec      	beq.n	4a950 <isr+0x88>
		if (at_cmd_len > 0) {
   4a976:	492b      	ldr	r1, [pc, #172]	; (4aa24 <isr+0x15c>)
			if (term_mode == MODE_CR_LF &&
   4a978:	2f03      	cmp	r7, #3
		if (at_cmd_len > 0) {
   4a97a:	680a      	ldr	r2, [r1, #0]
			if (term_mode == MODE_CR_LF &&
   4a97c:	d113      	bne.n	4a9a6 <isr+0xde>
   4a97e:	4f2e      	ldr	r7, [pc, #184]	; (4aa38 <isr+0x170>)
   4a980:	b16a      	cbz	r2, 4a99e <isr+0xd6>
			    at_buf[at_cmd_len - 1] == '\r') {
   4a982:	eb07 0c02 	add.w	ip, r7, r2
			    at_cmd_len > 0 &&
   4a986:	f81c cc01 	ldrb.w	ip, [ip, #-1]
   4a98a:	f1bc 0f0d 	cmp.w	ip, #13
   4a98e:	d0df      	beq.n	4a950 <isr+0x88>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   4a990:	1c50      	adds	r0, r2, #1
   4a992:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   4a996:	d21b      	bcs.n	4a9d0 <isr+0x108>
	at_buf[at_cmd_len] = character;
   4a998:	54bb      	strb	r3, [r7, r2]
	at_cmd_len++;
   4a99a:	6008      	str	r0, [r1, #0]
	if (character == '"') {
   4a99c:	e7a0      	b.n	4a8e0 <isr+0x18>
	at_buf[at_cmd_len] = character;
   4a99e:	703b      	strb	r3, [r7, #0]
	at_cmd_len++;
   4a9a0:	2301      	movs	r3, #1
   4a9a2:	600b      	str	r3, [r1, #0]
	if (character == '"') {
   4a9a4:	e79c      	b.n	4a8e0 <isr+0x18>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   4a9a6:	1c50      	adds	r0, r2, #1
   4a9a8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   4a9ac:	d210      	bcs.n	4a9d0 <isr+0x108>
	at_buf[at_cmd_len] = character;
   4a9ae:	4f22      	ldr	r7, [pc, #136]	; (4aa38 <isr+0x170>)
   4a9b0:	e7f2      	b.n	4a998 <isr+0xd0>
		if (at_cmd_len > 0) {
   4a9b2:	4a1c      	ldr	r2, [pc, #112]	; (4aa24 <isr+0x15c>)
   4a9b4:	6810      	ldr	r0, [r2, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   4a9b6:	1c41      	adds	r1, r0, #1
   4a9b8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   4a9bc:	d208      	bcs.n	4a9d0 <isr+0x108>
	at_buf[at_cmd_len] = character;
   4a9be:	4f1e      	ldr	r7, [pc, #120]	; (4aa38 <isr+0x170>)
	at_cmd_len++;
   4a9c0:	6011      	str	r1, [r2, #0]
	at_buf[at_cmd_len] = character;
   4a9c2:	543b      	strb	r3, [r7, r0]
	if (character == '"') {
   4a9c4:	e78c      	b.n	4a8e0 <isr+0x18>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   4a9c6:	682f      	ldr	r7, [r5, #0]
   4a9c8:	1c79      	adds	r1, r7, #1
   4a9ca:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   4a9ce:	d30b      	bcc.n	4a9e8 <isr+0x120>
	switch (character) {
   4a9d0:	9303      	str	r3, [sp, #12]
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   4a9d2:	4b1a      	ldr	r3, [pc, #104]	; (4aa3c <isr+0x174>)
   4a9d4:	2201      	movs	r2, #1
   4a9d6:	9302      	str	r3, [sp, #8]
   4a9d8:	2300      	movs	r3, #0
   4a9da:	4916      	ldr	r1, [pc, #88]	; (4aa34 <isr+0x16c>)
   4a9dc:	4618      	mov	r0, r3
   4a9de:	e9cd 3300 	strd	r3, r3, [sp]
   4a9e2:	f00c fead 	bl	57740 <z_log_msg_runtime_create.constprop.0>
		return;
   4a9e6:	e77b      	b.n	4a8e0 <isr+0x18>
	at_buf[at_cmd_len] = character;
   4a9e8:	f8df c04c 	ldr.w	ip, [pc, #76]	; 4aa38 <isr+0x170>
	if (character == '"') {
   4a9ec:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
   4a9ee:	f80c 3007 	strb.w	r3, [ip, r7]
	at_cmd_len++;
   4a9f2:	6029      	str	r1, [r5, #0]
	if (character == '"') {
   4a9f4:	f47f af74 	bne.w	4a8e0 <isr+0x18>
	if (!inside_quotes) {
   4a9f8:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
   4a9fc:	7002      	strb	r2, [r0, #0]
   4a9fe:	e76f      	b.n	4a8e0 <isr+0x18>
	if (at_buf[0]) {
   4aa00:	780b      	ldrb	r3, [r1, #0]
   4aa02:	2b00      	cmp	r3, #0
   4aa04:	f43f af6c 	beq.w	4a8e0 <isr+0x18>
	const struct uart_driver_api *api =
   4aa08:	480d      	ldr	r0, [pc, #52]	; (4aa40 <isr+0x178>)
	if (api->irq_rx_disable != NULL) {
   4aa0a:	6883      	ldr	r3, [r0, #8]
   4aa0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   4aa0e:	b103      	cbz	r3, 4aa12 <isr+0x14a>
		api->irq_rx_disable(dev);
   4aa10:	4798      	blx	r3
		at_buf_busy = true;
   4aa12:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   4aa14:	490b      	ldr	r1, [pc, #44]	; (4aa44 <isr+0x17c>)
   4aa16:	480c      	ldr	r0, [pc, #48]	; (4aa48 <isr+0x180>)
		at_buf_busy = true;
   4aa18:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   4aa1a:	f010 f839 	bl	5aa90 <k_work_submit_to_queue>
   4aa1e:	e75f      	b.n	4a8e0 <isr+0x18>
   4aa20:	2001f316 	.word	0x2001f316
   4aa24:	2001b834 	.word	0x2001b834
   4aa28:	2001e315 	.word	0x2001e315
   4aa2c:	2001f317 	.word	0x2001f317
   4aa30:	0005ea17 	.word	0x0005ea17
   4aa34:	0005bf34 	.word	0x0005bf34
   4aa38:	2001e316 	.word	0x2001e316
   4aa3c:	0005ea43 	.word	0x0005ea43
   4aa40:	0005bc54 	.word	0x0005bc54
   4aa44:	2001b838 	.word	0x2001b838
   4aa48:	2001acc0 	.word	0x2001acc0

0004aa4c <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   4aa4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   4aa50:	2401      	movs	r4, #1
   4aa52:	4b45      	ldr	r3, [pc, #276]	; (4ab68 <at_host_init+0x11c>)
{
   4aa54:	b087      	sub	sp, #28
		term_mode = mode;
   4aa56:	701c      	strb	r4, [r3, #0]
   4aa58:	4844      	ldr	r0, [pc, #272]	; (4ab6c <at_host_init+0x120>)
   4aa5a:	f00f fe32 	bl	5a6c2 <z_device_is_ready>
   4aa5e:	4603      	mov	r3, r0
	if (!device_is_ready(uart_dev)) {
   4aa60:	b9d0      	cbnz	r0, 4aa98 <at_host_init+0x4c>
		LOG_ERR("UART device not ready");
   4aa62:	4a43      	ldr	r2, [pc, #268]	; (4ab70 <at_host_init+0x124>)
   4aa64:	4943      	ldr	r1, [pc, #268]	; (4ab74 <at_host_init+0x128>)
   4aa66:	e9cd 0201 	strd	r0, r2, [sp, #4]
   4aa6a:	9000      	str	r0, [sp, #0]
   4aa6c:	4622      	mov	r2, r4
   4aa6e:	f00c fe67 	bl	57740 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   4aa72:	f06f 0312 	mvn.w	r3, #18
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   4aa76:	9303      	str	r3, [sp, #12]
   4aa78:	4b3f      	ldr	r3, [pc, #252]	; (4ab78 <at_host_init+0x12c>)
   4aa7a:	2201      	movs	r2, #1
   4aa7c:	9302      	str	r3, [sp, #8]
   4aa7e:	2300      	movs	r3, #0
   4aa80:	493c      	ldr	r1, [pc, #240]	; (4ab74 <at_host_init+0x128>)
   4aa82:	4618      	mov	r0, r3
   4aa84:	e9cd 3300 	strd	r3, r3, [sp]
   4aa88:	f00c fe5a 	bl	57740 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4aa8c:	f06f 090d 	mvn.w	r9, #13
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   4aa90:	4648      	mov	r0, r9
   4aa92:	b007      	add	sp, #28
   4aa94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_uptime_ticks();
   4aa98:	f010 f942 	bl	5ad20 <z_impl_k_uptime_ticks>
   4aa9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   4aaa0:	fba0 0302 	umull	r0, r3, r0, r2
   4aaa4:	fb02 3301 	mla	r3, r2, r1, r3
	const struct uart_driver_api *api =
   4aaa8:	4e30      	ldr	r6, [pc, #192]	; (4ab6c <at_host_init+0x120>)
   4aaaa:	0bc0      	lsrs	r0, r0, #15
   4aaac:	68b7      	ldr	r7, [r6, #8]
			LOG_INF("UART check failed: %d. "
   4aaae:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 4ab94 <at_host_init+0x148>
   4aab2:	ea40 4543 	orr.w	r5, r0, r3, lsl #17
	if (api->err_check == NULL) {
   4aab6:	68bb      	ldr	r3, [r7, #8]
   4aab8:	b1b3      	cbz	r3, 4aae8 <at_host_init+0x9c>
	return api->err_check(dev);
   4aaba:	4630      	mov	r0, r6
   4aabc:	4798      	blx	r3
		if (err) {
   4aabe:	4681      	mov	r9, r0
   4aac0:	b9a0      	cbnz	r0, 4aaec <at_host_init+0xa0>
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   4aac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   4aac4:	2b00      	cmp	r3, #0
   4aac6:	d149      	bne.n	4ab5c <at_host_init+0x110>
	k_work_init(&cmd_send_work, cmd_send);
   4aac8:	492c      	ldr	r1, [pc, #176]	; (4ab7c <at_host_init+0x130>)
   4aaca:	482d      	ldr	r0, [pc, #180]	; (4ab80 <at_host_init+0x134>)
   4aacc:	f00f ffc3 	bl	5aa56 <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   4aad0:	2300      	movs	r3, #0
   4aad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   4aad6:	9300      	str	r3, [sp, #0]
   4aad8:	492a      	ldr	r1, [pc, #168]	; (4ab84 <at_host_init+0x138>)
   4aada:	230a      	movs	r3, #10
   4aadc:	482a      	ldr	r0, [pc, #168]	; (4ab88 <at_host_init+0x13c>)
   4aade:	f007 feb1 	bl	52844 <k_work_queue_start>
   4aae2:	f7ff feb1 	bl	4a848 <z_impl_uart_irq_rx_enable.constprop.0>
}
   4aae6:	e7d3      	b.n	4aa90 <at_host_init+0x44>
		return -ENOSYS;
   4aae8:	f06f 0957 	mvn.w	r9, #87	; 0x57
   4aaec:	f010 f918 	bl	5ad20 <z_impl_k_uptime_ticks>
   4aaf0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   4aaf4:	fba0 0204 	umull	r0, r2, r0, r4
   4aaf8:	fb04 2201 	mla	r2, r4, r1, r2
   4aafc:	0bc4      	lsrs	r4, r0, #15
   4aafe:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			if (k_uptime_get_32() - start_time >
   4ab02:	1b64      	subs	r4, r4, r5
   4ab04:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   4ab08:	f04f 0300 	mov.w	r3, #0
				LOG_ERR("UART check failed: %d. "
   4ab0c:	f8cd 900c 	str.w	r9, [sp, #12]
			if (k_uptime_get_32() - start_time >
   4ab10:	d90b      	bls.n	4ab2a <at_host_init+0xde>
				LOG_ERR("UART check failed: %d. "
   4ab12:	4a1e      	ldr	r2, [pc, #120]	; (4ab8c <at_host_init+0x140>)
   4ab14:	4618      	mov	r0, r3
   4ab16:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4ab1a:	9300      	str	r3, [sp, #0]
   4ab1c:	2201      	movs	r2, #1
   4ab1e:	4915      	ldr	r1, [pc, #84]	; (4ab74 <at_host_init+0x128>)
   4ab20:	f00c fe0e 	bl	57740 <z_log_msg_runtime_create.constprop.0>
				return -EIO;
   4ab24:	f06f 0304 	mvn.w	r3, #4
   4ab28:	e7a5      	b.n	4aa76 <at_host_init+0x2a>
			LOG_INF("UART check failed: %d. "
   4ab2a:	2203      	movs	r2, #3
   4ab2c:	4618      	mov	r0, r3
   4ab2e:	e9cd 3801 	strd	r3, r8, [sp, #4]
   4ab32:	4910      	ldr	r1, [pc, #64]	; (4ab74 <at_host_init+0x128>)
   4ab34:	9300      	str	r3, [sp, #0]
   4ab36:	f00c fe03 	bl	57740 <z_log_msg_runtime_create.constprop.0>
	if (api->fifo_read == NULL) {
   4ab3a:	68b4      	ldr	r4, [r6, #8]
   4ab3c:	69a3      	ldr	r3, [r4, #24]
   4ab3e:	2b00      	cmp	r3, #0
   4ab40:	d0fc      	beq.n	4ab3c <at_host_init+0xf0>
	return api->fifo_read(dev, rx_data, size);
   4ab42:	2201      	movs	r2, #1
   4ab44:	4630      	mov	r0, r6
   4ab46:	f10d 0117 	add.w	r1, sp, #23
   4ab4a:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   4ab4c:	2800      	cmp	r0, #0
   4ab4e:	d1f5      	bne.n	4ab3c <at_host_init+0xf0>
	return z_impl_k_sleep(timeout);
   4ab50:	2100      	movs	r1, #0
   4ab52:	f44f 70a4 	mov.w	r0, #328	; 0x148
   4ab56:	f008 f9d9 	bl	52f0c <z_impl_k_sleep>
	} while (err);
   4ab5a:	e7ac      	b.n	4aab6 <at_host_init+0x6a>
		api->irq_callback_set(dev, cb, user_data);
   4ab5c:	4602      	mov	r2, r0
   4ab5e:	490c      	ldr	r1, [pc, #48]	; (4ab90 <at_host_init+0x144>)
   4ab60:	4802      	ldr	r0, [pc, #8]	; (4ab6c <at_host_init+0x120>)
   4ab62:	4798      	blx	r3
	if (err) {
   4ab64:	e7b0      	b.n	4aac8 <at_host_init+0x7c>
   4ab66:	bf00      	nop
   4ab68:	2001f317 	.word	0x2001f317
   4ab6c:	0005bc54 	.word	0x0005bc54
   4ab70:	0005ea63 	.word	0x0005ea63
   4ab74:	0005bf34 	.word	0x0005bf34
   4ab78:	0005eae4 	.word	0x0005eae4
   4ab7c:	0004a875 	.word	0x0004a875
   4ab80:	2001b838 	.word	0x2001b838
   4ab84:	20020a40 	.word	0x20020a40
   4ab88:	2001acc0 	.word	0x2001acc0
   4ab8c:	0005ea79 	.word	0x0005ea79
   4ab90:	0004a8c9 	.word	0x0004a8c9
   4ab94:	0005eaaf 	.word	0x0005eaaf

0004ab98 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   4ab98:	4b09      	ldr	r3, [pc, #36]	; (4abc0 <is_valid_notification_char+0x28>)
   4ab9a:	5c1b      	ldrb	r3, [r3, r0]
   4ab9c:	f003 0303 	and.w	r3, r3, #3
   4aba0:	2b02      	cmp	r3, #2
   4aba2:	bf08      	it	eq
   4aba4:	3820      	subeq	r0, #32
   4aba6:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   4aba8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   4abac:	2b19      	cmp	r3, #25
   4abae:	d904      	bls.n	4abba <is_valid_notification_char+0x22>
   4abb0:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   4abb4:	4258      	negs	r0, r3
   4abb6:	4158      	adcs	r0, r3
   4abb8:	4770      	bx	lr
		return true;
   4abba:	2001      	movs	r0, #1
	}

	return false;
}
   4abbc:	4770      	bx	lr
   4abbe:	bf00      	nop
   4abc0:	0006098d 	.word	0x0006098d

0004abc4 <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   4abc4:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   4abc8:	b2db      	uxtb	r3, r3
   4abca:	2b11      	cmp	r3, #17
   4abcc:	bf9d      	ittte	ls
   4abce:	4803      	ldrls	r0, [pc, #12]	; (4abdc <is_separator+0x18>)
   4abd0:	40d8      	lsrls	r0, r3
   4abd2:	f000 0001 	andls.w	r0, r0, #1
{
   4abd6:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   4abd8:	4770      	bx	lr
   4abda:	bf00      	nop
   4abdc:	00024001 	.word	0x00024001

0004abe0 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   4abe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4abe2:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   4abe4:	2400      	movs	r4, #0
   4abe6:	4e09      	ldr	r6, [pc, #36]	; (4ac0c <is_result+0x2c>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   4abe8:	f856 7b04 	ldr.w	r7, [r6], #4
   4abec:	4638      	mov	r0, r7
   4abee:	f7f6 f901 	bl	40df4 <strlen>
   4abf2:	4639      	mov	r1, r7
   4abf4:	4602      	mov	r2, r0
   4abf6:	4628      	mov	r0, r5
   4abf8:	f010 fb7f 	bl	5b2fa <strncmp>
		if (!diff) {
   4abfc:	b120      	cbz	r0, 4ac08 <is_result+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   4abfe:	3401      	adds	r4, #1
   4ac00:	2c04      	cmp	r4, #4
   4ac02:	d1f1      	bne.n	4abe8 <is_result+0x8>
			return true;
		}
	}

	return false;
   4ac04:	2000      	movs	r0, #0
}
   4ac06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
   4ac08:	2001      	movs	r0, #1
   4ac0a:	e7fc      	b.n	4ac06 <is_result+0x26>
   4ac0c:	0005c4f0 	.word	0x0005c4f0

0004ac10 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   4ac10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   4ac14:	6804      	ldr	r4, [r0, #0]
{
   4ac16:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4ac18:	7823      	ldrb	r3, [r4, #0]
   4ac1a:	4680      	mov	r8, r0
   4ac1c:	460e      	mov	r6, r1
   4ac1e:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   4ac20:	9400      	str	r4, [sp, #0]
   4ac22:	2b00      	cmp	r3, #0
   4ac24:	f000 80cd 	beq.w	4adc2 <at_parse_process_element+0x1b2>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   4ac28:	4b67      	ldr	r3, [pc, #412]	; (4adc8 <at_parse_process_element+0x1b8>)
   4ac2a:	781b      	ldrb	r3, [r3, #0]
   4ac2c:	2b06      	cmp	r3, #6
   4ac2e:	d113      	bne.n	4ac58 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   4ac30:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   4ac32:	1c62      	adds	r2, r4, #1
   4ac34:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   4ac36:	4611      	mov	r1, r2
   4ac38:	4607      	mov	r7, r0
   4ac3a:	f812 0b01 	ldrb.w	r0, [r2], #1
   4ac3e:	f7ff ffab 	bl	4ab98 <is_valid_notification_char>
   4ac42:	2800      	cmp	r0, #0
   4ac44:	d1f7      	bne.n	4ac36 <at_parse_process_element+0x26>
   4ac46:	b107      	cbz	r7, 4ac4a <at_parse_process_element+0x3a>
   4ac48:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   4ac4a:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   4ac4c:	4622      	mov	r2, r4
   4ac4e:	4631      	mov	r1, r6
   4ac50:	4628      	mov	r0, r5
   4ac52:	f00c fe16 	bl	57882 <at_params_string_put>
   4ac56:	e046      	b.n	4ace6 <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   4ac58:	3b01      	subs	r3, #1
   4ac5a:	2b08      	cmp	r3, #8
   4ac5c:	d843      	bhi.n	4ace6 <at_parse_process_element+0xd6>
   4ac5e:	e8df f003 	tbb	[pc, r3]
   4ac62:	4964      	.short	0x4964
   4ac64:	420da05a 	.word	0x420da05a
   4ac68:	3f1c      	.short	0x3f1c
   4ac6a:	05          	.byte	0x05
   4ac6b:	00          	.byte	0x00
   4ac6c:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   4ac6e:	2100      	movs	r1, #0
   4ac70:	4613      	mov	r3, r2
   4ac72:	f812 0b01 	ldrb.w	r0, [r2], #1
   4ac76:	b160      	cbz	r0, 4ac92 <at_parse_process_element+0x82>
   4ac78:	2101      	movs	r1, #1
   4ac7a:	e7f9      	b.n	4ac70 <at_parse_process_element+0x60>
   4ac7c:	4622      	mov	r2, r4
   4ac7e:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   4ac80:	4f52      	ldr	r7, [pc, #328]	; (4adcc <at_parse_process_element+0x1bc>)
   4ac82:	4613      	mov	r3, r2
   4ac84:	f812 0b01 	ldrb.w	r0, [r2], #1
   4ac88:	5c38      	ldrb	r0, [r7, r0]
   4ac8a:	f010 0f44 	tst.w	r0, #68	; 0x44
   4ac8e:	f040 8096 	bne.w	4adbe <at_parse_process_element+0x1ae>
   4ac92:	b101      	cbz	r1, 4ac96 <at_parse_process_element+0x86>
   4ac94:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   4ac96:	1b1b      	subs	r3, r3, r4
   4ac98:	e7d8      	b.n	4ac4c <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   4ac9a:	4668      	mov	r0, sp
   4ac9c:	f00c fd68 	bl	57770 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   4aca0:	2200      	movs	r2, #0
   4aca2:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   4aca4:	4849      	ldr	r0, [pc, #292]	; (4adcc <at_parse_process_element+0x1bc>)
   4aca6:	461f      	mov	r7, r3
   4aca8:	f813 1b01 	ldrb.w	r1, [r3], #1
   4acac:	5c41      	ldrb	r1, [r0, r1]
   4acae:	0749      	lsls	r1, r1, #29
   4acb0:	d110      	bne.n	4acd4 <at_parse_process_element+0xc4>
   4acb2:	b102      	cbz	r2, 4acb6 <at_parse_process_element+0xa6>
   4acb4:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   4acb6:	1b3b      	subs	r3, r7, r4
   4acb8:	4622      	mov	r2, r4
   4acba:	4631      	mov	r1, r6
   4acbc:	4628      	mov	r0, r5
   4acbe:	f00c fde0 	bl	57882 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   4acc2:	783b      	ldrb	r3, [r7, #0]
   4acc4:	2b3d      	cmp	r3, #61	; 0x3d
   4acc6:	d107      	bne.n	4acd8 <at_parse_process_element+0xc8>
   4acc8:	787b      	ldrb	r3, [r7, #1]
   4acca:	2b3f      	cmp	r3, #63	; 0x3f
   4accc:	d10b      	bne.n	4ace6 <at_parse_process_element+0xd6>
			tmpstr += 2;
   4acce:	3702      	adds	r7, #2
		tmpstr++;
   4acd0:	9700      	str	r7, [sp, #0]
   4acd2:	e008      	b.n	4ace6 <at_parse_process_element+0xd6>
   4acd4:	2201      	movs	r2, #1
   4acd6:	e7e6      	b.n	4aca6 <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   4acd8:	2b3f      	cmp	r3, #63	; 0x3f
   4acda:	d104      	bne.n	4ace6 <at_parse_process_element+0xd6>
			tmpstr++;
   4acdc:	3701      	adds	r7, #1
   4acde:	e7f7      	b.n	4acd0 <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   4ace0:	4628      	mov	r0, r5
   4ace2:	f00c fda4 	bl	5782e <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   4ace6:	2000      	movs	r0, #0
	*str = tmpstr;
   4ace8:	9b00      	ldr	r3, [sp, #0]
   4acea:	f8c8 3000 	str.w	r3, [r8]
}
   4acee:	b023      	add	sp, #140	; 0x8c
   4acf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   4acf4:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   4acf6:	783a      	ldrb	r2, [r7, #0]
   4acf8:	4610      	mov	r0, r2
   4acfa:	f00c fd30 	bl	5775e <is_lfcr>
   4acfe:	463b      	mov	r3, r7
			tmpstr++;
   4ad00:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   4ad02:	b908      	cbnz	r0, 4ad08 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4ad04:	2a00      	cmp	r2, #0
   4ad06:	d1f6      	bne.n	4acf6 <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   4ad08:	4622      	mov	r2, r4
   4ad0a:	4631      	mov	r1, r6
   4ad0c:	4628      	mov	r0, r5
   4ad0e:	1b1b      	subs	r3, r3, r4
   4ad10:	f00c fdb7 	bl	57882 <at_params_string_put>
   4ad14:	e7dc      	b.n	4acd0 <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   4ad16:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   4ad18:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   4ad1a:	463b      	mov	r3, r7
   4ad1c:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   4ad1e:	f107 0701 	add.w	r7, r7, #1
   4ad22:	d0f1      	beq.n	4ad08 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4ad24:	2a00      	cmp	r2, #0
   4ad26:	d1f7      	bne.n	4ad18 <at_parse_process_element+0x108>
   4ad28:	e7ee      	b.n	4ad08 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   4ad2a:	4620      	mov	r0, r4
   4ad2c:	220a      	movs	r2, #10
   4ad2e:	a901      	add	r1, sp, #4
   4ad30:	f009 f922 	bl	53f78 <strtoul>
   4ad34:	2401      	movs	r4, #1
		tmpstr = next;
   4ad36:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   4ad38:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   4ad3a:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   4ad3c:	9b00      	ldr	r3, [sp, #0]
   4ad3e:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   4ad40:	2829      	cmp	r0, #41	; 0x29
   4ad42:	d023      	beq.n	4ad8c <at_parse_process_element+0x17c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4ad44:	b310      	cbz	r0, 4ad8c <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   4ad46:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   4ad4a:	f7ff ff3b 	bl	4abc4 <is_separator>
				tmparray[i++] =
   4ad4e:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   4ad52:	b908      	cbnz	r0, 4ad58 <at_parse_process_element+0x148>
					tmpstr = next;
   4ad54:	4627      	mov	r7, r4
   4ad56:	e017      	b.n	4ad88 <at_parse_process_element+0x178>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   4ad58:	220a      	movs	r2, #10
   4ad5a:	a901      	add	r1, sp, #4
   4ad5c:	4648      	mov	r0, r9
   4ad5e:	f009 f90b 	bl	53f78 <strtoul>
				tmparray[i++] =
   4ad62:	ab22      	add	r3, sp, #136	; 0x88
   4ad64:	1c67      	adds	r7, r4, #1
   4ad66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   4ad6a:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   4ad6e:	4648      	mov	r0, r9
   4ad70:	f7f6 f840 	bl	40df4 <strlen>
   4ad74:	4604      	mov	r4, r0
   4ad76:	9801      	ldr	r0, [sp, #4]
   4ad78:	f7f6 f83c 	bl	40df4 <strlen>
   4ad7c:	4284      	cmp	r4, r0
   4ad7e:	d006      	beq.n	4ad8e <at_parse_process_element+0x17e>
					tmpstr = next;
   4ad80:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   4ad82:	2f20      	cmp	r7, #32
					tmpstr = next;
   4ad84:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   4ad86:	d002      	beq.n	4ad8e <at_parse_process_element+0x17e>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   4ad88:	463c      	mov	r4, r7
   4ad8a:	e7d7      	b.n	4ad3c <at_parse_process_element+0x12c>
   4ad8c:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   4ad8e:	00bb      	lsls	r3, r7, #2
   4ad90:	4631      	mov	r1, r6
   4ad92:	4628      	mov	r0, r5
   4ad94:	aa02      	add	r2, sp, #8
   4ad96:	f00c fd97 	bl	578c8 <at_params_array_put>
		tmpstr++;
   4ad9a:	9b00      	ldr	r3, [sp, #0]
   4ad9c:	3301      	adds	r3, #1
   4ad9e:	9300      	str	r3, [sp, #0]
   4ada0:	e7a1      	b.n	4ace6 <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   4ada2:	220a      	movs	r2, #10
   4ada4:	4620      	mov	r0, r4
   4ada6:	a902      	add	r1, sp, #8
   4ada8:	f009 f86a 	bl	53e80 <strtoll>
   4adac:	460b      	mov	r3, r1
		tmpstr = next;
   4adae:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   4adb0:	4602      	mov	r2, r0
		tmpstr = next;
   4adb2:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   4adb4:	4628      	mov	r0, r5
   4adb6:	4631      	mov	r1, r6
   4adb8:	f00c fd4e 	bl	57858 <at_params_int_put>
   4adbc:	e793      	b.n	4ace6 <at_parse_process_element+0xd6>
   4adbe:	2101      	movs	r1, #1
   4adc0:	e75f      	b.n	4ac82 <at_parse_process_element+0x72>
		return -1;
   4adc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4adc6:	e792      	b.n	4acee <at_parse_process_element+0xde>
   4adc8:	2001f319 	.word	0x2001f319
   4adcc:	0006098d 	.word	0x0006098d

0004add0 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   4add0:	b510      	push	{r4, lr}
   4add2:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   4add4:	f7f6 f80e 	bl	40df4 <strlen>
   4add8:	2801      	cmp	r0, #1
   4adda:	d921      	bls.n	4ae20 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   4addc:	7823      	ldrb	r3, [r4, #0]
   4adde:	4912      	ldr	r1, [pc, #72]	; (4ae28 <is_command+0x58>)
   4ade0:	5cca      	ldrb	r2, [r1, r3]
   4ade2:	f002 0203 	and.w	r2, r2, #3
   4ade6:	2a02      	cmp	r2, #2
   4ade8:	bf08      	it	eq
   4adea:	3b20      	subeq	r3, #32
   4adec:	2b41      	cmp	r3, #65	; 0x41
   4adee:	d117      	bne.n	4ae20 <is_command+0x50>
   4adf0:	7863      	ldrb	r3, [r4, #1]
   4adf2:	5cca      	ldrb	r2, [r1, r3]
   4adf4:	f002 0203 	and.w	r2, r2, #3
   4adf8:	2a02      	cmp	r2, #2
   4adfa:	bf08      	it	eq
   4adfc:	3b20      	subeq	r3, #32
   4adfe:	2b54      	cmp	r3, #84	; 0x54
   4ae00:	d10e      	bne.n	4ae20 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   4ae02:	78a2      	ldrb	r2, [r4, #2]
   4ae04:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   4ae08:	2b23      	cmp	r3, #35	; 0x23
   4ae0a:	d00b      	beq.n	4ae24 <is_command+0x54>
   4ae0c:	2a25      	cmp	r2, #37	; 0x25
   4ae0e:	d009      	beq.n	4ae24 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   4ae10:	4610      	mov	r0, r2
   4ae12:	f00c fca4 	bl	5775e <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   4ae16:	b910      	cbnz	r0, 4ae1e <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4ae18:	fab2 f082 	clz	r0, r2
   4ae1c:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   4ae1e:	bd10      	pop	{r4, pc}
		return false;
   4ae20:	2000      	movs	r0, #0
   4ae22:	e7fc      	b.n	4ae1e <is_command+0x4e>
		return true;
   4ae24:	2001      	movs	r0, #1
   4ae26:	e7fa      	b.n	4ae1e <is_command+0x4e>
   4ae28:	0006098d 	.word	0x0006098d

0004ae2c <at_parse_detect_type>:
{
   4ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4ae2e:	4606      	mov	r6, r0
	const char *tmpstr = *str;
   4ae30:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   4ae32:	4f65      	ldr	r7, [pc, #404]	; (4afc8 <at_parse_detect_type+0x19c>)
   4ae34:	2900      	cmp	r1, #0
   4ae36:	d137      	bne.n	4aea8 <at_parse_detect_type+0x7c>
   4ae38:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   4ae3a:	4d64      	ldr	r5, [pc, #400]	; (4afcc <at_parse_detect_type+0x1a0>)
   4ae3c:	2b2b      	cmp	r3, #43	; 0x2b
   4ae3e:	d001      	beq.n	4ae44 <at_parse_detect_type+0x18>
   4ae40:	2b25      	cmp	r3, #37	; 0x25
   4ae42:	d170      	bne.n	4af26 <at_parse_detect_type+0xfa>
	state = new_state;
   4ae44:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   4ae46:	2205      	movs	r2, #5
   4ae48:	4620      	mov	r0, r4
   4ae4a:	4961      	ldr	r1, [pc, #388]	; (4afd0 <at_parse_detect_type+0x1a4>)
	state = new_state;
   4ae4c:	702b      	strb	r3, [r5, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   4ae4e:	f010 fa54 	bl	5b2fa <strncmp>
   4ae52:	b920      	cbnz	r0, 4ae5e <at_parse_detect_type+0x32>
			retval = true;
   4ae54:	2301      	movs	r3, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   4ae56:	703b      	strb	r3, [r7, #0]
	return 0;
   4ae58:	2000      	movs	r0, #0
	*str = tmpstr;
   4ae5a:	6034      	str	r4, [r6, #0]
	return 0;
   4ae5c:	e062      	b.n	4af24 <at_parse_detect_type+0xf8>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   4ae5e:	2205      	movs	r2, #5
   4ae60:	4620      	mov	r0, r4
   4ae62:	495c      	ldr	r1, [pc, #368]	; (4afd4 <at_parse_detect_type+0x1a8>)
   4ae64:	f010 fa49 	bl	5b2fa <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   4ae68:	2800      	cmp	r0, #0
   4ae6a:	d0f3      	beq.n	4ae54 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   4ae6c:	220b      	movs	r2, #11
   4ae6e:	4620      	mov	r0, r4
   4ae70:	4959      	ldr	r1, [pc, #356]	; (4afd8 <at_parse_detect_type+0x1ac>)
   4ae72:	f010 fa42 	bl	5b2fa <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   4ae76:	2800      	cmp	r0, #0
   4ae78:	d0ec      	beq.n	4ae54 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   4ae7a:	220a      	movs	r2, #10
   4ae7c:	4620      	mov	r0, r4
   4ae7e:	4957      	ldr	r1, [pc, #348]	; (4afdc <at_parse_detect_type+0x1b0>)
   4ae80:	f010 fa3b 	bl	5b2fa <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   4ae84:	2800      	cmp	r0, #0
   4ae86:	d0e5      	beq.n	4ae54 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   4ae88:	220b      	movs	r2, #11
   4ae8a:	4620      	mov	r0, r4
   4ae8c:	4954      	ldr	r1, [pc, #336]	; (4afe0 <at_parse_detect_type+0x1b4>)
   4ae8e:	f010 fa34 	bl	5b2fa <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   4ae92:	2800      	cmp	r0, #0
   4ae94:	d0de      	beq.n	4ae54 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   4ae96:	2207      	movs	r2, #7
   4ae98:	4620      	mov	r0, r4
   4ae9a:	4952      	ldr	r1, [pc, #328]	; (4afe4 <at_parse_detect_type+0x1b8>)
   4ae9c:	f010 fa2d 	bl	5b2fa <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   4aea0:	fab0 f380 	clz	r3, r0
   4aea4:	095b      	lsrs	r3, r3, #5
   4aea6:	e7d6      	b.n	4ae56 <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   4aea8:	783b      	ldrb	r3, [r7, #0]
   4aeaa:	2b00      	cmp	r3, #0
   4aeac:	d13d      	bne.n	4af2a <at_parse_detect_type+0xfe>
	} else if ((index > 0) && is_clac(tmpstr)) {
   4aeae:	2900      	cmp	r1, #0
   4aeb0:	dd51      	ble.n	4af56 <at_parse_detect_type+0x12a>
   4aeb2:	4622      	mov	r2, r4
   4aeb4:	4615      	mov	r5, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   4aeb6:	f812 0b01 	ldrb.w	r0, [r2], #1
   4aeba:	f00c fc50 	bl	5775e <is_lfcr>
   4aebe:	2800      	cmp	r0, #0
   4aec0:	d1f8      	bne.n	4aeb4 <at_parse_detect_type+0x88>
		str++;
	}

	if (strlen(str) < 4) {
   4aec2:	4628      	mov	r0, r5
   4aec4:	f7f5 ff96 	bl	40df4 <strlen>
   4aec8:	2803      	cmp	r0, #3
   4aeca:	d932      	bls.n	4af32 <at_parse_detect_type+0x106>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   4aecc:	782b      	ldrb	r3, [r5, #0]
   4aece:	4a46      	ldr	r2, [pc, #280]	; (4afe8 <at_parse_detect_type+0x1bc>)
   4aed0:	5cd1      	ldrb	r1, [r2, r3]
   4aed2:	f001 0103 	and.w	r1, r1, #3
   4aed6:	2902      	cmp	r1, #2
   4aed8:	bf08      	it	eq
   4aeda:	3b20      	subeq	r3, #32
   4aedc:	2b41      	cmp	r3, #65	; 0x41
   4aede:	d128      	bne.n	4af32 <at_parse_detect_type+0x106>
   4aee0:	786b      	ldrb	r3, [r5, #1]
   4aee2:	5cd1      	ldrb	r1, [r2, r3]
   4aee4:	f001 0103 	and.w	r1, r1, #3
   4aee8:	2902      	cmp	r1, #2
   4aeea:	bf08      	it	eq
   4aeec:	3b20      	subeq	r3, #32
   4aeee:	2b54      	cmp	r3, #84	; 0x54
   4aef0:	d11f      	bne.n	4af32 <at_parse_detect_type+0x106>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   4aef2:	78ab      	ldrb	r3, [r5, #2]
   4aef4:	5cd1      	ldrb	r1, [r2, r3]
   4aef6:	f001 0103 	and.w	r1, r1, #3
   4aefa:	2902      	cmp	r1, #2
   4aefc:	bf08      	it	eq
   4aefe:	3b20      	subeq	r3, #32
   4af00:	2b2b      	cmp	r3, #43	; 0x2b
   4af02:	d00a      	beq.n	4af1a <at_parse_detect_type+0xee>
   4af04:	2b25      	cmp	r3, #37	; 0x25
   4af06:	d114      	bne.n	4af32 <at_parse_detect_type+0x106>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   4af08:	78eb      	ldrb	r3, [r5, #3]
   4af0a:	5cd2      	ldrb	r2, [r2, r3]
   4af0c:	f002 0203 	and.w	r2, r2, #3
   4af10:	2a02      	cmp	r2, #2
   4af12:	bf08      	it	eq
   4af14:	3b20      	subeq	r3, #32
   4af16:	2b58      	cmp	r3, #88	; 0x58
   4af18:	d00b      	beq.n	4af32 <at_parse_detect_type+0x106>
	state = new_state;
   4af1a:	2209      	movs	r2, #9
		return -2;
   4af1c:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   4af20:	4b2a      	ldr	r3, [pc, #168]	; (4afcc <at_parse_detect_type+0x1a0>)
   4af22:	701a      	strb	r2, [r3, #0]
}
   4af24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (set_type_string) {
   4af26:	783b      	ldrb	r3, [r7, #0]
   4af28:	b153      	cbz	r3, 4af40 <at_parse_detect_type+0x114>
	state = new_state;
   4af2a:	2202      	movs	r2, #2
   4af2c:	4b27      	ldr	r3, [pc, #156]	; (4afcc <at_parse_detect_type+0x1a0>)
   4af2e:	701a      	strb	r2, [r3, #0]
}
   4af30:	e792      	b.n	4ae58 <at_parse_detect_type+0x2c>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   4af32:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   4af34:	2b2b      	cmp	r3, #43	; 0x2b
   4af36:	d10c      	bne.n	4af52 <at_parse_detect_type+0x126>
		return -1;
   4af38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		*str = tmpstr;
   4af3c:	6034      	str	r4, [r6, #0]
   4af3e:	e7f1      	b.n	4af24 <at_parse_detect_type+0xf8>
	} else if ((index == 0) && is_command(tmpstr)) {
   4af40:	4620      	mov	r0, r4
   4af42:	f7ff ff45 	bl	4add0 <is_command>
   4af46:	b110      	cbz	r0, 4af4e <at_parse_detect_type+0x122>
	state = new_state;
   4af48:	2307      	movs	r3, #7
   4af4a:	702b      	strb	r3, [r5, #0]
}
   4af4c:	e784      	b.n	4ae58 <at_parse_detect_type+0x2c>
	state = new_state;
   4af4e:	2302      	movs	r3, #2
   4af50:	e7fb      	b.n	4af4a <at_parse_detect_type+0x11e>
   4af52:	2b25      	cmp	r3, #37	; 0x25
   4af54:	d0f0      	beq.n	4af38 <at_parse_detect_type+0x10c>
	} else if (is_number(*tmpstr)) {
   4af56:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   4af58:	4b23      	ldr	r3, [pc, #140]	; (4afe8 <at_parse_detect_type+0x1bc>)
   4af5a:	5c9b      	ldrb	r3, [r3, r2]
   4af5c:	075b      	lsls	r3, r3, #29
   4af5e:	d40a      	bmi.n	4af76 <at_parse_detect_type+0x14a>
   4af60:	2a2d      	cmp	r2, #45	; 0x2d
   4af62:	d008      	beq.n	4af76 <at_parse_detect_type+0x14a>
   4af64:	2a2b      	cmp	r2, #43	; 0x2b
   4af66:	d006      	beq.n	4af76 <at_parse_detect_type+0x14a>
	if (chr == '"') {
   4af68:	2a22      	cmp	r2, #34	; 0x22
   4af6a:	d107      	bne.n	4af7c <at_parse_detect_type+0x150>
	state = new_state;
   4af6c:	2203      	movs	r2, #3
   4af6e:	4b17      	ldr	r3, [pc, #92]	; (4afcc <at_parse_detect_type+0x1a0>)
		tmpstr++;
   4af70:	3401      	adds	r4, #1
	state = new_state;
   4af72:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   4af74:	e770      	b.n	4ae58 <at_parse_detect_type+0x2c>
	state = new_state;
   4af76:	2204      	movs	r2, #4
   4af78:	4b14      	ldr	r3, [pc, #80]	; (4afcc <at_parse_detect_type+0x1a0>)
   4af7a:	e7d8      	b.n	4af2e <at_parse_detect_type+0x102>
	if (chr == '(') {
   4af7c:	2a28      	cmp	r2, #40	; 0x28
   4af7e:	d104      	bne.n	4af8a <at_parse_detect_type+0x15e>
   4af80:	2201      	movs	r2, #1
   4af82:	4b12      	ldr	r3, [pc, #72]	; (4afcc <at_parse_detect_type+0x1a0>)
		tmpstr++;
   4af84:	4414      	add	r4, r2
	state = new_state;
   4af86:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   4af88:	e766      	b.n	4ae58 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   4af8a:	4610      	mov	r0, r2
   4af8c:	f00c fbe7 	bl	5775e <is_lfcr>
   4af90:	b188      	cbz	r0, 4afb6 <at_parse_detect_type+0x18a>
   4af92:	490e      	ldr	r1, [pc, #56]	; (4afcc <at_parse_detect_type+0x1a0>)
   4af94:	780b      	ldrb	r3, [r1, #0]
   4af96:	2b04      	cmp	r3, #4
   4af98:	d10a      	bne.n	4afb0 <at_parse_detect_type+0x184>
   4af9a:	4622      	mov	r2, r4
   4af9c:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   4af9e:	f812 0b01 	ldrb.w	r0, [r2], #1
   4afa2:	f00c fbdc 	bl	5775e <is_lfcr>
   4afa6:	2800      	cmp	r0, #0
   4afa8:	d1f8      	bne.n	4af9c <at_parse_detect_type+0x170>
	state = new_state;
   4afaa:	2305      	movs	r3, #5
   4afac:	700b      	strb	r3, [r1, #0]
}
   4afae:	e753      	b.n	4ae58 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   4afb0:	2b08      	cmp	r3, #8
   4afb2:	f43f af51 	beq.w	4ae58 <at_parse_detect_type+0x2c>
	} else if (is_separator(*tmpstr)) {
   4afb6:	4610      	mov	r0, r2
   4afb8:	f7ff fe04 	bl	4abc4 <is_separator>
   4afbc:	2800      	cmp	r0, #0
   4afbe:	d0bb      	beq.n	4af38 <at_parse_detect_type+0x10c>
	state = new_state;
   4afc0:	2208      	movs	r2, #8
   4afc2:	4b02      	ldr	r3, [pc, #8]	; (4afcc <at_parse_detect_type+0x1a0>)
   4afc4:	e7b3      	b.n	4af2e <at_parse_detect_type+0x102>
   4afc6:	bf00      	nop
   4afc8:	2001f318 	.word	0x2001f318
   4afcc:	2001f319 	.word	0x2001f319
   4afd0:	0005eb0e 	.word	0x0005eb0e
   4afd4:	0005eb14 	.word	0x0005eb14
   4afd8:	0005eb1a 	.word	0x0005eb1a
   4afdc:	0005eb26 	.word	0x0005eb26
   4afe0:	0005eb31 	.word	0x0005eb31
   4afe4:	0005eb3d 	.word	0x0005eb3d
   4afe8:	0006098d 	.word	0x0006098d

0004afec <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   4afec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4aff0:	4689      	mov	r9, r1
   4aff2:	4616      	mov	r6, r2
   4aff4:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   4aff6:	4680      	mov	r8, r0
   4aff8:	2800      	cmp	r0, #0
   4affa:	f000 808d 	beq.w	4b118 <at_parser_max_params_from_str+0x12c>
   4affe:	2a00      	cmp	r2, #0
   4b000:	f000 808a 	beq.w	4b118 <at_parser_max_params_from_str+0x12c>
   4b004:	6853      	ldr	r3, [r2, #4]
   4b006:	2b00      	cmp	r3, #0
   4b008:	f000 8086 	beq.w	4b118 <at_parser_max_params_from_str+0x12c>
	state = IDLE;
   4b00c:	2500      	movs	r5, #0
	int index = 0;
   4b00e:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   4b010:	4610      	mov	r0, r2
   4b012:	f00c fbe7 	bl	577e4 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   4b016:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   4b018:	f8df a10c 	ldr.w	sl, [pc, #268]	; 4b128 <at_parser_max_params_from_str+0x13c>
	max_params_count = MIN(max_params_count, list->param_count);
   4b01c:	429f      	cmp	r7, r3
   4b01e:	bf28      	it	cs
   4b020:	461f      	movcs	r7, r3
	state = IDLE;
   4b022:	4b3f      	ldr	r3, [pc, #252]	; (4b120 <at_parser_max_params_from_str+0x134>)
	const char *str = *at_params_str;
   4b024:	f8cd 8004 	str.w	r8, [sp, #4]
	state = IDLE;
   4b028:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   4b02a:	4b3e      	ldr	r3, [pc, #248]	; (4b124 <at_parser_max_params_from_str+0x138>)
   4b02c:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   4b02e:	9b01      	ldr	r3, [sp, #4]
   4b030:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   4b032:	2a00      	cmp	r2, #0
   4b034:	d048      	beq.n	4b0c8 <at_parser_max_params_from_str+0xdc>
   4b036:	42a7      	cmp	r7, r4
   4b038:	d946      	bls.n	4b0c8 <at_parser_max_params_from_str+0xdc>
		if (isspace((int)*str)) {
   4b03a:	f81a 2002 	ldrb.w	r2, [sl, r2]
		ret = at_parse_detect_type(&str, index);
   4b03e:	4621      	mov	r1, r4
		if (isspace((int)*str)) {
   4b040:	0712      	lsls	r2, r2, #28
			str++;
   4b042:	bf48      	it	mi
   4b044:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   4b046:	a801      	add	r0, sp, #4
			str++;
   4b048:	bf48      	it	mi
   4b04a:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   4b04c:	f7ff feee 	bl	4ae2c <at_parse_detect_type>
		if (ret == -1) {
   4b050:	1c43      	adds	r3, r0, #1
   4b052:	d039      	beq.n	4b0c8 <at_parser_max_params_from_str+0xdc>
		if (ret == -2) {
   4b054:	3002      	adds	r0, #2
			index = 0;
   4b056:	bf08      	it	eq
   4b058:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   4b05a:	4632      	mov	r2, r6
   4b05c:	4621      	mov	r1, r4
   4b05e:	a801      	add	r0, sp, #4
			str = *at_params_str;
   4b060:	bf08      	it	eq
   4b062:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   4b066:	f7ff fdd3 	bl	4ac10 <at_parse_process_element>
   4b06a:	3001      	adds	r0, #1
   4b06c:	d02c      	beq.n	4b0c8 <at_parser_max_params_from_str+0xdc>
		if (is_separator(*str)) {
   4b06e:	9a01      	ldr	r2, [sp, #4]
   4b070:	7810      	ldrb	r0, [r2, #0]
   4b072:	f7ff fda7 	bl	4abc4 <is_separator>
   4b076:	b1b0      	cbz	r0, 4b0a6 <at_parser_max_params_from_str+0xba>
			if (is_lfcr(*(str + 1))) {
   4b078:	7850      	ldrb	r0, [r2, #1]
   4b07a:	f00c fb70 	bl	5775e <is_lfcr>
   4b07e:	b178      	cbz	r0, 4b0a0 <at_parser_max_params_from_str+0xb4>
				index++;
   4b080:	3401      	adds	r4, #1
				if (index == max_params) {
   4b082:	42bc      	cmp	r4, r7
   4b084:	d03b      	beq.n	4b0fe <at_parser_max_params_from_str+0x112>
				if (at_parse_detect_type(&str, index) == -1) {
   4b086:	4621      	mov	r1, r4
   4b088:	a801      	add	r0, sp, #4
   4b08a:	f7ff fecf 	bl	4ae2c <at_parse_detect_type>
   4b08e:	3001      	adds	r0, #1
   4b090:	d01a      	beq.n	4b0c8 <at_parser_max_params_from_str+0xdc>
				if (at_parse_process_element(&str, index,
   4b092:	4632      	mov	r2, r6
   4b094:	4621      	mov	r1, r4
   4b096:	a801      	add	r0, sp, #4
   4b098:	f7ff fdba 	bl	4ac10 <at_parse_process_element>
   4b09c:	3001      	adds	r0, #1
   4b09e:	d013      	beq.n	4b0c8 <at_parser_max_params_from_str+0xdc>
			str++;
   4b0a0:	9b01      	ldr	r3, [sp, #4]
   4b0a2:	3301      	adds	r3, #1
   4b0a4:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   4b0a6:	9a01      	ldr	r2, [sp, #4]
   4b0a8:	7810      	ldrb	r0, [r2, #0]
   4b0aa:	f00c fb58 	bl	5775e <is_lfcr>
   4b0ae:	b308      	cbz	r0, 4b0f4 <at_parser_max_params_from_str+0x108>
   4b0b0:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   4b0b2:	7811      	ldrb	r1, [r2, #0]
   4b0b4:	4693      	mov	fp, r2
   4b0b6:	4608      	mov	r0, r1
   4b0b8:	3201      	adds	r2, #1
   4b0ba:	f00c fb50 	bl	5775e <is_lfcr>
   4b0be:	2800      	cmp	r0, #0
   4b0c0:	d1f7      	bne.n	4b0b2 <at_parser_max_params_from_str+0xc6>
   4b0c2:	b971      	cbnz	r1, 4b0e2 <at_parser_max_params_from_str+0xf6>
				str += i;
   4b0c4:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   4b0c8:	9c01      	ldr	r4, [sp, #4]
	if (oversized) {
   4b0ca:	bb15      	cbnz	r5, 4b112 <at_parser_max_params_from_str+0x126>
   4b0cc:	7823      	ldrb	r3, [r4, #0]
   4b0ce:	b9c3      	cbnz	r3, 4b102 <at_parser_max_params_from_str+0x116>
	return 0;
   4b0d0:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   4b0d2:	f1b9 0f00 	cmp.w	r9, #0
   4b0d6:	d001      	beq.n	4b0dc <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   4b0d8:	f8c9 4000 	str.w	r4, [r9]
	}

	return err;
}
   4b0dc:	b003      	add	sp, #12
   4b0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   4b0e2:	292b      	cmp	r1, #43	; 0x2b
   4b0e4:	d0ee      	beq.n	4b0c4 <at_parser_max_params_from_str+0xd8>
   4b0e6:	2925      	cmp	r1, #37	; 0x25
   4b0e8:	d0ec      	beq.n	4b0c4 <at_parser_max_params_from_str+0xd8>
			    is_result(str + i)) {
   4b0ea:	4658      	mov	r0, fp
   4b0ec:	f7ff fd78 	bl	4abe0 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   4b0f0:	2800      	cmp	r0, #0
   4b0f2:	d1e7      	bne.n	4b0c4 <at_parser_max_params_from_str+0xd8>
		index++;
   4b0f4:	3401      	adds	r4, #1
			oversized = true;
   4b0f6:	42bc      	cmp	r4, r7
   4b0f8:	bf08      	it	eq
   4b0fa:	2501      	moveq	r5, #1
   4b0fc:	e797      	b.n	4b02e <at_parser_max_params_from_str+0x42>
					oversized = true;
   4b0fe:	4605      	mov	r5, r0
   4b100:	e7e2      	b.n	4b0c8 <at_parser_max_params_from_str+0xdc>
	if (!is_terminated(*str) && !is_result(str)) {
   4b102:	4620      	mov	r0, r4
   4b104:	f7ff fd6c 	bl	4abe0 <is_result>
   4b108:	2800      	cmp	r0, #0
   4b10a:	d1e1      	bne.n	4b0d0 <at_parser_max_params_from_str+0xe4>
		return -EAGAIN;
   4b10c:	f06f 000a 	mvn.w	r0, #10
   4b110:	e7df      	b.n	4b0d2 <at_parser_max_params_from_str+0xe6>
		return -E2BIG;
   4b112:	f06f 0006 	mvn.w	r0, #6
   4b116:	e7dc      	b.n	4b0d2 <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   4b118:	f06f 0015 	mvn.w	r0, #21
   4b11c:	e7de      	b.n	4b0dc <at_parser_max_params_from_str+0xf0>
   4b11e:	bf00      	nop
   4b120:	2001f319 	.word	0x2001f319
   4b124:	2001f318 	.word	0x2001f318
   4b128:	0006098d 	.word	0x0006098d

0004b12c <enable_notifications>:

	event_handler_list_dispatch(&evt);
}

static int enable_notifications(void)
{
   4b12c:	b530      	push	{r4, r5, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   4b12e:	4825      	ldr	r0, [pc, #148]	; (4b1c4 <enable_notifications+0x98>)
{
   4b130:	b093      	sub	sp, #76	; 0x4c
	err = nrf_modem_at_printf(AT_CEREG_5);
   4b132:	f006 fa2f 	bl	51594 <nrf_modem_at_printf>
	if (err) {
   4b136:	4604      	mov	r4, r0
   4b138:	b178      	cbz	r0, 4b15a <enable_notifications+0x2e>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   4b13a:	4b23      	ldr	r3, [pc, #140]	; (4b1c8 <enable_notifications+0x9c>)
   4b13c:	9003      	str	r0, [sp, #12]
   4b13e:	9302      	str	r3, [sp, #8]
   4b140:	2300      	movs	r3, #0
   4b142:	2201      	movs	r2, #1
   4b144:	4618      	mov	r0, r3
   4b146:	e9cd 3300 	strd	r3, r3, [sp]
   4b14a:	4920      	ldr	r1, [pc, #128]	; (4b1cc <enable_notifications+0xa0>)
   4b14c:	f00c fc74 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4b150:	f06f 040d 	mvn.w	r4, #13
			LOG_WRN("Current modem firmware version: %s", buf);
		}
	}

	return 0;
}
   4b154:	4620      	mov	r0, r4
   4b156:	b013      	add	sp, #76	; 0x4c
   4b158:	bd30      	pop	{r4, r5, pc}
	err = nrf_modem_at_printf(cscon);
   4b15a:	481d      	ldr	r0, [pc, #116]	; (4b1d0 <enable_notifications+0xa4>)
   4b15c:	f006 fa1a 	bl	51594 <nrf_modem_at_printf>
	if (err) {
   4b160:	2800      	cmp	r0, #0
   4b162:	d0f7      	beq.n	4b154 <enable_notifications+0x28>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   4b164:	4b1b      	ldr	r3, [pc, #108]	; (4b1d4 <enable_notifications+0xa8>)
   4b166:	2202      	movs	r2, #2
   4b168:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b16c:	4917      	ldr	r1, [pc, #92]	; (4b1cc <enable_notifications+0xa0>)
   4b16e:	4623      	mov	r3, r4
   4b170:	9003      	str	r0, [sp, #12]
   4b172:	9400      	str	r4, [sp, #0]
   4b174:	4620      	mov	r0, r4
   4b176:	f00c fc5f 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   4b17a:	4b17      	ldr	r3, [pc, #92]	; (4b1d8 <enable_notifications+0xac>)
   4b17c:	2202      	movs	r2, #2
   4b17e:	4620      	mov	r0, r4
   4b180:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b184:	4911      	ldr	r1, [pc, #68]	; (4b1cc <enable_notifications+0xa0>)
   4b186:	4623      	mov	r3, r4
   4b188:	9400      	str	r4, [sp, #0]
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   4b18a:	ad05      	add	r5, sp, #20
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   4b18c:	f00c fc54 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   4b190:	2132      	movs	r1, #50	; 0x32
   4b192:	4628      	mov	r0, r5
   4b194:	4a11      	ldr	r2, [pc, #68]	; (4b1dc <enable_notifications+0xb0>)
   4b196:	f006 fa45 	bl	51624 <nrf_modem_at_cmd>
		if (err == 0) {
   4b19a:	2800      	cmp	r0, #0
   4b19c:	d1da      	bne.n	4b154 <enable_notifications+0x28>
			char *end = strstr(buf, "\r\nOK");
   4b19e:	4628      	mov	r0, r5
   4b1a0:	490f      	ldr	r1, [pc, #60]	; (4b1e0 <enable_notifications+0xb4>)
   4b1a2:	f010 f8db 	bl	5b35c <strstr>
			if (end) {
   4b1a6:	b100      	cbz	r0, 4b1aa <enable_notifications+0x7e>
				*end = '\0';
   4b1a8:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
   4b1aa:	4b0e      	ldr	r3, [pc, #56]	; (4b1e4 <enable_notifications+0xb8>)
   4b1ac:	2202      	movs	r2, #2
   4b1ae:	9302      	str	r3, [sp, #8]
   4b1b0:	2300      	movs	r3, #0
   4b1b2:	4906      	ldr	r1, [pc, #24]	; (4b1cc <enable_notifications+0xa0>)
   4b1b4:	4618      	mov	r0, r3
   4b1b6:	e9cd 3300 	strd	r3, r3, [sp]
   4b1ba:	9503      	str	r5, [sp, #12]
   4b1bc:	f00c fc3c 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
   4b1c0:	e7c8      	b.n	4b154 <enable_notifications+0x28>
   4b1c2:	bf00      	nop
   4b1c4:	0005eb68 	.word	0x0005eb68
   4b1c8:	0005eb73 	.word	0x0005eb73
   4b1cc:	0005bf8c 	.word	0x0005bf8c
   4b1d0:	0005f429 	.word	0x0005f429
   4b1d4:	0005eba9 	.word	0x0005eba9
   4b1d8:	0005ebe1 	.word	0x0005ebe1
   4b1dc:	0005ec12 	.word	0x0005ec12
   4b1e0:	0005ec1a 	.word	0x0005ec1a
   4b1e4:	0005ec1f 	.word	0x0005ec1f

0004b1e8 <at_handler_mdmev>:
{
   4b1e8:	b510      	push	{r4, lr}
   4b1ea:	4604      	mov	r4, r0
   4b1ec:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   4b1ee:	2100      	movs	r1, #0
   4b1f0:	2248      	movs	r2, #72	; 0x48
   4b1f2:	a804      	add	r0, sp, #16
   4b1f4:	f00f feb0 	bl	5af58 <memset>
	err = parse_mdmev(response, &evt.modem_evt);
   4b1f8:	4620      	mov	r0, r4
   4b1fa:	a906      	add	r1, sp, #24
   4b1fc:	f001 fdec 	bl	4cdd8 <parse_mdmev>
	if (err) {
   4b200:	b160      	cbz	r0, 4b21c <at_handler_mdmev+0x34>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   4b202:	4b0a      	ldr	r3, [pc, #40]	; (4b22c <at_handler_mdmev+0x44>)
   4b204:	9003      	str	r0, [sp, #12]
   4b206:	9302      	str	r3, [sp, #8]
   4b208:	2300      	movs	r3, #0
   4b20a:	2201      	movs	r2, #1
   4b20c:	4618      	mov	r0, r3
   4b20e:	e9cd 3300 	strd	r3, r3, [sp]
   4b212:	4907      	ldr	r1, [pc, #28]	; (4b230 <at_handler_mdmev+0x48>)
   4b214:	f00c fc10 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
}
   4b218:	b016      	add	sp, #88	; 0x58
   4b21a:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   4b21c:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   4b21e:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   4b220:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   4b224:	f000 fef2 	bl	4c00c <event_handler_list_dispatch>
   4b228:	e7f6      	b.n	4b218 <at_handler_mdmev+0x30>
   4b22a:	bf00      	nop
   4b22c:	0005ec42 	.word	0x0005ec42
   4b230:	0005bf8c 	.word	0x0005bf8c

0004b234 <at_handler_xmodemsleep>:
{
   4b234:	b510      	push	{r4, lr}
   4b236:	4604      	mov	r4, r0
   4b238:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   4b23a:	2100      	movs	r1, #0
   4b23c:	2248      	movs	r2, #72	; 0x48
   4b23e:	a804      	add	r0, sp, #16
   4b240:	f00f fe8a 	bl	5af58 <memset>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   4b244:	4620      	mov	r0, r4
   4b246:	a906      	add	r1, sp, #24
   4b248:	f001 fd54 	bl	4ccf4 <parse_xmodemsleep>
	if (err) {
   4b24c:	b160      	cbz	r0, 4b268 <at_handler_xmodemsleep+0x34>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   4b24e:	4b14      	ldr	r3, [pc, #80]	; (4b2a0 <at_handler_xmodemsleep+0x6c>)
   4b250:	9003      	str	r0, [sp, #12]
   4b252:	9302      	str	r3, [sp, #8]
   4b254:	2300      	movs	r3, #0
   4b256:	2201      	movs	r2, #1
   4b258:	4618      	mov	r0, r3
   4b25a:	e9cd 3300 	strd	r3, r3, [sp]
   4b25e:	4911      	ldr	r1, [pc, #68]	; (4b2a4 <at_handler_xmodemsleep+0x70>)
   4b260:	f00c fbea 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
}
   4b264:	b016      	add	sp, #88	; 0x58
   4b266:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   4b268:	f89d 3018 	ldrb.w	r3, [sp, #24]
   4b26c:	1e5a      	subs	r2, r3, #1
   4b26e:	2a01      	cmp	r2, #1
   4b270:	d901      	bls.n	4b276 <at_handler_xmodemsleep+0x42>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   4b272:	2b04      	cmp	r3, #4
   4b274:	d1f6      	bne.n	4b264 <at_handler_xmodemsleep+0x30>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   4b276:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   4b27a:	f5a2 539c 	sub.w	r3, r2, #4992	; 0x1380
   4b27e:	3b08      	subs	r3, #8
   4b280:	430b      	orrs	r3, r1
   4b282:	d008      	beq.n	4b296 <at_handler_xmodemsleep+0x62>
	} else if (evt.modem_sleep.time == 0) {
   4b284:	430a      	orrs	r2, r1
   4b286:	d008      	beq.n	4b29a <at_handler_xmodemsleep+0x66>
   4b288:	230a      	movs	r3, #10
	event_handler_list_dispatch(&evt);
   4b28a:	a804      	add	r0, sp, #16
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   4b28c:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   4b290:	f000 febc 	bl	4c00c <event_handler_list_dispatch>
   4b294:	e7e6      	b.n	4b264 <at_handler_xmodemsleep+0x30>
   4b296:	2308      	movs	r3, #8
   4b298:	e7f7      	b.n	4b28a <at_handler_xmodemsleep+0x56>
   4b29a:	2309      	movs	r3, #9
   4b29c:	e7f5      	b.n	4b28a <at_handler_xmodemsleep+0x56>
   4b29e:	bf00      	nop
   4b2a0:	0005ec72 	.word	0x0005ec72
   4b2a4:	0005bf8c 	.word	0x0005bf8c

0004b2a8 <at_handler_ncellmeas>:
{
   4b2a8:	b570      	push	{r4, r5, r6, lr}
   4b2aa:	b0a8      	sub	sp, #160	; 0xa0
	struct lte_lc_evt evt = {0};
   4b2ac:	2100      	movs	r1, #0
   4b2ae:	2248      	movs	r2, #72	; 0x48
{
   4b2b0:	4605      	mov	r5, r0
	struct lte_lc_evt evt = {0};
   4b2b2:	a804      	add	r0, sp, #16
   4b2b4:	f00f fe50 	bl	5af58 <memset>
	if (event_handler_list_is_empty() || !ncellmeas_ongoing) {
   4b2b8:	f000 fe74 	bl	4bfa4 <event_handler_list_is_empty>
   4b2bc:	4e4e      	ldr	r6, [pc, #312]	; (4b3f8 <at_handler_ncellmeas+0x150>)
   4b2be:	4601      	mov	r1, r0
   4b2c0:	b9c8      	cbnz	r0, 4b2f6 <at_handler_ncellmeas+0x4e>
   4b2c2:	7833      	ldrb	r3, [r6, #0]
   4b2c4:	b1bb      	cbz	r3, 4b2f6 <at_handler_ncellmeas+0x4e>
	if (ncellmeas_params.search_type > LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   4b2c6:	4c4d      	ldr	r4, [pc, #308]	; (4b3fc <at_handler_ncellmeas+0x154>)
   4b2c8:	7823      	ldrb	r3, [r4, #0]
   4b2ca:	2b03      	cmp	r3, #3
   4b2cc:	d952      	bls.n	4b374 <at_handler_ncellmeas+0xcc>
	struct lte_lc_evt evt = {0};
   4b2ce:	2248      	movs	r2, #72	; 0x48
   4b2d0:	a816      	add	r0, sp, #88	; 0x58
   4b2d2:	f00f fe41 	bl	5af58 <memset>
	int max_cell_count = ncellmeas_params.gci_count;
   4b2d6:	7860      	ldrb	r0, [r4, #1]
	if (max_cell_count != 0) {
   4b2d8:	b188      	cbz	r0, 4b2fe <at_handler_ncellmeas+0x56>
		cells = k_calloc(max_cell_count, sizeof(struct lte_lc_cell));
   4b2da:	2130      	movs	r1, #48	; 0x30
   4b2dc:	f00f fdce 	bl	5ae7c <k_calloc>
		if (cells == NULL) {
   4b2e0:	4604      	mov	r4, r0
   4b2e2:	b968      	cbnz	r0, 4b300 <at_handler_ncellmeas+0x58>
			LOG_ERR("Failed to allocate memory for the GCI cells");
   4b2e4:	4b46      	ldr	r3, [pc, #280]	; (4b400 <at_handler_ncellmeas+0x158>)
			LOG_ERR("Failed to allocate memory for neighbor cells");
   4b2e6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b2ea:	2201      	movs	r2, #1
   4b2ec:	4623      	mov	r3, r4
   4b2ee:	4945      	ldr	r1, [pc, #276]	; (4b404 <at_handler_ncellmeas+0x15c>)
   4b2f0:	9400      	str	r4, [sp, #0]
   4b2f2:	f00c fba1 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
	ncellmeas_ongoing = false;
   4b2f6:	2300      	movs	r3, #0
   4b2f8:	7033      	strb	r3, [r6, #0]
}
   4b2fa:	b028      	add	sp, #160	; 0xa0
   4b2fc:	bd70      	pop	{r4, r5, r6, pc}
	struct lte_lc_cell *cells = NULL;
   4b2fe:	4604      	mov	r4, r0
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   4b300:	aa18      	add	r2, sp, #96	; 0x60
   4b302:	4629      	mov	r1, r5
   4b304:	483d      	ldr	r0, [pc, #244]	; (4b3fc <at_handler_ncellmeas+0x154>)
	evt.cells_info.gci_cells = cells;
   4b306:	9427      	str	r4, [sp, #156]	; 0x9c
	err = parse_ncellmeas_gci(&ncellmeas_params, resp, &evt.cells_info);
   4b308:	f001 faa4 	bl	4c854 <parse_ncellmeas_gci>
	switch (err) {
   4b30c:	1dc2      	adds	r2, r0, #7
   4b30e:	d00d      	beq.n	4b32c <at_handler_ncellmeas+0x84>
   4b310:	2801      	cmp	r0, #1
   4b312:	d922      	bls.n	4b35a <at_handler_ncellmeas+0xb2>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   4b314:	4b3c      	ldr	r3, [pc, #240]	; (4b408 <at_handler_ncellmeas+0x160>)
   4b316:	9003      	str	r0, [sp, #12]
   4b318:	9302      	str	r3, [sp, #8]
   4b31a:	2300      	movs	r3, #0
   4b31c:	2201      	movs	r2, #1
   4b31e:	4618      	mov	r0, r3
   4b320:	e9cd 3300 	strd	r3, r3, [sp]
   4b324:	4937      	ldr	r1, [pc, #220]	; (4b404 <at_handler_ncellmeas+0x15c>)
   4b326:	f00c fb87 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
   4b32a:	e01c      	b.n	4b366 <at_handler_ncellmeas+0xbe>
		LOG_WRN("Not all neighbor cells could be parsed");
   4b32c:	2500      	movs	r5, #0
   4b32e:	4b37      	ldr	r3, [pc, #220]	; (4b40c <at_handler_ncellmeas+0x164>)
   4b330:	2202      	movs	r2, #2
   4b332:	4628      	mov	r0, r5
   4b334:	4933      	ldr	r1, [pc, #204]	; (4b404 <at_handler_ncellmeas+0x15c>)
   4b336:	9302      	str	r3, [sp, #8]
   4b338:	e9cd 5500 	strd	r5, r5, [sp]
   4b33c:	462b      	mov	r3, r5
   4b33e:	f00c fb7b 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   4b342:	2311      	movs	r3, #17
   4b344:	9303      	str	r3, [sp, #12]
   4b346:	4b32      	ldr	r3, [pc, #200]	; (4b410 <at_handler_ncellmeas+0x168>)
   4b348:	2202      	movs	r2, #2
   4b34a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4b34e:	4628      	mov	r0, r5
   4b350:	462b      	mov	r3, r5
   4b352:	492c      	ldr	r1, [pc, #176]	; (4b404 <at_handler_ncellmeas+0x15c>)
   4b354:	9500      	str	r5, [sp, #0]
   4b356:	f00c fb6f 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   4b35a:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   4b35c:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   4b35e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   4b362:	f000 fe53 	bl	4c00c <event_handler_list_dispatch>
	k_free(cells);
   4b366:	4620      	mov	r0, r4
   4b368:	f00f fd7d 	bl	5ae66 <k_free>
	k_free(evt.cells_info.neighbor_cells);
   4b36c:	9825      	ldr	r0, [sp, #148]	; 0x94
		k_free(neighbor_cells);
   4b36e:	f00f fd7a 	bl	5ae66 <k_free>
   4b372:	e7c0      	b.n	4b2f6 <at_handler_ncellmeas+0x4e>
	int ncell_count = neighborcell_count_get(response);
   4b374:	4628      	mov	r0, r5
   4b376:	f001 f8df 	bl	4c538 <neighborcell_count_get>
   4b37a:	4604      	mov	r4, r0
	if (ncell_count != 0) {
   4b37c:	b130      	cbz	r0, 4b38c <at_handler_ncellmeas+0xe4>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   4b37e:	2110      	movs	r1, #16
   4b380:	f00f fd7c 	bl	5ae7c <k_calloc>
		if (neighbor_cells == NULL) {
   4b384:	4604      	mov	r4, r0
   4b386:	b908      	cbnz	r0, 4b38c <at_handler_ncellmeas+0xe4>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   4b388:	4b22      	ldr	r3, [pc, #136]	; (4b414 <at_handler_ncellmeas+0x16c>)
   4b38a:	e7ac      	b.n	4b2e6 <at_handler_ncellmeas+0x3e>
	err = parse_ncellmeas(response, &evt.cells_info);
   4b38c:	4628      	mov	r0, r5
   4b38e:	a906      	add	r1, sp, #24
	evt.cells_info.neighbor_cells = neighbor_cells;
   4b390:	9413      	str	r4, [sp, #76]	; 0x4c
	err = parse_ncellmeas(response, &evt.cells_info);
   4b392:	f001 f8f5 	bl	4c580 <parse_ncellmeas>
	switch (err) {
   4b396:	1dc3      	adds	r3, r0, #7
   4b398:	d00d      	beq.n	4b3b6 <at_handler_ncellmeas+0x10e>
   4b39a:	2801      	cmp	r0, #1
   4b39c:	d922      	bls.n	4b3e4 <at_handler_ncellmeas+0x13c>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   4b39e:	4b1a      	ldr	r3, [pc, #104]	; (4b408 <at_handler_ncellmeas+0x160>)
   4b3a0:	9003      	str	r0, [sp, #12]
   4b3a2:	9302      	str	r3, [sp, #8]
   4b3a4:	2300      	movs	r3, #0
   4b3a6:	2201      	movs	r2, #1
   4b3a8:	4618      	mov	r0, r3
   4b3aa:	e9cd 3300 	strd	r3, r3, [sp]
   4b3ae:	4915      	ldr	r1, [pc, #84]	; (4b404 <at_handler_ncellmeas+0x15c>)
   4b3b0:	f00c fb42 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
   4b3b4:	e01c      	b.n	4b3f0 <at_handler_ncellmeas+0x148>
		LOG_WRN("Not all neighbor cells could be parsed");
   4b3b6:	2500      	movs	r5, #0
   4b3b8:	4b14      	ldr	r3, [pc, #80]	; (4b40c <at_handler_ncellmeas+0x164>)
   4b3ba:	2202      	movs	r2, #2
   4b3bc:	4628      	mov	r0, r5
   4b3be:	4911      	ldr	r1, [pc, #68]	; (4b404 <at_handler_ncellmeas+0x15c>)
   4b3c0:	9302      	str	r3, [sp, #8]
   4b3c2:	e9cd 5500 	strd	r5, r5, [sp]
   4b3c6:	462b      	mov	r3, r5
   4b3c8:	f00c fb36 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   4b3cc:	2311      	movs	r3, #17
   4b3ce:	9303      	str	r3, [sp, #12]
   4b3d0:	4b0f      	ldr	r3, [pc, #60]	; (4b410 <at_handler_ncellmeas+0x168>)
   4b3d2:	2202      	movs	r2, #2
   4b3d4:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4b3d8:	4628      	mov	r0, r5
   4b3da:	462b      	mov	r3, r5
   4b3dc:	4909      	ldr	r1, [pc, #36]	; (4b404 <at_handler_ncellmeas+0x15c>)
   4b3de:	9500      	str	r5, [sp, #0]
   4b3e0:	f00c fb2a 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   4b3e4:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   4b3e6:	a804      	add	r0, sp, #16
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   4b3e8:	f88d 3010 	strb.w	r3, [sp, #16]
		event_handler_list_dispatch(&evt);
   4b3ec:	f000 fe0e 	bl	4c00c <event_handler_list_dispatch>
	if (neighbor_cells) {
   4b3f0:	2c00      	cmp	r4, #0
   4b3f2:	d080      	beq.n	4b2f6 <at_handler_ncellmeas+0x4e>
		k_free(neighbor_cells);
   4b3f4:	4620      	mov	r0, r4
   4b3f6:	e7ba      	b.n	4b36e <at_handler_ncellmeas+0xc6>
   4b3f8:	2001f3bf 	.word	0x2001f3bf
   4b3fc:	2001f3c0 	.word	0x2001f3c0
   4b400:	0005ecae 	.word	0x0005ecae
   4b404:	0005bf8c 	.word	0x0005bf8c
   4b408:	0005ed3b 	.word	0x0005ed3b
   4b40c:	0005ecda 	.word	0x0005ecda
   4b410:	0005ed01 	.word	0x0005ed01
   4b414:	0005ed65 	.word	0x0005ed65

0004b418 <at_handler_xt3412>:
{
   4b418:	b510      	push	{r4, lr}
   4b41a:	4604      	mov	r4, r0
   4b41c:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   4b41e:	2100      	movs	r1, #0
   4b420:	2248      	movs	r2, #72	; 0x48
   4b422:	a804      	add	r0, sp, #16
   4b424:	f00f fd98 	bl	5af58 <memset>
	err = parse_xt3412(response, &evt.time);
   4b428:	4620      	mov	r0, r4
   4b42a:	a906      	add	r1, sp, #24
   4b42c:	f001 f822 	bl	4c474 <parse_xt3412>
	if (err) {
   4b430:	b160      	cbz	r0, 4b44c <at_handler_xt3412+0x34>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   4b432:	4b0d      	ldr	r3, [pc, #52]	; (4b468 <at_handler_xt3412+0x50>)
   4b434:	9003      	str	r0, [sp, #12]
   4b436:	9302      	str	r3, [sp, #8]
   4b438:	2300      	movs	r3, #0
   4b43a:	2201      	movs	r2, #1
   4b43c:	4618      	mov	r0, r3
   4b43e:	e9cd 3300 	strd	r3, r3, [sp]
   4b442:	490a      	ldr	r1, [pc, #40]	; (4b46c <at_handler_xt3412+0x54>)
   4b444:	f00c faf8 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
}
   4b448:	b016      	add	sp, #88	; 0x58
   4b44a:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   4b44c:	9b06      	ldr	r3, [sp, #24]
   4b44e:	9a07      	ldr	r2, [sp, #28]
   4b450:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   4b454:	3b08      	subs	r3, #8
   4b456:	4313      	orrs	r3, r2
   4b458:	d1f6      	bne.n	4b448 <at_handler_xt3412+0x30>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   4b45a:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   4b45c:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   4b45e:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   4b462:	f000 fdd3 	bl	4c00c <event_handler_list_dispatch>
   4b466:	e7ef      	b.n	4b448 <at_handler_xt3412+0x30>
   4b468:	0005ed92 	.word	0x0005ed92
   4b46c:	0005bf8c 	.word	0x0005bf8c

0004b470 <at_handler_cedrxp>:
{
   4b470:	b510      	push	{r4, lr}
   4b472:	4604      	mov	r4, r0
   4b474:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   4b476:	2100      	movs	r1, #0
   4b478:	2248      	movs	r2, #72	; 0x48
   4b47a:	a804      	add	r0, sp, #16
   4b47c:	f00f fd6c 	bl	5af58 <memset>
	err = parse_edrx(response, &evt.edrx_cfg);
   4b480:	4620      	mov	r0, r4
   4b482:	a906      	add	r1, sp, #24
   4b484:	f7f6 fb2c 	bl	41ae0 <parse_edrx>
	if (err) {
   4b488:	b160      	cbz	r0, 4b4a4 <at_handler_cedrxp+0x34>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   4b48a:	4b0a      	ldr	r3, [pc, #40]	; (4b4b4 <at_handler_cedrxp+0x44>)
   4b48c:	9003      	str	r0, [sp, #12]
   4b48e:	9302      	str	r3, [sp, #8]
   4b490:	2300      	movs	r3, #0
   4b492:	2201      	movs	r2, #1
   4b494:	4618      	mov	r0, r3
   4b496:	e9cd 3300 	strd	r3, r3, [sp]
   4b49a:	4907      	ldr	r1, [pc, #28]	; (4b4b8 <at_handler_cedrxp+0x48>)
   4b49c:	f00c facc 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
}
   4b4a0:	b016      	add	sp, #88	; 0x58
   4b4a2:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   4b4a4:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   4b4a6:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   4b4a8:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   4b4ac:	f000 fdae 	bl	4c00c <event_handler_list_dispatch>
   4b4b0:	e7f6      	b.n	4b4a0 <at_handler_cedrxp+0x30>
   4b4b2:	bf00      	nop
   4b4b4:	0005edc6 	.word	0x0005edc6
   4b4b8:	0005bf8c 	.word	0x0005bf8c

0004b4bc <at_handler_cscon>:
{
   4b4bc:	b510      	push	{r4, lr}
   4b4be:	4604      	mov	r4, r0
   4b4c0:	b096      	sub	sp, #88	; 0x58
	struct lte_lc_evt evt = {0};
   4b4c2:	2248      	movs	r2, #72	; 0x48
   4b4c4:	2100      	movs	r1, #0
   4b4c6:	a804      	add	r0, sp, #16
   4b4c8:	f00f fd46 	bl	5af58 <memset>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   4b4cc:	2201      	movs	r2, #1
   4b4ce:	4620      	mov	r0, r4
   4b4d0:	a906      	add	r1, sp, #24
   4b4d2:	f000 fe7f 	bl	4c1d4 <parse_rrc_mode>
	if (err) {
   4b4d6:	b160      	cbz	r0, 4b4f2 <at_handler_cscon+0x36>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   4b4d8:	4b09      	ldr	r3, [pc, #36]	; (4b500 <at_handler_cscon+0x44>)
   4b4da:	9003      	str	r0, [sp, #12]
   4b4dc:	9302      	str	r3, [sp, #8]
   4b4de:	2300      	movs	r3, #0
   4b4e0:	2201      	movs	r2, #1
   4b4e2:	4618      	mov	r0, r3
   4b4e4:	e9cd 3300 	strd	r3, r3, [sp]
   4b4e8:	4906      	ldr	r1, [pc, #24]	; (4b504 <at_handler_cscon+0x48>)
   4b4ea:	f00c faa5 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
}
   4b4ee:	b016      	add	sp, #88	; 0x58
   4b4f0:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   4b4f2:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   4b4f4:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   4b4f6:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   4b4fa:	f000 fd87 	bl	4c00c <event_handler_list_dispatch>
   4b4fe:	e7f6      	b.n	4b4ee <at_handler_cscon+0x32>
   4b500:	0005ede2 	.word	0x0005ede2
   4b504:	0005bf8c 	.word	0x0005bf8c

0004b508 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   4b508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (enable) {
   4b50a:	2800      	cmp	r0, #0
   4b50c:	d035      	beq.n	4b57a <lte_lc_psm_req+0x72>
		if (strlen(psm_param_rptau) == 8 &&
   4b50e:	481c      	ldr	r0, [pc, #112]	; (4b580 <lte_lc_psm_req+0x78>)
   4b510:	f7f5 fc70 	bl	40df4 <strlen>
   4b514:	2808      	cmp	r0, #8
   4b516:	d11a      	bne.n	4b54e <lte_lc_psm_req+0x46>
		    strlen(psm_param_rat) == 8) {
   4b518:	481a      	ldr	r0, [pc, #104]	; (4b584 <lte_lc_psm_req+0x7c>)
   4b51a:	f7f5 fc6b 	bl	40df4 <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   4b51e:	2808      	cmp	r0, #8
   4b520:	d115      	bne.n	4b54e <lte_lc_psm_req+0x46>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
   4b522:	4a18      	ldr	r2, [pc, #96]	; (4b584 <lte_lc_psm_req+0x7c>)
   4b524:	4916      	ldr	r1, [pc, #88]	; (4b580 <lte_lc_psm_req+0x78>)
   4b526:	4818      	ldr	r0, [pc, #96]	; (4b588 <lte_lc_psm_req+0x80>)
   4b528:	f006 f834 	bl	51594 <nrf_modem_at_printf>
		}
	} else {
		err = nrf_modem_at_printf(psm_disable);
	}

	if (err) {
   4b52c:	b160      	cbz	r0, 4b548 <lte_lc_psm_req+0x40>
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
   4b52e:	4b17      	ldr	r3, [pc, #92]	; (4b58c <lte_lc_psm_req+0x84>)
   4b530:	9003      	str	r0, [sp, #12]
   4b532:	9302      	str	r3, [sp, #8]
   4b534:	2300      	movs	r3, #0
   4b536:	2201      	movs	r2, #1
   4b538:	4618      	mov	r0, r3
   4b53a:	e9cd 3300 	strd	r3, r3, [sp]
   4b53e:	4914      	ldr	r1, [pc, #80]	; (4b590 <lte_lc_psm_req+0x88>)
   4b540:	f00c fa7a 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4b544:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   4b548:	b005      	add	sp, #20
   4b54a:	f85d fb04 	ldr.w	pc, [sp], #4
		} else if (strlen(psm_param_rptau) == 8) {
   4b54e:	480c      	ldr	r0, [pc, #48]	; (4b580 <lte_lc_psm_req+0x78>)
   4b550:	f7f5 fc50 	bl	40df4 <strlen>
   4b554:	2808      	cmp	r0, #8
   4b556:	d104      	bne.n	4b562 <lte_lc_psm_req+0x5a>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
   4b558:	4909      	ldr	r1, [pc, #36]	; (4b580 <lte_lc_psm_req+0x78>)
   4b55a:	480e      	ldr	r0, [pc, #56]	; (4b594 <lte_lc_psm_req+0x8c>)
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   4b55c:	f006 f81a 	bl	51594 <nrf_modem_at_printf>
   4b560:	e7e4      	b.n	4b52c <lte_lc_psm_req+0x24>
		} else if (strlen(psm_param_rat) == 8) {
   4b562:	4808      	ldr	r0, [pc, #32]	; (4b584 <lte_lc_psm_req+0x7c>)
   4b564:	f7f5 fc46 	bl	40df4 <strlen>
   4b568:	2808      	cmp	r0, #8
   4b56a:	d102      	bne.n	4b572 <lte_lc_psm_req+0x6a>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   4b56c:	4905      	ldr	r1, [pc, #20]	; (4b584 <lte_lc_psm_req+0x7c>)
   4b56e:	480a      	ldr	r0, [pc, #40]	; (4b598 <lte_lc_psm_req+0x90>)
   4b570:	e7f4      	b.n	4b55c <lte_lc_psm_req+0x54>
			err = nrf_modem_at_printf("AT+CPSMS=1");
   4b572:	480a      	ldr	r0, [pc, #40]	; (4b59c <lte_lc_psm_req+0x94>)
		err = nrf_modem_at_printf(psm_disable);
   4b574:	f006 f80e 	bl	51594 <nrf_modem_at_printf>
   4b578:	e7d8      	b.n	4b52c <lte_lc_psm_req+0x24>
   4b57a:	4809      	ldr	r0, [pc, #36]	; (4b5a0 <lte_lc_psm_req+0x98>)
   4b57c:	e7fa      	b.n	4b574 <lte_lc_psm_req+0x6c>
   4b57e:	bf00      	nop
   4b580:	2001aa25 	.word	0x2001aa25
   4b584:	2001aa2e 	.word	0x2001aa2e
   4b588:	0005ee09 	.word	0x0005ee09
   4b58c:	0005ee50 	.word	0x0005ee50
   4b590:	0005bf8c 	.word	0x0005bf8c
   4b594:	0005ee20 	.word	0x0005ee20
   4b598:	0005ee32 	.word	0x0005ee32
   4b59c:	0005ee45 	.word	0x0005ee45
   4b5a0:	0005f434 	.word	0x0005f434

0004b5a4 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
   4b5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   4b5a6:	2400      	movs	r4, #0
{
   4b5a8:	b091      	sub	sp, #68	; 0x44
   4b5aa:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   4b5ac:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   4b5ae:	e9cd 4407 	strd	r4, r4, [sp, #28]
	char tau_ext_str[9] = {0};
   4b5b2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	char tau_legacy_str[9] = {0};
   4b5b6:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	char active_time_str[9] = {0};
   4b5ba:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	char tau_ext_str[9] = {0};
   4b5be:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
	char tau_legacy_str[9] = {0};
   4b5c2:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
	if ((tau == NULL) || (active_time == NULL)) {
   4b5c6:	2800      	cmp	r0, #0
   4b5c8:	d06c      	beq.n	4b6a4 <lte_lc_psm_get+0x100>
   4b5ca:	2900      	cmp	r1, #0
   4b5cc:	d06a      	beq.n	4b6a4 <lte_lc_psm_get+0x100>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   4b5ce:	4f37      	ldr	r7, [pc, #220]	; (4b6ac <lte_lc_psm_get+0x108>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   4b5d0:	21a0      	movs	r1, #160	; 0xa0
   4b5d2:	4638      	mov	r0, r7
   4b5d4:	4a36      	ldr	r2, [pc, #216]	; (4b6b0 <lte_lc_psm_get+0x10c>)
	response[0] = '\0';
   4b5d6:	703c      	strb	r4, [r7, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   4b5d8:	f006 f824 	bl	51624 <nrf_modem_at_cmd>
	if (err) {
   4b5dc:	b178      	cbz	r0, 4b5fe <lte_lc_psm_get+0x5a>
		LOG_ERR("AT command failed, error: %d", err);
   4b5de:	4b35      	ldr	r3, [pc, #212]	; (4b6b4 <lte_lc_psm_get+0x110>)
   4b5e0:	9003      	str	r0, [sp, #12]
   4b5e2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b5e6:	4620      	mov	r0, r4
   4b5e8:	4623      	mov	r3, r4
   4b5ea:	9400      	str	r4, [sp, #0]
   4b5ec:	2201      	movs	r2, #1
   4b5ee:	4932      	ldr	r1, [pc, #200]	; (4b6b8 <lte_lc_psm_get+0x114>)
   4b5f0:	f00c fa22 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4b5f4:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   4b5f8:	4620      	mov	r0, r4
   4b5fa:	b011      	add	sp, #68	; 0x44
   4b5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   4b5fe:	212c      	movs	r1, #44	; 0x2c
   4b600:	4638      	mov	r0, r7
   4b602:	f00f fe49 	bl	5b298 <strchr>
	if (!comma_ptr) {
   4b606:	4604      	mov	r4, r0
   4b608:	b970      	cbnz	r0, 4b628 <lte_lc_psm_get+0x84>
		return -EBADMSG;
   4b60a:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   4b60e:	e7f3      	b.n	4b5f8 <lte_lc_psm_get+0x54>
		if (comma_ptr) {
   4b610:	b95c      	cbnz	r4, 4b62a <lte_lc_psm_get+0x86>
			LOG_ERR("AT command parsing failed");
   4b612:	4b2a      	ldr	r3, [pc, #168]	; (4b6bc <lte_lc_psm_get+0x118>)
   4b614:	2201      	movs	r2, #1
   4b616:	9302      	str	r3, [sp, #8]
   4b618:	2300      	movs	r3, #0
   4b61a:	4927      	ldr	r1, [pc, #156]	; (4b6b8 <lte_lc_psm_get+0x114>)
   4b61c:	4618      	mov	r0, r3
   4b61e:	e9cd 3300 	strd	r3, r3, [sp]
   4b622:	f00c fa09 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
			return -EBADMSG;
   4b626:	e7f0      	b.n	4b60a <lte_lc_psm_get+0x66>
   4b628:	270c      	movs	r7, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
   4b62a:	1c60      	adds	r0, r4, #1
   4b62c:	212c      	movs	r1, #44	; 0x2c
   4b62e:	f00f fe33 	bl	5b298 <strchr>
	for (int i = 0; i < 12; i++) {
   4b632:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   4b634:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   4b636:	d1eb      	bne.n	4b610 <lte_lc_psm_get+0x6c>
	if (comma_ptr) {
   4b638:	2800      	cmp	r0, #0
   4b63a:	d0ea      	beq.n	4b612 <lte_lc_psm_get+0x6e>
		strncpy(active_time_str, comma_ptr + 2, 8);
   4b63c:	1c81      	adds	r1, r0, #2
   4b63e:	2208      	movs	r2, #8
   4b640:	a807      	add	r0, sp, #28
   4b642:	f00f fe6c 	bl	5b31e <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   4b646:	1c60      	adds	r0, r4, #1
   4b648:	212c      	movs	r1, #44	; 0x2c
   4b64a:	f00f fe25 	bl	5b298 <strchr>
	if (comma_ptr) {
   4b64e:	4604      	mov	r4, r0
   4b650:	2800      	cmp	r0, #0
   4b652:	d0de      	beq.n	4b612 <lte_lc_psm_get+0x6e>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   4b654:	1c81      	adds	r1, r0, #2
   4b656:	2208      	movs	r2, #8
   4b658:	a80a      	add	r0, sp, #40	; 0x28
   4b65a:	f00f fe60 	bl	5b31e <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   4b65e:	212c      	movs	r1, #44	; 0x2c
   4b660:	1c60      	adds	r0, r4, #1
   4b662:	f00f fe19 	bl	5b298 <strchr>
	if (comma_ptr) {
   4b666:	b120      	cbz	r0, 4b672 <lte_lc_psm_get+0xce>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   4b668:	1c81      	adds	r1, r0, #2
   4b66a:	2208      	movs	r2, #8
   4b66c:	a80d      	add	r0, sp, #52	; 0x34
   4b66e:	f00f fe56 	bl	5b31e <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   4b672:	ab05      	add	r3, sp, #20
   4b674:	aa0d      	add	r2, sp, #52	; 0x34
   4b676:	a90a      	add	r1, sp, #40	; 0x28
   4b678:	a807      	add	r0, sp, #28
   4b67a:	f000 fd11 	bl	4c0a0 <parse_psm>
	if (err) {
   4b67e:	4604      	mov	r4, r0
   4b680:	b158      	cbz	r0, 4b69a <lte_lc_psm_get+0xf6>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   4b682:	4b0f      	ldr	r3, [pc, #60]	; (4b6c0 <lte_lc_psm_get+0x11c>)
   4b684:	9003      	str	r0, [sp, #12]
   4b686:	9302      	str	r3, [sp, #8]
   4b688:	2300      	movs	r3, #0
   4b68a:	2201      	movs	r2, #1
   4b68c:	4618      	mov	r0, r3
   4b68e:	e9cd 3300 	strd	r3, r3, [sp]
   4b692:	4909      	ldr	r1, [pc, #36]	; (4b6b8 <lte_lc_psm_get+0x114>)
   4b694:	f00c f9d0 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return err;
   4b698:	e7ae      	b.n	4b5f8 <lte_lc_psm_get+0x54>
	*tau = psm_cfg.tau;
   4b69a:	9b05      	ldr	r3, [sp, #20]
   4b69c:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   4b69e:	9b06      	ldr	r3, [sp, #24]
   4b6a0:	602b      	str	r3, [r5, #0]
	return 0;
   4b6a2:	e7a9      	b.n	4b5f8 <lte_lc_psm_get+0x54>
		return -EINVAL;
   4b6a4:	f06f 0415 	mvn.w	r4, #21
   4b6a8:	e7a6      	b.n	4b5f8 <lte_lc_psm_get+0x54>
   4b6aa:	bf00      	nop
   4b6ac:	2001f31a 	.word	0x2001f31a
   4b6b0:	0005ee7f 	.word	0x0005ee7f
   4b6b4:	0005ee8c 	.word	0x0005ee8c
   4b6b8:	0005bf8c 	.word	0x0005bf8c
   4b6bc:	0005eea9 	.word	0x0005eea9
   4b6c0:	0005eec3 	.word	0x0005eec3

0004b6c4 <at_handler_cereg>:
{
   4b6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
   4b6c6:	2400      	movs	r4, #0
{
   4b6c8:	4605      	mov	r5, r0
   4b6ca:	b0a9      	sub	sp, #164	; 0xa4
	struct lte_lc_evt evt = {0};
   4b6cc:	2248      	movs	r2, #72	; 0x48
   4b6ce:	2100      	movs	r1, #0
   4b6d0:	a816      	add	r0, sp, #88	; 0x58
   4b6d2:	f00f fc41 	bl	5af58 <memset>
	struct lte_lc_cell cell = {0};
   4b6d6:	2230      	movs	r2, #48	; 0x30
   4b6d8:	4621      	mov	r1, r4
   4b6da:	a80a      	add	r0, sp, #40	; 0x28
	enum lte_lc_nw_reg_status reg_status = 0;
   4b6dc:	f88d 401e 	strb.w	r4, [sp, #30]
	struct lte_lc_psm_cfg psm_cfg = {0};
   4b6e0:	af08      	add	r7, sp, #32
	struct lte_lc_cell cell = {0};
   4b6e2:	f00f fc39 	bl	5af58 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   4b6e6:	f10d 031f 	add.w	r3, sp, #31
	struct lte_lc_psm_cfg psm_cfg = {0};
   4b6ea:	607c      	str	r4, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   4b6ec:	2101      	movs	r1, #1
   4b6ee:	9300      	str	r3, [sp, #0]
   4b6f0:	4628      	mov	r0, r5
   4b6f2:	ab0a      	add	r3, sp, #40	; 0x28
   4b6f4:	f10d 021e 	add.w	r2, sp, #30
	struct lte_lc_psm_cfg psm_cfg = {0};
   4b6f8:	9408      	str	r4, [sp, #32]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   4b6fa:	f000 fdc9 	bl	4c290 <parse_cereg>
	if (err) {
   4b6fe:	b168      	cbz	r0, 4b71c <at_handler_cereg+0x58>
		LOG_ERR("Failed to parse notification (error %d): %s",
   4b700:	4b45      	ldr	r3, [pc, #276]	; (4b818 <at_handler_cereg+0x154>)
   4b702:	e9cd 0503 	strd	r0, r5, [sp, #12]
   4b706:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b70a:	2201      	movs	r2, #1
   4b70c:	4623      	mov	r3, r4
   4b70e:	4620      	mov	r0, r4
   4b710:	4942      	ldr	r1, [pc, #264]	; (4b81c <at_handler_cereg+0x158>)
   4b712:	9400      	str	r4, [sp, #0]
   4b714:	f00c f990 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
}
   4b718:	b029      	add	sp, #164	; 0xa4
   4b71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   4b71c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   4b720:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   4b724:	2b01      	cmp	r3, #1
   4b726:	d105      	bne.n	4b734 <at_handler_cereg+0x70>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   4b728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   4b72a:	3301      	adds	r3, #1
   4b72c:	d05b      	beq.n	4b7e6 <at_handler_cereg+0x122>
	z_impl_k_sem_give(sem);
   4b72e:	483c      	ldr	r0, [pc, #240]	; (4b820 <at_handler_cereg+0x15c>)
   4b730:	f006 ffda 	bl	526e8 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   4b734:	f000 fc36 	bl	4bfa4 <event_handler_list_is_empty>
   4b738:	2800      	cmp	r0, #0
   4b73a:	d1ed      	bne.n	4b718 <at_handler_cereg+0x54>
	if (reg_status != prev_reg_status) {
   4b73c:	4a39      	ldr	r2, [pc, #228]	; (4b824 <at_handler_cereg+0x160>)
   4b73e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   4b742:	7811      	ldrb	r1, [r2, #0]
   4b744:	4299      	cmp	r1, r3
   4b746:	d007      	beq.n	4b758 <at_handler_cereg+0x94>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   4b748:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   4b74c:	a816      	add	r0, sp, #88	; 0x58
		prev_reg_status = reg_status;
   4b74e:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   4b750:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   4b754:	f000 fc5a 	bl	4c00c <event_handler_list_dispatch>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   4b758:	2230      	movs	r2, #48	; 0x30
   4b75a:	4933      	ldr	r1, [pc, #204]	; (4b828 <at_handler_cereg+0x164>)
   4b75c:	a80a      	add	r0, sp, #40	; 0x28
   4b75e:	f00f fbb1 	bl	5aec4 <memcmp>
   4b762:	b1c8      	cbz	r0, 4b798 <at_handler_cereg+0xd4>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   4b764:	2304      	movs	r3, #4
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   4b766:	4d30      	ldr	r5, [pc, #192]	; (4b828 <at_handler_cereg+0x164>)
   4b768:	ac0a      	add	r4, sp, #40	; 0x28
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   4b76a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   4b76e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   4b770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   4b772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   4b774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   4b776:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4b77a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   4b77e:	ae18      	add	r6, sp, #96	; 0x60
   4b780:	ad0a      	add	r5, sp, #40	; 0x28
   4b782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   4b784:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   4b786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   4b788:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   4b78a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4b78e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   4b792:	a816      	add	r0, sp, #88	; 0x58
   4b794:	f000 fc3a 	bl	4c00c <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   4b798:	4a24      	ldr	r2, [pc, #144]	; (4b82c <at_handler_cereg+0x168>)
   4b79a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   4b79e:	7811      	ldrb	r1, [r2, #0]
   4b7a0:	4299      	cmp	r1, r3
   4b7a2:	d008      	beq.n	4b7b6 <at_handler_cereg+0xf2>
		prev_lte_mode = lte_mode;
   4b7a4:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   4b7a6:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   4b7a8:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   4b7aa:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		evt.lte_mode = lte_mode;
   4b7ae:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   4b7b2:	f000 fc2b 	bl	4c00c <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   4b7b6:	f89d 401e 	ldrb.w	r4, [sp, #30]
   4b7ba:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   4b7be:	2c01      	cmp	r4, #1
   4b7c0:	d1aa      	bne.n	4b718 <at_handler_cereg+0x54>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   4b7c2:	4638      	mov	r0, r7
   4b7c4:	a909      	add	r1, sp, #36	; 0x24
   4b7c6:	f7ff feed 	bl	4b5a4 <lte_lc_psm_get>
	if (err) {
   4b7ca:	b180      	cbz	r0, 4b7ee <at_handler_cereg+0x12a>
		if (err != -EBADMSG) {
   4b7cc:	304d      	adds	r0, #77	; 0x4d
   4b7ce:	d0a3      	beq.n	4b718 <at_handler_cereg+0x54>
			LOG_ERR("Failed to get PSM information");
   4b7d0:	4b17      	ldr	r3, [pc, #92]	; (4b830 <at_handler_cereg+0x16c>)
   4b7d2:	4622      	mov	r2, r4
   4b7d4:	9302      	str	r3, [sp, #8]
   4b7d6:	2300      	movs	r3, #0
   4b7d8:	4910      	ldr	r1, [pc, #64]	; (4b81c <at_handler_cereg+0x158>)
   4b7da:	4618      	mov	r0, r3
   4b7dc:	e9cd 3300 	strd	r3, r3, [sp]
   4b7e0:	f00c f92a 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
   4b7e4:	e798      	b.n	4b718 <at_handler_cereg+0x54>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   4b7e6:	2304      	movs	r3, #4
   4b7e8:	f88d 301e 	strb.w	r3, [sp, #30]
   4b7ec:	e7a2      	b.n	4b734 <at_handler_cereg+0x70>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   4b7ee:	4d11      	ldr	r5, [pc, #68]	; (4b834 <at_handler_cereg+0x170>)
   4b7f0:	2208      	movs	r2, #8
   4b7f2:	4629      	mov	r1, r5
   4b7f4:	4638      	mov	r0, r7
   4b7f6:	f00f fb65 	bl	5aec4 <memcmp>
   4b7fa:	2800      	cmp	r0, #0
   4b7fc:	d08c      	beq.n	4b718 <at_handler_cereg+0x54>
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   4b7fe:	e897 0003 	ldmia.w	r7, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   4b802:	ab18      	add	r3, sp, #96	; 0x60
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   4b804:	e885 0003 	stmia.w	r5, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   4b808:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   4b80c:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   4b80e:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   4b812:	f000 fbfb 	bl	4c00c <event_handler_list_dispatch>
   4b816:	e77f      	b.n	4b718 <at_handler_cereg+0x54>
   4b818:	0005eef0 	.word	0x0005eef0
   4b81c:	0005bf8c 	.word	0x0005bf8c
   4b820:	2001b854 	.word	0x2001b854
   4b824:	2001f3bb 	.word	0x2001f3bb
   4b828:	2001ada8 	.word	0x2001ada8
   4b82c:	2001f3ba 	.word	0x2001f3ba
   4b830:	0005ef1c 	.word	0x0005ef1c
   4b834:	2001b84c 	.word	0x2001b84c

0004b838 <lte_lc_edrx_req>:
}

int lte_lc_edrx_req(bool enable)
{
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   4b838:	2204      	movs	r2, #4
   4b83a:	2305      	movs	r3, #5
{
   4b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b840:	b087      	sub	sp, #28

	if (!enable) {
   4b842:	4604      	mov	r4, r0
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   4b844:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (!enable) {
   4b848:	b958      	cbnz	r0, 4b862 <lte_lc_edrx_req+0x2a>
		err = nrf_modem_at_printf(edrx_disable);
   4b84a:	4829      	ldr	r0, [pc, #164]	; (4b8f0 <lte_lc_edrx_req+0xb8>)
   4b84c:	f005 fea2 	bl	51594 <nrf_modem_at_printf>
		if (err) {
   4b850:	2800      	cmp	r0, #0
   4b852:	d04b      	beq.n	4b8ec <lte_lc_edrx_req+0xb4>
			LOG_ERR("Failed to disable eDRX, reported error: %d", err);
   4b854:	4b27      	ldr	r3, [pc, #156]	; (4b8f4 <lte_lc_edrx_req+0xbc>)
   4b856:	9003      	str	r0, [sp, #12]
			continue;
		}

		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
		if (err) {
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   4b858:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4b85c:	9400      	str	r4, [sp, #0]
   4b85e:	4623      	mov	r3, r4
   4b860:	e023      	b.n	4b8aa <lte_lc_edrx_req+0x72>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   4b862:	2500      	movs	r5, #0
					edrx_param_ltem : edrx_param_nbiot;
   4b864:	4f24      	ldr	r7, [pc, #144]	; (4b8f8 <lte_lc_edrx_req+0xc0>)
   4b866:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4b918 <lte_lc_edrx_req+0xe0>
   4b86a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4b91c <lte_lc_edrx_req+0xe4>
   4b86e:	ae04      	add	r6, sp, #16
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   4b870:	f856 ab04 	ldr.w	sl, [r6], #4
					edrx_param_ltem : edrx_param_nbiot;
   4b874:	4b21      	ldr	r3, [pc, #132]	; (4b8fc <lte_lc_edrx_req+0xc4>)
   4b876:	f1ba 0f04 	cmp.w	sl, #4
   4b87a:	bf14      	ite	ne
   4b87c:	463c      	movne	r4, r7
   4b87e:	4644      	moveq	r4, r8
		if (strlen(edrx_param) == 4) {
   4b880:	4620      	mov	r0, r4
					edrx_param_ltem : edrx_param_nbiot;
   4b882:	bf14      	ite	ne
   4b884:	46cb      	movne	fp, r9
   4b886:	469b      	moveq	fp, r3
		if (strlen(edrx_param) == 4) {
   4b888:	f7f5 fab4 	bl	40df4 <strlen>
   4b88c:	2804      	cmp	r0, #4
   4b88e:	d118      	bne.n	4b8c2 <lte_lc_edrx_req+0x8a>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   4b890:	4622      	mov	r2, r4
   4b892:	4651      	mov	r1, sl
   4b894:	481a      	ldr	r0, [pc, #104]	; (4b900 <lte_lc_edrx_req+0xc8>)
   4b896:	f005 fe7d 	bl	51594 <nrf_modem_at_printf>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   4b89a:	4604      	mov	r4, r0
		if (err) {
   4b89c:	b1b0      	cbz	r0, 4b8cc <lte_lc_edrx_req+0x94>
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
   4b89e:	4b19      	ldr	r3, [pc, #100]	; (4b904 <lte_lc_edrx_req+0xcc>)
   4b8a0:	9003      	str	r0, [sp, #12]
   4b8a2:	9302      	str	r3, [sp, #8]
   4b8a4:	2300      	movs	r3, #0
   4b8a6:	e9cd 3300 	strd	r3, r3, [sp]
   4b8aa:	4618      	mov	r0, r3
   4b8ac:	2201      	movs	r2, #1
   4b8ae:	4916      	ldr	r1, [pc, #88]	; (4b908 <lte_lc_edrx_req+0xd0>)
   4b8b0:	f00c f8c2 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
   4b8b4:	f06f 000d 	mvn.w	r0, #13
			return -EFAULT;
		}
	}

	return 0;
}
   4b8b8:	b007      	add	sp, #28
   4b8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   4b8be:	2501      	movs	r5, #1
   4b8c0:	e7d6      	b.n	4b870 <lte_lc_edrx_req+0x38>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   4b8c2:	4651      	mov	r1, sl
   4b8c4:	4811      	ldr	r0, [pc, #68]	; (4b90c <lte_lc_edrx_req+0xd4>)
   4b8c6:	f005 fe65 	bl	51594 <nrf_modem_at_printf>
   4b8ca:	e7e6      	b.n	4b89a <lte_lc_edrx_req+0x62>
		if (strlen(ptw_param) != 4) {
   4b8cc:	4658      	mov	r0, fp
   4b8ce:	f7f5 fa91 	bl	40df4 <strlen>
   4b8d2:	2804      	cmp	r0, #4
   4b8d4:	d108      	bne.n	4b8e8 <lte_lc_edrx_req+0xb0>
		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   4b8d6:	465a      	mov	r2, fp
   4b8d8:	4651      	mov	r1, sl
   4b8da:	480d      	ldr	r0, [pc, #52]	; (4b910 <lte_lc_edrx_req+0xd8>)
   4b8dc:	f005 fe5a 	bl	51594 <nrf_modem_at_printf>
		if (err) {
   4b8e0:	b110      	cbz	r0, 4b8e8 <lte_lc_edrx_req+0xb0>
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   4b8e2:	4b0c      	ldr	r3, [pc, #48]	; (4b914 <lte_lc_edrx_req+0xdc>)
   4b8e4:	9003      	str	r0, [sp, #12]
   4b8e6:	e7b7      	b.n	4b858 <lte_lc_edrx_req+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   4b8e8:	2d00      	cmp	r5, #0
   4b8ea:	d0e8      	beq.n	4b8be <lte_lc_edrx_req+0x86>
		return 0;
   4b8ec:	2000      	movs	r0, #0
   4b8ee:	e7e3      	b.n	4b8b8 <lte_lc_edrx_req+0x80>
   4b8f0:	0005f43e 	.word	0x0005f43e
   4b8f4:	0005ef3a 	.word	0x0005ef3a
   4b8f8:	2001aa37 	.word	0x2001aa37
   4b8fc:	2001f3c7 	.word	0x2001f3c7
   4b900:	0005ef65 	.word	0x0005ef65
   4b904:	0005ef88 	.word	0x0005ef88
   4b908:	0005bf8c 	.word	0x0005bf8c
   4b90c:	0005ef79 	.word	0x0005ef79
   4b910:	0005efb2 	.word	0x0005efb2
   4b914:	0005efc3 	.word	0x0005efc3
   4b918:	2001aa3c 	.word	0x2001aa3c
   4b91c:	2001f3c2 	.word	0x2001f3c2

0004b920 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   4b920:	b530      	push	{r4, r5, lr}
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   4b922:	2500      	movs	r5, #0
{
   4b924:	b087      	sub	sp, #28

	if (status == NULL) {
   4b926:	4604      	mov	r4, r0
	uint32_t cell_id = 0;
   4b928:	9505      	str	r5, [sp, #20]
	if (status == NULL) {
   4b92a:	b300      	cbz	r0, 4b96e <lte_lc_nw_reg_status_get+0x4e>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   4b92c:	4911      	ldr	r1, [pc, #68]	; (4b974 <lte_lc_nw_reg_status_get+0x54>)
   4b92e:	4812      	ldr	r0, [pc, #72]	; (4b978 <lte_lc_nw_reg_status_get+0x58>)
   4b930:	ab05      	add	r3, sp, #20
   4b932:	f10d 0212 	add.w	r2, sp, #18
   4b936:	f005 ff11 	bl	5175c <nrf_modem_at_scanf>
		"%hu,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   4b93a:	2800      	cmp	r0, #0
   4b93c:	dc0e      	bgt.n	4b95c <lte_lc_nw_reg_status_get+0x3c>
		LOG_ERR("Could not get registration status, error: %d", err);
   4b93e:	4b0f      	ldr	r3, [pc, #60]	; (4b97c <lte_lc_nw_reg_status_get+0x5c>)
   4b940:	9003      	str	r0, [sp, #12]
   4b942:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4b946:	4628      	mov	r0, r5
   4b948:	462b      	mov	r3, r5
   4b94a:	2201      	movs	r2, #1
   4b94c:	490c      	ldr	r1, [pc, #48]	; (4b980 <lte_lc_nw_reg_status_get+0x60>)
   4b94e:	9500      	str	r5, [sp, #0]
   4b950:	f00c f872 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4b954:	f06f 000d 	mvn.w	r0, #13
	} else {
		*status = status_tmp;
	}

	return 0;
}
   4b958:	b007      	add	sp, #28
   4b95a:	bd30      	pop	{r4, r5, pc}
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   4b95c:	9b05      	ldr	r3, [sp, #20]
	return 0;
   4b95e:	2000      	movs	r0, #0
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   4b960:	3301      	adds	r3, #1
		*status = status_tmp;
   4b962:	bf0c      	ite	eq
   4b964:	2304      	moveq	r3, #4
   4b966:	f89d 3012 	ldrbne.w	r3, [sp, #18]
		*status = LTE_LC_NW_REG_UNKNOWN;
   4b96a:	7023      	strb	r3, [r4, #0]
   4b96c:	e7f4      	b.n	4b958 <lte_lc_nw_reg_status_get+0x38>
		return -EINVAL;
   4b96e:	f06f 0015 	mvn.w	r0, #21
   4b972:	e7f1      	b.n	4b958 <lte_lc_nw_reg_status_get+0x38>
   4b974:	0005efed 	.word	0x0005efed
   4b978:	0005f00a 	.word	0x0005f00a
   4b97c:	0005f014 	.word	0x0005f014
   4b980:	0005bf8c 	.word	0x0005bf8c

0004b984 <lte_lc_system_mode_set>:

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   4b984:	b530      	push	{r4, r5, lr}
	int err;

	switch (mode) {
   4b986:	2807      	cmp	r0, #7
{
   4b988:	4605      	mov	r5, r0
   4b98a:	460c      	mov	r4, r1
   4b98c:	b085      	sub	sp, #20
	switch (mode) {
   4b98e:	d90e      	bls.n	4b9ae <lte_lc_system_mode_set+0x2a>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   4b990:	4b19      	ldr	r3, [pc, #100]	; (4b9f8 <lte_lc_system_mode_set+0x74>)
   4b992:	9003      	str	r0, [sp, #12]
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   4b994:	9302      	str	r3, [sp, #8]
   4b996:	2300      	movs	r3, #0
   4b998:	2201      	movs	r2, #1
   4b99a:	4618      	mov	r0, r3
   4b99c:	e9cd 3300 	strd	r3, r3, [sp]
   4b9a0:	4916      	ldr	r1, [pc, #88]	; (4b9fc <lte_lc_system_mode_set+0x78>)
   4b9a2:	f00c f849 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   4b9a6:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   4b9aa:	b005      	add	sp, #20
   4b9ac:	bd30      	pop	{r4, r5, pc}
	switch (preference) {
   4b9ae:	2904      	cmp	r1, #4
   4b9b0:	d902      	bls.n	4b9b8 <lte_lc_system_mode_set+0x34>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   4b9b2:	4b13      	ldr	r3, [pc, #76]	; (4ba00 <lte_lc_system_mode_set+0x7c>)
   4b9b4:	9103      	str	r1, [sp, #12]
   4b9b6:	e7ed      	b.n	4b994 <lte_lc_system_mode_set+0x10>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   4b9b8:	4b12      	ldr	r3, [pc, #72]	; (4ba04 <lte_lc_system_mode_set+0x80>)
   4b9ba:	5c5a      	ldrb	r2, [r3, r1]
   4b9bc:	4b12      	ldr	r3, [pc, #72]	; (4ba08 <lte_lc_system_mode_set+0x84>)
   4b9be:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   4b9c2:	4812      	ldr	r0, [pc, #72]	; (4ba0c <lte_lc_system_mode_set+0x88>)
   4b9c4:	f005 fde6 	bl	51594 <nrf_modem_at_printf>
	if (err) {
   4b9c8:	b168      	cbz	r0, 4b9e6 <lte_lc_system_mode_set+0x62>
		LOG_ERR("Could not send AT command, error: %d", err);
   4b9ca:	4b11      	ldr	r3, [pc, #68]	; (4ba10 <lte_lc_system_mode_set+0x8c>)
   4b9cc:	9003      	str	r0, [sp, #12]
   4b9ce:	9302      	str	r3, [sp, #8]
   4b9d0:	2300      	movs	r3, #0
   4b9d2:	2201      	movs	r2, #1
   4b9d4:	4618      	mov	r0, r3
   4b9d6:	e9cd 3300 	strd	r3, r3, [sp]
   4b9da:	4908      	ldr	r1, [pc, #32]	; (4b9fc <lte_lc_system_mode_set+0x78>)
   4b9dc:	f00c f82c 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4b9e0:	f06f 000d 	mvn.w	r0, #13
   4b9e4:	e7e1      	b.n	4b9aa <lte_lc_system_mode_set+0x26>
	sys_mode_current = mode;
   4b9e6:	4b0b      	ldr	r3, [pc, #44]	; (4ba14 <lte_lc_system_mode_set+0x90>)
   4b9e8:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   4b9ea:	4b0b      	ldr	r3, [pc, #44]	; (4ba18 <lte_lc_system_mode_set+0x94>)
   4b9ec:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   4b9ee:	4b0b      	ldr	r3, [pc, #44]	; (4ba1c <lte_lc_system_mode_set+0x98>)
   4b9f0:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   4b9f2:	4b0b      	ldr	r3, [pc, #44]	; (4ba20 <lte_lc_system_mode_set+0x9c>)
   4b9f4:	701c      	strb	r4, [r3, #0]
	return 0;
   4b9f6:	e7d8      	b.n	4b9aa <lte_lc_system_mode_set+0x26>
   4b9f8:	0005f041 	.word	0x0005f041
   4b9fc:	0005bf8c 	.word	0x0005bf8c
   4ba00:	0005f063 	.word	0x0005f063
   4ba04:	0005f424 	.word	0x0005f424
   4ba08:	0005c500 	.word	0x0005c500
   4ba0c:	0005f088 	.word	0x0005f088
   4ba10:	0005f09e 	.word	0x0005f09e
   4ba14:	2001f3bc 	.word	0x2001f3bc
   4ba18:	2001aa24 	.word	0x2001aa24
   4ba1c:	2001f3bd 	.word	0x2001f3bd
   4ba20:	2001f3be 	.word	0x2001f3be

0004ba24 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   4ba24:	b570      	push	{r4, r5, r6, lr}
	int err;
	int mode_bitmask = 0;
	int ltem_mode = 0;
   4ba26:	2600      	movs	r6, #0
{
   4ba28:	b088      	sub	sp, #32
   4ba2a:	460c      	mov	r4, r1
	int nbiot_mode = 0;
	int gps_mode = 0;
	int mode_preference = 0;

	if (mode == NULL) {
   4ba2c:	4605      	mov	r5, r0
	int nbiot_mode = 0;
   4ba2e:	e9cd 6604 	strd	r6, r6, [sp, #16]
	int mode_preference = 0;
   4ba32:	e9cd 6606 	strd	r6, r6, [sp, #24]
	if (mode == NULL) {
   4ba36:	2800      	cmp	r0, #0
   4ba38:	f000 8081 	beq.w	4bb3e <lte_lc_system_mode_get+0x11a>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   4ba3c:	ab07      	add	r3, sp, #28
   4ba3e:	9301      	str	r3, [sp, #4]
   4ba40:	ab06      	add	r3, sp, #24
   4ba42:	9300      	str	r3, [sp, #0]
   4ba44:	493f      	ldr	r1, [pc, #252]	; (4bb44 <lte_lc_system_mode_get+0x120>)
   4ba46:	4840      	ldr	r0, [pc, #256]	; (4bb48 <lte_lc_system_mode_get+0x124>)
   4ba48:	ab05      	add	r3, sp, #20
   4ba4a:	aa04      	add	r2, sp, #16
   4ba4c:	f005 fe86 	bl	5175c <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   4ba50:	2804      	cmp	r0, #4
   4ba52:	d00b      	beq.n	4ba6c <lte_lc_system_mode_get+0x48>
		LOG_ERR("Failed to get system mode, error: %d", err);
   4ba54:	4b3d      	ldr	r3, [pc, #244]	; (4bb4c <lte_lc_system_mode_get+0x128>)
   4ba56:	9003      	str	r0, [sp, #12]
   4ba58:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4ba5c:	9600      	str	r6, [sp, #0]
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   4ba5e:	2300      	movs	r3, #0
   4ba60:	2201      	movs	r2, #1
   4ba62:	4618      	mov	r0, r3
   4ba64:	493a      	ldr	r1, [pc, #232]	; (4bb50 <lte_lc_system_mode_get+0x12c>)
   4ba66:	f00b ffe7 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
   4ba6a:	e03d      	b.n	4bae8 <lte_lc_system_mode_get+0xc4>
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   4ba6c:	9b05      	ldr	r3, [sp, #20]
   4ba6e:	1e1a      	subs	r2, r3, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   4ba70:	9b04      	ldr	r3, [sp, #16]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   4ba72:	bf18      	it	ne
   4ba74:	2201      	movne	r2, #1
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   4ba76:	3b00      	subs	r3, #0
   4ba78:	bf18      	it	ne
   4ba7a:	2301      	movne	r3, #1
   4ba7c:	005b      	lsls	r3, r3, #1
   4ba7e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   4ba82:	9a06      	ldr	r2, [sp, #24]
   4ba84:	3a00      	subs	r2, #0
   4ba86:	bf18      	it	ne
   4ba88:	2201      	movne	r2, #1
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   4ba8a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
	switch (mode_bitmask) {
   4ba8e:	2b0e      	cmp	r3, #14
   4ba90:	d820      	bhi.n	4bad4 <lte_lc_system_mode_get+0xb0>
   4ba92:	e8df f003 	tbb	[pc, r3]
   4ba96:	1f2c      	.short	0x1f2c
   4ba98:	1f2e1f08 	.word	0x1f2e1f08
   4ba9c:	1f151f1b 	.word	0x1f151f1b
   4baa0:	1f191f17 	.word	0x1f191f17
   4baa4:	1d          	.byte	0x1d
   4baa5:	00          	.byte	0x00
   4baa6:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   4baa8:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   4baaa:	2c00      	cmp	r4, #0
   4baac:	d03d      	beq.n	4bb2a <lte_lc_system_mode_get+0x106>
		switch (mode_preference) {
   4baae:	9a07      	ldr	r2, [sp, #28]
   4bab0:	2300      	movs	r3, #0
   4bab2:	2a04      	cmp	r2, #4
   4bab4:	d833      	bhi.n	4bb1e <lte_lc_system_mode_get+0xfa>
   4bab6:	e8df f002 	tbb	[pc, r2]
   4baba:	1e1f      	.short	0x1e1f
   4babc:	2e2c      	.short	0x2e2c
   4babe:	30          	.byte	0x30
   4babf:	00          	.byte	0x00
		break;
   4bac0:	2303      	movs	r3, #3
   4bac2:	e7f1      	b.n	4baa8 <lte_lc_system_mode_get+0x84>
		break;
   4bac4:	2304      	movs	r3, #4
   4bac6:	e7ef      	b.n	4baa8 <lte_lc_system_mode_get+0x84>
		break;
   4bac8:	2305      	movs	r3, #5
   4baca:	e7ed      	b.n	4baa8 <lte_lc_system_mode_get+0x84>
		break;
   4bacc:	2306      	movs	r3, #6
   4bace:	e7eb      	b.n	4baa8 <lte_lc_system_mode_get+0x84>
		break;
   4bad0:	2307      	movs	r3, #7
   4bad2:	e7e9      	b.n	4baa8 <lte_lc_system_mode_get+0x84>
		LOG_ERR("Invalid system mode, assuming parsing error");
   4bad4:	4b1f      	ldr	r3, [pc, #124]	; (4bb54 <lte_lc_system_mode_get+0x130>)
   4bad6:	2201      	movs	r2, #1
   4bad8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4badc:	2300      	movs	r3, #0
   4bade:	491c      	ldr	r1, [pc, #112]	; (4bb50 <lte_lc_system_mode_get+0x12c>)
   4bae0:	4618      	mov	r0, r3
   4bae2:	9600      	str	r6, [sp, #0]
   4bae4:	f00b ffa8 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4bae8:	f06f 000d 	mvn.w	r0, #13
   4baec:	e023      	b.n	4bb36 <lte_lc_system_mode_get+0x112>
	switch (mode_bitmask) {
   4baee:	2300      	movs	r3, #0
   4baf0:	e7da      	b.n	4baa8 <lte_lc_system_mode_get+0x84>
   4baf2:	2302      	movs	r3, #2
   4baf4:	e7d8      	b.n	4baa8 <lte_lc_system_mode_get+0x84>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   4baf6:	2301      	movs	r3, #1
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   4baf8:	7023      	strb	r3, [r4, #0]
		}
	}

	if (sys_mode_current != *mode) {
   4bafa:	4b17      	ldr	r3, [pc, #92]	; (4bb58 <lte_lc_system_mode_get+0x134>)
   4bafc:	782a      	ldrb	r2, [r5, #0]
   4bafe:	7819      	ldrb	r1, [r3, #0]
   4bb00:	4291      	cmp	r1, r2
   4bb02:	d11a      	bne.n	4bb3a <lte_lc_system_mode_get+0x116>
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
	}

	if ((preference != NULL) && (mode_pref_current != *preference)) {
   4bb04:	4b15      	ldr	r3, [pc, #84]	; (4bb5c <lte_lc_system_mode_get+0x138>)
   4bb06:	7822      	ldrb	r2, [r4, #0]
   4bb08:	7819      	ldrb	r1, [r3, #0]
   4bb0a:	4291      	cmp	r1, r2
   4bb0c:	d012      	beq.n	4bb34 <lte_lc_system_mode_get+0x110>
		LOG_DBG("Current system mode preference updated from %d to %d",
			mode_pref_current, *preference);
		mode_pref_current = *preference;
   4bb0e:	701a      	strb	r2, [r3, #0]
   4bb10:	e010      	b.n	4bb34 <lte_lc_system_mode_get+0x110>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   4bb12:	2302      	movs	r3, #2
   4bb14:	e7f0      	b.n	4baf8 <lte_lc_system_mode_get+0xd4>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   4bb16:	2303      	movs	r3, #3
   4bb18:	e7ee      	b.n	4baf8 <lte_lc_system_mode_get+0xd4>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   4bb1a:	2304      	movs	r3, #4
   4bb1c:	e7ec      	b.n	4baf8 <lte_lc_system_mode_get+0xd4>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   4bb1e:	9203      	str	r2, [sp, #12]
   4bb20:	4a0f      	ldr	r2, [pc, #60]	; (4bb60 <lte_lc_system_mode_get+0x13c>)
   4bb22:	9300      	str	r3, [sp, #0]
   4bb24:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4bb28:	e799      	b.n	4ba5e <lte_lc_system_mode_get+0x3a>
	if (sys_mode_current != *mode) {
   4bb2a:	4a0b      	ldr	r2, [pc, #44]	; (4bb58 <lte_lc_system_mode_get+0x134>)
   4bb2c:	7811      	ldrb	r1, [r2, #0]
   4bb2e:	4299      	cmp	r1, r3
		sys_mode_current = *mode;
   4bb30:	bf18      	it	ne
   4bb32:	7013      	strbne	r3, [r2, #0]
	}

	return 0;
   4bb34:	2000      	movs	r0, #0
}
   4bb36:	b008      	add	sp, #32
   4bb38:	bd70      	pop	{r4, r5, r6, pc}
		sys_mode_current = *mode;
   4bb3a:	701a      	strb	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   4bb3c:	e7e2      	b.n	4bb04 <lte_lc_system_mode_get+0xe0>
		return -EINVAL;
   4bb3e:	f06f 0015 	mvn.w	r0, #21
   4bb42:	e7f8      	b.n	4bb36 <lte_lc_system_mode_get+0x112>
   4bb44:	0005f0c3 	.word	0x0005f0c3
   4bb48:	0005f0de 	.word	0x0005f0de
   4bb4c:	0005f0ee 	.word	0x0005f0ee
   4bb50:	0005bf8c 	.word	0x0005bf8c
   4bb54:	0005f113 	.word	0x0005f113
   4bb58:	2001f3bc 	.word	0x2001f3bc
   4bb5c:	2001f3bd 	.word	0x2001f3bd
   4bb60:	0005f13f 	.word	0x0005f13f

0004bb64 <init_and_config>:
{
   4bb64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (is_initialized) {
   4bb68:	4e24      	ldr	r6, [pc, #144]	; (4bbfc <init_and_config+0x98>)
   4bb6a:	7835      	ldrb	r5, [r6, #0]
   4bb6c:	2d00      	cmp	r5, #0
   4bb6e:	d143      	bne.n	4bbf8 <init_and_config+0x94>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   4bb70:	4f23      	ldr	r7, [pc, #140]	; (4bc00 <init_and_config+0x9c>)
   4bb72:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 4bc20 <init_and_config+0xbc>
	return z_impl_k_sem_init(sem, initial_count, limit);
   4bb76:	2201      	movs	r2, #1
   4bb78:	4629      	mov	r1, r5
   4bb7a:	4822      	ldr	r0, [pc, #136]	; (4bc04 <init_and_config+0xa0>)
   4bb7c:	f00e ff1c 	bl	5a9b8 <z_impl_k_sem_init>
   4bb80:	4639      	mov	r1, r7
   4bb82:	4640      	mov	r0, r8
   4bb84:	f7ff ff4e 	bl	4ba24 <lte_lc_system_mode_get>
	if (err) {
   4bb88:	4604      	mov	r4, r0
   4bb8a:	b170      	cbz	r0, 4bbaa <init_and_config+0x46>
		LOG_ERR("Could not get current system mode, error: %d", err);
   4bb8c:	4b1e      	ldr	r3, [pc, #120]	; (4bc08 <init_and_config+0xa4>)
   4bb8e:	9003      	str	r0, [sp, #12]
   4bb90:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4bb94:	462b      	mov	r3, r5
   4bb96:	9500      	str	r5, [sp, #0]
			LOG_ERR("Could not set system mode, error: %d", err);
   4bb98:	2201      	movs	r2, #1
   4bb9a:	4618      	mov	r0, r3
   4bb9c:	491b      	ldr	r1, [pc, #108]	; (4bc0c <init_and_config+0xa8>)
   4bb9e:	f00b ff4b 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
}
   4bba2:	4620      	mov	r0, r4
   4bba4:	b004      	add	sp, #16
   4bba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((sys_mode_current != sys_mode_target) ||
   4bbaa:	4b19      	ldr	r3, [pc, #100]	; (4bc10 <init_and_config+0xac>)
   4bbac:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   4bbae:	4b19      	ldr	r3, [pc, #100]	; (4bc14 <init_and_config+0xb0>)
   4bbb0:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   4bbb2:	f898 3000 	ldrb.w	r3, [r8]
   4bbb6:	4283      	cmp	r3, r0
   4bbb8:	d102      	bne.n	4bbc0 <init_and_config+0x5c>
   4bbba:	783b      	ldrb	r3, [r7, #0]
   4bbbc:	428b      	cmp	r3, r1
   4bbbe:	d00a      	beq.n	4bbd6 <init_and_config+0x72>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   4bbc0:	f7ff fee0 	bl	4b984 <lte_lc_system_mode_set>
		if (err) {
   4bbc4:	4604      	mov	r4, r0
   4bbc6:	b130      	cbz	r0, 4bbd6 <init_and_config+0x72>
			LOG_ERR("Could not set system mode, error: %d", err);
   4bbc8:	4b13      	ldr	r3, [pc, #76]	; (4bc18 <init_and_config+0xb4>)
   4bbca:	9003      	str	r0, [sp, #12]
   4bbcc:	9302      	str	r3, [sp, #8]
   4bbce:	2300      	movs	r3, #0
   4bbd0:	e9cd 3300 	strd	r3, r3, [sp]
   4bbd4:	e7e0      	b.n	4bb98 <init_and_config+0x34>
	err = enable_notifications();
   4bbd6:	f7ff faa9 	bl	4b12c <enable_notifications>
	if (err) {
   4bbda:	4604      	mov	r4, r0
   4bbdc:	b150      	cbz	r0, 4bbf4 <init_and_config+0x90>
		LOG_ERR("Failed to enable notifications");
   4bbde:	4b0f      	ldr	r3, [pc, #60]	; (4bc1c <init_and_config+0xb8>)
   4bbe0:	2201      	movs	r2, #1
   4bbe2:	9302      	str	r3, [sp, #8]
   4bbe4:	2300      	movs	r3, #0
   4bbe6:	4909      	ldr	r1, [pc, #36]	; (4bc0c <init_and_config+0xa8>)
   4bbe8:	4618      	mov	r0, r3
   4bbea:	e9cd 3300 	strd	r3, r3, [sp]
   4bbee:	f00b ff23 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return err;
   4bbf2:	e7d6      	b.n	4bba2 <init_and_config+0x3e>
	is_initialized = true;
   4bbf4:	2301      	movs	r3, #1
   4bbf6:	7033      	strb	r3, [r6, #0]
		return 0;
   4bbf8:	2400      	movs	r4, #0
   4bbfa:	e7d2      	b.n	4bba2 <init_and_config+0x3e>
   4bbfc:	2001f3cc 	.word	0x2001f3cc
   4bc00:	2001f3bd 	.word	0x2001f3bd
   4bc04:	2001b854 	.word	0x2001b854
   4bc08:	0005f15e 	.word	0x0005f15e
   4bc0c:	0005bf8c 	.word	0x0005bf8c
   4bc10:	2001aa24 	.word	0x2001aa24
   4bc14:	2001f3be 	.word	0x2001f3be
   4bc18:	0005f18b 	.word	0x0005f18b
   4bc1c:	0005f1b0 	.word	0x0005f1b0
   4bc20:	2001f3bc 	.word	0x2001f3bc

0004bc24 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   4bc24:	b510      	push	{r4, lr}
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   4bc26:	4604      	mov	r4, r0
{
   4bc28:	b086      	sub	sp, #24
	if (mode == NULL) {
   4bc2a:	b1e0      	cbz	r0, 4bc66 <lte_lc_func_mode_get+0x42>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   4bc2c:	490f      	ldr	r1, [pc, #60]	; (4bc6c <lte_lc_func_mode_get+0x48>)
   4bc2e:	4810      	ldr	r0, [pc, #64]	; (4bc70 <lte_lc_func_mode_get+0x4c>)
   4bc30:	f10d 0216 	add.w	r2, sp, #22
   4bc34:	f005 fd92 	bl	5175c <nrf_modem_at_scanf>
	if (err != 1) {
   4bc38:	2801      	cmp	r0, #1
   4bc3a:	f04f 0300 	mov.w	r3, #0
   4bc3e:	d00d      	beq.n	4bc5c <lte_lc_func_mode_get+0x38>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   4bc40:	4a0c      	ldr	r2, [pc, #48]	; (4bc74 <lte_lc_func_mode_get+0x50>)
   4bc42:	9003      	str	r0, [sp, #12]
   4bc44:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4bc48:	4618      	mov	r0, r3
   4bc4a:	2201      	movs	r2, #1
   4bc4c:	490a      	ldr	r1, [pc, #40]	; (4bc78 <lte_lc_func_mode_get+0x54>)
   4bc4e:	9300      	str	r3, [sp, #0]
   4bc50:	f00b fef2 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4bc54:	f06f 000d 	mvn.w	r0, #13
	}

	*mode = mode_tmp;

	return 0;
}
   4bc58:	b006      	add	sp, #24
   4bc5a:	bd10      	pop	{r4, pc}
	*mode = mode_tmp;
   4bc5c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
	return 0;
   4bc60:	4618      	mov	r0, r3
	*mode = mode_tmp;
   4bc62:	7022      	strb	r2, [r4, #0]
	return 0;
   4bc64:	e7f8      	b.n	4bc58 <lte_lc_func_mode_get+0x34>
		return -EINVAL;
   4bc66:	f06f 0015 	mvn.w	r0, #21
   4bc6a:	e7f5      	b.n	4bc58 <lte_lc_func_mode_get+0x34>
   4bc6c:	0005f1cf 	.word	0x0005f1cf
   4bc70:	0005f1da 	.word	0x0005f1da
   4bc74:	0005f1e3 	.word	0x0005f1e3
   4bc78:	0005bf8c 	.word	0x0005bf8c

0004bc7c <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   4bc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	switch (mode) {
   4bc7e:	2804      	cmp	r0, #4
{
   4bc80:	4604      	mov	r4, r0
   4bc82:	b085      	sub	sp, #20
	switch (mode) {
   4bc84:	d820      	bhi.n	4bcc8 <lte_lc_func_mode_set+0x4c>
   4bc86:	2804      	cmp	r0, #4
   4bc88:	d823      	bhi.n	4bcd2 <lte_lc_func_mode_set+0x56>
   4bc8a:	e8df f000 	tbb	[pc, r0]
   4bc8e:	303a      	.short	0x303a
   4bc90:	223a      	.short	0x223a
   4bc92:	3a          	.byte	0x3a
   4bc93:	00          	.byte	0x00
   4bc94:	2501      	movs	r5, #1
   4bc96:	4b29      	ldr	r3, [pc, #164]	; (4bd3c <lte_lc_func_mode_set+0xc0>)
   4bc98:	40b5      	lsls	r5, r6
   4bc9a:	401d      	ands	r5, r3
   4bc9c:	d131      	bne.n	4bd02 <lte_lc_func_mode_set+0x86>
   4bc9e:	2e01      	cmp	r6, #1
   4bca0:	d117      	bne.n	4bcd2 <lte_lc_func_mode_set+0x56>
	case LTE_LC_FUNC_MODE_ACTIVATE_LTE:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_ACTIVATE_LTE);

		err = enable_notifications();
   4bca2:	f7ff fa43 	bl	4b12c <enable_notifications>
		if (err) {
   4bca6:	b360      	cbz	r0, 4bd02 <lte_lc_func_mode_set+0x86>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   4bca8:	4b25      	ldr	r3, [pc, #148]	; (4bd40 <lte_lc_func_mode_set+0xc4>)
   4bcaa:	9003      	str	r0, [sp, #12]
   4bcac:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4bcb0:	462b      	mov	r3, r5
   4bcb2:	9500      	str	r5, [sp, #0]
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
		if (err) {
			LOG_ERR("Failed to enable notifications, error: %d", err);
   4bcb4:	2201      	movs	r2, #1
   4bcb6:	4618      	mov	r0, r3
   4bcb8:	4922      	ldr	r1, [pc, #136]	; (4bd44 <lte_lc_func_mode_set+0xc8>)
   4bcba:	f00b febd 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
   4bcbe:	f06f 050d 	mvn.w	r5, #13
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   4bcc2:	4628      	mov	r0, r5
   4bcc4:	b005      	add	sp, #20
   4bcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (mode) {
   4bcc8:	f1a0 0614 	sub.w	r6, r0, #20
   4bccc:	b2f6      	uxtb	r6, r6
   4bcce:	2e18      	cmp	r6, #24
   4bcd0:	d9e0      	bls.n	4bc94 <lte_lc_func_mode_set+0x18>
		LOG_ERR("Invalid functional mode: %d", mode);
   4bcd2:	4b1d      	ldr	r3, [pc, #116]	; (4bd48 <lte_lc_func_mode_set+0xcc>)
   4bcd4:	2201      	movs	r2, #1
   4bcd6:	9302      	str	r3, [sp, #8]
   4bcd8:	2300      	movs	r3, #0
   4bcda:	491a      	ldr	r1, [pc, #104]	; (4bd44 <lte_lc_func_mode_set+0xc8>)
   4bcdc:	4618      	mov	r0, r3
   4bcde:	e9cd 3300 	strd	r3, r3, [sp]
   4bce2:	9403      	str	r4, [sp, #12]
   4bce4:	f00b fea8 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   4bce8:	f06f 0515 	mvn.w	r5, #21
   4bcec:	e7e9      	b.n	4bcc2 <lte_lc_func_mode_set+0x46>
		err = enable_notifications();
   4bcee:	f7ff fa1d 	bl	4b12c <enable_notifications>
		if (err) {
   4bcf2:	b130      	cbz	r0, 4bd02 <lte_lc_func_mode_set+0x86>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   4bcf4:	4b12      	ldr	r3, [pc, #72]	; (4bd40 <lte_lc_func_mode_set+0xc4>)
   4bcf6:	9003      	str	r0, [sp, #12]
   4bcf8:	9302      	str	r3, [sp, #8]
   4bcfa:	2300      	movs	r3, #0
   4bcfc:	e9cd 3300 	strd	r3, r3, [sp]
   4bd00:	e7d8      	b.n	4bcb4 <lte_lc_func_mode_set+0x38>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   4bd02:	4621      	mov	r1, r4
   4bd04:	4811      	ldr	r0, [pc, #68]	; (4bd4c <lte_lc_func_mode_set+0xd0>)
   4bd06:	f005 fc45 	bl	51594 <nrf_modem_at_printf>
	if (err) {
   4bd0a:	4605      	mov	r5, r0
   4bd0c:	b190      	cbz	r0, 4bd34 <lte_lc_func_mode_set+0xb8>
		LOG_ERR("Failed to set functional mode. Please check XSYSTEMMODE.");
   4bd0e:	4b10      	ldr	r3, [pc, #64]	; (4bd50 <lte_lc_func_mode_set+0xd4>)
   4bd10:	2201      	movs	r2, #1
   4bd12:	9302      	str	r3, [sp, #8]
   4bd14:	2300      	movs	r3, #0
   4bd16:	490b      	ldr	r1, [pc, #44]	; (4bd44 <lte_lc_func_mode_set+0xc8>)
   4bd18:	4618      	mov	r0, r3
   4bd1a:	e9cd 3300 	strd	r3, r3, [sp]
   4bd1e:	f00b fe8b 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4bd22:	e7cc      	b.n	4bcbe <lte_lc_func_mode_set+0x42>
		e->callback(mode, e->context);
   4bd24:	e9d6 3100 	ldrd	r3, r1, [r6]
   4bd28:	4620      	mov	r0, r4
   4bd2a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   4bd2c:	3608      	adds	r6, #8
   4bd2e:	42be      	cmp	r6, r7
   4bd30:	d3f8      	bcc.n	4bd24 <lte_lc_func_mode_set+0xa8>
   4bd32:	e7c6      	b.n	4bcc2 <lte_lc_func_mode_set+0x46>
   4bd34:	4e07      	ldr	r6, [pc, #28]	; (4bd54 <lte_lc_func_mode_set+0xd8>)
   4bd36:	4f08      	ldr	r7, [pc, #32]	; (4bd58 <lte_lc_func_mode_set+0xdc>)
   4bd38:	e7f9      	b.n	4bd2e <lte_lc_func_mode_set+0xb2>
   4bd3a:	bf00      	nop
   4bd3c:	01300c01 	.word	0x01300c01
   4bd40:	0005f21e 	.word	0x0005f21e
   4bd44:	0005bf8c 	.word	0x0005bf8c
   4bd48:	0005f248 	.word	0x0005f248
   4bd4c:	0005f264 	.word	0x0005f264
   4bd50:	0005f26f 	.word	0x0005f26f
   4bd54:	00060c14 	.word	0x00060c14
   4bd58:	00060c14 	.word	0x00060c14

0004bd5c <connect_lte>:
{
   4bd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!is_initialized) {
   4bd60:	4b49      	ldr	r3, [pc, #292]	; (4be88 <connect_lte+0x12c>)
{
   4bd62:	4605      	mov	r5, r0
	if (!is_initialized) {
   4bd64:	781b      	ldrb	r3, [r3, #0]
{
   4bd66:	b086      	sub	sp, #24
	if (!is_initialized) {
   4bd68:	b96b      	cbnz	r3, 4bd86 <connect_lte+0x2a>
		LOG_ERR("The LTE link controller is not initialized");
   4bd6a:	4a48      	ldr	r2, [pc, #288]	; (4be8c <connect_lte+0x130>)
   4bd6c:	4618      	mov	r0, r3
   4bd6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4bd72:	4947      	ldr	r1, [pc, #284]	; (4be90 <connect_lte+0x134>)
   4bd74:	2201      	movs	r2, #1
   4bd76:	9300      	str	r3, [sp, #0]
   4bd78:	f00b fe5e 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   4bd7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   4bd80:	b006      	add	sp, #24
   4bd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4bd86:	2701      	movs	r7, #1
   4bd88:	4c42      	ldr	r4, [pc, #264]	; (4be94 <connect_lte+0x138>)
   4bd8a:	e8d4 6fef 	ldaex	r6, [r4]
   4bd8e:	e8c4 7fe3 	stlex	r3, r7, [r4]
   4bd92:	2b00      	cmp	r3, #0
   4bd94:	d1f9      	bne.n	4bd8a <connect_lte+0x2e>
	if (atomic_set(&in_progress, 1)) {
   4bd96:	2e00      	cmp	r6, #0
   4bd98:	d172      	bne.n	4be80 <connect_lte+0x124>
	err = lte_lc_nw_reg_status_get(&reg_status);
   4bd9a:	f10d 0017 	add.w	r0, sp, #23
   4bd9e:	f7ff fdbf 	bl	4b920 <lte_lc_nw_reg_status_get>
	if (err) {
   4bda2:	b160      	cbz	r0, 4bdbe <connect_lte+0x62>
		LOG_ERR("Failed to get current registration status");
   4bda4:	4b3c      	ldr	r3, [pc, #240]	; (4be98 <connect_lte+0x13c>)
   4bda6:	4630      	mov	r0, r6
   4bda8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4bdac:	463a      	mov	r2, r7
   4bdae:	4633      	mov	r3, r6
   4bdb0:	4937      	ldr	r1, [pc, #220]	; (4be90 <connect_lte+0x134>)
   4bdb2:	9600      	str	r6, [sp, #0]
   4bdb4:	f00b fe40 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4bdb8:	f06f 000d 	mvn.w	r0, #13
   4bdbc:	e7e0      	b.n	4bd80 <connect_lte+0x24>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   4bdbe:	f89d 3017 	ldrb.w	r3, [sp, #23]
   4bdc2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   4bdc6:	2b01      	cmp	r3, #1
   4bdc8:	d017      	beq.n	4bdfa <connect_lte+0x9e>
	if (blocking) {
   4bdca:	b125      	cbz	r5, 4bdd6 <connect_lte+0x7a>
   4bdcc:	4601      	mov	r1, r0
   4bdce:	463a      	mov	r2, r7
   4bdd0:	4832      	ldr	r0, [pc, #200]	; (4be9c <connect_lte+0x140>)
   4bdd2:	f00e fdf1 	bl	5a9b8 <z_impl_k_sem_init>
{
   4bdd6:	f04f 0802 	mov.w	r8, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   4bdda:	4f31      	ldr	r7, [pc, #196]	; (4bea0 <connect_lte+0x144>)
   4bddc:	4e31      	ldr	r6, [pc, #196]	; (4bea4 <connect_lte+0x148>)
		err = lte_lc_func_mode_get(&current_func_mode);
   4bdde:	f10d 0016 	add.w	r0, sp, #22
   4bde2:	f7ff ff1f 	bl	4bc24 <lte_lc_func_mode_get>
		if (err) {
   4bde6:	b9b0      	cbnz	r0, 4be16 <connect_lte+0xba>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   4bde8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   4bdec:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   4bdf0:	d00b      	beq.n	4be0a <connect_lte+0xae>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   4bdf2:	2001      	movs	r0, #1
   4bdf4:	f7ff ff42 	bl	4bc7c <lte_lc_func_mode_set>
		if (err || !blocking) {
   4bdf8:	b180      	cbz	r0, 4be1c <connect_lte+0xc0>
   4bdfa:	2300      	movs	r3, #0
   4bdfc:	e8d4 2fef 	ldaex	r2, [r4]
   4be00:	e8c4 3fe1 	stlex	r1, r3, [r4]
   4be04:	2900      	cmp	r1, #0
   4be06:	d0bb      	beq.n	4bd80 <connect_lte+0x24>
   4be08:	e7f8      	b.n	4bdfc <connect_lte+0xa0>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   4be0a:	7839      	ldrb	r1, [r7, #0]
   4be0c:	7830      	ldrb	r0, [r6, #0]
   4be0e:	f7ff fdb9 	bl	4b984 <lte_lc_system_mode_set>
			if (err) {
   4be12:	2800      	cmp	r0, #0
   4be14:	d0ed      	beq.n	4bdf2 <connect_lte+0x96>
			err = -EFAULT;
   4be16:	f06f 000d 	mvn.w	r0, #13
   4be1a:	e7ee      	b.n	4bdfa <connect_lte+0x9e>
		if (err || !blocking) {
   4be1c:	2d00      	cmp	r5, #0
   4be1e:	d0ec      	beq.n	4bdfa <connect_lte+0x9e>
	return z_impl_k_sem_take(sem, timeout);
   4be20:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   4be24:	2300      	movs	r3, #0
   4be26:	481d      	ldr	r0, [pc, #116]	; (4be9c <connect_lte+0x140>)
   4be28:	f006 fc84 	bl	52734 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   4be2c:	f110 0f0b 	cmn.w	r0, #11
   4be30:	d1e3      	bne.n	4bdfa <connect_lte+0x9e>
			LOG_INF("Network connection attempt timed out");
   4be32:	4b1d      	ldr	r3, [pc, #116]	; (4bea8 <connect_lte+0x14c>)
   4be34:	2203      	movs	r2, #3
   4be36:	9302      	str	r3, [sp, #8]
   4be38:	2300      	movs	r3, #0
   4be3a:	4915      	ldr	r1, [pc, #84]	; (4be90 <connect_lte+0x134>)
   4be3c:	4618      	mov	r0, r3
   4be3e:	e9cd 3300 	strd	r3, r3, [sp]
   4be42:	f00b fdf9 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   4be46:	f1b8 0f01 	cmp.w	r8, #1
   4be4a:	d016      	beq.n	4be7a <connect_lte+0x11e>
				if (sys_mode_target == sys_mode_preferred) {
   4be4c:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   4be4e:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_fallback;
   4be50:	2b01      	cmp	r3, #1
   4be52:	bf14      	ite	ne
   4be54:	2301      	movne	r3, #1
   4be56:	2302      	moveq	r3, #2
   4be58:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   4be5a:	f7ff ff0f 	bl	4bc7c <lte_lc_func_mode_set>
   4be5e:	4603      	mov	r3, r0
				if (err) {
   4be60:	2800      	cmp	r0, #0
   4be62:	d1d8      	bne.n	4be16 <connect_lte+0xba>
				LOG_INF("Using fallback network mode");
   4be64:	4a11      	ldr	r2, [pc, #68]	; (4beac <connect_lte+0x150>)
   4be66:	490a      	ldr	r1, [pc, #40]	; (4be90 <connect_lte+0x134>)
   4be68:	e9cd 0201 	strd	r0, r2, [sp, #4]
   4be6c:	9000      	str	r0, [sp, #0]
   4be6e:	2203      	movs	r2, #3
   4be70:	f00b fde2 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
   4be74:	f04f 0801 	mov.w	r8, #1
   4be78:	e7b1      	b.n	4bdde <connect_lte+0x82>
				err = -ETIMEDOUT;
   4be7a:	f06f 0073 	mvn.w	r0, #115	; 0x73
   4be7e:	e7bc      	b.n	4bdfa <connect_lte+0x9e>
		return -EINPROGRESS;
   4be80:	f06f 0076 	mvn.w	r0, #118	; 0x76
   4be84:	e77c      	b.n	4bd80 <connect_lte+0x24>
   4be86:	bf00      	nop
   4be88:	2001f3cc 	.word	0x2001f3cc
   4be8c:	0005f2a8 	.word	0x0005f2a8
   4be90:	0005bf8c 	.word	0x0005bf8c
   4be94:	2001b848 	.word	0x2001b848
   4be98:	0005f2d3 	.word	0x0005f2d3
   4be9c:	2001b854 	.word	0x2001b854
   4bea0:	2001f3bd 	.word	0x2001f3bd
   4bea4:	2001aa24 	.word	0x2001aa24
   4bea8:	0005f2fd 	.word	0x0005f2fd
   4beac:	0005f322 	.word	0x0005f322

0004beb0 <lte_lc_connect_async>:
{
   4beb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (handler) {
   4beb2:	4604      	mov	r4, r0
   4beb4:	b138      	cbz	r0, 4bec6 <lte_lc_connect_async+0x16>
		event_handler_list_append_handler(handler);
   4beb6:	f000 f87d 	bl	4bfb4 <event_handler_list_append_handler>
	return connect_lte(false);
   4beba:	2000      	movs	r0, #0
}
   4bebc:	b004      	add	sp, #16
   4bebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return connect_lte(false);
   4bec2:	f7ff bf4b 	b.w	4bd5c <connect_lte>
	} else if (event_handler_list_is_empty()) {
   4bec6:	f000 f86d 	bl	4bfa4 <event_handler_list_is_empty>
   4beca:	2800      	cmp	r0, #0
   4becc:	d0f5      	beq.n	4beba <lte_lc_connect_async+0xa>
		LOG_ERR("No handler registered");
   4bece:	4b07      	ldr	r3, [pc, #28]	; (4beec <lte_lc_connect_async+0x3c>)
   4bed0:	4620      	mov	r0, r4
   4bed2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4bed6:	2201      	movs	r2, #1
   4bed8:	4623      	mov	r3, r4
   4beda:	4905      	ldr	r1, [pc, #20]	; (4bef0 <lte_lc_connect_async+0x40>)
   4bedc:	9400      	str	r4, [sp, #0]
   4bede:	f00b fdab 	bl	57a38 <z_log_msg_runtime_create.constprop.0>
}
   4bee2:	f06f 0015 	mvn.w	r0, #21
   4bee6:	b004      	add	sp, #16
   4bee8:	bd10      	pop	{r4, pc}
   4beea:	bf00      	nop
   4beec:	0005f33e 	.word	0x0005f33e
   4bef0:	0005bf8c 	.word	0x0005bf8c

0004bef4 <lte_lc_deinit>:
{
   4bef4:	b508      	push	{r3, lr}
	if (is_initialized) {
   4bef6:	4b06      	ldr	r3, [pc, #24]	; (4bf10 <lte_lc_deinit+0x1c>)
   4bef8:	781a      	ldrb	r2, [r3, #0]
   4befa:	b122      	cbz	r2, 4bf06 <lte_lc_deinit+0x12>
		is_initialized = false;
   4befc:	2000      	movs	r0, #0
   4befe:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   4bf00:	f7ff febc 	bl	4bc7c <lte_lc_func_mode_set>
   4bf04:	b908      	cbnz	r0, 4bf0a <lte_lc_deinit+0x16>
   4bf06:	2000      	movs	r0, #0
}
   4bf08:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   4bf0a:	f06f 000d 	mvn.w	r0, #13
   4bf0e:	e7fb      	b.n	4bf08 <lte_lc_deinit+0x14>
   4bf10:	2001f3cc 	.word	0x2001f3cc

0004bf14 <lte_lc_neighbor_cell_measurement>:

	return 0;
}

int lte_lc_neighbor_cell_measurement(struct lte_lc_ncellmeas_params *params)
{
   4bf14:	b570      	push	{r4, r5, r6, lr}
			(int)params,
			LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT,
			LTE_LC_NEIGHBOR_SEARCH_TYPE_GCI_EXTENDED_COMPLETE),
		 "Invalid argument, API does not accept enum values directly anymore");

	if (ncellmeas_ongoing) {
   4bf16:	4e18      	ldr	r6, [pc, #96]	; (4bf78 <lte_lc_neighbor_cell_measurement+0x64>)
{
   4bf18:	4604      	mov	r4, r0
	if (ncellmeas_ongoing) {
   4bf1a:	7833      	ldrb	r3, [r6, #0]
   4bf1c:	bb2b      	cbnz	r3, 4bf6a <lte_lc_neighbor_cell_measurement+0x56>
		return -EINPROGRESS;
	}

	if (params != NULL) {
   4bf1e:	b308      	cbz	r0, 4bf64 <lte_lc_neighbor_cell_measurement+0x50>
		used_params = *params;
   4bf20:	7805      	ldrb	r5, [r0, #0]
   4bf22:	7844      	ldrb	r4, [r0, #1]
	 * If the type is LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT, we therefore use the AT
	 * command without parameters to avoid error messages for older firmware version.
	 * Starting from modem firmware v1.3.4, additional CGI search types and
	 * GCI count are supported.
	 */
	if (used_params.search_type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_LIGHT) {
   4bf24:	2d02      	cmp	r5, #2
   4bf26:	d103      	bne.n	4bf30 <lte_lc_neighbor_cell_measurement+0x1c>
		err = nrf_modem_at_printf("AT%%NCELLMEAS=1");
   4bf28:	4814      	ldr	r0, [pc, #80]	; (4bf7c <lte_lc_neighbor_cell_measurement+0x68>)
		err = nrf_modem_at_printf("AT%%NCELLMEAS=4,%d", used_params.gci_count);
	} else if (used_params.search_type == LTE_LC_NEIGHBOR_SEARCH_TYPE_GCI_EXTENDED_COMPLETE) {
		err = nrf_modem_at_printf("AT%%NCELLMEAS=5,%d", used_params.gci_count);
	} else {
		/* Defaulting to use LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT */
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   4bf2a:	f005 fb33 	bl	51594 <nrf_modem_at_printf>
   4bf2e:	e00c      	b.n	4bf4a <lte_lc_neighbor_cell_measurement+0x36>
	} else if (used_params.search_type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   4bf30:	1eeb      	subs	r3, r5, #3
   4bf32:	2b03      	cmp	r3, #3
   4bf34:	d817      	bhi.n	4bf66 <lte_lc_neighbor_cell_measurement+0x52>
   4bf36:	e8df f003 	tbb	[pc, r3]
   4bf3a:	0402      	.short	0x0402
   4bf3c:	120f      	.short	0x120f
		err = nrf_modem_at_printf("AT%%NCELLMEAS=2");
   4bf3e:	4810      	ldr	r0, [pc, #64]	; (4bf80 <lte_lc_neighbor_cell_measurement+0x6c>)
   4bf40:	e7f3      	b.n	4bf2a <lte_lc_neighbor_cell_measurement+0x16>
		err = nrf_modem_at_printf("AT%%NCELLMEAS=3,%d", used_params.gci_count);
   4bf42:	4621      	mov	r1, r4
   4bf44:	480f      	ldr	r0, [pc, #60]	; (4bf84 <lte_lc_neighbor_cell_measurement+0x70>)
		err = nrf_modem_at_printf("AT%%NCELLMEAS=5,%d", used_params.gci_count);
   4bf46:	f005 fb25 	bl	51594 <nrf_modem_at_printf>
	}

	if (err) {
   4bf4a:	b988      	cbnz	r0, 4bf70 <lte_lc_neighbor_cell_measurement+0x5c>
		err = -EFAULT;
	} else {
		ncellmeas_params = used_params;
   4bf4c:	4b0e      	ldr	r3, [pc, #56]	; (4bf88 <lte_lc_neighbor_cell_measurement+0x74>)
   4bf4e:	701d      	strb	r5, [r3, #0]
   4bf50:	705c      	strb	r4, [r3, #1]
		ncellmeas_ongoing = true;
   4bf52:	2301      	movs	r3, #1
   4bf54:	7033      	strb	r3, [r6, #0]
	}

	return err;
}
   4bf56:	bd70      	pop	{r4, r5, r6, pc}
		err = nrf_modem_at_printf("AT%%NCELLMEAS=4,%d", used_params.gci_count);
   4bf58:	4621      	mov	r1, r4
   4bf5a:	480c      	ldr	r0, [pc, #48]	; (4bf8c <lte_lc_neighbor_cell_measurement+0x78>)
   4bf5c:	e7f3      	b.n	4bf46 <lte_lc_neighbor_cell_measurement+0x32>
		err = nrf_modem_at_printf("AT%%NCELLMEAS=5,%d", used_params.gci_count);
   4bf5e:	4621      	mov	r1, r4
   4bf60:	480b      	ldr	r0, [pc, #44]	; (4bf90 <lte_lc_neighbor_cell_measurement+0x7c>)
   4bf62:	e7f0      	b.n	4bf46 <lte_lc_neighbor_cell_measurement+0x32>
	struct lte_lc_ncellmeas_params used_params = {
   4bf64:	2501      	movs	r5, #1
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   4bf66:	480b      	ldr	r0, [pc, #44]	; (4bf94 <lte_lc_neighbor_cell_measurement+0x80>)
   4bf68:	e7df      	b.n	4bf2a <lte_lc_neighbor_cell_measurement+0x16>
		return -EINPROGRESS;
   4bf6a:	f06f 0076 	mvn.w	r0, #118	; 0x76
   4bf6e:	e7f2      	b.n	4bf56 <lte_lc_neighbor_cell_measurement+0x42>
		err = -EFAULT;
   4bf70:	f06f 000d 	mvn.w	r0, #13
   4bf74:	e7ef      	b.n	4bf56 <lte_lc_neighbor_cell_measurement+0x42>
   4bf76:	bf00      	nop
   4bf78:	2001f3bf 	.word	0x2001f3bf
   4bf7c:	0005f354 	.word	0x0005f354
   4bf80:	0005f364 	.word	0x0005f364
   4bf84:	0005f374 	.word	0x0005f374
   4bf88:	2001f3c0 	.word	0x2001f3c0
   4bf8c:	0005f387 	.word	0x0005f387
   4bf90:	0005f39a 	.word	0x0005f39a
   4bf94:	0005f3ad 	.word	0x0005f3ad

0004bf98 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   4bf98:	4801      	ldr	r0, [pc, #4]	; (4bfa0 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   4bf9a:	f006 bb35 	b.w	52608 <z_impl_k_mutex_unlock>
   4bf9e:	bf00      	nop
   4bfa0:	2001ab98 	.word	0x2001ab98

0004bfa4 <event_handler_list_is_empty>:
	return list->head;
   4bfa4:	4b02      	ldr	r3, [pc, #8]	; (4bfb0 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   4bfa6:	6818      	ldr	r0, [r3, #0]
}
   4bfa8:	fab0 f080 	clz	r0, r0
   4bfac:	0940      	lsrs	r0, r0, #5
   4bfae:	4770      	bx	lr
   4bfb0:	2001b86c 	.word	0x2001b86c

0004bfb4 <event_handler_list_append_handler>:
{
   4bfb4:	b570      	push	{r4, r5, r6, lr}
   4bfb6:	4606      	mov	r6, r0
	return list->head;
   4bfb8:	4d12      	ldr	r5, [pc, #72]	; (4c004 <event_handler_list_append_handler+0x50>)
	return z_impl_k_mutex_lock(mutex, timeout);
   4bfba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4bfbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4bfc2:	4811      	ldr	r0, [pc, #68]	; (4c008 <event_handler_list_append_handler+0x54>)
   4bfc4:	f006 faa6 	bl	52514 <z_impl_k_mutex_lock>
   4bfc8:	682c      	ldr	r4, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   4bfca:	b944      	cbnz	r4, 4bfde <event_handler_list_append_handler+0x2a>
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   4bfcc:	2008      	movs	r0, #8
   4bfce:	f00e ff51 	bl	5ae74 <k_malloc>
	if (to_ins == NULL) {
   4bfd2:	b948      	cbnz	r0, 4bfe8 <event_handler_list_append_handler+0x34>
		k_mutex_unlock(&list_mtx);
   4bfd4:	f7ff ffe0 	bl	4bf98 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   4bfd8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4bfdc:	e00d      	b.n	4bffa <event_handler_list_append_handler+0x46>
		if (curr->handler == handler) {
   4bfde:	6863      	ldr	r3, [r4, #4]
   4bfe0:	429e      	cmp	r6, r3
   4bfe2:	d007      	beq.n	4bff4 <event_handler_list_append_handler+0x40>
	return node->next;
   4bfe4:	6824      	ldr	r4, [r4, #0]
   4bfe6:	e7f0      	b.n	4bfca <event_handler_list_append_handler+0x16>
__ssp_bos_icheck3(memset, void *, int)
   4bfe8:	6004      	str	r4, [r0, #0]
	to_ins->handler = handler;
   4bfea:	6046      	str	r6, [r0, #4]
	return list->tail;
   4bfec:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   4bfee:	b92b      	cbnz	r3, 4bffc <event_handler_list_append_handler+0x48>
	list->head = node;
   4bff0:	e9c5 0000 	strd	r0, r0, [r5]
		k_mutex_unlock(&list_mtx);
   4bff4:	f7ff ffd0 	bl	4bf98 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   4bff8:	2000      	movs	r0, #0
}
   4bffa:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   4bffc:	6018      	str	r0, [r3, #0]
	list->tail = node;
   4bffe:	6068      	str	r0, [r5, #4]
}
   4c000:	e7f8      	b.n	4bff4 <event_handler_list_append_handler+0x40>
   4c002:	bf00      	nop
   4c004:	2001b86c 	.word	0x2001b86c
   4c008:	2001ab98 	.word	0x2001ab98

0004c00c <event_handler_list_dispatch>:
{
   4c00c:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   4c00e:	4c0f      	ldr	r4, [pc, #60]	; (4c04c <event_handler_list_dispatch+0x40>)
   4c010:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   4c012:	6823      	ldr	r3, [r4, #0]
   4c014:	b1c3      	cbz	r3, 4c048 <event_handler_list_dispatch+0x3c>
   4c016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4c01a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4c01e:	480c      	ldr	r0, [pc, #48]	; (4c050 <event_handler_list_dispatch+0x44>)
   4c020:	f006 fa78 	bl	52514 <z_impl_k_mutex_lock>
   4c024:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   4c026:	b10b      	cbz	r3, 4c02c <event_handler_list_dispatch+0x20>
	return node->next;
   4c028:	681c      	ldr	r4, [r3, #0]
   4c02a:	b91b      	cbnz	r3, 4c034 <event_handler_list_dispatch+0x28>
}
   4c02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   4c030:	f7ff bfb2 	b.w	4bf98 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(evt);
   4c034:	4628      	mov	r0, r5
   4c036:	685b      	ldr	r3, [r3, #4]
   4c038:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   4c03a:	b11c      	cbz	r4, 4c044 <event_handler_list_dispatch+0x38>
   4c03c:	6822      	ldr	r2, [r4, #0]
   4c03e:	4623      	mov	r3, r4
   4c040:	4614      	mov	r4, r2
   4c042:	e7f2      	b.n	4c02a <event_handler_list_dispatch+0x1e>
   4c044:	4622      	mov	r2, r4
   4c046:	e7fa      	b.n	4c03e <event_handler_list_dispatch+0x32>
}
   4c048:	bd38      	pop	{r3, r4, r5, pc}
   4c04a:	bf00      	nop
   4c04c:	2001b86c 	.word	0x2001b86c
   4c050:	2001ab98 	.word	0x2001ab98

0004c054 <response_is_valid>:
{
   4c054:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   4c056:	460e      	mov	r6, r1
   4c058:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   4c05a:	4605      	mov	r5, r0
   4c05c:	b100      	cbz	r0, 4c060 <response_is_valid+0xc>
   4c05e:	b962      	cbnz	r2, 4c07a <response_is_valid+0x26>
		LOG_ERR("Invalid pointer provided");
   4c060:	4b0d      	ldr	r3, [pc, #52]	; (4c098 <response_is_valid+0x44>)
   4c062:	2201      	movs	r2, #1
   4c064:	9302      	str	r3, [sp, #8]
   4c066:	2300      	movs	r3, #0
   4c068:	490c      	ldr	r1, [pc, #48]	; (4c09c <response_is_valid+0x48>)
   4c06a:	4618      	mov	r0, r3
   4c06c:	e9cd 3300 	strd	r3, r3, [sp]
   4c070:	f00b fcfe 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
		return false;
   4c074:	2000      	movs	r0, #0
}
   4c076:	b004      	add	sp, #16
   4c078:	bd70      	pop	{r4, r5, r6, pc}
	if ((response_len < strlen(check)) ||
   4c07a:	4610      	mov	r0, r2
   4c07c:	f7f4 feba 	bl	40df4 <strlen>
   4c080:	42b0      	cmp	r0, r6
   4c082:	d8f7      	bhi.n	4c074 <response_is_valid+0x20>
	    (memcmp(response, check, response_len) != 0)) {
   4c084:	4632      	mov	r2, r6
   4c086:	4621      	mov	r1, r4
   4c088:	4628      	mov	r0, r5
   4c08a:	f00e ff1b 	bl	5aec4 <memcmp>
	if ((response_len < strlen(check)) ||
   4c08e:	fab0 f080 	clz	r0, r0
   4c092:	0940      	lsrs	r0, r0, #5
   4c094:	e7ef      	b.n	4c076 <response_is_valid+0x22>
   4c096:	bf00      	nop
   4c098:	0005f44a 	.word	0x0005f44a
   4c09c:	0005bf94 	.word	0x0005bf94

0004c0a0 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   4c0a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   4c0a4:	2700      	movs	r7, #0
{
   4c0a6:	b087      	sub	sp, #28
   4c0a8:	4680      	mov	r8, r0
   4c0aa:	460e      	mov	r6, r1
   4c0ac:	4614      	mov	r4, r2
   4c0ae:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   4c0b0:	9705      	str	r7, [sp, #20]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   4c0b2:	f7f4 fe9f 	bl	40df4 <strlen>
   4c0b6:	2808      	cmp	r0, #8
   4c0b8:	d11b      	bne.n	4c0f2 <parse_psm+0x52>
   4c0ba:	4630      	mov	r0, r6
   4c0bc:	f7f4 fe9a 	bl	40df4 <strlen>
   4c0c0:	2808      	cmp	r0, #8
   4c0c2:	d116      	bne.n	4c0f2 <parse_psm+0x52>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   4c0c4:	8832      	ldrh	r2, [r6, #0]
   4c0c6:	78b3      	ldrb	r3, [r6, #2]
   4c0c8:	f8ad 2014 	strh.w	r2, [sp, #20]

	lut_idx = strtoul(unit_str, NULL, 2);
   4c0cc:	4639      	mov	r1, r7
   4c0ce:	2202      	movs	r2, #2
   4c0d0:	a805      	add	r0, sp, #20
	memcpy(unit_str, tau_ext_str, unit_str_len);
   4c0d2:	f88d 3016 	strb.w	r3, [sp, #22]
	lut_idx = strtoul(unit_str, NULL, 2);
   4c0d6:	f007 ff4f 	bl	53f78 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   4c0da:	2807      	cmp	r0, #7
   4c0dc:	d90e      	bls.n	4c0fc <parse_psm+0x5c>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   4c0de:	4b36      	ldr	r3, [pc, #216]	; (4c1b8 <parse_psm+0x118>)
   4c0e0:	9700      	str	r7, [sp, #0]
   4c0e2:	e9cd 7301 	strd	r7, r3, [sp, #4]
   4c0e6:	463b      	mov	r3, r7
   4c0e8:	2201      	movs	r2, #1
   4c0ea:	4618      	mov	r0, r3
   4c0ec:	4933      	ldr	r1, [pc, #204]	; (4c1bc <parse_psm+0x11c>)
   4c0ee:	f00b fcbf 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   4c0f2:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   4c0f6:	b007      	add	sp, #28
   4c0f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	timer_unit = t3412_ext_lookup[lut_idx];
   4c0fc:	4b30      	ldr	r3, [pc, #192]	; (4c1c0 <parse_psm+0x120>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   4c0fe:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   4c100:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   4c104:	4639      	mov	r1, r7
   4c106:	1cf0      	adds	r0, r6, #3
   4c108:	f007 ff36 	bl	53f78 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   4c10c:	f1b9 0f00 	cmp.w	r9, #0
   4c110:	d11b      	bne.n	4c14a <parse_psm+0xaa>
   4c112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4c116:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   4c118:	b1e4      	cbz	r4, 4c154 <parse_psm+0xb4>
   4c11a:	4620      	mov	r0, r4
   4c11c:	f7f4 fe6a 	bl	40df4 <strlen>
   4c120:	2808      	cmp	r0, #8
   4c122:	d117      	bne.n	4c154 <parse_psm+0xb4>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   4c124:	8822      	ldrh	r2, [r4, #0]
   4c126:	78a3      	ldrb	r3, [r4, #2]
   4c128:	f8ad 2014 	strh.w	r2, [sp, #20]
		lut_idx = strtoul(unit_str, NULL, 2);
   4c12c:	2100      	movs	r1, #0
   4c12e:	2202      	movs	r2, #2
   4c130:	a805      	add	r0, sp, #20
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   4c132:	f88d 3016 	strb.w	r3, [sp, #22]
		lut_idx = strtoul(unit_str, NULL, 2);
   4c136:	f007 ff1f 	bl	53f78 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   4c13a:	2807      	cmp	r0, #7
   4c13c:	d91b      	bls.n	4c176 <parse_psm+0xd6>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   4c13e:	4b21      	ldr	r3, [pc, #132]	; (4c1c4 <parse_psm+0x124>)
		LOG_ERR("Unable to parse active time string");
   4c140:	9302      	str	r3, [sp, #8]
   4c142:	2300      	movs	r3, #0
   4c144:	e9cd 3300 	strd	r3, r3, [sp]
   4c148:	e7ce      	b.n	4c0e8 <parse_psm+0x48>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   4c14a:	fb09 f000 	mul.w	r0, r9, r0
   4c14e:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   4c150:	3001      	adds	r0, #1
   4c152:	d0e1      	beq.n	4c118 <parse_psm+0x78>
	memcpy(unit_str, active_time_str, unit_str_len);
   4c154:	f8b8 2000 	ldrh.w	r2, [r8]
   4c158:	f898 3002 	ldrb.w	r3, [r8, #2]
   4c15c:	f8ad 2014 	strh.w	r2, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   4c160:	2100      	movs	r1, #0
   4c162:	2202      	movs	r2, #2
   4c164:	a805      	add	r0, sp, #20
	memcpy(unit_str, active_time_str, unit_str_len);
   4c166:	f88d 3016 	strb.w	r3, [sp, #22]
	lut_idx = strtoul(unit_str, NULL, 2);
   4c16a:	f007 ff05 	bl	53f78 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   4c16e:	2807      	cmp	r0, #7
   4c170:	d910      	bls.n	4c194 <parse_psm+0xf4>
		LOG_ERR("Unable to parse active time string");
   4c172:	4b15      	ldr	r3, [pc, #84]	; (4c1c8 <parse_psm+0x128>)
   4c174:	e7e4      	b.n	4c140 <parse_psm+0xa0>
		timer_unit = t3412_lookup[lut_idx];
   4c176:	4b15      	ldr	r3, [pc, #84]	; (4c1cc <parse_psm+0x12c>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   4c178:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   4c17a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   4c17e:	2100      	movs	r1, #0
   4c180:	1ce0      	adds	r0, r4, #3
   4c182:	f007 fef9 	bl	53f78 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   4c186:	b116      	cbz	r6, 4c18e <parse_psm+0xee>
   4c188:	4346      	muls	r6, r0
   4c18a:	602e      	str	r6, [r5, #0]
   4c18c:	e7e2      	b.n	4c154 <parse_psm+0xb4>
   4c18e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4c192:	e7fa      	b.n	4c18a <parse_psm+0xea>
	timer_unit = t3324_lookup[lut_idx];
   4c194:	4b0e      	ldr	r3, [pc, #56]	; (4c1d0 <parse_psm+0x130>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   4c196:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   4c198:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   4c19c:	2100      	movs	r1, #0
   4c19e:	f108 0003 	add.w	r0, r8, #3
   4c1a2:	f007 fee9 	bl	53f78 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   4c1a6:	b11c      	cbz	r4, 4c1b0 <parse_psm+0x110>
   4c1a8:	4344      	muls	r4, r0
	return 0;
   4c1aa:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   4c1ac:	606c      	str	r4, [r5, #4]
	return 0;
   4c1ae:	e7a2      	b.n	4c0f6 <parse_psm+0x56>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   4c1b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   4c1b4:	e7f9      	b.n	4c1aa <parse_psm+0x10a>
   4c1b6:	bf00      	nop
   4c1b8:	0005f59a 	.word	0x0005f59a
   4c1bc:	0005bf94 	.word	0x0005bf94
   4c1c0:	0005c554 	.word	0x0005c554
   4c1c4:	0005f5cf 	.word	0x0005f5cf
   4c1c8:	0005f5fb 	.word	0x0005f5fb
   4c1cc:	0005c534 	.word	0x0005c534
   4c1d0:	0005c534 	.word	0x0005c534

0004c1d4 <parse_rrc_mode>:
 * @return Zero on success or (negative) error code otherwise.
 */
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
   4c1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   4c1d8:	2500      	movs	r5, #0
{
   4c1da:	b088      	sub	sp, #32
   4c1dc:	4680      	mov	r8, r0
   4c1de:	460e      	mov	r6, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   4c1e0:	a806      	add	r0, sp, #24
   4c1e2:	2104      	movs	r1, #4
{
   4c1e4:	4617      	mov	r7, r2
	struct at_param_list resp_list = {0};
   4c1e6:	e9cd 5506 	strd	r5, r5, [sp, #24]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   4c1ea:	f00b fae8 	bl	577be <at_params_list_init>
	if (err) {
   4c1ee:	4604      	mov	r4, r0
   4c1f0:	b170      	cbz	r0, 4c210 <parse_rrc_mode+0x3c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   4c1f2:	4b22      	ldr	r3, [pc, #136]	; (4c27c <parse_rrc_mode+0xa8>)
   4c1f4:	9003      	str	r0, [sp, #12]
   4c1f6:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4c1fa:	2201      	movs	r2, #1
   4c1fc:	462b      	mov	r3, r5
   4c1fe:	4628      	mov	r0, r5
   4c200:	491f      	ldr	r1, [pc, #124]	; (4c280 <parse_rrc_mode+0xac>)
   4c202:	9500      	str	r5, [sp, #0]
   4c204:	f00b fc34 	bl	57a70 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   4c208:	4620      	mov	r0, r4
   4c20a:	b008      	add	sp, #32
   4c20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   4c210:	4601      	mov	r1, r0
   4c212:	aa06      	add	r2, sp, #24
   4c214:	4640      	mov	r0, r8
   4c216:	f00b fab9 	bl	5778c <at_parser_params_from_str>
	if (err) {
   4c21a:	4604      	mov	r4, r0
   4c21c:	b170      	cbz	r0, 4c23c <parse_rrc_mode+0x68>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   4c21e:	4b19      	ldr	r3, [pc, #100]	; (4c284 <parse_rrc_mode+0xb0>)
   4c220:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get signalling mode, error: %d", err);
   4c222:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4c226:	2201      	movs	r2, #1
   4c228:	462b      	mov	r3, r5
   4c22a:	4628      	mov	r0, r5
   4c22c:	4914      	ldr	r1, [pc, #80]	; (4c280 <parse_rrc_mode+0xac>)
   4c22e:	9500      	str	r5, [sp, #0]
   4c230:	f00b fc1e 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   4c234:	a806      	add	r0, sp, #24
   4c236:	f00b faec 	bl	57812 <at_params_list_free>
	return err;
   4c23a:	e7e5      	b.n	4c208 <parse_rrc_mode+0x34>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   4c23c:	4639      	mov	r1, r7
   4c23e:	aa05      	add	r2, sp, #20
   4c240:	a806      	add	r0, sp, #24
   4c242:	f00b fb98 	bl	57976 <at_params_int_get>
	if (err) {
   4c246:	4604      	mov	r4, r0
   4c248:	b110      	cbz	r0, 4c250 <parse_rrc_mode+0x7c>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   4c24a:	4b0f      	ldr	r3, [pc, #60]	; (4c288 <parse_rrc_mode+0xb4>)
   4c24c:	9003      	str	r0, [sp, #12]
   4c24e:	e7e8      	b.n	4c222 <parse_rrc_mode+0x4e>
	if (temp_mode == 0) {
   4c250:	9b05      	ldr	r3, [sp, #20]
   4c252:	b11b      	cbz	r3, 4c25c <parse_rrc_mode+0x88>
	} else if (temp_mode == 1) {
   4c254:	2b01      	cmp	r3, #1
   4c256:	d103      	bne.n	4c260 <parse_rrc_mode+0x8c>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   4c258:	7033      	strb	r3, [r6, #0]
   4c25a:	e7eb      	b.n	4c234 <parse_rrc_mode+0x60>
   4c25c:	4603      	mov	r3, r0
   4c25e:	e7fb      	b.n	4c258 <parse_rrc_mode+0x84>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   4c260:	9303      	str	r3, [sp, #12]
   4c262:	4b0a      	ldr	r3, [pc, #40]	; (4c28c <parse_rrc_mode+0xb8>)
   4c264:	2201      	movs	r2, #1
   4c266:	e9cd 0301 	strd	r0, r3, [sp, #4]
   4c26a:	4905      	ldr	r1, [pc, #20]	; (4c280 <parse_rrc_mode+0xac>)
   4c26c:	4603      	mov	r3, r0
   4c26e:	9000      	str	r0, [sp, #0]
   4c270:	f00b fbfe 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
		err = -EINVAL;
   4c274:	f06f 0415 	mvn.w	r4, #21
   4c278:	e7dc      	b.n	4c234 <parse_rrc_mode+0x60>
   4c27a:	bf00      	nop
   4c27c:	0005f463 	.word	0x0005f463
   4c280:	0005bf94 	.word	0x0005bf94
   4c284:	0005f61e 	.word	0x0005f61e
   4c288:	0005f649 	.word	0x0005f649
   4c28c:	0005f672 	.word	0x0005f672

0004c290 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   4c290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   4c294:	2600      	movs	r6, #0
{
   4c296:	4617      	mov	r7, r2
   4c298:	461d      	mov	r5, r3
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   4c29a:	2207      	movs	r2, #7
   4c29c:	2309      	movs	r3, #9
{
   4c29e:	b08e      	sub	sp, #56	; 0x38
   4c2a0:	4682      	mov	sl, r0
   4c2a2:	4688      	mov	r8, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   4c2a4:	a809      	add	r0, sp, #36	; 0x24
   4c2a6:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   4c2a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   4c2ac:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   4c2b0:	9607      	str	r6, [sp, #28]
   4c2b2:	f8ad 6020 	strh.w	r6, [sp, #32]
   4c2b6:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   4c2ba:	f00b fa80 	bl	577be <at_params_list_init>
	if (err) {
   4c2be:	4604      	mov	r4, r0
   4c2c0:	b170      	cbz	r0, 4c2e0 <parse_cereg+0x50>
		LOG_ERR("Could not init AT params list, error: %d", err);
   4c2c2:	4b63      	ldr	r3, [pc, #396]	; (4c450 <parse_cereg+0x1c0>)
   4c2c4:	9003      	str	r0, [sp, #12]
   4c2c6:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4c2ca:	2201      	movs	r2, #1
   4c2cc:	4633      	mov	r3, r6
   4c2ce:	4630      	mov	r0, r6
   4c2d0:	4960      	ldr	r1, [pc, #384]	; (4c454 <parse_cereg+0x1c4>)
   4c2d2:	9600      	str	r6, [sp, #0]
   4c2d4:	f00b fbcc 	bl	57a70 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   4c2d8:	4620      	mov	r0, r4
   4c2da:	b00e      	add	sp, #56	; 0x38
   4c2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   4c2e0:	4601      	mov	r1, r0
   4c2e2:	aa09      	add	r2, sp, #36	; 0x24
   4c2e4:	4650      	mov	r0, sl
   4c2e6:	f00b fa51 	bl	5778c <at_parser_params_from_str>
	if (err) {
   4c2ea:	4604      	mov	r4, r0
   4c2ec:	b170      	cbz	r0, 4c30c <parse_cereg+0x7c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   4c2ee:	4b5a      	ldr	r3, [pc, #360]	; (4c458 <parse_cereg+0x1c8>)
   4c2f0:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get response prefix, error: %d", err);
   4c2f2:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4c2f6:	2201      	movs	r2, #1
   4c2f8:	4633      	mov	r3, r6
   4c2fa:	4630      	mov	r0, r6
   4c2fc:	4955      	ldr	r1, [pc, #340]	; (4c454 <parse_cereg+0x1c4>)
   4c2fe:	9600      	str	r6, [sp, #0]
   4c300:	f00b fbb6 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   4c304:	a809      	add	r0, sp, #36	; 0x24
   4c306:	f00b fa84 	bl	57812 <at_params_list_free>
	return err;
   4c30a:	e7e5      	b.n	4c2d8 <parse_cereg+0x48>
	err = at_params_string_get(&resp_list,
   4c30c:	4601      	mov	r1, r0
   4c30e:	ab04      	add	r3, sp, #16
   4c310:	aa07      	add	r2, sp, #28
   4c312:	a809      	add	r0, sp, #36	; 0x24
   4c314:	f00b fb5b 	bl	579ce <at_params_string_get>
	if (err) {
   4c318:	4604      	mov	r4, r0
   4c31a:	b110      	cbz	r0, 4c322 <parse_cereg+0x92>
		LOG_ERR("Could not get response prefix, error: %d", err);
   4c31c:	4b4f      	ldr	r3, [pc, #316]	; (4c45c <parse_cereg+0x1cc>)
   4c31e:	9003      	str	r0, [sp, #12]
   4c320:	e7e7      	b.n	4c2f2 <parse_cereg+0x62>
	if (!response_is_valid(response_prefix, response_prefix_len,
   4c322:	4a4f      	ldr	r2, [pc, #316]	; (4c460 <parse_cereg+0x1d0>)
   4c324:	9904      	ldr	r1, [sp, #16]
   4c326:	a807      	add	r0, sp, #28
   4c328:	f7ff fe94 	bl	4c054 <response_is_valid>
   4c32c:	2800      	cmp	r0, #0
   4c32e:	d0e9      	beq.n	4c304 <parse_cereg+0x74>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   4c330:	aa0b      	add	r2, sp, #44	; 0x2c
   4c332:	f1c8 0102 	rsb	r1, r8, #2
   4c336:	a809      	add	r0, sp, #36	; 0x24
   4c338:	f00b fb1d 	bl	57976 <at_params_int_get>
	if (err) {
   4c33c:	1e06      	subs	r6, r0, #0
   4c33e:	d14a      	bne.n	4c3d6 <parse_cereg+0x146>
	switch (reg_status) {
   4c340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   4c342:	2b08      	cmp	r3, #8
   4c344:	d031      	beq.n	4c3aa <parse_cereg+0x11a>
   4c346:	dc1b      	bgt.n	4c380 <parse_cereg+0xf0>
   4c348:	2b05      	cmp	r3, #5
   4c34a:	d92e      	bls.n	4c3aa <parse_cereg+0x11a>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   4c34c:	9303      	str	r3, [sp, #12]
   4c34e:	4b45      	ldr	r3, [pc, #276]	; (4c464 <parse_cereg+0x1d4>)
   4c350:	2201      	movs	r2, #1
   4c352:	9302      	str	r3, [sp, #8]
   4c354:	2300      	movs	r3, #0
   4c356:	493f      	ldr	r1, [pc, #252]	; (4c454 <parse_cereg+0x1c4>)
   4c358:	4618      	mov	r0, r3
   4c35a:	e9cd 3300 	strd	r3, r3, [sp]
   4c35e:	f00b fb87 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   4c362:	f06f 0615 	mvn.w	r6, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   4c366:	4b40      	ldr	r3, [pc, #256]	; (4c468 <parse_cereg+0x1d8>)
   4c368:	9603      	str	r6, [sp, #12]
			LOG_ERR("Could not get tracking area code, error: %d", err);
   4c36a:	9302      	str	r3, [sp, #8]
   4c36c:	2300      	movs	r3, #0
   4c36e:	2201      	movs	r2, #1
   4c370:	4618      	mov	r0, r3
   4c372:	e9cd 3300 	strd	r3, r3, [sp]
   4c376:	4937      	ldr	r1, [pc, #220]	; (4c454 <parse_cereg+0x1c4>)
   4c378:	f00b fb7a 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   4c37c:	4634      	mov	r4, r6
   4c37e:	e7c1      	b.n	4c304 <parse_cereg+0x74>
	switch (reg_status) {
   4c380:	2b5a      	cmp	r3, #90	; 0x5a
   4c382:	d1e3      	bne.n	4c34c <parse_cereg+0xbc>
	if (reg_status) {
   4c384:	b107      	cbz	r7, 4c388 <parse_cereg+0xf8>
		*reg_status = status;
   4c386:	703b      	strb	r3, [r7, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   4c388:	bb65      	cbnz	r5, 4c3e4 <parse_cereg+0x154>
	if (lte_mode) {
   4c38a:	f1b9 0f00 	cmp.w	r9, #0
   4c38e:	d0b9      	beq.n	4c304 <parse_cereg+0x74>
		err = at_params_int_get(&resp_list,
   4c390:	aa06      	add	r2, sp, #24
   4c392:	f1c8 0105 	rsb	r1, r8, #5
   4c396:	a809      	add	r0, sp, #36	; 0x24
   4c398:	f00b faed 	bl	57976 <at_params_int_get>
		if (err) {
   4c39c:	2800      	cmp	r0, #0
   4c39e:	d155      	bne.n	4c44c <parse_cereg+0x1bc>
			*lte_mode = mode;
   4c3a0:	f89d 3018 	ldrb.w	r3, [sp, #24]
			LOG_DBG("LTE mode: %d", *lte_mode);
   4c3a4:	f889 3000 	strb.w	r3, [r9]
   4c3a8:	e7ac      	b.n	4c304 <parse_cereg+0x74>
	if (reg_status) {
   4c3aa:	b997      	cbnz	r7, 4c3d2 <parse_cereg+0x142>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   4c3ac:	2d00      	cmp	r5, #0
   4c3ae:	d0ec      	beq.n	4c38a <parse_cereg+0xfa>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   4c3b0:	a809      	add	r0, sp, #36	; 0x24
   4c3b2:	f00b fb2c 	bl	57a0e <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   4c3b6:	2803      	cmp	r0, #3
   4c3b8:	d914      	bls.n	4c3e4 <parse_cereg+0x154>
		err = at_params_string_get(
   4c3ba:	ab05      	add	r3, sp, #20
   4c3bc:	aa0b      	add	r2, sp, #44	; 0x2c
   4c3be:	f1c8 0103 	rsb	r1, r8, #3
   4c3c2:	a809      	add	r0, sp, #36	; 0x24
   4c3c4:	f00b fb03 	bl	579ce <at_params_string_get>
		if (err) {
   4c3c8:	4606      	mov	r6, r0
   4c3ca:	b180      	cbz	r0, 4c3ee <parse_cereg+0x15e>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   4c3cc:	4b27      	ldr	r3, [pc, #156]	; (4c46c <parse_cereg+0x1dc>)
   4c3ce:	9003      	str	r0, [sp, #12]
   4c3d0:	e7cb      	b.n	4c36a <parse_cereg+0xda>
		*reg_status = status;
   4c3d2:	703b      	strb	r3, [r7, #0]
   4c3d4:	e7ea      	b.n	4c3ac <parse_cereg+0x11c>
	if (status < 0) {
   4c3d6:	dbc6      	blt.n	4c366 <parse_cereg+0xd6>
	if (reg_status) {
   4c3d8:	b107      	cbz	r7, 4c3dc <parse_cereg+0x14c>
		*reg_status = status;
   4c3da:	703e      	strb	r6, [r7, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   4c3dc:	2d00      	cmp	r5, #0
   4c3de:	d0d4      	beq.n	4c38a <parse_cereg+0xfa>
   4c3e0:	2e5a      	cmp	r6, #90	; 0x5a
   4c3e2:	d1e5      	bne.n	4c3b0 <parse_cereg+0x120>
		cell->tac = UINT32_MAX;
   4c3e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c3e8:	e9c5 3302 	strd	r3, r3, [r5, #8]
   4c3ec:	e7cd      	b.n	4c38a <parse_cereg+0xfa>
		str_buf[len] = '\0';
   4c3ee:	9b05      	ldr	r3, [sp, #20]
		cell->tac = strtoul(str_buf, NULL, 16);
   4c3f0:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   4c3f2:	3338      	adds	r3, #56	; 0x38
   4c3f4:	446b      	add	r3, sp
   4c3f6:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   4c3fa:	2210      	movs	r2, #16
   4c3fc:	a80b      	add	r0, sp, #44	; 0x2c
   4c3fe:	f007 fdbb 	bl	53f78 <strtoul>
		len = sizeof(str_buf) - 1;
   4c402:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   4c404:	60e8      	str	r0, [r5, #12]
		len = sizeof(str_buf) - 1;
   4c406:	9305      	str	r3, [sp, #20]
		err = at_params_string_get(&resp_list,
   4c408:	aa0b      	add	r2, sp, #44	; 0x2c
   4c40a:	ab05      	add	r3, sp, #20
   4c40c:	f1c8 0104 	rsb	r1, r8, #4
   4c410:	a809      	add	r0, sp, #36	; 0x24
   4c412:	f00b fadc 	bl	579ce <at_params_string_get>
		if (err) {
   4c416:	4607      	mov	r7, r0
   4c418:	b160      	cbz	r0, 4c434 <parse_cereg+0x1a4>
			LOG_ERR("Could not get cell ID, error: %d", err);
   4c41a:	4b15      	ldr	r3, [pc, #84]	; (4c470 <parse_cereg+0x1e0>)
   4c41c:	9003      	str	r0, [sp, #12]
   4c41e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4c422:	2201      	movs	r2, #1
   4c424:	4633      	mov	r3, r6
   4c426:	4630      	mov	r0, r6
   4c428:	490a      	ldr	r1, [pc, #40]	; (4c454 <parse_cereg+0x1c4>)
   4c42a:	9600      	str	r6, [sp, #0]
   4c42c:	f00b fb20 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   4c430:	463c      	mov	r4, r7
   4c432:	e767      	b.n	4c304 <parse_cereg+0x74>
		str_buf[len] = '\0';
   4c434:	9b05      	ldr	r3, [sp, #20]
		cell->id = strtoul(str_buf, NULL, 16);
   4c436:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   4c438:	3338      	adds	r3, #56	; 0x38
   4c43a:	446b      	add	r3, sp
   4c43c:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   4c440:	2210      	movs	r2, #16
   4c442:	a80b      	add	r0, sp, #44	; 0x2c
   4c444:	f007 fd98 	bl	53f78 <strtoul>
   4c448:	60a8      	str	r0, [r5, #8]
   4c44a:	e79e      	b.n	4c38a <parse_cereg+0xfa>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   4c44c:	2300      	movs	r3, #0
   4c44e:	e7a9      	b.n	4c3a4 <parse_cereg+0x114>
   4c450:	0005f463 	.word	0x0005f463
   4c454:	0005bf94 	.word	0x0005bf94
   4c458:	0005f68e 	.word	0x0005f68e
   4c45c:	0005f6bb 	.word	0x0005f6bb
   4c460:	0005f3e6 	.word	0x0005f3e6
   4c464:	0005f6e4 	.word	0x0005f6e4
   4c468:	0005f014 	.word	0x0005f014
   4c46c:	0005f70c 	.word	0x0005f70c
   4c470:	0005f738 	.word	0x0005f738

0004c474 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
   4c474:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct at_param_list resp_list = {0};
   4c476:	2500      	movs	r5, #0
{
   4c478:	b087      	sub	sp, #28
   4c47a:	4607      	mov	r7, r0

	if (time == NULL || at_response == NULL) {
   4c47c:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   4c47e:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (time == NULL || at_response == NULL) {
   4c482:	2900      	cmp	r1, #0
   4c484:	d049      	beq.n	4c51a <parse_xt3412+0xa6>
   4c486:	2800      	cmp	r0, #0
   4c488:	d047      	beq.n	4c51a <parse_xt3412+0xa6>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   4c48a:	2104      	movs	r1, #4
   4c48c:	a804      	add	r0, sp, #16
   4c48e:	f00b f996 	bl	577be <at_params_list_init>
	if (err) {
   4c492:	4604      	mov	r4, r0
   4c494:	b168      	cbz	r0, 4c4b2 <parse_xt3412+0x3e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   4c496:	4b22      	ldr	r3, [pc, #136]	; (4c520 <parse_xt3412+0xac>)
   4c498:	9003      	str	r0, [sp, #12]
   4c49a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4c49e:	2201      	movs	r2, #1
   4c4a0:	462b      	mov	r3, r5
   4c4a2:	4628      	mov	r0, r5
   4c4a4:	491f      	ldr	r1, [pc, #124]	; (4c524 <parse_xt3412+0xb0>)
   4c4a6:	9500      	str	r5, [sp, #0]
   4c4a8:	f00b fae2 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   4c4ac:	4620      	mov	r0, r4
   4c4ae:	b007      	add	sp, #28
   4c4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   4c4b2:	4601      	mov	r1, r0
   4c4b4:	aa04      	add	r2, sp, #16
   4c4b6:	4638      	mov	r0, r7
   4c4b8:	f00b f968 	bl	5778c <at_parser_params_from_str>
	if (err) {
   4c4bc:	4604      	mov	r4, r0
   4c4be:	b170      	cbz	r0, 4c4de <parse_xt3412+0x6a>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   4c4c0:	4b19      	ldr	r3, [pc, #100]	; (4c528 <parse_xt3412+0xb4>)
   4c4c2:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   4c4c4:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4c4c8:	2201      	movs	r2, #1
   4c4ca:	462b      	mov	r3, r5
   4c4cc:	4628      	mov	r0, r5
   4c4ce:	4915      	ldr	r1, [pc, #84]	; (4c524 <parse_xt3412+0xb0>)
   4c4d0:	9500      	str	r5, [sp, #0]
   4c4d2:	f00b facd 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   4c4d6:	a804      	add	r0, sp, #16
   4c4d8:	f00b f99b 	bl	57812 <at_params_list_free>
	return err;
   4c4dc:	e7e6      	b.n	4c4ac <parse_xt3412+0x38>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   4c4de:	4632      	mov	r2, r6
   4c4e0:	2102      	movs	r1, #2
   4c4e2:	a804      	add	r0, sp, #16
   4c4e4:	f00b fa5f 	bl	579a6 <at_params_int64_get>
	if (err) {
   4c4e8:	4604      	mov	r4, r0
   4c4ea:	b110      	cbz	r0, 4c4f2 <parse_xt3412+0x7e>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   4c4ec:	4b0f      	ldr	r3, [pc, #60]	; (4c52c <parse_xt3412+0xb8>)
   4c4ee:	9003      	str	r0, [sp, #12]
   4c4f0:	e7e8      	b.n	4c4c4 <parse_xt3412+0x50>
	if ((*time > T3412_MAX) || *time < 0) {
   4c4f2:	490f      	ldr	r1, [pc, #60]	; (4c530 <parse_xt3412+0xbc>)
   4c4f4:	e9d6 3200 	ldrd	r3, r2, [r6]
   4c4f8:	4299      	cmp	r1, r3
   4c4fa:	f04f 0308 	mov.w	r3, #8
   4c4fe:	4193      	sbcs	r3, r2
   4c500:	d2e9      	bcs.n	4c4d6 <parse_xt3412+0x62>
		LOG_WRN("Parsed time parameter not within valid range");
   4c502:	4b0c      	ldr	r3, [pc, #48]	; (4c534 <parse_xt3412+0xc0>)
   4c504:	2202      	movs	r2, #2
   4c506:	e9cd 0301 	strd	r0, r3, [sp, #4]
   4c50a:	4906      	ldr	r1, [pc, #24]	; (4c524 <parse_xt3412+0xb0>)
   4c50c:	4603      	mov	r3, r0
   4c50e:	9000      	str	r0, [sp, #0]
   4c510:	f00b faae 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
		err = -EINVAL;
   4c514:	f06f 0415 	mvn.w	r4, #21
   4c518:	e7dd      	b.n	4c4d6 <parse_xt3412+0x62>
		return -EINVAL;
   4c51a:	f06f 0415 	mvn.w	r4, #21
   4c51e:	e7c5      	b.n	4c4ac <parse_xt3412+0x38>
   4c520:	0005f463 	.word	0x0005f463
   4c524:	0005bf94 	.word	0x0005bf94
   4c528:	0005f759 	.word	0x0005f759
   4c52c:	0005f786 	.word	0x0005f786
   4c530:	5099e000 	.word	0x5099e000
   4c534:	0005f7b3 	.word	0x0005f7b3

0004c538 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   4c538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   4c53a:	4603      	mov	r3, r0
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   4c53c:	b958      	cbnz	r0, 4c556 <neighborcell_count_get+0x1e>
		LOG_ERR("at_response is NULL, can't get cell count");
   4c53e:	4a0e      	ldr	r2, [pc, #56]	; (4c578 <neighborcell_count_get+0x40>)
   4c540:	490e      	ldr	r1, [pc, #56]	; (4c57c <neighborcell_count_get+0x44>)
   4c542:	e9cd 0201 	strd	r0, r2, [sp, #4]
   4c546:	9000      	str	r0, [sp, #0]
   4c548:	2201      	movs	r2, #1
   4c54a:	f00b fa91 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
		return 0;
   4c54e:	2000      	movs	r0, #0
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   4c550:	b005      	add	sp, #20
   4c552:	f85d fb04 	ldr.w	pc, [sp], #4
   4c556:	1e43      	subs	r3, r0, #1
	uint32_t count = 0;
   4c558:	2000      	movs	r0, #0
		if (*str == c) {
   4c55a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4c55e:	2a2c      	cmp	r2, #44	; 0x2c
   4c560:	d101      	bne.n	4c566 <neighborcell_count_get+0x2e>
			count++;
   4c562:	3001      	adds	r0, #1
	} while (*(str++) != '\0');
   4c564:	e7f9      	b.n	4c55a <neighborcell_count_get+0x22>
   4c566:	2a00      	cmp	r2, #0
   4c568:	d1f7      	bne.n	4c55a <neighborcell_count_get+0x22>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   4c56a:	280a      	cmp	r0, #10
   4c56c:	d9ef      	bls.n	4c54e <neighborcell_count_get+0x16>
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   4c56e:	2305      	movs	r3, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   4c570:	3809      	subs	r0, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   4c572:	fbb0 f0f3 	udiv	r0, r0, r3
	return ncell_count;
   4c576:	e7eb      	b.n	4c550 <neighborcell_count_get+0x18>
   4c578:	0005f7e0 	.word	0x0005f7e0
   4c57c:	0005bf94 	.word	0x0005bf94

0004c580 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   4c580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   4c584:	230b      	movs	r3, #11
{
   4c586:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c588:	2100      	movs	r1, #0
{
   4c58a:	4607      	mov	r7, r0
   4c58c:	b091      	sub	sp, #68	; 0x44
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c58e:	e9cd 110d 	strd	r1, r1, [sp, #52]	; 0x34
	size_t response_prefix_len = sizeof(response_prefix);
   4c592:	9308      	str	r3, [sp, #32]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c594:	f8cd 103b 	str.w	r1, [sp, #59]	; 0x3b
static uint32_t get_char_frequency(const char *str, char c)
   4c598:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   4c59a:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   4c59e:	2e2c      	cmp	r6, #44	; 0x2c
   4c5a0:	d101      	bne.n	4c5a6 <parse_ncellmeas+0x26>
			count++;
   4c5a2:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   4c5a4:	e7f9      	b.n	4c59a <parse_ncellmeas+0x1a>
   4c5a6:	2e00      	cmp	r6, #0
   4c5a8:	d1f7      	bne.n	4c59a <parse_ncellmeas+0x1a>
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c5aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cells->ncells_count = 0;
   4c5ae:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c5b2:	60ab      	str	r3, [r5, #8]

	err = at_params_list_init(&resp_list, param_count);
   4c5b4:	3103      	adds	r1, #3
   4c5b6:	a80b      	add	r0, sp, #44	; 0x2c
   4c5b8:	f00b f901 	bl	577be <at_params_list_init>
	if (err) {
   4c5bc:	4604      	mov	r4, r0
   4c5be:	b170      	cbz	r0, 4c5de <parse_ncellmeas+0x5e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   4c5c0:	4b9f      	ldr	r3, [pc, #636]	; (4c840 <parse_ncellmeas+0x2c0>)
   4c5c2:	9003      	str	r0, [sp, #12]
   4c5c4:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4c5c8:	2201      	movs	r2, #1
   4c5ca:	4633      	mov	r3, r6
   4c5cc:	4630      	mov	r0, r6
   4c5ce:	499d      	ldr	r1, [pc, #628]	; (4c844 <parse_ncellmeas+0x2c4>)
   4c5d0:	9600      	str	r6, [sp, #0]
   4c5d2:	f00b fa4d 	bl	57a70 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   4c5d6:	4620      	mov	r0, r4
   4c5d8:	b011      	add	sp, #68	; 0x44
   4c5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   4c5de:	4601      	mov	r1, r0
   4c5e0:	aa0b      	add	r2, sp, #44	; 0x2c
   4c5e2:	4638      	mov	r0, r7
   4c5e4:	f00b f8d2 	bl	5778c <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   4c5e8:	4604      	mov	r4, r0
   4c5ea:	b180      	cbz	r0, 4c60e <parse_ncellmeas+0x8e>
   4c5ec:	1dc3      	adds	r3, r0, #7
   4c5ee:	d01e      	beq.n	4c62e <parse_ncellmeas+0xae>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   4c5f0:	4b95      	ldr	r3, [pc, #596]	; (4c848 <parse_ncellmeas+0x2c8>)
   4c5f2:	9003      	str	r0, [sp, #12]
   4c5f4:	e9cd 6301 	strd	r6, r3, [sp, #4]
   4c5f8:	4633      	mov	r3, r6
   4c5fa:	9600      	str	r6, [sp, #0]
		LOG_ERR("Could not get response prefix, error: %d", err);
   4c5fc:	2201      	movs	r2, #1
   4c5fe:	4618      	mov	r0, r3
   4c600:	4990      	ldr	r1, [pc, #576]	; (4c844 <parse_ncellmeas+0x2c4>)
   4c602:	f00b fa35 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   4c606:	a80b      	add	r0, sp, #44	; 0x2c
   4c608:	f00b f903 	bl	57812 <at_params_list_free>
	return err;
   4c60c:	e7e3      	b.n	4c5d6 <parse_ncellmeas+0x56>
	bool incomplete = false;
   4c60e:	4606      	mov	r6, r0
	err = at_params_string_get(&resp_list,
   4c610:	2100      	movs	r1, #0
   4c612:	ab08      	add	r3, sp, #32
   4c614:	aa0d      	add	r2, sp, #52	; 0x34
   4c616:	a80b      	add	r0, sp, #44	; 0x2c
   4c618:	f00b f9d9 	bl	579ce <at_params_string_get>
	if (err) {
   4c61c:	4604      	mov	r4, r0
   4c61e:	b140      	cbz	r0, 4c632 <parse_ncellmeas+0xb2>
		LOG_ERR("Could not get response prefix, error: %d", err);
   4c620:	4b8a      	ldr	r3, [pc, #552]	; (4c84c <parse_ncellmeas+0x2cc>)
   4c622:	9003      	str	r0, [sp, #12]
   4c624:	9302      	str	r3, [sp, #8]
   4c626:	2300      	movs	r3, #0
   4c628:	e9cd 3300 	strd	r3, r3, [sp]
   4c62c:	e7e6      	b.n	4c5fc <parse_ncellmeas+0x7c>
		incomplete = true;
   4c62e:	2601      	movs	r6, #1
   4c630:	e7ee      	b.n	4c610 <parse_ncellmeas+0x90>
	if (!response_is_valid(response_prefix, response_prefix_len,
   4c632:	4a87      	ldr	r2, [pc, #540]	; (4c850 <parse_ncellmeas+0x2d0>)
   4c634:	9908      	ldr	r1, [sp, #32]
   4c636:	a80d      	add	r0, sp, #52	; 0x34
   4c638:	f7ff fd0c 	bl	4c054 <response_is_valid>
   4c63c:	2800      	cmp	r0, #0
   4c63e:	f000 80a5 	beq.w	4c78c <parse_ncellmeas+0x20c>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   4c642:	2101      	movs	r1, #1
   4c644:	aa05      	add	r2, sp, #20
   4c646:	a80b      	add	r0, sp, #44	; 0x2c
   4c648:	f00b f995 	bl	57976 <at_params_int_get>
	if (err) {
   4c64c:	4604      	mov	r4, r0
   4c64e:	2800      	cmp	r0, #0
   4c650:	d1d9      	bne.n	4c606 <parse_ncellmeas+0x86>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   4c652:	9b05      	ldr	r3, [sp, #20]
   4c654:	2b00      	cmp	r3, #0
   4c656:	f040 80f0 	bne.w	4c83a <parse_ncellmeas+0x2ba>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   4c65a:	2102      	movs	r1, #2
   4c65c:	aa06      	add	r2, sp, #24
   4c65e:	a80b      	add	r0, sp, #44	; 0x2c
   4c660:	f00b fa3b 	bl	57ada <string_param_to_int.constprop.0>
	if (err) {
   4c664:	4604      	mov	r4, r0
   4c666:	2800      	cmp	r0, #0
   4c668:	d1cd      	bne.n	4c606 <parse_ncellmeas+0x86>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   4c66a:	9b06      	ldr	r3, [sp, #24]
	len = sizeof(tmp_str);
   4c66c:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   4c670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c674:	bfa4      	itt	ge
   4c676:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
   4c67a:	9306      	strge	r3, [sp, #24]
	cells->current_cell.id = tmp;
   4c67c:	9b06      	ldr	r3, [sp, #24]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   4c67e:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   4c680:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   4c682:	aa09      	add	r2, sp, #36	; 0x24
   4c684:	ab07      	add	r3, sp, #28
   4c686:	a80b      	add	r0, sp, #44	; 0x2c
	len = sizeof(tmp_str);
   4c688:	f8cd 801c 	str.w	r8, [sp, #28]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   4c68c:	f00b f99f 	bl	579ce <at_params_string_get>
	if (err) {
   4c690:	4604      	mov	r4, r0
   4c692:	2800      	cmp	r0, #0
   4c694:	d1b7      	bne.n	4c606 <parse_ncellmeas+0x86>
	tmp_str[len] = '\0';
   4c696:	9b07      	ldr	r3, [sp, #28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   4c698:	210a      	movs	r1, #10
	tmp_str[len] = '\0';
   4c69a:	3340      	adds	r3, #64	; 0x40
   4c69c:	446b      	add	r3, sp
   4c69e:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   4c6a2:	1d2a      	adds	r2, r5, #4
   4c6a4:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   4c6a8:	f00b f9f1 	bl	57a8e <string_to_int>
	if (err) {
   4c6ac:	4604      	mov	r4, r0
   4c6ae:	2800      	cmp	r0, #0
   4c6b0:	d1a9      	bne.n	4c606 <parse_ncellmeas+0x86>
	tmp_str[3] = '\0';
   4c6b2:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   4c6b6:	462a      	mov	r2, r5
   4c6b8:	210a      	movs	r1, #10
   4c6ba:	a809      	add	r0, sp, #36	; 0x24
   4c6bc:	f00b f9e7 	bl	57a8e <string_to_int>
	if (err) {
   4c6c0:	4604      	mov	r4, r0
   4c6c2:	2800      	cmp	r0, #0
   4c6c4:	d19f      	bne.n	4c606 <parse_ncellmeas+0x86>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   4c6c6:	2104      	movs	r1, #4
   4c6c8:	aa06      	add	r2, sp, #24
   4c6ca:	a80b      	add	r0, sp, #44	; 0x2c
   4c6cc:	f00b fa05 	bl	57ada <string_param_to_int.constprop.0>
	if (err) {
   4c6d0:	4604      	mov	r4, r0
   4c6d2:	2800      	cmp	r0, #0
   4c6d4:	d197      	bne.n	4c606 <parse_ncellmeas+0x86>
	cells->current_cell.tac = tmp;
   4c6d6:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   4c6d8:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   4c6da:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   4c6dc:	aa06      	add	r2, sp, #24
   4c6de:	a80b      	add	r0, sp, #44	; 0x2c
   4c6e0:	f00b f949 	bl	57976 <at_params_int_get>
	if (err) {
   4c6e4:	4604      	mov	r4, r0
   4c6e6:	2800      	cmp	r0, #0
   4c6e8:	d18d      	bne.n	4c606 <parse_ncellmeas+0x86>
	cells->current_cell.timing_advance = tmp;
   4c6ea:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   4c6ec:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   4c6ee:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   4c6f0:	f105 0210 	add.w	r2, r5, #16
   4c6f4:	a80b      	add	r0, sp, #44	; 0x2c
   4c6f6:	f00b f93e 	bl	57976 <at_params_int_get>
	if (err) {
   4c6fa:	4604      	mov	r4, r0
   4c6fc:	2800      	cmp	r0, #0
   4c6fe:	d182      	bne.n	4c606 <parse_ncellmeas+0x86>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   4c700:	4641      	mov	r1, r8
   4c702:	f105 0228 	add.w	r2, r5, #40	; 0x28
   4c706:	a80b      	add	r0, sp, #44	; 0x2c
   4c708:	f00b f901 	bl	5790e <at_params_short_get>
	if (err) {
   4c70c:	4604      	mov	r4, r0
   4c70e:	2800      	cmp	r0, #0
   4c710:	f47f af79 	bne.w	4c606 <parse_ncellmeas+0x86>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   4c714:	2108      	movs	r1, #8
   4c716:	aa06      	add	r2, sp, #24
   4c718:	a80b      	add	r0, sp, #44	; 0x2c
   4c71a:	f00b f92c 	bl	57976 <at_params_int_get>
	if (err) {
   4c71e:	4604      	mov	r4, r0
   4c720:	2800      	cmp	r0, #0
   4c722:	f47f af70 	bne.w	4c606 <parse_ncellmeas+0x86>
	cells->current_cell.rsrp = tmp;
   4c726:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   4c728:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   4c72a:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   4c72c:	aa06      	add	r2, sp, #24
   4c72e:	a80b      	add	r0, sp, #44	; 0x2c
   4c730:	f00b f921 	bl	57976 <at_params_int_get>
	if (err) {
   4c734:	4604      	mov	r4, r0
   4c736:	2800      	cmp	r0, #0
   4c738:	f47f af65 	bne.w	4c606 <parse_ncellmeas+0x86>
	cells->current_cell.rsrq = tmp;
   4c73c:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   4c73e:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   4c740:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   4c742:	f105 0220 	add.w	r2, r5, #32
   4c746:	a80b      	add	r0, sp, #44	; 0x2c
   4c748:	f00b f92d 	bl	579a6 <at_params_int64_get>
	if (err) {
   4c74c:	4604      	mov	r4, r0
   4c74e:	2800      	cmp	r0, #0
   4c750:	f47f af59 	bne.w	4c606 <parse_ncellmeas+0x86>
	cells->ncells_count = neighborcell_count_get(at_response);
   4c754:	4638      	mov	r0, r7
   4c756:	f7ff feef 	bl	4c538 <neighborcell_count_get>
   4c75a:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   4c75e:	b2c0      	uxtb	r0, r0
   4c760:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   4c764:	f100 040b 	add.w	r4, r0, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   4c768:	a80b      	add	r0, sp, #44	; 0x2c
   4c76a:	f00b f950 	bl	57a0e <at_params_valid_count_get>
   4c76e:	42a0      	cmp	r0, r4
   4c770:	d90e      	bls.n	4c790 <parse_ncellmeas+0x210>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   4c772:	4621      	mov	r1, r4
   4c774:	f105 0218 	add.w	r2, r5, #24
   4c778:	a80b      	add	r0, sp, #44	; 0x2c
   4c77a:	f00b f914 	bl	579a6 <at_params_int64_get>
		if (err) {
   4c77e:	4604      	mov	r4, r0
   4c780:	2800      	cmp	r0, #0
   4c782:	f47f af40 	bne.w	4c606 <parse_ncellmeas+0x86>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   4c786:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   4c78a:	b933      	cbnz	r3, 4c79a <parse_ncellmeas+0x21a>
	err = at_params_string_get(&resp_list,
   4c78c:	2400      	movs	r4, #0
   4c78e:	e73a      	b.n	4c606 <parse_ncellmeas+0x86>
		cells->current_cell.timing_advance_meas_time = 0;
   4c790:	2200      	movs	r2, #0
   4c792:	2300      	movs	r3, #0
   4c794:	e9c5 2306 	strd	r2, r3, [r5, #24]
   4c798:	e7f5      	b.n	4c786 <parse_ncellmeas+0x206>
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   4c79a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   4c79c:	2b00      	cmp	r3, #0
   4c79e:	d0f5      	beq.n	4c78c <parse_ncellmeas+0x20c>
   4c7a0:	270f      	movs	r7, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   4c7a2:	f04f 0800 	mov.w	r8, #0
   4c7a6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   4c7aa:	4598      	cmp	r8, r3
   4c7ac:	d304      	bcc.n	4c7b8 <parse_ncellmeas+0x238>
	if (incomplete) {
   4c7ae:	2e00      	cmp	r6, #0
   4c7b0:	d0ec      	beq.n	4c78c <parse_ncellmeas+0x20c>
		err = -E2BIG;
   4c7b2:	f06f 0406 	mvn.w	r4, #6
   4c7b6:	e726      	b.n	4c606 <parse_ncellmeas+0x86>
					&cells->neighbor_cells[i].earfcn);
   4c7b8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   4c7ba:	1f39      	subs	r1, r7, #4
   4c7bc:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   4c7c0:	a80b      	add	r0, sp, #44	; 0x2c
   4c7c2:	f00b f8d8 	bl	57976 <at_params_int_get>
		if (err) {
   4c7c6:	ea4f 1908 	mov.w	r9, r8, lsl #4
   4c7ca:	4604      	mov	r4, r0
   4c7cc:	2800      	cmp	r0, #0
   4c7ce:	f47f af1a 	bne.w	4c606 <parse_ncellmeas+0x86>
					  &cells->neighbor_cells[i].phys_cell_id);
   4c7d2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   4c7d4:	1ef9      	subs	r1, r7, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   4c7d6:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   4c7d8:	3208      	adds	r2, #8
   4c7da:	a80b      	add	r0, sp, #44	; 0x2c
   4c7dc:	f00b f897 	bl	5790e <at_params_short_get>
		if (err) {
   4c7e0:	4604      	mov	r4, r0
   4c7e2:	2800      	cmp	r0, #0
   4c7e4:	f47f af0f 	bne.w	4c606 <parse_ncellmeas+0x86>
		err = at_params_int_get(&resp_list,
   4c7e8:	aa06      	add	r2, sp, #24
   4c7ea:	1eb9      	subs	r1, r7, #2
   4c7ec:	a80b      	add	r0, sp, #44	; 0x2c
   4c7ee:	f00b f8c2 	bl	57976 <at_params_int_get>
		if (err) {
   4c7f2:	4604      	mov	r4, r0
   4c7f4:	2800      	cmp	r0, #0
   4c7f6:	f47f af06 	bne.w	4c606 <parse_ncellmeas+0x86>
		cells->neighbor_cells[i].rsrp = tmp;
   4c7fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   4c7fc:	9a06      	ldr	r2, [sp, #24]
   4c7fe:	444b      	add	r3, r9
   4c800:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   4c802:	1e79      	subs	r1, r7, #1
   4c804:	aa06      	add	r2, sp, #24
   4c806:	a80b      	add	r0, sp, #44	; 0x2c
   4c808:	f00b f8b5 	bl	57976 <at_params_int_get>
		if (err) {
   4c80c:	4604      	mov	r4, r0
   4c80e:	2800      	cmp	r0, #0
   4c810:	f47f aef9 	bne.w	4c606 <parse_ncellmeas+0x86>
		cells->neighbor_cells[i].rsrq = tmp;
   4c814:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   4c816:	9a06      	ldr	r2, [sp, #24]
   4c818:	444b      	add	r3, r9
   4c81a:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   4c81c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   4c81e:	4639      	mov	r1, r7
					&cells->neighbor_cells[i].time_diff);
   4c820:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   4c822:	3204      	adds	r2, #4
   4c824:	a80b      	add	r0, sp, #44	; 0x2c
   4c826:	f00b f8a6 	bl	57976 <at_params_int_get>
		if (err) {
   4c82a:	3705      	adds	r7, #5
   4c82c:	4604      	mov	r4, r0
   4c82e:	2800      	cmp	r0, #0
   4c830:	f47f aee9 	bne.w	4c606 <parse_ncellmeas+0x86>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   4c834:	f108 0801 	add.w	r8, r8, #1
   4c838:	e7b5      	b.n	4c7a6 <parse_ncellmeas+0x226>
		err = 1;
   4c83a:	2401      	movs	r4, #1
   4c83c:	e6e3      	b.n	4c606 <parse_ncellmeas+0x86>
   4c83e:	bf00      	nop
   4c840:	0005f463 	.word	0x0005f463
   4c844:	0005bf94 	.word	0x0005bf94
   4c848:	0005f80a 	.word	0x0005f80a
   4c84c:	0005f6bb 	.word	0x0005f6bb
   4c850:	0005f3b0 	.word	0x0005f3b0

0004c854 <parse_ncellmeas_gci>:
{
	struct at_param_list resp_list;
	struct lte_lc_ncell *ncells = NULL;
	int err, status, tmp_int, len;
	int16_t tmp_short;
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c854:	2300      	movs	r3, #0
{
   4c856:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c85a:	4616      	mov	r6, r2
	size_t response_prefix_len = sizeof(response_prefix);
   4c85c:	220b      	movs	r2, #11
{
   4c85e:	460d      	mov	r5, r1
	uint32_t count = 0;
   4c860:	4699      	mov	r9, r3
{
   4c862:	b0a3      	sub	sp, #140	; 0x8c
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c864:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	size_t response_prefix_len = sizeof(response_prefix);
   4c868:	920e      	str	r2, [sp, #56]	; 0x38
{
   4c86a:	9007      	str	r0, [sp, #28]
	char response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   4c86c:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
static uint32_t get_char_frequency(const char *str, char c)
   4c870:	1e4a      	subs	r2, r1, #1
		if (*str == c) {
   4c872:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   4c876:	2b2c      	cmp	r3, #44	; 0x2c
   4c878:	d102      	bne.n	4c880 <parse_ncellmeas_gci+0x2c>
			count++;
   4c87a:	f109 0901 	add.w	r9, r9, #1
	} while (*(str++) != '\0');
   4c87e:	e7f8      	b.n	4c872 <parse_ncellmeas_gci+0x1e>
   4c880:	2b00      	cmp	r3, #0
   4c882:	d1f6      	bne.n	4c872 <parse_ncellmeas_gci+0x1e>
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	/* Fill the defaults */
	cells->gci_cells_count = 0;
	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4c888:	2430      	movs	r4, #48	; 0x30
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   4c88a:	f109 0703 	add.w	r7, r9, #3
	cells->gci_cells_count = 0;
   4c88e:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	cells->ncells_count = 0;
   4c892:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c896:	60b2      	str	r2, [r6, #8]

	for (i = 0; i < params->gci_count; i++) {
   4c898:	9907      	ldr	r1, [sp, #28]
   4c89a:	7849      	ldrb	r1, [r1, #1]
   4c89c:	4299      	cmp	r1, r3
   4c89e:	d817      	bhi.n	4c8d0 <parse_ncellmeas_gci+0x7c>
	 *		<meas_time>,<serving>,<neighbor_count>
	 *	[,<n_earfcn1>,<n_phys_cell_id1>,<n_rsrp1>,<n_rsrq1>,<time_diff1>]
	 *	[,<n_earfcn2>,<n_phys_cell_id2>,<n_rsrp2>,<n_rsrq2>,<time_diff2>]...]...
	 */

	err = at_params_list_init(&resp_list, param_count);
   4c8a0:	4639      	mov	r1, r7
   4c8a2:	a811      	add	r0, sp, #68	; 0x44
   4c8a4:	f00a ff8b 	bl	577be <at_params_list_init>
	if (err) {
   4c8a8:	4604      	mov	r4, r0
   4c8aa:	b1d8      	cbz	r0, 4c8e4 <parse_ncellmeas_gci+0x90>
		LOG_ERR("Could not init AT params list for cell_list, error: %d", err);
   4c8ac:	4b9c      	ldr	r3, [pc, #624]	; (4cb20 <parse_ncellmeas_gci+0x2cc>)
   4c8ae:	9003      	str	r0, [sp, #12]
		goto clean_exit;
	}

	err = at_parser_params_from_str(at_response, NULL, &resp_list);
	if (err && err != -E2BIG) {
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   4c8b0:	9302      	str	r3, [sp, #8]
   4c8b2:	2300      	movs	r3, #0
   4c8b4:	e9cd 3300 	strd	r3, r3, [sp]
   4c8b8:	2201      	movs	r2, #1
   4c8ba:	4618      	mov	r0, r3
   4c8bc:	4999      	ldr	r1, [pc, #612]	; (4cb24 <parse_ncellmeas_gci+0x2d0>)
   4c8be:	f00b f8d7 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
	if (incomplete) {
		err = -E2BIG;
	}

clean_exit:
	at_params_list_free(&resp_list);
   4c8c2:	a811      	add	r0, sp, #68	; 0x44
   4c8c4:	f00a ffa5 	bl	57812 <at_params_list_free>

	return err;
}
   4c8c8:	4620      	mov	r0, r4
   4c8ca:	b023      	add	sp, #140	; 0x8c
   4c8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c8d0:	fb04 f003 	mul.w	r0, r4, r3
   4c8d4:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
	for (i = 0; i < params->gci_count; i++) {
   4c8d6:	3301      	adds	r3, #1
		cells->gci_cells[i].id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c8d8:	4401      	add	r1, r0
   4c8da:	608a      	str	r2, [r1, #8]
		cells->gci_cells[i].timing_advance = LTE_LC_CELL_TIMING_ADVANCE_INVALID;
   4c8dc:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   4c8de:	4401      	add	r1, r0
   4c8e0:	828a      	strh	r2, [r1, #20]
	for (i = 0; i < params->gci_count; i++) {
   4c8e2:	e7d9      	b.n	4c898 <parse_ncellmeas_gci+0x44>
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   4c8e4:	4601      	mov	r1, r0
   4c8e6:	aa11      	add	r2, sp, #68	; 0x44
   4c8e8:	4628      	mov	r0, r5
   4c8ea:	f00a ff4f 	bl	5778c <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   4c8ee:	4604      	mov	r4, r0
   4c8f0:	b1f0      	cbz	r0, 4c930 <parse_ncellmeas_gci+0xdc>
   4c8f2:	1dc3      	adds	r3, r0, #7
   4c8f4:	d002      	beq.n	4c8fc <parse_ncellmeas_gci+0xa8>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   4c8f6:	4b8c      	ldr	r3, [pc, #560]	; (4cb28 <parse_ncellmeas_gci+0x2d4>)
   4c8f8:	9003      	str	r0, [sp, #12]
   4c8fa:	e7d9      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
		LOG_WRN("E2BIG was returned, continue. param_count %d, err %d, str %s",
   4c8fc:	4b8b      	ldr	r3, [pc, #556]	; (4cb2c <parse_ncellmeas_gci+0x2d8>)
   4c8fe:	e9cd 0504 	strd	r0, r5, [sp, #16]
   4c902:	9302      	str	r3, [sp, #8]
   4c904:	2300      	movs	r3, #0
   4c906:	2202      	movs	r2, #2
   4c908:	4618      	mov	r0, r3
   4c90a:	e9cd 3300 	strd	r3, r3, [sp]
   4c90e:	4985      	ldr	r1, [pc, #532]	; (4cb24 <parse_ncellmeas_gci+0x2d0>)
   4c910:	9703      	str	r7, [sp, #12]
   4c912:	f00b f8ad 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
		incomplete = true;
   4c916:	2301      	movs	r3, #1
   4c918:	9306      	str	r3, [sp, #24]
	err = at_params_string_get(&resp_list,
   4c91a:	2100      	movs	r1, #0
   4c91c:	ab0e      	add	r3, sp, #56	; 0x38
   4c91e:	aa13      	add	r2, sp, #76	; 0x4c
   4c920:	a811      	add	r0, sp, #68	; 0x44
   4c922:	f00b f854 	bl	579ce <at_params_string_get>
	if (err) {
   4c926:	4604      	mov	r4, r0
   4c928:	b120      	cbz	r0, 4c934 <parse_ncellmeas_gci+0xe0>
		LOG_ERR("Could not get response prefix, error: %d", err);
   4c92a:	4b81      	ldr	r3, [pc, #516]	; (4cb30 <parse_ncellmeas_gci+0x2dc>)
   4c92c:	9003      	str	r0, [sp, #12]
   4c92e:	e7bf      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
	bool incomplete = false;
   4c930:	9006      	str	r0, [sp, #24]
   4c932:	e7f2      	b.n	4c91a <parse_ncellmeas_gci+0xc6>
	if (!response_is_valid(response_prefix, response_prefix_len,
   4c934:	4a7f      	ldr	r2, [pc, #508]	; (4cb34 <parse_ncellmeas_gci+0x2e0>)
   4c936:	990e      	ldr	r1, [sp, #56]	; 0x38
   4c938:	a813      	add	r0, sp, #76	; 0x4c
   4c93a:	f7ff fb8b 	bl	4c054 <response_is_valid>
   4c93e:	4607      	mov	r7, r0
   4c940:	b950      	cbnz	r0, 4c958 <parse_ncellmeas_gci+0x104>
		LOG_ERR("Not a valid NCELLMEAS response");
   4c942:	4b7d      	ldr	r3, [pc, #500]	; (4cb38 <parse_ncellmeas_gci+0x2e4>)
   4c944:	2201      	movs	r2, #1
   4c946:	e9cd 0301 	strd	r0, r3, [sp, #4]
   4c94a:	4976      	ldr	r1, [pc, #472]	; (4cb24 <parse_ncellmeas_gci+0x2d0>)
   4c94c:	4603      	mov	r3, r0
   4c94e:	9000      	str	r0, [sp, #0]
   4c950:	f00b f88e 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
	err = at_params_string_get(&resp_list,
   4c954:	2400      	movs	r4, #0
   4c956:	e7b4      	b.n	4c8c2 <parse_ncellmeas_gci+0x6e>
	err = at_params_int_get(&resp_list, curr_index, &status);
   4c958:	2101      	movs	r1, #1
   4c95a:	aa0b      	add	r2, sp, #44	; 0x2c
   4c95c:	a811      	add	r0, sp, #68	; 0x44
   4c95e:	f00b f80a 	bl	57976 <at_params_int_get>
	if (err) {
   4c962:	4604      	mov	r4, r0
   4c964:	2800      	cmp	r0, #0
   4c966:	d1ac      	bne.n	4c8c2 <parse_ncellmeas_gci+0x6e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   4c968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   4c96a:	2b00      	cmp	r3, #0
   4c96c:	f040 81ae 	bne.w	4cccc <parse_ncellmeas_gci+0x478>
	curr_index = AT_NCELLMEAS_STATUS_INDEX;
   4c970:	2501      	movs	r5, #1
	size_t i = 0, j = 0, k = 0;
   4c972:	469b      	mov	fp, r3
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   4c974:	4698      	mov	r8, r3
   4c976:	f1a9 030a 	sub.w	r3, r9, #10
   4c97a:	9309      	str	r3, [sp, #36]	; 0x24
   4c97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   4c97e:	42ab      	cmp	r3, r5
   4c980:	d903      	bls.n	4c98a <parse_ncellmeas_gci+0x136>
			i < params->gci_count; i++) {
   4c982:	9b07      	ldr	r3, [sp, #28]
   4c984:	785b      	ldrb	r3, [r3, #1]
	for (i = 0; curr_index < (param_count - (AT_NCELLMEAS_GCI_CELL_PARAMS_COUNT + 1)) &&
   4c986:	4598      	cmp	r8, r3
   4c988:	d305      	bcc.n	4c996 <parse_ncellmeas_gci+0x142>
	if (incomplete) {
   4c98a:	9b06      	ldr	r3, [sp, #24]
   4c98c:	2b00      	cmp	r3, #0
   4c98e:	d0e1      	beq.n	4c954 <parse_ncellmeas_gci+0x100>
		err = -E2BIG;
   4c990:	f06f 0406 	mvn.w	r4, #6
   4c994:	e795      	b.n	4c8c2 <parse_ncellmeas_gci+0x6e>
		curr_index++;
   4c996:	f105 0901 	add.w	r9, r5, #1
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   4c99a:	4649      	mov	r1, r9
   4c99c:	aa0c      	add	r2, sp, #48	; 0x30
   4c99e:	a811      	add	r0, sp, #68	; 0x44
   4c9a0:	f00b f89b 	bl	57ada <string_param_to_int.constprop.0>
		if (err) {
   4c9a4:	4604      	mov	r4, r0
   4c9a6:	b170      	cbz	r0, 4c9c6 <parse_ncellmeas_gci+0x172>
			LOG_ERR("Could not parse cell_id, index %d, i %d error: %d",
   4c9a8:	4b64      	ldr	r3, [pc, #400]	; (4cb3c <parse_ncellmeas_gci+0x2e8>)
   4c9aa:	e9cd 8004 	strd	r8, r0, [sp, #16]
   4c9ae:	9302      	str	r3, [sp, #8]
   4c9b0:	2300      	movs	r3, #0
   4c9b2:	2201      	movs	r2, #1
   4c9b4:	4618      	mov	r0, r3
   4c9b6:	e9cd 3300 	strd	r3, r3, [sp]
   4c9ba:	495a      	ldr	r1, [pc, #360]	; (4cb24 <parse_ncellmeas_gci+0x2d0>)
   4c9bc:	f8cd 900c 	str.w	r9, [sp, #12]
   4c9c0:	f00b f856 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   4c9c4:	e77d      	b.n	4c8c2 <parse_ncellmeas_gci+0x6e>
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   4c9c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   4c9c8:	aa0f      	add	r2, sp, #60	; 0x3c
		if (tmp_int > LTE_LC_CELL_EUTRAN_ID_MAX) {
   4c9ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
			tmp_int = LTE_LC_CELL_EUTRAN_ID_INVALID;
   4c9ce:	bfa4      	itt	ge
   4c9d0:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
   4c9d4:	930c      	strge	r3, [sp, #48]	; 0x30
		parsed_cell.id = tmp_int;
   4c9d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   4c9d8:	1ca9      	adds	r1, r5, #2
		parsed_cell.id = tmp_int;
   4c9da:	9318      	str	r3, [sp, #96]	; 0x60
		len = sizeof(tmp_str);
   4c9dc:	2307      	movs	r3, #7
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   4c9de:	a811      	add	r0, sp, #68	; 0x44
		len = sizeof(tmp_str);
   4c9e0:	930d      	str	r3, [sp, #52]	; 0x34
		err = at_params_string_get(&resp_list, curr_index, tmp_str, &len);
   4c9e2:	ab0d      	add	r3, sp, #52	; 0x34
   4c9e4:	f00a fff3 	bl	579ce <at_params_string_get>
		if (err) {
   4c9e8:	4604      	mov	r4, r0
   4c9ea:	b110      	cbz	r0, 4c9f2 <parse_ncellmeas_gci+0x19e>
			LOG_ERR("Could not parse plmn, error: %d", err);
   4c9ec:	4b54      	ldr	r3, [pc, #336]	; (4cb40 <parse_ncellmeas_gci+0x2ec>)
   4c9ee:	9003      	str	r0, [sp, #12]
   4c9f0:	e75e      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
		tmp_str[len] = '\0';
   4c9f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   4c9f4:	4682      	mov	sl, r0
   4c9f6:	3388      	adds	r3, #136	; 0x88
   4c9f8:	446b      	add	r3, sp
   4c9fa:	f803 0c4c 	strb.w	r0, [r3, #-76]
		err = string_to_int(&tmp_str[3], 10, &parsed_cell.mnc);
   4c9fe:	210a      	movs	r1, #10
   4ca00:	aa17      	add	r2, sp, #92	; 0x5c
   4ca02:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   4ca06:	f00b f842 	bl	57a8e <string_to_int>
		if (err) {
   4ca0a:	4604      	mov	r4, r0
   4ca0c:	b138      	cbz	r0, 4ca1e <parse_ncellmeas_gci+0x1ca>
			LOG_ERR("string_to_int, error: %d", err);
   4ca0e:	4b4d      	ldr	r3, [pc, #308]	; (4cb44 <parse_ncellmeas_gci+0x2f0>)
   4ca10:	9403      	str	r4, [sp, #12]
			LOG_ERR("Could not parse rsrp, error: %d", err);
   4ca12:	e9cd a301 	strd	sl, r3, [sp, #4]
   4ca16:	f8cd a000 	str.w	sl, [sp]
   4ca1a:	4653      	mov	r3, sl
   4ca1c:	e74c      	b.n	4c8b8 <parse_ncellmeas_gci+0x64>
		tmp_str[3] = '\0';
   4ca1e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   4ca22:	4681      	mov	r9, r0
		err = string_to_int(tmp_str, 10, &parsed_cell.mcc);
   4ca24:	210a      	movs	r1, #10
   4ca26:	aa16      	add	r2, sp, #88	; 0x58
   4ca28:	a80f      	add	r0, sp, #60	; 0x3c
   4ca2a:	f00b f830 	bl	57a8e <string_to_int>
		if (err) {
   4ca2e:	4604      	mov	r4, r0
   4ca30:	2800      	cmp	r0, #0
   4ca32:	d1ec      	bne.n	4ca0e <parse_ncellmeas_gci+0x1ba>
		err = string_param_to_int(&resp_list, curr_index, &tmp_int, 16);
   4ca34:	aa0c      	add	r2, sp, #48	; 0x30
   4ca36:	1ce9      	adds	r1, r5, #3
   4ca38:	a811      	add	r0, sp, #68	; 0x44
   4ca3a:	f00b f84e 	bl	57ada <string_param_to_int.constprop.0>
		if (err) {
   4ca3e:	4604      	mov	r4, r0
   4ca40:	b168      	cbz	r0, 4ca5e <parse_ncellmeas_gci+0x20a>
			LOG_ERR("Could not parse tracking_area_code in i %d, error: %d", i, err);
   4ca42:	4b41      	ldr	r3, [pc, #260]	; (4cb48 <parse_ncellmeas_gci+0x2f4>)
   4ca44:	e9cd 8003 	strd	r8, r0, [sp, #12]
   4ca48:	e9cd 9301 	strd	r9, r3, [sp, #4]
   4ca4c:	2201      	movs	r2, #1
   4ca4e:	464b      	mov	r3, r9
   4ca50:	4648      	mov	r0, r9
   4ca52:	4934      	ldr	r1, [pc, #208]	; (4cb24 <parse_ncellmeas_gci+0x2d0>)
   4ca54:	f8cd 9000 	str.w	r9, [sp]
   4ca58:	f00b f80a 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   4ca5c:	e731      	b.n	4c8c2 <parse_ncellmeas_gci+0x6e>
		parsed_cell.tac = tmp_int;
   4ca5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   4ca60:	aa0c      	add	r2, sp, #48	; 0x30
   4ca62:	1d29      	adds	r1, r5, #4
   4ca64:	a811      	add	r0, sp, #68	; 0x44
		parsed_cell.tac = tmp_int;
   4ca66:	9319      	str	r3, [sp, #100]	; 0x64
		err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   4ca68:	f00a ff85 	bl	57976 <at_params_int_get>
		if (err) {
   4ca6c:	4604      	mov	r4, r0
   4ca6e:	b110      	cbz	r0, 4ca76 <parse_ncellmeas_gci+0x222>
			LOG_ERR("Could not parse timing_advance, error: %d", err);
   4ca70:	4b36      	ldr	r3, [pc, #216]	; (4cb4c <parse_ncellmeas_gci+0x2f8>)
   4ca72:	9003      	str	r0, [sp, #12]
   4ca74:	e7cd      	b.n	4ca12 <parse_ncellmeas_gci+0x1be>
		parsed_cell.timing_advance = tmp_int;
   4ca76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		err = at_params_int64_get(&resp_list, curr_index,
   4ca78:	aa1c      	add	r2, sp, #112	; 0x70
   4ca7a:	1d69      	adds	r1, r5, #5
   4ca7c:	a811      	add	r0, sp, #68	; 0x44
		parsed_cell.timing_advance = tmp_int;
   4ca7e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
		err = at_params_int64_get(&resp_list, curr_index,
   4ca82:	f00a ff90 	bl	579a6 <at_params_int64_get>
		if (err) {
   4ca86:	4604      	mov	r4, r0
   4ca88:	b138      	cbz	r0, 4ca9a <parse_ncellmeas_gci+0x246>
			LOG_ERR("Could not parse timing_advance_meas_time, error: %d", err);
   4ca8a:	4b31      	ldr	r3, [pc, #196]	; (4cb50 <parse_ncellmeas_gci+0x2fc>)
   4ca8c:	9003      	str	r0, [sp, #12]
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   4ca8e:	e9cd 9301 	strd	r9, r3, [sp, #4]
   4ca92:	f8cd 9000 	str.w	r9, [sp]
   4ca96:	464b      	mov	r3, r9
   4ca98:	e70e      	b.n	4c8b8 <parse_ncellmeas_gci+0x64>
		err = at_params_int_get(&resp_list, curr_index, &parsed_cell.earfcn);
   4ca9a:	aa1a      	add	r2, sp, #104	; 0x68
   4ca9c:	1da9      	adds	r1, r5, #6
   4ca9e:	a811      	add	r0, sp, #68	; 0x44
   4caa0:	f00a ff69 	bl	57976 <at_params_int_get>
		if (err) {
   4caa4:	4604      	mov	r4, r0
   4caa6:	b110      	cbz	r0, 4caae <parse_ncellmeas_gci+0x25a>
			LOG_ERR("Could not parse earfcn, error: %d", err);
   4caa8:	4b2a      	ldr	r3, [pc, #168]	; (4cb54 <parse_ncellmeas_gci+0x300>)
   4caaa:	9003      	str	r0, [sp, #12]
   4caac:	e7b1      	b.n	4ca12 <parse_ncellmeas_gci+0x1be>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.phys_cell_id);
   4caae:	aa20      	add	r2, sp, #128	; 0x80
   4cab0:	1de9      	adds	r1, r5, #7
   4cab2:	a811      	add	r0, sp, #68	; 0x44
   4cab4:	f00a ff2b 	bl	5790e <at_params_short_get>
		if (err) {
   4cab8:	4604      	mov	r4, r0
   4caba:	b110      	cbz	r0, 4cac2 <parse_ncellmeas_gci+0x26e>
			LOG_ERR("Could not parse phys_cell_id, error: %d", err);
   4cabc:	4b26      	ldr	r3, [pc, #152]	; (4cb58 <parse_ncellmeas_gci+0x304>)
   4cabe:	9003      	str	r0, [sp, #12]
   4cac0:	e7e5      	b.n	4ca8e <parse_ncellmeas_gci+0x23a>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrp);
   4cac2:	f10d 0282 	add.w	r2, sp, #130	; 0x82
   4cac6:	f105 0108 	add.w	r1, r5, #8
   4caca:	a811      	add	r0, sp, #68	; 0x44
   4cacc:	f00a ff1f 	bl	5790e <at_params_short_get>
		if (err) {
   4cad0:	4604      	mov	r4, r0
   4cad2:	b110      	cbz	r0, 4cada <parse_ncellmeas_gci+0x286>
			LOG_ERR("Could not parse rsrp, error: %d", err);
   4cad4:	4b21      	ldr	r3, [pc, #132]	; (4cb5c <parse_ncellmeas_gci+0x308>)
   4cad6:	9003      	str	r0, [sp, #12]
   4cad8:	e79b      	b.n	4ca12 <parse_ncellmeas_gci+0x1be>
		err = at_params_short_get(&resp_list, curr_index, &parsed_cell.rsrq);
   4cada:	aa21      	add	r2, sp, #132	; 0x84
   4cadc:	f105 0109 	add.w	r1, r5, #9
   4cae0:	a811      	add	r0, sp, #68	; 0x44
   4cae2:	f00a ff14 	bl	5790e <at_params_short_get>
		if (err) {
   4cae6:	4604      	mov	r4, r0
   4cae8:	b110      	cbz	r0, 4caf0 <parse_ncellmeas_gci+0x29c>
			LOG_ERR("Could not parse rsrq, error: %d", err);
   4caea:	4b1d      	ldr	r3, [pc, #116]	; (4cb60 <parse_ncellmeas_gci+0x30c>)
   4caec:	9003      	str	r0, [sp, #12]
   4caee:	e6df      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
		err = at_params_int64_get(&resp_list, curr_index, &parsed_cell.measurement_time);
   4caf0:	aa1e      	add	r2, sp, #120	; 0x78
   4caf2:	f105 010a 	add.w	r1, r5, #10
   4caf6:	a811      	add	r0, sp, #68	; 0x44
   4caf8:	f00a ff55 	bl	579a6 <at_params_int64_get>
		if (err) {
   4cafc:	4604      	mov	r4, r0
   4cafe:	b110      	cbz	r0, 4cb06 <parse_ncellmeas_gci+0x2b2>
			LOG_ERR("Could not parse meas_time, error: %d", err);
   4cb00:	4b18      	ldr	r3, [pc, #96]	; (4cb64 <parse_ncellmeas_gci+0x310>)
   4cb02:	9003      	str	r0, [sp, #12]
   4cb04:	e6d4      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   4cb06:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   4cb0a:	f105 010b 	add.w	r1, r5, #11
   4cb0e:	a811      	add	r0, sp, #68	; 0x44
   4cb10:	f00a fefd 	bl	5790e <at_params_short_get>
		if (err) {
   4cb14:	4604      	mov	r4, r0
   4cb16:	b348      	cbz	r0, 4cb6c <parse_ncellmeas_gci+0x318>
			LOG_ERR("Could not parse serving, error: %d", err);
   4cb18:	4b13      	ldr	r3, [pc, #76]	; (4cb68 <parse_ncellmeas_gci+0x314>)
   4cb1a:	9003      	str	r0, [sp, #12]
   4cb1c:	e6c8      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
   4cb1e:	bf00      	nop
   4cb20:	0005f83c 	.word	0x0005f83c
   4cb24:	0005bf94 	.word	0x0005bf94
   4cb28:	0005f80a 	.word	0x0005f80a
   4cb2c:	0005f873 	.word	0x0005f873
   4cb30:	0005f6bb 	.word	0x0005f6bb
   4cb34:	0005f3b0 	.word	0x0005f3b0
   4cb38:	0005f8b0 	.word	0x0005f8b0
   4cb3c:	0005f8cf 	.word	0x0005f8cf
   4cb40:	0005f901 	.word	0x0005f901
   4cb44:	0005f921 	.word	0x0005f921
   4cb48:	0005f93a 	.word	0x0005f93a
   4cb4c:	0005f970 	.word	0x0005f970
   4cb50:	0005f99a 	.word	0x0005f99a
   4cb54:	0005f9ce 	.word	0x0005f9ce
   4cb58:	0005f9f0 	.word	0x0005f9f0
   4cb5c:	0005fa18 	.word	0x0005fa18
   4cb60:	0005fa38 	.word	0x0005fa38
   4cb64:	0005fa58 	.word	0x0005fa58
   4cb68:	0005fa7d 	.word	0x0005fa7d
		curr_index++;
   4cb6c:	350c      	adds	r5, #12
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   4cb6e:	4629      	mov	r1, r5
   4cb70:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
   4cb74:	a811      	add	r0, sp, #68	; 0x44
		is_serving_cell = tmp_short;
   4cb76:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
		err = at_params_short_get(&resp_list, curr_index, &tmp_short);
   4cb7a:	f00a fec8 	bl	5790e <at_params_short_get>
		if (err) {
   4cb7e:	4604      	mov	r4, r0
   4cb80:	b110      	cbz	r0, 4cb88 <parse_ncellmeas_gci+0x334>
			LOG_ERR("Could not parse neighbor_count, error: %d", err);
   4cb82:	4b53      	ldr	r3, [pc, #332]	; (4ccd0 <parse_ncellmeas_gci+0x47c>)
   4cb84:	9003      	str	r0, [sp, #12]
   4cb86:	e693      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
		if (is_serving_cell) {
   4cb88:	f1b9 0f00 	cmp.w	r9, #0
   4cb8c:	f000 8087 	beq.w	4cc9e <parse_ncellmeas_gci+0x44a>
			cells->current_cell = parsed_cell;
   4cb90:	46b6      	mov	lr, r6
   4cb92:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
   4cb96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   4cb9a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   4cb9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   4cba2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   4cba6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
		parsed_ncells_count = tmp_short;
   4cbaa:	f89d 902a 	ldrb.w	r9, [sp, #42]	; 0x2a
			cells->current_cell = parsed_cell;
   4cbae:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			if (parsed_ncells_count != 0) {
   4cbb2:	f1b9 0f00 	cmp.w	r9, #0
   4cbb6:	d026      	beq.n	4cc06 <parse_ncellmeas_gci+0x3b2>
				if (parsed_ncells_count > CONFIG_LTE_NEIGHBOR_CELLS_MAX) {
   4cbb8:	f1b9 0f11 	cmp.w	r9, #17
   4cbbc:	d90e      	bls.n	4cbdc <parse_ncellmeas_gci+0x388>
					LOG_WRN("Cutting response, because received neigbor cell"
   4cbbe:	f04f 0911 	mov.w	r9, #17
   4cbc2:	4b44      	ldr	r3, [pc, #272]	; (4ccd4 <parse_ncellmeas_gci+0x480>)
   4cbc4:	2202      	movs	r2, #2
   4cbc6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4cbca:	4620      	mov	r0, r4
   4cbcc:	4623      	mov	r3, r4
   4cbce:	4942      	ldr	r1, [pc, #264]	; (4ccd8 <parse_ncellmeas_gci+0x484>)
   4cbd0:	f8cd 900c 	str.w	r9, [sp, #12]
   4cbd4:	9400      	str	r4, [sp, #0]
   4cbd6:	f00a ff4b 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
					incomplete = true;
   4cbda:	9706      	str	r7, [sp, #24]
				ncells = k_calloc(
   4cbdc:	2110      	movs	r1, #16
   4cbde:	4648      	mov	r0, r9
   4cbe0:	f00e f94c 	bl	5ae7c <k_calloc>
					to_be_parsed_ncell_count = parsed_ncells_count;
   4cbe4:	464c      	mov	r4, r9
				ncells = k_calloc(
   4cbe6:	4603      	mov	r3, r0
				if (ncells == NULL) {
   4cbe8:	b950      	cbnz	r0, 4cc00 <parse_ncellmeas_gci+0x3ac>
					LOG_WRN("Failed to allocate memory for the ncells"
   4cbea:	4a3c      	ldr	r2, [pc, #240]	; (4ccdc <parse_ncellmeas_gci+0x488>)
   4cbec:	493a      	ldr	r1, [pc, #232]	; (4ccd8 <parse_ncellmeas_gci+0x484>)
   4cbee:	e9cd 0201 	strd	r0, r2, [sp, #4]
   4cbf2:	9000      	str	r0, [sp, #0]
   4cbf4:	2202      	movs	r2, #2
   4cbf6:	f00a ff3b 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
			i < params->gci_count; i++) {
   4cbfa:	f108 0801 	add.w	r8, r8, #1
   4cbfe:	e6bd      	b.n	4c97c <parse_ncellmeas_gci+0x128>
				cells->neighbor_cells = ncells;
   4cc00:	6370      	str	r0, [r6, #52]	; 0x34
				cells->ncells_count = to_be_parsed_ncell_count;
   4cc02:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   4cc06:	f04f 0900 	mov.w	r9, #0
   4cc0a:	9408      	str	r4, [sp, #32]
   4cc0c:	9b08      	ldr	r3, [sp, #32]
   4cc0e:	454b      	cmp	r3, r9
   4cc10:	d0f3      	beq.n	4cbfa <parse_ncellmeas_gci+0x3a6>
							&cells->neighbor_cells[j].earfcn);
   4cc12:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_int_get(&resp_list,
   4cc14:	1c69      	adds	r1, r5, #1
   4cc16:	eb02 1209 	add.w	r2, r2, r9, lsl #4
   4cc1a:	a811      	add	r0, sp, #68	; 0x44
   4cc1c:	f00a feab 	bl	57976 <at_params_int_get>
				if (err) {
   4cc20:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   4cc24:	4604      	mov	r4, r0
   4cc26:	b110      	cbz	r0, 4cc2e <parse_ncellmeas_gci+0x3da>
					LOG_ERR("Could not parse n_earfcn, error: %d", err);
   4cc28:	4b2d      	ldr	r3, [pc, #180]	; (4cce0 <parse_ncellmeas_gci+0x48c>)
   4cc2a:	9003      	str	r0, [sp, #12]
   4cc2c:	e640      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
							  &cells->neighbor_cells[j].phys_cell_id);
   4cc2e:	6b72      	ldr	r2, [r6, #52]	; 0x34
				err = at_params_short_get(&resp_list,
   4cc30:	1ca9      	adds	r1, r5, #2
							  &cells->neighbor_cells[j].phys_cell_id);
   4cc32:	4452      	add	r2, sl
				err = at_params_short_get(&resp_list,
   4cc34:	3208      	adds	r2, #8
   4cc36:	a811      	add	r0, sp, #68	; 0x44
   4cc38:	f00a fe69 	bl	5790e <at_params_short_get>
				if (err) {
   4cc3c:	4604      	mov	r4, r0
   4cc3e:	b110      	cbz	r0, 4cc46 <parse_ncellmeas_gci+0x3f2>
					LOG_ERR("Could not parse n_phys_cell_id, error: %d", err);
   4cc40:	4b28      	ldr	r3, [pc, #160]	; (4cce4 <parse_ncellmeas_gci+0x490>)
   4cc42:	9003      	str	r0, [sp, #12]
   4cc44:	e634      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   4cc46:	aa0c      	add	r2, sp, #48	; 0x30
   4cc48:	1ce9      	adds	r1, r5, #3
   4cc4a:	a811      	add	r0, sp, #68	; 0x44
   4cc4c:	f00a fe93 	bl	57976 <at_params_int_get>
				if (err) {
   4cc50:	4604      	mov	r4, r0
   4cc52:	b110      	cbz	r0, 4cc5a <parse_ncellmeas_gci+0x406>
					LOG_ERR("Could not parse n_rsrp, error: %d", err);
   4cc54:	4b24      	ldr	r3, [pc, #144]	; (4cce8 <parse_ncellmeas_gci+0x494>)
   4cc56:	9003      	str	r0, [sp, #12]
   4cc58:	e62a      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
				cells->neighbor_cells[j].rsrp = tmp_int;
   4cc5a:	6b73      	ldr	r3, [r6, #52]	; 0x34
   4cc5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   4cc5e:	4453      	add	r3, sl
   4cc60:	815a      	strh	r2, [r3, #10]
				err = at_params_int_get(&resp_list, curr_index, &tmp_int);
   4cc62:	1d29      	adds	r1, r5, #4
   4cc64:	aa0c      	add	r2, sp, #48	; 0x30
   4cc66:	a811      	add	r0, sp, #68	; 0x44
   4cc68:	f00a fe85 	bl	57976 <at_params_int_get>
				if (err) {
   4cc6c:	4604      	mov	r4, r0
   4cc6e:	b110      	cbz	r0, 4cc76 <parse_ncellmeas_gci+0x422>
					LOG_ERR("Could not parse n_rsrq, error: %d", err);
   4cc70:	4b1e      	ldr	r3, [pc, #120]	; (4ccec <parse_ncellmeas_gci+0x498>)
   4cc72:	9003      	str	r0, [sp, #12]
   4cc74:	e61c      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
				cells->neighbor_cells[j].rsrq = tmp_int;
   4cc76:	6b73      	ldr	r3, [r6, #52]	; 0x34
   4cc78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   4cc7a:	4453      	add	r3, sl
   4cc7c:	819a      	strh	r2, [r3, #12]
							&cells->neighbor_cells[j].time_diff);
   4cc7e:	6b72      	ldr	r2, [r6, #52]	; 0x34
				curr_index++;
   4cc80:	3505      	adds	r5, #5
							&cells->neighbor_cells[j].time_diff);
   4cc82:	4452      	add	r2, sl
				err = at_params_int_get(&resp_list,
   4cc84:	4629      	mov	r1, r5
   4cc86:	3204      	adds	r2, #4
   4cc88:	a811      	add	r0, sp, #68	; 0x44
   4cc8a:	f00a fe74 	bl	57976 <at_params_int_get>
				if (err) {
   4cc8e:	4604      	mov	r4, r0
   4cc90:	b110      	cbz	r0, 4cc98 <parse_ncellmeas_gci+0x444>
					LOG_ERR("Could not parse time_diff, error: %d", err);
   4cc92:	4b17      	ldr	r3, [pc, #92]	; (4ccf0 <parse_ncellmeas_gci+0x49c>)
   4cc94:	9003      	str	r0, [sp, #12]
   4cc96:	e60b      	b.n	4c8b0 <parse_ncellmeas_gci+0x5c>
			for (j = 0; j < to_be_parsed_ncell_count; j++) {
   4cc98:	f109 0901 	add.w	r9, r9, #1
   4cc9c:	e7b6      	b.n	4cc0c <parse_ncellmeas_gci+0x3b8>
			cells->gci_cells[k] = parsed_cell;
   4cc9e:	2230      	movs	r2, #48	; 0x30
   4cca0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   4cca2:	ac16      	add	r4, sp, #88	; 0x58
   4cca4:	fb02 3c0b 	mla	ip, r2, fp, r3
   4cca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   4ccaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   4ccae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   4ccb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   4ccb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4ccb8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   4ccbc:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			k++;
   4ccc0:	f10b 0b01 	add.w	fp, fp, #1
			cells->gci_cells_count++; /* Increase count for non-serving GCI cell */
   4ccc4:	3301      	adds	r3, #1
   4ccc6:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
			k++;
   4ccca:	e796      	b.n	4cbfa <parse_ncellmeas_gci+0x3a6>
		err = 1;
   4cccc:	2401      	movs	r4, #1
   4ccce:	e5f8      	b.n	4c8c2 <parse_ncellmeas_gci+0x6e>
   4ccd0:	0005faa0 	.word	0x0005faa0
   4ccd4:	0005faca 	.word	0x0005faca
   4ccd8:	0005bf94 	.word	0x0005bf94
   4ccdc:	0005fb22 	.word	0x0005fb22
   4cce0:	0005fb56 	.word	0x0005fb56
   4cce4:	0005fb7a 	.word	0x0005fb7a
   4cce8:	0005fba4 	.word	0x0005fba4
   4ccec:	0005fbc6 	.word	0x0005fbc6
   4ccf0:	0005fbe8 	.word	0x0005fbe8

0004ccf4 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   4ccf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct at_param_list resp_list = {0};
   4ccf6:	2500      	movs	r5, #0
{
   4ccf8:	b089      	sub	sp, #36	; 0x24
   4ccfa:	4607      	mov	r7, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   4ccfc:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   4ccfe:	e9cd 5506 	strd	r5, r5, [sp, #24]
	if (modem_sleep == NULL || at_response == NULL) {
   4cd02:	2900      	cmp	r1, #0
   4cd04:	d05b      	beq.n	4cdbe <parse_xmodemsleep+0xca>
   4cd06:	2800      	cmp	r0, #0
   4cd08:	d059      	beq.n	4cdbe <parse_xmodemsleep+0xca>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   4cd0a:	2104      	movs	r1, #4
   4cd0c:	a806      	add	r0, sp, #24
   4cd0e:	f00a fd56 	bl	577be <at_params_list_init>
	if (err) {
   4cd12:	4604      	mov	r4, r0
   4cd14:	b168      	cbz	r0, 4cd32 <parse_xmodemsleep+0x3e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   4cd16:	4b2b      	ldr	r3, [pc, #172]	; (4cdc4 <parse_xmodemsleep+0xd0>)
   4cd18:	9003      	str	r0, [sp, #12]
   4cd1a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4cd1e:	2201      	movs	r2, #1
   4cd20:	462b      	mov	r3, r5
   4cd22:	4628      	mov	r0, r5
   4cd24:	4928      	ldr	r1, [pc, #160]	; (4cdc8 <parse_xmodemsleep+0xd4>)
   4cd26:	9500      	str	r5, [sp, #0]
   4cd28:	f00a fea2 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   4cd2c:	4620      	mov	r0, r4
   4cd2e:	b009      	add	sp, #36	; 0x24
   4cd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   4cd32:	4601      	mov	r1, r0
   4cd34:	aa06      	add	r2, sp, #24
   4cd36:	4638      	mov	r0, r7
   4cd38:	f00a fd28 	bl	5778c <at_parser_params_from_str>
	if (err) {
   4cd3c:	4604      	mov	r4, r0
   4cd3e:	b170      	cbz	r0, 4cd5e <parse_xmodemsleep+0x6a>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   4cd40:	4b22      	ldr	r3, [pc, #136]	; (4cdcc <parse_xmodemsleep+0xd8>)
   4cd42:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   4cd44:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4cd48:	2201      	movs	r2, #1
   4cd4a:	462b      	mov	r3, r5
   4cd4c:	4628      	mov	r0, r5
   4cd4e:	491e      	ldr	r1, [pc, #120]	; (4cdc8 <parse_xmodemsleep+0xd4>)
   4cd50:	9500      	str	r5, [sp, #0]
   4cd52:	f00a fe8d 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   4cd56:	a806      	add	r0, sp, #24
   4cd58:	f00a fd5b 	bl	57812 <at_params_list_free>
	return err;
   4cd5c:	e7e6      	b.n	4cd2c <parse_xmodemsleep+0x38>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   4cd5e:	2101      	movs	r1, #1
   4cd60:	f10d 0216 	add.w	r2, sp, #22
   4cd64:	a806      	add	r0, sp, #24
   4cd66:	f00a fdee 	bl	57946 <at_params_unsigned_short_get>
	if (err) {
   4cd6a:	4604      	mov	r4, r0
   4cd6c:	b110      	cbz	r0, 4cd74 <parse_xmodemsleep+0x80>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   4cd6e:	4b18      	ldr	r3, [pc, #96]	; (4cdd0 <parse_xmodemsleep+0xdc>)
   4cd70:	9003      	str	r0, [sp, #12]
   4cd72:	e7e7      	b.n	4cd44 <parse_xmodemsleep+0x50>
	modem_sleep->type = type;
   4cd74:	f8bd 3016 	ldrh.w	r3, [sp, #22]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   4cd78:	a806      	add	r0, sp, #24
	modem_sleep->type = type;
   4cd7a:	7033      	strb	r3, [r6, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   4cd7c:	f00a fe47 	bl	57a0e <at_params_valid_count_get>
   4cd80:	2802      	cmp	r0, #2
   4cd82:	d806      	bhi.n	4cd92 <parse_xmodemsleep+0x9e>
		modem_sleep->time = -1;
   4cd84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4cd88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4cd8c:	e9c6 2302 	strd	r2, r3, [r6, #8]
		goto clean_exit;
   4cd90:	e7e1      	b.n	4cd56 <parse_xmodemsleep+0x62>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   4cd92:	2102      	movs	r1, #2
   4cd94:	f106 0208 	add.w	r2, r6, #8
   4cd98:	a806      	add	r0, sp, #24
   4cd9a:	f00a fe04 	bl	579a6 <at_params_int64_get>
	if (err) {
   4cd9e:	4605      	mov	r5, r0
   4cda0:	2800      	cmp	r0, #0
   4cda2:	d0d8      	beq.n	4cd56 <parse_xmodemsleep+0x62>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   4cda4:	4b0b      	ldr	r3, [pc, #44]	; (4cdd4 <parse_xmodemsleep+0xe0>)
   4cda6:	9003      	str	r0, [sp, #12]
   4cda8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4cdac:	4620      	mov	r0, r4
   4cdae:	4623      	mov	r3, r4
   4cdb0:	9400      	str	r4, [sp, #0]
   4cdb2:	2201      	movs	r2, #1
   4cdb4:	4904      	ldr	r1, [pc, #16]	; (4cdc8 <parse_xmodemsleep+0xd4>)
   4cdb6:	f00a fe5b 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
		goto clean_exit;
   4cdba:	462c      	mov	r4, r5
   4cdbc:	e7cb      	b.n	4cd56 <parse_xmodemsleep+0x62>
		return -EINVAL;
   4cdbe:	f06f 0415 	mvn.w	r4, #21
   4cdc2:	e7b3      	b.n	4cd2c <parse_xmodemsleep+0x38>
   4cdc4:	0005f463 	.word	0x0005f463
   4cdc8:	0005bf94 	.word	0x0005bf94
   4cdcc:	0005fc0d 	.word	0x0005fc0d
   4cdd0:	0005fc3f 	.word	0x0005fc3f
   4cdd4:	0005fc68 	.word	0x0005fc68

0004cdd8 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   4cdd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   4cdda:	460d      	mov	r5, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   4cddc:	4604      	mov	r4, r0
{
   4cdde:	b085      	sub	sp, #20
	if (at_response == NULL || modem_evt == NULL) {
   4cde0:	b318      	cbz	r0, 4ce2a <parse_mdmev+0x52>
   4cde2:	b311      	cbz	r1, 4ce2a <parse_mdmev+0x52>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   4cde4:	2108      	movs	r1, #8
   4cde6:	4a12      	ldr	r2, [pc, #72]	; (4ce30 <parse_mdmev+0x58>)
   4cde8:	f7ff f934 	bl	4c054 <response_is_valid>
   4cdec:	4603      	mov	r3, r0
   4cdee:	b958      	cbnz	r0, 4ce08 <parse_mdmev+0x30>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   4cdf0:	4a10      	ldr	r2, [pc, #64]	; (4ce34 <parse_mdmev+0x5c>)
   4cdf2:	9000      	str	r0, [sp, #0]
   4cdf4:	e9cd 0201 	strd	r0, r2, [sp, #4]
   4cdf8:	490f      	ldr	r1, [pc, #60]	; (4ce38 <parse_mdmev+0x60>)
   4cdfa:	2201      	movs	r2, #1
   4cdfc:	f00a fe38 	bl	57a70 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   4ce00:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   4ce04:	b005      	add	sp, #20
   4ce06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   4ce08:	2600      	movs	r6, #0
   4ce0a:	4f0c      	ldr	r7, [pc, #48]	; (4ce3c <parse_mdmev+0x64>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   4ce0c:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   4ce0e:	4621      	mov	r1, r4
   4ce10:	f857 0b04 	ldr.w	r0, [r7], #4
   4ce14:	f7f3 ffe4 	bl	40de0 <strcmp>
   4ce18:	b908      	cbnz	r0, 4ce1e <parse_mdmev+0x46>
			*modem_evt = i;
   4ce1a:	702e      	strb	r6, [r5, #0]
			return 0;
   4ce1c:	e7f2      	b.n	4ce04 <parse_mdmev+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   4ce1e:	3601      	adds	r6, #1
   4ce20:	2e05      	cmp	r6, #5
   4ce22:	d1f4      	bne.n	4ce0e <parse_mdmev+0x36>
	return -ENODATA;
   4ce24:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   4ce28:	e7ec      	b.n	4ce04 <parse_mdmev+0x2c>
		return -EINVAL;
   4ce2a:	f06f 0015 	mvn.w	r0, #21
   4ce2e:	e7e9      	b.n	4ce04 <parse_mdmev+0x2c>
   4ce30:	0005fc9d 	.word	0x0005fc9d
   4ce34:	0005fca6 	.word	0x0005fca6
   4ce38:	0005bf94 	.word	0x0005bf94
   4ce3c:	0005c520 	.word	0x0005c520

0004ce40 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   4ce40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   4ce42:	ab0b      	add	r3, sp, #44	; 0x2c
   4ce44:	9305      	str	r3, [sp, #20]
   4ce46:	9303      	str	r3, [sp, #12]
   4ce48:	4b05      	ldr	r3, [pc, #20]	; (4ce60 <z_log_msg_runtime_create.constprop.0+0x20>)
   4ce4a:	2201      	movs	r2, #1
   4ce4c:	9302      	str	r3, [sp, #8]
   4ce4e:	2300      	movs	r3, #0
   4ce50:	4618      	mov	r0, r3
   4ce52:	e9cd 3300 	strd	r3, r3, [sp]
   4ce56:	f7f8 f9eb 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   4ce5a:	b007      	add	sp, #28
   4ce5c:	f85d fb04 	ldr.w	pc, [sp], #4
   4ce60:	0005fd1e 	.word	0x0005fd1e

0004ce64 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   4ce64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   4ce66:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   4ce68:	f7f8 f972 	bl	45150 <z_impl_log_panic>
   4ce6c:	4b06      	ldr	r3, [pc, #24]	; (4ce88 <k_sys_fatal_error_handler+0x24>)
   4ce6e:	4620      	mov	r0, r4
   4ce70:	9302      	str	r3, [sp, #8]
   4ce72:	2201      	movs	r2, #1
   4ce74:	4623      	mov	r3, r4
   4ce76:	e9cd 4400 	strd	r4, r4, [sp]
   4ce7a:	4904      	ldr	r1, [pc, #16]	; (4ce8c <k_sys_fatal_error_handler+0x28>)
   4ce7c:	f7ff ffe0 	bl	4ce40 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   4ce80:	4620      	mov	r0, r4
   4ce82:	f7f9 fc09 	bl	46698 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   4ce86:	bf00      	nop
   4ce88:	0005fd1e 	.word	0x0005fd1e
   4ce8c:	0005bf64 	.word	0x0005bf64

0004ce90 <translate_error>:
{
	cmee_control(DISABLE);
}

static int translate_error(int err)
{
   4ce90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (err < 0) {
   4ce92:	2800      	cmp	r0, #0
   4ce94:	db1d      	blt.n	4ced2 <translate_error+0x42>
		 */
		return err;
	}

	/* In case of CME error translate to an errno value */
	switch (nrf_modem_at_err(err)) {
   4ce96:	f46f 7300 	mvn.w	r3, #512	; 0x200
 *
 * @returns int The CME or CMS error code.
 */
static inline int nrf_modem_at_err(int error)
{
	return (error & 0xff00ffff);
   4ce9a:	f420 007f 	bic.w	r0, r0, #16711680	; 0xff0000
   4ce9e:	18c2      	adds	r2, r0, r3
   4cea0:	2300      	movs	r3, #0
   4cea2:	2a0f      	cmp	r2, #15
   4cea4:	d859      	bhi.n	4cf5a <translate_error+0xca>
   4cea6:	e8df f002 	tbb	[pc, r2]
   4ceaa:	1708      	.short	0x1708
   4ceac:	31585824 	.word	0x31585824
   4ceb0:	5858583e 	.word	0x5858583e
   4ceb4:	58585858 	.word	0x58585858
   4ceb8:	4b58      	.short	0x4b58
	case 513: /* not found */
		LOG_WRN("Key not found");
   4ceba:	4a2e      	ldr	r2, [pc, #184]	; (4cf74 <translate_error+0xe4>)
   4cebc:	9300      	str	r3, [sp, #0]
   4cebe:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4cec2:	2300      	movs	r3, #0
   4cec4:	2202      	movs	r2, #2
   4cec6:	4618      	mov	r0, r3
   4cec8:	492b      	ldr	r1, [pc, #172]	; (4cf78 <translate_error+0xe8>)
   4ceca:	f00a fe23 	bl	57b14 <z_log_msg_runtime_create.constprop.0>
		return -ENOENT;
   4cece:	f06f 0001 	mvn.w	r0, #1
		 */
		LOG_ERR("Untranslated CME error %d", nrf_modem_at_err(err));
		__ASSERT(false, "Untranslated CME error %d", nrf_modem_at_err(err));
		return 0xBAADBAAD;
	}
}
   4ced2:	b005      	add	sp, #20
   4ced4:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_WRN("Key access refused");
   4ced8:	4a28      	ldr	r2, [pc, #160]	; (4cf7c <translate_error+0xec>)
   4ceda:	9300      	str	r3, [sp, #0]
   4cedc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4cee0:	2300      	movs	r3, #0
   4cee2:	2202      	movs	r2, #2
   4cee4:	4618      	mov	r0, r3
   4cee6:	4924      	ldr	r1, [pc, #144]	; (4cf78 <translate_error+0xe8>)
   4cee8:	f00a fe14 	bl	57b14 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
   4ceec:	f06f 000c 	mvn.w	r0, #12
   4cef0:	e7ef      	b.n	4ced2 <translate_error+0x42>
		LOG_WRN("Key storage memory full");
   4cef2:	4a23      	ldr	r2, [pc, #140]	; (4cf80 <translate_error+0xf0>)
   4cef4:	9300      	str	r3, [sp, #0]
   4cef6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4cefa:	2300      	movs	r3, #0
   4cefc:	2202      	movs	r2, #2
   4cefe:	4618      	mov	r0, r3
   4cf00:	491d      	ldr	r1, [pc, #116]	; (4cf78 <translate_error+0xe8>)
   4cf02:	f00a fe07 	bl	57b14 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   4cf06:	f06f 000b 	mvn.w	r0, #11
   4cf0a:	e7e2      	b.n	4ced2 <translate_error+0x42>
		LOG_WRN("Not allowed when LTE connection is active");
   4cf0c:	4a1d      	ldr	r2, [pc, #116]	; (4cf84 <translate_error+0xf4>)
   4cf0e:	9300      	str	r3, [sp, #0]
   4cf10:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4cf14:	2300      	movs	r3, #0
   4cf16:	2202      	movs	r2, #2
   4cf18:	4618      	mov	r0, r3
   4cf1a:	4917      	ldr	r1, [pc, #92]	; (4cf78 <translate_error+0xe8>)
   4cf1c:	f00a fdfa 	bl	57b14 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   4cf20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4cf24:	e7d5      	b.n	4ced2 <translate_error+0x42>
		LOG_WRN("Key already exists");
   4cf26:	4a18      	ldr	r2, [pc, #96]	; (4cf88 <translate_error+0xf8>)
   4cf28:	9300      	str	r3, [sp, #0]
   4cf2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4cf2e:	2300      	movs	r3, #0
   4cf30:	2202      	movs	r2, #2
   4cf32:	4618      	mov	r0, r3
   4cf34:	4910      	ldr	r1, [pc, #64]	; (4cf78 <translate_error+0xe8>)
   4cf36:	f00a fded 	bl	57b14 <z_log_msg_runtime_create.constprop.0>
		return -EALREADY;
   4cf3a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   4cf3e:	e7c8      	b.n	4ced2 <translate_error+0x42>
		LOG_WRN("Not allowed when power off warning is active");
   4cf40:	4a12      	ldr	r2, [pc, #72]	; (4cf8c <translate_error+0xfc>)
   4cf42:	9300      	str	r3, [sp, #0]
   4cf44:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4cf48:	2300      	movs	r3, #0
   4cf4a:	2202      	movs	r2, #2
   4cf4c:	4618      	mov	r0, r3
   4cf4e:	490a      	ldr	r1, [pc, #40]	; (4cf78 <translate_error+0xe8>)
   4cf50:	f00a fde0 	bl	57b14 <z_log_msg_runtime_create.constprop.0>
		return -ECANCELED;
   4cf54:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   4cf58:	e7bb      	b.n	4ced2 <translate_error+0x42>
		LOG_ERR("Untranslated CME error %d", nrf_modem_at_err(err));
   4cf5a:	4a0d      	ldr	r2, [pc, #52]	; (4cf90 <translate_error+0x100>)
   4cf5c:	9300      	str	r3, [sp, #0]
   4cf5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   4cf62:	2300      	movs	r3, #0
   4cf64:	9003      	str	r0, [sp, #12]
   4cf66:	2201      	movs	r2, #1
   4cf68:	4618      	mov	r0, r3
   4cf6a:	4903      	ldr	r1, [pc, #12]	; (4cf78 <translate_error+0xe8>)
   4cf6c:	f00a fdd2 	bl	57b14 <z_log_msg_runtime_create.constprop.0>
		return 0xBAADBAAD;
   4cf70:	4808      	ldr	r0, [pc, #32]	; (4cf94 <translate_error+0x104>)
   4cf72:	e7ae      	b.n	4ced2 <translate_error+0x42>
   4cf74:	0005fd3b 	.word	0x0005fd3b
   4cf78:	0005bfac 	.word	0x0005bfac
   4cf7c:	0005fd49 	.word	0x0005fd49
   4cf80:	0005fd5c 	.word	0x0005fd5c
   4cf84:	0005fd74 	.word	0x0005fd74
   4cf88:	0005fd9e 	.word	0x0005fd9e
   4cf8c:	0005fdb1 	.word	0x0005fdb1
   4cf90:	0005fdde 	.word	0x0005fdde
   4cf94:	baadbaad 	.word	0xbaadbaad

0004cf98 <cmee_enable>:
{
   4cf98:	b510      	push	{r4, lr}
   4cf9a:	b086      	sub	sp, #24
   4cf9c:	4604      	mov	r4, r0
	err = nrf_modem_at_scanf("AT+CMEE?", "+CMEE: %d", &active);
   4cf9e:	4911      	ldr	r1, [pc, #68]	; (4cfe4 <cmee_enable+0x4c>)
   4cfa0:	4811      	ldr	r0, [pc, #68]	; (4cfe8 <cmee_enable+0x50>)
   4cfa2:	aa05      	add	r2, sp, #20
   4cfa4:	f004 fbda 	bl	5175c <nrf_modem_at_scanf>
	if (err < 0) {
   4cfa8:	2800      	cmp	r0, #0
   4cfaa:	da13      	bge.n	4cfd4 <cmee_enable+0x3c>
		LOG_WRN("Failed to retrieve CMEE status, err %d", err);
   4cfac:	4b0f      	ldr	r3, [pc, #60]	; (4cfec <cmee_enable+0x54>)
   4cfae:	9003      	str	r0, [sp, #12]
   4cfb0:	9302      	str	r3, [sp, #8]
   4cfb2:	2300      	movs	r3, #0
   4cfb4:	2202      	movs	r2, #2
   4cfb6:	4618      	mov	r0, r3
   4cfb8:	e9cd 3300 	strd	r3, r3, [sp]
   4cfbc:	490c      	ldr	r1, [pc, #48]	; (4cff0 <cmee_enable+0x58>)
   4cfbe:	f00a fda9 	bl	57b14 <z_log_msg_runtime_create.constprop.0>
		*was_enabled = false;
   4cfc2:	2300      	movs	r3, #0
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   4cfc4:	2101      	movs	r1, #1
   4cfc6:	480b      	ldr	r0, [pc, #44]	; (4cff4 <cmee_enable+0x5c>)
		*was_enabled = false;
   4cfc8:	7023      	strb	r3, [r4, #0]
}
   4cfca:	b006      	add	sp, #24
   4cfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   4cfd0:	f004 bae0 	b.w	51594 <nrf_modem_at_printf>
	return active ? true : false;
   4cfd4:	9b05      	ldr	r3, [sp, #20]
	if (!cmee_is_active()) {
   4cfd6:	2b00      	cmp	r3, #0
   4cfd8:	d0f3      	beq.n	4cfc2 <cmee_enable+0x2a>
		*was_enabled = true;
   4cfda:	2301      	movs	r3, #1
   4cfdc:	7023      	strb	r3, [r4, #0]
}
   4cfde:	b006      	add	sp, #24
   4cfe0:	bd10      	pop	{r4, pc}
   4cfe2:	bf00      	nop
   4cfe4:	0005fdf8 	.word	0x0005fdf8
   4cfe8:	0005fe02 	.word	0x0005fe02
   4cfec:	0005fe0b 	.word	0x0005fe0b
   4cff0:	0005bfac 	.word	0x0005bfac
   4cff4:	0005fe32 	.word	0x0005fe32

0004cff8 <cmee_disable>:
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   4cff8:	2100      	movs	r1, #0
   4cffa:	4801      	ldr	r0, [pc, #4]	; (4d000 <cmee_disable+0x8>)
   4cffc:	f004 baca 	b.w	51594 <nrf_modem_at_printf>
   4d000:	0005fe32 	.word	0x0005fe32

0004d004 <modem_key_mgmt_write>:
}

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgmt_cred_type cred_type,
			 const void *buf, size_t len)
{
   4d004:	b5f0      	push	{r4, r5, r6, r7, lr}
   4d006:	4606      	mov	r6, r0
   4d008:	460f      	mov	r7, r1
   4d00a:	461c      	mov	r4, r3
	int err;
	bool cmee_was_enabled;

	if (buf == NULL || len == 0) {
   4d00c:	4615      	mov	r5, r2
{
   4d00e:	b085      	sub	sp, #20
	if (buf == NULL || len == 0) {
   4d010:	b1c2      	cbz	r2, 4d044 <modem_key_mgmt_write+0x40>
   4d012:	b1bb      	cbz	r3, 4d044 <modem_key_mgmt_write+0x40>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_enabled);
   4d014:	f10d 000f 	add.w	r0, sp, #15
   4d018:	f7ff ffbe 	bl	4cf98 <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=0,%u,%d,\"%.*s\"",
   4d01c:	4623      	mov	r3, r4
   4d01e:	463a      	mov	r2, r7
   4d020:	4631      	mov	r1, r6
   4d022:	480b      	ldr	r0, [pc, #44]	; (4d050 <modem_key_mgmt_write+0x4c>)
   4d024:	9500      	str	r5, [sp, #0]
   4d026:	f004 fab5 	bl	51594 <nrf_modem_at_printf>
				  sec_tag, cred_type, len, (const char *)buf);

	if (!cmee_was_enabled) {
   4d02a:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_printf("AT%%CMNG=0,%u,%d,\"%.*s\"",
   4d02e:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   4d030:	b90b      	cbnz	r3, 4d036 <modem_key_mgmt_write+0x32>
		cmee_disable();
   4d032:	f7ff ffe1 	bl	4cff8 <cmee_disable>
	}

	if (err) {
   4d036:	b13c      	cbz	r4, 4d048 <modem_key_mgmt_write+0x44>
		return translate_error(err);
   4d038:	4620      	mov	r0, r4
	}

	return 0;
}
   4d03a:	b005      	add	sp, #20
   4d03c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return translate_error(err);
   4d040:	f7ff bf26 	b.w	4ce90 <translate_error>
		return -EINVAL;
   4d044:	f06f 0415 	mvn.w	r4, #21
}
   4d048:	4620      	mov	r0, r4
   4d04a:	b005      	add	sp, #20
   4d04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4d04e:	bf00      	nop
   4d050:	0005fe3d 	.word	0x0005fe3d

0004d054 <modem_key_mgmt_delete>:
	return 0;
}

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type)
{
   4d054:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4d056:	4604      	mov	r4, r0
   4d058:	460d      	mov	r5, r1
	int err;
	bool cmee_was_enabled;

	cmee_enable(&cmee_was_enabled);
   4d05a:	f10d 0007 	add.w	r0, sp, #7
   4d05e:	f7ff ff9b 	bl	4cf98 <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=3,%u,%d", sec_tag, cred_type);
   4d062:	4621      	mov	r1, r4
   4d064:	462a      	mov	r2, r5
   4d066:	4809      	ldr	r0, [pc, #36]	; (4d08c <modem_key_mgmt_delete+0x38>)
   4d068:	f004 fa94 	bl	51594 <nrf_modem_at_printf>

	if (!cmee_was_enabled) {
   4d06c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	err = nrf_modem_at_printf("AT%%CMNG=3,%u,%d", sec_tag, cred_type);
   4d070:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   4d072:	b90b      	cbnz	r3, 4d078 <modem_key_mgmt_delete+0x24>
		cmee_disable();
   4d074:	f7ff ffc0 	bl	4cff8 <cmee_disable>
	}

	if (err) {
		return translate_error(err);
   4d078:	4620      	mov	r0, r4
	if (err) {
   4d07a:	b124      	cbz	r4, 4d086 <modem_key_mgmt_delete+0x32>
	}

	return 0;
}
   4d07c:	b003      	add	sp, #12
   4d07e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return translate_error(err);
   4d082:	f7ff bf05 	b.w	4ce90 <translate_error>
}
   4d086:	b003      	add	sp, #12
   4d088:	bd30      	pop	{r4, r5, pc}
   4d08a:	bf00      	nop
   4d08c:	0005fe55 	.word	0x0005fe55

0004d090 <modem_key_mgmt_exists>:

int modem_key_mgmt_exists(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type,
			  bool *exists)
{
   4d090:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   4d092:	4604      	mov	r4, r0
   4d094:	460d      	mov	r5, r1
	int err;
	bool cmee_was_active;

	if (exists == NULL) {
   4d096:	4616      	mov	r6, r2
   4d098:	b34a      	cbz	r2, 4d0ee <modem_key_mgmt_exists+0x5e>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_active);
   4d09a:	f10d 000f 	add.w	r0, sp, #15
   4d09e:	f7ff ff7b 	bl	4cf98 <cmee_enable>

	scratch_buf[0] = '\0';
   4d0a2:	2300      	movs	r3, #0
   4d0a4:	4813      	ldr	r0, [pc, #76]	; (4d0f4 <modem_key_mgmt_exists+0x64>)
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   4d0a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	scratch_buf[0] = '\0';
   4d0aa:	7003      	strb	r3, [r0, #0]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   4d0ac:	4a12      	ldr	r2, [pc, #72]	; (4d0f8 <modem_key_mgmt_exists+0x68>)
   4d0ae:	4623      	mov	r3, r4
   4d0b0:	9500      	str	r5, [sp, #0]
   4d0b2:	f004 fab7 	bl	51624 <nrf_modem_at_cmd>
			       "AT%%CMNG=1,%u,%d", sec_tag, cred_type);

	if (!cmee_was_active) {
   4d0b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   4d0ba:	4604      	mov	r4, r0
	if (!cmee_was_active) {
   4d0bc:	b90b      	cbnz	r3, 4d0c2 <modem_key_mgmt_exists+0x32>
		cmee_disable();
   4d0be:	f7ff ff9b 	bl	4cff8 <cmee_disable>
	}

	if (err) {
   4d0c2:	b12c      	cbz	r4, 4d0d0 <modem_key_mgmt_exists+0x40>
		return translate_error(err);
   4d0c4:	4620      	mov	r0, r4
	} else {
		*exists = false;
	}

	return 0;
}
   4d0c6:	b004      	add	sp, #16
   4d0c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return translate_error(err);
   4d0cc:	f7ff bee0 	b.w	4ce90 <translate_error>
	if (strlen(scratch_buf) > strlen("OK\r\n")) {
   4d0d0:	4808      	ldr	r0, [pc, #32]	; (4d0f4 <modem_key_mgmt_exists+0x64>)
   4d0d2:	f7f3 fe8f 	bl	40df4 <strlen>
   4d0d6:	4605      	mov	r5, r0
   4d0d8:	4808      	ldr	r0, [pc, #32]	; (4d0fc <modem_key_mgmt_exists+0x6c>)
   4d0da:	f7f3 fe8b 	bl	40df4 <strlen>
   4d0de:	4285      	cmp	r5, r0
   4d0e0:	bf94      	ite	ls
   4d0e2:	2500      	movls	r5, #0
   4d0e4:	2501      	movhi	r5, #1
   4d0e6:	7035      	strb	r5, [r6, #0]
}
   4d0e8:	4620      	mov	r0, r4
   4d0ea:	b004      	add	sp, #16
   4d0ec:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   4d0ee:	f06f 0415 	mvn.w	r4, #21
   4d0f2:	e7f9      	b.n	4d0e8 <modem_key_mgmt_exists+0x58>
   4d0f4:	2001f3cd 	.word	0x2001f3cd
   4d0f8:	0005fe66 	.word	0x0005fe66
   4d0fc:	0005eb45 	.word	0x0005eb45

0004d100 <multicell_location_provision_certificate>:

	return 0;
}

int multicell_location_provision_certificate(bool overwrite)
{
   4d100:	b570      	push	{r4, r5, r6, lr}
   4d102:	4605      	mov	r5, r0
   4d104:	b086      	sub	sp, #24
	int ret = -ENOTSUP;

#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	ret = multicell_location_provision_service_certificate(
   4d106:	2001      	movs	r0, #1
   4d108:	f00a fd22 	bl	57b50 <location_service_get_certificate>
	if (certificate == NULL) {
   4d10c:	4606      	mov	r6, r0
   4d10e:	b968      	cbnz	r0, 4d12c <multicell_location_provision_certificate+0x2c>
		LOG_ERR("No certificate was provided by the location service");
   4d110:	4b2d      	ldr	r3, [pc, #180]	; (4d1c8 <multicell_location_provision_certificate+0xc8>)
   4d112:	2201      	movs	r2, #1
   4d114:	e9cd 0301 	strd	r0, r3, [sp, #4]
   4d118:	492c      	ldr	r1, [pc, #176]	; (4d1cc <multicell_location_provision_certificate+0xcc>)
   4d11a:	4603      	mov	r3, r0
   4d11c:	9000      	str	r0, [sp, #0]
   4d11e:	f00a fd08 	bl	57b32 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   4d122:	f06f 040d 	mvn.w	r4, #13
	if (ret) {
		return ret;
	}
#endif
	return ret;
}
   4d126:	4620      	mov	r0, r4
   4d128:	b006      	add	sp, #24
   4d12a:	bd70      	pop	{r4, r5, r6, pc}
	err = modem_key_mgmt_exists(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, &exists);
   4d12c:	2100      	movs	r1, #0
   4d12e:	4828      	ldr	r0, [pc, #160]	; (4d1d0 <multicell_location_provision_certificate+0xd0>)
   4d130:	f10d 0217 	add.w	r2, sp, #23
   4d134:	f7ff ffac 	bl	4d090 <modem_key_mgmt_exists>
	if (err) {
   4d138:	4604      	mov	r4, r0
   4d13a:	b158      	cbz	r0, 4d154 <multicell_location_provision_certificate+0x54>
		LOG_ERR("Failed to check for certificates err %d", err);
   4d13c:	4b25      	ldr	r3, [pc, #148]	; (4d1d4 <multicell_location_provision_certificate+0xd4>)
   4d13e:	9003      	str	r0, [sp, #12]
   4d140:	9302      	str	r3, [sp, #8]
   4d142:	2300      	movs	r3, #0
   4d144:	2201      	movs	r2, #1
   4d146:	4618      	mov	r0, r3
   4d148:	e9cd 3300 	strd	r3, r3, [sp]
   4d14c:	491f      	ldr	r1, [pc, #124]	; (4d1cc <multicell_location_provision_certificate+0xcc>)
   4d14e:	f00a fcf0 	bl	57b32 <z_log_msg_runtime_create.constprop.0>
		return err;
   4d152:	e7e8      	b.n	4d126 <multicell_location_provision_certificate+0x26>
	if (exists && overwrite) {
   4d154:	f89d 3017 	ldrb.w	r3, [sp, #23]
   4d158:	b18b      	cbz	r3, 4d17e <multicell_location_provision_certificate+0x7e>
   4d15a:	2d00      	cmp	r5, #0
   4d15c:	d0e3      	beq.n	4d126 <multicell_location_provision_certificate+0x26>
		err = modem_key_mgmt_delete(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN);
   4d15e:	4601      	mov	r1, r0
   4d160:	481b      	ldr	r0, [pc, #108]	; (4d1d0 <multicell_location_provision_certificate+0xd0>)
   4d162:	f7ff ff77 	bl	4d054 <modem_key_mgmt_delete>
		if (err) {
   4d166:	b150      	cbz	r0, 4d17e <multicell_location_provision_certificate+0x7e>
			LOG_ERR("Failed to delete existing certificate, err %d", err);
   4d168:	4b1b      	ldr	r3, [pc, #108]	; (4d1d8 <multicell_location_provision_certificate+0xd8>)
   4d16a:	9003      	str	r0, [sp, #12]
   4d16c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4d170:	2201      	movs	r2, #1
   4d172:	4623      	mov	r3, r4
   4d174:	4620      	mov	r0, r4
   4d176:	4915      	ldr	r1, [pc, #84]	; (4d1cc <multicell_location_provision_certificate+0xcc>)
   4d178:	9400      	str	r4, [sp, #0]
   4d17a:	f00a fcda 	bl	57b32 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("Provisioning certificate");
   4d17e:	2500      	movs	r5, #0
   4d180:	4b16      	ldr	r3, [pc, #88]	; (4d1dc <multicell_location_provision_certificate+0xdc>)
   4d182:	2203      	movs	r2, #3
   4d184:	4911      	ldr	r1, [pc, #68]	; (4d1cc <multicell_location_provision_certificate+0xcc>)
   4d186:	4628      	mov	r0, r5
   4d188:	9302      	str	r3, [sp, #8]
   4d18a:	e9cd 5500 	strd	r5, r5, [sp]
   4d18e:	462b      	mov	r3, r5
   4d190:	f00a fccf 	bl	57b32 <z_log_msg_runtime_create.constprop.0>
	err = modem_key_mgmt_write(sec_tag,
   4d194:	4630      	mov	r0, r6
   4d196:	f7f3 fe2d 	bl	40df4 <strlen>
   4d19a:	4632      	mov	r2, r6
   4d19c:	4603      	mov	r3, r0
   4d19e:	4629      	mov	r1, r5
   4d1a0:	480b      	ldr	r0, [pc, #44]	; (4d1d0 <multicell_location_provision_certificate+0xd0>)
   4d1a2:	f7ff ff2f 	bl	4d004 <modem_key_mgmt_write>
	if (err) {
   4d1a6:	4606      	mov	r6, r0
   4d1a8:	2800      	cmp	r0, #0
   4d1aa:	d0bc      	beq.n	4d126 <multicell_location_provision_certificate+0x26>
		LOG_ERR("Failed to provision certificate, err %d", err);
   4d1ac:	4b0c      	ldr	r3, [pc, #48]	; (4d1e0 <multicell_location_provision_certificate+0xe0>)
   4d1ae:	9003      	str	r0, [sp, #12]
   4d1b0:	e9cd 5301 	strd	r5, r3, [sp, #4]
   4d1b4:	2201      	movs	r2, #1
   4d1b6:	462b      	mov	r3, r5
   4d1b8:	4628      	mov	r0, r5
   4d1ba:	4904      	ldr	r1, [pc, #16]	; (4d1cc <multicell_location_provision_certificate+0xcc>)
   4d1bc:	9500      	str	r5, [sp, #0]
   4d1be:	f00a fcb8 	bl	57b32 <z_log_msg_runtime_create.constprop.0>
		return err;
   4d1c2:	4634      	mov	r4, r6
   4d1c4:	e7af      	b.n	4d126 <multicell_location_provision_certificate+0x26>
   4d1c6:	bf00      	nop
   4d1c8:	0005fe86 	.word	0x0005fe86
   4d1cc:	0005bfbc 	.word	0x0005bfbc
   4d1d0:	01010001 	.word	0x01010001
   4d1d4:	0005feba 	.word	0x0005feba
   4d1d8:	0005fee2 	.word	0x0005fee2
   4d1dc:	0005ff10 	.word	0x0005ff10
   4d1e0:	0005ff29 	.word	0x0005ff29

0004d1e4 <location_service_get_certificate_nrf_cloud>:
	"-----END CERTIFICATE-----\n";

const char *location_service_get_certificate_nrf_cloud(void)
{
	return tls_certificate;
}
   4d1e4:	4800      	ldr	r0, [pc, #0]	; (4d1e8 <location_service_get_certificate_nrf_cloud+0x4>)
   4d1e6:	4770      	bx	lr
   4d1e8:	0005ff64 	.word	0x0005ff64

0004d1ec <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
   4d1ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (ret != 0) {
   4d1ee:	4604      	mov	r4, r0
   4d1f0:	bb38      	cbnz	r0, 4d242 <on_modem_lib_init+0x56>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   4d1f2:	4815      	ldr	r0, [pc, #84]	; (4d248 <on_modem_lib_init+0x5c>)
   4d1f4:	f7f3 fdfe 	bl	40df4 <strlen>
   4d1f8:	b178      	cbz	r0, 4d21a <on_modem_lib_init+0x2e>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   4d1fa:	4913      	ldr	r1, [pc, #76]	; (4d248 <on_modem_lib_init+0x5c>)
   4d1fc:	4813      	ldr	r0, [pc, #76]	; (4d24c <on_modem_lib_init+0x60>)
   4d1fe:	f004 f9c9 	bl	51594 <nrf_modem_at_printf>
		if (err) {
   4d202:	b150      	cbz	r0, 4d21a <on_modem_lib_init+0x2e>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   4d204:	4b12      	ldr	r3, [pc, #72]	; (4d250 <on_modem_lib_init+0x64>)
   4d206:	9003      	str	r0, [sp, #12]
   4d208:	e9cd 4301 	strd	r4, r3, [sp, #4]
   4d20c:	2201      	movs	r2, #1
   4d20e:	4623      	mov	r3, r4
   4d210:	4620      	mov	r0, r4
   4d212:	4910      	ldr	r1, [pc, #64]	; (4d254 <on_modem_lib_init+0x68>)
   4d214:	9400      	str	r4, [sp, #0]
   4d216:	f00a fca1 	bl	57b5c <z_log_msg_runtime_create.constprop.0>
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
   4d21a:	480f      	ldr	r0, [pc, #60]	; (4d258 <on_modem_lib_init+0x6c>)
   4d21c:	f7f3 fdea 	bl	40df4 <strlen>
   4d220:	b178      	cbz	r0, 4d242 <on_modem_lib_init+0x56>
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   4d222:	490d      	ldr	r1, [pc, #52]	; (4d258 <on_modem_lib_init+0x6c>)
   4d224:	4809      	ldr	r0, [pc, #36]	; (4d24c <on_modem_lib_init+0x60>)
   4d226:	f004 f9b5 	bl	51594 <nrf_modem_at_printf>
		if (err) {
   4d22a:	b150      	cbz	r0, 4d242 <on_modem_lib_init+0x56>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   4d22c:	4b0b      	ldr	r3, [pc, #44]	; (4d25c <on_modem_lib_init+0x70>)
   4d22e:	9003      	str	r0, [sp, #12]
   4d230:	9302      	str	r3, [sp, #8]
   4d232:	2300      	movs	r3, #0
   4d234:	2201      	movs	r2, #1
   4d236:	4618      	mov	r0, r3
   4d238:	e9cd 3300 	strd	r3, r3, [sp]
   4d23c:	4905      	ldr	r1, [pc, #20]	; (4d254 <on_modem_lib_init+0x68>)
   4d23e:	f00a fc8d 	bl	57b5c <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   4d242:	b004      	add	sp, #16
   4d244:	bd10      	pop	{r4, pc}
   4d246:	bf00      	nop
   4d248:	000605c8 	.word	0x000605c8
   4d24c:	0005d362 	.word	0x0005d362
   4d250:	000605e7 	.word	0x000605e7
   4d254:	0005bfa4 	.word	0x0005bfa4
   4d258:	00060614 	.word	0x00060614
   4d25c:	0006062c 	.word	0x0006062c

0004d260 <on_modem_lib_init>:
/* Initialized to value different than success (0) */
static int modem_lib_init_result = -1;

static void on_modem_lib_init(int ret, void *ctx)
{
	modem_lib_init_result = ret;
   4d260:	4b01      	ldr	r3, [pc, #4]	; (4d268 <on_modem_lib_init+0x8>)
   4d262:	6018      	str	r0, [r3, #0]
}
   4d264:	4770      	bx	lr
   4d266:	bf00      	nop
   4d268:	2001a78c 	.word	0x2001a78c

0004d26c <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   4d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4d270:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   4d272:	4b15      	ldr	r3, [pc, #84]	; (4d2c8 <tfm_ns_interface_dispatch+0x5c>)
   4d274:	4604      	mov	r4, r0
   4d276:	f893 8000 	ldrb.w	r8, [r3]
   4d27a:	460d      	mov	r5, r1
   4d27c:	4616      	mov	r6, r2
   4d27e:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   4d280:	f1b8 0f00 	cmp.w	r8, #0
   4d284:	d115      	bne.n	4d2b2 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   4d286:	4668      	mov	r0, sp
   4d288:	f008 fee5 	bl	56056 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   4d28c:	463a      	mov	r2, r7
   4d28e:	4631      	mov	r1, r6
   4d290:	4628      	mov	r0, r5
   4d292:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   4d294:	47a0      	blx	r4
   4d296:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   4d298:	4668      	mov	r0, sp
   4d29a:	f008 fef4 	bl	56086 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   4d29e:	f1b8 0f00 	cmp.w	r8, #0
   4d2a2:	d002      	beq.n	4d2aa <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   4d2a4:	4809      	ldr	r0, [pc, #36]	; (4d2cc <tfm_ns_interface_dispatch+0x60>)
   4d2a6:	f005 f9af 	bl	52608 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   4d2aa:	4620      	mov	r0, r4
   4d2ac:	b022      	add	sp, #136	; 0x88
   4d2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   4d2b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4d2b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4d2ba:	4804      	ldr	r0, [pc, #16]	; (4d2cc <tfm_ns_interface_dispatch+0x60>)
   4d2bc:	f005 f92a 	bl	52514 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   4d2c0:	2800      	cmp	r0, #0
   4d2c2:	d0e0      	beq.n	4d286 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   4d2c4:	241f      	movs	r4, #31
   4d2c6:	e7f0      	b.n	4d2aa <tfm_ns_interface_dispatch+0x3e>
   4d2c8:	2002083d 	.word	0x2002083d
   4d2cc:	2001abd4 	.word	0x2001abd4

0004d2d0 <psa_destroy_key>:

    return status;
}

psa_status_t psa_destroy_key(psa_key_id_t key)
{
   4d2d0:	b510      	push	{r4, lr}
   4d2d2:	b092      	sub	sp, #72	; 0x48
   4d2d4:	4604      	mov	r4, r0
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d2d6:	2230      	movs	r2, #48	; 0x30
   4d2d8:	2100      	movs	r1, #0
   4d2da:	a806      	add	r0, sp, #24
   4d2dc:	f00d fe3c 	bl	5af58 <memset>
   4d2e0:	2305      	movs	r3, #5
   4d2e2:	9305      	str	r3, [sp, #20]
        .srv_id = TFM_CRYPTO_DESTROY_KEY_SID,
        .key_id = key,
    };
    psa_invec in_vec[] = {
   4d2e4:	ab05      	add	r3, sp, #20
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_destroy_key,
   4d2e6:	2100      	movs	r1, #0
    psa_invec in_vec[] = {
   4d2e8:	9303      	str	r3, [sp, #12]
   4d2ea:	2334      	movs	r3, #52	; 0x34
    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_destroy_key,
   4d2ec:	e9cd 1100 	strd	r1, r1, [sp]
    psa_invec in_vec[] = {
   4d2f0:	9304      	str	r3, [sp, #16]
    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_destroy_key,
   4d2f2:	aa03      	add	r2, sp, #12
   4d2f4:	2301      	movs	r3, #1
   4d2f6:	4803      	ldr	r0, [pc, #12]	; (4d304 <psa_destroy_key+0x34>)
    struct tfm_crypto_pack_iovec iov = {
   4d2f8:	9407      	str	r4, [sp, #28]
    status = API_DISPATCH_NO_OUTVEC(tfm_crypto_destroy_key,
   4d2fa:	f000 f929 	bl	4d550 <psa_call>
                                    TFM_CRYPTO_DESTROY_KEY);

    return status;
}
   4d2fe:	b012      	add	sp, #72	; 0x48
   4d300:	bd10      	pop	{r4, pc}
   4d302:	bf00      	nop
   4d304:	40000100 	.word	0x40000100

0004d308 <psa_reset_key_attributes>:
                          TFM_CRYPTO_GET_KEY_ATTRIBUTES);
    return status;
}

void psa_reset_key_attributes(psa_key_attributes_t *attributes)
{
   4d308:	b510      	push	{r4, lr}
   4d30a:	b094      	sub	sp, #80	; 0x50
   4d30c:	4604      	mov	r4, r0
    struct tfm_crypto_pack_iovec iov = {
   4d30e:	2230      	movs	r2, #48	; 0x30
   4d310:	2100      	movs	r1, #0
   4d312:	a808      	add	r0, sp, #32
   4d314:	f00d fe20 	bl	5af58 <memset>
        .srv_id = TFM_CRYPTO_RESET_KEY_ATTRIBUTES_SID,
    };
    psa_invec in_vec[] = {
   4d318:	aa07      	add	r2, sp, #28
   4d31a:	9203      	str	r2, [sp, #12]
   4d31c:	2234      	movs	r2, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
   4d31e:	e9cd 2404 	strd	r2, r4, [sp, #16]
   4d322:	2214      	movs	r2, #20
    struct tfm_crypto_pack_iovec iov = {
   4d324:	2301      	movs	r3, #1
    psa_outvec out_vec[] = {
   4d326:	9206      	str	r2, [sp, #24]
        {.base = attributes, .len = sizeof(psa_key_attributes_t)},
    };

    (void)API_DISPATCH(tfm_crypto_reset_key_attributes,
   4d328:	446a      	add	r2, sp
   4d32a:	9200      	str	r2, [sp, #0]
   4d32c:	2100      	movs	r1, #0
   4d32e:	9301      	str	r3, [sp, #4]
   4d330:	aa03      	add	r2, sp, #12
   4d332:	4803      	ldr	r0, [pc, #12]	; (4d340 <psa_reset_key_attributes+0x38>)
    struct tfm_crypto_pack_iovec iov = {
   4d334:	9307      	str	r3, [sp, #28]
    (void)API_DISPATCH(tfm_crypto_reset_key_attributes,
   4d336:	f000 f90b 	bl	4d550 <psa_call>
                       TFM_CRYPTO_RESET_KEY_ATTRIBUTES);
    return;
}
   4d33a:	b014      	add	sp, #80	; 0x50
   4d33c:	bd10      	pop	{r4, pc}
   4d33e:	bf00      	nop
   4d340:	40000100 	.word	0x40000100

0004d344 <psa_export_key>:

psa_status_t psa_export_key(psa_key_id_t key,
                            uint8_t *data,
                            size_t data_size,
                            size_t *data_length)
{
   4d344:	b5f0      	push	{r4, r5, r6, r7, lr}
   4d346:	b095      	sub	sp, #84	; 0x54
   4d348:	4607      	mov	r7, r0
   4d34a:	460e      	mov	r6, r1
   4d34c:	4615      	mov	r5, r2
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d34e:	2100      	movs	r1, #0
   4d350:	2230      	movs	r2, #48	; 0x30
   4d352:	a808      	add	r0, sp, #32
{
   4d354:	461c      	mov	r4, r3
    struct tfm_crypto_pack_iovec iov = {
   4d356:	f00d fdff 	bl	5af58 <memset>
   4d35a:	2306      	movs	r3, #6
   4d35c:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_EXPORT_KEY_SID,
        .key_id = key,
    };
    psa_invec in_vec[] = {
   4d35e:	ab07      	add	r3, sp, #28
   4d360:	9303      	str	r3, [sp, #12]
   4d362:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };
    psa_outvec out_vec[] = {
   4d364:	e9cd 3604 	strd	r3, r6, [sp, #16]
        {.base = data, .len = data_size}
    };

    status = API_DISPATCH(tfm_crypto_export_key,
   4d368:	2301      	movs	r3, #1
   4d36a:	aa05      	add	r2, sp, #20
   4d36c:	9301      	str	r3, [sp, #4]
   4d36e:	9200      	str	r2, [sp, #0]
   4d370:	2100      	movs	r1, #0
   4d372:	aa03      	add	r2, sp, #12
   4d374:	4804      	ldr	r0, [pc, #16]	; (4d388 <psa_export_key+0x44>)
    struct tfm_crypto_pack_iovec iov = {
   4d376:	9709      	str	r7, [sp, #36]	; 0x24
    psa_outvec out_vec[] = {
   4d378:	9506      	str	r5, [sp, #24]
    status = API_DISPATCH(tfm_crypto_export_key,
   4d37a:	f000 f8e9 	bl	4d550 <psa_call>
                          TFM_CRYPTO_EXPORT_KEY);

    *data_length = out_vec[0].len;
   4d37e:	9b06      	ldr	r3, [sp, #24]
   4d380:	6023      	str	r3, [r4, #0]

    return status;
}
   4d382:	b015      	add	sp, #84	; 0x54
   4d384:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4d386:	bf00      	nop
   4d388:	40000100 	.word	0x40000100

0004d38c <psa_aead_encrypt>:
                              const uint8_t *plaintext,
                              size_t plaintext_length,
                              uint8_t *ciphertext,
                              size_t ciphertext_size,
                              size_t *ciphertext_length)
{
   4d38c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4d390:	4614      	mov	r4, r2
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d392:	2230      	movs	r2, #48	; 0x30
{
   4d394:	b099      	sub	sp, #100	; 0x64
   4d396:	4680      	mov	r8, r0
   4d398:	e9dd 6920 	ldrd	r6, r9, [sp, #128]	; 0x80
   4d39c:	460f      	mov	r7, r1
    struct tfm_crypto_pack_iovec iov = {
   4d39e:	eb0d 0002 	add.w	r0, sp, r2
   4d3a2:	2100      	movs	r1, #0
{
   4d3a4:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
   4d3a6:	f00d fdd7 	bl	5af58 <memset>
   4d3aa:	2323      	movs	r3, #35	; 0x23
   4d3ac:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
   4d3b0:	930b      	str	r3, [sp, #44]	; 0x2c
        .alg = alg,
        .aead_in = {.nonce = {0}, .nonce_length = 0}
    };

    /* Sanitize the optional input */
    if ((additional_data == NULL) && (additional_data_length != 0)) {
   4d3b2:	b93e      	cbnz	r6, 4d3c4 <psa_aead_encrypt+0x38>
   4d3b4:	f1b9 0f00 	cmp.w	r9, #0
   4d3b8:	d004      	beq.n	4d3c4 <psa_aead_encrypt+0x38>
        return PSA_ERROR_INVALID_ARGUMENT;
   4d3ba:	f06f 0086 	mvn.w	r0, #134	; 0x86
                      out_vec, IOVEC_LEN(out_vec));

    *ciphertext_length = out_vec[0].len;

    return status;
}
   4d3be:	b019      	add	sp, #100	; 0x64
   4d3c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    psa_invec in_vec[] = {
   4d3c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
   4d3c6:	2d10      	cmp	r5, #16
    psa_invec in_vec[] = {
   4d3c8:	9307      	str	r3, [sp, #28]
   4d3ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   4d3cc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   4d3d0:	e9cd 3608 	strd	r3, r6, [sp, #32]
    psa_outvec out_vec[] = {
   4d3d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   4d3d6:	9303      	str	r3, [sp, #12]
   4d3d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   4d3da:	9304      	str	r3, [sp, #16]
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
   4d3dc:	d8ed      	bhi.n	4d3ba <psa_aead_encrypt+0x2e>
    if (nonce != NULL) {
   4d3de:	b134      	cbz	r4, 4d3ee <psa_aead_encrypt+0x62>
   4d3e0:	4622      	mov	r2, r4
   4d3e2:	f10d 034b 	add.w	r3, sp, #75	; 0x4b
   4d3e6:	1961      	adds	r1, r4, r5
        for (size_t idx = 0; idx < nonce_length; idx++) {
   4d3e8:	428a      	cmp	r2, r1
   4d3ea:	d115      	bne.n	4d418 <psa_aead_encrypt+0x8c>
        iov.aead_in.nonce_length = nonce_length;
   4d3ec:	9517      	str	r5, [sp, #92]	; 0x5c
    in_vec[0].base = &iov;
   4d3ee:	ab0b      	add	r3, sp, #44	; 0x2c
   4d3f0:	9305      	str	r3, [sp, #20]
    in_vec[0].len = sizeof(struct tfm_crypto_pack_iovec);
   4d3f2:	2334      	movs	r3, #52	; 0x34
   4d3f4:	9306      	str	r3, [sp, #24]
    status = psa_call(TFM_CRYPTO_HANDLE, PSA_IPC_CALL, in_vec, in_len,
   4d3f6:	2301      	movs	r3, #1
    size_t in_len = IOVEC_LEN(in_vec);
   4d3f8:	2e00      	cmp	r6, #0
    status = psa_call(TFM_CRYPTO_HANDLE, PSA_IPC_CALL, in_vec, in_len,
   4d3fa:	9301      	str	r3, [sp, #4]
   4d3fc:	ab03      	add	r3, sp, #12
   4d3fe:	9300      	str	r3, [sp, #0]
   4d400:	aa05      	add	r2, sp, #20
   4d402:	bf0c      	ite	eq
   4d404:	2302      	moveq	r3, #2
   4d406:	2303      	movne	r3, #3
   4d408:	2100      	movs	r1, #0
   4d40a:	4806      	ldr	r0, [pc, #24]	; (4d424 <psa_aead_encrypt+0x98>)
   4d40c:	f000 f8a0 	bl	4d550 <psa_call>
    *ciphertext_length = out_vec[0].len;
   4d410:	9b26      	ldr	r3, [sp, #152]	; 0x98
   4d412:	9a04      	ldr	r2, [sp, #16]
   4d414:	601a      	str	r2, [r3, #0]
    return status;
   4d416:	e7d2      	b.n	4d3be <psa_aead_encrypt+0x32>
            iov.aead_in.nonce[idx] = nonce[idx];
   4d418:	f812 0b01 	ldrb.w	r0, [r2], #1
   4d41c:	f803 0f01 	strb.w	r0, [r3, #1]!
        for (size_t idx = 0; idx < nonce_length; idx++) {
   4d420:	e7e2      	b.n	4d3e8 <psa_aead_encrypt+0x5c>
   4d422:	bf00      	nop
   4d424:	40000100 	.word	0x40000100

0004d428 <psa_aead_decrypt>:
                              const uint8_t *ciphertext,
                              size_t ciphertext_length,
                              uint8_t *plaintext,
                              size_t plaintext_size,
                              size_t *plaintext_length)
{
   4d428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4d42c:	4614      	mov	r4, r2
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d42e:	2230      	movs	r2, #48	; 0x30
{
   4d430:	b099      	sub	sp, #100	; 0x64
   4d432:	4680      	mov	r8, r0
   4d434:	e9dd 6920 	ldrd	r6, r9, [sp, #128]	; 0x80
   4d438:	460f      	mov	r7, r1
    struct tfm_crypto_pack_iovec iov = {
   4d43a:	eb0d 0002 	add.w	r0, sp, r2
   4d43e:	2100      	movs	r1, #0
{
   4d440:	461d      	mov	r5, r3
    struct tfm_crypto_pack_iovec iov = {
   4d442:	f00d fd89 	bl	5af58 <memset>
   4d446:	2324      	movs	r3, #36	; 0x24
   4d448:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
   4d44c:	930b      	str	r3, [sp, #44]	; 0x2c
        .alg = alg,
        .aead_in = {.nonce = {0}, .nonce_length = 0}
    };

    /* Sanitize the optional input */
    if ((additional_data == NULL) && (additional_data_length != 0)) {
   4d44e:	b93e      	cbnz	r6, 4d460 <psa_aead_decrypt+0x38>
   4d450:	f1b9 0f00 	cmp.w	r9, #0
   4d454:	d004      	beq.n	4d460 <psa_aead_decrypt+0x38>
        return PSA_ERROR_INVALID_ARGUMENT;
   4d456:	f06f 0086 	mvn.w	r0, #134	; 0x86
                      out_vec, IOVEC_LEN(out_vec));

    *plaintext_length = out_vec[0].len;

    return status;
}
   4d45a:	b019      	add	sp, #100	; 0x64
   4d45c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    psa_invec in_vec[] = {
   4d460:	9b22      	ldr	r3, [sp, #136]	; 0x88
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
   4d462:	2d10      	cmp	r5, #16
    psa_invec in_vec[] = {
   4d464:	9307      	str	r3, [sp, #28]
   4d466:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   4d468:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   4d46c:	e9cd 3608 	strd	r3, r6, [sp, #32]
    psa_outvec out_vec[] = {
   4d470:	9b24      	ldr	r3, [sp, #144]	; 0x90
   4d472:	9303      	str	r3, [sp, #12]
   4d474:	9b25      	ldr	r3, [sp, #148]	; 0x94
   4d476:	9304      	str	r3, [sp, #16]
    if (nonce_length > TFM_CRYPTO_MAX_NONCE_LENGTH) {
   4d478:	d8ed      	bhi.n	4d456 <psa_aead_decrypt+0x2e>
    if (nonce != NULL) {
   4d47a:	b134      	cbz	r4, 4d48a <psa_aead_decrypt+0x62>
   4d47c:	4622      	mov	r2, r4
   4d47e:	f10d 034b 	add.w	r3, sp, #75	; 0x4b
   4d482:	1961      	adds	r1, r4, r5
        for (size_t idx = 0; idx < nonce_length; idx++) {
   4d484:	428a      	cmp	r2, r1
   4d486:	d115      	bne.n	4d4b4 <psa_aead_decrypt+0x8c>
        iov.aead_in.nonce_length = nonce_length;
   4d488:	9517      	str	r5, [sp, #92]	; 0x5c
    in_vec[0].base = &iov;
   4d48a:	ab0b      	add	r3, sp, #44	; 0x2c
   4d48c:	9305      	str	r3, [sp, #20]
    in_vec[0].len = sizeof(struct tfm_crypto_pack_iovec);
   4d48e:	2334      	movs	r3, #52	; 0x34
   4d490:	9306      	str	r3, [sp, #24]
    status = psa_call(TFM_CRYPTO_HANDLE, PSA_IPC_CALL, in_vec, in_len,
   4d492:	2301      	movs	r3, #1
    size_t in_len = IOVEC_LEN(in_vec);
   4d494:	2e00      	cmp	r6, #0
    status = psa_call(TFM_CRYPTO_HANDLE, PSA_IPC_CALL, in_vec, in_len,
   4d496:	9301      	str	r3, [sp, #4]
   4d498:	ab03      	add	r3, sp, #12
   4d49a:	9300      	str	r3, [sp, #0]
   4d49c:	aa05      	add	r2, sp, #20
   4d49e:	bf0c      	ite	eq
   4d4a0:	2302      	moveq	r3, #2
   4d4a2:	2303      	movne	r3, #3
   4d4a4:	2100      	movs	r1, #0
   4d4a6:	4806      	ldr	r0, [pc, #24]	; (4d4c0 <psa_aead_decrypt+0x98>)
   4d4a8:	f000 f852 	bl	4d550 <psa_call>
    *plaintext_length = out_vec[0].len;
   4d4ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
   4d4ae:	9a04      	ldr	r2, [sp, #16]
   4d4b0:	601a      	str	r2, [r3, #0]
    return status;
   4d4b2:	e7d2      	b.n	4d45a <psa_aead_decrypt+0x32>
            iov.aead_in.nonce[idx] = nonce[idx];
   4d4b4:	f812 0b01 	ldrb.w	r0, [r2], #1
   4d4b8:	f803 0f01 	strb.w	r0, [r3, #1]!
        for (size_t idx = 0; idx < nonce_length; idx++) {
   4d4bc:	e7e2      	b.n	4d484 <psa_aead_decrypt+0x5c>
   4d4be:	bf00      	nop
   4d4c0:	40000100 	.word	0x40000100

0004d4c4 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   4d4c4:	b530      	push	{r4, r5, lr}
   4d4c6:	b095      	sub	sp, #84	; 0x54
   4d4c8:	4605      	mov	r5, r0
   4d4ca:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d4cc:	2230      	movs	r2, #48	; 0x30
   4d4ce:	2100      	movs	r1, #0
   4d4d0:	a808      	add	r0, sp, #32
   4d4d2:	f00d fd41 	bl	5af58 <memset>
   4d4d6:	233f      	movs	r3, #63	; 0x3f
   4d4d8:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   4d4da:	ab07      	add	r3, sp, #28
   4d4dc:	9303      	str	r3, [sp, #12]
   4d4de:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   4d4e0:	9406      	str	r4, [sp, #24]
   4d4e2:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   4d4e6:	b154      	cbz	r4, 4d4fe <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   4d4e8:	2301      	movs	r3, #1
   4d4ea:	aa05      	add	r2, sp, #20
   4d4ec:	9200      	str	r2, [sp, #0]
   4d4ee:	2100      	movs	r1, #0
   4d4f0:	4804      	ldr	r0, [pc, #16]	; (4d504 <psa_generate_random+0x40>)
   4d4f2:	9301      	str	r3, [sp, #4]
   4d4f4:	aa03      	add	r2, sp, #12
   4d4f6:	f000 f82b 	bl	4d550 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   4d4fa:	b015      	add	sp, #84	; 0x54
   4d4fc:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   4d4fe:	4620      	mov	r0, r4
   4d500:	e7fb      	b.n	4d4fa <psa_generate_random+0x36>
   4d502:	bf00      	nop
   4d504:	40000100 	.word	0x40000100

0004d508 <psa_generate_key>:

psa_status_t psa_generate_key(const psa_key_attributes_t *attributes,
                              psa_key_id_t *key)
{
   4d508:	b530      	push	{r4, r5, lr}
   4d50a:	b097      	sub	sp, #92	; 0x5c
   4d50c:	4605      	mov	r5, r0
   4d50e:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   4d510:	2230      	movs	r2, #48	; 0x30
   4d512:	2100      	movs	r1, #0
   4d514:	a80a      	add	r0, sp, #40	; 0x28
   4d516:	f00d fd1f 	bl	5af58 <memset>
   4d51a:	2340      	movs	r3, #64	; 0x40
   4d51c:	9309      	str	r3, [sp, #36]	; 0x24
        .srv_id = TFM_CRYPTO_GENERATE_KEY_SID,
    };

    psa_invec in_vec[] = {
   4d51e:	ab09      	add	r3, sp, #36	; 0x24
   4d520:	9305      	str	r3, [sp, #20]
   4d522:	2334      	movs	r3, #52	; 0x34
   4d524:	e9cd 3506 	strd	r3, r5, [sp, #24]
   4d528:	2314      	movs	r3, #20
   4d52a:	9308      	str	r3, [sp, #32]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
        {.base = attributes, .len = sizeof(psa_key_attributes_t)},
    };

    psa_outvec out_vec[] = {
   4d52c:	2304      	movs	r3, #4
   4d52e:	9304      	str	r3, [sp, #16]
        {.base = key, .len = sizeof(psa_key_id_t)},
    };

    status = API_DISPATCH(tfm_crypto_generate_key,
   4d530:	2301      	movs	r3, #1
   4d532:	9301      	str	r3, [sp, #4]
   4d534:	ab03      	add	r3, sp, #12
   4d536:	9300      	str	r3, [sp, #0]
   4d538:	2100      	movs	r1, #0
   4d53a:	2302      	movs	r3, #2
   4d53c:	aa05      	add	r2, sp, #20
   4d53e:	4803      	ldr	r0, [pc, #12]	; (4d54c <psa_generate_key+0x44>)
    psa_outvec out_vec[] = {
   4d540:	9403      	str	r4, [sp, #12]
    status = API_DISPATCH(tfm_crypto_generate_key,
   4d542:	f000 f805 	bl	4d550 <psa_call>
                          TFM_CRYPTO_GENERATE_KEY);

    return status;
}
   4d546:	b017      	add	sp, #92	; 0x5c
   4d548:	bd30      	pop	{r4, r5, pc}
   4d54a:	bf00      	nop
   4d54c:	40000100 	.word	0x40000100

0004d550 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   4d550:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   4d552:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   4d556:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   4d55a:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   4d55c:	d20d      	bcs.n	4d57a <psa_call+0x2a>
        (type < INT16_MIN) ||
   4d55e:	ea43 0504 	orr.w	r5, r3, r4
   4d562:	2dff      	cmp	r5, #255	; 0xff
   4d564:	d809      	bhi.n	4d57a <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   4d566:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   4d56a:	4613      	mov	r3, r2
   4d56c:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   4d570:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   4d572:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   4d574:	4803      	ldr	r0, [pc, #12]	; (4d584 <psa_call+0x34>)
   4d576:	f7ff be79 	b.w	4d26c <tfm_ns_interface_dispatch>
}
   4d57a:	f06f 0080 	mvn.w	r0, #128	; 0x80
   4d57e:	bc30      	pop	{r4, r5}
   4d580:	4770      	bx	lr
   4d582:	bf00      	nop
   4d584:	00037c21 	.word	0x00037c21

0004d588 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
   4d588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
   4d58c:	6804      	ldr	r4, [r0, #0]
{
   4d58e:	4605      	mov	r5, r0
	if (!tp) return vol;	/* Invalid path name? */
   4d590:	b374      	cbz	r4, 4d5f0 <get_ldnumber+0x68>
   4d592:	4621      	mov	r1, r4
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
   4d594:	f811 3b01 	ldrb.w	r3, [r1], #1
   4d598:	2b1f      	cmp	r3, #31
   4d59a:	d937      	bls.n	4d60c <get_ldnumber+0x84>
   4d59c:	2b3a      	cmp	r3, #58	; 0x3a
   4d59e:	d1f9      	bne.n	4d594 <get_ldnumber+0xc>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
   4d5a0:	7820      	ldrb	r0, [r4, #0]
   4d5a2:	3830      	subs	r0, #48	; 0x30
   4d5a4:	b2c3      	uxtb	r3, r0
   4d5a6:	2b09      	cmp	r3, #9
   4d5a8:	d91d      	bls.n	4d5e6 <get_ldnumber+0x5e>
   4d5aa:	2000      	movs	r0, #0
   4d5ac:	f8df c060 	ldr.w	ip, [pc, #96]	; 4d610 <get_ldnumber+0x88>
		}
#if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
		else {
			i = 0;
			do {
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
   4d5b0:	4627      	mov	r7, r4
   4d5b2:	f85c eb04 	ldr.w	lr, [ip], #4
				do {	/* Compare the volume ID with path name */
					c = *sp++; tc = *tp++;
   4d5b6:	f81e 2b01 	ldrb.w	r2, [lr], #1
   4d5ba:	f817 3b01 	ldrb.w	r3, [r7], #1
					if (IsLower(c)) c -= 0x20;
   4d5be:	f1a2 0861 	sub.w	r8, r2, #97	; 0x61
					if (IsLower(tc)) tc -= 0x20;
   4d5c2:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
					if (IsLower(c)) c -= 0x20;
   4d5c6:	f1b8 0f19 	cmp.w	r8, #25
					if (IsLower(tc)) tc -= 0x20;
   4d5ca:	b2f6      	uxtb	r6, r6
					if (IsLower(c)) c -= 0x20;
   4d5cc:	d813      	bhi.n	4d5f6 <get_ldnumber+0x6e>
   4d5ce:	3a20      	subs	r2, #32
					if (IsLower(tc)) tc -= 0x20;
   4d5d0:	2e19      	cmp	r6, #25
					if (IsLower(c)) c -= 0x20;
   4d5d2:	b2d2      	uxtb	r2, r2
					if (IsLower(tc)) tc -= 0x20;
   4d5d4:	d801      	bhi.n	4d5da <get_ldnumber+0x52>
   4d5d6:	3b20      	subs	r3, #32
   4d5d8:	b2db      	uxtb	r3, r3
				} while (c && (TCHAR)c == tc);
   4d5da:	4293      	cmp	r3, r2
   4d5dc:	d0eb      	beq.n	4d5b6 <get_ldnumber+0x2e>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
   4d5de:	3001      	adds	r0, #1
   4d5e0:	2808      	cmp	r0, #8
   4d5e2:	d1e5      	bne.n	4d5b0 <get_ldnumber+0x28>
   4d5e4:	e004      	b.n	4d5f0 <get_ldnumber+0x68>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
   4d5e6:	1ca3      	adds	r3, r4, #2
   4d5e8:	4299      	cmp	r1, r3
   4d5ea:	d1de      	bne.n	4d5aa <get_ldnumber+0x22>
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
   4d5ec:	2807      	cmp	r0, #7
   4d5ee:	dd0a      	ble.n	4d606 <get_ldnumber+0x7e>
	if (!tp) return vol;	/* Invalid path name? */
   4d5f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4d5f4:	e008      	b.n	4d608 <get_ldnumber+0x80>
					if (IsLower(tc)) tc -= 0x20;
   4d5f6:	2e19      	cmp	r6, #25
   4d5f8:	bf9c      	itt	ls
   4d5fa:	3b20      	subls	r3, #32
   4d5fc:	b2db      	uxtbls	r3, r3
				} while (c && (TCHAR)c == tc);
   4d5fe:	2a00      	cmp	r2, #0
   4d600:	d1eb      	bne.n	4d5da <get_ldnumber+0x52>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
   4d602:	42b9      	cmp	r1, r7
   4d604:	d1eb      	bne.n	4d5de <get_ldnumber+0x56>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
   4d606:	6029      	str	r1, [r5, #0]
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
   4d608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return vol;		/* Return the default drive */
   4d60c:	2000      	movs	r0, #0
   4d60e:	e7fb      	b.n	4d608 <get_ldnumber+0x80>
   4d610:	0005c584 	.word	0x0005c584

0004d614 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
   4d614:	b538      	push	{r3, r4, r5, lr}
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
   4d616:	2300      	movs	r3, #0
   4d618:	70c3      	strb	r3, [r0, #3]
   4d61a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4d61e:	6383      	str	r3, [r0, #56]	; 0x38
{
   4d620:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
   4d622:	f00a fc6c 	bl	57efe <move_window>
   4d626:	2800      	cmp	r0, #0
   4d628:	d167      	bne.n	4d6fa <check_fs+0xe6>
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
   4d62a:	f64a 2355 	movw	r3, #43605	; 0xaa55
   4d62e:	f8b4 523a 	ldrh.w	r5, [r4, #570]	; 0x23a
   4d632:	429d      	cmp	r5, r3
   4d634:	d048      	beq.n	4d6c8 <check_fs+0xb4>
#endif
	b = fs->win[BS_JmpBoot];
   4d636:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
   4d63a:	2beb      	cmp	r3, #235	; 0xeb
   4d63c:	d13e      	bne.n	4d6bc <check_fs+0xa8>
			return 0;	/* It is an FAT32 VBR */
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
		b = fs->win[BPB_SecPerClus];
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d63e:	f8b4 2047 	ldrh.w	r2, [r4, #71]	; 0x47
		b = fs->win[BPB_SecPerClus];
   4d642:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d646:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   4d64a:	d13b      	bne.n	4d6c4 <check_fs+0xb0>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
   4d64c:	b3d3      	cbz	r3, 4d6c4 <check_fs+0xb0>
   4d64e:	1e5a      	subs	r2, r3, #1
   4d650:	421a      	tst	r2, r3
   4d652:	d00b      	beq.n	4d66c <check_fs+0x58>
   4d654:	e036      	b.n	4d6c4 <check_fs+0xb0>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d656:	f8b4 2047 	ldrh.w	r2, [r4, #71]	; 0x47
		b = fs->win[BPB_SecPerClus];
   4d65a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d65e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   4d662:	d120      	bne.n	4d6a6 <check_fs+0x92>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
   4d664:	b1fb      	cbz	r3, 4d6a6 <check_fs+0x92>
   4d666:	1e5a      	subs	r2, r3, #1
   4d668:	421a      	tst	r2, r3
   4d66a:	d118      	bne.n	4d69e <check_fs+0x8a>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
   4d66c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   4d670:	b1ab      	cbz	r3, 4d69e <check_fs+0x8a>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
   4d672:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
   4d676:	3b01      	subs	r3, #1
   4d678:	2b01      	cmp	r3, #1
   4d67a:	d810      	bhi.n	4d69e <check_fs+0x8a>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
   4d67c:	f8b4 304d 	ldrh.w	r3, [r4, #77]	; 0x4d
   4d680:	b16b      	cbz	r3, 4d69e <check_fs+0x8a>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
   4d682:	f8b4 304f 	ldrh.w	r3, [r4, #79]	; 0x4f
   4d686:	2b7f      	cmp	r3, #127	; 0x7f
   4d688:	d806      	bhi.n	4d698 <check_fs+0x84>
   4d68a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   4d68e:	f00a fa79 	bl	57b84 <ld_dword>
   4d692:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   4d696:	d302      	bcc.n	4d69e <check_fs+0x8a>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
   4d698:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   4d69c:	bb5b      	cbnz	r3, 4d6f6 <check_fs+0xe2>
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
   4d69e:	f64a 2355 	movw	r3, #43605	; 0xaa55
   4d6a2:	429d      	cmp	r5, r3
   4d6a4:	d10e      	bne.n	4d6c4 <check_fs+0xb0>
   4d6a6:	2002      	movs	r0, #2
   4d6a8:	e00d      	b.n	4d6c6 <check_fs+0xb2>
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d6aa:	f8b4 2047 	ldrh.w	r2, [r4, #71]	; 0x47
		b = fs->win[BPB_SecPerClus];
   4d6ae:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   4d6b2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   4d6b6:	d105      	bne.n	4d6c4 <check_fs+0xb0>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
   4d6b8:	b123      	cbz	r3, 4d6c4 <check_fs+0xb0>
   4d6ba:	e7d4      	b.n	4d666 <check_fs+0x52>
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
   4d6bc:	3318      	adds	r3, #24
   4d6be:	b2db      	uxtb	r3, r3
   4d6c0:	2b01      	cmp	r3, #1
   4d6c2:	d9f2      	bls.n	4d6aa <check_fs+0x96>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
   4d6c4:	2003      	movs	r0, #3
}
   4d6c6:	bd38      	pop	{r3, r4, r5, pc}
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
   4d6c8:	220b      	movs	r2, #11
   4d6ca:	490e      	ldr	r1, [pc, #56]	; (4d704 <check_fs+0xf0>)
   4d6cc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   4d6d0:	f00d fbf8 	bl	5aec4 <memcmp>
   4d6d4:	b198      	cbz	r0, 4d6fe <check_fs+0xea>
	b = fs->win[BS_JmpBoot];
   4d6d6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
   4d6da:	2beb      	cmp	r3, #235	; 0xeb
   4d6dc:	d003      	beq.n	4d6e6 <check_fs+0xd2>
   4d6de:	3318      	adds	r3, #24
   4d6e0:	b2db      	uxtb	r3, r3
   4d6e2:	2b01      	cmp	r3, #1
   4d6e4:	d8df      	bhi.n	4d6a6 <check_fs+0x92>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
   4d6e6:	2208      	movs	r2, #8
   4d6e8:	4907      	ldr	r1, [pc, #28]	; (4d708 <check_fs+0xf4>)
   4d6ea:	f104 008e 	add.w	r0, r4, #142	; 0x8e
   4d6ee:	f00d fbe9 	bl	5aec4 <memcmp>
   4d6f2:	2800      	cmp	r0, #0
   4d6f4:	d1af      	bne.n	4d656 <check_fs+0x42>
			return 0;	/* It is an FAT32 VBR */
   4d6f6:	2000      	movs	r0, #0
   4d6f8:	e7e5      	b.n	4d6c6 <check_fs+0xb2>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
   4d6fa:	2004      	movs	r0, #4
   4d6fc:	e7e3      	b.n	4d6c6 <check_fs+0xb2>
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
   4d6fe:	2001      	movs	r0, #1
   4d700:	e7e1      	b.n	4d6c6 <check_fs+0xb2>
   4d702:	bf00      	nop
   4d704:	00060776 	.word	0x00060776
   4d708:	000607a9 	.word	0x000607a9

0004d70c <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
   4d70c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
   4d710:	2300      	movs	r3, #0
   4d712:	600b      	str	r3, [r1, #0]
{
   4d714:	460f      	mov	r7, r1
   4d716:	4616      	mov	r6, r2
	vol = get_ldnumber(path);
   4d718:	f7ff ff36 	bl	4d588 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
   4d71c:	1e05      	subs	r5, r0, #0
   4d71e:	f2c0 81bf 	blt.w	4daa0 <mount_volume+0x394>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
   4d722:	4bb0      	ldr	r3, [pc, #704]	; (4d9e4 <mount_volume+0x2d8>)
   4d724:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
   4d728:	2c00      	cmp	r4, #0
   4d72a:	f000 81bb 	beq.w	4daa4 <mount_volume+0x398>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
   4d72e:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
   4d730:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
   4d732:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
   4d736:	b16b      	cbz	r3, 4d754 <mount_volume+0x48>
		stat = disk_status(fs->pdrv);
   4d738:	7860      	ldrb	r0, [r4, #1]
   4d73a:	f001 fce9 	bl	4f110 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
   4d73e:	07c7      	lsls	r7, r0, #31
   4d740:	d408      	bmi.n	4d754 <mount_volume+0x48>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
   4d742:	b10e      	cbz	r6, 4d748 <mount_volume+0x3c>
   4d744:	0741      	lsls	r1, r0, #29
   4d746:	d403      	bmi.n	4d750 <mount_volume+0x44>
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The filesystem object is already valid */
   4d748:	2000      	movs	r0, #0
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
   4d74a:	b004      	add	sp, #16
   4d74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_WRITE_PROTECTED;
   4d750:	200a      	movs	r0, #10
   4d752:	e7fa      	b.n	4d74a <mount_volume+0x3e>
	fs->fs_type = 0;					/* Clear the filesystem object */
   4d754:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
   4d756:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the filesystem object */
   4d758:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
   4d75a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
   4d75c:	f001 fce4 	bl	4f128 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
   4d760:	07c2      	lsls	r2, r0, #31
   4d762:	f100 81a1 	bmi.w	4daa8 <mount_volume+0x39c>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
   4d766:	b10e      	cbz	r6, 4d76c <mount_volume+0x60>
   4d768:	0743      	lsls	r3, r0, #29
   4d76a:	d4f1      	bmi.n	4d750 <mount_volume+0x44>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
   4d76c:	2100      	movs	r1, #0
   4d76e:	4620      	mov	r0, r4
   4d770:	f7ff ff50 	bl	4d614 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
   4d774:	2802      	cmp	r0, #2
   4d776:	f040 8095 	bne.w	4d8a4 <mount_volume+0x198>
   4d77a:	466e      	mov	r6, sp
   4d77c:	4632      	mov	r2, r6
   4d77e:	f204 2302 	addw	r3, r4, #514	; 0x202
   4d782:	f204 2142 	addw	r1, r4, #578	; 0x242
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
   4d786:	4618      	mov	r0, r3
   4d788:	f00a f9fc 	bl	57b84 <ld_dword>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   4d78c:	3310      	adds	r3, #16
   4d78e:	428b      	cmp	r3, r1
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
   4d790:	f842 0b04 	str.w	r0, [r2], #4
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   4d794:	d1f7      	bne.n	4d786 <mount_volume+0x7a>
   4d796:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
   4d798:	f856 1b04 	ldr.w	r1, [r6], #4
   4d79c:	2900      	cmp	r1, #0
   4d79e:	d078      	beq.n	4d892 <mount_volume+0x186>
   4d7a0:	4620      	mov	r0, r4
   4d7a2:	f7ff ff37 	bl	4d614 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
   4d7a6:	2801      	cmp	r0, #1
   4d7a8:	d874      	bhi.n	4d894 <mount_volume+0x188>
	if (fmt == 1) {
   4d7aa:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume offset */
   4d7ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	if (fmt == 1) {
   4d7ae:	f040 80b6 	bne.w	4d91e <mount_volume+0x212>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
   4d7b2:	230b      	movs	r3, #11
   4d7b4:	f104 0146 	add.w	r1, r4, #70	; 0x46
   4d7b8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   4d7bc:	2d00      	cmp	r5, #0
   4d7be:	d176      	bne.n	4d8ae <mount_volume+0x1a2>
   4d7c0:	3301      	adds	r3, #1
   4d7c2:	2b40      	cmp	r3, #64	; 0x40
   4d7c4:	d1f8      	bne.n	4d7b8 <mount_volume+0xac>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
   4d7c6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   4d7ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   4d7ce:	d16e      	bne.n	4d8ae <mount_volume+0x1a2>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
   4d7d0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   4d7d4:	2b09      	cmp	r3, #9
   4d7d6:	d16a      	bne.n	4d8ae <mount_volume+0x1a2>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
   4d7d8:	f104 0084 	add.w	r0, r4, #132	; 0x84
   4d7dc:	f00a f9d4 	bl	57b88 <ld_qword>
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
   4d7e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
   4d7e4:	1816      	adds	r6, r2, r0
   4d7e6:	f141 0100 	adc.w	r1, r1, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
   4d7ea:	42b3      	cmp	r3, r6
   4d7ec:	eb75 0301 	sbcs.w	r3, r5, r1
   4d7f0:	d35d      	bcc.n	4d8ae <mount_volume+0x1a2>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
   4d7f2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   4d7f6:	f00a f9c5 	bl	57b84 <ld_dword>
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
   4d7fa:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
   4d7fe:	6220      	str	r0, [r4, #32]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
   4d800:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
   4d802:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
   4d804:	d153      	bne.n	4d8ae <mount_volume+0x1a2>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
   4d806:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   4d80a:	4083      	lsls	r3, r0
   4d80c:	b298      	uxth	r0, r3
   4d80e:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
   4d810:	2800      	cmp	r0, #0
   4d812:	d04c      	beq.n	4d8ae <mount_volume+0x1a2>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
   4d814:	f104 0098 	add.w	r0, r4, #152	; 0x98
   4d818:	f00a f9b4 	bl	57b84 <ld_dword>
   4d81c:	4680      	mov	r8, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
   4d81e:	4872      	ldr	r0, [pc, #456]	; (4d9e8 <mount_volume+0x2dc>)
   4d820:	4580      	cmp	r8, r0
   4d822:	d844      	bhi.n	4d8ae <mount_volume+0x1a2>
		fs->n_fatent = nclst + 2;
   4d824:	f108 0002 	add.w	r0, r8, #2
   4d828:	61e0      	str	r0, [r4, #28]
		fs->volbase = bsect;
   4d82a:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
   4d82c:	f104 0094 	add.w	r0, r4, #148	; 0x94
   4d830:	f00a f9a8 	bl	57b84 <ld_dword>
   4d834:	1887      	adds	r7, r0, r2
   4d836:	6327      	str	r7, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
   4d838:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   4d83c:	f00a f9a2 	bl	57b84 <ld_dword>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
   4d840:	b29b      	uxth	r3, r3
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
   4d842:	4402      	add	r2, r0
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
   4d844:	fb08 f003 	mul.w	r0, r8, r3
   4d848:	19c0      	adds	r0, r0, r7
   4d84a:	eb45 0305 	adc.w	r3, r5, r5
   4d84e:	4286      	cmp	r6, r0
   4d850:	eb71 0303 	sbcs.w	r3, r1, r3
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
   4d854:	62a2      	str	r2, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
   4d856:	d32a      	bcc.n	4d8ae <mount_volume+0x1a2>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
   4d858:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   4d85c:	f00a f992 	bl	57b84 <ld_dword>
		so = i = 0;
   4d860:	462e      	mov	r6, r5
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
   4d862:	62e0      	str	r0, [r4, #44]	; 0x2c
			if (i == 0) {
   4d864:	b965      	cbnz	r5, 4d880 <mount_volume+0x174>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
   4d866:	8963      	ldrh	r3, [r4, #10]
   4d868:	42b3      	cmp	r3, r6
   4d86a:	d920      	bls.n	4d8ae <mount_volume+0x1a2>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
   4d86c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   4d86e:	4620      	mov	r0, r4
   4d870:	f00a f9a5 	bl	57bbe <clst2sect>
   4d874:	1981      	adds	r1, r0, r6
   4d876:	4620      	mov	r0, r4
   4d878:	f00a fb41 	bl	57efe <move_window>
   4d87c:	b980      	cbnz	r0, 4d8a0 <mount_volume+0x194>
				so++;
   4d87e:	3601      	adds	r6, #1
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
   4d880:	1963      	adds	r3, r4, r5
   4d882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   4d886:	2b81      	cmp	r3, #129	; 0x81
   4d888:	d013      	beq.n	4d8b2 <mount_volume+0x1a6>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
   4d88a:	3520      	adds	r5, #32
   4d88c:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (i == 0) {
   4d890:	e7e8      	b.n	4d864 <mount_volume+0x158>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
   4d892:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
   4d894:	3501      	adds	r5, #1
   4d896:	2d04      	cmp	r5, #4
   4d898:	f47f af7e 	bne.w	4d798 <mount_volume+0x8c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
   4d89c:	2804      	cmp	r0, #4
   4d89e:	d106      	bne.n	4d8ae <mount_volume+0x1a2>
   4d8a0:	2001      	movs	r0, #1
   4d8a2:	e752      	b.n	4d74a <mount_volume+0x3e>
   4d8a4:	2804      	cmp	r0, #4
   4d8a6:	d0fb      	beq.n	4d8a0 <mount_volume+0x194>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
   4d8a8:	2801      	cmp	r0, #1
   4d8aa:	f67f af7e 	bls.w	4d7aa <mount_volume+0x9e>
   4d8ae:	200d      	movs	r0, #13
   4d8b0:	e74b      	b.n	4d74a <mount_volume+0x3e>
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
   4d8b2:	f105 0014 	add.w	r0, r5, #20
   4d8b6:	f104 063c 	add.w	r6, r4, #60	; 0x3c
   4d8ba:	4430      	add	r0, r6
   4d8bc:	f00a f962 	bl	57b84 <ld_dword>
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
   4d8c0:	2801      	cmp	r0, #1
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
   4d8c2:	4605      	mov	r5, r0
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
   4d8c4:	d9f3      	bls.n	4d8ae <mount_volume+0x1a2>
   4d8c6:	69e3      	ldr	r3, [r4, #28]
   4d8c8:	4283      	cmp	r3, r0
   4d8ca:	d9f0      	bls.n	4d8ae <mount_volume+0x1a2>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
   4d8cc:	8961      	ldrh	r1, [r4, #10]
   4d8ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
   4d8d0:	1e82      	subs	r2, r0, #2
   4d8d2:	fb02 3301 	mla	r3, r2, r1, r3
   4d8d6:	6363      	str	r3, [r4, #52]	; 0x34
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
   4d8d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   4d8da:	4620      	mov	r0, r4
   4d8dc:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
   4d8e0:	f00a fb0d 	bl	57efe <move_window>
   4d8e4:	2800      	cmp	r0, #0
   4d8e6:	d1db      	bne.n	4d8a0 <mount_volume+0x194>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
   4d8e8:	f005 007f 	and.w	r0, r5, #127	; 0x7f
   4d8ec:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   4d8f0:	f00a f948 	bl	57b84 <ld_dword>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
   4d8f4:	1c47      	adds	r7, r0, #1
   4d8f6:	d003      	beq.n	4d900 <mount_volume+0x1f4>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
   4d8f8:	3501      	adds	r5, #1
   4d8fa:	42a8      	cmp	r0, r5
   4d8fc:	d0ec      	beq.n	4d8d8 <mount_volume+0x1cc>
   4d8fe:	e7d6      	b.n	4d8ae <mount_volume+0x1a2>
		fmt = FS_EXFAT;			/* FAT sub-type */
   4d900:	2504      	movs	r5, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
   4d902:	e9c4 0005 	strd	r0, r0, [r4, #20]
	fs->id = ++Fsid;		/* Volume mount ID */
   4d906:	4a39      	ldr	r2, [pc, #228]	; (4d9ec <mount_volume+0x2e0>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
   4d908:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
   4d90a:	8813      	ldrh	r3, [r2, #0]
   4d90c:	3301      	adds	r3, #1
   4d90e:	b29b      	uxth	r3, r3
   4d910:	8013      	strh	r3, [r2, #0]
   4d912:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
   4d914:	4b36      	ldr	r3, [pc, #216]	; (4d9f0 <mount_volume+0x2e4>)
   4d916:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
   4d918:	4b36      	ldr	r3, [pc, #216]	; (4d9f4 <mount_volume+0x2e8>)
   4d91a:	6123      	str	r3, [r4, #16]
	return FR_OK;
   4d91c:	e714      	b.n	4d748 <mount_volume+0x3c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
   4d91e:	f8b4 3047 	ldrh.w	r3, [r4, #71]	; 0x47
   4d922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   4d926:	d1c2      	bne.n	4d8ae <mount_volume+0x1a2>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
   4d928:	f8b4 6052 	ldrh.w	r6, [r4, #82]	; 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
   4d92c:	b926      	cbnz	r6, 4d938 <mount_volume+0x22c>
   4d92e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   4d932:	f00a f927 	bl	57b84 <ld_dword>
   4d936:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
   4d938:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
		fs->fsize = fasize;
   4d93c:	6226      	str	r6, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
   4d93e:	1e59      	subs	r1, r3, #1
   4d940:	2901      	cmp	r1, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
   4d942:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
   4d944:	d8b3      	bhi.n	4d8ae <mount_volume+0x1a2>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
   4d946:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
   4d94a:	8161      	strh	r1, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   4d94c:	2900      	cmp	r1, #0
   4d94e:	d0ae      	beq.n	4d8ae <mount_volume+0x1a2>
   4d950:	1e48      	subs	r0, r1, #1
   4d952:	4208      	tst	r0, r1
   4d954:	d1ab      	bne.n	4d8ae <mount_volume+0x1a2>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
   4d956:	f8b4 704d 	ldrh.w	r7, [r4, #77]	; 0x4d
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
   4d95a:	0738      	lsls	r0, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
   4d95c:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
   4d95e:	d1a6      	bne.n	4d8ae <mount_volume+0x1a2>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
   4d960:	f8b4 004f 	ldrh.w	r0, [r4, #79]	; 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
   4d964:	b918      	cbnz	r0, 4d96e <mount_volume+0x262>
   4d966:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   4d96a:	f00a f90b 	bl	57b84 <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
   4d96e:	f8b4 e04a 	ldrh.w	lr, [r4, #74]	; 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
   4d972:	f1be 0f00 	cmp.w	lr, #0
   4d976:	d09a      	beq.n	4d8ae <mount_volume+0x1a2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
   4d978:	fb06 fc03 	mul.w	ip, r6, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
   4d97c:	eb0e 1517 	add.w	r5, lr, r7, lsr #4
   4d980:	4465      	add	r5, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
   4d982:	42a8      	cmp	r0, r5
   4d984:	d393      	bcc.n	4d8ae <mount_volume+0x1a2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
   4d986:	1b43      	subs	r3, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   4d988:	428b      	cmp	r3, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
   4d98a:	fbb3 f0f1 	udiv	r0, r3, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   4d98e:	d38e      	bcc.n	4d8ae <mount_volume+0x1a2>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
   4d990:	4b19      	ldr	r3, [pc, #100]	; (4d9f8 <mount_volume+0x2ec>)
   4d992:	4298      	cmp	r0, r3
   4d994:	d88b      	bhi.n	4d8ae <mount_volume+0x1a2>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   4d996:	eb0e 0102 	add.w	r1, lr, r2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
   4d99a:	f64f 7ef5 	movw	lr, #65525	; 0xfff5
   4d99e:	4570      	cmp	r0, lr
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   4d9a0:	f100 0302 	add.w	r3, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
   4d9a4:	4415      	add	r5, r2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
   4d9a6:	d829      	bhi.n	4d9fc <mount_volume+0x2f0>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   4d9a8:	f640 7ef5 	movw	lr, #4085	; 0xff5
   4d9ac:	4570      	cmp	r0, lr
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   4d9ae:	e9c4 2109 	strd	r2, r1, [r4, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   4d9b2:	61e3      	str	r3, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
   4d9b4:	6325      	str	r5, [r4, #48]	; 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   4d9b6:	d80c      	bhi.n	4d9d2 <mount_volume+0x2c6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   4d9b8:	2f00      	cmp	r7, #0
   4d9ba:	f43f af78 	beq.w	4d8ae <mount_volume+0x1a2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
   4d9be:	eb0c 0001 	add.w	r0, ip, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   4d9c2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   4d9c6:	f003 0301 	and.w	r3, r3, #1
   4d9ca:	2501      	movs	r5, #1
   4d9cc:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   4d9d0:	e023      	b.n	4da1a <mount_volume+0x30e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   4d9d2:	2f00      	cmp	r7, #0
   4d9d4:	f43f af6b 	beq.w	4d8ae <mount_volume+0x1a2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
   4d9d8:	2502      	movs	r5, #2
   4d9da:	eb0c 0001 	add.w	r0, ip, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   4d9de:	005b      	lsls	r3, r3, #1
   4d9e0:	e01b      	b.n	4da1a <mount_volume+0x30e>
   4d9e2:	bf00      	nop
   4d9e4:	2001b874 	.word	0x2001b874
   4d9e8:	7ffffffd 	.word	0x7ffffffd
   4d9ec:	2001becc 	.word	0x2001becc
   4d9f0:	2001bccc 	.word	0x2001bccc
   4d9f4:	200203cd 	.word	0x200203cd
   4d9f8:	0ffffff5 	.word	0x0ffffff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   4d9fc:	e9c4 2109 	strd	r2, r1, [r4, #36]	; 0x24
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   4da00:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   4da04:	61e3      	str	r3, [r4, #28]
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   4da06:	4339      	orrs	r1, r7
		fs->database = bsect + sysect;					/* Data start sector */
   4da08:	6325      	str	r5, [r4, #48]	; 0x30
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   4da0a:	f47f af50 	bne.w	4d8ae <mount_volume+0x1a2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
   4da0e:	f104 0068 	add.w	r0, r4, #104	; 0x68
   4da12:	f00a f8b7 	bl	57b84 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
   4da16:	2503      	movs	r5, #3
   4da18:	009b      	lsls	r3, r3, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
   4da1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
   4da1e:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
   4da22:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
   4da24:	f4ff af43 	bcc.w	4d8ae <mount_volume+0x1a2>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
   4da28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4da2c:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;
   4da30:	2380      	movs	r3, #128	; 0x80
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
   4da32:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;
   4da34:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
   4da36:	f47f af66 	bne.w	4d906 <mount_volume+0x1fa>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
   4da3a:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   4da3e:	2b01      	cmp	r3, #1
   4da40:	f47f af61 	bne.w	4d906 <mount_volume+0x1fa>
			&& move_window(fs, bsect + 1) == FR_OK)
   4da44:	4620      	mov	r0, r4
   4da46:	1c51      	adds	r1, r2, #1
   4da48:	f00a fa59 	bl	57efe <move_window>
   4da4c:	2800      	cmp	r0, #0
   4da4e:	f47f af5a 	bne.w	4d906 <mount_volume+0x1fa>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
   4da52:	f64a 2355 	movw	r3, #43605	; 0xaa55
   4da56:	f8b4 223a 	ldrh.w	r2, [r4, #570]	; 0x23a
			fs->fsi_flag = 0;
   4da5a:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
   4da5c:	429a      	cmp	r2, r3
   4da5e:	f47f af52 	bne.w	4d906 <mount_volume+0x1fa>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
   4da62:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   4da66:	f00a f88d 	bl	57b84 <ld_dword>
   4da6a:	4b10      	ldr	r3, [pc, #64]	; (4daac <mount_volume+0x3a0>)
   4da6c:	4298      	cmp	r0, r3
   4da6e:	f47f af4a 	bne.w	4d906 <mount_volume+0x1fa>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
   4da72:	f504 7008 	add.w	r0, r4, #544	; 0x220
   4da76:	f00a f885 	bl	57b84 <ld_dword>
   4da7a:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
   4da7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   4da82:	3320      	adds	r3, #32
   4da84:	4298      	cmp	r0, r3
   4da86:	f47f af3e 	bne.w	4d906 <mount_volume+0x1fa>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
   4da8a:	f504 7009 	add.w	r0, r4, #548	; 0x224
   4da8e:	f00a f879 	bl	57b84 <ld_dword>
   4da92:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
   4da94:	f504 700a 	add.w	r0, r4, #552	; 0x228
   4da98:	f00a f874 	bl	57b84 <ld_dword>
   4da9c:	6160      	str	r0, [r4, #20]
   4da9e:	e732      	b.n	4d906 <mount_volume+0x1fa>
	if (vol < 0) return FR_INVALID_DRIVE;
   4daa0:	200b      	movs	r0, #11
   4daa2:	e652      	b.n	4d74a <mount_volume+0x3e>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
   4daa4:	200c      	movs	r0, #12
   4daa6:	e650      	b.n	4d74a <mount_volume+0x3e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
   4daa8:	2003      	movs	r0, #3
   4daaa:	e64e      	b.n	4d74a <mount_volume+0x3e>
   4daac:	41615252 	.word	0x41615252

0004dab0 <dir_read.constprop.0>:
static FRESULT dir_read (
   4dab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BYTE ord = 0xFF, sum = 0xFF;
   4dab4:	27ff      	movs	r7, #255	; 0xff
static FRESULT dir_read (
   4dab6:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   4dab8:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
   4daba:	463d      	mov	r5, r7
	FRESULT res = FR_NO_FILE;
   4dabc:	2004      	movs	r0, #4
	while (dp->sect) {
   4dabe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   4dac0:	b911      	cbnz	r1, 4dac8 <dir_read.constprop.0+0x18>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   4dac2:	b1d8      	cbz	r0, 4dafc <dir_read.constprop.0+0x4c>
   4dac4:	2004      	movs	r0, #4
   4dac6:	e062      	b.n	4db8e <dir_read.constprop.0+0xde>
		res = move_window(fs, dp->sect);
   4dac8:	4630      	mov	r0, r6
   4daca:	f00a fa18 	bl	57efe <move_window>
		if (res != FR_OK) break;
   4dace:	2800      	cmp	r0, #0
   4dad0:	d15d      	bne.n	4db8e <dir_read.constprop.0+0xde>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
   4dad2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   4dad4:	7803      	ldrb	r3, [r0, #0]
		if (b == 0) {
   4dad6:	2b00      	cmp	r3, #0
   4dad8:	d0f4      	beq.n	4dac4 <dir_read.constprop.0+0x14>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   4dada:	7832      	ldrb	r2, [r6, #0]
   4dadc:	2a04      	cmp	r2, #4
   4dade:	d110      	bne.n	4db02 <dir_read.constprop.0+0x52>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
   4dae0:	2b85      	cmp	r3, #133	; 0x85
   4dae2:	d14e      	bne.n	4db82 <dir_read.constprop.0+0xd2>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
   4dae4:	6b23      	ldr	r3, [r4, #48]	; 0x30
					res = load_xdir(dp);	/* Load the entry block */
   4dae6:	4620      	mov	r0, r4
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
   4dae8:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
   4daea:	f00a fe8b 	bl	58804 <load_xdir>
					if (res == FR_OK) {
   4daee:	2800      	cmp	r0, #0
   4daf0:	d14d      	bne.n	4db8e <dir_read.constprop.0+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
   4daf2:	6933      	ldr	r3, [r6, #16]
   4daf4:	791b      	ldrb	r3, [r3, #4]
   4daf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4dafa:	71a3      	strb	r3, [r4, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   4dafc:	2000      	movs	r0, #0
}
   4dafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
   4db02:	7ac2      	ldrb	r2, [r0, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
   4db04:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
   4db06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   4db0a:	71a2      	strb	r2, [r4, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
   4db0c:	d044      	beq.n	4db98 <dir_read.constprop.0+0xe8>
   4db0e:	2b2e      	cmp	r3, #46	; 0x2e
   4db10:	d042      	beq.n	4db98 <dir_read.constprop.0+0xe8>
   4db12:	f022 0120 	bic.w	r1, r2, #32
   4db16:	2908      	cmp	r1, #8
   4db18:	d03e      	beq.n	4db98 <dir_read.constprop.0+0xe8>
				if (attr == AM_LFN) {	/* An LFN entry is found */
   4db1a:	2a0f      	cmp	r2, #15
   4db1c:	d141      	bne.n	4dba2 <dir_read.constprop.0+0xf2>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
   4db1e:	0659      	lsls	r1, r3, #25
   4db20:	d538      	bpl.n	4db94 <dir_read.constprop.0+0xe4>
						b &= (BYTE)~LLEF; ord = b;
   4db22:	f003 05bf 	and.w	r5, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
   4db26:	6b23      	ldr	r3, [r4, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
   4db28:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
   4db2a:	64e3      	str	r3, [r4, #76]	; 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4db2c:	7b43      	ldrb	r3, [r0, #13]
   4db2e:	42bb      	cmp	r3, r7
   4db30:	d132      	bne.n	4db98 <dir_read.constprop.0+0xe8>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
   4db32:	8b42      	ldrh	r2, [r0, #26]
   4db34:	bb82      	cbnz	r2, 4db98 <dir_read.constprop.0+0xe8>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
   4db36:	210d      	movs	r1, #13
   4db38:	7803      	ldrb	r3, [r0, #0]
			if (uc != 0xFFFF) return 0;		/* Check filler */
   4db3a:	f64f 79ff 	movw	r9, #65535	; 0xffff
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
   4db3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   4db42:	3b01      	subs	r3, #1
   4db44:	434b      	muls	r3, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4db46:	2101      	movs	r1, #1
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4db48:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4db4c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4dbb4 <dir_read.constprop.0+0x104>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
   4db50:	f818 cb01 	ldrb.w	ip, [r8], #1
	rv = ptr[1];
   4db54:	f830 c00c 	ldrh.w	ip, [r0, ip]
		if (wc != 0) {
   4db58:	b301      	cbz	r1, 4db9c <dir_read.constprop.0+0xec>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
   4db5a:	2bff      	cmp	r3, #255	; 0xff
   4db5c:	d81c      	bhi.n	4db98 <dir_read.constprop.0+0xe8>
	rv = rv << 8 | ptr[0];
   4db5e:	4661      	mov	r1, ip
			lfnbuf[i++] = wc = uc;			/* Store it */
   4db60:	f82e c013 	strh.w	ip, [lr, r3, lsl #1]
   4db64:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4db66:	3201      	adds	r2, #1
   4db68:	2a0d      	cmp	r2, #13
   4db6a:	d1f1      	bne.n	4db50 <dir_read.constprop.0+0xa0>
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
   4db6c:	7802      	ldrb	r2, [r0, #0]
   4db6e:	0652      	lsls	r2, r2, #25
   4db70:	d505      	bpl.n	4db7e <dir_read.constprop.0+0xce>
   4db72:	b121      	cbz	r1, 4db7e <dir_read.constprop.0+0xce>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
   4db74:	2bff      	cmp	r3, #255	; 0xff
   4db76:	d80f      	bhi.n	4db98 <dir_read.constprop.0+0xe8>
		lfnbuf[i] = 0;
   4db78:	2200      	movs	r2, #0
   4db7a:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4db7e:	3d01      	subs	r5, #1
   4db80:	b2ed      	uxtb	r5, r5
		res = dir_next(dp, 0);		/* Next entry */
   4db82:	2100      	movs	r1, #0
   4db84:	4620      	mov	r0, r4
   4db86:	f00a fd8e 	bl	586a6 <dir_next>
		if (res != FR_OK) break;
   4db8a:	2800      	cmp	r0, #0
   4db8c:	d097      	beq.n	4dabe <dir_read.constprop.0+0xe>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   4db8e:	2300      	movs	r3, #0
   4db90:	63a3      	str	r3, [r4, #56]	; 0x38
	return res;
   4db92:	e7b4      	b.n	4dafe <dir_read.constprop.0+0x4e>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4db94:	42ab      	cmp	r3, r5
   4db96:	d0c9      	beq.n	4db2c <dir_read.constprop.0+0x7c>
				ord = 0xFF;
   4db98:	25ff      	movs	r5, #255	; 0xff
   4db9a:	e7f2      	b.n	4db82 <dir_read.constprop.0+0xd2>
			if (uc != 0xFFFF) return 0;		/* Check filler */
   4db9c:	45cc      	cmp	ip, r9
   4db9e:	d0e2      	beq.n	4db66 <dir_read.constprop.0+0xb6>
   4dba0:	e7fa      	b.n	4db98 <dir_read.constprop.0+0xe8>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
   4dba2:	b91d      	cbnz	r5, 4dbac <dir_read.constprop.0+0xfc>
   4dba4:	f00a f816 	bl	57bd4 <sum_sfn>
   4dba8:	42b8      	cmp	r0, r7
   4dbaa:	d0a7      	beq.n	4dafc <dir_read.constprop.0+0x4c>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
   4dbac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4dbb0:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   4dbb2:	e7a3      	b.n	4dafc <dir_read.constprop.0+0x4c>
   4dbb4:	00060846 	.word	0x00060846

0004dbb8 <dir_find>:
{
   4dbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
   4dbbc:	2100      	movs	r1, #0
{
   4dbbe:	b087      	sub	sp, #28
   4dbc0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   4dbc2:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
   4dbc6:	f00a fa85 	bl	580d4 <dir_sdi>
	if (res != FR_OK) return res;
   4dbca:	4607      	mov	r7, r0
   4dbcc:	bb00      	cbnz	r0, 4dc10 <dir_find+0x58>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   4dbce:	f898 3000 	ldrb.w	r3, [r8]
   4dbd2:	2b04      	cmp	r3, #4
   4dbd4:	d13d      	bne.n	4dc52 <dir_find+0x9a>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
   4dbd6:	f8d8 000c 	ldr.w	r0, [r8, #12]
   4dbda:	f00a f96b 	bl	57eb4 <xname_sum>
   4dbde:	4681      	mov	r9, r0
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
   4dbe0:	4620      	mov	r0, r4
   4dbe2:	f7ff ff65 	bl	4dab0 <dir_read.constprop.0>
   4dbe6:	4605      	mov	r5, r0
   4dbe8:	b108      	cbz	r0, 4dbee <dir_find+0x36>
   4dbea:	4607      	mov	r7, r0
   4dbec:	e010      	b.n	4dc10 <dir_find+0x58>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
   4dbee:	f8d8 3010 	ldr.w	r3, [r8, #16]
   4dbf2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   4dbf4:	454a      	cmp	r2, r9
   4dbf6:	d1f3      	bne.n	4dbe0 <dir_find+0x28>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
   4dbf8:	f04f 0a40 	mov.w	sl, #64	; 0x40
   4dbfc:	f893 6023 	ldrb.w	r6, [r3, #35]	; 0x23
   4dc00:	42b5      	cmp	r5, r6
   4dc02:	d109      	bne.n	4dc18 <dir_find+0x60>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
   4dc04:	f8d8 300c 	ldr.w	r3, [r8, #12]
   4dc08:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   4dc0c:	2b00      	cmp	r3, #0
   4dc0e:	d1e7      	bne.n	4dbe0 <dir_find+0x28>
}
   4dc10:	4638      	mov	r0, r7
   4dc12:	b007      	add	sp, #28
   4dc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ((di % SZDIRE) == 0) di += 2;
   4dc18:	f01a 0f1f 	tst.w	sl, #31
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
   4dc1c:	f8d8 3010 	ldr.w	r3, [r8, #16]
				if ((di % SZDIRE) == 0) di += 2;
   4dc20:	bf08      	it	eq
   4dc22:	f10a 0a02 	addeq.w	sl, sl, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
   4dc26:	f833 000a 	ldrh.w	r0, [r3, sl]
   4dc2a:	f001 fb01 	bl	4f230 <ff_wtoupper>
   4dc2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   4dc32:	4683      	mov	fp, r0
   4dc34:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
   4dc38:	f001 fafa 	bl	4f230 <ff_wtoupper>
   4dc3c:	4583      	cmp	fp, r0
   4dc3e:	d103      	bne.n	4dc48 <dir_find+0x90>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
   4dc40:	f10a 0a02 	add.w	sl, sl, #2
   4dc44:	3501      	adds	r5, #1
   4dc46:	e7db      	b.n	4dc00 <dir_find+0x48>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
   4dc48:	1b76      	subs	r6, r6, r5
   4dc4a:	b2f6      	uxtb	r6, r6
   4dc4c:	2e00      	cmp	r6, #0
   4dc4e:	d1c7      	bne.n	4dbe0 <dir_find+0x28>
   4dc50:	e7d8      	b.n	4dc04 <dir_find+0x4c>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   4dc52:	f04f 09ff 	mov.w	r9, #255	; 0xff
   4dc56:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   4dc5a:	464d      	mov	r5, r9
   4dc5c:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		res = move_window(fs, dp->sect);
   4dc60:	4640      	mov	r0, r8
   4dc62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   4dc64:	f00a f94b 	bl	57efe <move_window>
		if (res != FR_OK) break;
   4dc68:	2800      	cmp	r0, #0
   4dc6a:	d15b      	bne.n	4dd24 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
   4dc6c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   4dc6e:	7833      	ldrb	r3, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   4dc70:	2b00      	cmp	r3, #0
   4dc72:	d076      	beq.n	4dd62 <dir_find+0x1aa>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
   4dc74:	7af1      	ldrb	r1, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   4dc76:	2be5      	cmp	r3, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
   4dc78:	f001 023f 	and.w	r2, r1, #63	; 0x3f
   4dc7c:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   4dc7e:	d003      	beq.n	4dc88 <dir_find+0xd0>
   4dc80:	0709      	lsls	r1, r1, #28
   4dc82:	d504      	bpl.n	4dc8e <dir_find+0xd6>
   4dc84:	2a0f      	cmp	r2, #15
   4dc86:	d004      	beq.n	4dc92 <dir_find+0xda>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   4dc88:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
   4dc8c:	e04e      	b.n	4dd2c <dir_find+0x174>
			if (a == AM_LFN) {			/* An LFN entry is found */
   4dc8e:	2a0f      	cmp	r2, #15
   4dc90:	d153      	bne.n	4dd3a <dir_find+0x182>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
   4dc92:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
   4dc96:	0650      	lsls	r0, r2, #25
   4dc98:	d43e      	bmi.n	4dd18 <dir_find+0x160>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
   4dc9a:	0659      	lsls	r1, r3, #25
   4dc9c:	d544      	bpl.n	4dd28 <dir_find+0x170>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
   4dc9e:	6b22      	ldr	r2, [r4, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
   4dca0:	f896 900d 	ldrb.w	r9, [r6, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
   4dca4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
   4dca8:	64e2      	str	r2, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4dcaa:	7b72      	ldrb	r2, [r6, #13]
   4dcac:	454a      	cmp	r2, r9
   4dcae:	d13d      	bne.n	4dd2c <dir_find+0x174>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
   4dcb0:	8b72      	ldrh	r2, [r6, #26]
   4dcb2:	2a00      	cmp	r2, #0
   4dcb4:	d13a      	bne.n	4dd2c <dir_find+0x174>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   4dcb6:	220d      	movs	r2, #13
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4dcb8:	2001      	movs	r0, #1
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   4dcba:	7835      	ldrb	r5, [r6, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4dcbc:	f8d8 b00c 	ldr.w	fp, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   4dcc0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   4dcc4:	3d01      	subs	r5, #1
   4dcc6:	4355      	muls	r5, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4dcc8:	4a27      	ldr	r2, [pc, #156]	; (4dd68 <dir_find+0x1b0>)
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
   4dcca:	f812 1b01 	ldrb.w	r1, [r2], #1
	rv = ptr[1];
   4dcce:	5a71      	ldrh	r1, [r6, r1]
		if (wc != 0) {
   4dcd0:	b370      	cbz	r0, 4dd30 <dir_find+0x178>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
   4dcd2:	2dff      	cmp	r5, #255	; 0xff
   4dcd4:	d82a      	bhi.n	4dd2c <dir_find+0x174>
   4dcd6:	4608      	mov	r0, r1
   4dcd8:	e9cd 3204 	strd	r3, r2, [sp, #16]
   4dcdc:	9103      	str	r1, [sp, #12]
   4dcde:	f001 faa7 	bl	4f230 <ff_wtoupper>
   4dce2:	1c6b      	adds	r3, r5, #1
   4dce4:	9001      	str	r0, [sp, #4]
   4dce6:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
   4dcea:	9302      	str	r3, [sp, #8]
   4dcec:	f001 faa0 	bl	4f230 <ff_wtoupper>
   4dcf0:	9b01      	ldr	r3, [sp, #4]
   4dcf2:	4283      	cmp	r3, r0
   4dcf4:	d11a      	bne.n	4dd2c <dir_find+0x174>
   4dcf6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
	rv = rv << 8 | ptr[0];
   4dcfa:	9903      	ldr	r1, [sp, #12]
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
   4dcfc:	9d02      	ldr	r5, [sp, #8]
	rv = rv << 8 | ptr[0];
   4dcfe:	4608      	mov	r0, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   4dd00:	491a      	ldr	r1, [pc, #104]	; (4dd6c <dir_find+0x1b4>)
   4dd02:	428a      	cmp	r2, r1
   4dd04:	d1e1      	bne.n	4dcca <dir_find+0x112>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
   4dd06:	7832      	ldrb	r2, [r6, #0]
   4dd08:	0652      	lsls	r2, r2, #25
   4dd0a:	d503      	bpl.n	4dd14 <dir_find+0x15c>
   4dd0c:	b110      	cbz	r0, 4dd14 <dir_find+0x15c>
   4dd0e:	f83b 2015 	ldrh.w	r2, [fp, r5, lsl #1]
   4dd12:	b95a      	cbnz	r2, 4dd2c <dir_find+0x174>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4dd14:	3b01      	subs	r3, #1
   4dd16:	b2dd      	uxtb	r5, r3
		res = dir_next(dp, 0);	/* Next entry */
   4dd18:	2100      	movs	r1, #0
   4dd1a:	4620      	mov	r0, r4
   4dd1c:	f00a fcc3 	bl	586a6 <dir_next>
	} while (res == FR_OK);
   4dd20:	2800      	cmp	r0, #0
   4dd22:	d09d      	beq.n	4dc60 <dir_find+0xa8>
   4dd24:	4607      	mov	r7, r0
   4dd26:	e773      	b.n	4dc10 <dir_find+0x58>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   4dd28:	429d      	cmp	r5, r3
   4dd2a:	d0be      	beq.n	4dcaa <dir_find+0xf2>
   4dd2c:	25ff      	movs	r5, #255	; 0xff
   4dd2e:	e7f3      	b.n	4dd18 <dir_find+0x160>
			if (uc != 0xFFFF) return 0;		/* Check filler */
   4dd30:	f64f 7cff 	movw	ip, #65535	; 0xffff
   4dd34:	4561      	cmp	r1, ip
   4dd36:	d0e3      	beq.n	4dd00 <dir_find+0x148>
   4dd38:	e7f8      	b.n	4dd2c <dir_find+0x174>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
   4dd3a:	b92d      	cbnz	r5, 4dd48 <dir_find+0x190>
   4dd3c:	4630      	mov	r0, r6
   4dd3e:	f009 ff49 	bl	57bd4 <sum_sfn>
   4dd42:	4548      	cmp	r0, r9
   4dd44:	f43f af64 	beq.w	4dc10 <dir_find+0x58>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
   4dd48:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   4dd4c:	07db      	lsls	r3, r3, #31
   4dd4e:	d49b      	bmi.n	4dc88 <dir_find+0xd0>
   4dd50:	220b      	movs	r2, #11
   4dd52:	4630      	mov	r0, r6
   4dd54:	f104 0140 	add.w	r1, r4, #64	; 0x40
   4dd58:	f00d f8b4 	bl	5aec4 <memcmp>
   4dd5c:	2800      	cmp	r0, #0
   4dd5e:	d193      	bne.n	4dc88 <dir_find+0xd0>
   4dd60:	e756      	b.n	4dc10 <dir_find+0x58>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   4dd62:	2704      	movs	r7, #4
   4dd64:	e754      	b.n	4dc10 <dir_find+0x58>
   4dd66:	bf00      	nop
   4dd68:	00060846 	.word	0x00060846
   4dd6c:	00060853 	.word	0x00060853

0004dd70 <dir_register>:
{
   4dd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
   4dd74:	f890 b04b 	ldrb.w	fp, [r0, #75]	; 0x4b
{
   4dd78:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
   4dd7a:	f01b 05a0 	ands.w	r5, fp, #160	; 0xa0
{
   4dd7e:	b099      	sub	sp, #100	; 0x64
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
   4dd80:	f040 81c4 	bne.w	4e10c <dir_register+0x39c>
	FATFS *fs = dp->obj.fs;
   4dd84:	6806      	ldr	r6, [r0, #0]
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
   4dd86:	68f2      	ldr	r2, [r6, #12]
   4dd88:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   4dd8c:	2b00      	cmp	r3, #0
   4dd8e:	d160      	bne.n	4de52 <dir_register+0xe2>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   4dd90:	7833      	ldrb	r3, [r6, #0]
   4dd92:	2b04      	cmp	r3, #4
   4dd94:	f040 809c 	bne.w	4ded0 <dir_register+0x160>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
   4dd98:	230f      	movs	r3, #15
   4dd9a:	350e      	adds	r5, #14
   4dd9c:	fbb5 f5f3 	udiv	r5, r5, r3
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
   4dda0:	4620      	mov	r0, r4
   4dda2:	1ca9      	adds	r1, r5, #2
   4dda4:	f00a fcdd 	bl	58762 <dir_alloc>
		if (res != FR_OK) return res;
   4dda8:	4680      	mov	r8, r0
   4ddaa:	2800      	cmp	r0, #0
   4ddac:	f040 808a 	bne.w	4dec4 <dir_register+0x154>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
   4ddb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   4ddb2:	3501      	adds	r5, #1
   4ddb4:	eba3 1345 	sub.w	r3, r3, r5, lsl #5
   4ddb8:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
   4ddba:	79e3      	ldrb	r3, [r4, #7]
   4ddbc:	075f      	lsls	r7, r3, #29
   4ddbe:	d54a      	bpl.n	4de56 <dir_register+0xe6>
			dp->obj.stat &= ~4;
   4ddc0:	f023 0304 	bic.w	r3, r3, #4
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
   4ddc4:	4620      	mov	r0, r4
			dp->obj.stat &= ~4;
   4ddc6:	71e3      	strb	r3, [r4, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
   4ddc8:	f00a fa63 	bl	58292 <fill_first_frag>
			if (res != FR_OK) return res;
   4ddcc:	2800      	cmp	r0, #0
   4ddce:	d13e      	bne.n	4de4e <dir_register+0xde>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
   4ddd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4ddd4:	4620      	mov	r0, r4
   4ddd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   4ddd8:	f00a fa43 	bl	58262 <fill_last_frag>
			if (res != FR_OK) return res;
   4dddc:	2800      	cmp	r0, #0
   4ddde:	d136      	bne.n	4de4e <dir_register+0xde>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
   4dde0:	68a3      	ldr	r3, [r4, #8]
   4dde2:	2b00      	cmp	r3, #0
   4dde4:	d037      	beq.n	4de56 <dir_register+0xe6>
	dp->obj.fs = obj->fs;
   4dde6:	6823      	ldr	r3, [r4, #0]
	dp->blk_ofs = obj->c_ofs;
   4dde8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	dp->obj.fs = obj->fs;
   4ddea:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
   4ddec:	6a23      	ldr	r3, [r4, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
   4ddee:	a804      	add	r0, sp, #16
	dp->obj.sclust = obj->c_scl;
   4ddf0:	9306      	str	r3, [sp, #24]
	dp->obj.stat = (BYTE)obj->c_size;
   4ddf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
	dp->obj.n_frag = 0;
   4ddf4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	dp->obj.stat = (BYTE)obj->c_size;
   4ddf8:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
   4ddfc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   4de00:	e9cd 3808 	strd	r3, r8, [sp, #32]
	dp->blk_ofs = obj->c_ofs;
   4de04:	9117      	str	r1, [sp, #92]	; 0x5c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
   4de06:	f00a f965 	bl	580d4 <dir_sdi>
	if (res == FR_OK) {
   4de0a:	bb00      	cbnz	r0, 4de4e <dir_register+0xde>
		res = load_xdir(dp);		/* Load the object's entry block */
   4de0c:	a804      	add	r0, sp, #16
   4de0e:	f00a fcf9 	bl	58804 <load_xdir>
				if (res != FR_OK) return res;
   4de12:	b9e0      	cbnz	r0, 4de4e <dir_register+0xde>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
   4de14:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   4de18:	f44f 7100 	mov.w	r1, #512	; 0x200
   4de1c:	8970      	ldrh	r0, [r6, #10]
   4de1e:	fbe0 2301 	umlal	r2, r3, r0, r1
   4de22:	e9c4 2304 	strd	r2, r3, [r4, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
   4de26:	6930      	ldr	r0, [r6, #16]
   4de28:	3038      	adds	r0, #56	; 0x38
   4de2a:	f009 feb9 	bl	57ba0 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
   4de2e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   4de32:	6930      	ldr	r0, [r6, #16]
   4de34:	3028      	adds	r0, #40	; 0x28
   4de36:	f009 feb3 	bl	57ba0 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
   4de3a:	79e3      	ldrb	r3, [r4, #7]
   4de3c:	6932      	ldr	r2, [r6, #16]
   4de3e:	f043 0301 	orr.w	r3, r3, #1
   4de42:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
   4de46:	a804      	add	r0, sp, #16
   4de48:	f00a fd48 	bl	588dc <store_xdir>
				if (res != FR_OK) return res;
   4de4c:	b118      	cbz	r0, 4de56 <dir_register+0xe6>
   4de4e:	4680      	mov	r8, r0
   4de50:	e038      	b.n	4dec4 <dir_register+0x154>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
   4de52:	3501      	adds	r5, #1
   4de54:	e798      	b.n	4dd88 <dir_register+0x18>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
   4de56:	e9d6 5403 	ldrd	r5, r4, [r6, #12]
   4de5a:	1c67      	adds	r7, r4, #1
   4de5c:	223f      	movs	r2, #63	; 0x3f
   4de5e:	2100      	movs	r1, #0
   4de60:	4638      	mov	r0, r7
   4de62:	f00d f879 	bl	5af58 <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
   4de66:	2385      	movs	r3, #133	; 0x85
   4de68:	7023      	strb	r3, [r4, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
   4de6a:	23c0      	movs	r3, #192	; 0xc0
   4de6c:	f884 3020 	strb.w	r3, [r4, #32]
	nlen = nc1 = 0; wc = 1;
   4de70:	2300      	movs	r3, #0
   4de72:	2001      	movs	r0, #1
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
   4de74:	4619      	mov	r1, r3
	i = SZDIRE * 2;	/* Top of file_name entries */
   4de76:	2240      	movs	r2, #64	; 0x40
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
   4de78:	f04f 0ec1 	mov.w	lr, #193	; 0xc1
   4de7c:	4699      	mov	r9, r3
   4de7e:	1c56      	adds	r6, r2, #1
   4de80:	f804 e002 	strb.w	lr, [r4, r2]
   4de84:	f804 9006 	strb.w	r9, [r4, r6]
   4de88:	3202      	adds	r2, #2
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
   4de8a:	b120      	cbz	r0, 4de96 <dir_register+0x126>
   4de8c:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
   4de90:	b108      	cbz	r0, 4de96 <dir_register+0x126>
   4de92:	3301      	adds	r3, #1
   4de94:	b2db      	uxtb	r3, r3
	*ptr++ = (BYTE)val; val >>= 8;
   4de96:	0a06      	lsrs	r6, r0, #8
   4de98:	54a0      	strb	r0, [r4, r2]
	*ptr++ = (BYTE)val;
   4de9a:	54be      	strb	r6, [r7, r2]
			i += 2;
   4de9c:	3202      	adds	r2, #2
		} while (i % SZDIRE != 0);
   4de9e:	06d6      	lsls	r6, r2, #27
   4dea0:	d1f3      	bne.n	4de8a <dir_register+0x11a>
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
   4dea2:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
   4dea6:	f101 0c01 	add.w	ip, r1, #1
   4deaa:	b97e      	cbnz	r6, 4decc <dir_register+0x15c>
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
   4deac:	3102      	adds	r1, #2
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
   4deae:	4628      	mov	r0, r5
	dirb[XDIR_NumName] = nlen;		/* Set name length */
   4deb0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
   4deb4:	7061      	strb	r1, [r4, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
   4deb6:	f009 fffd 	bl	57eb4 <xname_sum>
	*ptr++ = (BYTE)val; val >>= 8;
   4deba:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
   4debe:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
   4dec0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
}
   4dec4:	4640      	mov	r0, r8
   4dec6:	b019      	add	sp, #100	; 0x64
   4dec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4decc:	4661      	mov	r1, ip
   4dece:	e7d6      	b.n	4de7e <dir_register+0x10e>
	memcpy(sn, dp->fn, 12);
   4ded0:	f10d 0910 	add.w	r9, sp, #16
   4ded4:	f104 0740 	add.w	r7, r4, #64	; 0x40
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   4ded8:	f01b 0f01 	tst.w	fp, #1
	memcpy(sn, dp->fn, 12);
   4dedc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   4dee0:	e889 0007 	stmia.w	r9, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   4dee4:	d07b      	beq.n	4dfde <dir_register+0x26e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
   4dee6:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
   4dee8:	f04f 0a01 	mov.w	sl, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
   4deec:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4def0:	46bc      	mov	ip, r7
   4def2:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
   4def6:	68f3      	ldr	r3, [r6, #12]
   4def8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
   4defc:	f1ba 0f05 	cmp.w	sl, #5
   4df00:	f82c 2b02 	strh.w	r2, [ip], #2
   4df04:	ea4f 4212 	mov.w	r2, r2, lsr #16
   4df08:	f88c 2000 	strb.w	r2, [ip]
   4df0c:	d95e      	bls.n	4dfcc <dir_register+0x25c>
   4df0e:	4652      	mov	r2, sl
   4df10:	1e98      	subs	r0, r3, #2
		while (*lfn) {	/* Create a CRC as hash value */
   4df12:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   4df16:	2900      	cmp	r1, #0
   4df18:	d146      	bne.n	4dfa8 <dir_register+0x238>
   4df1a:	46cc      	mov	ip, r9
   4df1c:	2107      	movs	r1, #7
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
   4df1e:	f002 0e0f 	and.w	lr, r2, #15
   4df22:	f10e 0030 	add.w	r0, lr, #48	; 0x30
		if (c > '9') c += 7;
   4df26:	2839      	cmp	r0, #57	; 0x39
   4df28:	bf88      	it	hi
   4df2a:	f10e 0037 	addhi.w	r0, lr, #55	; 0x37
	} while (i && seq);
   4df2e:	3901      	subs	r1, #1
   4df30:	4690      	mov	r8, r2
		ns[i--] = c;
   4df32:	f80c 0d01 	strb.w	r0, [ip, #-1]!
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
   4df36:	ea4f 1212 	mov.w	r2, r2, lsr #4
	} while (i && seq);
   4df3a:	d002      	beq.n	4df42 <dir_register+0x1d2>
   4df3c:	f1b8 0f0f 	cmp.w	r8, #15
   4df40:	d8ed      	bhi.n	4df1e <dir_register+0x1ae>
	ns[i] = '~';
   4df42:	207e      	movs	r0, #126	; 0x7e
   4df44:	f101 0360 	add.w	r3, r1, #96	; 0x60
   4df48:	eb0d 0203 	add.w	r2, sp, r3
   4df4c:	f802 0c58 	strb.w	r0, [r2, #-88]
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
   4df50:	2200      	movs	r2, #0
   4df52:	f104 003f 	add.w	r0, r4, #63	; 0x3f
   4df56:	428a      	cmp	r2, r1
   4df58:	d006      	beq.n	4df68 <dir_register+0x1f8>
   4df5a:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   4df5e:	f102 0e01 	add.w	lr, r2, #1
   4df62:	f1bc 0f20 	cmp.w	ip, #32
   4df66:	d133      	bne.n	4dfd0 <dir_register+0x260>
   4df68:	323f      	adds	r2, #63	; 0x3f
   4df6a:	4422      	add	r2, r4
   4df6c:	f104 0c47 	add.w	ip, r4, #71	; 0x47
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   4df70:	2907      	cmp	r1, #7
   4df72:	bf8f      	iteee	hi
   4df74:	2020      	movhi	r0, #32
   4df76:	f101 0360 	addls.w	r3, r1, #96	; 0x60
   4df7a:	eb0d 0003 	addls.w	r0, sp, r3
   4df7e:	f810 0c58 	ldrbls.w	r0, [r0, #-88]
   4df82:	bf98      	it	ls
   4df84:	3101      	addls	r1, #1
   4df86:	f802 0f01 	strb.w	r0, [r2, #1]!
	} while (j < 8);
   4df8a:	4594      	cmp	ip, r2
   4df8c:	d1f0      	bne.n	4df70 <dir_register+0x200>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
   4df8e:	4620      	mov	r0, r4
   4df90:	f7ff fe12 	bl	4dbb8 <dir_find>
			if (res != FR_OK) break;
   4df94:	4680      	mov	r8, r0
   4df96:	b9e8      	cbnz	r0, 4dfd4 <dir_register+0x264>
		for (n = 1; n < 100; n++) {
   4df98:	f10a 0a01 	add.w	sl, sl, #1
   4df9c:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
   4dfa0:	d1a6      	bne.n	4def0 <dir_register+0x180>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   4dfa2:	f04f 0807 	mov.w	r8, #7
   4dfa6:	e78d      	b.n	4dec4 <dir_register+0x154>
   4dfa8:	f04f 0c10 	mov.w	ip, #16
				sreg = (sreg << 1) + (wc & 1);
   4dfac:	f001 0e01 	and.w	lr, r1, #1
   4dfb0:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
   4dfb4:	03d3      	lsls	r3, r2, #15
   4dfb6:	bf44      	itt	mi
   4dfb8:	f482 3288 	eormi.w	r2, r2, #69632	; 0x11000
   4dfbc:	f082 0221 	eormi.w	r2, r2, #33	; 0x21
			for (i = 0; i < 16; i++) {
   4dfc0:	f1bc 0c01 	subs.w	ip, ip, #1
				wc >>= 1;
   4dfc4:	ea4f 0151 	mov.w	r1, r1, lsr #1
			for (i = 0; i < 16; i++) {
   4dfc8:	d1f0      	bne.n	4dfac <dir_register+0x23c>
   4dfca:	e7a2      	b.n	4df12 <dir_register+0x1a2>
   4dfcc:	4652      	mov	r2, sl
   4dfce:	e7a4      	b.n	4df1a <dir_register+0x1aa>
   4dfd0:	4672      	mov	r2, lr
   4dfd2:	e7c0      	b.n	4df56 <dir_register+0x1e6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   4dfd4:	2804      	cmp	r0, #4
   4dfd6:	f47f af75 	bne.w	4dec4 <dir_register+0x154>
		dp->fn[NSFLAG] = sn[NSFLAG];
   4dfda:	f884 b04b 	strb.w	fp, [r4, #75]	; 0x4b
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
   4dfde:	f01b 0f02 	tst.w	fp, #2
   4dfe2:	bf1d      	ittte	ne
   4dfe4:	230d      	movne	r3, #13
   4dfe6:	350c      	addne	r5, #12
   4dfe8:	fbb5 f5f3 	udivne	r5, r5, r3
   4dfec:	2501      	moveq	r5, #1
   4dfee:	bf18      	it	ne
   4dff0:	3501      	addne	r5, #1
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
   4dff2:	4629      	mov	r1, r5
   4dff4:	4620      	mov	r0, r4
   4dff6:	f00a fbb4 	bl	58762 <dir_alloc>
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
   4dffa:	4680      	mov	r8, r0
   4dffc:	2800      	cmp	r0, #0
   4dffe:	f47f af61 	bne.w	4dec4 <dir_register+0x154>
   4e002:	3d01      	subs	r5, #1
   4e004:	d11d      	bne.n	4e042 <dir_register+0x2d2>
		res = move_window(fs, dp->sect);
   4e006:	4630      	mov	r0, r6
   4e008:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   4e00a:	f009 ff78 	bl	57efe <move_window>
		if (res == FR_OK) {
   4e00e:	4680      	mov	r8, r0
   4e010:	2800      	cmp	r0, #0
   4e012:	f47f af57 	bne.w	4dec4 <dir_register+0x154>
__ssp_bos_icheck3(memset, void *, int)
   4e016:	4601      	mov	r1, r0
   4e018:	2220      	movs	r2, #32
   4e01a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   4e01c:	f00c ff9c 	bl	5af58 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4e020:	cf03      	ldmia	r7!, {r0, r1}
   4e022:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   4e024:	6018      	str	r0, [r3, #0]
   4e026:	6059      	str	r1, [r3, #4]
   4e028:	78ba      	ldrb	r2, [r7, #2]
   4e02a:	8839      	ldrh	r1, [r7, #0]
   4e02c:	729a      	strb	r2, [r3, #10]
   4e02e:	8119      	strh	r1, [r3, #8]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
   4e030:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   4e034:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   4e036:	f003 0318 	and.w	r3, r3, #24
   4e03a:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
   4e03c:	2301      	movs	r3, #1
   4e03e:	70f3      	strb	r3, [r6, #3]
   4e040:	e740      	b.n	4dec4 <dir_register+0x154>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
   4e042:	6b21      	ldr	r1, [r4, #48]	; 0x30
   4e044:	4620      	mov	r0, r4
   4e046:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
   4e04a:	f00a f843 	bl	580d4 <dir_sdi>
		if (res == FR_OK) {
   4e04e:	4680      	mov	r8, r0
   4e050:	2800      	cmp	r0, #0
   4e052:	f47f af37 	bne.w	4dec4 <dir_register+0x154>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
   4e056:	4638      	mov	r0, r7
   4e058:	f009 fdbc 	bl	57bd4 <sum_sfn>
   4e05c:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
   4e05e:	4630      	mov	r0, r6
   4e060:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   4e062:	f009 ff4c 	bl	57efe <move_window>
   4e066:	4680      	mov	r8, r0
				if (res != FR_OK) break;
   4e068:	2800      	cmp	r0, #0
   4e06a:	f47f af2b 	bne.w	4dec4 <dir_register+0x154>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
   4e06e:	68f3      	ldr	r3, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
   4e070:	9a01      	ldr	r2, [sp, #4]
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
   4e072:	9300      	str	r3, [sp, #0]
   4e074:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
   4e076:	f04f 0c0d 	mov.w	ip, #13
	dir[LDIR_Chksum] = sum;			/* Set checksum */
   4e07a:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   4e07c:	f04f 020f 	mov.w	r2, #15
   4e080:	b2e9      	uxtb	r1, r5
   4e082:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
   4e084:	1e4a      	subs	r2, r1, #1
   4e086:	fb0c f202 	mul.w	r2, ip, r2
	*ptr++ = (BYTE)val; val >>= 8;
   4e08a:	f04f 09ff 	mov.w	r9, #255	; 0xff
	s = wc = 0;
   4e08e:	4684      	mov	ip, r0
   4e090:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4e114 <dir_register+0x3a4>
	dir[LDIR_Type] = 0;
   4e094:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
   4e096:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
   4e098:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
   4e09a:	f64f 7aff 	movw	sl, #65535	; 0xffff
		st_word(dir + LfnOfs[s], wc);		/* Put it */
   4e09e:	f818 eb01 	ldrb.w	lr, [r8], #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
   4e0a2:	4550      	cmp	r0, sl
   4e0a4:	eb03 0b0e 	add.w	fp, r3, lr
   4e0a8:	d120      	bne.n	4e0ec <dir_register+0x37c>
	*ptr++ = (BYTE)val; val >>= 8;
   4e0aa:	f803 900e 	strb.w	r9, [r3, lr]
	*ptr++ = (BYTE)val;
   4e0ae:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
   4e0b2:	f10c 0c01 	add.w	ip, ip, #1
   4e0b6:	f1bc 0f0d 	cmp.w	ip, #13
   4e0ba:	d1ee      	bne.n	4e09a <dir_register+0x32a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
   4e0bc:	f64f 7cff 	movw	ip, #65535	; 0xffff
   4e0c0:	4560      	cmp	r0, ip
   4e0c2:	d003      	beq.n	4e0cc <dir_register+0x35c>
   4e0c4:	9800      	ldr	r0, [sp, #0]
   4e0c6:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
   4e0ca:	b90a      	cbnz	r2, 4e0d0 <dir_register+0x360>
   4e0cc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   4e0d0:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
   4e0d2:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
   4e0d4:	2100      	movs	r1, #0
   4e0d6:	4620      	mov	r0, r4
				fs->wflag = 1;
   4e0d8:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
   4e0da:	f00a fae4 	bl	586a6 <dir_next>
			} while (res == FR_OK && --n_ent);
   4e0de:	4680      	mov	r8, r0
   4e0e0:	2800      	cmp	r0, #0
   4e0e2:	f47f aeef 	bne.w	4dec4 <dir_register+0x154>
   4e0e6:	3d01      	subs	r5, #1
   4e0e8:	d1b9      	bne.n	4e05e <dir_register+0x2ee>
   4e0ea:	e78c      	b.n	4e006 <dir_register+0x296>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
   4e0ec:	9800      	ldr	r0, [sp, #0]
   4e0ee:	f102 0a01 	add.w	sl, r2, #1
   4e0f2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
   4e0f6:	0a02      	lsrs	r2, r0, #8
   4e0f8:	f803 000e 	strb.w	r0, [r3, lr]
	*ptr++ = (BYTE)val;
   4e0fc:	f88b 2001 	strb.w	r2, [fp, #1]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
   4e100:	4652      	mov	r2, sl
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
   4e102:	2800      	cmp	r0, #0
   4e104:	d1d5      	bne.n	4e0b2 <dir_register+0x342>
   4e106:	f64f 70ff 	movw	r0, #65535	; 0xffff
   4e10a:	e7d2      	b.n	4e0b2 <dir_register+0x342>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
   4e10c:	f04f 0806 	mov.w	r8, #6
   4e110:	e6d8      	b.n	4dec4 <dir_register+0x154>
   4e112:	bf00      	nop
   4e114:	00060846 	.word	0x00060846

0004e118 <follow_path>:
{
   4e118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e11c:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
   4e11e:	6803      	ldr	r3, [r0, #0]
{
   4e120:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
   4e122:	9301      	str	r3, [sp, #4]
		while (IsSeparator(*path)) path++;	/* Strip separators */
   4e124:	468a      	mov	sl, r1
   4e126:	f811 3b01 	ldrb.w	r3, [r1], #1
   4e12a:	2b2f      	cmp	r3, #47	; 0x2f
   4e12c:	d0fa      	beq.n	4e124 <follow_path+0xc>
   4e12e:	2b5c      	cmp	r3, #92	; 0x5c
   4e130:	d0f8      	beq.n	4e124 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
   4e132:	2300      	movs	r3, #0
   4e134:	60ab      	str	r3, [r5, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
   4e136:	61eb      	str	r3, [r5, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
   4e138:	f89a 3000 	ldrb.w	r3, [sl]
   4e13c:	2b1f      	cmp	r3, #31
   4e13e:	f200 80e8 	bhi.w	4e312 <follow_path+0x1fa>
		dp->fn[NSFLAG] = NS_NONAME;
   4e142:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
   4e144:	2100      	movs	r1, #0
   4e146:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
   4e148:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
}
   4e14c:	b005      	add	sp, #20
   4e14e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
   4e152:	f009 bfbf 	b.w	580d4 <dir_sdi>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
   4e156:	4601      	mov	r1, r0
   4e158:	48a9      	ldr	r0, [pc, #676]	; (4e400 <follow_path+0x2e8>)
   4e15a:	f00d f89d 	bl	5b298 <strchr>
   4e15e:	2800      	cmp	r0, #0
   4e160:	f000 80f0 	beq.w	4e344 <follow_path+0x22c>
   4e164:	e0f1      	b.n	4e34a <follow_path+0x232>
		lfn[di++] = wc;				/* Store the Unicode character */
   4e166:	f82b 4017 	strh.w	r4, [fp, r7, lsl #1]
	for (;;) {
   4e16a:	3701      	adds	r7, #1
		uc = tchar2uni(&p);			/* Get a character */
   4e16c:	e0d5      	b.n	4e31a <follow_path+0x202>
		cf = NS_LAST;			/* Last segment */
   4e16e:	2404      	movs	r4, #4
   4e170:	e108      	b.n	4e384 <follow_path+0x26c>
		wc = lfn[di - 1];
   4e172:	f832 3017 	ldrh.w	r3, [r2, r7, lsl #1]
		if (wc != ' ' && wc != '.') break;
   4e176:	2b20      	cmp	r3, #32
   4e178:	d002      	beq.n	4e180 <follow_path+0x68>
   4e17a:	2b2e      	cmp	r3, #46	; 0x2e
   4e17c:	f040 8107 	bne.w	4e38e <follow_path+0x276>
		di--;
   4e180:	3f01      	subs	r7, #1
   4e182:	e101      	b.n	4e388 <follow_path+0x270>
		if (i >= ni || si == di) {		/* End of field? */
   4e184:	4599      	cmp	r9, r3
   4e186:	d204      	bcs.n	4e192 <follow_path+0x7a>
   4e188:	42ba      	cmp	r2, r7
   4e18a:	d148      	bne.n	4e21e <follow_path+0x106>
			if (ni == 11) {				/* Name extension overflow? */
   4e18c:	2b0b      	cmp	r3, #11
   4e18e:	d13d      	bne.n	4e20c <follow_path+0xf4>
   4e190:	e001      	b.n	4e196 <follow_path+0x7e>
   4e192:	2b0b      	cmp	r3, #11
   4e194:	d134      	bne.n	4e200 <follow_path+0xe8>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
   4e196:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   4e19a:	2be5      	cmp	r3, #229	; 0xe5
   4e19c:	d102      	bne.n	4e1a4 <follow_path+0x8c>
   4e19e:	2305      	movs	r3, #5
   4e1a0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
				cf |= NS_LOSS | NS_LFN;
   4e1a4:	f044 0403 	orr.w	r4, r4, #3
   4e1a8:	b2e4      	uxtb	r4, r4
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
   4e1aa:	f008 030c 	and.w	r3, r8, #12
   4e1ae:	2b0c      	cmp	r3, #12
   4e1b0:	d003      	beq.n	4e1ba <follow_path+0xa2>
   4e1b2:	f008 0303 	and.w	r3, r8, #3
   4e1b6:	2b03      	cmp	r3, #3
   4e1b8:	d102      	bne.n	4e1c0 <follow_path+0xa8>
   4e1ba:	f044 0402 	orr.w	r4, r4, #2
   4e1be:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
   4e1c0:	07a1      	lsls	r1, r4, #30
   4e1c2:	d40b      	bmi.n	4e1dc <follow_path+0xc4>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
   4e1c4:	f018 0f01 	tst.w	r8, #1
   4e1c8:	bf1c      	itt	ne
   4e1ca:	f044 0410 	orrne.w	r4, r4, #16
   4e1ce:	b2e4      	uxtbne	r4, r4
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
   4e1d0:	f018 0f04 	tst.w	r8, #4
   4e1d4:	bf1c      	itt	ne
   4e1d6:	f044 0408 	orrne.w	r4, r4, #8
   4e1da:	b2e4      	uxtbne	r4, r4
			res = dir_find(dp);				/* Find an object with the segment name */
   4e1dc:	4628      	mov	r0, r5
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
   4e1de:	f885 404b 	strb.w	r4, [r5, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
   4e1e2:	f7ff fce9 	bl	4dbb8 <dir_find>
			ns = dp->fn[NSFLAG];
   4e1e6:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
   4e1ea:	2800      	cmp	r0, #0
   4e1ec:	d07a      	beq.n	4e2e4 <follow_path+0x1cc>
				if (res == FR_NO_FILE) {	/* Object is not found */
   4e1ee:	2804      	cmp	r0, #4
   4e1f0:	d103      	bne.n	4e1fa <follow_path+0xe2>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   4e1f2:	f013 0f04 	tst.w	r3, #4
   4e1f6:	bf08      	it	eq
   4e1f8:	2005      	moveq	r0, #5
}
   4e1fa:	b005      	add	sp, #20
   4e1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
   4e200:	42ba      	cmp	r2, r7
   4e202:	d003      	beq.n	4e20c <follow_path+0xf4>
   4e204:	f044 0403 	orr.w	r4, r4, #3
   4e208:	b2e4      	uxtb	r4, r4
			if (si > di) break;						/* No name extension? */
   4e20a:	d85d      	bhi.n	4e2c8 <follow_path+0x1b0>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
   4e20c:	ea4f 0888 	mov.w	r8, r8, lsl #2
			continue;
   4e210:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
   4e212:	230b      	movs	r3, #11
   4e214:	f04f 0908 	mov.w	r9, #8
   4e218:	fa5f f888 	uxtb.w	r8, r8
			continue;
   4e21c:	e0ee      	b.n	4e3fc <follow_path+0x2e4>
		if (wc >= 0x80) {	/* Is this an extended character? */
   4e21e:	2e7f      	cmp	r6, #127	; 0x7f
   4e220:	d93e      	bls.n	4e2a0 <follow_path+0x188>
			cf |= NS_LFN;	/* LFN entry needs to be created */
   4e222:	f044 0102 	orr.w	r1, r4, #2
   4e226:	e9cd 2302 	strd	r2, r3, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
   4e22a:	4630      	mov	r0, r6
			cf |= NS_LFN;	/* LFN entry needs to be created */
   4e22c:	b2cb      	uxtb	r3, r1
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
   4e22e:	f240 11b5 	movw	r1, #437	; 0x1b5
			cf |= NS_LFN;	/* LFN entry needs to be created */
   4e232:	9300      	str	r3, [sp, #0]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
   4e234:	f000 ffca 	bl	4f1cc <ff_uni2oem>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
   4e238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   4e23c:	f010 0f80 	tst.w	r0, #128	; 0x80
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
   4e240:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
   4e242:	d014      	beq.n	4e26e <follow_path+0x156>
   4e244:	496f      	ldr	r1, [pc, #444]	; (4e404 <follow_path+0x2ec>)
   4e246:	f000 067f 	and.w	r6, r0, #127	; 0x7f
   4e24a:	5d8e      	ldrb	r6, [r1, r6]
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
   4e24c:	b146      	cbz	r6, 4e260 <follow_path+0x148>
   4e24e:	4631      	mov	r1, r6
   4e250:	486d      	ldr	r0, [pc, #436]	; (4e408 <follow_path+0x2f0>)
   4e252:	e9cd 2302 	strd	r2, r3, [sp, #8]
   4e256:	f00d f81f 	bl	5b298 <strchr>
   4e25a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   4e25e:	b308      	cbz	r0, 4e2a4 <follow_path+0x18c>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   4e260:	9900      	ldr	r1, [sp, #0]
   4e262:	265f      	movs	r6, #95	; 0x5f
   4e264:	f041 0103 	orr.w	r1, r1, #3
   4e268:	b2c9      	uxtb	r1, r1
   4e26a:	9100      	str	r1, [sp, #0]
   4e26c:	e010      	b.n	4e290 <follow_path+0x178>
		if (wc >= 0x100) {				/* Is this a DBC? */
   4e26e:	28ff      	cmp	r0, #255	; 0xff
   4e270:	d9ec      	bls.n	4e24c <follow_path+0x134>
			if (i >= ni - 1) {			/* Field overflow? */
   4e272:	1e59      	subs	r1, r3, #1
   4e274:	4589      	cmp	r9, r1
   4e276:	d304      	bcc.n	4e282 <follow_path+0x16a>
				cf |= NS_LOSS | NS_LFN;
   4e278:	f044 0403 	orr.w	r4, r4, #3
				i = ni; continue;		/* Next field */
   4e27c:	4699      	mov	r9, r3
				cf |= NS_LOSS | NS_LFN;
   4e27e:	b2e4      	uxtb	r4, r4
				i = ni; continue;		/* Next field */
   4e280:	e0bc      	b.n	4e3fc <follow_path+0x2e4>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
   4e282:	eb05 0109 	add.w	r1, r5, r9
   4e286:	0a00      	lsrs	r0, r0, #8
   4e288:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
   4e28c:	f109 0901 	add.w	r9, r9, #1
		dp->fn[i++] = (BYTE)wc;
   4e290:	eb05 0109 	add.w	r1, r5, r9
   4e294:	9c00      	ldr	r4, [sp, #0]
   4e296:	f881 6040 	strb.w	r6, [r1, #64]	; 0x40
   4e29a:	f109 0901 	add.w	r9, r9, #1
   4e29e:	e0ad      	b.n	4e3fc <follow_path+0x2e4>
   4e2a0:	9400      	str	r4, [sp, #0]
   4e2a2:	e7d4      	b.n	4e24e <follow_path+0x136>
				if (IsUpper(wc)) {		/* ASCII upper case? */
   4e2a4:	f1a6 0141 	sub.w	r1, r6, #65	; 0x41
   4e2a8:	b289      	uxth	r1, r1
   4e2aa:	2919      	cmp	r1, #25
   4e2ac:	d802      	bhi.n	4e2b4 <follow_path+0x19c>
					b |= 2;
   4e2ae:	f048 0802 	orr.w	r8, r8, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
   4e2b2:	e7ed      	b.n	4e290 <follow_path+0x178>
   4e2b4:	f1a6 0161 	sub.w	r1, r6, #97	; 0x61
   4e2b8:	b289      	uxth	r1, r1
   4e2ba:	2919      	cmp	r1, #25
					b |= 1; wc -= 0x20;
   4e2bc:	bf9e      	ittt	ls
   4e2be:	3e20      	subls	r6, #32
   4e2c0:	f048 0801 	orrls.w	r8, r8, #1
   4e2c4:	b2b6      	uxthls	r6, r6
   4e2c6:	e7e3      	b.n	4e290 <follow_path+0x178>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
   4e2c8:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   4e2cc:	2ae5      	cmp	r2, #229	; 0xe5
   4e2ce:	bf04      	itt	eq
   4e2d0:	2205      	moveq	r2, #5
   4e2d2:	f885 2040 	strbeq.w	r2, [r5, #64]	; 0x40
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
   4e2d6:	2b08      	cmp	r3, #8
   4e2d8:	bf04      	itt	eq
   4e2da:	ea4f 0888 	moveq.w	r8, r8, lsl #2
   4e2de:	fa5f f888 	uxtbeq.w	r8, r8
   4e2e2:	e762      	b.n	4e1aa <follow_path+0x92>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
   4e2e4:	075a      	lsls	r2, r3, #29
   4e2e6:	d488      	bmi.n	4e1fa <follow_path+0xe2>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
   4e2e8:	79ab      	ldrb	r3, [r5, #6]
   4e2ea:	06db      	lsls	r3, r3, #27
   4e2ec:	d53a      	bpl.n	4e364 <follow_path+0x24c>
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
   4e2ee:	9b01      	ldr	r3, [sp, #4]
   4e2f0:	7818      	ldrb	r0, [r3, #0]
   4e2f2:	2804      	cmp	r0, #4
   4e2f4:	d12b      	bne.n	4e34e <follow_path+0x236>
				dp->obj.c_scl = dp->obj.sclust;
   4e2f6:	68ab      	ldr	r3, [r5, #8]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   4e2f8:	79ea      	ldrb	r2, [r5, #7]
				dp->obj.c_scl = dp->obj.sclust;
   4e2fa:	622b      	str	r3, [r5, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   4e2fc:	692b      	ldr	r3, [r5, #16]
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
   4e2fe:	4629      	mov	r1, r5
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   4e300:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   4e304:	4313      	orrs	r3, r2
   4e306:	626b      	str	r3, [r5, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
   4e308:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
   4e30a:	9801      	ldr	r0, [sp, #4]
				dp->obj.c_ofs = dp->blk_ofs;
   4e30c:	62ab      	str	r3, [r5, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
   4e30e:	f009 fc85 	bl	57c1c <init_alloc_info>
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
   4e312:	2700      	movs	r7, #0
   4e314:	682b      	ldr	r3, [r5, #0]
   4e316:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	wc = (BYTE)*p++;			/* Get a byte */
   4e31a:	f81a 0b01 	ldrb.w	r0, [sl], #1
	if (wc != 0) {
   4e31e:	2800      	cmp	r0, #0
   4e320:	f43f af25 	beq.w	4e16e <follow_path+0x56>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
   4e324:	f240 11b5 	movw	r1, #437	; 0x1b5
   4e328:	f000 ff6e 	bl	4f208 <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
   4e32c:	4604      	mov	r4, r0
   4e32e:	b160      	cbz	r0, 4e34a <follow_path+0x232>
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
   4e330:	281f      	cmp	r0, #31
   4e332:	f67f af1c 	bls.w	4e16e <follow_path+0x56>
   4e336:	282f      	cmp	r0, #47	; 0x2f
   4e338:	d016      	beq.n	4e368 <follow_path+0x250>
   4e33a:	285c      	cmp	r0, #92	; 0x5c
   4e33c:	d014      	beq.n	4e368 <follow_path+0x250>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
   4e33e:	287f      	cmp	r0, #127	; 0x7f
   4e340:	f67f af09 	bls.w	4e156 <follow_path+0x3e>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
   4e344:	2fff      	cmp	r7, #255	; 0xff
   4e346:	f47f af0e 	bne.w	4e166 <follow_path+0x4e>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   4e34a:	2006      	movs	r0, #6
   4e34c:	e755      	b.n	4e1fa <follow_path+0xe2>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
   4e34e:	9b01      	ldr	r3, [sp, #4]
   4e350:	f103 013c 	add.w	r1, r3, #60	; 0x3c
   4e354:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   4e356:	f3c3 0308 	ubfx	r3, r3, #0, #9
   4e35a:	4419      	add	r1, r3
   4e35c:	f00a faed 	bl	5893a <ld_clust.isra.0>
   4e360:	60a8      	str	r0, [r5, #8]
   4e362:	e7d6      	b.n	4e312 <follow_path+0x1fa>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   4e364:	2005      	movs	r0, #5
	return res;
   4e366:	e748      	b.n	4e1fa <follow_path+0xe2>
	if (wc < ' ') {				/* Stopped at end of the path? */
   4e368:	4653      	mov	r3, sl
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
   4e36a:	781c      	ldrb	r4, [r3, #0]
   4e36c:	469a      	mov	sl, r3
   4e36e:	2c2f      	cmp	r4, #47	; 0x2f
   4e370:	f103 0301 	add.w	r3, r3, #1
   4e374:	d0f9      	beq.n	4e36a <follow_path+0x252>
   4e376:	2c5c      	cmp	r4, #92	; 0x5c
   4e378:	d0f7      	beq.n	4e36a <follow_path+0x252>
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
   4e37a:	2c1f      	cmp	r4, #31
   4e37c:	bf8c      	ite	hi
   4e37e:	2400      	movhi	r4, #0
   4e380:	2401      	movls	r4, #1
   4e382:	00a4      	lsls	r4, r4, #2
		wc = lfn[di - 1];
   4e384:	f1ab 0202 	sub.w	r2, fp, #2
	while (di) {					/* Snip off trailing spaces and dots if exist */
   4e388:	2f00      	cmp	r7, #0
   4e38a:	f47f aef2 	bne.w	4e172 <follow_path+0x5a>
	lfn[di] = 0;							/* LFN is created into the working buffer */
   4e38e:	f04f 0300 	mov.w	r3, #0
   4e392:	f82b 3017 	strh.w	r3, [fp, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
   4e396:	2f00      	cmp	r7, #0
   4e398:	d0d7      	beq.n	4e34a <follow_path+0x232>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
   4e39a:	2300      	movs	r3, #0
   4e39c:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
   4e3a0:	4619      	mov	r1, r3
   4e3a2:	2a20      	cmp	r2, #32
   4e3a4:	f103 0301 	add.w	r3, r3, #1
   4e3a8:	d0f8      	beq.n	4e39c <follow_path+0x284>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
   4e3aa:	b909      	cbnz	r1, 4e3b0 <follow_path+0x298>
   4e3ac:	2a2e      	cmp	r2, #46	; 0x2e
   4e3ae:	d102      	bne.n	4e3b6 <follow_path+0x29e>
   4e3b0:	f044 0403 	orr.w	r4, r4, #3
   4e3b4:	b2e4      	uxtb	r4, r4
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
   4e3b6:	f1ab 0202 	sub.w	r2, fp, #2
   4e3ba:	f832 3017 	ldrh.w	r3, [r2, r7, lsl #1]
   4e3be:	2b2e      	cmp	r3, #46	; 0x2e
   4e3c0:	d001      	beq.n	4e3c6 <follow_path+0x2ae>
   4e3c2:	3f01      	subs	r7, #1
   4e3c4:	d1f9      	bne.n	4e3ba <follow_path+0x2a2>
__ssp_bos_icheck3(memset, void *, int)
   4e3c6:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   4e3ca:	f04f 0900 	mov.w	r9, #0
   4e3ce:	646b      	str	r3, [r5, #68]	; 0x44
   4e3d0:	642b      	str	r3, [r5, #64]	; 0x40
   4e3d2:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
   4e3d6:	46c8      	mov	r8, r9
   4e3d8:	2308      	movs	r3, #8
		wc = lfn[si++];					/* Get an LFN character */
   4e3da:	f83b 6011 	ldrh.w	r6, [fp, r1, lsl #1]
   4e3de:	1c4a      	adds	r2, r1, #1
		if (wc == 0) break;				/* Break on end of the LFN */
   4e3e0:	2e00      	cmp	r6, #0
   4e3e2:	f43f af71 	beq.w	4e2c8 <follow_path+0x1b0>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
   4e3e6:	2e20      	cmp	r6, #32
   4e3e8:	d005      	beq.n	4e3f6 <follow_path+0x2de>
   4e3ea:	2e2e      	cmp	r6, #46	; 0x2e
   4e3ec:	f47f aeca 	bne.w	4e184 <follow_path+0x6c>
   4e3f0:	42ba      	cmp	r2, r7
   4e3f2:	f43f aecb 	beq.w	4e18c <follow_path+0x74>
			cf |= NS_LOSS | NS_LFN;
   4e3f6:	f044 0403 	orr.w	r4, r4, #3
   4e3fa:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)wc;
   4e3fc:	4611      	mov	r1, r2
   4e3fe:	e7ec      	b.n	4e3da <follow_path+0x2c2>
   4e400:	00060782 	.word	0x00060782
   4e404:	000607c6 	.word	0x000607c6
   4e408:	0006078b 	.word	0x0006078b

0004e40c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
   4e40c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   4e40e:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
   4e412:	a803      	add	r0, sp, #12
{
   4e414:	4614      	mov	r4, r2
	const TCHAR *rp = path;
   4e416:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
   4e418:	f7ff f8b6 	bl	4d588 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
   4e41c:	2800      	cmp	r0, #0
   4e41e:	db15      	blt.n	4e44c <f_mount+0x40>
	cfs = FatFs[vol];					/* Pointer to fs object */
   4e420:	4a0b      	ldr	r2, [pc, #44]	; (4e450 <f_mount+0x44>)
   4e422:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]

	if (cfs) {
   4e426:	b10b      	cbz	r3, 4e42c <f_mount+0x20>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
   4e428:	2100      	movs	r1, #0
   4e42a:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
   4e42c:	9b01      	ldr	r3, [sp, #4]
   4e42e:	b10b      	cbz	r3, 4e434 <f_mount+0x28>
		fs->fs_type = 0;				/* Clear new fs object */
   4e430:	2100      	movs	r1, #0
   4e432:	7019      	strb	r1, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
   4e434:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
   4e438:	b12c      	cbz	r4, 4e446 <f_mount+0x3a>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
   4e43a:	2200      	movs	r2, #0
   4e43c:	4668      	mov	r0, sp
   4e43e:	a901      	add	r1, sp, #4
   4e440:	f7ff f964 	bl	4d70c <mount_volume>
   4e444:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
}
   4e446:	4620      	mov	r0, r4
   4e448:	b004      	add	sp, #16
   4e44a:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
   4e44c:	240b      	movs	r4, #11
   4e44e:	e7fa      	b.n	4e446 <f_mount+0x3a>
   4e450:	2001b874 	.word	0x2001b874

0004e454 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
   4e454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e458:	b099      	sub	sp, #100	; 0x64
   4e45a:	9011      	str	r0, [sp, #68]	; 0x44
	DSTATUS ds;
	FRESULT fr;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
   4e45c:	a811      	add	r0, sp, #68	; 0x44
{
   4e45e:	460d      	mov	r5, r1
   4e460:	4614      	mov	r4, r2
   4e462:	9306      	str	r3, [sp, #24]
	vol = get_ldnumber(&path);					/* Get target logical drive */
   4e464:	f7ff f890 	bl	4d588 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
   4e468:	2800      	cmp	r0, #0
   4e46a:	f2c0 863d 	blt.w	4f0e8 <f_mkfs+0xc94>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
   4e46e:	4bad      	ldr	r3, [pc, #692]	; (4e724 <f_mkfs+0x2d0>)
   4e470:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   4e474:	b10b      	cbz	r3, 4e47a <f_mkfs+0x26>
   4e476:	2200      	movs	r2, #0
   4e478:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);			/* Physical drive */
   4e47a:	b2c3      	uxtb	r3, r0
   4e47c:	9300      	str	r3, [sp, #0]
	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
   4e47e:	4baa      	ldr	r3, [pc, #680]	; (4e728 <f_mkfs+0x2d4>)

	/* Get physical drive status (sz_drv, sz_blk, ss) */
	ds = disk_initialize(pdrv);
   4e480:	9800      	ldr	r0, [sp, #0]
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
   4e482:	2d00      	cmp	r5, #0
   4e484:	bf08      	it	eq
   4e486:	461d      	moveq	r5, r3
	ds = disk_initialize(pdrv);
   4e488:	f000 fe4e 	bl	4f128 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
   4e48c:	07c1      	lsls	r1, r0, #31
   4e48e:	f100 862e 	bmi.w	4f0ee <f_mkfs+0xc9a>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
   4e492:	0742      	lsls	r2, r0, #29
   4e494:	f100 862e 	bmi.w	4f0f4 <f_mkfs+0xca0>
	sz_blk = opt->align;
   4e498:	686b      	ldr	r3, [r5, #4]
   4e49a:	9312      	str	r3, [sp, #72]	; 0x48
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
   4e49c:	b93b      	cbnz	r3, 4e4ae <f_mkfs+0x5a>
   4e49e:	2103      	movs	r1, #3
   4e4a0:	9800      	ldr	r0, [sp, #0]
   4e4a2:	aa12      	add	r2, sp, #72	; 0x48
   4e4a4:	f000 fe64 	bl	4f170 <disk_ioctl>
   4e4a8:	b108      	cbz	r0, 4e4ae <f_mkfs+0x5a>
   4e4aa:	2301      	movs	r3, #1
   4e4ac:	9312      	str	r3, [sp, #72]	; 0x48
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
   4e4ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
   4e4b0:	1e53      	subs	r3, r2, #1
   4e4b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   4e4b6:	d201      	bcs.n	4e4bc <f_mkfs+0x68>
   4e4b8:	421a      	tst	r2, r3
   4e4ba:	d001      	beq.n	4e4c0 <f_mkfs+0x6c>
   4e4bc:	2301      	movs	r3, #1
   4e4be:	9312      	str	r3, [sp, #72]	; 0x48
#else
	ss = FF_MAX_SS;
#endif
	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
   4e4c0:	786b      	ldrb	r3, [r5, #1]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
   4e4c2:	f8d5 9008 	ldr.w	r9, [r5, #8]
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
   4e4c6:	9302      	str	r3, [sp, #8]
   4e4c8:	3b01      	subs	r3, #1
   4e4ca:	2b01      	cmp	r3, #1
   4e4cc:	9b02      	ldr	r3, [sp, #8]
   4e4ce:	bf88      	it	hi
   4e4d0:	2301      	movhi	r3, #1
   4e4d2:	9302      	str	r3, [sp, #8]
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
   4e4d4:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   4e4d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   4e4dc:	d22b      	bcs.n	4e536 <f_mkfs+0xe2>
   4e4de:	f019 0f0f 	tst.w	r9, #15
   4e4e2:	bf18      	it	ne
   4e4e4:	f44f 7900 	movne.w	r9, #512	; 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
   4e4e8:	68ee      	ldr	r6, [r5, #12]
   4e4ea:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
   4e4ee:	d825      	bhi.n	4e53c <f_mkfs+0xe8>
   4e4f0:	1e73      	subs	r3, r6, #1
   4e4f2:	4233      	tst	r3, r6
   4e4f4:	bf18      	it	ne
   4e4f6:	2600      	movne	r6, #0
	sz_au /= ss;	/* Byte --> Sector */

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
   4e4f8:	9b06      	ldr	r3, [sp, #24]
   4e4fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   4e4fe:	f0c0 85fc 	bcc.w	4f0fa <f_mkfs+0xca6>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
   4e502:	2c00      	cmp	r4, #0
   4e504:	f000 85f9 	beq.w	4f0fa <f_mkfs+0xca6>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
   4e508:	2300      	movs	r3, #0
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e50a:	2101      	movs	r1, #1
   4e50c:	9800      	ldr	r0, [sp, #0]
   4e50e:	aa13      	add	r2, sp, #76	; 0x4c
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
   4e510:	782f      	ldrb	r7, [r5, #0]
	b_vol = sz_vol = 0;
   4e512:	9313      	str	r3, [sp, #76]	; 0x4c
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e514:	f000 fe2c 	bl	4f170 <disk_ioctl>
   4e518:	2800      	cmp	r0, #0
   4e51a:	f040 818f 	bne.w	4e83c <f_mkfs+0x3e8>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
   4e51e:	f017 0308 	ands.w	r3, r7, #8
   4e522:	9309      	str	r3, [sp, #36]	; 0x24
   4e524:	d10c      	bne.n	4e540 <f_mkfs+0xec>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
   4e526:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   4e528:	2b3f      	cmp	r3, #63	; 0x3f
   4e52a:	d924      	bls.n	4e576 <f_mkfs+0x122>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
   4e52c:	3b3f      	subs	r3, #63	; 0x3f
   4e52e:	9313      	str	r3, [sp, #76]	; 0x4c
   4e530:	233f      	movs	r3, #63	; 0x3f
	b_vol = sz_vol = 0;
   4e532:	9301      	str	r3, [sp, #4]
   4e534:	e005      	b.n	4e542 <f_mkfs+0xee>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
   4e536:	f44f 7900 	mov.w	r9, #512	; 0x200
   4e53a:	e7d5      	b.n	4e4e8 <f_mkfs+0x94>
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
   4e53c:	2600      	movs	r6, #0
   4e53e:	e7db      	b.n	4e4f8 <f_mkfs+0xa4>
	b_vol = sz_vol = 0;
   4e540:	9001      	str	r0, [sp, #4]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
   4e542:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   4e546:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
   4e54a:	d912      	bls.n	4e572 <f_mkfs+0x11e>
	sz_buf = len / ss;		/* Size of working buffer [sector] */
   4e54c:	9b06      	ldr	r3, [sp, #24]
	sz_au /= ss;	/* Byte --> Sector */
   4e54e:	0a75      	lsrs	r5, r6, #9
	sz_buf = len / ss;		/* Size of working buffer [sector] */
   4e550:	0a5b      	lsrs	r3, r3, #9
   4e552:	9304      	str	r3, [sp, #16]

	/* Now start to create an FAT volume at b_vol and sz_vol */

	do {	/* Pre-determine the FAT type */
		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
   4e554:	077b      	lsls	r3, r7, #29
   4e556:	d57e      	bpl.n	4e656 <f_mkfs+0x202>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64MS or sz_au > 128S ? */
   4e558:	f007 0307 	and.w	r3, r7, #7
   4e55c:	2b04      	cmp	r3, #4
   4e55e:	d10c      	bne.n	4e57a <f_mkfs+0x126>
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
		fsty = FS_FAT16;
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e560:	f108 43a0 	add.w	r3, r8, #1342177280	; 0x50000000
   4e564:	f503 1304 	add.w	r3, r3, #2162688	; 0x210000
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
		DWORD szb_bit, szb_case, sum, nbit, clu, clen[3];
		WCHAR ch, si;
		UINT j, st;

		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
   4e568:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e56c:	9302      	str	r3, [sp, #8]
		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
   4e56e:	f080 811a 	bcs.w	4e7a6 <f_mkfs+0x352>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
   4e572:	200e      	movs	r0, #14
   4e574:	e163      	b.n	4e83e <f_mkfs+0x3ea>
	b_vol = sz_vol = 0;
   4e576:	9b09      	ldr	r3, [sp, #36]	; 0x24
   4e578:	e7db      	b.n	4e532 <f_mkfs+0xde>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64MS or sz_au > 128S ? */
   4e57a:	f1b8 6f80 	cmp.w	r8, #67108864	; 0x4000000
   4e57e:	d35e      	bcc.n	4e63e <f_mkfs+0x1ea>
#endif
		/* Determine FAT location, data location and number of clusters */
		if (sz_au == 0) {	/* AU auto-selection */
			sz_au = 8;
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
   4e580:	2d00      	cmp	r5, #0
   4e582:	bf08      	it	eq
   4e584:	f44f 7580 	moveq.w	r5, #256	; 0x100
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e588:	f108 43a0 	add.w	r3, r8, #1342177280	; 0x50000000
   4e58c:	f503 1304 	add.w	r3, r3, #2162688	; 0x210000
   4e590:	9302      	str	r3, [sp, #8]
		}
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
   4e592:	9b01      	ldr	r3, [sp, #4]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
   4e594:	9912      	ldr	r1, [sp, #72]	; 0x48
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
   4e596:	3320      	adds	r3, #32
   4e598:	9307      	str	r3, [sp, #28]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
   4e59a:	fbb8 f3f5 	udiv	r3, r8, r5
   4e59e:	009b      	lsls	r3, r3, #2
   4e5a0:	f203 2307 	addw	r3, r3, #519	; 0x207
   4e5a4:	0a5a      	lsrs	r2, r3, #9
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
   4e5a6:	9807      	ldr	r0, [sp, #28]
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
   4e5a8:	920e      	str	r2, [sp, #56]	; 0x38
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
   4e5aa:	1e4a      	subs	r2, r1, #1
   4e5ac:	4402      	add	r2, r0
   4e5ae:	eb02 2353 	add.w	r3, r2, r3, lsr #9
   4e5b2:	4249      	negs	r1, r1
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   4e5b4:	9a01      	ldr	r2, [sp, #4]
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
   4e5b6:	400b      	ands	r3, r1
   4e5b8:	9303      	str	r3, [sp, #12]
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   4e5ba:	1a9b      	subs	r3, r3, r2
   4e5bc:	ebb3 0f58 	cmp.w	r3, r8, lsr #1
   4e5c0:	930d      	str	r3, [sp, #52]	; 0x34
   4e5c2:	d2d6      	bcs.n	4e572 <f_mkfs+0x11e>
		n_clst = (DWORD)(sz_vol - (b_data - b_vol)) / sz_au;	/* Number of clusters */
   4e5c4:	9b03      	ldr	r3, [sp, #12]
   4e5c6:	4490      	add	r8, r2
   4e5c8:	eba8 0803 	sub.w	r8, r8, r3
   4e5cc:	fbb8 f3f5 	udiv	r3, r8, r5
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
   4e5d0:	f1a3 0210 	sub.w	r2, r3, #16
		n_clst = (DWORD)(sz_vol - (b_data - b_vol)) / sz_au;	/* Number of clusters */
   4e5d4:	930c      	str	r3, [sp, #48]	; 0x30
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
   4e5d6:	4b55      	ldr	r3, [pc, #340]	; (4e72c <f_mkfs+0x2d8>)
   4e5d8:	429a      	cmp	r2, r3
   4e5da:	d8ca      	bhi.n	4e572 <f_mkfs+0x11e>
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */

		/* Create a compressed up-case table */
		sect = b_data + sz_au * clen[0];	/* Table start sector */
		sum = 0;							/* Table checksum to be stored in the 82 entry */
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
   4e5dc:	f04f 0800 	mov.w	r8, #0
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
   4e5e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
   4e5e2:	ea4f 2945 	mov.w	r9, r5, lsl #9
		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
   4e5e6:	3307      	adds	r3, #7
   4e5e8:	08da      	lsrs	r2, r3, #3
   4e5ea:	920f      	str	r2, [sp, #60]	; 0x3c
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
   4e5ec:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   4e5f0:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
   4e5f4:	fbb3 f3f9 	udiv	r3, r3, r9
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
   4e5f8:	4647      	mov	r7, r8
   4e5fa:	4646      	mov	r6, r8
   4e5fc:	46c2      	mov	sl, r8
		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
   4e5fe:	9305      	str	r3, [sp, #20]
   4e600:	9210      	str	r2, [sp, #64]	; 0x40
   4e602:	9315      	str	r3, [sp, #84]	; 0x54
		sect = b_data + sz_au * clen[0];	/* Table start sector */
   4e604:	9a05      	ldr	r2, [sp, #20]
   4e606:	9b03      	ldr	r3, [sp, #12]
		sum = 0;							/* Table checksum to be stored in the 82 entry */
   4e608:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
		sect = b_data + sz_au * clen[0];	/* Table start sector */
   4e60c:	fb05 3302 	mla	r3, r5, r2, r3
   4e610:	930a      	str	r3, [sp, #40]	; 0x28
				st = 0;
			}
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
			i += 2; szb_case += 2;
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4e612:	9b06      	ldr	r3, [sp, #24]
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
   4e614:	f8cd 8020 	str.w	r8, [sp, #32]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4e618:	f423 7bff 	bic.w	fp, r3, #510	; 0x1fe
   4e61c:	f02b 0b01 	bic.w	fp, fp, #1
			switch (st) {
   4e620:	f1b8 0f00 	cmp.w	r8, #0
   4e624:	f000 80ce 	beq.w	4e7c4 <f_mkfs+0x370>
   4e628:	f1b8 0f01 	cmp.w	r8, #1
   4e62c:	f000 80dc 	beq.w	4e7e8 <f_mkfs+0x394>
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
   4e630:	fa16 f687 	uxtah	r6, r6, r7
				st = 0;
   4e634:	f04f 0800 	mov.w	r8, #0
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
   4e638:	b2b8      	uxth	r0, r7
   4e63a:	b2b6      	uxth	r6, r6
				st = 0;
   4e63c:	e0dd      	b.n	4e7fa <f_mkfs+0x3a6>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64MS or sz_au > 128S ? */
   4e63e:	f5b6 3f81 	cmp.w	r6, #66048	; 0x10200
   4e642:	d30c      	bcc.n	4e65e <f_mkfs+0x20a>
		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
   4e644:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
   4e648:	d393      	bcc.n	4e572 <f_mkfs+0x11e>
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e64a:	f108 43a0 	add.w	r3, r8, #1342177280	; 0x50000000
   4e64e:	f503 1304 	add.w	r3, r3, #2162688	; 0x210000
   4e652:	9302      	str	r3, [sp, #8]
   4e654:	e79d      	b.n	4e592 <f_mkfs+0x13e>
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
   4e656:	f5b6 3f81 	cmp.w	r6, #66048	; 0x10200
   4e65a:	bf28      	it	cs
   4e65c:	2580      	movcs	r5, #128	; 0x80
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
   4e65e:	f017 0202 	ands.w	r2, r7, #2
   4e662:	f007 0301 	and.w	r3, r7, #1
   4e666:	9208      	str	r2, [sp, #32]
   4e668:	d064      	beq.n	4e734 <f_mkfs+0x2e0>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
   4e66a:	2b00      	cmp	r3, #0
   4e66c:	d165      	bne.n	4e73a <f_mkfs+0x2e6>
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e66e:	9912      	ldr	r1, [sp, #72]	; 0x48
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e670:	f108 4ba0 	add.w	fp, r8, #1342177280	; 0x50000000
   4e674:	1e4b      	subs	r3, r1, #1
   4e676:	930b      	str	r3, [sp, #44]	; 0x2c
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e678:	424b      	negs	r3, r1
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e67a:	f50b 1b04 	add.w	fp, fp, #2162688	; 0x210000
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
   4e67e:	f3c9 1e16 	ubfx	lr, r9, #4, #23
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e682:	930a      	str	r3, [sp, #40]	; 0x28
				if (pau == 0) {	/* AU auto-selection */
   4e684:	2d00      	cmp	r5, #0
   4e686:	f000 82f2 	beq.w	4ec6e <f_mkfs+0x81a>
			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
			if (fsty == FS_FAT32) {
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   4e68a:	462a      	mov	r2, r5
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
   4e68c:	fbb8 f3f5 	udiv	r3, r8, r5
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
   4e690:	0098      	lsls	r0, r3, #2
   4e692:	f200 2007 	addw	r0, r0, #519	; 0x207
   4e696:	0a41      	lsrs	r1, r0, #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
   4e698:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
   4e69c:	4824      	ldr	r0, [pc, #144]	; (4e730 <f_mkfs+0x2dc>)
   4e69e:	3bf6      	subs	r3, #246	; 0xf6
   4e6a0:	4283      	cmp	r3, r0
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
   4e6a2:	9103      	str	r1, [sp, #12]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
   4e6a4:	f63f af65 	bhi.w	4e572 <f_mkfs+0x11e>
				sz_dir = 0;		/* No static directory */
   4e6a8:	2300      	movs	r3, #0
				sz_rsv = 32;	/* Number of reserved sectors */
   4e6aa:	f04f 0a20 	mov.w	sl, #32
   4e6ae:	2603      	movs	r6, #3
				sz_dir = 0;		/* No static directory */
   4e6b0:	9307      	str	r3, [sp, #28]
			b_fat = b_vol + sz_rsv;						/* FAT base */
   4e6b2:	9b01      	ldr	r3, [sp, #4]
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
   4e6b4:	2e03      	cmp	r6, #3
			b_fat = b_vol + sz_rsv;						/* FAT base */
   4e6b6:	eb03 070a 	add.w	r7, r3, sl
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
   4e6ba:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   4e6be:	fb01 7003 	mla	r0, r1, r3, r7
   4e6c2:	9b07      	ldr	r3, [sp, #28]
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e6c4:	990a      	ldr	r1, [sp, #40]	; 0x28
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
   4e6c6:	4418      	add	r0, r3
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   4e6ca:	4403      	add	r3, r0
   4e6cc:	ea03 0301 	and.w	r3, r3, r1
   4e6d0:	eba3 0300 	sub.w	r3, r3, r0
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
   4e6d4:	f040 82e0 	bne.w	4ec98 <f_mkfs+0x844>
				sz_rsv += n; b_fat += n;
   4e6d8:	449a      	add	sl, r3
   4e6da:	441f      	add	r7, r3
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   4e6dc:	9b01      	ldr	r3, [sp, #4]
   4e6de:	ebc3 1305 	rsb	r3, r3, r5, lsl #4
   4e6e2:	4403      	add	r3, r0
   4e6e4:	4598      	cmp	r8, r3
   4e6e6:	f4ff af44 	bcc.w	4e572 <f_mkfs+0x11e>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
   4e6ea:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   4e6ee:	9b07      	ldr	r3, [sp, #28]
			if (fsty == FS_FAT32) {
   4e6f0:	2e03      	cmp	r6, #3
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
   4e6f2:	eba8 0303 	sub.w	r3, r8, r3
   4e6f6:	eba3 030a 	sub.w	r3, r3, sl
   4e6fa:	fb00 3311 	mls	r3, r0, r1, r3
   4e6fe:	fbb3 f3f5 	udiv	r3, r3, r5
   4e702:	9305      	str	r3, [sp, #20]
			if (fsty == FS_FAT32) {
   4e704:	f040 82db 	bne.w	4ecbe <f_mkfs+0x86a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
   4e708:	f64f 73f5 	movw	r3, #65525	; 0xfff5
   4e70c:	9905      	ldr	r1, [sp, #20]
   4e70e:	4299      	cmp	r1, r3
   4e710:	f200 8302 	bhi.w	4ed18 <f_mkfs+0x8c4>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   4e714:	2a00      	cmp	r2, #0
   4e716:	f47f af2c 	bne.w	4e572 <f_mkfs+0x11e>
   4e71a:	2d01      	cmp	r5, #1
   4e71c:	f67f af29 	bls.w	4e572 <f_mkfs+0x11e>
   4e720:	086d      	lsrs	r5, r5, #1
   4e722:	e7b2      	b.n	4e68a <f_mkfs+0x236>
   4e724:	2001b874 	.word	0x2001b874
   4e728:	0005c574 	.word	0x0005c574
   4e72c:	7fffffed 	.word	0x7fffffed
   4e730:	0ffeffff 	.word	0x0ffeffff
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
   4e734:	2b00      	cmp	r3, #0
   4e736:	f000 84e3 	beq.w	4f100 <f_mkfs+0xcac>
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e73a:	9912      	ldr	r1, [sp, #72]	; 0x48
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e73c:	f108 4ba0 	add.w	fp, r8, #1342177280	; 0x50000000
   4e740:	1e4b      	subs	r3, r1, #1
   4e742:	930b      	str	r3, [sp, #44]	; 0x2c
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e744:	424b      	negs	r3, r1
	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
   4e746:	f50b 1b04 	add.w	fp, fp, #2162688	; 0x210000
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
   4e74a:	f3c9 1e16 	ubfx	lr, r9, #4, #23
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   4e74e:	930a      	str	r3, [sp, #40]	; 0x28
				if (pau == 0) {	/* au auto-selection */
   4e750:	2d00      	cmp	r5, #0
   4e752:	f040 829f 	bne.w	4ec94 <f_mkfs+0x840>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   4e756:	2301      	movs	r3, #1
   4e758:	4878      	ldr	r0, [pc, #480]	; (4e93c <f_mkfs+0x4e8>)
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
   4e75a:	ea4f 3618 	mov.w	r6, r8, lsr #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   4e75e:	f830 2b02 	ldrh.w	r2, [r0], #2
   4e762:	b112      	cbz	r2, 4e76a <f_mkfs+0x316>
   4e764:	42b2      	cmp	r2, r6
   4e766:	f240 8293 	bls.w	4ec90 <f_mkfs+0x83c>
				n_clst = (DWORD)sz_vol / pau;
   4e76a:	fbb8 f2f3 	udiv	r2, r8, r3
				if (n_clst > MAX_FAT12) {
   4e76e:	f640 70f5 	movw	r0, #4085	; 0xff5
   4e772:	4282      	cmp	r2, r0
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   4e774:	bf9b      	ittet	ls
   4e776:	eb02 0242 	addls.w	r2, r2, r2, lsl #1
   4e77a:	3201      	addls	r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
   4e77c:	3202      	addhi	r2, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   4e77e:	0852      	lsrls	r2, r2, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
   4e780:	bf8c      	ite	hi
   4e782:	0052      	lslhi	r2, r2, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   4e784:	3203      	addls	r2, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   4e786:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   4e78a:	ea4f 2252 	mov.w	r2, r2, lsr #9
   4e78e:	9203      	str	r2, [sp, #12]
   4e790:	bf88      	it	hi
   4e792:	2602      	movhi	r6, #2
   4e794:	462a      	mov	r2, r5
					fsty = FS_FAT12;
   4e796:	bf98      	it	ls
   4e798:	2601      	movls	r6, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   4e79a:	461d      	mov	r5, r3
				sz_rsv = 1;						/* Number of reserved sectors */
   4e79c:	f04f 0a01 	mov.w	sl, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   4e7a0:	f8cd e01c 	str.w	lr, [sp, #28]
   4e7a4:	e785      	b.n	4e6b2 <f_mkfs+0x25e>
		if (sz_au == 0) {	/* AU auto-selection */
   4e7a6:	2d00      	cmp	r5, #0
   4e7a8:	f47f aef3 	bne.w	4e592 <f_mkfs+0x13e>
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
   4e7ac:	f5b8 2f00 	cmp.w	r8, #524288	; 0x80000
   4e7b0:	d306      	bcc.n	4e7c0 <f_mkfs+0x36c>
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
   4e7b2:	f1b8 6f80 	cmp.w	r8, #67108864	; 0x4000000
   4e7b6:	bf34      	ite	cc
   4e7b8:	2540      	movcc	r5, #64	; 0x40
   4e7ba:	f44f 7580 	movcs.w	r5, #256	; 0x100
   4e7be:	e6e8      	b.n	4e592 <f_mkfs+0x13e>
			sz_au = 8;
   4e7c0:	2508      	movs	r5, #8
   4e7c2:	e6e6      	b.n	4e592 <f_mkfs+0x13e>
				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
   4e7c4:	4630      	mov	r0, r6
   4e7c6:	f000 fd33 	bl	4f230 <ff_wtoupper>
   4e7ca:	b280      	uxth	r0, r0
					si++; break;		/* Store the up-case char if exist */
   4e7cc:	1c72      	adds	r2, r6, #1
				if (ch != si) {
   4e7ce:	4286      	cmp	r6, r0
					si++; break;		/* Store the up-case char if exist */
   4e7d0:	b292      	uxth	r2, r2
				if (ch != si) {
   4e7d2:	d13e      	bne.n	4e852 <f_mkfs+0x3fe>
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
   4e7d4:	2701      	movs	r7, #1
   4e7d6:	eb06 0807 	add.w	r8, r6, r7
   4e7da:	fa1f f888 	uxth.w	r8, r8
   4e7de:	f1b8 0f00 	cmp.w	r8, #0
   4e7e2:	d12f      	bne.n	4e844 <f_mkfs+0x3f0>
				if (j >= 128) {
   4e7e4:	2f7f      	cmp	r7, #127	; 0x7f
   4e7e6:	d836      	bhi.n	4e856 <f_mkfs+0x402>
				if (--j == 0) st = 0;
   4e7e8:	3f01      	subs	r7, #1
   4e7ea:	bf14      	ite	ne
   4e7ec:	f04f 0801 	movne.w	r8, #1
   4e7f0:	f04f 0800 	moveq.w	r8, #0
				ch = si++;		/* Fill the short run */
   4e7f4:	1c72      	adds	r2, r6, #1
				if (--j == 0) st = 0;
   4e7f6:	4630      	mov	r0, r6
				ch = si++;		/* Fill the short run */
   4e7f8:	b296      	uxth	r6, r2
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4e7fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);	/* Put it into the write buffer */
   4e7fc:	b2c2      	uxtb	r2, r0
   4e7fe:	f804 200a 	strb.w	r2, [r4, sl]
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
   4e802:	f3c0 200f 	ubfx	r0, r0, #8, #16
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4e806:	eb02 0273 	add.w	r2, r2, r3, ror #1
   4e80a:	eb00 0372 	add.w	r3, r0, r2, ror #1
   4e80e:	930b      	str	r3, [sp, #44]	; 0x2c
			i += 2; szb_case += 2;
   4e810:	9b08      	ldr	r3, [sp, #32]
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
   4e812:	eb04 010a 	add.w	r1, r4, sl
			i += 2; szb_case += 2;
   4e816:	3302      	adds	r3, #2
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
   4e818:	7048      	strb	r0, [r1, #1]
			i += 2; szb_case += 2;
   4e81a:	9308      	str	r3, [sp, #32]
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4e81c:	b11e      	cbz	r6, 4e826 <f_mkfs+0x3d2>
			i += 2; szb_case += 2;
   4e81e:	f10a 0002 	add.w	r0, sl, #2
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4e822:	4558      	cmp	r0, fp
   4e824:	d120      	bne.n	4e868 <f_mkfs+0x414>
				n = (i + ss - 1) / ss;
   4e826:	f20a 2301 	addw	r3, sl, #513	; 0x201
   4e82a:	ea4f 2a53 	mov.w	sl, r3, lsr #9
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e82e:	4653      	mov	r3, sl
   4e830:	4621      	mov	r1, r4
   4e832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   4e834:	9800      	ldr	r0, [sp, #0]
   4e836:	f000 fc8f 	bl	4f158 <disk_write>
   4e83a:	b188      	cbz	r0, 4e860 <f_mkfs+0x40c>
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   4e83c:	2001      	movs	r0, #1
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);

	LEAVE_MKFS(FR_OK);
}
   4e83e:	b019      	add	sp, #100	; 0x64
   4e840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
   4e844:	4640      	mov	r0, r8
   4e846:	f000 fcf3 	bl	4f230 <ff_wtoupper>
   4e84a:	4580      	cmp	r8, r0
   4e84c:	d1ca      	bne.n	4e7e4 <f_mkfs+0x390>
   4e84e:	3701      	adds	r7, #1
   4e850:	e7c1      	b.n	4e7d6 <f_mkfs+0x382>
					si++; break;		/* Store the up-case char if exist */
   4e852:	4616      	mov	r6, r2
   4e854:	e7d1      	b.n	4e7fa <f_mkfs+0x3a6>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 chars */
   4e856:	f04f 0802 	mov.w	r8, #2
   4e85a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   4e85e:	e7cc      	b.n	4e7fa <f_mkfs+0x3a6>
		} while (si);
   4e860:	b126      	cbz	r6, 4e86c <f_mkfs+0x418>
				sect += n; i = 0;
   4e862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   4e864:	4453      	add	r3, sl
   4e866:	930a      	str	r3, [sp, #40]	; 0x28
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
   4e868:	4682      	mov	sl, r0
   4e86a:	e6d9      	b.n	4e620 <f_mkfs+0x1cc>
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
   4e86c:	9a08      	ldr	r2, [sp, #32]
   4e86e:	9b10      	ldr	r3, [sp, #64]	; 0x40
		clen[2] = 1;	/* Number of root dir clusters */
   4e870:	f04f 0a01 	mov.w	sl, #1
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
   4e874:	4413      	add	r3, r2
   4e876:	fbb3 f3f9 	udiv	r3, r3, r9
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
   4e87a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
   4e87c:	9316      	str	r3, [sp, #88]	; 0x58
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
   4e87e:	f202 16ff 	addw	r6, r2, #511	; 0x1ff
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
   4e882:	9a05      	ldr	r2, [sp, #20]
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
   4e884:	f8dd 900c 	ldr.w	r9, [sp, #12]
		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case and root-dir) */
   4e888:	18d3      	adds	r3, r2, r3
   4e88a:	930a      	str	r3, [sp, #40]	; 0x28
   4e88c:	eb03 0b0a 	add.w	fp, r3, sl
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
   4e890:	9b06      	ldr	r3, [sp, #24]
		clen[2] = 1;	/* Number of root dir clusters */
   4e892:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
   4e896:	f423 78ff 	bic.w	r8, r3, #510	; 0x1fe
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors */
   4e89a:	0a76      	lsrs	r6, r6, #9
			memset(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
   4e89c:	f028 0801 	bic.w	r8, r8, #1
   4e8a0:	4642      	mov	r2, r8
   4e8a2:	2100      	movs	r1, #0
   4e8a4:	4620      	mov	r0, r4
   4e8a6:	f00c fb57 	bl	5af58 <memset>
   4e8aa:	465f      	mov	r7, fp
   4e8ac:	ebab 0307 	sub.w	r3, fp, r7
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
   4e8b0:	b127      	cbz	r7, 4e8bc <f_mkfs+0x468>
   4e8b2:	ebb8 0fd3 	cmp.w	r8, r3, lsr #3
   4e8b6:	ea4f 02d3 	mov.w	r2, r3, lsr #3
   4e8ba:	d834      	bhi.n	4e926 <f_mkfs+0x4d2>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
   4e8bc:	9b04      	ldr	r3, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e8be:	464a      	mov	r2, r9
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
   4e8c0:	42b3      	cmp	r3, r6
   4e8c2:	bf28      	it	cs
   4e8c4:	4633      	movcs	r3, r6
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e8c6:	4621      	mov	r1, r4
   4e8c8:	9800      	ldr	r0, [sp, #0]
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
   4e8ca:	469b      	mov	fp, r3
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e8cc:	f000 fc44 	bl	4f158 <disk_write>
   4e8d0:	2800      	cmp	r0, #0
   4e8d2:	d1b3      	bne.n	4e83c <f_mkfs+0x3e8>
		} while (nsect);
   4e8d4:	ebb6 060b 	subs.w	r6, r6, fp
			sect += n; nsect -= n;
   4e8d8:	44d9      	add	r9, fp
		} while (nsect);
   4e8da:	d122      	bne.n	4e922 <f_mkfs+0x4ce>
		j = nbit = clu = 0;
   4e8dc:	46b3      	mov	fp, r6
   4e8de:	46b2      	mov	sl, r6
	*ptr++ = (BYTE)val; val >>= 8;
   4e8e0:	f04f 09ff 	mov.w	r9, #255	; 0xff
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
   4e8e4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   4e8e6:	4642      	mov	r2, r8
   4e8e8:	2100      	movs	r1, #0
   4e8ea:	4620      	mov	r0, r4
   4e8ec:	f00c fb34 	bl	5af58 <memset>
			if (clu == 0) {	/* Initialize FAT [0] and FAT[1] */
   4e8f0:	f1bb 0f00 	cmp.w	fp, #0
   4e8f4:	d120      	bne.n	4e938 <f_mkfs+0x4e4>
	*ptr++ = (BYTE)val; val >>= 8;
   4e8f6:	f06f 0307 	mvn.w	r3, #7
				st_dword(buf + i, 0xFFFFFFFF); i += 4; clu++;
   4e8fa:	f04f 0b02 	mov.w	fp, #2
   4e8fe:	2208      	movs	r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
   4e900:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   4e902:	f884 9001 	strb.w	r9, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
   4e906:	f884 9002 	strb.w	r9, [r4, #2]
	*ptr++ = (BYTE)val;
   4e90a:	f884 9003 	strb.w	r9, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   4e90e:	f884 9004 	strb.w	r9, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   4e912:	f884 9005 	strb.w	r9, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
   4e916:	f884 9006 	strb.w	r9, [r4, #6]
	*ptr++ = (BYTE)val;
   4e91a:	f884 9007 	strb.w	r9, [r4, #7]
				st_dword(buf + i, 0xFFFFFFFF); i += 4; clu++;
   4e91e:	4633      	mov	r3, r6
   4e920:	e02d      	b.n	4e97e <f_mkfs+0x52a>
   4e922:	46bb      	mov	fp, r7
   4e924:	e7bc      	b.n	4e8a0 <f_mkfs+0x44c>
			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark used clusters */
   4e926:	5ca1      	ldrb	r1, [r4, r2]
   4e928:	f003 0307 	and.w	r3, r3, #7
   4e92c:	fa0a f303 	lsl.w	r3, sl, r3
   4e930:	430b      	orrs	r3, r1
   4e932:	54a3      	strb	r3, [r4, r2]
   4e934:	3f01      	subs	r7, #1
   4e936:	e7b9      	b.n	4e8ac <f_mkfs+0x458>
			memset(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
   4e938:	2200      	movs	r2, #0
   4e93a:	e7f0      	b.n	4e91e <f_mkfs+0x4ca>
   4e93c:	0005c970 	.word	0x0005c970
				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
   4e940:	2e02      	cmp	r6, #2
   4e942:	d821      	bhi.n	4e988 <f_mkfs+0x534>
   4e944:	a918      	add	r1, sp, #96	; 0x60
   4e946:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   4e94a:	f853 ac0c 	ldr.w	sl, [r3, #-12]
   4e94e:	3601      	adds	r6, #1
			} while (nbit != 0 && i < sz_buf * ss);
   4e950:	f1ba 0f00 	cmp.w	sl, #0
   4e954:	d018      	beq.n	4e988 <f_mkfs+0x534>
   4e956:	4590      	cmp	r8, r2
   4e958:	d916      	bls.n	4e988 <f_mkfs+0x534>
				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
   4e95a:	4633      	mov	r3, r6
					st_dword(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
   4e95c:	f1ba 0f01 	cmp.w	sl, #1
   4e960:	f10b 0b01 	add.w	fp, fp, #1
   4e964:	eb04 0002 	add.w	r0, r4, r2
   4e968:	bf14      	ite	ne
   4e96a:	4659      	movne	r1, fp
   4e96c:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   4e970:	9306      	str	r3, [sp, #24]
   4e972:	f009 f90d 	bl	57b90 <st_dword>
					i += 4; clu++; nbit--;
   4e976:	9b06      	ldr	r3, [sp, #24]
   4e978:	3204      	adds	r2, #4
   4e97a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				while (nbit != 0 && i < sz_buf * ss) {	/* Create a chain */
   4e97e:	f1ba 0f00 	cmp.w	sl, #0
   4e982:	d0dd      	beq.n	4e940 <f_mkfs+0x4ec>
   4e984:	4590      	cmp	r8, r2
   4e986:	d8e9      	bhi.n	4e95c <f_mkfs+0x508>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
   4e988:	9b04      	ldr	r3, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e98a:	4621      	mov	r1, r4
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
   4e98c:	42bb      	cmp	r3, r7
   4e98e:	bf28      	it	cs
   4e990:	463b      	movcs	r3, r7
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4e992:	9a07      	ldr	r2, [sp, #28]
   4e994:	9800      	ldr	r0, [sp, #0]
   4e996:	9306      	str	r3, [sp, #24]
   4e998:	f000 fbde 	bl	4f158 <disk_write>
   4e99c:	2800      	cmp	r0, #0
   4e99e:	f47f af4d 	bne.w	4e83c <f_mkfs+0x3e8>
			sect += n; nsect -= n;
   4e9a2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   4e9a6:	441a      	add	r2, r3
		} while (nsect);
   4e9a8:	1aff      	subs	r7, r7, r3
			sect += n; nsect -= n;
   4e9aa:	9207      	str	r2, [sp, #28]
		} while (nsect);
   4e9ac:	d19b      	bne.n	4e8e6 <f_mkfs+0x492>
   4e9ae:	4639      	mov	r1, r7
   4e9b0:	4642      	mov	r2, r8
   4e9b2:	4620      	mov	r0, r4
   4e9b4:	f00c fad0 	bl	5af58 <memset>
		buf[SZDIRE * 0 + 0] = ET_VLABEL;				/* Volume label entry (no label) */
   4e9b8:	2383      	movs	r3, #131	; 0x83
   4e9ba:	7023      	strb	r3, [r4, #0]
		buf[SZDIRE * 1 + 0] = ET_BITMAP;				/* Bitmap entry */
   4e9bc:	2381      	movs	r3, #129	; 0x81
   4e9be:	f884 3020 	strb.w	r3, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
   4e9c2:	2302      	movs	r3, #2
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
   4e9c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
   4e9c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
   4e9ca:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
   4e9ce:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
   4e9d2:	f884 7037 	strb.w	r7, [r4, #55]	; 0x37
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);		/*  size */
   4e9d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   4e9da:	f009 f8d9 	bl	57b90 <st_dword>
		buf[SZDIRE * 2 + 0] = ET_UPCASE;				/* Up-case table entry */
   4e9de:	2382      	movs	r3, #130	; 0x82
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
   4e9e0:	462f      	mov	r7, r5
		st_dword(buf + SZDIRE * 2 + 4, sum);			/*  sum */
   4e9e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
		buf[SZDIRE * 2 + 0] = ET_UPCASE;				/* Up-case table entry */
   4e9e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		st_dword(buf + SZDIRE * 2 + 4, sum);			/*  sum */
   4e9e8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   4e9ec:	f009 f8d0 	bl	57b90 <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + clen[0]);	/*  cluster */
   4e9f0:	9905      	ldr	r1, [sp, #20]
   4e9f2:	f104 0354 	add.w	r3, r4, #84	; 0x54
   4e9f6:	4618      	mov	r0, r3
   4e9f8:	3102      	adds	r1, #2
   4e9fa:	9306      	str	r3, [sp, #24]
   4e9fc:	f009 f8c8 	bl	57b90 <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);		/*  size */
   4ea00:	f104 0358 	add.w	r3, r4, #88	; 0x58
   4ea04:	4618      	mov	r0, r3
   4ea06:	9908      	ldr	r1, [sp, #32]
   4ea08:	9305      	str	r3, [sp, #20]
   4ea0a:	f009 f8c1 	bl	57b90 <st_dword>
		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
   4ea0e:	9b03      	ldr	r3, [sp, #12]
   4ea10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   4ea12:	fb05 3602 	mla	r6, r5, r2, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4ea16:	9b04      	ldr	r3, [sp, #16]
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ea18:	4621      	mov	r1, r4
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4ea1a:	42bb      	cmp	r3, r7
   4ea1c:	bf28      	it	cs
   4ea1e:	463b      	movcs	r3, r7
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ea20:	4632      	mov	r2, r6
   4ea22:	9800      	ldr	r0, [sp, #0]
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4ea24:	4698      	mov	r8, r3
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ea26:	f000 fb97 	bl	4f158 <disk_write>
   4ea2a:	4601      	mov	r1, r0
   4ea2c:	2800      	cmp	r0, #0
   4ea2e:	f47f af05 	bne.w	4e83c <f_mkfs+0x3e8>
   4ea32:	f44f 7200 	mov.w	r2, #512	; 0x200
   4ea36:	4620      	mov	r0, r4
   4ea38:	f00c fa8e 	bl	5af58 <memset>
		} while (nsect);
   4ea3c:	ebb7 0708 	subs.w	r7, r7, r8
			sect += n; nsect -= n;
   4ea40:	4446      	add	r6, r8
		} while (nsect);
   4ea42:	d1e8      	bne.n	4ea16 <f_mkfs+0x5c2>
   4ea44:	2302      	movs	r3, #2
		sect = b_vol;
   4ea46:	f8dd 9004 	ldr.w	r9, [sp, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4ea4a:	f8df b520 	ldr.w	fp, [pc, #1312]	; 4ef6c <f_mkfs+0xb18>
   4ea4e:	9307      	str	r3, [sp, #28]
__ssp_bos_icheck3(memset, void *, int)
   4ea50:	2100      	movs	r1, #0
   4ea52:	f44f 7200 	mov.w	r2, #512	; 0x200
   4ea56:	4620      	mov	r0, r4
   4ea58:	f00c fa7e 	bl	5af58 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4ea5c:	f8db 3000 	ldr.w	r3, [fp]
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
   4ea60:	9a01      	ldr	r2, [sp, #4]
   4ea62:	6023      	str	r3, [r4, #0]
   4ea64:	f8db 3004 	ldr.w	r3, [fp, #4]
   4ea68:	f104 0040 	add.w	r0, r4, #64	; 0x40
   4ea6c:	6063      	str	r3, [r4, #4]
   4ea6e:	f8bb 3008 	ldrh.w	r3, [fp, #8]
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
   4ea72:	462e      	mov	r6, r5
   4ea74:	8123      	strh	r3, [r4, #8]
   4ea76:	f89b 300a 	ldrb.w	r3, [fp, #10]
   4ea7a:	72a3      	strb	r3, [r4, #10]
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
   4ea7c:	2300      	movs	r3, #0
   4ea7e:	f009 f88f 	bl	57ba0 <st_qword>
			st_qword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
   4ea82:	2300      	movs	r3, #0
   4ea84:	f104 0048 	add.w	r0, r4, #72	; 0x48
   4ea88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   4ea8a:	f009 f889 	bl	57ba0 <st_qword>
	*ptr++ = (BYTE)val; val >>= 8;
   4ea8e:	2320      	movs	r3, #32
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
   4ea90:	990e      	ldr	r1, [sp, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
   4ea92:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
   4ea96:	9806      	ldr	r0, [sp, #24]
   4ea98:	f009 f87a 	bl	57b90 <st_dword>
			st_dword(buf + BPB_DataOfsEx, (DWORD)(b_data - b_vol));	/* Data offset [sector] */
   4ea9c:	990d      	ldr	r1, [sp, #52]	; 0x34
   4ea9e:	9805      	ldr	r0, [sp, #20]
   4eaa0:	f009 f876 	bl	57b90 <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
   4eaa4:	990c      	ldr	r1, [sp, #48]	; 0x30
   4eaa6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   4eaaa:	f009 f871 	bl	57b90 <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + clen[0] + clen[1]);	/* Root dir cluster # */
   4eaae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   4eab0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   4eab4:	1c99      	adds	r1, r3, #2
   4eab6:	f009 f86b 	bl	57b90 <st_dword>
			st_dword(buf + BPB_VolIDEx, vsn);						/* VSN */
   4eaba:	9902      	ldr	r1, [sp, #8]
   4eabc:	f104 0064 	add.w	r0, r4, #100	; 0x64
   4eac0:	f009 f866 	bl	57b90 <st_dword>
	*ptr++ = (BYTE)val;
   4eac4:	f04f 0301 	mov.w	r3, #1
   4eac8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
   4eacc:	2309      	movs	r3, #9
   4eace:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
   4ead2:	0876      	lsrs	r6, r6, #1
   4ead4:	d11e      	bne.n	4eb14 <f_mkfs+0x6c0>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
   4ead6:	f04f 0301 	mov.w	r3, #1
   4eada:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
   4eade:	2380      	movs	r3, #128	; 0x80
   4eae0:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
	*ptr++ = (BYTE)val; val >>= 8;
   4eae4:	23eb      	movs	r3, #235	; 0xeb
   4eae6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	*ptr++ = (BYTE)val;
   4eaea:	23fe      	movs	r3, #254	; 0xfe
   4eaec:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
	*ptr++ = (BYTE)val; val >>= 8;
   4eaf0:	2355      	movs	r3, #85	; 0x55
   4eaf2:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   4eaf6:	23aa      	movs	r3, #170	; 0xaa
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4eaf8:	4637      	mov	r7, r6
   4eafa:	46b0      	mov	r8, r6
	*ptr++ = (BYTE)val;
   4eafc:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
   4eb00:	f1a8 036a 	sub.w	r3, r8, #106	; 0x6a
   4eb04:	2b01      	cmp	r3, #1
   4eb06:	d80b      	bhi.n	4eb20 <f_mkfs+0x6cc>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4eb08:	f108 0801 	add.w	r8, r8, #1
   4eb0c:	e7f8      	b.n	4eb00 <f_mkfs+0x6ac>
   4eb0e:	2301      	movs	r3, #1
   4eb10:	9307      	str	r3, [sp, #28]
   4eb12:	e79d      	b.n	4ea50 <f_mkfs+0x5fc>
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
   4eb14:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
   4eb18:	3301      	adds	r3, #1
   4eb1a:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
   4eb1e:	e7d8      	b.n	4ead2 <f_mkfs+0x67e>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4eb20:	f1b8 0f70 	cmp.w	r8, #112	; 0x70
   4eb24:	bf08      	it	eq
   4eb26:	f04f 0871 	moveq.w	r8, #113	; 0x71
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4eb2a:	f814 3008 	ldrb.w	r3, [r4, r8]
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4eb2e:	f108 0801 	add.w	r8, r8, #1
   4eb32:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4eb36:	eb03 0777 	add.w	r7, r3, r7, ror #1
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4eb3a:	d1e1      	bne.n	4eb00 <f_mkfs+0x6ac>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eb3c:	4621      	mov	r1, r4
   4eb3e:	2301      	movs	r3, #1
   4eb40:	464a      	mov	r2, r9
   4eb42:	9800      	ldr	r0, [sp, #0]
   4eb44:	f000 fb08 	bl	4f158 <disk_write>
   4eb48:	f109 0a01 	add.w	sl, r9, #1
   4eb4c:	4601      	mov	r1, r0
   4eb4e:	2800      	cmp	r0, #0
   4eb50:	f47f ae74 	bne.w	4e83c <f_mkfs+0x3e8>
__ssp_bos_icheck3(memset, void *, int)
   4eb54:	4642      	mov	r2, r8
   4eb56:	4620      	mov	r0, r4
   4eb58:	f00c f9fe 	bl	5af58 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
   4eb5c:	2355      	movs	r3, #85	; 0x55
   4eb5e:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   4eb62:	23aa      	movs	r3, #170	; 0xaa
   4eb64:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
			for (j = 1; j < 9; j++) {
   4eb68:	1e63      	subs	r3, r4, #1
   4eb6a:	9304      	str	r3, [sp, #16]
   4eb6c:	f204 13ff 	addw	r3, r4, #511	; 0x1ff
   4eb70:	f109 0809 	add.w	r8, r9, #9
   4eb74:	9303      	str	r3, [sp, #12]
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   4eb76:	9b04      	ldr	r3, [sp, #16]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4eb78:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4eb7c:	eb02 0777 	add.w	r7, r2, r7, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
   4eb80:	9a03      	ldr	r2, [sp, #12]
   4eb82:	429a      	cmp	r2, r3
   4eb84:	d1f8      	bne.n	4eb78 <f_mkfs+0x724>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eb86:	4621      	mov	r1, r4
   4eb88:	2301      	movs	r3, #1
   4eb8a:	4652      	mov	r2, sl
   4eb8c:	9800      	ldr	r0, [sp, #0]
   4eb8e:	f000 fae3 	bl	4f158 <disk_write>
   4eb92:	f10a 0901 	add.w	r9, sl, #1
   4eb96:	4601      	mov	r1, r0
   4eb98:	2800      	cmp	r0, #0
   4eb9a:	f47f ae4f 	bne.w	4e83c <f_mkfs+0x3e8>
			for (j = 1; j < 9; j++) {
   4eb9e:	45c1      	cmp	r9, r8
   4eba0:	d001      	beq.n	4eba6 <f_mkfs+0x752>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eba2:	46ca      	mov	sl, r9
   4eba4:	e7e7      	b.n	4eb76 <f_mkfs+0x722>
   4eba6:	f44f 7200 	mov.w	r2, #512	; 0x200
   4ebaa:	4620      	mov	r0, r4
   4ebac:	f00c f9d4 	bl	5af58 <memset>
			for ( ; j < 11; j++) {
   4ebb0:	f10a 0a03 	add.w	sl, sl, #3
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ebb4:	9b04      	ldr	r3, [sp, #16]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   4ebb6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4ebba:	eb02 0777 	add.w	r7, r2, r7, ror #1
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
   4ebbe:	9a03      	ldr	r2, [sp, #12]
   4ebc0:	429a      	cmp	r2, r3
   4ebc2:	d1f8      	bne.n	4ebb6 <f_mkfs+0x762>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ebc4:	2301      	movs	r3, #1
   4ebc6:	464a      	mov	r2, r9
   4ebc8:	4621      	mov	r1, r4
   4ebca:	9800      	ldr	r0, [sp, #0]
   4ebcc:	f109 0801 	add.w	r8, r9, #1
   4ebd0:	f000 fac2 	bl	4f158 <disk_write>
   4ebd4:	2800      	cmp	r0, #0
   4ebd6:	f47f ae31 	bne.w	4e83c <f_mkfs+0x3e8>
			for ( ; j < 11; j++) {
   4ebda:	45d0      	cmp	r8, sl
   4ebdc:	d001      	beq.n	4ebe2 <f_mkfs+0x78e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ebde:	46c1      	mov	r9, r8
   4ebe0:	e7e8      	b.n	4ebb4 <f_mkfs+0x760>
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
   4ebe2:	19a0      	adds	r0, r4, r6
   4ebe4:	4639      	mov	r1, r7
   4ebe6:	3604      	adds	r6, #4
   4ebe8:	f008 ffd2 	bl	57b90 <st_dword>
   4ebec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   4ebf0:	d1f7      	bne.n	4ebe2 <f_mkfs+0x78e>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ebf2:	2301      	movs	r3, #1
   4ebf4:	4642      	mov	r2, r8
   4ebf6:	4621      	mov	r1, r4
   4ebf8:	9800      	ldr	r0, [sp, #0]
   4ebfa:	f109 0902 	add.w	r9, r9, #2
   4ebfe:	f000 faab 	bl	4f158 <disk_write>
   4ec02:	2800      	cmp	r0, #0
   4ec04:	f47f ae1a 	bne.w	4e83c <f_mkfs+0x3e8>
		for (n = 0; n < 2; n++) {
   4ec08:	9b07      	ldr	r3, [sp, #28]
   4ec0a:	2b01      	cmp	r3, #1
   4ec0c:	f47f af7f 	bne.w	4eb0e <f_mkfs+0x6ba>
		sys = 0x07;			/* exFAT */
   4ec10:	f04f 0907 	mov.w	r9, #7
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD */
   4ec14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   4ec16:	2b00      	cmp	r3, #0
   4ec18:	f040 8240 	bne.w	4f09c <f_mkfs+0xc48>
			lba[0] = sz_vol; lba[1] = 0;
   4ec1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   4ec1e:	2101      	movs	r1, #1
			lba[0] = sz_vol; lba[1] = 0;
   4ec20:	9315      	str	r3, [sp, #84]	; 0x54
   4ec22:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   4ec24:	9800      	ldr	r0, [sp, #0]
   4ec26:	aa14      	add	r2, sp, #80	; 0x50
			lba[0] = sz_vol; lba[1] = 0;
   4ec28:	9316      	str	r3, [sp, #88]	; 0x58
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   4ec2a:	f000 faa1 	bl	4f170 <disk_ioctl>
   4ec2e:	2800      	cmp	r0, #0
   4ec30:	f47f ae04 	bne.w	4e83c <f_mkfs+0x3e8>
		sz_drv32 = (DWORD)sz_drv;
   4ec34:	9e14      	ldr	r6, [sp, #80]	; 0x50
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
   4ec36:	4bc8      	ldr	r3, [pc, #800]	; (4ef58 <f_mkfs+0xb04>)
   4ec38:	429e      	cmp	r6, r3
   4ec3a:	f240 8218 	bls.w	4f06e <f_mkfs+0xc1a>
   4ec3e:	2105      	movs	r1, #5
   4ec40:	2708      	movs	r7, #8
   4ec42:	f64f 433e 	movw	r3, #64574	; 0xfc3e
   4ec46:	007f      	lsls	r7, r7, #1
   4ec48:	3901      	subs	r1, #1
   4ec4a:	b2ff      	uxtb	r7, r7
   4ec4c:	f000 825b 	beq.w	4f106 <f_mkfs+0xcb2>
   4ec50:	fbb6 f2f7 	udiv	r2, r6, r7
   4ec54:	429a      	cmp	r2, r3
   4ec56:	d8f6      	bhi.n	4ec46 <f_mkfs+0x7f2>
   4ec58:	f44f 7200 	mov.w	r2, #512	; 0x200
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
   4ec5c:	2f00      	cmp	r7, #0
   4ec5e:	f040 81ad 	bne.w	4efbc <f_mkfs+0xb68>
   4ec62:	4639      	mov	r1, r7
   4ec64:	4620      	mov	r0, r4
   4ec66:	f00c f977 	bl	5af58 <memset>
   4ec6a:	27ff      	movs	r7, #255	; 0xff
   4ec6c:	e1aa      	b.n	4efc4 <f_mkfs+0xb70>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   4ec6e:	2501      	movs	r5, #1
   4ec70:	4bba      	ldr	r3, [pc, #744]	; (4ef5c <f_mkfs+0xb08>)
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
   4ec72:	ea4f 4058 	mov.w	r0, r8, lsr #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   4ec76:	f833 2b02 	ldrh.w	r2, [r3], #2
   4ec7a:	2a00      	cmp	r2, #0
   4ec7c:	f43f ad06 	beq.w	4e68c <f_mkfs+0x238>
   4ec80:	4282      	cmp	r2, r0
   4ec82:	d901      	bls.n	4ec88 <f_mkfs+0x834>
   4ec84:	2200      	movs	r2, #0
   4ec86:	e501      	b.n	4e68c <f_mkfs+0x238>
   4ec88:	006d      	lsls	r5, r5, #1
   4ec8a:	e7f4      	b.n	4ec76 <f_mkfs+0x822>
   4ec8c:	461d      	mov	r5, r3
   4ec8e:	e55f      	b.n	4e750 <f_mkfs+0x2fc>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   4ec90:	005b      	lsls	r3, r3, #1
   4ec92:	e564      	b.n	4e75e <f_mkfs+0x30a>
   4ec94:	462b      	mov	r3, r5
   4ec96:	e568      	b.n	4e76a <f_mkfs+0x316>
				if (n % n_fat) {	/* Adjust fractional error if needed */
   4ec98:	9902      	ldr	r1, [sp, #8]
   4ec9a:	fbb3 fcf1 	udiv	ip, r3, r1
   4ec9e:	fb01 3c1c 	mls	ip, r1, ip, r3
   4eca2:	f1bc 0f00 	cmp.w	ip, #0
   4eca6:	d003      	beq.n	4ecb0 <f_mkfs+0x85c>
					n--; sz_rsv++; b_fat++;
   4eca8:	3b01      	subs	r3, #1
   4ecaa:	f10a 0a01 	add.w	sl, sl, #1
   4ecae:	3701      	adds	r7, #1
				sz_fat += n / n_fat;
   4ecb0:	9902      	ldr	r1, [sp, #8]
   4ecb2:	fbb3 f3f1 	udiv	r3, r3, r1
   4ecb6:	9903      	ldr	r1, [sp, #12]
   4ecb8:	4419      	add	r1, r3
   4ecba:	9103      	str	r1, [sp, #12]
   4ecbc:	e50e      	b.n	4e6dc <f_mkfs+0x288>
			if (fsty == FS_FAT16) {
   4ecbe:	2e02      	cmp	r6, #2
   4ecc0:	d123      	bne.n	4ed0a <f_mkfs+0x8b6>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
   4ecc2:	f64f 73f5 	movw	r3, #65525	; 0xfff5
   4ecc6:	9905      	ldr	r1, [sp, #20]
   4ecc8:	4299      	cmp	r1, r3
   4ecca:	d911      	bls.n	4ecf0 <f_mkfs+0x89c>
					if (sz_au == 0 && (pau * 2) <= 64) {
   4eccc:	b952      	cbnz	r2, 4ece4 <f_mkfs+0x890>
   4ecce:	006b      	lsls	r3, r5, #1
   4ecd0:	2b40      	cmp	r3, #64	; 0x40
   4ecd2:	d9db      	bls.n	4ec8c <f_mkfs+0x838>
					if ((fsopt & FM_FAT32)) {
   4ecd4:	9a08      	ldr	r2, [sp, #32]
   4ecd6:	2a00      	cmp	r2, #0
   4ecd8:	d1c9      	bne.n	4ec6e <f_mkfs+0x81a>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   4ecda:	2b80      	cmp	r3, #128	; 0x80
   4ecdc:	f63f ac49 	bhi.w	4e572 <f_mkfs+0x11e>
   4ece0:	461d      	mov	r5, r3
   4ece2:	e542      	b.n	4e76a <f_mkfs+0x316>
					if ((fsopt & FM_FAT32)) {
   4ece4:	9b08      	ldr	r3, [sp, #32]
   4ece6:	2b00      	cmp	r3, #0
   4ece8:	f43f ac43 	beq.w	4e572 <f_mkfs+0x11e>
   4ecec:	4615      	mov	r5, r2
   4ecee:	e4cd      	b.n	4e68c <f_mkfs+0x238>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
   4ecf0:	f640 73f5 	movw	r3, #4085	; 0xff5
   4ecf4:	9905      	ldr	r1, [sp, #20]
   4ecf6:	4299      	cmp	r1, r3
   4ecf8:	d80e      	bhi.n	4ed18 <f_mkfs+0x8c4>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   4ecfa:	2a00      	cmp	r2, #0
   4ecfc:	f47f ac39 	bne.w	4e572 <f_mkfs+0x11e>
   4ed00:	006d      	lsls	r5, r5, #1
   4ed02:	2d80      	cmp	r5, #128	; 0x80
   4ed04:	f67f ad24 	bls.w	4e750 <f_mkfs+0x2fc>
   4ed08:	e433      	b.n	4e572 <f_mkfs+0x11e>
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
   4ed0a:	f640 73f5 	movw	r3, #4085	; 0xff5
   4ed0e:	9a05      	ldr	r2, [sp, #20]
   4ed10:	429a      	cmp	r2, r3
   4ed12:	f63f ac2e 	bhi.w	4e572 <f_mkfs+0x11e>
   4ed16:	2601      	movs	r6, #1
   4ed18:	f44f 7200 	mov.w	r2, #512	; 0x200
   4ed1c:	2100      	movs	r1, #0
   4ed1e:	4620      	mov	r0, r4
   4ed20:	f00c f91a 	bl	5af58 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4ed24:	4b8e      	ldr	r3, [pc, #568]	; (4ef60 <f_mkfs+0xb0c>)
   4ed26:	2e03      	cmp	r6, #3
   4ed28:	681a      	ldr	r2, [r3, #0]
   4ed2a:	bf08      	it	eq
   4ed2c:	f04f 0900 	moveq.w	r9, #0
   4ed30:	6022      	str	r2, [r4, #0]
   4ed32:	685a      	ldr	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   4ed34:	f884 a00e 	strb.w	sl, [r4, #14]
   4ed38:	6062      	str	r2, [r4, #4]
   4ed3a:	891a      	ldrh	r2, [r3, #8]
   4ed3c:	7a9b      	ldrb	r3, [r3, #10]
   4ed3e:	f3ca 2a07 	ubfx	sl, sl, #8, #8
   4ed42:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
   4ed44:	2302      	movs	r3, #2
   4ed46:	7323      	strb	r3, [r4, #12]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
   4ed48:	9b02      	ldr	r3, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
   4ed4a:	f884 9011 	strb.w	r9, [r4, #17]
		if (sz_vol < 0x10000) {
   4ed4e:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
   4ed52:	f3c9 2907 	ubfx	r9, r9, #8, #8
   4ed56:	8122      	strh	r2, [r4, #8]
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
   4ed58:	7365      	strb	r5, [r4, #13]
	*ptr++ = (BYTE)val;
   4ed5a:	f884 a00f 	strb.w	sl, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
   4ed5e:	7423      	strb	r3, [r4, #16]
	*ptr++ = (BYTE)val;
   4ed60:	f884 9012 	strb.w	r9, [r4, #18]
		if (sz_vol < 0x10000) {
   4ed64:	f080 80f1 	bcs.w	4ef4a <f_mkfs+0xaf6>
	*ptr++ = (BYTE)val; val >>= 8;
   4ed68:	f884 8013 	strb.w	r8, [r4, #19]
   4ed6c:	f3c8 2807 	ubfx	r8, r8, #8, #8
	*ptr++ = (BYTE)val;
   4ed70:	f884 8014 	strb.w	r8, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
   4ed74:	23f8      	movs	r3, #248	; 0xf8
   4ed76:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
   4ed78:	233f      	movs	r3, #63	; 0x3f
   4ed7a:	7623      	strb	r3, [r4, #24]
   4ed7c:	23ff      	movs	r3, #255	; 0xff
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
   4ed7e:	9901      	ldr	r1, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   4ed80:	76a3      	strb	r3, [r4, #26]
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
   4ed82:	f104 001c 	add.w	r0, r4, #28
   4ed86:	f008 ff03 	bl	57b90 <st_dword>
		if (fsty == FS_FAT32) {
   4ed8a:	2e03      	cmp	r6, #3
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
   4ed8c:	4659      	mov	r1, fp
		if (fsty == FS_FAT32) {
   4ed8e:	f040 80ef 	bne.w	4ef70 <f_mkfs+0xb1c>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
   4ed92:	f104 0043 	add.w	r0, r4, #67	; 0x43
   4ed96:	f008 fefb 	bl	57b90 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
   4ed9a:	9903      	ldr	r1, [sp, #12]
   4ed9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   4eda0:	f008 fef6 	bl	57b90 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   4eda4:	2302      	movs	r3, #2
   4eda6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
   4edaa:	2301      	movs	r3, #1
   4edac:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   4edb0:	2306      	movs	r3, #6
   4edb2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
   4edb6:	2380      	movs	r3, #128	; 0x80
   4edb8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
   4edbc:	2329      	movs	r3, #41	; 0x29
   4edbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   4edc2:	4b68      	ldr	r3, [pc, #416]	; (4ef64 <f_mkfs+0xb10>)
   4edc4:	f104 0247 	add.w	r2, r4, #71	; 0x47
   4edc8:	f103 0110 	add.w	r1, r3, #16
   4edcc:	f853 0b04 	ldr.w	r0, [r3], #4
   4edd0:	428b      	cmp	r3, r1
   4edd2:	f842 0b04 	str.w	r0, [r2], #4
   4edd6:	d1f9      	bne.n	4edcc <f_mkfs+0x978>
	*ptr++ = (BYTE)val; val >>= 8;
   4edd8:	f04f 0b55 	mov.w	fp, #85	; 0x55
	*ptr++ = (BYTE)val;
   4eddc:	f04f 0aaa 	mov.w	sl, #170	; 0xaa
   4ede0:	8819      	ldrh	r1, [r3, #0]
   4ede2:	789b      	ldrb	r3, [r3, #2]
   4ede4:	8011      	strh	r1, [r2, #0]
   4ede6:	7093      	strb	r3, [r2, #2]
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
   4ede8:	4621      	mov	r1, r4
   4edea:	2301      	movs	r3, #1
   4edec:	9a01      	ldr	r2, [sp, #4]
   4edee:	9800      	ldr	r0, [sp, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   4edf0:	f884 b1fe 	strb.w	fp, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   4edf4:	f884 a1ff 	strb.w	sl, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
   4edf8:	f000 f9ae 	bl	4f158 <disk_write>
   4edfc:	4681      	mov	r9, r0
   4edfe:	2800      	cmp	r0, #0
   4ee00:	f47f ad1c 	bne.w	4e83c <f_mkfs+0x3e8>
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4ee04:	9b06      	ldr	r3, [sp, #24]
		if (fsty == FS_FAT32) {
   4ee06:	2e03      	cmp	r6, #3
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   4ee08:	f423 78ff 	bic.w	r8, r3, #510	; 0x1fe
   4ee0c:	f028 0801 	bic.w	r8, r8, #1
		if (fsty == FS_FAT32) {
   4ee10:	d137      	bne.n	4ee82 <f_mkfs+0xa2e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
   4ee12:	9a01      	ldr	r2, [sp, #4]
   4ee14:	2301      	movs	r3, #1
   4ee16:	4621      	mov	r1, r4
   4ee18:	3206      	adds	r2, #6
   4ee1a:	9800      	ldr	r0, [sp, #0]
   4ee1c:	f000 f99c 	bl	4f158 <disk_write>
__ssp_bos_icheck3(memset, void *, int)
   4ee20:	f44f 7200 	mov.w	r2, #512	; 0x200
   4ee24:	4649      	mov	r1, r9
   4ee26:	4620      	mov	r0, r4
   4ee28:	f00c f896 	bl	5af58 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
   4ee2c:	2352      	movs	r3, #82	; 0x52
   4ee2e:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee30:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee32:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val;
   4ee34:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
   4ee36:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
   4ee38:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
   4ee3a:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   4ee3e:	9b05      	ldr	r3, [sp, #20]
	*ptr++ = (BYTE)val;
   4ee40:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee42:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
   4ee46:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
   4ee4a:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   4ee4e:	1e59      	subs	r1, r3, #1
   4ee50:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
   4ee54:	f008 fe9c 	bl	57b90 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   4ee58:	2302      	movs	r3, #2
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   4ee5a:	9a01      	ldr	r2, [sp, #4]
   4ee5c:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
   4ee5e:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   4ee62:	3207      	adds	r2, #7
   4ee64:	2301      	movs	r3, #1
   4ee66:	9800      	ldr	r0, [sp, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   4ee68:	f884 b1fe 	strb.w	fp, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   4ee6c:	f884 a1ff 	strb.w	sl, [r4, #511]	; 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   4ee70:	f000 f972 	bl	4f158 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
   4ee74:	2301      	movs	r3, #1
   4ee76:	9a01      	ldr	r2, [sp, #4]
   4ee78:	4621      	mov	r1, r4
   4ee7a:	9800      	ldr	r0, [sp, #0]
   4ee7c:	441a      	add	r2, r3
   4ee7e:	f000 f96b 	bl	4f158 <disk_write>
   4ee82:	4649      	mov	r1, r9
   4ee84:	4642      	mov	r2, r8
   4ee86:	4620      	mov	r0, r4
   4ee88:	f00c f866 	bl	5af58 <memset>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   4ee8c:	4b36      	ldr	r3, [pc, #216]	; (4ef68 <f_mkfs+0xb14>)
   4ee8e:	2e01      	cmp	r6, #1
   4ee90:	bf0c      	ite	eq
   4ee92:	4699      	moveq	r9, r3
   4ee94:	f06f 0907 	mvnne.w	r9, #7
   4ee98:	f04f 0a00 	mov.w	sl, #0
			if (fsty == FS_FAT32) {
   4ee9c:	2e03      	cmp	r6, #3
   4ee9e:	f040 8082 	bne.w	4efa6 <f_mkfs+0xb52>
	*ptr++ = (BYTE)val; val >>= 8;
   4eea2:	23f8      	movs	r3, #248	; 0xf8
   4eea4:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   4eea6:	23ff      	movs	r3, #255	; 0xff
   4eea8:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
   4eeaa:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
   4eeac:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   4eeae:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   4eeb0:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
   4eeb2:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
   4eeb4:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
   4eeb6:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
   4eeb8:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
   4eeba:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
   4eebc:	230f      	movs	r3, #15
   4eebe:	72e3      	strb	r3, [r4, #11]
   4eec0:	f8dd 800c 	ldr.w	r8, [sp, #12]
				n = (nsect > sz_buf) ? sz_buf : nsect;
   4eec4:	9b04      	ldr	r3, [sp, #16]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eec6:	4621      	mov	r1, r4
				n = (nsect > sz_buf) ? sz_buf : nsect;
   4eec8:	4543      	cmp	r3, r8
   4eeca:	bf28      	it	cs
   4eecc:	4643      	movcs	r3, r8
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eece:	463a      	mov	r2, r7
   4eed0:	9800      	ldr	r0, [sp, #0]
				n = (nsect > sz_buf) ? sz_buf : nsect;
   4eed2:	469b      	mov	fp, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4eed4:	f000 f940 	bl	4f158 <disk_write>
   4eed8:	4601      	mov	r1, r0
   4eeda:	2800      	cmp	r0, #0
   4eedc:	f47f acae 	bne.w	4e83c <f_mkfs+0x3e8>
   4eee0:	f44f 7200 	mov.w	r2, #512	; 0x200
   4eee4:	4620      	mov	r0, r4
   4eee6:	f00c f837 	bl	5af58 <memset>
			} while (nsect);
   4eeea:	ebb8 080b 	subs.w	r8, r8, fp
				sect += n; nsect -= n;
   4eeee:	445f      	add	r7, fp
			} while (nsect);
   4eef0:	d1e8      	bne.n	4eec4 <f_mkfs+0xa70>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   4eef2:	f1ba 0f00 	cmp.w	sl, #0
   4eef6:	bf0c      	ite	eq
   4eef8:	2301      	moveq	r3, #1
   4eefa:	2302      	movne	r3, #2
   4eefc:	9a02      	ldr	r2, [sp, #8]
   4eefe:	f04f 0a01 	mov.w	sl, #1
   4ef02:	429a      	cmp	r2, r3
   4ef04:	d8ca      	bhi.n	4ee9c <f_mkfs+0xa48>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
   4ef06:	9b07      	ldr	r3, [sp, #28]
   4ef08:	2e03      	cmp	r6, #3
   4ef0a:	bf18      	it	ne
   4ef0c:	461d      	movne	r5, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4ef0e:	9b04      	ldr	r3, [sp, #16]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ef10:	463a      	mov	r2, r7
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4ef12:	42ab      	cmp	r3, r5
   4ef14:	bf28      	it	cs
   4ef16:	462b      	movcs	r3, r5
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ef18:	4621      	mov	r1, r4
   4ef1a:	9800      	ldr	r0, [sp, #0]
			n = (nsect > sz_buf) ? sz_buf : nsect;
   4ef1c:	4698      	mov	r8, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4ef1e:	f000 f91b 	bl	4f158 <disk_write>
   4ef22:	2800      	cmp	r0, #0
   4ef24:	f47f ac8a 	bne.w	4e83c <f_mkfs+0x3e8>
		} while (nsect);
   4ef28:	ebb5 0508 	subs.w	r5, r5, r8
			sect += n; nsect -= n;
   4ef2c:	4447      	add	r7, r8
		} while (nsect);
   4ef2e:	d1ee      	bne.n	4ef0e <f_mkfs+0xaba>
		if (fsty == FS_FAT32) {
   4ef30:	2e03      	cmp	r6, #3
   4ef32:	d03d      	beq.n	4efb0 <f_mkfs+0xb5c>
			if (sz_vol >= 0x10000) {
   4ef34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   4ef36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   4ef3a:	d23c      	bcs.n	4efb6 <f_mkfs+0xb62>
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
   4ef3c:	2e02      	cmp	r6, #2
   4ef3e:	bf14      	ite	ne
   4ef40:	f04f 0901 	movne.w	r9, #1
   4ef44:	f04f 0904 	moveq.w	r9, #4
   4ef48:	e664      	b.n	4ec14 <f_mkfs+0x7c0>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
   4ef4a:	4641      	mov	r1, r8
   4ef4c:	f104 0020 	add.w	r0, r4, #32
   4ef50:	f008 fe1e 	bl	57b90 <st_dword>
   4ef54:	e70e      	b.n	4ed74 <f_mkfs+0x920>
   4ef56:	bf00      	nop
   4ef58:	0007e1f7 	.word	0x0007e1f7
   4ef5c:	0005c97e 	.word	0x0005c97e
   4ef60:	00060792 	.word	0x00060792
   4ef64:	0006079e 	.word	0x0006079e
   4ef68:	00fffff8 	.word	0x00fffff8
   4ef6c:	00060776 	.word	0x00060776
			st_dword(buf + BS_VolID, vsn);				/* VSN */
   4ef70:	f104 0027 	add.w	r0, r4, #39	; 0x27
   4ef74:	f008 fe0c 	bl	57b90 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   4ef78:	9b03      	ldr	r3, [sp, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4ef7a:	f104 022b 	add.w	r2, r4, #43	; 0x2b
   4ef7e:	75a3      	strb	r3, [r4, #22]
   4ef80:	f3c3 2307 	ubfx	r3, r3, #8, #8
	*ptr++ = (BYTE)val;
   4ef84:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
   4ef86:	2380      	movs	r3, #128	; 0x80
   4ef88:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
   4ef8c:	2329      	movs	r3, #41	; 0x29
   4ef8e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
   4ef92:	4b5e      	ldr	r3, [pc, #376]	; (4f10c <f_mkfs+0xcb8>)
   4ef94:	f103 0110 	add.w	r1, r3, #16
   4ef98:	f853 0b04 	ldr.w	r0, [r3], #4
   4ef9c:	428b      	cmp	r3, r1
   4ef9e:	f842 0b04 	str.w	r0, [r2], #4
   4efa2:	d1f9      	bne.n	4ef98 <f_mkfs+0xb44>
   4efa4:	e718      	b.n	4edd8 <f_mkfs+0x984>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
   4efa6:	4649      	mov	r1, r9
   4efa8:	4620      	mov	r0, r4
   4efaa:	f008 fdf1 	bl	57b90 <st_dword>
   4efae:	e787      	b.n	4eec0 <f_mkfs+0xa6c>
			sys = 0x0C;		/* FAT32X */
   4efb0:	f04f 090c 	mov.w	r9, #12
   4efb4:	e62e      	b.n	4ec14 <f_mkfs+0x7c0>
				sys = 0x06;	/* FAT12/16 (large) */
   4efb6:	f04f 0906 	mov.w	r9, #6
   4efba:	e62b      	b.n	4ec14 <f_mkfs+0x7c0>
__ssp_bos_icheck3(memset, void *, int)
   4efbc:	2100      	movs	r1, #0
   4efbe:	4620      	mov	r0, r4
   4efc0:	f00b ffca 	bl	5af58 <memset>
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   4efc4:	223f      	movs	r2, #63	; 0x3f
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
   4efc6:	4693      	mov	fp, r2
   4efc8:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
   4efcc:	f504 78e3 	add.w	r8, r4, #454	; 0x1c6
   4efd0:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
   4efd4:	f85a 5b04 	ldr.w	r5, [sl], #4
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
   4efd8:	2d64      	cmp	r5, #100	; 0x64
   4efda:	d96b      	bls.n	4f0b4 <f_mkfs+0xc60>
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
   4efdc:	18a8      	adds	r0, r5, r2
   4efde:	bf2c      	ite	cs
   4efe0:	2101      	movcs	r1, #1
   4efe2:	2100      	movcc	r1, #0
   4efe4:	42b0      	cmp	r0, r6
   4efe6:	d87a      	bhi.n	4f0de <f_mkfs+0xc8a>
   4efe8:	2900      	cmp	r1, #0
   4efea:	d178      	bne.n	4f0de <f_mkfs+0xc8a>
			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
   4efec:	4611      	mov	r1, r2
   4efee:	4640      	mov	r0, r8
   4eff0:	9301      	str	r3, [sp, #4]
   4eff2:	f008 fdcd 	bl	57b90 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
   4eff6:	4629      	mov	r1, r5
   4eff8:	f108 0004 	add.w	r0, r8, #4
   4effc:	f008 fdc8 	bl	57b90 <st_dword>
			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
   4f000:	fbb2 f1fb 	udiv	r1, r2, fp
   4f004:	fbb1 f0f7 	udiv	r0, r1, r7
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
   4f008:	fb07 1c10 	mls	ip, r7, r0, r1
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
   4f00c:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
   4f010:	1a51      	subs	r1, r2, r1
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
   4f012:	f808 cc07 	strb.w	ip, [r8, #-7]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4f016:	ea4f 0c90 	mov.w	ip, r0, lsr #2
   4f01a:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
   4f01e:	3101      	adds	r1, #1
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4f020:	ea41 010c 	orr.w	r1, r1, ip
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
   4f024:	442a      	add	r2, r5
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4f026:	f808 1c06 	strb.w	r1, [r8, #-6]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
   4f02a:	1e51      	subs	r1, r2, #1
   4f02c:	fbb1 f5fb 	udiv	r5, r1, fp
			pte[PTE_StCyl] = (BYTE)cy;
   4f030:	f808 0c05 	strb.w	r0, [r8, #-5]
			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
   4f034:	fbb5 f0f7 	udiv	r0, r5, r7
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
   4f038:	fb07 5c10 	mls	ip, r7, r0, r5
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
   4f03c:	ebc5 1585 	rsb	r5, r5, r5, lsl #6
   4f040:	1b49      	subs	r1, r1, r5
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   4f042:	9b01      	ldr	r3, [sp, #4]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4f044:	0885      	lsrs	r5, r0, #2
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
   4f046:	3101      	adds	r1, #1
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4f048:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
   4f04c:	4329      	orrs	r1, r5
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   4f04e:	4543      	cmp	r3, r8
			pte[PTE_System] = sys;					/* System type */
   4f050:	f808 9c04 	strb.w	r9, [r8, #-4]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
   4f054:	f808 cc03 	strb.w	ip, [r8, #-3]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   4f058:	f808 1c02 	strb.w	r1, [r8, #-2]
			pte[PTE_EdCyl] = (BYTE)cy;
   4f05c:	f808 0c01 	strb.w	r0, [r8, #-1]
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   4f060:	d00d      	beq.n	4f07e <f_mkfs+0xc2a>
   4f062:	b162      	cbz	r2, 4f07e <f_mkfs+0xc2a>
   4f064:	4296      	cmp	r6, r2
   4f066:	f108 0810 	add.w	r8, r8, #16
   4f06a:	d8b3      	bhi.n	4efd4 <f_mkfs+0xb80>
   4f06c:	e007      	b.n	4f07e <f_mkfs+0xc2a>
   4f06e:	f44f 7200 	mov.w	r2, #512	; 0x200
   4f072:	4620      	mov	r0, r4
   4f074:	9909      	ldr	r1, [sp, #36]	; 0x24
   4f076:	f00b ff6f 	bl	5af58 <memset>
   4f07a:	2e3f      	cmp	r6, #63	; 0x3f
   4f07c:	d818      	bhi.n	4f0b0 <f_mkfs+0xc5c>
	*ptr++ = (BYTE)val; val >>= 8;
   4f07e:	2355      	movs	r3, #85	; 0x55
   4f080:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   4f084:	23aa      	movs	r3, #170	; 0xaa
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
   4f086:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val;
   4f088:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
   4f08c:	4621      	mov	r1, r4
   4f08e:	2301      	movs	r3, #1
   4f090:	9800      	ldr	r0, [sp, #0]
   4f092:	f000 f861 	bl	4f158 <disk_write>
   4f096:	2800      	cmp	r0, #0
   4f098:	f47f abd0 	bne.w	4e83c <f_mkfs+0x3e8>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   4f09c:	2200      	movs	r2, #0
   4f09e:	9800      	ldr	r0, [sp, #0]
   4f0a0:	4611      	mov	r1, r2
   4f0a2:	f000 f865 	bl	4f170 <disk_ioctl>
   4f0a6:	3800      	subs	r0, #0
   4f0a8:	bf18      	it	ne
   4f0aa:	2001      	movne	r0, #1
   4f0ac:	f7ff bbc7 	b.w	4e83e <f_mkfs+0x3ea>
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
   4f0b0:	2708      	movs	r7, #8
   4f0b2:	e787      	b.n	4efc4 <f_mkfs+0xb70>
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
   4f0b4:	d108      	bne.n	4f0c8 <f_mkfs+0xc74>
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
   4f0b6:	18b0      	adds	r0, r6, r2
   4f0b8:	bf2c      	ite	cs
   4f0ba:	2101      	movcs	r1, #1
   4f0bc:	2100      	movcc	r1, #0
   4f0be:	4286      	cmp	r6, r0
   4f0c0:	d30d      	bcc.n	4f0de <f_mkfs+0xc8a>
   4f0c2:	b961      	cbnz	r1, 4f0de <f_mkfs+0xc8a>
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
   4f0c4:	4635      	mov	r5, r6
   4f0c6:	e791      	b.n	4efec <f_mkfs+0xb98>
   4f0c8:	2164      	movs	r1, #100	; 0x64
   4f0ca:	fbb6 f1f1 	udiv	r1, r6, r1
   4f0ce:	434d      	muls	r5, r1
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
   4f0d0:	18a8      	adds	r0, r5, r2
   4f0d2:	bf2c      	ite	cs
   4f0d4:	2101      	movcs	r1, #1
   4f0d6:	2100      	movcc	r1, #0
   4f0d8:	4286      	cmp	r6, r0
   4f0da:	d300      	bcc.n	4f0de <f_mkfs+0xc8a>
   4f0dc:	b109      	cbz	r1, 4f0e2 <f_mkfs+0xc8e>
   4f0de:	1ab5      	subs	r5, r6, r2
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
   4f0e0:	e784      	b.n	4efec <f_mkfs+0xb98>
   4f0e2:	2d00      	cmp	r5, #0
   4f0e4:	d182      	bne.n	4efec <f_mkfs+0xb98>
   4f0e6:	e7ca      	b.n	4f07e <f_mkfs+0xc2a>
	if (vol < 0) return FR_INVALID_DRIVE;
   4f0e8:	200b      	movs	r0, #11
   4f0ea:	f7ff bba8 	b.w	4e83e <f_mkfs+0x3ea>
	if (ds & STA_NOINIT) return FR_NOT_READY;
   4f0ee:	2003      	movs	r0, #3
   4f0f0:	f7ff bba5 	b.w	4e83e <f_mkfs+0x3ea>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
   4f0f4:	200a      	movs	r0, #10
   4f0f6:	f7ff bba2 	b.w	4e83e <f_mkfs+0x3ea>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
   4f0fa:	2011      	movs	r0, #17
   4f0fc:	f7ff bb9f 	b.w	4e83e <f_mkfs+0x3ea>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
   4f100:	2013      	movs	r0, #19
   4f102:	f7ff bb9c 	b.w	4e83e <f_mkfs+0x3ea>
   4f106:	f44f 7200 	mov.w	r2, #512	; 0x200
   4f10a:	e5ab      	b.n	4ec64 <f_mkfs+0x810>
   4f10c:	000607b2 	.word	0x000607b2

0004f110 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv)
{
   4f110:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_status(pdrv_str[pdrv]) != 0) {
   4f112:	4b04      	ldr	r3, [pc, #16]	; (4f124 <disk_status+0x14>)
   4f114:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   4f118:	f006 fefa 	bl	55f10 <disk_access_status>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
   4f11c:	3800      	subs	r0, #0
   4f11e:	bf18      	it	ne
   4f120:	2001      	movne	r0, #1
   4f122:	bd08      	pop	{r3, pc}
   4f124:	0005c5a4 	.word	0x0005c5a4

0004f128 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv)
{
   4f128:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_init(pdrv_str[pdrv]) != 0) {
   4f12a:	4b04      	ldr	r3, [pc, #16]	; (4f13c <disk_initialize+0x14>)
   4f12c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   4f130:	f006 fee0 	bl	55ef4 <disk_access_init>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
   4f134:	3800      	subs	r0, #0
   4f136:	bf18      	it	ne
   4f138:	2001      	movne	r0, #1
   4f13a:	bd08      	pop	{r3, pc}
   4f13c:	0005c5a4 	.word	0x0005c5a4

0004f140 <disk_read>:
/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
   4f140:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_read(pdrv_str[pdrv], buff, sector, count) != 0) {
   4f142:	4c04      	ldr	r4, [pc, #16]	; (4f154 <disk_read+0x14>)
   4f144:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   4f148:	f006 fef0 	bl	55f2c <disk_access_read>
		return RES_ERROR;
	} else {
		return RES_OK;
	}

}
   4f14c:	3800      	subs	r0, #0
   4f14e:	bf18      	it	ne
   4f150:	2001      	movne	r0, #1
   4f152:	bd10      	pop	{r4, pc}
   4f154:	0005c5a4 	.word	0x0005c5a4

0004f158 <disk_write>:

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
   4f158:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if(disk_access_write(pdrv_str[pdrv], buff, sector, count) != 0) {
   4f15a:	4c04      	ldr	r4, [pc, #16]	; (4f16c <disk_write+0x14>)
   4f15c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   4f160:	f006 fefb 	bl	55f5a <disk_access_write>
		return RES_ERROR;
	} else {
		return RES_OK;
	}
}
   4f164:	3800      	subs	r0, #0
   4f166:	bf18      	it	ne
   4f168:	2001      	movne	r0, #1
   4f16a:	bd10      	pop	{r4, pc}
   4f16c:	0005c5a4 	.word	0x0005c5a4

0004f170 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
	int ret = RES_OK;
	uint32_t sector_size = 0;
   4f170:	2300      	movs	r3, #0
{
   4f172:	b513      	push	{r0, r1, r4, lr}
   4f174:	4614      	mov	r4, r2
	uint32_t sector_size = 0;
   4f176:	9301      	str	r3, [sp, #4]

	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	switch (cmd) {
   4f178:	2903      	cmp	r1, #3
   4f17a:	d821      	bhi.n	4f1c0 <disk_ioctl+0x50>
   4f17c:	e8df f001 	tbb	[pc, r1]
   4f180:	1e100e02 	.word	0x1e100e02
	case CTRL_SYNC:
		if(disk_access_ioctl(pdrv_str[pdrv],
   4f184:	2105      	movs	r1, #5
			ret = RES_ERROR;
		}
		break;

	case GET_SECTOR_COUNT:
		if (disk_access_ioctl(pdrv_str[pdrv],
   4f186:	4b10      	ldr	r3, [pc, #64]	; (4f1c8 <disk_ioctl+0x58>)
   4f188:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   4f18c:	f006 fefc 	bl	55f88 <disk_access_ioctl>
   4f190:	3800      	subs	r0, #0
   4f192:	bf18      	it	ne
   4f194:	2001      	movne	r0, #1
	default:
		ret = RES_PARERR;
		break;
	}
	return ret;
}
   4f196:	b2c0      	uxtb	r0, r0
   4f198:	b002      	add	sp, #8
   4f19a:	bd10      	pop	{r4, pc}
		if (disk_access_ioctl(pdrv_str[pdrv],
   4f19c:	2101      	movs	r1, #1
   4f19e:	e7f2      	b.n	4f186 <disk_ioctl+0x16>
		if ((disk_access_ioctl(pdrv_str[pdrv],
   4f1a0:	4b09      	ldr	r3, [pc, #36]	; (4f1c8 <disk_ioctl+0x58>)
   4f1a2:	2102      	movs	r1, #2
   4f1a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   4f1a8:	aa01      	add	r2, sp, #4
   4f1aa:	f006 feed 	bl	55f88 <disk_access_ioctl>
   4f1ae:	b948      	cbnz	r0, 4f1c4 <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
   4f1b0:	9b01      	ldr	r3, [sp, #4]
				DISK_IOCTL_GET_SECTOR_SIZE, &sector_size) == 0) &&
   4f1b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   4f1b6:	d205      	bcs.n	4f1c4 <disk_ioctl+0x54>
			(sector_size == (uint16_t)sector_size)) {
   4f1b8:	8023      	strh	r3, [r4, #0]
			*(uint16_t *)buff = (uint16_t)sector_size;
   4f1ba:	e7ec      	b.n	4f196 <disk_ioctl+0x26>
		if (disk_access_ioctl(pdrv_str[pdrv],
   4f1bc:	2104      	movs	r1, #4
   4f1be:	e7e2      	b.n	4f186 <disk_ioctl+0x16>
	switch (cmd) {
   4f1c0:	2004      	movs	r0, #4
   4f1c2:	e7e8      	b.n	4f196 <disk_ioctl+0x26>
			ret = RES_ERROR;
   4f1c4:	2001      	movs	r0, #1
   4f1c6:	e7e6      	b.n	4f196 <disk_ioctl+0x26>
   4f1c8:	0005c5a4 	.word	0x0005c5a4

0004f1cc <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
   4f1cc:	287f      	cmp	r0, #127	; 0x7f
   4f1ce:	d801      	bhi.n	4f1d4 <ff_uni2oem+0x8>
		c = (WCHAR)uni;
   4f1d0:	b280      	uxth	r0, r0
   4f1d2:	4770      	bx	lr

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
   4f1d4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   4f1d8:	d211      	bcs.n	4f1fe <ff_uni2oem+0x32>
   4f1da:	f240 13b5 	movw	r3, #437	; 0x1b5
   4f1de:	4299      	cmp	r1, r3
   4f1e0:	d10d      	bne.n	4f1fe <ff_uni2oem+0x32>
   4f1e2:	2300      	movs	r3, #0
   4f1e4:	4a07      	ldr	r2, [pc, #28]	; (4f204 <ff_uni2oem+0x38>)
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
   4f1e6:	f832 1b02 	ldrh.w	r1, [r2], #2
   4f1ea:	4281      	cmp	r1, r0
   4f1ec:	d101      	bne.n	4f1f2 <ff_uni2oem+0x26>
   4f1ee:	b29b      	uxth	r3, r3
   4f1f0:	e002      	b.n	4f1f8 <ff_uni2oem+0x2c>
   4f1f2:	3301      	adds	r3, #1
   4f1f4:	2b80      	cmp	r3, #128	; 0x80
   4f1f6:	d1f6      	bne.n	4f1e6 <ff_uni2oem+0x1a>
			c = (c + 0x80) & 0xFF;
   4f1f8:	3380      	adds	r3, #128	; 0x80
   4f1fa:	b2d8      	uxtb	r0, r3
   4f1fc:	4770      	bx	lr
	WCHAR c = 0;
   4f1fe:	2000      	movs	r0, #0
		}
	}

	return c;
}
   4f200:	4770      	bx	lr
   4f202:	bf00      	nop
   4f204:	0005cc3a 	.word	0x0005cc3a

0004f208 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
   4f208:	287f      	cmp	r0, #127	; 0x7f
   4f20a:	d90d      	bls.n	4f228 <ff_oem2uni+0x20>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
   4f20c:	f240 13b5 	movw	r3, #437	; 0x1b5
   4f210:	4299      	cmp	r1, r3
   4f212:	d108      	bne.n	4f226 <ff_oem2uni+0x1e>
			if (oem < 0x100) c = p[oem - 0x80];
   4f214:	28ff      	cmp	r0, #255	; 0xff
   4f216:	d806      	bhi.n	4f226 <ff_oem2uni+0x1e>
   4f218:	4b04      	ldr	r3, [pc, #16]	; (4f22c <ff_oem2uni+0x24>)
   4f21a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   4f21e:	3880      	subs	r0, #128	; 0x80
   4f220:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   4f224:	4770      	bx	lr
	WCHAR c = 0;
   4f226:	2000      	movs	r0, #0
		}
	}

	return c;
}
   4f228:	4770      	bx	lr
   4f22a:	bf00      	nop
   4f22c:	0005cc3a 	.word	0x0005cc3a

0004f230 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
   4f230:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
   4f234:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x10000) {	/* Is it in BMP? */
   4f236:	d222      	bcs.n	4f27e <ff_wtoupper+0x4e>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
   4f238:	4a1f      	ldr	r2, [pc, #124]	; (4f2b8 <ff_wtoupper+0x88>)
   4f23a:	4920      	ldr	r1, [pc, #128]	; (4f2bc <ff_wtoupper+0x8c>)
		uc = (WORD)uni;
   4f23c:	b283      	uxth	r3, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
   4f23e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   4f242:	bf28      	it	cs
   4f244:	460a      	movcs	r2, r1
   4f246:	1d14      	adds	r4, r2, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
   4f248:	f834 2c04 	ldrh.w	r2, [r4, #-4]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
   4f24c:	4621      	mov	r1, r4
   4f24e:	b1aa      	cbz	r2, 4f27c <ff_wtoupper+0x4c>
   4f250:	4293      	cmp	r3, r2
   4f252:	d313      	bcc.n	4f27c <ff_wtoupper+0x4c>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
   4f254:	f834 5c02 	ldrh.w	r5, [r4, #-2]
   4f258:	0a2e      	lsrs	r6, r5, #8
   4f25a:	b2ef      	uxtb	r7, r5
			if (uc < bc + nc) {	/* In the block? */
   4f25c:	fa52 f585 	uxtab	r5, r2, r5
   4f260:	42a8      	cmp	r0, r5
   4f262:	da23      	bge.n	4f2ac <ff_wtoupper+0x7c>
				switch (cmd) {
   4f264:	2e08      	cmp	r6, #8
   4f266:	d809      	bhi.n	4f27c <ff_wtoupper+0x4c>
   4f268:	e8df f006 	tbb	[pc, r6]
   4f26c:	13100a05 	.word	0x13100a05
   4f270:	1b191715 	.word	0x1b191715
   4f274:	1d          	.byte	0x1d
   4f275:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
   4f276:	1a80      	subs	r0, r0, r2
   4f278:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
   4f27c:	4618      	mov	r0, r3
	}

	return uni;
}
   4f27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
   4f280:	1a9a      	subs	r2, r3, r2
   4f282:	f002 0201 	and.w	r2, r2, #1
   4f286:	1a9a      	subs	r2, r3, r2
   4f288:	b293      	uxth	r3, r2
   4f28a:	e7f7      	b.n	4f27c <ff_wtoupper+0x4c>
				case 2: uc -= 16; break;			/* Shift -16 */
   4f28c:	3b10      	subs	r3, #16
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
   4f28e:	b29b      	uxth	r3, r3
   4f290:	e7f4      	b.n	4f27c <ff_wtoupper+0x4c>
				case 3:	uc -= 32; break;			/* Shift -32 */
   4f292:	3b20      	subs	r3, #32
   4f294:	e7fb      	b.n	4f28e <ff_wtoupper+0x5e>
				case 4:	uc -= 48; break;			/* Shift -48 */
   4f296:	3b30      	subs	r3, #48	; 0x30
   4f298:	e7f9      	b.n	4f28e <ff_wtoupper+0x5e>
				case 5:	uc -= 26; break;			/* Shift -26 */
   4f29a:	3b1a      	subs	r3, #26
   4f29c:	e7f7      	b.n	4f28e <ff_wtoupper+0x5e>
				case 6:	uc += 8; break;				/* Shift +8 */
   4f29e:	3308      	adds	r3, #8
   4f2a0:	e7f5      	b.n	4f28e <ff_wtoupper+0x5e>
				case 7: uc -= 80; break;			/* Shift -80 */
   4f2a2:	3b50      	subs	r3, #80	; 0x50
   4f2a4:	e7f3      	b.n	4f28e <ff_wtoupper+0x5e>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
   4f2a6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
   4f2aa:	e7f0      	b.n	4f28e <ff_wtoupper+0x5e>
			if (cmd == 0) p += nc;	/* Skip table if needed */
   4f2ac:	3404      	adds	r4, #4
   4f2ae:	2e00      	cmp	r6, #0
   4f2b0:	d1ca      	bne.n	4f248 <ff_wtoupper+0x18>
   4f2b2:	eb01 0247 	add.w	r2, r1, r7, lsl #1
   4f2b6:	e7c6      	b.n	4f246 <ff_wtoupper+0x16>
   4f2b8:	0005ca48 	.word	0x0005ca48
   4f2bc:	0005c98c 	.word	0x0005c98c

0004f2c0 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   4f2c0:	4a07      	ldr	r2, [pc, #28]	; (4f2e0 <SystemInit+0x20>)
   4f2c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   4f2c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   4f2ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   4f2ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   4f2d2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   4f2d6:	4b03      	ldr	r3, [pc, #12]	; (4f2e4 <SystemInit+0x24>)
   4f2d8:	4a03      	ldr	r2, [pc, #12]	; (4f2e8 <SystemInit+0x28>)
   4f2da:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   4f2dc:	4770      	bx	lr
   4f2de:	bf00      	nop
   4f2e0:	e000ed00 	.word	0xe000ed00
   4f2e4:	2001a790 	.word	0x2001a790
   4f2e8:	03d09000 	.word	0x03d09000

0004f2ec <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   4f2ec:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   4f2ee:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   4f2f0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   4f2f2:	fab2 f382 	clz	r3, r2
   4f2f6:	f1c3 031f 	rsb	r3, r3, #31
   4f2fa:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   4f2fc:	fa05 f403 	lsl.w	r4, r5, r3
   4f300:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   4f304:	e8d0 6fef 	ldaex	r6, [r0]
   4f308:	4296      	cmp	r6, r2
   4f30a:	d104      	bne.n	4f316 <nrfx_flag32_alloc+0x2a>
   4f30c:	e8c0 4fec 	stlex	ip, r4, [r0]
   4f310:	f1bc 0f00 	cmp.w	ip, #0
   4f314:	d1f6      	bne.n	4f304 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   4f316:	d1eb      	bne.n	4f2f0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   4f318:	4801      	ldr	r0, [pc, #4]	; (4f320 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   4f31a:	700b      	strb	r3, [r1, #0]
}
   4f31c:	bd70      	pop	{r4, r5, r6, pc}
   4f31e:	bf00      	nop
   4f320:	0bad0000 	.word	0x0bad0000

0004f324 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   4f324:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   4f326:	6803      	ldr	r3, [r0, #0]
   4f328:	40cb      	lsrs	r3, r1
   4f32a:	07db      	lsls	r3, r3, #31
   4f32c:	d410      	bmi.n	4f350 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   4f32e:	2301      	movs	r3, #1
   4f330:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   4f332:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   4f334:	ea43 0102 	orr.w	r1, r3, r2
   4f338:	e8d0 4fef 	ldaex	r4, [r0]
   4f33c:	4294      	cmp	r4, r2
   4f33e:	d104      	bne.n	4f34a <nrfx_flag32_free+0x26>
   4f340:	e8c0 1fec 	stlex	ip, r1, [r0]
   4f344:	f1bc 0f00 	cmp.w	ip, #0
   4f348:	d1f6      	bne.n	4f338 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   4f34a:	d1f2      	bne.n	4f332 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   4f34c:	4801      	ldr	r0, [pc, #4]	; (4f354 <nrfx_flag32_free+0x30>)
}
   4f34e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   4f350:	4801      	ldr	r0, [pc, #4]	; (4f358 <nrfx_flag32_free+0x34>)
   4f352:	e7fc      	b.n	4f34e <nrfx_flag32_free+0x2a>
   4f354:	0bad0000 	.word	0x0bad0000
   4f358:	0bad0004 	.word	0x0bad0004

0004f35c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   4f35c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   4f35e:	4604      	mov	r4, r0
   4f360:	b118      	cbz	r0, 4f36a <clock_stop+0xe>
   4f362:	2801      	cmp	r0, #1
   4f364:	d01e      	beq.n	4f3a4 <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   4f366:	b003      	add	sp, #12
   4f368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   4f36a:	2202      	movs	r2, #2
   4f36c:	4b27      	ldr	r3, [pc, #156]	; (4f40c <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   4f36e:	4607      	mov	r7, r0
   4f370:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f374:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   4f378:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4f37c:	2201      	movs	r2, #1
   4f37e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   4f380:	2301      	movs	r3, #1
   4f382:	f242 7510 	movw	r5, #10000	; 0x2710
   4f386:	4e21      	ldr	r6, [pc, #132]	; (4f40c <clock_stop+0xb0>)
   4f388:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   4f38c:	b1b4      	cbz	r4, 4f3bc <clock_stop+0x60>
   4f38e:	2c01      	cmp	r4, #1
   4f390:	d1e9      	bne.n	4f366 <clock_stop+0xa>
            if (p_clk_src != NULL)
   4f392:	b387      	cbz	r7, 4f3f6 <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   4f394:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   4f398:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   4f39c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   4f39e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   4f3a2:	e013      	b.n	4f3cc <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f3a4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   4f3a6:	4b19      	ldr	r3, [pc, #100]	; (4f40c <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   4f3a8:	f10d 0707 	add.w	r7, sp, #7
   4f3ac:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f3b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   4f3b4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4f3b8:	6058      	str	r0, [r3, #4]
   4f3ba:	e7e1      	b.n	4f380 <clock_stop+0x24>
            if (p_clk_src != NULL)
   4f3bc:	b18f      	cbz	r7, 4f3e2 <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   4f3be:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   4f3c2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   4f3c6:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   4f3c8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   4f3cc:	03da      	lsls	r2, r3, #15
   4f3ce:	d5ca      	bpl.n	4f366 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   4f3d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   4f3d4:	2801      	cmp	r0, #1
   4f3d6:	d1c6      	bne.n	4f366 <clock_stop+0xa>
   4f3d8:	f00a fa84 	bl	598e4 <nrfx_busy_wait>
   4f3dc:	3d01      	subs	r5, #1
   4f3de:	d1d5      	bne.n	4f38c <clock_stop+0x30>
   4f3e0:	e7c1      	b.n	4f366 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   4f3e2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   4f3e6:	03d9      	lsls	r1, r3, #15
   4f3e8:	d5bd      	bpl.n	4f366 <clock_stop+0xa>
   4f3ea:	2001      	movs	r0, #1
   4f3ec:	f00a fa7a 	bl	598e4 <nrfx_busy_wait>
   4f3f0:	3d01      	subs	r5, #1
   4f3f2:	d1f6      	bne.n	4f3e2 <clock_stop+0x86>
   4f3f4:	e7b7      	b.n	4f366 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   4f3f6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   4f3fa:	03db      	lsls	r3, r3, #15
   4f3fc:	d5b3      	bpl.n	4f366 <clock_stop+0xa>
   4f3fe:	2001      	movs	r0, #1
   4f400:	f00a fa70 	bl	598e4 <nrfx_busy_wait>
   4f404:	3d01      	subs	r5, #1
   4f406:	d1f6      	bne.n	4f3f6 <clock_stop+0x9a>
   4f408:	e7ad      	b.n	4f366 <clock_stop+0xa>
   4f40a:	bf00      	nop
   4f40c:	40005000 	.word	0x40005000

0004f410 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   4f410:	4b04      	ldr	r3, [pc, #16]	; (4f424 <nrfx_clock_init+0x14>)
   4f412:	791a      	ldrb	r2, [r3, #4]
   4f414:	b922      	cbnz	r2, 4f420 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   4f416:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   4f418:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   4f41a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   4f41c:	4802      	ldr	r0, [pc, #8]	; (4f428 <nrfx_clock_init+0x18>)
   4f41e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   4f420:	4802      	ldr	r0, [pc, #8]	; (4f42c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   4f422:	4770      	bx	lr
   4f424:	2001b894 	.word	0x2001b894
   4f428:	0bad0000 	.word	0x0bad0000
   4f42c:	0bad000c 	.word	0x0bad000c

0004f430 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   4f430:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   4f432:	2005      	movs	r0, #5
   4f434:	f7f6 fcf2 	bl	45e1c <arch_irq_is_enabled>
   4f438:	b910      	cbnz	r0, 4f440 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   4f43a:	2005      	movs	r0, #5
   4f43c:	f7f6 fccc 	bl	45dd8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   4f440:	2201      	movs	r2, #1
   4f442:	4b02      	ldr	r3, [pc, #8]	; (4f44c <nrfx_clock_enable+0x1c>)
   4f444:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   4f448:	bd08      	pop	{r3, pc}
   4f44a:	bf00      	nop
   4f44c:	40005000 	.word	0x40005000

0004f450 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   4f450:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   4f452:	b110      	cbz	r0, 4f45a <nrfx_clock_start+0xa>
   4f454:	2801      	cmp	r0, #1
   4f456:	d02e      	beq.n	4f4b6 <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   4f458:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   4f45a:	4a1c      	ldr	r2, [pc, #112]	; (4f4cc <nrfx_clock_start+0x7c>)
   4f45c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   4f460:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   4f464:	03c9      	lsls	r1, r1, #15
   4f466:	d40e      	bmi.n	4f486 <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   4f468:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   4f46c:	07db      	lsls	r3, r3, #31
   4f46e:	d513      	bpl.n	4f498 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   4f470:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   4f474:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   4f478:	3b01      	subs	r3, #1
   4f47a:	2b01      	cmp	r3, #1
   4f47c:	d809      	bhi.n	4f492 <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
   4f47e:	2302      	movs	r3, #2
   4f480:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   4f484:	e7e8      	b.n	4f458 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   4f486:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   4f48a:	2b02      	cmp	r3, #2
   4f48c:	d005      	beq.n	4f49a <nrfx_clock_start+0x4a>
   4f48e:	2b01      	cmp	r3, #1
   4f490:	d002      	beq.n	4f498 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   4f492:	2000      	movs	r0, #0
   4f494:	f7ff ff62 	bl	4f35c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   4f498:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   4f49a:	4a0c      	ldr	r2, [pc, #48]	; (4f4cc <nrfx_clock_start+0x7c>)
   4f49c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f4a0:	2300      	movs	r3, #0
   4f4a2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   4f4a6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   4f4aa:	2302      	movs	r3, #2
   4f4ac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4f4b0:	2301      	movs	r3, #1
   4f4b2:	6093      	str	r3, [r2, #8]
}
   4f4b4:	e7d0      	b.n	4f458 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f4b6:	2200      	movs	r2, #0
   4f4b8:	4b04      	ldr	r3, [pc, #16]	; (4f4cc <nrfx_clock_start+0x7c>)
   4f4ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   4f4be:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   4f4c2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4f4c6:	6018      	str	r0, [r3, #0]
}
   4f4c8:	e7c6      	b.n	4f458 <nrfx_clock_start+0x8>
   4f4ca:	bf00      	nop
   4f4cc:	40005000 	.word	0x40005000

0004f4d0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   4f4d0:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   4f4d2:	4b17      	ldr	r3, [pc, #92]	; (4f530 <nrfx_power_clock_irq_handler+0x60>)
   4f4d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   4f4d8:	b152      	cbz	r2, 4f4f0 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f4da:	2000      	movs	r0, #0
   4f4dc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   4f4e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   4f4e4:	2201      	movs	r2, #1
   4f4e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   4f4ea:	4b12      	ldr	r3, [pc, #72]	; (4f534 <nrfx_power_clock_irq_handler+0x64>)
   4f4ec:	681b      	ldr	r3, [r3, #0]
   4f4ee:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   4f4f0:	4b0f      	ldr	r3, [pc, #60]	; (4f530 <nrfx_power_clock_irq_handler+0x60>)
   4f4f2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   4f4f6:	b18a      	cbz	r2, 4f51c <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4f4f8:	2200      	movs	r2, #0
   4f4fa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   4f4fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   4f502:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   4f506:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   4f50a:	f002 0203 	and.w	r2, r2, #3
   4f50e:	2a01      	cmp	r2, #1
   4f510:	f04f 0102 	mov.w	r1, #2
   4f514:	d103      	bne.n	4f51e <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   4f516:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4f51a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   4f51c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   4f51e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   4f522:	4b04      	ldr	r3, [pc, #16]	; (4f534 <nrfx_power_clock_irq_handler+0x64>)
   4f524:	2001      	movs	r0, #1
}
   4f526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   4f52a:	681b      	ldr	r3, [r3, #0]
   4f52c:	4718      	bx	r3
   4f52e:	bf00      	nop
   4f530:	40005000 	.word	0x40005000
   4f534:	2001b894 	.word	0x2001b894

0004f538 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   4f538:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   4f53a:	4801      	ldr	r0, [pc, #4]	; (4f540 <nrfx_dppi_channel_alloc+0x8>)
   4f53c:	f7ff bed6 	b.w	4f2ec <nrfx_flag32_alloc>
   4f540:	2001a794 	.word	0x2001a794

0004f544 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4f544:	4a06      	ldr	r2, [pc, #24]	; (4f560 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   4f546:	f000 001f 	and.w	r0, r0, #31
   4f54a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4f54e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
   4f552:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   4f556:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   4f55a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   4f55e:	4770      	bx	lr
   4f560:	40842500 	.word	0x40842500

0004f564 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   4f564:	4b03      	ldr	r3, [pc, #12]	; (4f574 <pin_in_use_by_te+0x10>)
   4f566:	3008      	adds	r0, #8
   4f568:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   4f56c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   4f570:	4770      	bx	lr
   4f572:	bf00      	nop
   4f574:	2001a798 	.word	0x2001a798

0004f578 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   4f578:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4f57a:	4c0d      	ldr	r4, [pc, #52]	; (4f5b0 <call_handler+0x38>)
   4f57c:	f100 0308 	add.w	r3, r0, #8
   4f580:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   4f584:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4f586:	05da      	lsls	r2, r3, #23
{
   4f588:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4f58a:	d507      	bpl.n	4f59c <call_handler+0x24>
   4f58c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   4f590:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   4f594:	6852      	ldr	r2, [r2, #4]
   4f596:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   4f59a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   4f59c:	68a3      	ldr	r3, [r4, #8]
   4f59e:	b12b      	cbz	r3, 4f5ac <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   4f5a0:	4631      	mov	r1, r6
   4f5a2:	4628      	mov	r0, r5
   4f5a4:	68e2      	ldr	r2, [r4, #12]
    }
}
   4f5a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   4f5aa:	4718      	bx	r3
}
   4f5ac:	bd70      	pop	{r4, r5, r6, pc}
   4f5ae:	bf00      	nop
   4f5b0:	2001a798 	.word	0x2001a798

0004f5b4 <release_handler>:
{
   4f5b4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   4f5b6:	4a13      	ldr	r2, [pc, #76]	; (4f604 <release_handler+0x50>)
   4f5b8:	3008      	adds	r0, #8
   4f5ba:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   4f5be:	05d9      	lsls	r1, r3, #23
   4f5c0:	d51c      	bpl.n	4f5fc <release_handler+0x48>
   4f5c2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   4f5c6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   4f5ca:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   4f5ce:	2000      	movs	r0, #0
   4f5d0:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   4f5d4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   4f5d8:	f413 7f80 	tst.w	r3, #256	; 0x100
   4f5dc:	d003      	beq.n	4f5e6 <release_handler+0x32>
   4f5de:	f3c3 2343 	ubfx	r3, r3, #9, #4
   4f5e2:	4299      	cmp	r1, r3
   4f5e4:	d00a      	beq.n	4f5fc <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   4f5e6:	3001      	adds	r0, #1
   4f5e8:	2820      	cmp	r0, #32
   4f5ea:	d1f3      	bne.n	4f5d4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   4f5ec:	2300      	movs	r3, #0
   4f5ee:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   4f5f2:	4805      	ldr	r0, [pc, #20]	; (4f608 <release_handler+0x54>)
}
   4f5f4:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   4f5f8:	f7ff be94 	b.w	4f324 <nrfx_flag32_free>
}
   4f5fc:	f85d 4b04 	ldr.w	r4, [sp], #4
   4f600:	4770      	bx	lr
   4f602:	bf00      	nop
   4f604:	2001a798 	.word	0x2001a798
   4f608:	2001a7ec 	.word	0x2001a7ec

0004f60c <pin_handler_trigger_uninit>:
{
   4f60c:	b538      	push	{r3, r4, r5, lr}
   4f60e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   4f610:	f7ff ffa8 	bl	4f564 <pin_in_use_by_te>
   4f614:	4c0b      	ldr	r4, [pc, #44]	; (4f644 <pin_handler_trigger_uninit+0x38>)
   4f616:	f102 0508 	add.w	r5, r2, #8
   4f61a:	b160      	cbz	r0, 4f636 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   4f61c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   4f61e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   4f622:	0b5b      	lsrs	r3, r3, #13
   4f624:	009b      	lsls	r3, r3, #2
   4f626:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4f62a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   4f62e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   4f632:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   4f636:	4610      	mov	r0, r2
   4f638:	f7ff ffbc 	bl	4f5b4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   4f63c:	2300      	movs	r3, #0
   4f63e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   4f642:	bd38      	pop	{r3, r4, r5, pc}
   4f644:	2001a798 	.word	0x2001a798

0004f648 <nrfx_gpiote_input_configure>:
{
   4f648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4f64c:	4604      	mov	r4, r0
   4f64e:	461d      	mov	r5, r3
    if (p_input_config)
   4f650:	b309      	cbz	r1, 4f696 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f652:	4f4e      	ldr	r7, [pc, #312]	; (4f78c <nrfx_gpiote_input_configure+0x144>)
   4f654:	f100 0808 	add.w	r8, r0, #8
   4f658:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   4f65c:	07b3      	lsls	r3, r6, #30
   4f65e:	d506      	bpl.n	4f66e <nrfx_gpiote_input_configure+0x26>
   4f660:	f7ff ff80 	bl	4f564 <pin_in_use_by_te>
   4f664:	b118      	cbz	r0, 4f66e <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   4f666:	484a      	ldr	r0, [pc, #296]	; (4f790 <nrfx_gpiote_input_configure+0x148>)
}
   4f668:	b002      	add	sp, #8
   4f66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4f66e:	4849      	ldr	r0, [pc, #292]	; (4f794 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
   4f670:	f004 031f 	and.w	r3, r4, #31
   4f674:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4f678:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   4f67c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   4f67e:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   4f682:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   4f686:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   4f68a:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   4f68e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   4f692:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
   4f696:	b19a      	cbz	r2, 4f6c0 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f698:	4e3c      	ldr	r6, [pc, #240]	; (4f78c <nrfx_gpiote_input_configure+0x144>)
   4f69a:	f104 0708 	add.w	r7, r4, #8
   4f69e:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   4f6a2:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
   4f6a4:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   4f6a8:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
   4f6aa:	d00c      	beq.n	4f6c6 <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
   4f6ac:	2800      	cmp	r0, #0
   4f6ae:	d1da      	bne.n	4f666 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   4f6b0:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
   4f6b4:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   4f6b8:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
   4f6bc:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   4f6c0:	bbd5      	cbnz	r5, 4f738 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
   4f6c2:	4835      	ldr	r0, [pc, #212]	; (4f798 <nrfx_gpiote_input_configure+0x150>)
   4f6c4:	e7d0      	b.n	4f668 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   4f6c6:	f021 0120 	bic.w	r1, r1, #32
   4f6ca:	04c9      	lsls	r1, r1, #19
   4f6cc:	0cc9      	lsrs	r1, r1, #19
   4f6ce:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   4f6d2:	2800      	cmp	r0, #0
   4f6d4:	d0ec      	beq.n	4f6b0 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   4f6d6:	2b03      	cmp	r3, #3
   4f6d8:	d8c5      	bhi.n	4f666 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   4f6da:	6852      	ldr	r2, [r2, #4]
   4f6dc:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   4f6e0:	4662      	mov	r2, ip
   4f6e2:	0092      	lsls	r2, r2, #2
   4f6e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   4f6e8:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   4f6ec:	b923      	cbnz	r3, 4f6f8 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
   4f6ee:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   4f6f2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
   4f6f6:	e7db      	b.n	4f6b0 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   4f6f8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   4f6fc:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   4f700:	f020 0003 	bic.w	r0, r0, #3
   4f704:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   4f708:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   4f70c:	f041 0120 	orr.w	r1, r1, #32
   4f710:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   4f714:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   4f718:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4f71c:	0220      	lsls	r0, r4, #8
   4f71e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   4f722:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   4f726:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   4f72a:	ea40 000e 	orr.w	r0, r0, lr
   4f72e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   4f732:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   4f736:	e7bb      	b.n	4f6b0 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
   4f738:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   4f73a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   4f73e:	f7ff ff39 	bl	4f5b4 <release_handler>
    if (!handler)
   4f742:	2e00      	cmp	r6, #0
   4f744:	d0bd      	beq.n	4f6c2 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   4f746:	4d11      	ldr	r5, [pc, #68]	; (4f78c <nrfx_gpiote_input_configure+0x144>)
   4f748:	e9d5 2300 	ldrd	r2, r3, [r5]
   4f74c:	4296      	cmp	r6, r2
   4f74e:	d101      	bne.n	4f754 <nrfx_gpiote_input_configure+0x10c>
   4f750:	429f      	cmp	r7, r3
   4f752:	d018      	beq.n	4f786 <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   4f754:	4811      	ldr	r0, [pc, #68]	; (4f79c <nrfx_gpiote_input_configure+0x154>)
   4f756:	f10d 0107 	add.w	r1, sp, #7
   4f75a:	f7ff fdc7 	bl	4f2ec <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   4f75e:	4b0e      	ldr	r3, [pc, #56]	; (4f798 <nrfx_gpiote_input_configure+0x150>)
   4f760:	4298      	cmp	r0, r3
   4f762:	d181      	bne.n	4f668 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   4f764:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   4f768:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   4f76c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   4f76e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   4f770:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   4f774:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   4f778:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   4f77c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   4f780:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   4f784:	e79d      	b.n	4f6c2 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   4f786:	2200      	movs	r2, #0
   4f788:	e7ee      	b.n	4f768 <nrfx_gpiote_input_configure+0x120>
   4f78a:	bf00      	nop
   4f78c:	2001a798 	.word	0x2001a798
   4f790:	0bad0004 	.word	0x0bad0004
   4f794:	40842500 	.word	0x40842500
   4f798:	0bad0000 	.word	0x0bad0000
   4f79c:	2001a7ec 	.word	0x2001a7ec

0004f7a0 <nrfx_gpiote_output_configure>:
{
   4f7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4f7a2:	4604      	mov	r4, r0
    if (p_config)
   4f7a4:	b379      	cbz	r1, 4f806 <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f7a6:	4e3a      	ldr	r6, [pc, #232]	; (4f890 <nrfx_gpiote_output_configure+0xf0>)
   4f7a8:	f100 0708 	add.w	r7, r0, #8
   4f7ac:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   4f7b0:	07ab      	lsls	r3, r5, #30
   4f7b2:	d404      	bmi.n	4f7be <nrfx_gpiote_output_configure+0x1e>
   4f7b4:	f7ff fed6 	bl	4f564 <pin_in_use_by_te>
   4f7b8:	b108      	cbz	r0, 4f7be <nrfx_gpiote_output_configure+0x1e>
{
   4f7ba:	4836      	ldr	r0, [pc, #216]	; (4f894 <nrfx_gpiote_output_configure+0xf4>)
}
   4f7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   4f7be:	f015 0f1c 	tst.w	r5, #28
   4f7c2:	784b      	ldrb	r3, [r1, #1]
   4f7c4:	d122      	bne.n	4f80c <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
   4f7c6:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4f7ca:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 4f898 <nrfx_gpiote_output_configure+0xf8>
   4f7ce:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   4f7d2:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   4f7d6:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   4f7da:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   4f7dc:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   4f7e0:	7809      	ldrb	r1, [r1, #0]
   4f7e2:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
   4f7e6:	f02c 0c07 	bic.w	ip, ip, #7
   4f7ea:	ea43 030c 	orr.w	r3, r3, ip
   4f7ee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   4f7f2:	4929      	ldr	r1, [pc, #164]	; (4f898 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   4f7f4:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
   4f7f8:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   4f7fa:	f045 0503 	orr.w	r5, r5, #3
   4f7fe:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   4f802:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   4f806:	b922      	cbnz	r2, 4f812 <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
   4f808:	4824      	ldr	r0, [pc, #144]	; (4f89c <nrfx_gpiote_output_configure+0xfc>)
   4f80a:	e7d7      	b.n	4f7bc <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   4f80c:	2b01      	cmp	r3, #1
   4f80e:	d1da      	bne.n	4f7c6 <nrfx_gpiote_output_configure+0x26>
   4f810:	e7d3      	b.n	4f7ba <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f812:	4e1f      	ldr	r6, [pc, #124]	; (4f890 <nrfx_gpiote_output_configure+0xf0>)
   4f814:	f104 0708 	add.w	r7, r4, #8
   4f818:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   4f81c:	0783      	lsls	r3, r0, #30
   4f81e:	d5cc      	bpl.n	4f7ba <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   4f820:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   4f824:	2300      	movs	r3, #0
   4f826:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   4f828:	f020 0020 	bic.w	r0, r0, #32
   4f82c:	0089      	lsls	r1, r1, #2
   4f82e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   4f832:	04c0      	lsls	r0, r0, #19
   4f834:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   4f838:	0cc0      	lsrs	r0, r0, #19
   4f83a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   4f83e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   4f842:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   4f846:	7855      	ldrb	r5, [r2, #1]
   4f848:	2d00      	cmp	r5, #0
   4f84a:	d0dd      	beq.n	4f808 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   4f84c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   4f850:	7892      	ldrb	r2, [r2, #2]
   4f852:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   4f856:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   4f85a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4f85e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   4f862:	0223      	lsls	r3, r4, #8
   4f864:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   4f868:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4f86a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   4f86e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   4f872:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4f874:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   4f876:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   4f87a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   4f87e:	4313      	orrs	r3, r2
   4f880:	f040 0020 	orr.w	r0, r0, #32
   4f884:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   4f888:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   4f88c:	e7bc      	b.n	4f808 <nrfx_gpiote_output_configure+0x68>
   4f88e:	bf00      	nop
   4f890:	2001a798 	.word	0x2001a798
   4f894:	0bad0004 	.word	0x0bad0004
   4f898:	40842500 	.word	0x40842500
   4f89c:	0bad0000 	.word	0x0bad0000

0004f8a0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   4f8a0:	4b01      	ldr	r3, [pc, #4]	; (4f8a8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   4f8a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   4f8a6:	4770      	bx	lr
   4f8a8:	2001a798 	.word	0x2001a798

0004f8ac <nrfx_gpiote_channel_get>:
{
   4f8ac:	b508      	push	{r3, lr}
   4f8ae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   4f8b0:	f7ff fe58 	bl	4f564 <pin_in_use_by_te>
   4f8b4:	b138      	cbz	r0, 4f8c6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   4f8b6:	4b05      	ldr	r3, [pc, #20]	; (4f8cc <nrfx_gpiote_channel_get+0x20>)
   4f8b8:	3208      	adds	r2, #8
   4f8ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   4f8be:	4804      	ldr	r0, [pc, #16]	; (4f8d0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   4f8c0:	0b5b      	lsrs	r3, r3, #13
   4f8c2:	700b      	strb	r3, [r1, #0]
}
   4f8c4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   4f8c6:	4803      	ldr	r0, [pc, #12]	; (4f8d4 <nrfx_gpiote_channel_get+0x28>)
   4f8c8:	e7fc      	b.n	4f8c4 <nrfx_gpiote_channel_get+0x18>
   4f8ca:	bf00      	nop
   4f8cc:	2001a798 	.word	0x2001a798
   4f8d0:	0bad0000 	.word	0x0bad0000
   4f8d4:	0bad0004 	.word	0x0bad0004

0004f8d8 <nrfx_gpiote_init>:
{
   4f8d8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   4f8da:	4c0f      	ldr	r4, [pc, #60]	; (4f918 <nrfx_gpiote_init+0x40>)
   4f8dc:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   4f8e0:	b9bd      	cbnz	r5, 4f912 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   4f8e2:	2240      	movs	r2, #64	; 0x40
   4f8e4:	4629      	mov	r1, r5
   4f8e6:	f104 0010 	add.w	r0, r4, #16
   4f8ea:	f00b fb35 	bl	5af58 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   4f8ee:	2031      	movs	r0, #49	; 0x31
   4f8f0:	f7f6 fa72 	bl	45dd8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4f8f4:	4b09      	ldr	r3, [pc, #36]	; (4f91c <nrfx_gpiote_init+0x44>)
    return err_code;
   4f8f6:	480a      	ldr	r0, [pc, #40]	; (4f920 <nrfx_gpiote_init+0x48>)
   4f8f8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   4f8fc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   4f900:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   4f904:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   4f908:	2301      	movs	r3, #1
   4f90a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   4f90e:	6563      	str	r3, [r4, #84]	; 0x54
}
   4f910:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   4f912:	4804      	ldr	r0, [pc, #16]	; (4f924 <nrfx_gpiote_init+0x4c>)
   4f914:	e7fc      	b.n	4f910 <nrfx_gpiote_init+0x38>
   4f916:	bf00      	nop
   4f918:	2001a798 	.word	0x2001a798
   4f91c:	40031000 	.word	0x40031000
   4f920:	0bad0000 	.word	0x0bad0000
   4f924:	0bad0005 	.word	0x0bad0005

0004f928 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   4f928:	4b03      	ldr	r3, [pc, #12]	; (4f938 <nrfx_gpiote_is_init+0x10>)
   4f92a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   4f92e:	3800      	subs	r0, #0
   4f930:	bf18      	it	ne
   4f932:	2001      	movne	r0, #1
   4f934:	4770      	bx	lr
   4f936:	bf00      	nop
   4f938:	2001a798 	.word	0x2001a798

0004f93c <nrfx_gpiote_channel_free>:
{
   4f93c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   4f93e:	4801      	ldr	r0, [pc, #4]	; (4f944 <nrfx_gpiote_channel_free+0x8>)
   4f940:	f7ff bcf0 	b.w	4f324 <nrfx_flag32_free>
   4f944:	2001a7e8 	.word	0x2001a7e8

0004f948 <nrfx_gpiote_channel_alloc>:
{
   4f948:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   4f94a:	4801      	ldr	r0, [pc, #4]	; (4f950 <nrfx_gpiote_channel_alloc+0x8>)
   4f94c:	f7ff bcce 	b.w	4f2ec <nrfx_flag32_alloc>
   4f950:	2001a7e8 	.word	0x2001a7e8

0004f954 <nrfx_gpiote_trigger_enable>:
{
   4f954:	4602      	mov	r2, r0
   4f956:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   4f958:	f7ff fe04 	bl	4f564 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f95c:	4b1b      	ldr	r3, [pc, #108]	; (4f9cc <nrfx_gpiote_trigger_enable+0x78>)
   4f95e:	f102 0408 	add.w	r4, r2, #8
   4f962:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   4f966:	b1c8      	cbz	r0, 4f99c <nrfx_gpiote_trigger_enable+0x48>
   4f968:	f013 0402 	ands.w	r4, r3, #2
   4f96c:	d116      	bne.n	4f99c <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
   4f96e:	4818      	ldr	r0, [pc, #96]	; (4f9d0 <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   4f970:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   4f972:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4f974:	5084      	str	r4, [r0, r2]
   4f976:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   4f978:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   4f97c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   4f980:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   4f984:	f040 0001 	orr.w	r0, r0, #1
   4f988:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   4f98c:	b129      	cbz	r1, 4f99a <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   4f98e:	2201      	movs	r2, #1
   4f990:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   4f994:	4a0f      	ldr	r2, [pc, #60]	; (4f9d4 <nrfx_gpiote_trigger_enable+0x80>)
   4f996:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   4f99a:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   4f99c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   4f9a0:	2b04      	cmp	r3, #4
   4f9a2:	d00e      	beq.n	4f9c2 <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   4f9a4:	2b05      	cmp	r3, #5
   4f9a6:	d00e      	beq.n	4f9c6 <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
   4f9a8:	4b0b      	ldr	r3, [pc, #44]	; (4f9d8 <nrfx_gpiote_trigger_enable+0x84>)
   4f9aa:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   4f9ac:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   4f9b0:	40d9      	lsrs	r1, r3
   4f9b2:	f001 0101 	and.w	r1, r1, #1
   4f9b6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   4f9b8:	4610      	mov	r0, r2
}
   4f9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   4f9be:	f7ff bdc1 	b.w	4f544 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   4f9c2:	2103      	movs	r1, #3
   4f9c4:	e7f8      	b.n	4f9b8 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   4f9c6:	2102      	movs	r1, #2
   4f9c8:	e7f6      	b.n	4f9b8 <nrfx_gpiote_trigger_enable+0x64>
   4f9ca:	bf00      	nop
   4f9cc:	2001a798 	.word	0x2001a798
   4f9d0:	40031100 	.word	0x40031100
   4f9d4:	40031000 	.word	0x40031000
   4f9d8:	40842500 	.word	0x40842500

0004f9dc <nrfx_gpiote_trigger_disable>:
{
   4f9dc:	b508      	push	{r3, lr}
   4f9de:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   4f9e0:	f7ff fdc0 	bl	4f564 <pin_in_use_by_te>
   4f9e4:	b1c0      	cbz	r0, 4fa18 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   4f9e6:	4b0f      	ldr	r3, [pc, #60]	; (4fa24 <nrfx_gpiote_trigger_disable+0x48>)
   4f9e8:	f102 0108 	add.w	r1, r2, #8
   4f9ec:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   4f9f0:	0799      	lsls	r1, r3, #30
   4f9f2:	d411      	bmi.n	4fa18 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   4f9f4:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   4f9f6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   4f9f8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   4f9fa:	490b      	ldr	r1, [pc, #44]	; (4fa28 <nrfx_gpiote_trigger_disable+0x4c>)
   4f9fc:	009b      	lsls	r3, r3, #2
   4f9fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4fa02:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   4fa06:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   4fa0a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   4fa0e:	f022 0203 	bic.w	r2, r2, #3
   4fa12:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   4fa16:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   4fa18:	2100      	movs	r1, #0
}
   4fa1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   4fa1e:	4610      	mov	r0, r2
   4fa20:	f7ff bd90 	b.w	4f544 <nrf_gpio_cfg_sense_set>
   4fa24:	2001a798 	.word	0x2001a798
   4fa28:	40031000 	.word	0x40031000

0004fa2c <nrfx_gpiote_pin_uninit>:
{
   4fa2c:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   4fa2e:	4b0c      	ldr	r3, [pc, #48]	; (4fa60 <nrfx_gpiote_pin_uninit+0x34>)
   4fa30:	f100 0208 	add.w	r2, r0, #8
   4fa34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   4fa38:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   4fa3a:	07db      	lsls	r3, r3, #31
   4fa3c:	d50d      	bpl.n	4fa5a <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   4fa3e:	f7ff ffcd 	bl	4f9dc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   4fa42:	4620      	mov	r0, r4
   4fa44:	f7ff fde2 	bl	4f60c <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   4fa48:	2202      	movs	r2, #2
   4fa4a:	4b06      	ldr	r3, [pc, #24]	; (4fa64 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   4fa4c:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   4fa50:	3480      	adds	r4, #128	; 0x80
   4fa52:	4805      	ldr	r0, [pc, #20]	; (4fa68 <nrfx_gpiote_pin_uninit+0x3c>)
   4fa54:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   4fa58:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   4fa5a:	4804      	ldr	r0, [pc, #16]	; (4fa6c <nrfx_gpiote_pin_uninit+0x40>)
   4fa5c:	e7fc      	b.n	4fa58 <nrfx_gpiote_pin_uninit+0x2c>
   4fa5e:	bf00      	nop
   4fa60:	2001a798 	.word	0x2001a798
   4fa64:	40842500 	.word	0x40842500
   4fa68:	0bad0000 	.word	0x0bad0000
   4fa6c:	0bad0004 	.word	0x0bad0004

0004fa70 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   4fa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   4fa74:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   4fa76:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4fa78:	462c      	mov	r4, r5
{
   4fa7a:	4b4d      	ldr	r3, [pc, #308]	; (4fbb0 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   4fa7c:	484d      	ldr	r0, [pc, #308]	; (4fbb4 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   4fa7e:	494e      	ldr	r1, [pc, #312]	; (4fbb8 <nrfx_gpiote_irq_handler+0x148>)
{
   4fa80:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4fa82:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   4fa84:	b136      	cbz	r6, 4fa94 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   4fa86:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   4fa8a:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4fa8c:	bf1e      	ittt	ne
   4fa8e:	601c      	strne	r4, [r3, #0]
   4fa90:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   4fa92:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   4fa94:	3304      	adds	r3, #4
   4fa96:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   4fa98:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   4fa9c:	d1f1      	bne.n	4fa82 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4fa9e:	4f45      	ldr	r7, [pc, #276]	; (4fbb4 <nrfx_gpiote_irq_handler+0x144>)
   4faa0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   4faa4:	b193      	cbz	r3, 4facc <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
   4faa6:	4e45      	ldr	r6, [pc, #276]	; (4fbbc <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   4faa8:	f10d 090c 	add.w	r9, sp, #12
   4faac:	6a33      	ldr	r3, [r6, #32]
   4faae:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   4fab0:	6233      	str	r3, [r6, #32]
   4fab2:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
   4fab6:	9803      	ldr	r0, [sp, #12]
   4fab8:	b970      	cbnz	r0, 4fad8 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4faba:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
   4fabe:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   4fac2:	6a33      	ldr	r3, [r6, #32]
   4fac4:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   4fac6:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
   4fac8:	2b00      	cmp	r3, #0
   4faca:	d1f2      	bne.n	4fab2 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   4facc:	2401      	movs	r4, #1
    while (mask)
   4face:	2d00      	cmp	r5, #0
   4fad0:	d156      	bne.n	4fb80 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   4fad2:	b005      	add	sp, #20
   4fad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   4fad8:	fa90 fba0 	rbit	fp, r0
   4fadc:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   4fae0:	4a37      	ldr	r2, [pc, #220]	; (4fbc0 <nrfx_gpiote_irq_handler+0x150>)
   4fae2:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   4fae6:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
   4faea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   4faee:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   4faf2:	f819 300c 	ldrb.w	r3, [r9, ip]
   4faf6:	fa0a f404 	lsl.w	r4, sl, r4
   4fafa:	ea23 0304 	bic.w	r3, r3, r4
   4fafe:	f809 300c 	strb.w	r3, [r9, ip]
   4fb02:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   4fb06:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   4fb0a:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
   4fb0e:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   4fb10:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   4fb12:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   4fb16:	d518      	bpl.n	4fb4a <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
   4fb18:	4611      	mov	r1, r2
   4fb1a:	4658      	mov	r0, fp
   4fb1c:	9301      	str	r3, [sp, #4]
   4fb1e:	f7ff fd2b 	bl	4f578 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   4fb22:	9b01      	ldr	r3, [sp, #4]
   4fb24:	b2e4      	uxtb	r4, r4
   4fb26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   4fb2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   4fb2e:	429c      	cmp	r4, r3
   4fb30:	d107      	bne.n	4fb42 <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   4fb32:	2100      	movs	r1, #0
   4fb34:	4658      	mov	r0, fp
   4fb36:	f7ff fd05 	bl	4f544 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   4fb3a:	4621      	mov	r1, r4
   4fb3c:	4658      	mov	r0, fp
   4fb3e:	f7ff fd01 	bl	4f544 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   4fb42:	fa0a f00b 	lsl.w	r0, sl, fp
   4fb46:	6230      	str	r0, [r6, #32]
}
   4fb48:	e7b5      	b.n	4fab6 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   4fb4a:	2c02      	cmp	r4, #2
   4fb4c:	d10c      	bne.n	4fb68 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   4fb4e:	2103      	movs	r1, #3
   4fb50:	4658      	mov	r0, fp
   4fb52:	f7ff fcf7 	bl	4f544 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   4fb56:	f008 0305 	and.w	r3, r8, #5
   4fb5a:	2b01      	cmp	r3, #1
   4fb5c:	d1f1      	bne.n	4fb42 <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
   4fb5e:	4641      	mov	r1, r8
   4fb60:	4658      	mov	r0, fp
   4fb62:	f7ff fd09 	bl	4f578 <call_handler>
   4fb66:	e7ec      	b.n	4fb42 <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   4fb68:	2102      	movs	r1, #2
   4fb6a:	4658      	mov	r0, fp
   4fb6c:	9201      	str	r2, [sp, #4]
   4fb6e:	f7ff fce9 	bl	4f544 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   4fb72:	9a01      	ldr	r2, [sp, #4]
   4fb74:	2a03      	cmp	r2, #3
   4fb76:	d0f2      	beq.n	4fb5e <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   4fb78:	2c03      	cmp	r4, #3
   4fb7a:	d1e2      	bne.n	4fb42 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   4fb7c:	428a      	cmp	r2, r1
   4fb7e:	e7ed      	b.n	4fb5c <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
   4fb80:	fa95 f3a5 	rbit	r3, r5
   4fb84:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   4fb88:	fa04 f203 	lsl.w	r2, r4, r3
   4fb8c:	009b      	lsls	r3, r3, #2
   4fb8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4fb92:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   4fb96:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   4fb9a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   4fb9e:	f3c0 2004 	ubfx	r0, r0, #8, #5
   4fba2:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   4fba6:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   4fbaa:	f7ff fce5 	bl	4f578 <call_handler>
   4fbae:	e78e      	b.n	4face <nrfx_gpiote_irq_handler+0x5e>
   4fbb0:	40031100 	.word	0x40031100
   4fbb4:	40031000 	.word	0x40031000
   4fbb8:	40031120 	.word	0x40031120
   4fbbc:	40842500 	.word	0x40842500
   4fbc0:	2001a798 	.word	0x2001a798

0004fbc4 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   4fbc4:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   4fbc6:	4c08      	ldr	r4, [pc, #32]	; (4fbe8 <nrfx_ipc_init+0x24>)
{
   4fbc8:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   4fbca:	7923      	ldrb	r3, [r4, #4]
{
   4fbcc:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   4fbce:	b943      	cbnz	r3, 4fbe2 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   4fbd0:	202a      	movs	r0, #42	; 0x2a
   4fbd2:	f7f6 f901 	bl	45dd8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   4fbd6:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   4fbd8:	4804      	ldr	r0, [pc, #16]	; (4fbec <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   4fbda:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   4fbdc:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   4fbde:	60a5      	str	r5, [r4, #8]
}
   4fbe0:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   4fbe2:	4803      	ldr	r0, [pc, #12]	; (4fbf0 <nrfx_ipc_init+0x2c>)
   4fbe4:	e7fc      	b.n	4fbe0 <nrfx_ipc_init+0x1c>
   4fbe6:	bf00      	nop
   4fbe8:	2001b89c 	.word	0x2001b89c
   4fbec:	0bad0000 	.word	0x0bad0000
   4fbf0:	0bad000c 	.word	0x0bad000c

0004fbf4 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   4fbf4:	2300      	movs	r3, #0
{
   4fbf6:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   4fbf8:	4a0d      	ldr	r2, [pc, #52]	; (4fc30 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   4fbfa:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   4fbfe:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   4fc02:	3301      	adds	r3, #1
   4fc04:	2b08      	cmp	r3, #8
   4fc06:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   4fc0a:	d1f6      	bne.n	4fbfa <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   4fc0c:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   4fc0e:	4a08      	ldr	r2, [pc, #32]	; (4fc30 <nrfx_ipc_config_load+0x3c>)
   4fc10:	f100 011c 	add.w	r1, r0, #28
   4fc14:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   4fc18:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   4fc1c:	3301      	adds	r3, #1
   4fc1e:	2b08      	cmp	r3, #8
   4fc20:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   4fc24:	d1f6      	bne.n	4fc14 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   4fc26:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   4fc28:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   4fc2c:	bd30      	pop	{r4, r5, pc}
   4fc2e:	bf00      	nop
   4fc30:	4002a000 	.word	0x4002a000

0004fc34 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   4fc34:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   4fc36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->SEND_CNF[index] = channels_mask;
   4fc3a:	4a13      	ldr	r2, [pc, #76]	; (4fc88 <nrfx_ipc_uninit+0x54>)
   4fc3c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   4fc40:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   4fc44:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   4fc48:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   4fc4c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   4fc50:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   4fc54:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   4fc58:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   4fc5c:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   4fc60:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   4fc64:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   4fc68:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   4fc6c:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   4fc70:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   4fc74:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   4fc78:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   4fc7c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   4fc80:	4a02      	ldr	r2, [pc, #8]	; (4fc8c <nrfx_ipc_uninit+0x58>)
   4fc82:	7113      	strb	r3, [r2, #4]
}
   4fc84:	4770      	bx	lr
   4fc86:	bf00      	nop
   4fc88:	4002a000 	.word	0x4002a000
   4fc8c:	2001b89c 	.word	0x2001b89c

0004fc90 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   4fc90:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   4fc92:	4a02      	ldr	r2, [pc, #8]	; (4fc9c <nrfx_ipc_receive_event_enable+0xc>)
   4fc94:	4083      	lsls	r3, r0
   4fc96:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   4fc9a:	4770      	bx	lr
   4fc9c:	4002a000 	.word	0x4002a000

0004fca0 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   4fca0:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   4fca2:	4a02      	ldr	r2, [pc, #8]	; (4fcac <nrfx_ipc_receive_event_disable+0xc>)
   4fca4:	4083      	lsls	r3, r0
   4fca6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   4fcaa:	4770      	bx	lr
   4fcac:	4002a000 	.word	0x4002a000

0004fcb0 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   4fcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   4fcb2:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4fcb4:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   4fcb6:	4b0b      	ldr	r3, [pc, #44]	; (4fce4 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   4fcb8:	4d0b      	ldr	r5, [pc, #44]	; (4fce8 <nrfx_ipc_irq_handler+0x38>)
   4fcba:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   4fcbe:	b904      	cbnz	r4, 4fcc2 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   4fcc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   4fcc2:	fa94 f0a4 	rbit	r0, r4
   4fcc6:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   4fcca:	fa06 f300 	lsl.w	r3, r6, r0
   4fcce:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4fcd2:	4b06      	ldr	r3, [pc, #24]	; (4fcec <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   4fcd4:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4fcd6:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   4fcd8:	682b      	ldr	r3, [r5, #0]
   4fcda:	2b00      	cmp	r3, #0
   4fcdc:	d0ef      	beq.n	4fcbe <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   4fcde:	68a9      	ldr	r1, [r5, #8]
   4fce0:	4798      	blx	r3
   4fce2:	e7ec      	b.n	4fcbe <nrfx_ipc_irq_handler+0xe>
   4fce4:	4002a000 	.word	0x4002a000
   4fce8:	2001b89c 	.word	0x2001b89c
   4fcec:	4002a100 	.word	0x4002a100

0004fcf0 <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   4fcf0:	1c43      	adds	r3, r0, #1
   4fcf2:	d006      	beq.n	4fd02 <spim_pin_uninit+0x12>
    reg->PIN_CNF[pin_number] = cnf;
   4fcf4:	2202      	movs	r2, #2
   4fcf6:	4b03      	ldr	r3, [pc, #12]	; (4fd04 <spim_pin_uninit+0x14>)
    *p_pin = pin_number & 0x1F;
   4fcf8:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
   4fcfc:	3080      	adds	r0, #128	; 0x80
   4fcfe:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
   4fd02:	4770      	bx	lr
   4fd04:	40842500 	.word	0x40842500

0004fd08 <nrf_gpio_pin_write>:
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   4fd08:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
   4fd0a:	f000 001f 	and.w	r0, r0, #31
   4fd0e:	4a03      	ldr	r2, [pc, #12]	; (4fd1c <nrf_gpio_pin_write+0x14>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   4fd10:	4083      	lsls	r3, r0
    if (value == 0)
   4fd12:	b909      	cbnz	r1, 4fd18 <nrf_gpio_pin_write+0x10>
    p_reg->OUTCLR = clr_mask;
   4fd14:	60d3      	str	r3, [r2, #12]
}
   4fd16:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
   4fd18:	6093      	str	r3, [r2, #8]
}
   4fd1a:	4770      	bx	lr
   4fd1c:	40842500 	.word	0x40842500

0004fd20 <nrfx_spim_init>:
{
   4fd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4fd24:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   4fd26:	4d4e      	ldr	r5, [pc, #312]	; (4fe60 <nrfx_spim_init+0x140>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   4fd28:	7901      	ldrb	r1, [r0, #4]
{
   4fd2a:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   4fd2c:	014f      	lsls	r7, r1, #5
   4fd2e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   4fd32:	7f08      	ldrb	r0, [r1, #28]
   4fd34:	2800      	cmp	r0, #0
   4fd36:	f040 8090 	bne.w	4fe5a <nrfx_spim_init+0x13a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   4fd3a:	f8d6 8000 	ldr.w	r8, [r6]
    p_cb->handler = handler;
   4fd3e:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
   4fd40:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   4fd42:	7be0      	ldrb	r0, [r4, #15]
   4fd44:	7f8a      	ldrb	r2, [r1, #30]
   4fd46:	f360 0200 	bfi	r2, r0, #0, #1
   4fd4a:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   4fd4c:	7920      	ldrb	r0, [r4, #4]
   4fd4e:	b2d2      	uxtb	r2, r2
   4fd50:	f360 0241 	bfi	r2, r0, #1, #1
   4fd54:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
   4fd56:	78e3      	ldrb	r3, [r4, #3]
   4fd58:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
   4fd5a:	7be3      	ldrb	r3, [r4, #15]
   4fd5c:	f8d6 a000 	ldr.w	sl, [r6]
   4fd60:	2b00      	cmp	r3, #0
   4fd62:	d138      	bne.n	4fdd6 <nrfx_spim_init+0xb6>
        nrf_gpio_pin_write(p_config->sck_pin,
   4fd64:	7b21      	ldrb	r1, [r4, #12]
   4fd66:	7820      	ldrb	r0, [r4, #0]
   4fd68:	2901      	cmp	r1, #1
   4fd6a:	bf94      	ite	ls
   4fd6c:	2100      	movls	r1, #0
   4fd6e:	2101      	movhi	r1, #1
   4fd70:	f7ff ffca 	bl	4fd08 <nrf_gpio_pin_write>
    reg->PIN_CNF[pin_number] = cnf;
   4fd74:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   4fd76:	7823      	ldrb	r3, [r4, #0]
    reg->PIN_CNF[pin_number] = cnf;
   4fd78:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 4fe6c <nrfx_spim_init+0x14c>
    *p_pin = pin_number & 0x1F;
   4fd7c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   4fd80:	3380      	adds	r3, #128	; 0x80
   4fd82:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   4fd86:	7863      	ldrb	r3, [r4, #1]
   4fd88:	2bff      	cmp	r3, #255	; 0xff
   4fd8a:	d00b      	beq.n	4fda4 <nrfx_spim_init+0x84>
    *p_pin = pin_number & 0x1F;
   4fd8c:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   4fd90:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
   4fd92:	f8c9 200c 	str.w	r2, [r9, #12]
    reg->PIN_CNF[pin_number] = cnf;
   4fd96:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   4fd98:	7863      	ldrb	r3, [r4, #1]
   4fd9a:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   4fd9e:	3380      	adds	r3, #128	; 0x80
   4fda0:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   4fda4:	78a3      	ldrb	r3, [r4, #2]
   4fda6:	2bff      	cmp	r3, #255	; 0xff
   4fda8:	d006      	beq.n	4fdb8 <nrfx_spim_init+0x98>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   4fdaa:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
   4fdac:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   4fdb0:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
   4fdb2:	3380      	adds	r3, #128	; 0x80
   4fdb4:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   4fdb8:	78e0      	ldrb	r0, [r4, #3]
   4fdba:	28ff      	cmp	r0, #255	; 0xff
   4fdbc:	d00b      	beq.n	4fdd6 <nrfx_spim_init+0xb6>
                               p_config->ss_active_high ? 0 : 1);
   4fdbe:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   4fdc0:	f081 0101 	eor.w	r1, r1, #1
   4fdc4:	f7ff ffa0 	bl	4fd08 <nrf_gpio_pin_write>
   4fdc8:	2203      	movs	r2, #3
    *p_pin = pin_number & 0x1F;
   4fdca:	78e3      	ldrb	r3, [r4, #3]
   4fdcc:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   4fdd0:	3380      	adds	r3, #128	; 0x80
   4fdd2:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   4fdd6:	7c23      	ldrb	r3, [r4, #16]
   4fdd8:	b993      	cbnz	r3, 4fe00 <nrfx_spim_init+0xe0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   4fdda:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   4fddc:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   4fdde:	2bff      	cmp	r3, #255	; 0xff
   4fde0:	bf18      	it	ne
   4fde2:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   4fde4:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   4fde6:	bf08      	it	eq
   4fde8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   4fdec:	2bff      	cmp	r3, #255	; 0xff
   4fdee:	bf08      	it	eq
   4fdf0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   4fdf4:	f8ca 1508 	str.w	r1, [sl, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   4fdf8:	f8ca 250c 	str.w	r2, [sl, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   4fdfc:	f8ca 3510 	str.w	r3, [sl, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   4fe00:	68a3      	ldr	r3, [r4, #8]
   4fe02:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   4fe06:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   4fe08:	7b22      	ldrb	r2, [r4, #12]
   4fe0a:	3b00      	subs	r3, #0
   4fe0c:	bf18      	it	ne
   4fe0e:	2301      	movne	r3, #1
    switch (spi_mode)
   4fe10:	2a02      	cmp	r2, #2
   4fe12:	d01c      	beq.n	4fe4e <nrfx_spim_init+0x12e>
   4fe14:	2a03      	cmp	r2, #3
   4fe16:	d01d      	beq.n	4fe54 <nrfx_spim_init+0x134>
   4fe18:	2a01      	cmp	r2, #1
   4fe1a:	d101      	bne.n	4fe20 <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   4fe1c:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   4fe20:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   4fe24:	79a3      	ldrb	r3, [r4, #6]
   4fe26:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   4fe2a:	2307      	movs	r3, #7
   4fe2c:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    if (p_cb->handler)
   4fe30:	59eb      	ldr	r3, [r5, r7]
   4fe32:	b123      	cbz	r3, 4fe3e <nrfx_spim_init+0x11e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   4fe34:	6830      	ldr	r0, [r6, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   4fe36:	f340 3007 	sbfx	r0, r0, #12, #8
   4fe3a:	f7f5 ffcd 	bl	45dd8 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   4fe3e:	2300      	movs	r3, #0
   4fe40:	443d      	add	r5, r7
   4fe42:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   4fe44:	2301      	movs	r3, #1
    return err_code;
   4fe46:	4807      	ldr	r0, [pc, #28]	; (4fe64 <nrfx_spim_init+0x144>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   4fe48:	772b      	strb	r3, [r5, #28]
}
   4fe4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   4fe4e:	f043 0304 	orr.w	r3, r3, #4
        break;
   4fe52:	e7e5      	b.n	4fe20 <nrfx_spim_init+0x100>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   4fe54:	f043 0306 	orr.w	r3, r3, #6
        break;
   4fe58:	e7e2      	b.n	4fe20 <nrfx_spim_init+0x100>
        return err_code;
   4fe5a:	4803      	ldr	r0, [pc, #12]	; (4fe68 <nrfx_spim_init+0x148>)
   4fe5c:	e7f5      	b.n	4fe4a <nrfx_spim_init+0x12a>
   4fe5e:	bf00      	nop
   4fe60:	2001b8a8 	.word	0x2001b8a8
   4fe64:	0bad0000 	.word	0x0bad0000
   4fe68:	0bad0005 	.word	0x0bad0005
   4fe6c:	40842500 	.word	0x40842500

0004fe70 <nrfx_spim_uninit>:

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   4fe70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   4fe72:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   4fe74:	4d1f      	ldr	r5, [pc, #124]	; (4fef4 <nrfx_spim_uninit+0x84>)
   4fe76:	015e      	lsls	r6, r3, #5
   4fe78:	eb05 1743 	add.w	r7, r5, r3, lsl #5
   4fe7c:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   4fe7e:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   4fe80:	b1b3      	cbz	r3, 4feb0 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   4fe82:	f344 3007 	sbfx	r0, r4, #12, #8
   4fe86:	f7f5 ffb5 	bl	45df4 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   4fe8a:	4b1b      	ldr	r3, [pc, #108]	; (4fef8 <nrfx_spim_uninit+0x88>)
   4fe8c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   4fe90:	7f7b      	ldrb	r3, [r7, #29]
   4fe92:	b16b      	cbz	r3, 4feb0 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4fe94:	2301      	movs	r3, #1
   4fe96:	2764      	movs	r7, #100	; 0x64
   4fe98:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4fe9a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   4fe9e:	b923      	cbnz	r3, 4feaa <nrfx_spim_uninit+0x3a>
   4fea0:	2001      	movs	r0, #1
   4fea2:	f009 fd1f 	bl	598e4 <nrfx_busy_wait>
   4fea6:	3f01      	subs	r7, #1
   4fea8:	d1f7      	bne.n	4fe9a <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
   4feaa:	2200      	movs	r2, #0
   4feac:	19ab      	adds	r3, r5, r6
   4feae:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   4feb0:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   4feb2:	19a9      	adds	r1, r5, r6
   4feb4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   4feb8:	7f8b      	ldrb	r3, [r1, #30]
   4feba:	07db      	lsls	r3, r3, #31
   4febc:	d415      	bmi.n	4feea <nrfx_spim_uninit+0x7a>
    return p_reg->PSEL.SCK;
   4febe:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   4fec2:	f7ff ff15 	bl	4fcf0 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   4fec6:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   4feca:	f7ff ff11 	bl	4fcf0 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   4fece:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   4fed2:	f7ff ff0d 	bl	4fcf0 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   4fed6:	7fcb      	ldrb	r3, [r1, #31]
   4fed8:	2bff      	cmp	r3, #255	; 0xff
   4feda:	d006      	beq.n	4feea <nrfx_spim_uninit+0x7a>
   4fedc:	2102      	movs	r1, #2
   4fede:	4a07      	ldr	r2, [pc, #28]	; (4fefc <nrfx_spim_uninit+0x8c>)
    *p_pin = pin_number & 0x1F;
   4fee0:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   4fee4:	3380      	adds	r3, #128	; 0x80
   4fee6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   4feea:	2300      	movs	r3, #0
   4feec:	4435      	add	r5, r6
   4feee:	772b      	strb	r3, [r5, #28]
}
   4fef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4fef2:	bf00      	nop
   4fef4:	2001b8a8 	.word	0x2001b8a8
   4fef8:	00080152 	.word	0x00080152
   4fefc:	40842500 	.word	0x40842500

0004ff00 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   4ff00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   4ff04:	4f38      	ldr	r7, [pc, #224]	; (4ffe8 <nrfx_spim_xfer+0xe8>)
   4ff06:	7903      	ldrb	r3, [r0, #4]
{
   4ff08:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   4ff0a:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   4ff0e:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   4ff12:	4681      	mov	r9, r0
   4ff14:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   4ff16:	015e      	lsls	r6, r3, #5
   4ff18:	2a00      	cmp	r2, #0
   4ff1a:	d163      	bne.n	4ffe4 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   4ff1c:	59ba      	ldr	r2, [r7, r6]
   4ff1e:	b12a      	cbz	r2, 4ff2c <nrfx_spim_xfer+0x2c>
   4ff20:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   4ff24:	bf04      	itt	eq
   4ff26:	2201      	moveq	r2, #1
   4ff28:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   4ff2c:	eb07 0c06 	add.w	ip, r7, r6
   4ff30:	f10c 0c0c 	add.w	ip, ip, #12
   4ff34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   4ff38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   4ff3c:	2101      	movs	r1, #1
   4ff3e:	4640      	mov	r0, r8
   4ff40:	f009 fcd4 	bl	598ec <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   4ff44:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   4ff46:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   4ff4a:	b121      	cbz	r1, 4ff56 <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   4ff4c:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   4ff50:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   4ff54:	d106      	bne.n	4ff64 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   4ff56:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   4ff58:	b152      	cbz	r2, 4ff70 <nrfx_spim_xfer+0x70>
   4ff5a:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   4ff5e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   4ff62:	d005      	beq.n	4ff70 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   4ff64:	2300      	movs	r3, #0
   4ff66:	443e      	add	r6, r7
        return err_code;
   4ff68:	4820      	ldr	r0, [pc, #128]	; (4ffec <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   4ff6a:	7773      	strb	r3, [r6, #29]
}
   4ff6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   4ff70:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   4ff72:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   4ff76:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   4ff7a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   4ff7e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   4ff82:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4ff86:	2200      	movs	r2, #0
   4ff88:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   4ff8c:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   4ff90:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   4ff94:	bf18      	it	ne
   4ff96:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   4ff98:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   4ff9c:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   4ffa0:	bf18      	it	ne
   4ffa2:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   4ffa4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   4ffa8:	072a      	lsls	r2, r5, #28
   4ffaa:	d507      	bpl.n	4ffbc <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   4ffac:	59ba      	ldr	r2, [r7, r6]
   4ffae:	b972      	cbnz	r2, 4ffce <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   4ffb0:	2100      	movs	r1, #0
   4ffb2:	4640      	mov	r0, r8
   4ffb4:	f009 fc9a 	bl	598ec <set_ss_pin_state>
    return err_code;
   4ffb8:	480d      	ldr	r0, [pc, #52]	; (4fff0 <nrfx_spim_xfer+0xf0>)
   4ffba:	e7d7      	b.n	4ff6c <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4ffbc:	2201      	movs	r2, #1
   4ffbe:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   4ffc0:	59ba      	ldr	r2, [r7, r6]
   4ffc2:	b922      	cbnz	r2, 4ffce <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4ffc4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   4ffc8:	2a00      	cmp	r2, #0
   4ffca:	d0fb      	beq.n	4ffc4 <nrfx_spim_xfer+0xc4>
   4ffcc:	e7f0      	b.n	4ffb0 <nrfx_spim_xfer+0xb0>
    if (!enable)
   4ffce:	f015 0f04 	tst.w	r5, #4
   4ffd2:	f04f 0240 	mov.w	r2, #64	; 0x40
   4ffd6:	d002      	beq.n	4ffde <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   4ffd8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   4ffdc:	e7ec      	b.n	4ffb8 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   4ffde:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   4ffe2:	e7e9      	b.n	4ffb8 <nrfx_spim_xfer+0xb8>
        return err_code;
   4ffe4:	4803      	ldr	r0, [pc, #12]	; (4fff4 <nrfx_spim_xfer+0xf4>)
   4ffe6:	e7c1      	b.n	4ff6c <nrfx_spim_xfer+0x6c>
   4ffe8:	2001b8a8 	.word	0x2001b8a8
   4ffec:	0bad000a 	.word	0x0bad000a
   4fff0:	0bad0000 	.word	0x0bad0000
   4fff4:	0bad000b 	.word	0x0bad000b

0004fff8 <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   4fff8:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4fffa:	4b0c      	ldr	r3, [pc, #48]	; (5002c <CONFIG_FLASH_LOAD_OFFSET+0x2c>)
   4fffc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   50000:	b192      	cbz	r2, 50028 <CONFIG_FLASH_LOAD_OFFSET+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   50002:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
   50004:	4c0a      	ldr	r4, [pc, #40]	; (50030 <CONFIG_FLASH_LOAD_OFFSET+0x30>)
   50006:	4629      	mov	r1, r5
   50008:	4620      	mov	r0, r4
   5000a:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   5000e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   50012:	f009 fc6b 	bl	598ec <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   50016:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   5001a:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   5001c:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   5001e:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   50022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   50026:	4718      	bx	r3
}
   50028:	bd70      	pop	{r4, r5, r6, pc}
   5002a:	bf00      	nop
   5002c:	4000b000 	.word	0x4000b000
   50030:	2001b8a8 	.word	0x2001b8a8

00050034 <rpc_handle_ctrl_message>:
   50034:	2902      	cmp	r1, #2
   50036:	b510      	push	{r4, lr}
   50038:	4604      	mov	r4, r0
   5003a:	d009      	beq.n	50050 <rpc_handle_ctrl_message+0x1c>
   5003c:	2904      	cmp	r1, #4
   5003e:	d005      	beq.n	5004c <rpc_handle_ctrl_message+0x18>
   50040:	2901      	cmp	r1, #1
   50042:	d10b      	bne.n	5005c <rpc_handle_ctrl_message+0x28>
   50044:	4b09      	ldr	r3, [pc, #36]	; (5006c <rpc_handle_ctrl_message+0x38>)
   50046:	6818      	ldr	r0, [r3, #0]
   50048:	f007 f964 	bl	57314 <nrf_modem_os_sem_give>
   5004c:	2000      	movs	r0, #0
   5004e:	bd10      	pop	{r4, pc}
   50050:	6880      	ldr	r0, [r0, #8]
   50052:	2800      	cmp	r0, #0
   50054:	d0fa      	beq.n	5004c <rpc_handle_ctrl_message+0x18>
   50056:	f7f9 fe3d 	bl	49cd4 <nrf_modem_os_shm_tx_free>
   5005a:	e7f7      	b.n	5004c <rpc_handle_ctrl_message+0x18>
   5005c:	6880      	ldr	r0, [r0, #8]
   5005e:	b108      	cbz	r0, 50064 <rpc_handle_ctrl_message+0x30>
   50060:	f7f9 fe38 	bl	49cd4 <nrf_modem_os_shm_tx_free>
   50064:	4620      	mov	r0, r4
   50066:	f000 f845 	bl	500f4 <rpc_transport_msg_free>
   5006a:	e7ef      	b.n	5004c <rpc_handle_ctrl_message+0x18>
   5006c:	2001b8c8 	.word	0x2001b8c8

00050070 <rpc_handle_data_message>:
   50070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   50074:	4604      	mov	r4, r0
   50076:	2504      	movs	r5, #4
   50078:	6807      	ldr	r7, [r0, #0]
   5007a:	4e0d      	ldr	r6, [pc, #52]	; (500b0 <rpc_handle_data_message+0x40>)
   5007c:	b2ff      	uxtb	r7, r7
   5007e:	7833      	ldrb	r3, [r6, #0]
   50080:	42bb      	cmp	r3, r7
   50082:	d009      	beq.n	50098 <rpc_handle_data_message+0x28>
   50084:	3d01      	subs	r5, #1
   50086:	f106 060c 	add.w	r6, r6, #12
   5008a:	d1f8      	bne.n	5007e <rpc_handle_data_message+0xe>
   5008c:	68a0      	ldr	r0, [r4, #8]
   5008e:	b108      	cbz	r0, 50094 <rpc_handle_data_message+0x24>
   50090:	f000 f836 	bl	50100 <rpc_transport_msg_data_rx_free>
   50094:	4628      	mov	r0, r5
   50096:	e009      	b.n	500ac <rpc_handle_data_message+0x3c>
   50098:	4620      	mov	r0, r4
   5009a:	f8d6 8004 	ldr.w	r8, [r6, #4]
   5009e:	f009 fc39 	bl	59914 <rpc_client_msg_from_rpc_msg_get>
   500a2:	6821      	ldr	r1, [r4, #0]
   500a4:	0c09      	lsrs	r1, r1, #16
   500a6:	47c0      	blx	r8
   500a8:	2802      	cmp	r0, #2
   500aa:	d0eb      	beq.n	50084 <rpc_handle_data_message+0x14>
   500ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   500b0:	0005c5c4 	.word	0x0005c5c4

000500b4 <rpc_init>:
   500b4:	b538      	push	{r3, r4, r5, lr}
   500b6:	4d0b      	ldr	r5, [pc, #44]	; (500e4 <rpc_init+0x30>)
   500b8:	4604      	mov	r4, r0
   500ba:	2201      	movs	r2, #1
   500bc:	2100      	movs	r1, #0
   500be:	4628      	mov	r0, r5
   500c0:	f7f9 fdc0 	bl	49c44 <nrf_modem_os_sem_init>
   500c4:	b950      	cbnz	r0, 500dc <rpc_init+0x28>
   500c6:	4620      	mov	r0, r4
   500c8:	f000 f826 	bl	50118 <rpc_transport_init>
   500cc:	b940      	cbnz	r0, 500e0 <rpc_init+0x2c>
   500ce:	6828      	ldr	r0, [r5, #0]
   500d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   500d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   500d8:	f007 b91e 	b.w	57318 <nrf_modem_os_sem_take>
   500dc:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   500e0:	bd38      	pop	{r3, r4, r5, pc}
   500e2:	bf00      	nop
   500e4:	2001b8c8 	.word	0x2001b8c8

000500e8 <rpc_transport_msg_alloc>:
   500e8:	4b01      	ldr	r3, [pc, #4]	; (500f0 <rpc_transport_msg_alloc+0x8>)
   500ea:	681b      	ldr	r3, [r3, #0]
   500ec:	4718      	bx	r3
   500ee:	bf00      	nop
   500f0:	2001a7f4 	.word	0x2001a7f4

000500f4 <rpc_transport_msg_free>:
   500f4:	4b01      	ldr	r3, [pc, #4]	; (500fc <rpc_transport_msg_free+0x8>)
   500f6:	689b      	ldr	r3, [r3, #8]
   500f8:	4718      	bx	r3
   500fa:	bf00      	nop
   500fc:	2001a7f4 	.word	0x2001a7f4

00050100 <rpc_transport_msg_data_rx_free>:
   50100:	4b01      	ldr	r3, [pc, #4]	; (50108 <rpc_transport_msg_data_rx_free+0x8>)
   50102:	68db      	ldr	r3, [r3, #12]
   50104:	4718      	bx	r3
   50106:	bf00      	nop
   50108:	2001a7f4 	.word	0x2001a7f4

0005010c <rpc_transport_msg_send>:
   5010c:	4b01      	ldr	r3, [pc, #4]	; (50114 <rpc_transport_msg_send+0x8>)
   5010e:	685b      	ldr	r3, [r3, #4]
   50110:	4718      	bx	r3
   50112:	bf00      	nop
   50114:	2001a7f4 	.word	0x2001a7f4

00050118 <rpc_transport_init>:
   50118:	4b01      	ldr	r3, [pc, #4]	; (50120 <rpc_transport_init+0x8>)
   5011a:	691b      	ldr	r3, [r3, #16]
   5011c:	4718      	bx	r3
   5011e:	bf00      	nop
   50120:	2001a7f4 	.word	0x2001a7f4

00050124 <rpc_transport_rx_data_suspend>:
   50124:	4b01      	ldr	r3, [pc, #4]	; (5012c <rpc_transport_rx_data_suspend+0x8>)
   50126:	6a1b      	ldr	r3, [r3, #32]
   50128:	4718      	bx	r3
   5012a:	bf00      	nop
   5012c:	2001a7f4 	.word	0x2001a7f4

00050130 <rpc_transport_rx_data_resume>:
   50130:	4b01      	ldr	r3, [pc, #4]	; (50138 <rpc_transport_rx_data_resume+0x8>)
   50132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   50134:	4718      	bx	r3
   50136:	bf00      	nop
   50138:	2001a7f4 	.word	0x2001a7f4

0005013c <ipc_trace_init>:
   5013c:	2100      	movs	r1, #0
   5013e:	4b07      	ldr	r3, [pc, #28]	; (5015c <ipc_trace_init+0x20>)
   50140:	2201      	movs	r2, #1
   50142:	7019      	strb	r1, [r3, #0]
   50144:	4b06      	ldr	r3, [pc, #24]	; (50160 <ipc_trace_init+0x24>)
   50146:	7019      	strb	r1, [r3, #0]
   50148:	4b06      	ldr	r3, [pc, #24]	; (50164 <ipc_trace_init+0x28>)
   5014a:	6019      	str	r1, [r3, #0]
   5014c:	4b06      	ldr	r3, [pc, #24]	; (50168 <ipc_trace_init+0x2c>)
   5014e:	6019      	str	r1, [r3, #0]
   50150:	4b06      	ldr	r3, [pc, #24]	; (5016c <ipc_trace_init+0x30>)
   50152:	6018      	str	r0, [r3, #0]
   50154:	4806      	ldr	r0, [pc, #24]	; (50170 <ipc_trace_init+0x34>)
   50156:	f7f9 bd75 	b.w	49c44 <nrf_modem_os_sem_init>
   5015a:	bf00      	nop
   5015c:	2002062e 	.word	0x2002062e
   50160:	2002062d 	.word	0x2002062d
   50164:	2001b8cc 	.word	0x2001b8cc
   50168:	2001b8dc 	.word	0x2001b8dc
   5016c:	2001b8e0 	.word	0x2001b8e0
   50170:	2001b8e4 	.word	0x2001b8e4

00050174 <ipc_trace_handle>:
   50174:	b430      	push	{r4, r5}
   50176:	4b2d      	ldr	r3, [pc, #180]	; (5022c <ipc_trace_handle+0xb8>)
   50178:	681b      	ldr	r3, [r3, #0]
   5017a:	6919      	ldr	r1, [r3, #16]
   5017c:	6958      	ldr	r0, [r3, #20]
   5017e:	7c1a      	ldrb	r2, [r3, #16]
   50180:	2200      	movs	r2, #0
   50182:	741a      	strb	r2, [r3, #16]
   50184:	7c5c      	ldrb	r4, [r3, #17]
   50186:	745a      	strb	r2, [r3, #17]
   50188:	7c9c      	ldrb	r4, [r3, #18]
   5018a:	749a      	strb	r2, [r3, #18]
   5018c:	7cdc      	ldrb	r4, [r3, #19]
   5018e:	74da      	strb	r2, [r3, #19]
   50190:	7d1c      	ldrb	r4, [r3, #20]
   50192:	751a      	strb	r2, [r3, #20]
   50194:	7d5c      	ldrb	r4, [r3, #21]
   50196:	755a      	strb	r2, [r3, #21]
   50198:	7d9c      	ldrb	r4, [r3, #22]
   5019a:	2903      	cmp	r1, #3
   5019c:	759a      	strb	r2, [r3, #22]
   5019e:	7ddc      	ldrb	r4, [r3, #23]
   501a0:	75da      	strb	r2, [r3, #23]
   501a2:	d029      	beq.n	501f8 <ipc_trace_handle+0x84>
   501a4:	2904      	cmp	r1, #4
   501a6:	d033      	beq.n	50210 <ipc_trace_handle+0x9c>
   501a8:	2901      	cmp	r1, #1
   501aa:	d12f      	bne.n	5020c <ipc_trace_handle+0x98>
   501ac:	4d20      	ldr	r5, [pc, #128]	; (50230 <ipc_trace_handle+0xbc>)
   501ae:	6881      	ldr	r1, [r0, #8]
   501b0:	4291      	cmp	r1, r2
   501b2:	d810      	bhi.n	501d6 <ipc_trace_handle+0x62>
   501b4:	2101      	movs	r1, #1
   501b6:	7a1a      	ldrb	r2, [r3, #8]
   501b8:	2200      	movs	r2, #0
   501ba:	7219      	strb	r1, [r3, #8]
   501bc:	7a59      	ldrb	r1, [r3, #9]
   501be:	725a      	strb	r2, [r3, #9]
   501c0:	7a99      	ldrb	r1, [r3, #10]
   501c2:	729a      	strb	r2, [r3, #10]
   501c4:	7ada      	ldrb	r2, [r3, #11]
   501c6:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   501ca:	72da      	strb	r2, [r3, #11]
   501cc:	4b19      	ldr	r3, [pc, #100]	; (50234 <ipc_trace_handle+0xc0>)
   501ce:	bc30      	pop	{r4, r5}
   501d0:	6818      	ldr	r0, [r3, #0]
   501d2:	f007 b89f 	b.w	57314 <nrf_modem_os_sem_give>
   501d6:	1c91      	adds	r1, r2, #2
   501d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   501dc:	684c      	ldr	r4, [r1, #4]
   501de:	7821      	ldrb	r1, [r4, #0]
   501e0:	2962      	cmp	r1, #98	; 0x62
   501e2:	d007      	beq.n	501f4 <ipc_trace_handle+0x80>
   501e4:	2963      	cmp	r1, #99	; 0x63
   501e6:	bf14      	ite	ne
   501e8:	2102      	movne	r1, #2
   501ea:	2100      	moveq	r1, #0
   501ec:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
   501f0:	3201      	adds	r2, #1
   501f2:	e7dc      	b.n	501ae <ipc_trace_handle+0x3a>
   501f4:	2101      	movs	r1, #1
   501f6:	e7f9      	b.n	501ec <ipc_trace_handle+0x78>
   501f8:	7a18      	ldrb	r0, [r3, #8]
   501fa:	7219      	strb	r1, [r3, #8]
   501fc:	7a59      	ldrb	r1, [r3, #9]
   501fe:	725a      	strb	r2, [r3, #9]
   50200:	7a99      	ldrb	r1, [r3, #10]
   50202:	729a      	strb	r2, [r3, #10]
   50204:	7ada      	ldrb	r2, [r3, #11]
   50206:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   5020a:	72da      	strb	r2, [r3, #11]
   5020c:	bc30      	pop	{r4, r5}
   5020e:	4770      	bx	lr
   50210:	7a18      	ldrb	r0, [r3, #8]
   50212:	7219      	strb	r1, [r3, #8]
   50214:	7a59      	ldrb	r1, [r3, #9]
   50216:	725a      	strb	r2, [r3, #9]
   50218:	7a99      	ldrb	r1, [r3, #10]
   5021a:	729a      	strb	r2, [r3, #10]
   5021c:	7ada      	ldrb	r2, [r3, #11]
   5021e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   50222:	72da      	strb	r2, [r3, #11]
   50224:	2201      	movs	r2, #1
   50226:	4b04      	ldr	r3, [pc, #16]	; (50238 <ipc_trace_handle+0xc4>)
   50228:	701a      	strb	r2, [r3, #0]
   5022a:	e7ef      	b.n	5020c <ipc_trace_handle+0x98>
   5022c:	2001b8e0 	.word	0x2001b8e0
   50230:	2001b8d0 	.word	0x2001b8d0
   50234:	2001b8e4 	.word	0x2001b8e4
   50238:	2002062d 	.word	0x2002062d

0005023c <rpc_transport_ipc_msg_free>:
   5023c:	2300      	movs	r3, #0
   5023e:	b530      	push	{r4, r5, lr}
   50240:	4910      	ldr	r1, [pc, #64]	; (50284 <rpc_transport_ipc_msg_free+0x48>)
   50242:	680a      	ldr	r2, [r1, #0]
   50244:	6814      	ldr	r4, [r2, #0]
   50246:	42a3      	cmp	r3, r4
   50248:	d10b      	bne.n	50262 <rpc_transport_ipc_msg_free+0x26>
   5024a:	2300      	movs	r3, #0
   5024c:	684a      	ldr	r2, [r1, #4]
   5024e:	6811      	ldr	r1, [r2, #0]
   50250:	428b      	cmp	r3, r1
   50252:	d015      	beq.n	50280 <rpc_transport_ipc_msg_free+0x44>
   50254:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   50258:	68a4      	ldr	r4, [r4, #8]
   5025a:	42a0      	cmp	r0, r4
   5025c:	d008      	beq.n	50270 <rpc_transport_ipc_msg_free+0x34>
   5025e:	3301      	adds	r3, #1
   50260:	e7f6      	b.n	50250 <rpc_transport_ipc_msg_free+0x14>
   50262:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   50266:	68ad      	ldr	r5, [r5, #8]
   50268:	42a8      	cmp	r0, r5
   5026a:	d001      	beq.n	50270 <rpc_transport_ipc_msg_free+0x34>
   5026c:	3301      	adds	r3, #1
   5026e:	e7ea      	b.n	50246 <rpc_transport_ipc_msg_free+0xa>
   50270:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   50274:	685a      	ldr	r2, [r3, #4]
   50276:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   5027a:	f042 0203 	orr.w	r2, r2, #3
   5027e:	605a      	str	r2, [r3, #4]
   50280:	bd30      	pop	{r4, r5, pc}
   50282:	bf00      	nop
   50284:	2001b8f0 	.word	0x2001b8f0

00050288 <rpc_transport_ipc_shutdown_done>:
   50288:	4b02      	ldr	r3, [pc, #8]	; (50294 <rpc_transport_ipc_shutdown_done+0xc>)
   5028a:	7818      	ldrb	r0, [r3, #0]
   5028c:	1e83      	subs	r3, r0, #2
   5028e:	4258      	negs	r0, r3
   50290:	4158      	adcs	r0, r3
   50292:	4770      	bx	lr
   50294:	2002062f 	.word	0x2002062f

00050298 <rpc_transport_ipc_data_msg_send>:
   50298:	b508      	push	{r3, lr}
   5029a:	6842      	ldr	r2, [r0, #4]
   5029c:	4b0d      	ldr	r3, [pc, #52]	; (502d4 <rpc_transport_ipc_data_msg_send+0x3c>)
   5029e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   502a2:	f042 0202 	orr.w	r2, r2, #2
   502a6:	6042      	str	r2, [r0, #4]
   502a8:	681b      	ldr	r3, [r3, #0]
   502aa:	4a0b      	ldr	r2, [pc, #44]	; (502d8 <rpc_transport_ipc_data_msg_send+0x40>)
   502ac:	1ac3      	subs	r3, r0, r3
   502ae:	6812      	ldr	r2, [r2, #0]
   502b0:	f3c3 1389 	ubfx	r3, r3, #6, #10
   502b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   502b8:	6853      	ldr	r3, [r2, #4]
   502ba:	2003      	movs	r0, #3
   502bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   502c0:	f043 0301 	orr.w	r3, r3, #1
   502c4:	6053      	str	r3, [r2, #4]
   502c6:	f007 f81b 	bl	57300 <nrf_modem_os_busywait>
   502ca:	2201      	movs	r2, #1
   502cc:	4b03      	ldr	r3, [pc, #12]	; (502dc <rpc_transport_ipc_data_msg_send+0x44>)
   502ce:	60da      	str	r2, [r3, #12]
   502d0:	bd08      	pop	{r3, pc}
   502d2:	bf00      	nop
   502d4:	2001b900 	.word	0x2001b900
   502d8:	2001b904 	.word	0x2001b904
   502dc:	4002a000 	.word	0x4002a000

000502e0 <rpc_transport_ipc_ctrl_msg_send>:
   502e0:	b508      	push	{r3, lr}
   502e2:	6842      	ldr	r2, [r0, #4]
   502e4:	4b0d      	ldr	r3, [pc, #52]	; (5031c <rpc_transport_ipc_ctrl_msg_send+0x3c>)
   502e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   502ea:	f042 0201 	orr.w	r2, r2, #1
   502ee:	6042      	str	r2, [r0, #4]
   502f0:	681b      	ldr	r3, [r3, #0]
   502f2:	4a0b      	ldr	r2, [pc, #44]	; (50320 <rpc_transport_ipc_ctrl_msg_send+0x40>)
   502f4:	1ac3      	subs	r3, r0, r3
   502f6:	6812      	ldr	r2, [r2, #0]
   502f8:	f3c3 1389 	ubfx	r3, r3, #6, #10
   502fc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   50300:	6853      	ldr	r3, [r2, #4]
   50302:	2003      	movs	r0, #3
   50304:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   50308:	f043 0301 	orr.w	r3, r3, #1
   5030c:	6053      	str	r3, [r2, #4]
   5030e:	f006 fff7 	bl	57300 <nrf_modem_os_busywait>
   50312:	2201      	movs	r2, #1
   50314:	4b03      	ldr	r3, [pc, #12]	; (50324 <rpc_transport_ipc_ctrl_msg_send+0x44>)
   50316:	605a      	str	r2, [r3, #4]
   50318:	bd08      	pop	{r3, pc}
   5031a:	bf00      	nop
   5031c:	2001b8f8 	.word	0x2001b8f8
   50320:	2001b8fc 	.word	0x2001b8fc
   50324:	4002a000 	.word	0x4002a000

00050328 <rpc_transport_ipc_msg_alloc>:
   50328:	2200      	movs	r2, #0
   5032a:	b538      	push	{r3, r4, r5, lr}
   5032c:	6803      	ldr	r3, [r0, #0]
   5032e:	4293      	cmp	r3, r2
   50330:	d101      	bne.n	50336 <rpc_transport_ipc_msg_alloc+0xe>
   50332:	2300      	movs	r3, #0
   50334:	e01b      	b.n	5036e <rpc_transport_ipc_msg_alloc+0x46>
   50336:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
   5033a:	686c      	ldr	r4, [r5, #4]
   5033c:	b2e4      	uxtb	r4, r4
   5033e:	2c03      	cmp	r4, #3
   50340:	d117      	bne.n	50372 <rpc_transport_ipc_msg_alloc+0x4a>
   50342:	eb01 1382 	add.w	r3, r1, r2, lsl #6
   50346:	60ab      	str	r3, [r5, #8]
   50348:	686a      	ldr	r2, [r5, #4]
   5034a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   5034e:	606a      	str	r2, [r5, #4]
   50350:	4a0b      	ldr	r2, [pc, #44]	; (50380 <rpc_transport_ipc_msg_alloc+0x58>)
   50352:	8811      	ldrh	r1, [r2, #0]
   50354:	1c48      	adds	r0, r1, #1
   50356:	8010      	strh	r0, [r2, #0]
   50358:	686a      	ldr	r2, [r5, #4]
   5035a:	4618      	mov	r0, r3
   5035c:	b292      	uxth	r2, r2
   5035e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   50362:	606a      	str	r2, [r5, #4]
   50364:	2100      	movs	r1, #0
   50366:	2240      	movs	r2, #64	; 0x40
   50368:	f00a fdf6 	bl	5af58 <memset>
   5036c:	4603      	mov	r3, r0
   5036e:	4618      	mov	r0, r3
   50370:	bd38      	pop	{r3, r4, r5, pc}
   50372:	b914      	cbnz	r4, 5037a <rpc_transport_ipc_msg_alloc+0x52>
   50374:	68ac      	ldr	r4, [r5, #8]
   50376:	2c00      	cmp	r4, #0
   50378:	d0e3      	beq.n	50342 <rpc_transport_ipc_msg_alloc+0x1a>
   5037a:	3201      	adds	r2, #1
   5037c:	e7d7      	b.n	5032e <rpc_transport_ipc_msg_alloc+0x6>
   5037e:	bf00      	nop
   50380:	2001bed0 	.word	0x2001bed0

00050384 <rpc_transport_ipc_data_msg_alloc>:
   50384:	4b05      	ldr	r3, [pc, #20]	; (5039c <rpc_transport_ipc_data_msg_alloc+0x18>)
   50386:	781b      	ldrb	r3, [r3, #0]
   50388:	b92b      	cbnz	r3, 50396 <rpc_transport_ipc_data_msg_alloc+0x12>
   5038a:	4b05      	ldr	r3, [pc, #20]	; (503a0 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   5038c:	6819      	ldr	r1, [r3, #0]
   5038e:	4b05      	ldr	r3, [pc, #20]	; (503a4 <rpc_transport_ipc_data_msg_alloc+0x20>)
   50390:	6818      	ldr	r0, [r3, #0]
   50392:	f7ff bfc9 	b.w	50328 <rpc_transport_ipc_msg_alloc>
   50396:	2000      	movs	r0, #0
   50398:	4770      	bx	lr
   5039a:	bf00      	nop
   5039c:	20020630 	.word	0x20020630
   503a0:	2001b900 	.word	0x2001b900
   503a4:	2001b904 	.word	0x2001b904

000503a8 <rpc_transport_ipc_ctrl_msg_alloc>:
   503a8:	230a      	movs	r3, #10
   503aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   503ac:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   503b0:	4e0c      	ldr	r6, [pc, #48]	; (503e4 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   503b2:	4f0d      	ldr	r7, [pc, #52]	; (503e8 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   503b4:	9301      	str	r3, [sp, #4]
   503b6:	6831      	ldr	r1, [r6, #0]
   503b8:	6838      	ldr	r0, [r7, #0]
   503ba:	f7ff ffb5 	bl	50328 <rpc_transport_ipc_msg_alloc>
   503be:	4604      	mov	r4, r0
   503c0:	b938      	cbnz	r0, 503d2 <rpc_transport_ipc_ctrl_msg_alloc+0x2a>
   503c2:	f006 ffa5 	bl	57310 <nrf_modem_os_is_in_isr>
   503c6:	b938      	cbnz	r0, 503d8 <rpc_transport_ipc_ctrl_msg_alloc+0x30>
   503c8:	a901      	add	r1, sp, #4
   503ca:	f7f9 fb79 	bl	49ac0 <nrf_modem_os_timedwait>
   503ce:	306e      	adds	r0, #110	; 0x6e
   503d0:	d1f1      	bne.n	503b6 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   503d2:	4620      	mov	r0, r4
   503d4:	b003      	add	sp, #12
   503d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   503d8:	9801      	ldr	r0, [sp, #4]
   503da:	4368      	muls	r0, r5
   503dc:	f006 ff90 	bl	57300 <nrf_modem_os_busywait>
   503e0:	e7e9      	b.n	503b6 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
   503e2:	bf00      	nop
   503e4:	2001b8f8 	.word	0x2001b8f8
   503e8:	2001b8fc 	.word	0x2001b8fc

000503ec <rpc_transport_ipc_request_shutdown>:
   503ec:	b538      	push	{r3, r4, r5, lr}
   503ee:	f7ff ffdb 	bl	503a8 <rpc_transport_ipc_ctrl_msg_alloc>
   503f2:	2400      	movs	r4, #0
   503f4:	2203      	movs	r2, #3
   503f6:	2501      	movs	r5, #1
   503f8:	7044      	strb	r4, [r0, #1]
   503fa:	7005      	strb	r5, [r0, #0]
   503fc:	7082      	strb	r2, [r0, #2]
   503fe:	70c4      	strb	r4, [r0, #3]
   50400:	f7ff ff6e 	bl	502e0 <rpc_transport_ipc_ctrl_msg_send>
   50404:	4b02      	ldr	r3, [pc, #8]	; (50410 <rpc_transport_ipc_request_shutdown+0x24>)
   50406:	701d      	strb	r5, [r3, #0]
   50408:	f009 fa7c 	bl	59904 <rpc_transport_ipc_rx_data_suspend>
   5040c:	4620      	mov	r0, r4
   5040e:	bd38      	pop	{r3, r4, r5, pc}
   50410:	20020630 	.word	0x20020630

00050414 <rpc_transport_ipc_init>:
   50414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   50418:	2200      	movs	r2, #0
   5041a:	b095      	sub	sp, #84	; 0x54
   5041c:	4605      	mov	r5, r0
   5041e:	4959      	ldr	r1, [pc, #356]	; (50584 <rpc_transport_ipc_init+0x170>)
   50420:	7900      	ldrb	r0, [r0, #4]
   50422:	f7ff fbcf 	bl	4fbc4 <nrfx_ipc_init>
   50426:	2238      	movs	r2, #56	; 0x38
   50428:	2100      	movs	r1, #0
   5042a:	a803      	add	r0, sp, #12
   5042c:	f00a fd94 	bl	5af58 <memset>
   50430:	2302      	movs	r3, #2
   50432:	9304      	str	r3, [sp, #16]
   50434:	2308      	movs	r3, #8
   50436:	9306      	str	r3, [sp, #24]
   50438:	2320      	movs	r3, #32
   5043a:	9308      	str	r3, [sp, #32]
   5043c:	2301      	movs	r3, #1
   5043e:	930b      	str	r3, [sp, #44]	; 0x2c
   50440:	2304      	movs	r3, #4
   50442:	930d      	str	r3, [sp, #52]	; 0x34
   50444:	2310      	movs	r3, #16
   50446:	f04f 0c40 	mov.w	ip, #64	; 0x40
   5044a:	930f      	str	r3, [sp, #60]	; 0x3c
   5044c:	2380      	movs	r3, #128	; 0x80
   5044e:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   50452:	23d5      	movs	r3, #213	; 0xd5
   50454:	a803      	add	r0, sp, #12
   50456:	9313      	str	r3, [sp, #76]	; 0x4c
   50458:	f7ff fbcc 	bl	4fbf4 <nrfx_ipc_config_load>
   5045c:	6828      	ldr	r0, [r5, #0]
   5045e:	6842      	ldr	r2, [r0, #4]
   50460:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   50464:	f040 8088 	bne.w	50578 <rpc_transport_ipc_init+0x164>
   50468:	6941      	ldr	r1, [r0, #20]
   5046a:	68c3      	ldr	r3, [r0, #12]
   5046c:	440b      	add	r3, r1
   5046e:	69c1      	ldr	r1, [r0, #28]
   50470:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   50474:	440b      	add	r3, r1
   50476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   5047a:	d87d      	bhi.n	50578 <rpc_transport_ipc_init+0x164>
   5047c:	2100      	movs	r1, #0
   5047e:	6800      	ldr	r0, [r0, #0]
   50480:	f00a fd6a 	bl	5af58 <memset>
   50484:	682b      	ldr	r3, [r5, #0]
   50486:	681c      	ldr	r4, [r3, #0]
   50488:	69da      	ldr	r2, [r3, #28]
   5048a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   5048e:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   50492:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   50496:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   5049a:	f104 0920 	add.w	r9, r4, #32
   5049e:	2a00      	cmp	r2, #0
   504a0:	d05f      	beq.n	50562 <rpc_transport_ipc_init+0x14e>
   504a2:	f104 0840 	add.w	r8, r4, #64	; 0x40
   504a6:	4938      	ldr	r1, [pc, #224]	; (50588 <rpc_transport_ipc_init+0x174>)
   504a8:	f8c1 9000 	str.w	r9, [r1]
   504ac:	b14a      	cbz	r2, 504c2 <rpc_transport_ipc_init+0xae>
   504ae:	699b      	ldr	r3, [r3, #24]
   504b0:	4640      	mov	r0, r8
   504b2:	f8c8 3004 	str.w	r3, [r8, #4]
   504b6:	682b      	ldr	r3, [r5, #0]
   504b8:	69db      	ldr	r3, [r3, #28]
   504ba:	f8c8 3000 	str.w	r3, [r8]
   504be:	f7ff fe3d 	bl	5013c <ipc_trace_init>
   504c2:	2300      	movs	r3, #0
   504c4:	2101      	movs	r1, #1
   504c6:	7023      	strb	r3, [r4, #0]
   504c8:	7063      	strb	r3, [r4, #1]
   504ca:	70e3      	strb	r3, [r4, #3]
   504cc:	70a1      	strb	r1, [r4, #2]
   504ce:	682a      	ldr	r2, [r5, #0]
   504d0:	6912      	ldr	r2, [r2, #16]
   504d2:	6062      	str	r2, [r4, #4]
   504d4:	682a      	ldr	r2, [r5, #0]
   504d6:	4d2d      	ldr	r5, [pc, #180]	; (5058c <rpc_transport_ipc_init+0x178>)
   504d8:	6952      	ldr	r2, [r2, #20]
   504da:	60e6      	str	r6, [r4, #12]
   504dc:	60a2      	str	r2, [r4, #8]
   504de:	4a2c      	ldr	r2, [pc, #176]	; (50590 <rpc_transport_ipc_init+0x17c>)
   504e0:	6127      	str	r7, [r4, #16]
   504e2:	6017      	str	r7, [r2, #0]
   504e4:	4a2b      	ldr	r2, [pc, #172]	; (50594 <rpc_transport_ipc_init+0x180>)
   504e6:	f8c4 9014 	str.w	r9, [r4, #20]
   504ea:	6016      	str	r6, [r2, #0]
   504ec:	2208      	movs	r2, #8
   504ee:	f8c4 8018 	str.w	r8, [r4, #24]
   504f2:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   504f6:	707b      	strb	r3, [r7, #1]
   504f8:	70bb      	strb	r3, [r7, #2]
   504fa:	70fb      	strb	r3, [r7, #3]
   504fc:	270a      	movs	r7, #10
   504fe:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   50502:	4a25      	ldr	r2, [pc, #148]	; (50598 <rpc_transport_ipc_init+0x184>)
   50504:	7073      	strb	r3, [r6, #1]
   50506:	f8c2 b000 	str.w	fp, [r2]
   5050a:	4a24      	ldr	r2, [pc, #144]	; (5059c <rpc_transport_ipc_init+0x188>)
   5050c:	70b3      	strb	r3, [r6, #2]
   5050e:	f8c2 a000 	str.w	sl, [r2]
   50512:	4a23      	ldr	r2, [pc, #140]	; (505a0 <rpc_transport_ipc_init+0x18c>)
   50514:	70f3      	strb	r3, [r6, #3]
   50516:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   5051a:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   5051e:	4a21      	ldr	r2, [pc, #132]	; (505a4 <rpc_transport_ipc_init+0x190>)
   50520:	4c21      	ldr	r4, [pc, #132]	; (505a8 <rpc_transport_ipc_init+0x194>)
   50522:	8013      	strh	r3, [r2, #0]
   50524:	4a21      	ldr	r2, [pc, #132]	; (505ac <rpc_transport_ipc_init+0x198>)
   50526:	602b      	str	r3, [r5, #0]
   50528:	8013      	strh	r3, [r2, #0]
   5052a:	4a21      	ldr	r2, [pc, #132]	; (505b0 <rpc_transport_ipc_init+0x19c>)
   5052c:	7021      	strb	r1, [r4, #0]
   5052e:	9302      	str	r3, [sp, #8]
   50530:	6113      	str	r3, [r2, #16]
   50532:	6913      	ldr	r3, [r2, #16]
   50534:	4e1f      	ldr	r6, [pc, #124]	; (505b4 <rpc_transport_ipc_init+0x1a0>)
   50536:	9302      	str	r3, [sp, #8]
   50538:	9b02      	ldr	r3, [sp, #8]
   5053a:	7823      	ldrb	r3, [r4, #0]
   5053c:	2b01      	cmp	r3, #1
   5053e:	d100      	bne.n	50542 <rpc_transport_ipc_init+0x12e>
   50540:	b98e      	cbnz	r6, 50566 <rpc_transport_ipc_init+0x152>
   50542:	7823      	ldrb	r3, [r4, #0]
   50544:	2b01      	cmp	r3, #1
   50546:	bf01      	itttt	eq
   50548:	f06f 0373 	mvneq.w	r3, #115	; 0x73
   5054c:	602b      	streq	r3, [r5, #0]
   5054e:	2303      	moveq	r3, #3
   50550:	7023      	strbeq	r3, [r4, #0]
   50552:	682c      	ldr	r4, [r5, #0]
   50554:	b994      	cbnz	r4, 5057c <rpc_transport_ipc_init+0x168>
   50556:	4b18      	ldr	r3, [pc, #96]	; (505b8 <rpc_transport_ipc_init+0x1a4>)
   50558:	701c      	strb	r4, [r3, #0]
   5055a:	4620      	mov	r0, r4
   5055c:	b015      	add	sp, #84	; 0x54
   5055e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   50562:	4690      	mov	r8, r2
   50564:	e79f      	b.n	504a6 <rpc_transport_ipc_init+0x92>
   50566:	2000      	movs	r0, #0
   50568:	a901      	add	r1, sp, #4
   5056a:	9701      	str	r7, [sp, #4]
   5056c:	f7f9 faa8 	bl	49ac0 <nrf_modem_os_timedwait>
   50570:	9b01      	ldr	r3, [sp, #4]
   50572:	3b0a      	subs	r3, #10
   50574:	441e      	add	r6, r3
   50576:	e7e0      	b.n	5053a <rpc_transport_ipc_init+0x126>
   50578:	f06f 0415 	mvn.w	r4, #21
   5057c:	f7ff fb5a 	bl	4fc34 <nrfx_ipc_uninit>
   50580:	e7eb      	b.n	5055a <rpc_transport_ipc_init+0x146>
   50582:	bf00      	nop
   50584:	000506a1 	.word	0x000506a1
   50588:	2001b8ec 	.word	0x2001b8ec
   5058c:	2001b8e8 	.word	0x2001b8e8
   50590:	2001b904 	.word	0x2001b904
   50594:	2001b8fc 	.word	0x2001b8fc
   50598:	2001b900 	.word	0x2001b900
   5059c:	2001b8f8 	.word	0x2001b8f8
   505a0:	4002a000 	.word	0x4002a000
   505a4:	2001bed0 	.word	0x2001bed0
   505a8:	2002062f 	.word	0x2002062f
   505ac:	2001bece 	.word	0x2001bece
   505b0:	40005600 	.word	0x40005600
   505b4:	000249f0 	.word	0x000249f0
   505b8:	20020630 	.word	0x20020630

000505bc <handle_modem_rpc_msg.part.0>:
   505bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   505c0:	2500      	movs	r5, #0
   505c2:	4606      	mov	r6, r0
   505c4:	460f      	mov	r7, r1
   505c6:	46a8      	mov	r8, r5
   505c8:	f8df 9074 	ldr.w	r9, [pc, #116]	; 50640 <handle_modem_rpc_msg.part.0+0x84>
   505cc:	6833      	ldr	r3, [r6, #0]
   505ce:	429d      	cmp	r5, r3
   505d0:	d302      	bcc.n	505d8 <handle_modem_rpc_msg.part.0+0x1c>
   505d2:	4640      	mov	r0, r8
   505d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   505d8:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   505dc:	68a3      	ldr	r3, [r4, #8]
   505de:	b1fb      	cbz	r3, 50620 <handle_modem_rpc_msg.part.0+0x64>
   505e0:	6863      	ldr	r3, [r4, #4]
   505e2:	b2db      	uxtb	r3, r3
   505e4:	2b01      	cmp	r3, #1
   505e6:	d11b      	bne.n	50620 <handle_modem_rpc_msg.part.0+0x64>
   505e8:	6862      	ldr	r2, [r4, #4]
   505ea:	f8b9 3000 	ldrh.w	r3, [r9]
   505ee:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   505f2:	d115      	bne.n	50620 <handle_modem_rpc_msg.part.0+0x64>
   505f4:	2f02      	cmp	r7, #2
   505f6:	68a0      	ldr	r0, [r4, #8]
   505f8:	d114      	bne.n	50624 <handle_modem_rpc_msg.part.0+0x68>
   505fa:	f7ff fd39 	bl	50070 <rpc_handle_data_message>
   505fe:	2802      	cmp	r0, #2
   50600:	d00e      	beq.n	50620 <handle_modem_rpc_msg.part.0+0x64>
   50602:	2801      	cmp	r0, #1
   50604:	d113      	bne.n	5062e <handle_modem_rpc_msg.part.0+0x72>
   50606:	6863      	ldr	r3, [r4, #4]
   50608:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   5060c:	f043 0302 	orr.w	r3, r3, #2
   50610:	6063      	str	r3, [r4, #4]
   50612:	f04f 0801 	mov.w	r8, #1
   50616:	f8b9 3000 	ldrh.w	r3, [r9]
   5061a:	3301      	adds	r3, #1
   5061c:	f8a9 3000 	strh.w	r3, [r9]
   50620:	3501      	adds	r5, #1
   50622:	e7d3      	b.n	505cc <handle_modem_rpc_msg.part.0+0x10>
   50624:	6801      	ldr	r1, [r0, #0]
   50626:	0c09      	lsrs	r1, r1, #16
   50628:	f7ff fd04 	bl	50034 <rpc_handle_ctrl_message>
   5062c:	e7e7      	b.n	505fe <handle_modem_rpc_msg.part.0+0x42>
   5062e:	2800      	cmp	r0, #0
   50630:	d1ef      	bne.n	50612 <handle_modem_rpc_msg.part.0+0x56>
   50632:	6863      	ldr	r3, [r4, #4]
   50634:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   50638:	f043 0303 	orr.w	r3, r3, #3
   5063c:	e7e8      	b.n	50610 <handle_modem_rpc_msg.part.0+0x54>
   5063e:	bf00      	nop
   50640:	2001bece 	.word	0x2001bece

00050644 <rpc_transport_ipc_msg_data_rx_free>:
   50644:	b510      	push	{r4, lr}
   50646:	4b0a      	ldr	r3, [pc, #40]	; (50670 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
   50648:	4604      	mov	r4, r0
   5064a:	781b      	ldrb	r3, [r3, #0]
   5064c:	2b03      	cmp	r3, #3
   5064e:	d00e      	beq.n	5066e <rpc_transport_ipc_msg_data_rx_free+0x2a>
   50650:	f7ff feaa 	bl	503a8 <rpc_transport_ipc_ctrl_msg_alloc>
   50654:	b158      	cbz	r0, 5066e <rpc_transport_ipc_msg_data_rx_free+0x2a>
   50656:	2101      	movs	r1, #1
   50658:	2200      	movs	r2, #0
   5065a:	7001      	strb	r1, [r0, #0]
   5065c:	2102      	movs	r1, #2
   5065e:	6084      	str	r4, [r0, #8]
   50660:	7042      	strb	r2, [r0, #1]
   50662:	7081      	strb	r1, [r0, #2]
   50664:	70c2      	strb	r2, [r0, #3]
   50666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   5066a:	f7ff be39 	b.w	502e0 <rpc_transport_ipc_ctrl_msg_send>
   5066e:	bd10      	pop	{r4, pc}
   50670:	2002062f 	.word	0x2002062f

00050674 <rpc_message_handler>:
   50674:	b538      	push	{r3, r4, r5, lr}
   50676:	4d09      	ldr	r5, [pc, #36]	; (5069c <rpc_message_handler+0x28>)
   50678:	6828      	ldr	r0, [r5, #0]
   5067a:	b110      	cbz	r0, 50682 <rpc_message_handler+0xe>
   5067c:	2101      	movs	r1, #1
   5067e:	f7ff ff9d 	bl	505bc <handle_modem_rpc_msg.part.0>
   50682:	4604      	mov	r4, r0
   50684:	6868      	ldr	r0, [r5, #4]
   50686:	b910      	cbnz	r0, 5068e <rpc_message_handler+0x1a>
   50688:	2c00      	cmp	r4, #0
   5068a:	d1f5      	bne.n	50678 <rpc_message_handler+0x4>
   5068c:	bd38      	pop	{r3, r4, r5, pc}
   5068e:	2102      	movs	r1, #2
   50690:	f7ff ff94 	bl	505bc <handle_modem_rpc_msg.part.0>
   50694:	2800      	cmp	r0, #0
   50696:	d0f7      	beq.n	50688 <rpc_message_handler+0x14>
   50698:	e7ee      	b.n	50678 <rpc_message_handler+0x4>
   5069a:	bf00      	nop
   5069c:	2001b8f0 	.word	0x2001b8f0

000506a0 <ipc_irq_handler>:
   506a0:	b510      	push	{r4, lr}
   506a2:	2807      	cmp	r0, #7
   506a4:	d85e      	bhi.n	50764 <ipc_irq_handler+0xc4>
   506a6:	e8df f000 	tbb	[pc, r0]
   506aa:	5d0a      	.short	0x5d0a
   506ac:	5d555d3d 	.word	0x5d555d3d
   506b0:	0436      	.short	0x0436
   506b2:	f7ff fd5f 	bl	50174 <ipc_trace_handle>
   506b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   506ba:	f7f9 badf 	b.w	49c7c <nrf_modem_os_event_notify>
   506be:	2403      	movs	r4, #3
   506c0:	4b29      	ldr	r3, [pc, #164]	; (50768 <ipc_irq_handler+0xc8>)
   506c2:	f8d3 0614 	ldr.w	r0, [r3, #1556]	; 0x614
   506c6:	f8d3 1618 	ldr.w	r1, [r3, #1560]	; 0x618
   506ca:	4b28      	ldr	r3, [pc, #160]	; (5076c <ipc_irq_handler+0xcc>)
   506cc:	781a      	ldrb	r2, [r3, #0]
   506ce:	701c      	strb	r4, [r3, #0]
   506d0:	2a01      	cmp	r2, #1
   506d2:	d11b      	bne.n	5070c <ipc_irq_handler+0x6c>
   506d4:	4b26      	ldr	r3, [pc, #152]	; (50770 <ipc_irq_handler+0xd0>)
   506d6:	4298      	cmp	r0, r3
   506d8:	d00f      	beq.n	506fa <ipc_irq_handler+0x5a>
   506da:	d808      	bhi.n	506ee <ipc_irq_handler+0x4e>
   506dc:	3b02      	subs	r3, #2
   506de:	4298      	cmp	r0, r3
   506e0:	d00e      	beq.n	50700 <ipc_irq_handler+0x60>
   506e2:	3301      	adds	r3, #1
   506e4:	4298      	cmp	r0, r3
   506e6:	d00e      	beq.n	50706 <ipc_irq_handler+0x66>
   506e8:	4b22      	ldr	r3, [pc, #136]	; (50774 <ipc_irq_handler+0xd4>)
   506ea:	6018      	str	r0, [r3, #0]
   506ec:	e7e3      	b.n	506b6 <ipc_irq_handler+0x16>
   506ee:	4b22      	ldr	r3, [pc, #136]	; (50778 <ipc_irq_handler+0xd8>)
   506f0:	4298      	cmp	r0, r3
   506f2:	d1f9      	bne.n	506e8 <ipc_irq_handler+0x48>
   506f4:	f06f 0004 	mvn.w	r0, #4
   506f8:	e7f6      	b.n	506e8 <ipc_irq_handler+0x48>
   506fa:	f06f 000b 	mvn.w	r0, #11
   506fe:	e7f3      	b.n	506e8 <ipc_irq_handler+0x48>
   50700:	f06f 0015 	mvn.w	r0, #21
   50704:	e7f0      	b.n	506e8 <ipc_irq_handler+0x48>
   50706:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   5070a:	e7ed      	b.n	506e8 <ipc_irq_handler+0x48>
   5070c:	f3c0 000b 	ubfx	r0, r0, #0, #12
   50710:	f001 fade 	bl	51cd0 <nrf_modem_fault_handler_internal>
   50714:	e7cf      	b.n	506b6 <ipc_irq_handler+0x16>
   50716:	2202      	movs	r2, #2
   50718:	4b14      	ldr	r3, [pc, #80]	; (5076c <ipc_irq_handler+0xcc>)
   5071a:	2000      	movs	r0, #0
   5071c:	701a      	strb	r2, [r3, #0]
   5071e:	f001 fae7 	bl	51cf0 <nrf_modem_state_set>
   50722:	e7c8      	b.n	506b6 <ipc_irq_handler+0x16>
   50724:	4b11      	ldr	r3, [pc, #68]	; (5076c <ipc_irq_handler+0xcc>)
   50726:	781a      	ldrb	r2, [r3, #0]
   50728:	2a01      	cmp	r2, #1
   5072a:	b2d0      	uxtb	r0, r2
   5072c:	d112      	bne.n	50754 <ipc_irq_handler+0xb4>
   5072e:	4a13      	ldr	r2, [pc, #76]	; (5077c <ipc_irq_handler+0xdc>)
   50730:	4c13      	ldr	r4, [pc, #76]	; (50780 <ipc_irq_handler+0xe0>)
   50732:	6812      	ldr	r2, [r2, #0]
   50734:	6891      	ldr	r1, [r2, #8]
   50736:	6061      	str	r1, [r4, #4]
   50738:	6852      	ldr	r2, [r2, #4]
   5073a:	6022      	str	r2, [r4, #0]
   5073c:	b121      	cbz	r1, 50748 <ipc_irq_handler+0xa8>
   5073e:	b11a      	cbz	r2, 50748 <ipc_irq_handler+0xa8>
   50740:	6809      	ldr	r1, [r1, #0]
   50742:	b109      	cbz	r1, 50748 <ipc_irq_handler+0xa8>
   50744:	6812      	ldr	r2, [r2, #0]
   50746:	b942      	cbnz	r2, 5075a <ipc_irq_handler+0xba>
   50748:	f06f 0104 	mvn.w	r1, #4
   5074c:	4a09      	ldr	r2, [pc, #36]	; (50774 <ipc_irq_handler+0xd4>)
   5074e:	6011      	str	r1, [r2, #0]
   50750:	2203      	movs	r2, #3
   50752:	701a      	strb	r2, [r3, #0]
   50754:	f7ff ff8e 	bl	50674 <rpc_message_handler>
   50758:	e7ad      	b.n	506b6 <ipc_irq_handler+0x16>
   5075a:	2200      	movs	r2, #0
   5075c:	701a      	strb	r2, [r3, #0]
   5075e:	f001 fac7 	bl	51cf0 <nrf_modem_state_set>
   50762:	e7f7      	b.n	50754 <ipc_irq_handler+0xb4>
   50764:	bd10      	pop	{r4, pc}
   50766:	bf00      	nop
   50768:	4002a000 	.word	0x4002a000
   5076c:	2002062f 	.word	0x2002062f
   50770:	00010022 	.word	0x00010022
   50774:	2001b8e8 	.word	0x2001b8e8
   50778:	00013032 	.word	0x00013032
   5077c:	2001b8ec 	.word	0x2001b8ec
   50780:	2001b8f0 	.word	0x2001b8f0

00050784 <sock_init>:
   50784:	f44f 7240 	mov.w	r2, #768	; 0x300
   50788:	2100      	movs	r1, #0
   5078a:	b508      	push	{r3, lr}
   5078c:	4808      	ldr	r0, [pc, #32]	; (507b0 <sock_init+0x2c>)
   5078e:	f00a fbe3 	bl	5af58 <memset>
   50792:	2100      	movs	r1, #0
   50794:	2208      	movs	r2, #8
   50796:	4b07      	ldr	r3, [pc, #28]	; (507b4 <sock_init+0x30>)
   50798:	4807      	ldr	r0, [pc, #28]	; (507b8 <sock_init+0x34>)
   5079a:	7019      	strb	r1, [r3, #0]
   5079c:	4b04      	ldr	r3, [pc, #16]	; (507b0 <sock_init+0x2c>)
   5079e:	3a01      	subs	r2, #1
   507a0:	e9c3 0100 	strd	r0, r1, [r3]
   507a4:	6099      	str	r1, [r3, #8]
   507a6:	f103 0360 	add.w	r3, r3, #96	; 0x60
   507aa:	d1f8      	bne.n	5079e <sock_init+0x1a>
   507ac:	bd08      	pop	{r3, pc}
   507ae:	bf00      	nop
   507b0:	2001b908 	.word	0x2001b908
   507b4:	20020631 	.word	0x20020631
   507b8:	1badf11e 	.word	0x1badf11e

000507bc <sock_open>:
   507bc:	2300      	movs	r3, #0
   507be:	2060      	movs	r0, #96	; 0x60
   507c0:	b530      	push	{r4, r5, lr}
   507c2:	4a0d      	ldr	r2, [pc, #52]	; (507f8 <sock_open+0x3c>)
   507c4:	4c0d      	ldr	r4, [pc, #52]	; (507fc <sock_open+0x40>)
   507c6:	fb00 f103 	mul.w	r1, r0, r3
   507ca:	588d      	ldr	r5, [r1, r2]
   507cc:	42a5      	cmp	r5, r4
   507ce:	d10e      	bne.n	507ee <sock_open+0x32>
   507d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   507d4:	1850      	adds	r0, r2, r1
   507d6:	5053      	str	r3, [r2, r1]
   507d8:	4a09      	ldr	r2, [pc, #36]	; (50800 <sock_open+0x44>)
   507da:	7f03      	ldrb	r3, [r0, #28]
   507dc:	7812      	ldrb	r2, [r2, #0]
   507de:	f362 1386 	bfi	r3, r2, #6, #1
   507e2:	7703      	strb	r3, [r0, #28]
   507e4:	2302      	movs	r3, #2
   507e6:	8783      	strh	r3, [r0, #60]	; 0x3c
   507e8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   507ec:	bd30      	pop	{r4, r5, pc}
   507ee:	3301      	adds	r3, #1
   507f0:	2b08      	cmp	r3, #8
   507f2:	d1e8      	bne.n	507c6 <sock_open+0xa>
   507f4:	2000      	movs	r0, #0
   507f6:	e7f9      	b.n	507ec <sock_open+0x30>
   507f8:	2001b908 	.word	0x2001b908
   507fc:	1badf11e 	.word	0x1badf11e
   50800:	20020631 	.word	0x20020631

00050804 <sock_find>:
   50804:	b530      	push	{r4, r5, lr}
   50806:	2200      	movs	r2, #0
   50808:	2460      	movs	r4, #96	; 0x60
   5080a:	4b06      	ldr	r3, [pc, #24]	; (50824 <sock_find+0x20>)
   5080c:	fb04 f102 	mul.w	r1, r4, r2
   50810:	58cd      	ldr	r5, [r1, r3]
   50812:	4285      	cmp	r5, r0
   50814:	d101      	bne.n	5081a <sock_find+0x16>
   50816:	1858      	adds	r0, r3, r1
   50818:	bd30      	pop	{r4, r5, pc}
   5081a:	3201      	adds	r2, #1
   5081c:	2a08      	cmp	r2, #8
   5081e:	d1f5      	bne.n	5080c <sock_find+0x8>
   50820:	2000      	movs	r0, #0
   50822:	e7f9      	b.n	50818 <sock_find+0x14>
   50824:	2001b908 	.word	0x2001b908

00050828 <_sock_close>:
   50828:	b538      	push	{r3, r4, r5, lr}
   5082a:	f7ff ffeb 	bl	50804 <sock_find>
   5082e:	4604      	mov	r4, r0
   50830:	1d05      	adds	r5, r0, #4
   50832:	4628      	mov	r0, r5
   50834:	f009 f9c7 	bl	59bc6 <pkt_flush>
   50838:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   5083a:	b108      	cbz	r0, 50840 <_sock_close+0x18>
   5083c:	f7f9 fa3c 	bl	49cb8 <nrf_modem_os_free>
   50840:	225c      	movs	r2, #92	; 0x5c
   50842:	2100      	movs	r1, #0
   50844:	4628      	mov	r0, r5
   50846:	f00a fb87 	bl	5af58 <memset>
   5084a:	4b01      	ldr	r3, [pc, #4]	; (50850 <_sock_close+0x28>)
   5084c:	6023      	str	r3, [r4, #0]
   5084e:	bd38      	pop	{r3, r4, r5, pc}
   50850:	1badf11e 	.word	0x1badf11e

00050854 <sock_flow_control_set>:
   50854:	1e02      	subs	r2, r0, #0
   50856:	bf18      	it	ne
   50858:	2201      	movne	r2, #1
   5085a:	4b0a      	ldr	r3, [pc, #40]	; (50884 <sock_flow_control_set+0x30>)
   5085c:	b570      	push	{r4, r5, r6, lr}
   5085e:	701a      	strb	r2, [r3, #0]
   50860:	2560      	movs	r5, #96	; 0x60
   50862:	2200      	movs	r2, #0
   50864:	4908      	ldr	r1, [pc, #32]	; (50888 <sock_flow_control_set+0x34>)
   50866:	4e09      	ldr	r6, [pc, #36]	; (5088c <sock_flow_control_set+0x38>)
   50868:	fb05 f302 	mul.w	r3, r5, r2
   5086c:	585c      	ldr	r4, [r3, r1]
   5086e:	3201      	adds	r2, #1
   50870:	42b4      	cmp	r4, r6
   50872:	bf1f      	itttt	ne
   50874:	185b      	addne	r3, r3, r1
   50876:	7f1c      	ldrbne	r4, [r3, #28]
   50878:	f360 1486 	bfine	r4, r0, #6, #1
   5087c:	771c      	strbne	r4, [r3, #28]
   5087e:	2a08      	cmp	r2, #8
   50880:	d1f2      	bne.n	50868 <sock_flow_control_set+0x14>
   50882:	bd70      	pop	{r4, r5, r6, pc}
   50884:	20020631 	.word	0x20020631
   50888:	2001b908 	.word	0x2001b908
   5088c:	1badf11e 	.word	0x1badf11e

00050890 <on_getaddrinfo_res>:
   50890:	2301      	movs	r3, #1
   50892:	4a03      	ldr	r2, [pc, #12]	; (508a0 <on_getaddrinfo_res+0x10>)
   50894:	7013      	strb	r3, [r2, #0]
   50896:	4a03      	ldr	r2, [pc, #12]	; (508a4 <on_getaddrinfo_res+0x14>)
   50898:	6010      	str	r0, [r2, #0]
   5089a:	4618      	mov	r0, r3
   5089c:	4770      	bx	lr
   5089e:	bf00      	nop
   508a0:	20020632 	.word	0x20020632
   508a4:	2001bc18 	.word	0x2001bc18

000508a8 <addrinfo_init>:
   508a8:	2201      	movs	r2, #1
   508aa:	b508      	push	{r3, lr}
   508ac:	4611      	mov	r1, r2
   508ae:	4804      	ldr	r0, [pc, #16]	; (508c0 <addrinfo_init+0x18>)
   508b0:	f7f9 f9c8 	bl	49c44 <nrf_modem_os_sem_init>
   508b4:	2800      	cmp	r0, #0
   508b6:	bf18      	it	ne
   508b8:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   508bc:	bd08      	pop	{r3, pc}
   508be:	bf00      	nop
   508c0:	2001bc08 	.word	0x2001bc08

000508c4 <nrf_getaddrinfo>:
   508c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   508c8:	4604      	mov	r4, r0
   508ca:	460e      	mov	r6, r1
   508cc:	4617      	mov	r7, r2
   508ce:	461d      	mov	r5, r3
   508d0:	f001 fa14 	bl	51cfc <nrf_modem_state_is_initialized>
   508d4:	b928      	cbnz	r0, 508e2 <nrf_getaddrinfo+0x1e>
   508d6:	2001      	movs	r0, #1
   508d8:	f006 fd14 	bl	57304 <nrf_modem_os_errno_set>
   508dc:	f06f 040a 	mvn.w	r4, #10
   508e0:	e01c      	b.n	5091c <nrf_getaddrinfo+0x58>
   508e2:	ea54 0306 	orrs.w	r3, r4, r6
   508e6:	f000 817f 	beq.w	50be8 <nrf_getaddrinfo+0x324>
   508ea:	b31f      	cbz	r7, 50934 <nrf_getaddrinfo+0x70>
   508ec:	683b      	ldr	r3, [r7, #0]
   508ee:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   508f2:	f023 0302 	bic.w	r3, r3, #2
   508f6:	2b00      	cmp	r3, #0
   508f8:	f040 8179 	bne.w	50bee <nrf_getaddrinfo+0x32a>
   508fc:	6878      	ldr	r0, [r7, #4]
   508fe:	b938      	cbnz	r0, 50910 <nrf_getaddrinfo+0x4c>
   50900:	68b8      	ldr	r0, [r7, #8]
   50902:	b178      	cbz	r0, 50924 <nrf_getaddrinfo+0x60>
   50904:	f009 f8ee 	bl	59ae4 <sock_type_is_valid>
   50908:	b960      	cbnz	r0, 50924 <nrf_getaddrinfo+0x60>
   5090a:	f06f 0406 	mvn.w	r4, #6
   5090e:	e005      	b.n	5091c <nrf_getaddrinfo+0x58>
   50910:	f009 f8e2 	bl	59ad8 <sock_family_is_valid>
   50914:	2800      	cmp	r0, #0
   50916:	d1f3      	bne.n	50900 <nrf_getaddrinfo+0x3c>
   50918:	f06f 0405 	mvn.w	r4, #5
   5091c:	4620      	mov	r0, r4
   5091e:	b003      	add	sp, #12
   50920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   50924:	68f8      	ldr	r0, [r7, #12]
   50926:	b128      	cbz	r0, 50934 <nrf_getaddrinfo+0x70>
   50928:	68b9      	ldr	r1, [r7, #8]
   5092a:	f009 f8ef 	bl	59b0c <sock_proto_supports_type>
   5092e:	b908      	cbnz	r0, 50934 <nrf_getaddrinfo+0x70>
   50930:	206b      	movs	r0, #107	; 0x6b
   50932:	e7d1      	b.n	508d8 <nrf_getaddrinfo+0x14>
   50934:	4bb1      	ldr	r3, [pc, #708]	; (50bfc <nrf_getaddrinfo+0x338>)
   50936:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   5093a:	6818      	ldr	r0, [r3, #0]
   5093c:	f006 fcec 	bl	57318 <nrf_modem_os_sem_take>
   50940:	4680      	mov	r8, r0
   50942:	2800      	cmp	r0, #0
   50944:	f040 8156 	bne.w	50bf4 <nrf_getaddrinfo+0x330>
   50948:	2e00      	cmp	r6, #0
   5094a:	d042      	beq.n	509d2 <nrf_getaddrinfo+0x10e>
   5094c:	b31f      	cbz	r7, 50996 <nrf_getaddrinfo+0xd2>
   5094e:	683b      	ldr	r3, [r7, #0]
   50950:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   50954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   50958:	d11d      	bne.n	50996 <nrf_getaddrinfo+0xd2>
   5095a:	683b      	ldr	r3, [r7, #0]
   5095c:	04db      	lsls	r3, r3, #19
   5095e:	d53c      	bpl.n	509da <nrf_getaddrinfo+0x116>
   50960:	213a      	movs	r1, #58	; 0x3a
   50962:	4630      	mov	r0, r6
   50964:	f00a fc98 	bl	5b298 <strchr>
   50968:	4681      	mov	r9, r0
   5096a:	b120      	cbz	r0, 50976 <nrf_getaddrinfo+0xb2>
   5096c:	48a4      	ldr	r0, [pc, #656]	; (50c00 <nrf_getaddrinfo+0x33c>)
   5096e:	f7f0 fa41 	bl	40df4 <strlen>
   50972:	eb09 0600 	add.w	r6, r9, r0
   50976:	4630      	mov	r0, r6
   50978:	49a2      	ldr	r1, [pc, #648]	; (50c04 <nrf_getaddrinfo+0x340>)
   5097a:	f00a fcef 	bl	5b35c <strstr>
   5097e:	4681      	mov	r9, r0
   50980:	b318      	cbz	r0, 509ca <nrf_getaddrinfo+0x106>
   50982:	48a0      	ldr	r0, [pc, #640]	; (50c04 <nrf_getaddrinfo+0x340>)
   50984:	f7f0 fa36 	bl	40df4 <strlen>
   50988:	220a      	movs	r2, #10
   5098a:	2100      	movs	r1, #0
   5098c:	4448      	add	r0, r9
   5098e:	f003 f9d9 	bl	53d44 <strtol>
   50992:	4606      	mov	r6, r0
   50994:	e023      	b.n	509de <nrf_getaddrinfo+0x11a>
   50996:	220a      	movs	r2, #10
   50998:	2100      	movs	r1, #0
   5099a:	4630      	mov	r0, r6
   5099c:	f003 faec 	bl	53f78 <strtoul>
   509a0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   509a4:	1e42      	subs	r2, r0, #1
   509a6:	429a      	cmp	r2, r3
   509a8:	f200 8118 	bhi.w	50bdc <nrf_getaddrinfo+0x318>
   509ac:	0203      	lsls	r3, r0, #8
   509ae:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
   509b2:	4b95      	ldr	r3, [pc, #596]	; (50c08 <nrf_getaddrinfo+0x344>)
   509b4:	8018      	strh	r0, [r3, #0]
   509b6:	2f00      	cmp	r7, #0
   509b8:	d1cf      	bne.n	5095a <nrf_getaddrinfo+0x96>
   509ba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   509be:	2200      	movs	r2, #0
   509c0:	4b92      	ldr	r3, [pc, #584]	; (50c0c <nrf_getaddrinfo+0x348>)
   509c2:	601a      	str	r2, [r3, #0]
   509c4:	b997      	cbnz	r7, 509ec <nrf_getaddrinfo+0x128>
   509c6:	2301      	movs	r3, #1
   509c8:	e014      	b.n	509f4 <nrf_getaddrinfo+0x130>
   509ca:	4601      	mov	r1, r0
   509cc:	220a      	movs	r2, #10
   509ce:	4630      	mov	r0, r6
   509d0:	e7dd      	b.n	5098e <nrf_getaddrinfo+0xca>
   509d2:	4b8d      	ldr	r3, [pc, #564]	; (50c08 <nrf_getaddrinfo+0x344>)
   509d4:	8018      	strh	r0, [r3, #0]
   509d6:	2f00      	cmp	r7, #0
   509d8:	d0ef      	beq.n	509ba <nrf_getaddrinfo+0xf6>
   509da:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   509de:	6878      	ldr	r0, [r7, #4]
   509e0:	2800      	cmp	r0, #0
   509e2:	d0ec      	beq.n	509be <nrf_getaddrinfo+0xfa>
   509e4:	f000 fd0c 	bl	51400 <nrf_af_to_rpc_af>
   509e8:	4b88      	ldr	r3, [pc, #544]	; (50c0c <nrf_getaddrinfo+0x348>)
   509ea:	6018      	str	r0, [r3, #0]
   509ec:	68bb      	ldr	r3, [r7, #8]
   509ee:	2b00      	cmp	r3, #0
   509f0:	bf08      	it	eq
   509f2:	2301      	moveq	r3, #1
   509f4:	f8df b224 	ldr.w	fp, [pc, #548]	; 50c1c <nrf_getaddrinfo+0x358>
   509f8:	f8cb 3000 	str.w	r3, [fp]
   509fc:	2f00      	cmp	r7, #0
   509fe:	d04d      	beq.n	50a9c <nrf_getaddrinfo+0x1d8>
   50a00:	68fb      	ldr	r3, [r7, #12]
   50a02:	2b00      	cmp	r3, #0
   50a04:	bf08      	it	eq
   50a06:	2306      	moveq	r3, #6
   50a08:	f8df a214 	ldr.w	sl, [pc, #532]	; 50c20 <nrf_getaddrinfo+0x35c>
   50a0c:	f8ca 3000 	str.w	r3, [sl]
   50a10:	b10f      	cbz	r7, 50a16 <nrf_getaddrinfo+0x152>
   50a12:	f8d7 8000 	ldr.w	r8, [r7]
   50a16:	4f7e      	ldr	r7, [pc, #504]	; (50c10 <nrf_getaddrinfo+0x34c>)
   50a18:	4620      	mov	r0, r4
   50a1a:	f8c7 8000 	str.w	r8, [r7]
   50a1e:	b10c      	cbz	r4, 50a24 <nrf_getaddrinfo+0x160>
   50a20:	f7f0 f9e8 	bl	40df4 <strlen>
   50a24:	f008 ff78 	bl	59918 <rpc_client_msg_alloc>
   50a28:	4680      	mov	r8, r0
   50a2a:	2800      	cmp	r0, #0
   50a2c:	f000 80d9 	beq.w	50be2 <nrf_getaddrinfo+0x31e>
   50a30:	6106      	str	r6, [r0, #16]
   50a32:	b144      	cbz	r4, 50a46 <nrf_getaddrinfo+0x182>
   50a34:	6806      	ldr	r6, [r0, #0]
   50a36:	4620      	mov	r0, r4
   50a38:	f7f0 f9dc 	bl	40df4 <strlen>
   50a3c:	4621      	mov	r1, r4
   50a3e:	4602      	mov	r2, r0
   50a40:	4630      	mov	r0, r6
   50a42:	f00a fa4f 	bl	5aee4 <memcpy>
   50a46:	4b71      	ldr	r3, [pc, #452]	; (50c0c <nrf_getaddrinfo+0x348>)
   50a48:	4642      	mov	r2, r8
   50a4a:	681b      	ldr	r3, [r3, #0]
   50a4c:	f247 010d 	movw	r1, #28685	; 0x700d
   50a50:	f8c8 3018 	str.w	r3, [r8, #24]
   50a54:	f8db 3000 	ldr.w	r3, [fp]
   50a58:	2004      	movs	r0, #4
   50a5a:	f8c8 301c 	str.w	r3, [r8, #28]
   50a5e:	f8da 3000 	ldr.w	r3, [sl]
   50a62:	4e6c      	ldr	r6, [pc, #432]	; (50c14 <nrf_getaddrinfo+0x350>)
   50a64:	f8c8 3020 	str.w	r3, [r8, #32]
   50a68:	683b      	ldr	r3, [r7, #0]
   50a6a:	f8c8 3014 	str.w	r3, [r8, #20]
   50a6e:	f008 ff6e 	bl	5994e <rpc_client_msg_send>
   50a72:	2300      	movs	r3, #0
   50a74:	7033      	strb	r3, [r6, #0]
   50a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   50a7a:	9301      	str	r3, [sp, #4]
   50a7c:	2000      	movs	r0, #0
   50a7e:	a901      	add	r1, sp, #4
   50a80:	f7f9 f81e 	bl	49ac0 <nrf_modem_os_timedwait>
   50a84:	4604      	mov	r4, r0
   50a86:	b158      	cbz	r0, 50aa0 <nrf_getaddrinfo+0x1dc>
   50a88:	206e      	movs	r0, #110	; 0x6e
   50a8a:	f006 fc3b 	bl	57304 <nrf_modem_os_errno_set>
   50a8e:	f06f 040a 	mvn.w	r4, #10
   50a92:	4b5a      	ldr	r3, [pc, #360]	; (50bfc <nrf_getaddrinfo+0x338>)
   50a94:	6818      	ldr	r0, [r3, #0]
   50a96:	f006 fc3d 	bl	57314 <nrf_modem_os_sem_give>
   50a9a:	e73f      	b.n	5091c <nrf_getaddrinfo+0x58>
   50a9c:	2306      	movs	r3, #6
   50a9e:	e7b3      	b.n	50a08 <nrf_getaddrinfo+0x144>
   50aa0:	7833      	ldrb	r3, [r6, #0]
   50aa2:	2b01      	cmp	r3, #1
   50aa4:	d1ea      	bne.n	50a7c <nrf_getaddrinfo+0x1b8>
   50aa6:	4b5c      	ldr	r3, [pc, #368]	; (50c18 <nrf_getaddrinfo+0x354>)
   50aa8:	681b      	ldr	r3, [r3, #0]
   50aaa:	6958      	ldr	r0, [r3, #20]
   50aac:	2800      	cmp	r0, #0
   50aae:	f040 8091 	bne.w	50bd4 <nrf_getaddrinfo+0x310>
   50ab2:	2020      	movs	r0, #32
   50ab4:	681e      	ldr	r6, [r3, #0]
   50ab6:	f7f9 f8f7 	bl	49ca8 <nrf_modem_os_alloc>
   50aba:	6028      	str	r0, [r5, #0]
   50abc:	b1e0      	cbz	r0, 50af8 <nrf_getaddrinfo+0x234>
   50abe:	f8d6 8008 	ldr.w	r8, [r6, #8]
   50ac2:	f1b8 0f01 	cmp.w	r8, #1
   50ac6:	d00f      	beq.n	50ae8 <nrf_getaddrinfo+0x224>
   50ac8:	f1b8 0f02 	cmp.w	r8, #2
   50acc:	d036      	beq.n	50b3c <nrf_getaddrinfo+0x278>
   50ace:	f06f 0405 	mvn.w	r4, #5
   50ad2:	4b51      	ldr	r3, [pc, #324]	; (50c18 <nrf_getaddrinfo+0x354>)
   50ad4:	681b      	ldr	r3, [r3, #0]
   50ad6:	6818      	ldr	r0, [r3, #0]
   50ad8:	b108      	cbz	r0, 50ade <nrf_getaddrinfo+0x21a>
   50ada:	f008 ff42 	bl	59962 <rpc_client_msg_data_rx_free>
   50ade:	4b4e      	ldr	r3, [pc, #312]	; (50c18 <nrf_getaddrinfo+0x354>)
   50ae0:	6818      	ldr	r0, [r3, #0]
   50ae2:	f008 ff3b 	bl	5995c <rpc_client_msg_free>
   50ae6:	e7d4      	b.n	50a92 <nrf_getaddrinfo+0x1ce>
   50ae8:	2010      	movs	r0, #16
   50aea:	f7f9 f8dd 	bl	49ca8 <nrf_modem_os_alloc>
   50aee:	4681      	mov	r9, r0
   50af0:	b928      	cbnz	r0, 50afe <nrf_getaddrinfo+0x23a>
   50af2:	6828      	ldr	r0, [r5, #0]
   50af4:	f7f9 f8e0 	bl	49cb8 <nrf_modem_os_free>
   50af8:	f06f 0409 	mvn.w	r4, #9
   50afc:	e7e9      	b.n	50ad2 <nrf_getaddrinfo+0x20e>
   50afe:	2210      	movs	r2, #16
   50b00:	4941      	ldr	r1, [pc, #260]	; (50c08 <nrf_getaddrinfo+0x344>)
   50b02:	7002      	strb	r2, [r0, #0]
   50b04:	8809      	ldrh	r1, [r1, #0]
   50b06:	f8c0 8004 	str.w	r8, [r0, #4]
   50b0a:	8101      	strh	r1, [r0, #8]
   50b0c:	69b1      	ldr	r1, [r6, #24]
   50b0e:	60c1      	str	r1, [r0, #12]
   50b10:	6829      	ldr	r1, [r5, #0]
   50b12:	610a      	str	r2, [r1, #16]
   50b14:	683a      	ldr	r2, [r7, #0]
   50b16:	f8d5 8000 	ldr.w	r8, [r5]
   50b1a:	f012 0202 	ands.w	r2, r2, #2
   50b1e:	d056      	beq.n	50bce <nrf_getaddrinfo+0x30a>
   50b20:	8af0      	ldrh	r0, [r6, #22]
   50b22:	3001      	adds	r0, #1
   50b24:	f7f9 f8c0 	bl	49ca8 <nrf_modem_os_alloc>
   50b28:	f8c8 0018 	str.w	r0, [r8, #24]
   50b2c:	682a      	ldr	r2, [r5, #0]
   50b2e:	6990      	ldr	r0, [r2, #24]
   50b30:	bb38      	cbnz	r0, 50b82 <nrf_getaddrinfo+0x2be>
   50b32:	4628      	mov	r0, r5
   50b34:	f7f9 f8c0 	bl	49cb8 <nrf_modem_os_free>
   50b38:	4648      	mov	r0, r9
   50b3a:	e7db      	b.n	50af4 <nrf_getaddrinfo+0x230>
   50b3c:	2024      	movs	r0, #36	; 0x24
   50b3e:	f7f9 f8b3 	bl	49ca8 <nrf_modem_os_alloc>
   50b42:	4681      	mov	r9, r0
   50b44:	2800      	cmp	r0, #0
   50b46:	d0d4      	beq.n	50af2 <nrf_getaddrinfo+0x22e>
   50b48:	2224      	movs	r2, #36	; 0x24
   50b4a:	4621      	mov	r1, r4
   50b4c:	f00a fa04 	bl	5af58 <memset>
   50b50:	2224      	movs	r2, #36	; 0x24
   50b52:	f889 2000 	strb.w	r2, [r9]
   50b56:	4a2c      	ldr	r2, [pc, #176]	; (50c08 <nrf_getaddrinfo+0x344>)
   50b58:	f8c9 8004 	str.w	r8, [r9, #4]
   50b5c:	8812      	ldrh	r2, [r2, #0]
   50b5e:	f109 0110 	add.w	r1, r9, #16
   50b62:	f8a9 2008 	strh.w	r2, [r9, #8]
   50b66:	f106 0028 	add.w	r0, r6, #40	; 0x28
   50b6a:	f106 0218 	add.w	r2, r6, #24
   50b6e:	f852 cb04 	ldr.w	ip, [r2], #4
   50b72:	4282      	cmp	r2, r0
   50b74:	f841 cb04 	str.w	ip, [r1], #4
   50b78:	d1f9      	bne.n	50b6e <nrf_getaddrinfo+0x2aa>
   50b7a:	2124      	movs	r1, #36	; 0x24
   50b7c:	682a      	ldr	r2, [r5, #0]
   50b7e:	6111      	str	r1, [r2, #16]
   50b80:	e7c8      	b.n	50b14 <nrf_getaddrinfo+0x250>
   50b82:	f8b6 c014 	ldrh.w	ip, [r6, #20]
   50b86:	f106 0118 	add.w	r1, r6, #24
   50b8a:	8af2      	ldrh	r2, [r6, #22]
   50b8c:	4461      	add	r1, ip
   50b8e:	f00a f9a9 	bl	5aee4 <memcpy>
   50b92:	2000      	movs	r0, #0
   50b94:	6829      	ldr	r1, [r5, #0]
   50b96:	8af2      	ldrh	r2, [r6, #22]
   50b98:	6989      	ldr	r1, [r1, #24]
   50b9a:	5488      	strb	r0, [r1, r2]
   50b9c:	68b0      	ldr	r0, [r6, #8]
   50b9e:	f8d5 8000 	ldr.w	r8, [r5]
   50ba2:	f009 fd12 	bl	5a5ca <rpc_af_to_nrf_af>
   50ba6:	f8c8 0004 	str.w	r0, [r8, #4]
   50baa:	682a      	ldr	r2, [r5, #0]
   50bac:	f8db 1000 	ldr.w	r1, [fp]
   50bb0:	6091      	str	r1, [r2, #8]
   50bb2:	682a      	ldr	r2, [r5, #0]
   50bb4:	f8da 1000 	ldr.w	r1, [sl]
   50bb8:	60d1      	str	r1, [r2, #12]
   50bba:	682a      	ldr	r2, [r5, #0]
   50bbc:	6839      	ldr	r1, [r7, #0]
   50bbe:	6011      	str	r1, [r2, #0]
   50bc0:	682a      	ldr	r2, [r5, #0]
   50bc2:	f8c2 9014 	str.w	r9, [r2, #20]
   50bc6:	2200      	movs	r2, #0
   50bc8:	682b      	ldr	r3, [r5, #0]
   50bca:	61da      	str	r2, [r3, #28]
   50bcc:	e781      	b.n	50ad2 <nrf_getaddrinfo+0x20e>
   50bce:	f8c8 2018 	str.w	r2, [r8, #24]
   50bd2:	e7e3      	b.n	50b9c <nrf_getaddrinfo+0x2d8>
   50bd4:	f009 fd41 	bl	5a65a <rpc_error_to_nrf_gai_errno>
   50bd8:	4604      	mov	r4, r0
   50bda:	e77a      	b.n	50ad2 <nrf_getaddrinfo+0x20e>
   50bdc:	f06f 0407 	mvn.w	r4, #7
   50be0:	e757      	b.n	50a92 <nrf_getaddrinfo+0x1ce>
   50be2:	f06f 0409 	mvn.w	r4, #9
   50be6:	e754      	b.n	50a92 <nrf_getaddrinfo+0x1ce>
   50be8:	f06f 0401 	mvn.w	r4, #1
   50bec:	e696      	b.n	5091c <nrf_getaddrinfo+0x58>
   50bee:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   50bf2:	e693      	b.n	5091c <nrf_getaddrinfo+0x58>
   50bf4:	f06f 0402 	mvn.w	r4, #2
   50bf8:	e690      	b.n	5091c <nrf_getaddrinfo+0x58>
   50bfa:	bf00      	nop
   50bfc:	2001bc08 	.word	0x2001bc08
   50c00:	0005d0e4 	.word	0x0005d0e4
   50c04:	00060871 	.word	0x00060871
   50c08:	2001bed2 	.word	0x2001bed2
   50c0c:	2001bc0c 	.word	0x2001bc0c
   50c10:	2001bc10 	.word	0x2001bc10
   50c14:	20020632 	.word	0x20020632
   50c18:	2001bc18 	.word	0x2001bc18
   50c1c:	2001bc1c 	.word	0x2001bc1c
   50c20:	2001bc14 	.word	0x2001bc14

00050c24 <rpc_ip_event_handler>:
   50c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   50c26:	f248 030f 	movw	r3, #32783	; 0x800f
   50c2a:	4299      	cmp	r1, r3
   50c2c:	4605      	mov	r5, r0
   50c2e:	460e      	mov	r6, r1
   50c30:	d00b      	beq.n	50c4a <rpc_ip_event_handler+0x26>
   50c32:	f249 0304 	movw	r3, #36868	; 0x9004
   50c36:	4299      	cmp	r1, r3
   50c38:	d00a      	beq.n	50c50 <rpc_ip_event_handler+0x2c>
   50c3a:	f248 030d 	movw	r3, #32781	; 0x800d
   50c3e:	4299      	cmp	r1, r3
   50c40:	d117      	bne.n	50c72 <rpc_ip_event_handler+0x4e>
   50c42:	f7ff fe25 	bl	50890 <on_getaddrinfo_res>
   50c46:	b2c0      	uxtb	r0, r0
   50c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   50c4a:	f008 ffca 	bl	59be2 <on_conf_dnssrv_res>
   50c4e:	e7fa      	b.n	50c46 <rpc_ip_event_handler+0x22>
   50c50:	6903      	ldr	r3, [r0, #16]
   50c52:	2b03      	cmp	r3, #3
   50c54:	d806      	bhi.n	50c64 <rpc_ip_event_handler+0x40>
   50c56:	e8df f003 	tbb	[pc, r3]
   50c5a:	0a02      	.short	0x0a02
   50c5c:	0702      	.short	0x0702
   50c5e:	2000      	movs	r0, #0
   50c60:	f7ff fdf8 	bl	50854 <sock_flow_control_set>
   50c64:	2000      	movs	r0, #0
   50c66:	e7ef      	b.n	50c48 <rpc_ip_event_handler+0x24>
   50c68:	2201      	movs	r2, #1
   50c6a:	4b70      	ldr	r3, [pc, #448]	; (50e2c <rpc_ip_event_handler+0x208>)
   50c6c:	701a      	strb	r2, [r3, #0]
   50c6e:	2001      	movs	r0, #1
   50c70:	e7f6      	b.n	50c60 <rpc_ip_event_handler+0x3c>
   50c72:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   50c76:	bf8c      	ite	hi
   50c78:	68c0      	ldrhi	r0, [r0, #12]
   50c7a:	6928      	ldrls	r0, [r5, #16]
   50c7c:	f7ff fdc2 	bl	50804 <sock_find>
   50c80:	4604      	mov	r4, r0
   50c82:	b928      	cbnz	r0, 50c90 <rpc_ip_event_handler+0x6c>
   50c84:	6828      	ldr	r0, [r5, #0]
   50c86:	2800      	cmp	r0, #0
   50c88:	d0ec      	beq.n	50c64 <rpc_ip_event_handler+0x40>
   50c8a:	f008 fe6a 	bl	59962 <rpc_client_msg_data_rx_free>
   50c8e:	e7e9      	b.n	50c64 <rpc_ip_event_handler+0x40>
   50c90:	f248 030c 	movw	r3, #32780	; 0x800c
   50c94:	429e      	cmp	r6, r3
   50c96:	d823      	bhi.n	50ce0 <rpc_ip_event_handler+0xbc>
   50c98:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   50c9c:	d9f2      	bls.n	50c84 <rpc_ip_event_handler+0x60>
   50c9e:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   50ca2:	3e01      	subs	r6, #1
   50ca4:	2e0b      	cmp	r6, #11
   50ca6:	d8ed      	bhi.n	50c84 <rpc_ip_event_handler+0x60>
   50ca8:	a301      	add	r3, pc, #4	; (adr r3, 50cb0 <rpc_ip_event_handler+0x8c>)
   50caa:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   50cae:	bf00      	nop
   50cb0:	00050d57 	.word	0x00050d57
   50cb4:	00050d73 	.word	0x00050d73
   50cb8:	00050d57 	.word	0x00050d57
   50cbc:	00050d57 	.word	0x00050d57
   50cc0:	00050d57 	.word	0x00050d57
   50cc4:	00050d57 	.word	0x00050d57
   50cc8:	00050d57 	.word	0x00050d57
   50ccc:	00050d57 	.word	0x00050d57
   50cd0:	00050d4b 	.word	0x00050d4b
   50cd4:	00050c85 	.word	0x00050c85
   50cd8:	00050c85 	.word	0x00050c85
   50cdc:	00050db5 	.word	0x00050db5
   50ce0:	f249 0302 	movw	r3, #36866	; 0x9002
   50ce4:	429e      	cmp	r6, r3
   50ce6:	d069      	beq.n	50dbc <rpc_ip_event_handler+0x198>
   50ce8:	d822      	bhi.n	50d30 <rpc_ip_event_handler+0x10c>
   50cea:	f248 0381 	movw	r3, #32897	; 0x8081
   50cee:	429e      	cmp	r6, r3
   50cf0:	f000 8097 	beq.w	50e22 <rpc_ip_event_handler+0x1fe>
   50cf4:	f249 0301 	movw	r3, #36865	; 0x9001
   50cf8:	429e      	cmp	r6, r3
   50cfa:	d1c3      	bne.n	50c84 <rpc_ip_event_handler+0x60>
   50cfc:	2010      	movs	r0, #16
   50cfe:	f7f8 ffd3 	bl	49ca8 <nrf_modem_os_alloc>
   50d02:	4606      	mov	r6, r0
   50d04:	2800      	cmp	r0, #0
   50d06:	d065      	beq.n	50dd4 <rpc_ip_event_handler+0x1b0>
   50d08:	2710      	movs	r7, #16
   50d0a:	2100      	movs	r1, #0
   50d0c:	463a      	mov	r2, r7
   50d0e:	f00a f923 	bl	5af58 <memset>
   50d12:	682b      	ldr	r3, [r5, #0]
   50d14:	6073      	str	r3, [r6, #4]
   50d16:	686b      	ldr	r3, [r5, #4]
   50d18:	8133      	strh	r3, [r6, #8]
   50d1a:	8a6b      	ldrh	r3, [r5, #18]
   50d1c:	2b04      	cmp	r3, #4
   50d1e:	d051      	beq.n	50dc4 <rpc_ip_event_handler+0x1a0>
   50d20:	42bb      	cmp	r3, r7
   50d22:	d064      	beq.n	50dee <rpc_ip_event_handler+0x1ca>
   50d24:	4620      	mov	r0, r4
   50d26:	4631      	mov	r1, r6
   50d28:	f008 fe2b 	bl	59982 <sock_pkt_append>
   50d2c:	2000      	movs	r0, #0
   50d2e:	e78a      	b.n	50c46 <rpc_ip_event_handler+0x22>
   50d30:	f249 0303 	movw	r3, #36867	; 0x9003
   50d34:	429e      	cmp	r6, r3
   50d36:	d012      	beq.n	50d5e <rpc_ip_event_handler+0x13a>
   50d38:	f249 0382 	movw	r3, #36994	; 0x9082
   50d3c:	429e      	cmp	r6, r3
   50d3e:	d1a1      	bne.n	50c84 <rpc_ip_event_handler+0x60>
   50d40:	4601      	mov	r1, r0
   50d42:	4628      	mov	r0, r5
   50d44:	f000 facc 	bl	512e0 <on_tls_handshake_ntf>
   50d48:	e77d      	b.n	50c46 <rpc_ip_event_handler+0x22>
   50d4a:	7f03      	ldrb	r3, [r0, #28]
   50d4c:	f023 0303 	bic.w	r3, r3, #3
   50d50:	f043 0303 	orr.w	r3, r3, #3
   50d54:	7703      	strb	r3, [r0, #28]
   50d56:	4628      	mov	r0, r5
   50d58:	f009 fc99 	bl	5a68e <res_forward>
   50d5c:	e773      	b.n	50c46 <rpc_ip_event_handler+0x22>
   50d5e:	7f03      	ldrb	r3, [r0, #28]
   50d60:	f043 0302 	orr.w	r3, r3, #2
   50d64:	7703      	strb	r3, [r0, #28]
   50d66:	6928      	ldr	r0, [r5, #16]
   50d68:	2869      	cmp	r0, #105	; 0x69
   50d6a:	d109      	bne.n	50d80 <rpc_ip_event_handler+0x15c>
   50d6c:	2368      	movs	r3, #104	; 0x68
   50d6e:	61a3      	str	r3, [r4, #24]
   50d70:	e778      	b.n	50c64 <rpc_ip_event_handler+0x40>
   50d72:	7f03      	ldrb	r3, [r0, #28]
   50d74:	68ee      	ldr	r6, [r5, #12]
   50d76:	f36f 0382 	bfc	r3, #2, #1
   50d7a:	7703      	strb	r3, [r0, #28]
   50d7c:	6968      	ldr	r0, [r5, #20]
   50d7e:	b118      	cbz	r0, 50d88 <rpc_ip_event_handler+0x164>
   50d80:	f000 fb52 	bl	51428 <rpc_error_to_nrf_errno>
   50d84:	61a0      	str	r0, [r4, #24]
   50d86:	e76d      	b.n	50c64 <rpc_ip_event_handler+0x40>
   50d88:	4620      	mov	r0, r4
   50d8a:	f008 fe29 	bl	599e0 <sock_proto_is_secure>
   50d8e:	b918      	cbnz	r0, 50d98 <rpc_ip_event_handler+0x174>
   50d90:	7f23      	ldrb	r3, [r4, #28]
   50d92:	f043 0308 	orr.w	r3, r3, #8
   50d96:	7723      	strb	r3, [r4, #28]
   50d98:	4620      	mov	r0, r4
   50d9a:	f008 fe21 	bl	599e0 <sock_proto_is_secure>
   50d9e:	2800      	cmp	r0, #0
   50da0:	f43f af60 	beq.w	50c64 <rpc_ip_event_handler+0x40>
   50da4:	2e00      	cmp	r6, #0
   50da6:	f43f af5d 	beq.w	50c64 <rpc_ip_event_handler+0x40>
   50daa:	2100      	movs	r1, #0
   50dac:	4620      	mov	r0, r4
   50dae:	f000 fab1 	bl	51314 <tls_attach>
   50db2:	e757      	b.n	50c64 <rpc_ip_event_handler+0x40>
   50db4:	7f43      	ldrb	r3, [r0, #29]
   50db6:	3b01      	subs	r3, #1
   50db8:	7743      	strb	r3, [r0, #29]
   50dba:	e7cc      	b.n	50d56 <rpc_ip_event_handler+0x132>
   50dbc:	7f43      	ldrb	r3, [r0, #29]
   50dbe:	3301      	adds	r3, #1
   50dc0:	7743      	strb	r3, [r0, #29]
   50dc2:	e74f      	b.n	50c64 <rpc_ip_event_handler+0x40>
   50dc4:	4638      	mov	r0, r7
   50dc6:	f7f8 ff6f 	bl	49ca8 <nrf_modem_os_alloc>
   50dca:	60f0      	str	r0, [r6, #12]
   50dcc:	b920      	cbnz	r0, 50dd8 <rpc_ip_event_handler+0x1b4>
   50dce:	4630      	mov	r0, r6
   50dd0:	f7f8 ff72 	bl	49cb8 <nrf_modem_os_free>
   50dd4:	2002      	movs	r0, #2
   50dd6:	e736      	b.n	50c46 <rpc_ip_event_handler+0x22>
   50dd8:	2201      	movs	r2, #1
   50dda:	7007      	strb	r7, [r0, #0]
   50ddc:	68f3      	ldr	r3, [r6, #12]
   50dde:	605a      	str	r2, [r3, #4]
   50de0:	68f3      	ldr	r3, [r6, #12]
   50de2:	8a2a      	ldrh	r2, [r5, #16]
   50de4:	811a      	strh	r2, [r3, #8]
   50de6:	68f3      	ldr	r3, [r6, #12]
   50de8:	696a      	ldr	r2, [r5, #20]
   50dea:	60da      	str	r2, [r3, #12]
   50dec:	e79a      	b.n	50d24 <rpc_ip_event_handler+0x100>
   50dee:	2024      	movs	r0, #36	; 0x24
   50df0:	f7f8 ff5a 	bl	49ca8 <nrf_modem_os_alloc>
   50df4:	60f0      	str	r0, [r6, #12]
   50df6:	2800      	cmp	r0, #0
   50df8:	d0e9      	beq.n	50dce <rpc_ip_event_handler+0x1aa>
   50dfa:	2324      	movs	r3, #36	; 0x24
   50dfc:	2202      	movs	r2, #2
   50dfe:	7003      	strb	r3, [r0, #0]
   50e00:	68f3      	ldr	r3, [r6, #12]
   50e02:	605a      	str	r2, [r3, #4]
   50e04:	8a2a      	ldrh	r2, [r5, #16]
   50e06:	68f3      	ldr	r3, [r6, #12]
   50e08:	811a      	strh	r2, [r3, #8]
   50e0a:	68f3      	ldr	r3, [r6, #12]
   50e0c:	f105 0214 	add.w	r2, r5, #20
   50e10:	3310      	adds	r3, #16
   50e12:	3524      	adds	r5, #36	; 0x24
   50e14:	f852 1b04 	ldr.w	r1, [r2], #4
   50e18:	42aa      	cmp	r2, r5
   50e1a:	f843 1b04 	str.w	r1, [r3], #4
   50e1e:	d1f9      	bne.n	50e14 <rpc_ip_event_handler+0x1f0>
   50e20:	e780      	b.n	50d24 <rpc_ip_event_handler+0x100>
   50e22:	4601      	mov	r1, r0
   50e24:	4628      	mov	r0, r5
   50e26:	f000 fa47 	bl	512b8 <on_tls_attach_res>
   50e2a:	e70c      	b.n	50c46 <rpc_ip_event_handler+0x22>
   50e2c:	20020633 	.word	0x20020633

00050e30 <nrf_close>:
   50e30:	b570      	push	{r4, r5, r6, lr}
   50e32:	4605      	mov	r5, r0
   50e34:	f7ff fce6 	bl	50804 <sock_find>
   50e38:	4606      	mov	r6, r0
   50e3a:	b930      	cbnz	r0, 50e4a <nrf_close+0x1a>
   50e3c:	2009      	movs	r0, #9
   50e3e:	f006 fa61 	bl	57304 <nrf_modem_os_errno_set>
   50e42:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   50e46:	4620      	mov	r0, r4
   50e48:	bd70      	pop	{r4, r5, r6, pc}
   50e4a:	f000 ff57 	bl	51cfc <nrf_modem_state_is_initialized>
   50e4e:	b960      	cbnz	r0, 50e6a <nrf_close+0x3a>
   50e50:	2400      	movs	r4, #0
   50e52:	4630      	mov	r0, r6
   50e54:	f008 fdd8 	bl	59a08 <sock_is_attaching>
   50e58:	b118      	cbz	r0, 50e62 <nrf_close+0x32>
   50e5a:	4b0f      	ldr	r3, [pc, #60]	; (50e98 <nrf_close+0x68>)
   50e5c:	6818      	ldr	r0, [r3, #0]
   50e5e:	f006 fa59 	bl	57314 <nrf_modem_os_sem_give>
   50e62:	4628      	mov	r0, r5
   50e64:	f7ff fce0 	bl	50828 <_sock_close>
   50e68:	e7ed      	b.n	50e46 <nrf_close+0x16>
   50e6a:	2000      	movs	r0, #0
   50e6c:	f008 fd54 	bl	59918 <rpc_client_msg_alloc>
   50e70:	4601      	mov	r1, r0
   50e72:	b908      	cbnz	r0, 50e78 <nrf_close+0x48>
   50e74:	2069      	movs	r0, #105	; 0x69
   50e76:	e7e2      	b.n	50e3e <nrf_close+0xe>
   50e78:	6105      	str	r5, [r0, #16]
   50e7a:	2200      	movs	r2, #0
   50e7c:	f247 0009 	movw	r0, #28681	; 0x7009
   50e80:	f000 fade 	bl	51440 <req_forward>
   50e84:	2800      	cmp	r0, #0
   50e86:	d0e3      	beq.n	50e50 <nrf_close+0x20>
   50e88:	2816      	cmp	r0, #22
   50e8a:	d0e1      	beq.n	50e50 <nrf_close+0x20>
   50e8c:	f006 fa3a 	bl	57304 <nrf_modem_os_errno_set>
   50e90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   50e94:	e7dd      	b.n	50e52 <nrf_close+0x22>
   50e96:	bf00      	nop
   50e98:	2001bc20 	.word	0x2001bc20

00050e9c <nrf_sendto>:
   50e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   50ea0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   50ea2:	4682      	mov	sl, r0
   50ea4:	4688      	mov	r8, r1
   50ea6:	4617      	mov	r7, r2
   50ea8:	461e      	mov	r6, r3
   50eaa:	f7ff fcab 	bl	50804 <sock_find>
   50eae:	4604      	mov	r4, r0
   50eb0:	b928      	cbnz	r0, 50ebe <nrf_sendto+0x22>
   50eb2:	2009      	movs	r0, #9
   50eb4:	f006 fa26 	bl	57304 <nrf_modem_os_errno_set>
   50eb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   50ebc:	e096      	b.n	50fec <nrf_sendto+0x150>
   50ebe:	f036 0340 	bics.w	r3, r6, #64	; 0x40
   50ec2:	d001      	beq.n	50ec8 <nrf_sendto+0x2c>
   50ec4:	205f      	movs	r0, #95	; 0x5f
   50ec6:	e7f5      	b.n	50eb4 <nrf_sendto+0x18>
   50ec8:	f008 fdaa 	bl	59a20 <sock_is_closed>
   50ecc:	b108      	cbz	r0, 50ed2 <nrf_sendto+0x36>
   50ece:	69a0      	ldr	r0, [r4, #24]
   50ed0:	e7f0      	b.n	50eb4 <nrf_sendto+0x18>
   50ed2:	4620      	mov	r0, r4
   50ed4:	2d00      	cmp	r5, #0
   50ed6:	f000 80d2 	beq.w	5107e <nrf_sendto+0x1e2>
   50eda:	f008 fd72 	bl	599c2 <sock_is_stream>
   50ede:	b9b8      	cbnz	r0, 50f10 <nrf_sendto+0x74>
   50ee0:	4629      	mov	r1, r5
   50ee2:	4620      	mov	r0, r4
   50ee4:	f008 fe40 	bl	59b68 <sock_sockaddr_fam_is_valid>
   50ee8:	b908      	cbnz	r0, 50eee <nrf_sendto+0x52>
   50eea:	206a      	movs	r0, #106	; 0x6a
   50eec:	e7e2      	b.n	50eb4 <nrf_sendto+0x18>
   50eee:	4628      	mov	r0, r5
   50ef0:	990d      	ldr	r1, [sp, #52]	; 0x34
   50ef2:	f008 fe25 	bl	59b40 <sock_sockaddr_len_is_valid>
   50ef6:	b908      	cbnz	r0, 50efc <nrf_sendto+0x60>
   50ef8:	2016      	movs	r0, #22
   50efa:	e7db      	b.n	50eb4 <nrf_sendto+0x18>
   50efc:	4620      	mov	r0, r4
   50efe:	f008 fd65 	bl	599cc <sock_is_datagram>
   50f02:	b128      	cbz	r0, 50f10 <nrf_sendto+0x74>
   50f04:	4620      	mov	r0, r4
   50f06:	f008 fd6b 	bl	599e0 <sock_proto_is_secure>
   50f0a:	b108      	cbz	r0, 50f10 <nrf_sendto+0x74>
   50f0c:	207f      	movs	r0, #127	; 0x7f
   50f0e:	e7d1      	b.n	50eb4 <nrf_sendto+0x18>
   50f10:	4620      	mov	r0, r4
   50f12:	f008 fdcf 	bl	59ab4 <sock_sndtimeo_ms_get>
   50f16:	9000      	str	r0, [sp, #0]
   50f18:	4620      	mov	r0, r4
   50f1a:	f008 fd79 	bl	59a10 <sock_is_nonblock>
   50f1e:	bb18      	cbnz	r0, 50f68 <nrf_sendto+0xcc>
   50f20:	f3c6 1980 	ubfx	r9, r6, #6, #1
   50f24:	4620      	mov	r0, r4
   50f26:	f008 fd4c 	bl	599c2 <sock_is_stream>
   50f2a:	b140      	cbz	r0, 50f3e <nrf_sendto+0xa2>
   50f2c:	4620      	mov	r0, r4
   50f2e:	f008 fd57 	bl	599e0 <sock_proto_is_secure>
   50f32:	b120      	cbz	r0, 50f3e <nrf_sendto+0xa2>
   50f34:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
   50f38:	bf28      	it	cs
   50f3a:	f44f 6700 	movcs.w	r7, #2048	; 0x800
   50f3e:	4620      	mov	r0, r4
   50f40:	f008 fd79 	bl	59a36 <sock_has_flow_control>
   50f44:	b118      	cbz	r0, 50f4e <nrf_sendto+0xb2>
   50f46:	4620      	mov	r0, r4
   50f48:	f008 fd6a 	bl	59a20 <sock_is_closed>
   50f4c:	b178      	cbz	r0, 50f6e <nrf_sendto+0xd2>
   50f4e:	4638      	mov	r0, r7
   50f50:	f008 fce2 	bl	59918 <rpc_client_msg_alloc>
   50f54:	4683      	mov	fp, r0
   50f56:	b9b8      	cbnz	r0, 50f88 <nrf_sendto+0xec>
   50f58:	4669      	mov	r1, sp
   50f5a:	f7f8 fdb1 	bl	49ac0 <nrf_modem_os_timedwait>
   50f5e:	b980      	cbnz	r0, 50f82 <nrf_sendto+0xe6>
   50f60:	f1b9 0f00 	cmp.w	r9, #0
   50f64:	d0f3      	beq.n	50f4e <nrf_sendto+0xb2>
   50f66:	e005      	b.n	50f74 <nrf_sendto+0xd8>
   50f68:	f04f 0901 	mov.w	r9, #1
   50f6c:	e7da      	b.n	50f24 <nrf_sendto+0x88>
   50f6e:	f1b9 0f00 	cmp.w	r9, #0
   50f72:	d001      	beq.n	50f78 <nrf_sendto+0xdc>
   50f74:	200b      	movs	r0, #11
   50f76:	e79d      	b.n	50eb4 <nrf_sendto+0x18>
   50f78:	4669      	mov	r1, sp
   50f7a:	f7f8 fda1 	bl	49ac0 <nrf_modem_os_timedwait>
   50f7e:	2800      	cmp	r0, #0
   50f80:	d0dd      	beq.n	50f3e <nrf_sendto+0xa2>
   50f82:	f009 ff8d 	bl	5aea0 <abs>
   50f86:	e795      	b.n	50eb4 <nrf_sendto+0x18>
   50f88:	f8c0 a010 	str.w	sl, [r0, #16]
   50f8c:	f1b8 0f00 	cmp.w	r8, #0
   50f90:	d004      	beq.n	50f9c <nrf_sendto+0x100>
   50f92:	463a      	mov	r2, r7
   50f94:	4641      	mov	r1, r8
   50f96:	6800      	ldr	r0, [r0, #0]
   50f98:	f009 ffa4 	bl	5aee4 <memcpy>
   50f9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   50f9e:	b112      	cbz	r2, 50fa6 <nrf_sendto+0x10a>
   50fa0:	4316      	orrs	r6, r2
   50fa2:	2200      	movs	r2, #0
   50fa4:	6322      	str	r2, [r4, #48]	; 0x30
   50fa6:	2d00      	cmp	r5, #0
   50fa8:	d044      	beq.n	51034 <nrf_sendto+0x198>
   50faa:	4620      	mov	r0, r4
   50fac:	f008 fd09 	bl	599c2 <sock_is_stream>
   50fb0:	2800      	cmp	r0, #0
   50fb2:	d13f      	bne.n	51034 <nrf_sendto+0x198>
   50fb4:	2218      	movs	r2, #24
   50fb6:	f88b 0009 	strb.w	r0, [fp, #9]
   50fba:	f88b 2008 	strb.w	r2, [fp, #8]
   50fbe:	f88b 000a 	strb.w	r0, [fp, #10]
   50fc2:	f88b 000b 	strb.w	r0, [fp, #11]
   50fc6:	f8cb 6014 	str.w	r6, [fp, #20]
   50fca:	686a      	ldr	r2, [r5, #4]
   50fcc:	2a01      	cmp	r2, #1
   50fce:	d011      	beq.n	50ff4 <nrf_sendto+0x158>
   50fd0:	2a02      	cmp	r2, #2
   50fd2:	d01b      	beq.n	5100c <nrf_sendto+0x170>
   50fd4:	f247 0007 	movw	r0, #28679	; 0x7007
   50fd8:	4659      	mov	r1, fp
   50fda:	aa01      	add	r2, sp, #4
   50fdc:	f000 fa30 	bl	51440 <req_forward>
   50fe0:	4603      	mov	r3, r0
   50fe2:	bbb0      	cbnz	r0, 51052 <nrf_sendto+0x1b6>
   50fe4:	9801      	ldr	r0, [sp, #4]
   50fe6:	6984      	ldr	r4, [r0, #24]
   50fe8:	f008 fcb8 	bl	5995c <rpc_client_msg_free>
   50fec:	4620      	mov	r0, r4
   50fee:	b003      	add	sp, #12
   50ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   50ff4:	892a      	ldrh	r2, [r5, #8]
   50ff6:	f88b 001b 	strb.w	r0, [fp, #27]
   50ffa:	f8ab 2018 	strh.w	r2, [fp, #24]
   50ffe:	2204      	movs	r2, #4
   51000:	f88b 201a 	strb.w	r2, [fp, #26]
   51004:	68ea      	ldr	r2, [r5, #12]
   51006:	f8cb 201c 	str.w	r2, [fp, #28]
   5100a:	e7e3      	b.n	50fd4 <nrf_sendto+0x138>
   5100c:	892a      	ldrh	r2, [r5, #8]
   5100e:	f10b 011c 	add.w	r1, fp, #28
   51012:	f8ab 2018 	strh.w	r2, [fp, #24]
   51016:	2210      	movs	r2, #16
   51018:	f88b 001b 	strb.w	r0, [fp, #27]
   5101c:	f88b 201a 	strb.w	r2, [fp, #26]
   51020:	f105 0020 	add.w	r0, r5, #32
   51024:	18aa      	adds	r2, r5, r2
   51026:	f852 cb04 	ldr.w	ip, [r2], #4
   5102a:	4282      	cmp	r2, r0
   5102c:	f841 cb04 	str.w	ip, [r1], #4
   51030:	d1f9      	bne.n	51026 <nrf_sendto+0x18a>
   51032:	e7cf      	b.n	50fd4 <nrf_sendto+0x138>
   51034:	2200      	movs	r2, #0
   51036:	2104      	movs	r1, #4
   51038:	f247 0006 	movw	r0, #28678	; 0x7006
   5103c:	f88b 1008 	strb.w	r1, [fp, #8]
   51040:	f88b 2009 	strb.w	r2, [fp, #9]
   51044:	f88b 200a 	strb.w	r2, [fp, #10]
   51048:	f88b 200b 	strb.w	r2, [fp, #11]
   5104c:	f8cb 6014 	str.w	r6, [fp, #20]
   51050:	e7c2      	b.n	50fd8 <nrf_sendto+0x13c>
   51052:	280c      	cmp	r0, #12
   51054:	dc0e      	bgt.n	51074 <nrf_sendto+0x1d8>
   51056:	280a      	cmp	r0, #10
   51058:	dd0f      	ble.n	5107a <nrf_sendto+0x1de>
   5105a:	4b0f      	ldr	r3, [pc, #60]	; (51098 <nrf_sendto+0x1fc>)
   5105c:	7818      	ldrb	r0, [r3, #0]
   5105e:	b920      	cbnz	r0, 5106a <nrf_sendto+0x1ce>
   51060:	4669      	mov	r1, sp
   51062:	f7f8 fd2d 	bl	49ac0 <nrf_modem_os_timedwait>
   51066:	2800      	cmp	r0, #0
   51068:	d18b      	bne.n	50f82 <nrf_sendto+0xe6>
   5106a:	f1b9 0f00 	cmp.w	r9, #0
   5106e:	f43f af66 	beq.w	50f3e <nrf_sendto+0xa2>
   51072:	e77f      	b.n	50f74 <nrf_sendto+0xd8>
   51074:	288c      	cmp	r0, #140	; 0x8c
   51076:	f43f af1d 	beq.w	50eb4 <nrf_sendto+0x18>
   5107a:	4618      	mov	r0, r3
   5107c:	e71a      	b.n	50eb4 <nrf_sendto+0x18>
   5107e:	f008 fca5 	bl	599cc <sock_is_datagram>
   51082:	2800      	cmp	r0, #0
   51084:	f43f af44 	beq.w	50f10 <nrf_sendto+0x74>
   51088:	4620      	mov	r0, r4
   5108a:	f008 fcb9 	bl	59a00 <sock_is_connected>
   5108e:	2800      	cmp	r0, #0
   51090:	f47f af3e 	bne.w	50f10 <nrf_sendto+0x74>
   51094:	2079      	movs	r0, #121	; 0x79
   51096:	e70d      	b.n	50eb4 <nrf_sendto+0x18>
   51098:	20020633 	.word	0x20020633

0005109c <nrf_setsockopt>:
   5109c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   510a0:	b085      	sub	sp, #20
   510a2:	4680      	mov	r8, r0
   510a4:	4689      	mov	r9, r1
   510a6:	4617      	mov	r7, r2
   510a8:	461d      	mov	r5, r3
   510aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   510ac:	f7ff fbaa 	bl	50804 <sock_find>
   510b0:	b928      	cbnz	r0, 510be <nrf_setsockopt+0x22>
   510b2:	2009      	movs	r0, #9
   510b4:	f006 f926 	bl	57304 <nrf_modem_os_errno_set>
   510b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   510bc:	e06f      	b.n	5119e <nrf_setsockopt+0x102>
   510be:	b915      	cbnz	r5, 510c6 <nrf_setsockopt+0x2a>
   510c0:	b10c      	cbz	r4, 510c6 <nrf_setsockopt+0x2a>
   510c2:	2016      	movs	r0, #22
   510c4:	e7f6      	b.n	510b4 <nrf_setsockopt+0x18>
   510c6:	f5b9 7f8d 	cmp.w	r9, #282	; 0x11a
   510ca:	d12e      	bne.n	5112a <nrf_setsockopt+0x8e>
   510cc:	1e7b      	subs	r3, r7, #1
   510ce:	2b0d      	cmp	r3, #13
   510d0:	d82b      	bhi.n	5112a <nrf_setsockopt+0x8e>
   510d2:	e8df f003 	tbb	[pc, r3]
   510d6:	230e      	.short	0x230e
   510d8:	071c2aa9 	.word	0x071c2aa9
   510dc:	2a2a2a2a 	.word	0x2a2a2a2a
   510e0:	a9a9152a 	.word	0xa9a9152a
   510e4:	4622      	mov	r2, r4
   510e6:	4629      	mov	r1, r5
   510e8:	b005      	add	sp, #20
   510ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   510ee:	f009 b94d 	b.w	5a38c <tls_setopt_role>
   510f2:	4622      	mov	r2, r4
   510f4:	4629      	mov	r1, r5
   510f6:	b005      	add	sp, #20
   510f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   510fc:	f009 b95c 	b.w	5a3b8 <tls_setopt_taglist>
   51100:	4622      	mov	r2, r4
   51102:	4629      	mov	r1, r5
   51104:	b005      	add	sp, #20
   51106:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   5110a:	f009 b968 	b.w	5a3de <tls_setopt_sess_cache>
   5110e:	4622      	mov	r2, r4
   51110:	4629      	mov	r1, r5
   51112:	b005      	add	sp, #20
   51114:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   51118:	f009 b973 	b.w	5a402 <tls_setopt_peer_verify>
   5111c:	4622      	mov	r2, r4
   5111e:	4629      	mov	r1, r5
   51120:	b005      	add	sp, #20
   51122:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   51126:	f009 b97b 	b.w	5a420 <tls_setopt_hostname>
   5112a:	2f37      	cmp	r7, #55	; 0x37
   5112c:	dc07      	bgt.n	5113e <nrf_setsockopt+0xa2>
   5112e:	2f31      	cmp	r7, #49	; 0x31
   51130:	dc07      	bgt.n	51142 <nrf_setsockopt+0xa6>
   51132:	2f02      	cmp	r7, #2
   51134:	d078      	beq.n	51228 <nrf_setsockopt+0x18c>
   51136:	f1a7 0314 	sub.w	r3, r7, #20
   5113a:	2b0c      	cmp	r3, #12
   5113c:	d90a      	bls.n	51154 <nrf_setsockopt+0xb8>
   5113e:	206d      	movs	r0, #109	; 0x6d
   51140:	e7b8      	b.n	510b4 <nrf_setsockopt+0x18>
   51142:	f1a7 0333 	sub.w	r3, r7, #51	; 0x33
   51146:	2b04      	cmp	r3, #4
   51148:	d849      	bhi.n	511de <nrf_setsockopt+0x142>
   5114a:	e8df f003 	tbb	[pc, r3]
   5114e:	3f3b      	.short	0x3f3b
   51150:	4542      	.short	0x4542
   51152:	6d          	.byte	0x6d
   51153:	00          	.byte	0x00
   51154:	2b0c      	cmp	r3, #12
   51156:	d8f2      	bhi.n	5113e <nrf_setsockopt+0xa2>
   51158:	a201      	add	r2, pc, #4	; (adr r2, 51160 <nrf_setsockopt+0xc4>)
   5115a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   5115e:	bf00      	nop
   51160:	00051195 	.word	0x00051195
   51164:	000511a7 	.word	0x000511a7
   51168:	0005113f 	.word	0x0005113f
   5116c:	0005113f 	.word	0x0005113f
   51170:	0005113f 	.word	0x0005113f
   51174:	000511f9 	.word	0x000511f9
   51178:	0005113f 	.word	0x0005113f
   5117c:	0005113f 	.word	0x0005113f
   51180:	0005113f 	.word	0x0005113f
   51184:	0005113f 	.word	0x0005113f
   51188:	00051229 	.word	0x00051229
   5118c:	00051229 	.word	0x00051229
   51190:	00051229 	.word	0x00051229
   51194:	f100 0320 	add.w	r3, r0, #32
   51198:	b954      	cbnz	r4, 511b0 <nrf_setsockopt+0x114>
   5119a:	6204      	str	r4, [r0, #32]
   5119c:	605c      	str	r4, [r3, #4]
   5119e:	4620      	mov	r0, r4
   511a0:	b005      	add	sp, #20
   511a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   511a6:	f100 0328 	add.w	r3, r0, #40	; 0x28
   511aa:	b90c      	cbnz	r4, 511b0 <nrf_setsockopt+0x114>
   511ac:	6284      	str	r4, [r0, #40]	; 0x28
   511ae:	e7f5      	b.n	5119c <nrf_setsockopt+0x100>
   511b0:	2c08      	cmp	r4, #8
   511b2:	4622      	mov	r2, r4
   511b4:	4629      	mov	r1, r5
   511b6:	bf28      	it	cs
   511b8:	2208      	movcs	r2, #8
   511ba:	4618      	mov	r0, r3
   511bc:	f009 fe92 	bl	5aee4 <memcpy>
   511c0:	2400      	movs	r4, #0
   511c2:	e7ec      	b.n	5119e <nrf_setsockopt+0x102>
   511c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   511c8:	6303      	str	r3, [r0, #48]	; 0x30
   511ca:	e7f9      	b.n	511c0 <nrf_setsockopt+0x124>
   511cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   511d0:	e7fa      	b.n	511c8 <nrf_setsockopt+0x12c>
   511d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   511d6:	e7f7      	b.n	511c8 <nrf_setsockopt+0x12c>
   511d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   511dc:	e7f4      	b.n	511c8 <nrf_setsockopt+0x12c>
   511de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   511e2:	6303      	str	r3, [r0, #48]	; 0x30
   511e4:	2300      	movs	r3, #0
   511e6:	4640      	mov	r0, r8
   511e8:	461a      	mov	r2, r3
   511ea:	4619      	mov	r1, r3
   511ec:	e9cd 3300 	strd	r3, r3, [sp]
   511f0:	f7ff fe54 	bl	50e9c <nrf_sendto>
   511f4:	4604      	mov	r4, r0
   511f6:	e7d2      	b.n	5119e <nrf_setsockopt+0x102>
   511f8:	2d00      	cmp	r5, #0
   511fa:	f43f af62 	beq.w	510c2 <nrf_setsockopt+0x26>
   511fe:	4822      	ldr	r0, [pc, #136]	; (51288 <nrf_setsockopt+0x1ec>)
   51200:	f7ef fdf8 	bl	40df4 <strlen>
   51204:	4920      	ldr	r1, [pc, #128]	; (51288 <nrf_setsockopt+0x1ec>)
   51206:	4602      	mov	r2, r0
   51208:	4628      	mov	r0, r5
   5120a:	f009 fe5b 	bl	5aec4 <memcmp>
   5120e:	4604      	mov	r4, r0
   51210:	b988      	cbnz	r0, 51236 <nrf_setsockopt+0x19a>
   51212:	481d      	ldr	r0, [pc, #116]	; (51288 <nrf_setsockopt+0x1ec>)
   51214:	f7ef fdee 	bl	40df4 <strlen>
   51218:	220a      	movs	r2, #10
   5121a:	4621      	mov	r1, r4
   5121c:	4428      	add	r0, r5
   5121e:	f002 feab 	bl	53f78 <strtoul>
   51222:	2404      	movs	r4, #4
   51224:	9003      	str	r0, [sp, #12]
   51226:	ad03      	add	r5, sp, #12
   51228:	4620      	mov	r0, r4
   5122a:	f008 fb75 	bl	59918 <rpc_client_msg_alloc>
   5122e:	4606      	mov	r6, r0
   51230:	b928      	cbnz	r0, 5123e <nrf_setsockopt+0x1a2>
   51232:	2069      	movs	r0, #105	; 0x69
   51234:	e73e      	b.n	510b4 <nrf_setsockopt+0x18>
   51236:	220a      	movs	r2, #10
   51238:	2100      	movs	r1, #0
   5123a:	4628      	mov	r0, r5
   5123c:	e7ef      	b.n	5121e <nrf_setsockopt+0x182>
   5123e:	2308      	movs	r3, #8
   51240:	f8c0 8010 	str.w	r8, [r0, #16]
   51244:	f04f 0800 	mov.w	r8, #0
   51248:	7203      	strb	r3, [r0, #8]
   5124a:	f880 8009 	strb.w	r8, [r0, #9]
   5124e:	f880 800a 	strb.w	r8, [r0, #10]
   51252:	f880 800b 	strb.w	r8, [r0, #11]
   51256:	4648      	mov	r0, r9
   51258:	f009 f9e0 	bl	5a61c <nrf_sol_to_rpc_sol>
   5125c:	6170      	str	r0, [r6, #20]
   5125e:	4638      	mov	r0, r7
   51260:	f000 f8d6 	bl	51410 <nrf_so_to_rpc_so>
   51264:	4622      	mov	r2, r4
   51266:	4629      	mov	r1, r5
   51268:	61b0      	str	r0, [r6, #24]
   5126a:	6830      	ldr	r0, [r6, #0]
   5126c:	f009 fe3a 	bl	5aee4 <memcpy>
   51270:	6074      	str	r4, [r6, #4]
   51272:	4642      	mov	r2, r8
   51274:	4631      	mov	r1, r6
   51276:	f247 0003 	movw	r0, #28675	; 0x7003
   5127a:	f000 f8e1 	bl	51440 <req_forward>
   5127e:	4604      	mov	r4, r0
   51280:	2800      	cmp	r0, #0
   51282:	d08c      	beq.n	5119e <nrf_setsockopt+0x102>
   51284:	e716      	b.n	510b4 <nrf_setsockopt+0x18>
   51286:	bf00      	nop
   51288:	00060871 	.word	0x00060871

0005128c <rpc_ip_init>:
   5128c:	b508      	push	{r3, lr}
   5128e:	f7ff fa79 	bl	50784 <sock_init>
   51292:	f7ff fb09 	bl	508a8 <addrinfo_init>
   51296:	2200      	movs	r2, #0
   51298:	4b05      	ldr	r3, [pc, #20]	; (512b0 <rpc_ip_init+0x24>)
   5129a:	4806      	ldr	r0, [pc, #24]	; (512b4 <rpc_ip_init+0x28>)
   5129c:	701a      	strb	r2, [r3, #0]
   5129e:	2201      	movs	r2, #1
   512a0:	4611      	mov	r1, r2
   512a2:	f7f8 fccf 	bl	49c44 <nrf_modem_os_sem_init>
   512a6:	2800      	cmp	r0, #0
   512a8:	bf18      	it	ne
   512aa:	f06f 002d 	mvnne.w	r0, #45	; 0x2d
   512ae:	bd08      	pop	{r3, pc}
   512b0:	20020633 	.word	0x20020633
   512b4:	2001bc20 	.word	0x2001bc20

000512b8 <on_tls_attach_res>:
   512b8:	b510      	push	{r4, lr}
   512ba:	6943      	ldr	r3, [r0, #20]
   512bc:	460c      	mov	r4, r1
   512be:	b15b      	cbz	r3, 512d8 <on_tls_attach_res+0x20>
   512c0:	7f0b      	ldrb	r3, [r1, #28]
   512c2:	f36f 1304 	bfc	r3, #4, #1
   512c6:	770b      	strb	r3, [r1, #28]
   512c8:	6940      	ldr	r0, [r0, #20]
   512ca:	f000 f8ad 	bl	51428 <rpc_error_to_nrf_errno>
   512ce:	4b03      	ldr	r3, [pc, #12]	; (512dc <on_tls_attach_res+0x24>)
   512d0:	61a0      	str	r0, [r4, #24]
   512d2:	6818      	ldr	r0, [r3, #0]
   512d4:	f006 f81e 	bl	57314 <nrf_modem_os_sem_give>
   512d8:	2000      	movs	r0, #0
   512da:	bd10      	pop	{r4, pc}
   512dc:	2001bc20 	.word	0x2001bc20

000512e0 <on_tls_handshake_ntf>:
   512e0:	b510      	push	{r4, lr}
   512e2:	7f0b      	ldrb	r3, [r1, #28]
   512e4:	460c      	mov	r4, r1
   512e6:	f36f 1304 	bfc	r3, #4, #1
   512ea:	770b      	strb	r3, [r1, #28]
   512ec:	6900      	ldr	r0, [r0, #16]
   512ee:	b958      	cbnz	r0, 51308 <on_tls_handshake_ntf+0x28>
   512f0:	b2db      	uxtb	r3, r3
   512f2:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   512f6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   512fa:	770b      	strb	r3, [r1, #28]
   512fc:	4b04      	ldr	r3, [pc, #16]	; (51310 <on_tls_handshake_ntf+0x30>)
   512fe:	6818      	ldr	r0, [r3, #0]
   51300:	f006 f808 	bl	57314 <nrf_modem_os_sem_give>
   51304:	2000      	movs	r0, #0
   51306:	bd10      	pop	{r4, pc}
   51308:	f000 f88e 	bl	51428 <rpc_error_to_nrf_errno>
   5130c:	61a0      	str	r0, [r4, #24]
   5130e:	e7f5      	b.n	512fc <on_tls_handshake_ntf+0x1c>
   51310:	2001bc20 	.word	0x2001bc20

00051314 <tls_attach>:
   51314:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   51318:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 513fc <tls_attach+0xe8>
   5131c:	4605      	mov	r5, r0
   5131e:	f8d8 0000 	ldr.w	r0, [r8]
   51322:	9101      	str	r1, [sp, #4]
   51324:	f005 fff8 	bl	57318 <nrf_modem_os_sem_take>
   51328:	4607      	mov	r7, r0
   5132a:	b120      	cbz	r0, 51336 <tls_attach+0x22>
   5132c:	2310      	movs	r3, #16
   5132e:	61ab      	str	r3, [r5, #24]
   51330:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   51334:	e046      	b.n	513c4 <tls_attach+0xb0>
   51336:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   51338:	b1a8      	cbz	r0, 51366 <tls_attach+0x52>
   5133a:	f7ef fd5b 	bl	40df4 <strlen>
   5133e:	1c46      	adds	r6, r0, #1
   51340:	4630      	mov	r0, r6
   51342:	f008 fae9 	bl	59918 <rpc_client_msg_alloc>
   51346:	4604      	mov	r4, r0
   51348:	b978      	cbnz	r0, 5136a <tls_attach+0x56>
   5134a:	4628      	mov	r0, r5
   5134c:	f008 fb60 	bl	59a10 <sock_is_nonblock>
   51350:	b108      	cbz	r0, 51356 <tls_attach+0x42>
   51352:	2369      	movs	r3, #105	; 0x69
   51354:	61ab      	str	r3, [r5, #24]
   51356:	f8d8 0000 	ldr.w	r0, [r8]
   5135a:	f005 ffdb 	bl	57314 <nrf_modem_os_sem_give>
   5135e:	2069      	movs	r0, #105	; 0x69
   51360:	f005 ffd0 	bl	57304 <nrf_modem_os_errno_set>
   51364:	e7e4      	b.n	51330 <tls_attach+0x1c>
   51366:	463e      	mov	r6, r7
   51368:	e7ea      	b.n	51340 <tls_attach+0x2c>
   5136a:	682b      	ldr	r3, [r5, #0]
   5136c:	2204      	movs	r2, #4
   5136e:	6103      	str	r3, [r0, #16]
   51370:	2300      	movs	r3, #0
   51372:	7202      	strb	r2, [r0, #8]
   51374:	7243      	strb	r3, [r0, #9]
   51376:	7283      	strb	r3, [r0, #10]
   51378:	72c3      	strb	r3, [r0, #11]
   5137a:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   5137e:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   51382:	3201      	adds	r2, #1
   51384:	0092      	lsls	r2, r2, #2
   51386:	6082      	str	r2, [r0, #8]
   51388:	3014      	adds	r0, #20
   5138a:	f009 fdab 	bl	5aee4 <memcpy>
   5138e:	b1ee      	cbz	r6, 513cc <tls_attach+0xb8>
   51390:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   51392:	6820      	ldr	r0, [r4, #0]
   51394:	f009 ff8d 	bl	5b2b2 <strcpy>
   51398:	6066      	str	r6, [r4, #4]
   5139a:	7f2b      	ldrb	r3, [r5, #28]
   5139c:	2004      	movs	r0, #4
   5139e:	f043 0310 	orr.w	r3, r3, #16
   513a2:	4622      	mov	r2, r4
   513a4:	f247 0181 	movw	r1, #28801	; 0x7081
   513a8:	772b      	strb	r3, [r5, #28]
   513aa:	f008 fad0 	bl	5994e <rpc_client_msg_send>
   513ae:	4628      	mov	r0, r5
   513b0:	f008 fb2e 	bl	59a10 <sock_is_nonblock>
   513b4:	b930      	cbnz	r0, 513c4 <tls_attach+0xb0>
   513b6:	4628      	mov	r0, r5
   513b8:	f008 fb26 	bl	59a08 <sock_is_attaching>
   513bc:	b978      	cbnz	r0, 513de <tls_attach+0xca>
   513be:	69a8      	ldr	r0, [r5, #24]
   513c0:	2800      	cmp	r0, #0
   513c2:	d1cd      	bne.n	51360 <tls_attach+0x4c>
   513c4:	4638      	mov	r0, r7
   513c6:	b002      	add	sp, #8
   513c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   513cc:	7026      	strb	r6, [r4, #0]
   513ce:	7066      	strb	r6, [r4, #1]
   513d0:	70a6      	strb	r6, [r4, #2]
   513d2:	70e6      	strb	r6, [r4, #3]
   513d4:	7126      	strb	r6, [r4, #4]
   513d6:	7166      	strb	r6, [r4, #5]
   513d8:	71a6      	strb	r6, [r4, #6]
   513da:	71e6      	strb	r6, [r4, #7]
   513dc:	e7dd      	b.n	5139a <tls_attach+0x86>
   513de:	2000      	movs	r0, #0
   513e0:	a901      	add	r1, sp, #4
   513e2:	f7f8 fb6d 	bl	49ac0 <nrf_modem_os_timedwait>
   513e6:	f110 0f0b 	cmn.w	r0, #11
   513ea:	d004      	beq.n	513f6 <tls_attach+0xe2>
   513ec:	2800      	cmp	r0, #0
   513ee:	d0e2      	beq.n	513b6 <tls_attach+0xa2>
   513f0:	f009 fd56 	bl	5aea0 <abs>
   513f4:	e7b4      	b.n	51360 <tls_attach+0x4c>
   513f6:	2074      	movs	r0, #116	; 0x74
   513f8:	e7b2      	b.n	51360 <tls_attach+0x4c>
   513fa:	bf00      	nop
   513fc:	2001bc20 	.word	0x2001bc20

00051400 <nrf_af_to_rpc_af>:
   51400:	2803      	cmp	r0, #3
   51402:	bf9c      	itt	ls
   51404:	4b01      	ldrls	r3, [pc, #4]	; (5140c <nrf_af_to_rpc_af+0xc>)
   51406:	5618      	ldrsbls	r0, [r3, r0]
   51408:	4770      	bx	lr
   5140a:	bf00      	nop
   5140c:	00060875 	.word	0x00060875

00051410 <nrf_so_to_rpc_so>:
   51410:	3802      	subs	r0, #2
   51412:	2835      	cmp	r0, #53	; 0x35
   51414:	bf9a      	itte	ls
   51416:	4b03      	ldrls	r3, [pc, #12]	; (51424 <nrf_so_to_rpc_so+0x14>)
   51418:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   5141c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   51420:	4770      	bx	lr
   51422:	bf00      	nop
   51424:	0005c5f4 	.word	0x0005c5f4

00051428 <rpc_error_to_nrf_errno>:
   51428:	286c      	cmp	r0, #108	; 0x6c
   5142a:	bf9a      	itte	ls
   5142c:	4b02      	ldrls	r3, [pc, #8]	; (51438 <rpc_error_to_nrf_errno+0x10>)
   5142e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   51432:	4802      	ldrhi	r0, [pc, #8]	; (5143c <rpc_error_to_nrf_errno+0x14>)
   51434:	4770      	bx	lr
   51436:	bf00      	nop
   51438:	0005c6cc 	.word	0x0005c6cc
   5143c:	baadbaad 	.word	0xbaadbaad

00051440 <req_forward>:
   51440:	b573      	push	{r0, r1, r4, r5, r6, lr}
   51442:	4616      	mov	r6, r2
   51444:	b9aa      	cbnz	r2, 51472 <req_forward+0x32>
   51446:	ad01      	add	r5, sp, #4
   51448:	2300      	movs	r3, #0
   5144a:	460a      	mov	r2, r1
   5144c:	602b      	str	r3, [r5, #0]
   5144e:	60cd      	str	r5, [r1, #12]
   51450:	b281      	uxth	r1, r0
   51452:	2004      	movs	r0, #4
   51454:	f008 fa7b 	bl	5994e <rpc_client_msg_send>
   51458:	4c0c      	ldr	r4, [pc, #48]	; (5148c <req_forward+0x4c>)
   5145a:	6828      	ldr	r0, [r5, #0]
   5145c:	b158      	cbz	r0, 51476 <req_forward+0x36>
   5145e:	6940      	ldr	r0, [r0, #20]
   51460:	f7ff ffe2 	bl	51428 <rpc_error_to_nrf_errno>
   51464:	4604      	mov	r4, r0
   51466:	b106      	cbz	r6, 5146a <req_forward+0x2a>
   51468:	b168      	cbz	r0, 51486 <req_forward+0x46>
   5146a:	6828      	ldr	r0, [r5, #0]
   5146c:	f008 fa76 	bl	5995c <rpc_client_msg_free>
   51470:	e009      	b.n	51486 <req_forward+0x46>
   51472:	4615      	mov	r5, r2
   51474:	e7e8      	b.n	51448 <req_forward+0x8>
   51476:	4621      	mov	r1, r4
   51478:	f7f8 fb22 	bl	49ac0 <nrf_modem_os_timedwait>
   5147c:	2800      	cmp	r0, #0
   5147e:	d0ec      	beq.n	5145a <req_forward+0x1a>
   51480:	f009 fd0e 	bl	5aea0 <abs>
   51484:	4604      	mov	r4, r0
   51486:	4620      	mov	r0, r4
   51488:	b002      	add	sp, #8
   5148a:	bd70      	pop	{r4, r5, r6, pc}
   5148c:	2001a81c 	.word	0x2001a81c

00051490 <at_cmd_send>:
   51490:	b5f0      	push	{r4, r5, r6, r7, lr}
   51492:	4605      	mov	r5, r0
   51494:	b085      	sub	sp, #20
   51496:	2000      	movs	r0, #0
   51498:	460f      	mov	r7, r1
   5149a:	9201      	str	r2, [sp, #4]
   5149c:	461e      	mov	r6, r3
   5149e:	f008 fa3b 	bl	59918 <rpc_client_msg_alloc>
   514a2:	9901      	ldr	r1, [sp, #4]
   514a4:	4602      	mov	r2, r0
   514a6:	b930      	cbnz	r0, 514b6 <at_cmd_send+0x26>
   514a8:	b115      	cbz	r5, 514b0 <at_cmd_send+0x20>
   514aa:	4628      	mov	r0, r5
   514ac:	f008 fa5d 	bl	5996a <rpc_client_msg_data_tx_free>
   514b0:	f06f 000b 	mvn.w	r0, #11
   514b4:	e020      	b.n	514f8 <at_cmd_send+0x68>
   514b6:	f06f 0358 	mvn.w	r3, #88	; 0x58
   514ba:	2400      	movs	r4, #0
   514bc:	7303      	strb	r3, [r0, #12]
   514be:	2304      	movs	r3, #4
   514c0:	6005      	str	r5, [r0, #0]
   514c2:	4d0e      	ldr	r5, [pc, #56]	; (514fc <at_cmd_send+0x6c>)
   514c4:	7203      	strb	r3, [r0, #8]
   514c6:	7344      	strb	r4, [r0, #13]
   514c8:	7384      	strb	r4, [r0, #14]
   514ca:	73c4      	strb	r4, [r0, #15]
   514cc:	7244      	strb	r4, [r0, #9]
   514ce:	7284      	strb	r4, [r0, #10]
   514d0:	72c4      	strb	r4, [r0, #11]
   514d2:	6047      	str	r7, [r0, #4]
   514d4:	2003      	movs	r0, #3
   514d6:	702c      	strb	r4, [r5, #0]
   514d8:	f008 fa39 	bl	5994e <rpc_client_msg_send>
   514dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   514e0:	9303      	str	r3, [sp, #12]
   514e2:	782b      	ldrb	r3, [r5, #0]
   514e4:	42b3      	cmp	r3, r6
   514e6:	d101      	bne.n	514ec <at_cmd_send+0x5c>
   514e8:	2000      	movs	r0, #0
   514ea:	e005      	b.n	514f8 <at_cmd_send+0x68>
   514ec:	2000      	movs	r0, #0
   514ee:	a903      	add	r1, sp, #12
   514f0:	f7f8 fae6 	bl	49ac0 <nrf_modem_os_timedwait>
   514f4:	2800      	cmp	r0, #0
   514f6:	d0f4      	beq.n	514e2 <at_cmd_send+0x52>
   514f8:	b005      	add	sp, #20
   514fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   514fc:	20020634 	.word	0x20020634

00051500 <at_response_match>:
   51500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   51502:	4605      	mov	r5, r0
   51504:	2400      	movs	r4, #0
   51506:	4f0f      	ldr	r7, [pc, #60]	; (51544 <at_response_match+0x44>)
   51508:	f857 6b04 	ldr.w	r6, [r7], #4
   5150c:	4628      	mov	r0, r5
   5150e:	4631      	mov	r1, r6
   51510:	f009 ff24 	bl	5b35c <strstr>
   51514:	b928      	cbnz	r0, 51522 <at_response_match+0x22>
   51516:	3401      	adds	r4, #1
   51518:	2c04      	cmp	r4, #4
   5151a:	d1f5      	bne.n	51508 <at_response_match+0x8>
   5151c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   51520:	e00d      	b.n	5153e <at_response_match+0x3e>
   51522:	b16c      	cbz	r4, 51540 <at_response_match+0x40>
   51524:	1ea3      	subs	r3, r4, #2
   51526:	2b01      	cmp	r3, #1
   51528:	d8f8      	bhi.n	5151c <at_response_match+0x1c>
   5152a:	4630      	mov	r0, r6
   5152c:	f7ef fc62 	bl	40df4 <strlen>
   51530:	220a      	movs	r2, #10
   51532:	2100      	movs	r1, #0
   51534:	4428      	add	r0, r5
   51536:	f002 fc05 	bl	53d44 <strtol>
   5153a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   5153e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   51540:	4620      	mov	r0, r4
   51542:	e7fc      	b.n	5153e <at_response_match+0x3e>
   51544:	0005c880 	.word	0x0005c880

00051548 <at_vsprintf>:
   51548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   5154a:	4613      	mov	r3, r2
   5154c:	4607      	mov	r7, r0
   5154e:	9201      	str	r2, [sp, #4]
   51550:	460e      	mov	r6, r1
   51552:	4615      	mov	r5, r2
   51554:	480b      	ldr	r0, [pc, #44]	; (51584 <at_vsprintf+0x3c>)
   51556:	460a      	mov	r2, r1
   51558:	2100      	movs	r1, #0
   5155a:	f002 fd17 	bl	53f8c <vsniprintf>
   5155e:	1c44      	adds	r4, r0, #1
   51560:	4620      	mov	r0, r4
   51562:	f008 fa00 	bl	59966 <rpc_client_msg_data_tx_alloc>
   51566:	6038      	str	r0, [r7, #0]
   51568:	b140      	cbz	r0, 5157c <at_vsprintf+0x34>
   5156a:	462b      	mov	r3, r5
   5156c:	4632      	mov	r2, r6
   5156e:	4621      	mov	r1, r4
   51570:	9501      	str	r5, [sp, #4]
   51572:	f002 fd0b 	bl	53f8c <vsniprintf>
   51576:	4620      	mov	r0, r4
   51578:	b003      	add	sp, #12
   5157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   5157c:	f06f 000b 	mvn.w	r0, #11
   51580:	e7fa      	b.n	51578 <at_vsprintf+0x30>
   51582:	bf00      	nop
   51584:	0005c0a5 	.word	0x0005c0a5

00051588 <nrf_modem_at_notif_handler_set>:
   51588:	4b01      	ldr	r3, [pc, #4]	; (51590 <nrf_modem_at_notif_handler_set+0x8>)
   5158a:	6018      	str	r0, [r3, #0]
   5158c:	2000      	movs	r0, #0
   5158e:	4770      	bx	lr
   51590:	2001bc30 	.word	0x2001bc30

00051594 <nrf_modem_at_printf>:
   51594:	b40f      	push	{r0, r1, r2, r3}
   51596:	b573      	push	{r0, r1, r4, r5, r6, lr}
   51598:	9c06      	ldr	r4, [sp, #24]
   5159a:	f000 fbaf 	bl	51cfc <nrf_modem_state_is_initialized>
   5159e:	2800      	cmp	r0, #0
   515a0:	d032      	beq.n	51608 <nrf_modem_at_printf+0x74>
   515a2:	2c00      	cmp	r4, #0
   515a4:	d033      	beq.n	5160e <nrf_modem_at_printf+0x7a>
   515a6:	4621      	mov	r1, r4
   515a8:	aa07      	add	r2, sp, #28
   515aa:	a801      	add	r0, sp, #4
   515ac:	9200      	str	r2, [sp, #0]
   515ae:	f7ff ffcb 	bl	51548 <at_vsprintf>
   515b2:	9b01      	ldr	r3, [sp, #4]
   515b4:	4604      	mov	r4, r0
   515b6:	b36b      	cbz	r3, 51614 <nrf_modem_at_printf+0x80>
   515b8:	4e18      	ldr	r6, [pc, #96]	; (5161c <nrf_modem_at_printf+0x88>)
   515ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   515be:	6830      	ldr	r0, [r6, #0]
   515c0:	f005 feaa 	bl	57318 <nrf_modem_os_sem_take>
   515c4:	4621      	mov	r1, r4
   515c6:	2302      	movs	r3, #2
   515c8:	2201      	movs	r2, #1
   515ca:	9801      	ldr	r0, [sp, #4]
   515cc:	f7ff ff60 	bl	51490 <at_cmd_send>
   515d0:	4604      	mov	r4, r0
   515d2:	b140      	cbz	r0, 515e6 <nrf_modem_at_printf+0x52>
   515d4:	6830      	ldr	r0, [r6, #0]
   515d6:	f005 fe9d 	bl	57314 <nrf_modem_os_sem_give>
   515da:	4620      	mov	r0, r4
   515dc:	b002      	add	sp, #8
   515de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   515e2:	b004      	add	sp, #16
   515e4:	4770      	bx	lr
   515e6:	4d0e      	ldr	r5, [pc, #56]	; (51620 <nrf_modem_at_printf+0x8c>)
   515e8:	682b      	ldr	r3, [r5, #0]
   515ea:	6818      	ldr	r0, [r3, #0]
   515ec:	f7ff ff88 	bl	51500 <at_response_match>
   515f0:	4604      	mov	r4, r0
   515f2:	6830      	ldr	r0, [r6, #0]
   515f4:	f005 fe8e 	bl	57314 <nrf_modem_os_sem_give>
   515f8:	682b      	ldr	r3, [r5, #0]
   515fa:	6818      	ldr	r0, [r3, #0]
   515fc:	f008 f9b1 	bl	59962 <rpc_client_msg_data_rx_free>
   51600:	6828      	ldr	r0, [r5, #0]
   51602:	f008 f9ab 	bl	5995c <rpc_client_msg_free>
   51606:	e7e8      	b.n	515da <nrf_modem_at_printf+0x46>
   51608:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   5160c:	e7e5      	b.n	515da <nrf_modem_at_printf+0x46>
   5160e:	f06f 040d 	mvn.w	r4, #13
   51612:	e7e2      	b.n	515da <nrf_modem_at_printf+0x46>
   51614:	f06f 040b 	mvn.w	r4, #11
   51618:	e7df      	b.n	515da <nrf_modem_at_printf+0x46>
   5161a:	bf00      	nop
   5161c:	2001bc24 	.word	0x2001bc24
   51620:	2001bc34 	.word	0x2001bc34

00051624 <nrf_modem_at_cmd>:
   51624:	b40c      	push	{r2, r3}
   51626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5162a:	b085      	sub	sp, #20
   5162c:	4606      	mov	r6, r0
   5162e:	460d      	mov	r5, r1
   51630:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   51632:	f000 fb63 	bl	51cfc <nrf_modem_state_is_initialized>
   51636:	2800      	cmp	r0, #0
   51638:	d07b      	beq.n	51732 <nrf_modem_at_cmd+0x10e>
   5163a:	2e00      	cmp	r6, #0
   5163c:	d07c      	beq.n	51738 <nrf_modem_at_cmd+0x114>
   5163e:	2c00      	cmp	r4, #0
   51640:	d07a      	beq.n	51738 <nrf_modem_at_cmd+0x114>
   51642:	2d00      	cmp	r5, #0
   51644:	d07b      	beq.n	5173e <nrf_modem_at_cmd+0x11a>
   51646:	aa0f      	add	r2, sp, #60	; 0x3c
   51648:	4621      	mov	r1, r4
   5164a:	a803      	add	r0, sp, #12
   5164c:	9202      	str	r2, [sp, #8]
   5164e:	f7ff ff7b 	bl	51548 <at_vsprintf>
   51652:	f8dd 900c 	ldr.w	r9, [sp, #12]
   51656:	4607      	mov	r7, r0
   51658:	f1b9 0f00 	cmp.w	r9, #0
   5165c:	d072      	beq.n	51744 <nrf_modem_at_cmd+0x120>
   5165e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 51750 <nrf_modem_at_cmd+0x12c>
   51662:	f8d8 3000 	ldr.w	r3, [r8]
   51666:	b1d3      	cbz	r3, 5169e <nrf_modem_at_cmd+0x7a>
   51668:	2400      	movs	r4, #0
   5166a:	f04f 0b0c 	mov.w	fp, #12
   5166e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 51754 <nrf_modem_at_cmd+0x130>
   51672:	f8da 3000 	ldr.w	r3, [sl]
   51676:	429c      	cmp	r4, r3
   51678:	d211      	bcs.n	5169e <nrf_modem_at_cmd+0x7a>
   5167a:	fb0b f204 	mul.w	r2, fp, r4
   5167e:	f8d8 3000 	ldr.w	r3, [r8]
   51682:	4648      	mov	r0, r9
   51684:	5899      	ldr	r1, [r3, r2]
   51686:	9201      	str	r2, [sp, #4]
   51688:	f009 fe68 	bl	5b35c <strstr>
   5168c:	b1e0      	cbz	r0, 516c8 <nrf_modem_at_cmd+0xa4>
   5168e:	9a01      	ldr	r2, [sp, #4]
   51690:	f8d8 3000 	ldr.w	r3, [r8]
   51694:	4413      	add	r3, r2
   51696:	7a1a      	ldrb	r2, [r3, #8]
   51698:	b9b2      	cbnz	r2, 516c8 <nrf_modem_at_cmd+0xa4>
   5169a:	685b      	ldr	r3, [r3, #4]
   5169c:	b9b3      	cbnz	r3, 516cc <nrf_modem_at_cmd+0xa8>
   5169e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 51758 <nrf_modem_at_cmd+0x134>
   516a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   516a6:	f8d8 0000 	ldr.w	r0, [r8]
   516aa:	f005 fe35 	bl	57318 <nrf_modem_os_sem_take>
   516ae:	2302      	movs	r3, #2
   516b0:	2201      	movs	r2, #1
   516b2:	4639      	mov	r1, r7
   516b4:	9803      	ldr	r0, [sp, #12]
   516b6:	f7ff feeb 	bl	51490 <at_cmd_send>
   516ba:	4604      	mov	r4, r0
   516bc:	b1c8      	cbz	r0, 516f2 <nrf_modem_at_cmd+0xce>
   516be:	f8d8 0000 	ldr.w	r0, [r8]
   516c2:	f005 fe27 	bl	57314 <nrf_modem_os_sem_give>
   516c6:	e00e      	b.n	516e6 <nrf_modem_at_cmd+0xc2>
   516c8:	3401      	adds	r4, #1
   516ca:	e7d2      	b.n	51672 <nrf_modem_at_cmd+0x4e>
   516cc:	4629      	mov	r1, r5
   516ce:	4630      	mov	r0, r6
   516d0:	9a03      	ldr	r2, [sp, #12]
   516d2:	4798      	blx	r3
   516d4:	4604      	mov	r4, r0
   516d6:	b918      	cbnz	r0, 516e0 <nrf_modem_at_cmd+0xbc>
   516d8:	4630      	mov	r0, r6
   516da:	f7ff ff11 	bl	51500 <at_response_match>
   516de:	4604      	mov	r4, r0
   516e0:	9803      	ldr	r0, [sp, #12]
   516e2:	f008 f942 	bl	5996a <rpc_client_msg_data_tx_free>
   516e6:	4620      	mov	r0, r4
   516e8:	b005      	add	sp, #20
   516ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   516ee:	b002      	add	sp, #8
   516f0:	4770      	bx	lr
   516f2:	4f16      	ldr	r7, [pc, #88]	; (5174c <nrf_modem_at_cmd+0x128>)
   516f4:	4630      	mov	r0, r6
   516f6:	683c      	ldr	r4, [r7, #0]
   516f8:	6862      	ldr	r2, [r4, #4]
   516fa:	6821      	ldr	r1, [r4, #0]
   516fc:	42aa      	cmp	r2, r5
   516fe:	bf28      	it	cs
   51700:	462a      	movcs	r2, r5
   51702:	f009 fbef 	bl	5aee4 <memcpy>
   51706:	6863      	ldr	r3, [r4, #4]
   51708:	42ab      	cmp	r3, r5
   5170a:	d80f      	bhi.n	5172c <nrf_modem_at_cmd+0x108>
   5170c:	6820      	ldr	r0, [r4, #0]
   5170e:	f7ff fef7 	bl	51500 <at_response_match>
   51712:	4604      	mov	r4, r0
   51714:	f8d8 0000 	ldr.w	r0, [r8]
   51718:	f005 fdfc 	bl	57314 <nrf_modem_os_sem_give>
   5171c:	683b      	ldr	r3, [r7, #0]
   5171e:	6818      	ldr	r0, [r3, #0]
   51720:	f008 f91f 	bl	59962 <rpc_client_msg_data_rx_free>
   51724:	6838      	ldr	r0, [r7, #0]
   51726:	f008 f919 	bl	5995c <rpc_client_msg_free>
   5172a:	e7dc      	b.n	516e6 <nrf_modem_at_cmd+0xc2>
   5172c:	f06f 0406 	mvn.w	r4, #6
   51730:	e7f0      	b.n	51714 <nrf_modem_at_cmd+0xf0>
   51732:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   51736:	e7d6      	b.n	516e6 <nrf_modem_at_cmd+0xc2>
   51738:	f06f 040d 	mvn.w	r4, #13
   5173c:	e7d3      	b.n	516e6 <nrf_modem_at_cmd+0xc2>
   5173e:	f06f 0415 	mvn.w	r4, #21
   51742:	e7d0      	b.n	516e6 <nrf_modem_at_cmd+0xc2>
   51744:	f06f 040b 	mvn.w	r4, #11
   51748:	e7cd      	b.n	516e6 <nrf_modem_at_cmd+0xc2>
   5174a:	bf00      	nop
   5174c:	2001bc34 	.word	0x2001bc34
   51750:	2001bc28 	.word	0x2001bc28
   51754:	2001bc2c 	.word	0x2001bc2c
   51758:	2001bc24 	.word	0x2001bc24

0005175c <nrf_modem_at_scanf>:
   5175c:	b40e      	push	{r1, r2, r3}
   5175e:	e92d 41f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, lr}
   51762:	9f09      	ldr	r7, [sp, #36]	; 0x24
   51764:	4604      	mov	r4, r0
   51766:	f000 fac9 	bl	51cfc <nrf_modem_state_is_initialized>
   5176a:	2800      	cmp	r0, #0
   5176c:	d03c      	beq.n	517e8 <nrf_modem_at_scanf+0x8c>
   5176e:	2c00      	cmp	r4, #0
   51770:	d03d      	beq.n	517ee <nrf_modem_at_scanf+0x92>
   51772:	2f00      	cmp	r7, #0
   51774:	d03b      	beq.n	517ee <nrf_modem_at_scanf+0x92>
   51776:	4620      	mov	r0, r4
   51778:	f7ef fb3c 	bl	40df4 <strlen>
   5177c:	1c46      	adds	r6, r0, #1
   5177e:	4630      	mov	r0, r6
   51780:	f008 f8f1 	bl	59966 <rpc_client_msg_data_tx_alloc>
   51784:	4605      	mov	r5, r0
   51786:	b3a8      	cbz	r0, 517f4 <nrf_modem_at_scanf+0x98>
   51788:	f8df 8074 	ldr.w	r8, [pc, #116]	; 51800 <nrf_modem_at_scanf+0xa4>
   5178c:	4621      	mov	r1, r4
   5178e:	f009 fd90 	bl	5b2b2 <strcpy>
   51792:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   51796:	f8d8 0000 	ldr.w	r0, [r8]
   5179a:	f005 fdbd 	bl	57318 <nrf_modem_os_sem_take>
   5179e:	2302      	movs	r3, #2
   517a0:	2201      	movs	r2, #1
   517a2:	4631      	mov	r1, r6
   517a4:	4628      	mov	r0, r5
   517a6:	f7ff fe73 	bl	51490 <at_cmd_send>
   517aa:	4604      	mov	r4, r0
   517ac:	b990      	cbnz	r0, 517d4 <nrf_modem_at_scanf+0x78>
   517ae:	4d13      	ldr	r5, [pc, #76]	; (517fc <nrf_modem_at_scanf+0xa0>)
   517b0:	aa0a      	add	r2, sp, #40	; 0x28
   517b2:	682b      	ldr	r3, [r5, #0]
   517b4:	4639      	mov	r1, r7
   517b6:	6818      	ldr	r0, [r3, #0]
   517b8:	9201      	str	r2, [sp, #4]
   517ba:	f002 fc39 	bl	54030 <vsiscanf>
   517be:	682b      	ldr	r3, [r5, #0]
   517c0:	1e04      	subs	r4, r0, #0
   517c2:	6818      	ldr	r0, [r3, #0]
   517c4:	bf08      	it	eq
   517c6:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   517ca:	f008 f8ca 	bl	59962 <rpc_client_msg_data_rx_free>
   517ce:	6828      	ldr	r0, [r5, #0]
   517d0:	f008 f8c4 	bl	5995c <rpc_client_msg_free>
   517d4:	f8d8 0000 	ldr.w	r0, [r8]
   517d8:	f005 fd9c 	bl	57314 <nrf_modem_os_sem_give>
   517dc:	4620      	mov	r0, r4
   517de:	b003      	add	sp, #12
   517e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   517e4:	b003      	add	sp, #12
   517e6:	4770      	bx	lr
   517e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   517ec:	e7f6      	b.n	517dc <nrf_modem_at_scanf+0x80>
   517ee:	f06f 040d 	mvn.w	r4, #13
   517f2:	e7f3      	b.n	517dc <nrf_modem_at_scanf+0x80>
   517f4:	f06f 040b 	mvn.w	r4, #11
   517f8:	e7f0      	b.n	517dc <nrf_modem_at_scanf+0x80>
   517fa:	bf00      	nop
   517fc:	2001bc34 	.word	0x2001bc34
   51800:	2001bc24 	.word	0x2001bc24

00051804 <rpc_at_event_handler>:
   51804:	b570      	push	{r4, r5, r6, lr}
   51806:	68c3      	ldr	r3, [r0, #12]
   51808:	4605      	mov	r5, r0
   5180a:	2ba7      	cmp	r3, #167	; 0xa7
   5180c:	d003      	beq.n	51816 <rpc_at_event_handler+0x12>
   5180e:	6828      	ldr	r0, [r5, #0]
   51810:	f008 f8a7 	bl	59962 <rpc_client_msg_data_rx_free>
   51814:	e008      	b.n	51828 <rpc_at_event_handler+0x24>
   51816:	2903      	cmp	r1, #3
   51818:	d008      	beq.n	5182c <rpc_at_event_handler+0x28>
   5181a:	2904      	cmp	r1, #4
   5181c:	d019      	beq.n	51852 <rpc_at_event_handler+0x4e>
   5181e:	2902      	cmp	r1, #2
   51820:	d102      	bne.n	51828 <rpc_at_event_handler+0x24>
   51822:	2201      	movs	r2, #1
   51824:	4b0e      	ldr	r3, [pc, #56]	; (51860 <rpc_at_event_handler+0x5c>)
   51826:	701a      	strb	r2, [r3, #0]
   51828:	2000      	movs	r0, #0
   5182a:	e00a      	b.n	51842 <rpc_at_event_handler+0x3e>
   5182c:	4e0d      	ldr	r6, [pc, #52]	; (51864 <rpc_at_event_handler+0x60>)
   5182e:	6833      	ldr	r3, [r6, #0]
   51830:	b143      	cbz	r3, 51844 <rpc_at_event_handler+0x40>
   51832:	2400      	movs	r4, #0
   51834:	6800      	ldr	r0, [r0, #0]
   51836:	4798      	blx	r3
   51838:	6828      	ldr	r0, [r5, #0]
   5183a:	6034      	str	r4, [r6, #0]
   5183c:	f008 f891 	bl	59962 <rpc_client_msg_data_rx_free>
   51840:	b2e0      	uxtb	r0, r4
   51842:	bd70      	pop	{r4, r5, r6, pc}
   51844:	2202      	movs	r2, #2
   51846:	4b08      	ldr	r3, [pc, #32]	; (51868 <rpc_at_event_handler+0x64>)
   51848:	2401      	movs	r4, #1
   5184a:	6018      	str	r0, [r3, #0]
   5184c:	4b04      	ldr	r3, [pc, #16]	; (51860 <rpc_at_event_handler+0x5c>)
   5184e:	701a      	strb	r2, [r3, #0]
   51850:	e7f6      	b.n	51840 <rpc_at_event_handler+0x3c>
   51852:	4b06      	ldr	r3, [pc, #24]	; (5186c <rpc_at_event_handler+0x68>)
   51854:	681b      	ldr	r3, [r3, #0]
   51856:	2b00      	cmp	r3, #0
   51858:	d0d9      	beq.n	5180e <rpc_at_event_handler+0xa>
   5185a:	6800      	ldr	r0, [r0, #0]
   5185c:	4798      	blx	r3
   5185e:	e7d6      	b.n	5180e <rpc_at_event_handler+0xa>
   51860:	20020634 	.word	0x20020634
   51864:	2001bc38 	.word	0x2001bc38
   51868:	2001bc34 	.word	0x2001bc34
   5186c:	2001bc30 	.word	0x2001bc30

00051870 <rpc_at_init>:
   51870:	2201      	movs	r2, #1
   51872:	b510      	push	{r4, lr}
   51874:	4611      	mov	r1, r2
   51876:	4807      	ldr	r0, [pc, #28]	; (51894 <rpc_at_init+0x24>)
   51878:	f7f8 f9e4 	bl	49c44 <nrf_modem_os_sem_init>
   5187c:	4601      	mov	r1, r0
   5187e:	b928      	cbnz	r0, 5188c <rpc_at_init+0x1c>
   51880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   51884:	2301      	movs	r3, #1
   51886:	2205      	movs	r2, #5
   51888:	f7ff be02 	b.w	51490 <at_cmd_send>
   5188c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   51890:	bd10      	pop	{r4, pc}
   51892:	bf00      	nop
   51894:	2001bc24 	.word	0x2001bc24

00051898 <rpc_gnss_event_handler>:
   51898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   5189c:	6804      	ldr	r4, [r0, #0]
   5189e:	4607      	mov	r7, r0
   518a0:	460d      	mov	r5, r1
   518a2:	2c00      	cmp	r4, #0
   518a4:	f000 8086 	beq.w	519b4 <rpc_gnss_event_handler+0x11c>
   518a8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   518ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   518b0:	d142      	bne.n	51938 <rpc_gnss_event_handler+0xa0>
   518b2:	f8df 819c 	ldr.w	r8, [pc, #412]	; 51a50 <rpc_gnss_event_handler+0x1b8>
   518b6:	f898 3000 	ldrb.w	r3, [r8]
   518ba:	2b01      	cmp	r3, #1
   518bc:	d131      	bne.n	51922 <rpc_gnss_event_handler+0x8a>
   518be:	4b5c      	ldr	r3, [pc, #368]	; (51a30 <rpc_gnss_event_handler+0x198>)
   518c0:	6822      	ldr	r2, [r4, #0]
   518c2:	881b      	ldrh	r3, [r3, #0]
   518c4:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   518c8:	d12b      	bne.n	51922 <rpc_gnss_event_handler+0x8a>
   518ca:	6863      	ldr	r3, [r4, #4]
   518cc:	bb6b      	cbnz	r3, 5192a <rpc_gnss_event_handler+0x92>
   518ce:	4b59      	ldr	r3, [pc, #356]	; (51a34 <rpc_gnss_event_handler+0x19c>)
   518d0:	681e      	ldr	r6, [r3, #0]
   518d2:	b31e      	cbz	r6, 5191c <rpc_gnss_event_handler+0x84>
   518d4:	f242 0309 	movw	r3, #8201	; 0x2009
   518d8:	4299      	cmp	r1, r3
   518da:	d11f      	bne.n	5191c <rpc_gnss_event_handler+0x84>
   518dc:	4630      	mov	r0, r6
   518de:	8923      	ldrh	r3, [r4, #8]
   518e0:	2280      	movs	r2, #128	; 0x80
   518e2:	f840 3b04 	str.w	r3, [r0], #4
   518e6:	f104 010a 	add.w	r1, r4, #10
   518ea:	f009 fafb 	bl	5aee4 <memcpy>
   518ee:	2280      	movs	r2, #128	; 0x80
   518f0:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   518f4:	f106 0084 	add.w	r0, r6, #132	; 0x84
   518f8:	f009 faf4 	bl	5aee4 <memcpy>
   518fc:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   51900:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   51904:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   51908:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   5190c:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   51910:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   51914:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   51918:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   5191c:	2300      	movs	r3, #0
   5191e:	f888 3000 	strb.w	r3, [r8]
   51922:	6838      	ldr	r0, [r7, #0]
   51924:	f008 f81d 	bl	59962 <rpc_client_msg_data_rx_free>
   51928:	e044      	b.n	519b4 <rpc_gnss_event_handler+0x11c>
   5192a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   5192e:	4293      	cmp	r3, r2
   51930:	bf0c      	ite	eq
   51932:	2303      	moveq	r3, #3
   51934:	2302      	movne	r3, #2
   51936:	e7f2      	b.n	5191e <rpc_gnss_event_handler+0x86>
   51938:	4e3f      	ldr	r6, [pc, #252]	; (51a38 <rpc_gnss_event_handler+0x1a0>)
   5193a:	6833      	ldr	r3, [r6, #0]
   5193c:	2b00      	cmp	r3, #0
   5193e:	d0f0      	beq.n	51922 <rpc_gnss_event_handler+0x8a>
   51940:	f244 0204 	movw	r2, #16388	; 0x4004
   51944:	4291      	cmp	r1, r2
   51946:	d80b      	bhi.n	51960 <rpc_gnss_event_handler+0xc8>
   51948:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   5194c:	d9e9      	bls.n	51922 <rpc_gnss_event_handler+0x8a>
   5194e:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   51952:	3a02      	subs	r2, #2
   51954:	2a02      	cmp	r2, #2
   51956:	d80b      	bhi.n	51970 <rpc_gnss_event_handler+0xd8>
   51958:	e8df f002 	tbb	[pc, r2]
   5195c:	4f45      	.short	0x4f45
   5195e:	59          	.byte	0x59
   5195f:	00          	.byte	0x00
   51960:	f244 1301 	movw	r3, #16641	; 0x4101
   51964:	4299      	cmp	r1, r3
   51966:	d003      	beq.n	51970 <rpc_gnss_event_handler+0xd8>
   51968:	f244 2301 	movw	r3, #16897	; 0x4201
   5196c:	4299      	cmp	r1, r3
   5196e:	d1d8      	bne.n	51922 <rpc_gnss_event_handler+0x8a>
   51970:	4f32      	ldr	r7, [pc, #200]	; (51a3c <rpc_gnss_event_handler+0x1a4>)
   51972:	6838      	ldr	r0, [r7, #0]
   51974:	b108      	cbz	r0, 5197a <rpc_gnss_event_handler+0xe2>
   51976:	f007 fff4 	bl	59962 <rpc_client_msg_data_rx_free>
   5197a:	f244 2301 	movw	r3, #16897	; 0x4201
   5197e:	429d      	cmp	r5, r3
   51980:	4b2f      	ldr	r3, [pc, #188]	; (51a40 <rpc_gnss_event_handler+0x1a8>)
   51982:	d11a      	bne.n	519ba <rpc_gnss_event_handler+0x122>
   51984:	2202      	movs	r2, #2
   51986:	603c      	str	r4, [r7, #0]
   51988:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   5198c:	701a      	strb	r2, [r3, #0]
   5198e:	4d2d      	ldr	r5, [pc, #180]	; (51a44 <rpc_gnss_event_handler+0x1ac>)
   51990:	f014 0708 	ands.w	r7, r4, #8
   51994:	6833      	ldr	r3, [r6, #0]
   51996:	782a      	ldrb	r2, [r5, #0]
   51998:	d01f      	beq.n	519da <rpc_gnss_event_handler+0x142>
   5199a:	b91a      	cbnz	r2, 519a4 <rpc_gnss_event_handler+0x10c>
   5199c:	2005      	movs	r0, #5
   5199e:	4798      	blx	r3
   519a0:	2301      	movs	r3, #1
   519a2:	702b      	strb	r3, [r5, #0]
   519a4:	07e3      	lsls	r3, r4, #31
   519a6:	d502      	bpl.n	519ae <rpc_gnss_event_handler+0x116>
   519a8:	2002      	movs	r0, #2
   519aa:	6833      	ldr	r3, [r6, #0]
   519ac:	4798      	blx	r3
   519ae:	2001      	movs	r0, #1
   519b0:	6833      	ldr	r3, [r6, #0]
   519b2:	4798      	blx	r3
   519b4:	2000      	movs	r0, #0
   519b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   519ba:	f244 1201 	movw	r2, #16641	; 0x4101
   519be:	4295      	cmp	r5, r2
   519c0:	bf0b      	itete	eq
   519c2:	2201      	moveq	r2, #1
   519c4:	2200      	movne	r2, #0
   519c6:	603c      	streq	r4, [r7, #0]
   519c8:	603c      	strne	r4, [r7, #0]
   519ca:	bf0b      	itete	eq
   519cc:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   519d0:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   519d4:	701a      	strbeq	r2, [r3, #0]
   519d6:	701a      	strbne	r2, [r3, #0]
   519d8:	e7d9      	b.n	5198e <rpc_gnss_event_handler+0xf6>
   519da:	2a00      	cmp	r2, #0
   519dc:	d0e2      	beq.n	519a4 <rpc_gnss_event_handler+0x10c>
   519de:	2006      	movs	r0, #6
   519e0:	4798      	blx	r3
   519e2:	702f      	strb	r7, [r5, #0]
   519e4:	e7de      	b.n	519a4 <rpc_gnss_event_handler+0x10c>
   519e6:	4c18      	ldr	r4, [pc, #96]	; (51a48 <rpc_gnss_event_handler+0x1b0>)
   519e8:	6820      	ldr	r0, [r4, #0]
   519ea:	b108      	cbz	r0, 519f0 <rpc_gnss_event_handler+0x158>
   519ec:	f007 ffb9 	bl	59962 <rpc_client_msg_data_rx_free>
   519f0:	683b      	ldr	r3, [r7, #0]
   519f2:	2003      	movs	r0, #3
   519f4:	6023      	str	r3, [r4, #0]
   519f6:	6833      	ldr	r3, [r6, #0]
   519f8:	e7db      	b.n	519b2 <rpc_gnss_event_handler+0x11a>
   519fa:	4c14      	ldr	r4, [pc, #80]	; (51a4c <rpc_gnss_event_handler+0x1b4>)
   519fc:	6820      	ldr	r0, [r4, #0]
   519fe:	b108      	cbz	r0, 51a04 <rpc_gnss_event_handler+0x16c>
   51a00:	f007 ffaf 	bl	59962 <rpc_client_msg_data_rx_free>
   51a04:	683b      	ldr	r3, [r7, #0]
   51a06:	2004      	movs	r0, #4
   51a08:	6023      	str	r3, [r4, #0]
   51a0a:	6833      	ldr	r3, [r6, #0]
   51a0c:	e7d1      	b.n	519b2 <rpc_gnss_event_handler+0x11a>
   51a0e:	7822      	ldrb	r2, [r4, #0]
   51a10:	2a03      	cmp	r2, #3
   51a12:	d886      	bhi.n	51922 <rpc_gnss_event_handler+0x8a>
   51a14:	e8df f002 	tbb	[pc, r2]
   51a18:	09070502 	.word	0x09070502
   51a1c:	2007      	movs	r0, #7
   51a1e:	4798      	blx	r3
   51a20:	e77f      	b.n	51922 <rpc_gnss_event_handler+0x8a>
   51a22:	2008      	movs	r0, #8
   51a24:	e7fb      	b.n	51a1e <rpc_gnss_event_handler+0x186>
   51a26:	2009      	movs	r0, #9
   51a28:	e7f9      	b.n	51a1e <rpc_gnss_event_handler+0x186>
   51a2a:	200a      	movs	r0, #10
   51a2c:	e7f7      	b.n	51a1e <rpc_gnss_event_handler+0x186>
   51a2e:	bf00      	nop
   51a30:	2001bed4 	.word	0x2001bed4
   51a34:	2001bc4c 	.word	0x2001bc4c
   51a38:	2001bc40 	.word	0x2001bc40
   51a3c:	2001bc48 	.word	0x2001bc48
   51a40:	20020636 	.word	0x20020636
   51a44:	20020635 	.word	0x20020635
   51a48:	2001bc44 	.word	0x2001bc44
   51a4c:	2001bc3c 	.word	0x2001bc3c
   51a50:	20020637 	.word	0x20020637

00051a54 <rpc_gnss_init>:
   51a54:	2000      	movs	r0, #0
   51a56:	4b08      	ldr	r3, [pc, #32]	; (51a78 <rpc_gnss_init+0x24>)
   51a58:	8018      	strh	r0, [r3, #0]
   51a5a:	4b08      	ldr	r3, [pc, #32]	; (51a7c <rpc_gnss_init+0x28>)
   51a5c:	7018      	strb	r0, [r3, #0]
   51a5e:	4b08      	ldr	r3, [pc, #32]	; (51a80 <rpc_gnss_init+0x2c>)
   51a60:	7018      	strb	r0, [r3, #0]
   51a62:	4b08      	ldr	r3, [pc, #32]	; (51a84 <rpc_gnss_init+0x30>)
   51a64:	7018      	strb	r0, [r3, #0]
   51a66:	4b08      	ldr	r3, [pc, #32]	; (51a88 <rpc_gnss_init+0x34>)
   51a68:	7018      	strb	r0, [r3, #0]
   51a6a:	4b08      	ldr	r3, [pc, #32]	; (51a8c <rpc_gnss_init+0x38>)
   51a6c:	7018      	strb	r0, [r3, #0]
   51a6e:	4b08      	ldr	r3, [pc, #32]	; (51a90 <rpc_gnss_init+0x3c>)
   51a70:	6018      	str	r0, [r3, #0]
   51a72:	4b08      	ldr	r3, [pc, #32]	; (51a94 <rpc_gnss_init+0x40>)
   51a74:	6018      	str	r0, [r3, #0]
   51a76:	4770      	bx	lr
   51a78:	2001bed4 	.word	0x2001bed4
   51a7c:	20020639 	.word	0x20020639
   51a80:	20020637 	.word	0x20020637
   51a84:	20020635 	.word	0x20020635
   51a88:	20020638 	.word	0x20020638
   51a8c:	20020636 	.word	0x20020636
   51a90:	2001bc4c 	.word	0x2001bc4c
   51a94:	2001bc40 	.word	0x2001bc40

00051a98 <full_dfu_ipc_irq_handler>:
   51a98:	b510      	push	{r4, lr}
   51a9a:	4604      	mov	r4, r0
   51a9c:	4b04      	ldr	r3, [pc, #16]	; (51ab0 <full_dfu_ipc_irq_handler+0x18>)
   51a9e:	6818      	ldr	r0, [r3, #0]
   51aa0:	f005 fc38 	bl	57314 <nrf_modem_os_sem_give>
   51aa4:	b914      	cbnz	r4, 51aac <full_dfu_ipc_irq_handler+0x14>
   51aa6:	2201      	movs	r2, #1
   51aa8:	4b02      	ldr	r3, [pc, #8]	; (51ab4 <full_dfu_ipc_irq_handler+0x1c>)
   51aaa:	701a      	strb	r2, [r3, #0]
   51aac:	bd10      	pop	{r4, pc}
   51aae:	bf00      	nop
   51ab0:	2001bc50 	.word	0x2001bc50
   51ab4:	2002063a 	.word	0x2002063a

00051ab8 <modem_ipc_wait_for_event>:
   51ab8:	b508      	push	{r3, lr}
   51aba:	4b08      	ldr	r3, [pc, #32]	; (51adc <modem_ipc_wait_for_event+0x24>)
   51abc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   51ac0:	6818      	ldr	r0, [r3, #0]
   51ac2:	f005 fc29 	bl	57318 <nrf_modem_os_sem_take>
   51ac6:	b930      	cbnz	r0, 51ad6 <modem_ipc_wait_for_event+0x1e>
   51ac8:	4b05      	ldr	r3, [pc, #20]	; (51ae0 <modem_ipc_wait_for_event+0x28>)
   51aca:	781b      	ldrb	r3, [r3, #0]
   51acc:	2b01      	cmp	r3, #1
   51ace:	bf08      	it	eq
   51ad0:	f06f 0004 	mvneq.w	r0, #4
   51ad4:	bd08      	pop	{r3, pc}
   51ad6:	f06f 0073 	mvn.w	r0, #115	; 0x73
   51ada:	e7fb      	b.n	51ad4 <modem_ipc_wait_for_event+0x1c>
   51adc:	2001bc50 	.word	0x2001bc50
   51ae0:	2002063a 	.word	0x2002063a

00051ae4 <nrf_modem_full_dfu_setup>:
   51ae4:	2200      	movs	r2, #0
   51ae6:	2300      	movs	r3, #0
   51ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   51aea:	4d2e      	ldr	r5, [pc, #184]	; (51ba4 <nrf_modem_full_dfu_setup+0xc0>)
   51aec:	4f2e      	ldr	r7, [pc, #184]	; (51ba8 <nrf_modem_full_dfu_setup+0xc4>)
   51aee:	e9c5 2302 	strd	r2, r3, [r5, #8]
   51af2:	e9c5 2304 	strd	r2, r3, [r5, #16]
   51af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   51afa:	4b2c      	ldr	r3, [pc, #176]	; (51bac <nrf_modem_full_dfu_setup+0xc8>)
   51afc:	2400      	movs	r4, #0
   51afe:	601a      	str	r2, [r3, #0]
   51b00:	f100 031c 	add.w	r3, r0, #28
   51b04:	603b      	str	r3, [r7, #0]
   51b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   51b0a:	6043      	str	r3, [r0, #4]
   51b0c:	231c      	movs	r3, #28
   51b0e:	7203      	strb	r3, [r0, #8]
   51b10:	2320      	movs	r3, #32
   51b12:	2601      	movs	r6, #1
   51b14:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   51b18:	468c      	mov	ip, r1
   51b1a:	7243      	strb	r3, [r0, #9]
   51b1c:	4b24      	ldr	r3, [pc, #144]	; (51bb0 <nrf_modem_full_dfu_setup+0xcc>)
   51b1e:	7004      	strb	r4, [r0, #0]
   51b20:	7044      	strb	r4, [r0, #1]
   51b22:	70c2      	strb	r2, [r0, #3]
   51b24:	7284      	strb	r4, [r0, #10]
   51b26:	72c4      	strb	r4, [r0, #11]
   51b28:	7086      	strb	r6, [r0, #2]
   51b2a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   51b2e:	702c      	strb	r4, [r5, #0]
   51b30:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   51b34:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   51b38:	4b1e      	ldr	r3, [pc, #120]	; (51bb4 <nrf_modem_full_dfu_setup+0xd0>)
   51b3a:	b093      	sub	sp, #76	; 0x4c
   51b3c:	fa5f f08c 	uxtb.w	r0, ip
   51b40:	4622      	mov	r2, r4
   51b42:	491d      	ldr	r1, [pc, #116]	; (51bb8 <nrf_modem_full_dfu_setup+0xd4>)
   51b44:	701c      	strb	r4, [r3, #0]
   51b46:	f7fe f83d 	bl	4fbc4 <nrfx_ipc_init>
   51b4a:	4621      	mov	r1, r4
   51b4c:	2240      	movs	r2, #64	; 0x40
   51b4e:	a801      	add	r0, sp, #4
   51b50:	f009 fa02 	bl	5af58 <memset>
   51b54:	2302      	movs	r3, #2
   51b56:	9302      	str	r3, [sp, #8]
   51b58:	2304      	movs	r3, #4
   51b5a:	930b      	str	r3, [sp, #44]	; 0x2c
   51b5c:	2305      	movs	r3, #5
   51b5e:	a801      	add	r0, sp, #4
   51b60:	9311      	str	r3, [sp, #68]	; 0x44
   51b62:	9609      	str	r6, [sp, #36]	; 0x24
   51b64:	f7fe f846 	bl	4fbf4 <nrfx_ipc_config_load>
   51b68:	4621      	mov	r1, r4
   51b6a:	4632      	mov	r2, r6
   51b6c:	4813      	ldr	r0, [pc, #76]	; (51bbc <nrf_modem_full_dfu_setup+0xd8>)
   51b6e:	683f      	ldr	r7, [r7, #0]
   51b70:	f7f8 f868 	bl	49c44 <nrf_modem_os_sem_init>
   51b74:	4b12      	ldr	r3, [pc, #72]	; (51bc0 <nrf_modem_full_dfu_setup+0xdc>)
   51b76:	9400      	str	r4, [sp, #0]
   51b78:	611c      	str	r4, [r3, #16]
   51b7a:	691b      	ldr	r3, [r3, #16]
   51b7c:	9300      	str	r3, [sp, #0]
   51b7e:	9b00      	ldr	r3, [sp, #0]
   51b80:	f7ff ff9a 	bl	51ab8 <modem_ipc_wait_for_event>
   51b84:	4604      	mov	r4, r0
   51b86:	b130      	cbz	r0, 51b96 <nrf_modem_full_dfu_setup+0xb2>
   51b88:	2303      	movs	r3, #3
   51b8a:	702b      	strb	r3, [r5, #0]
   51b8c:	f7fe f852 	bl	4fc34 <nrfx_ipc_uninit>
   51b90:	4620      	mov	r0, r4
   51b92:	b013      	add	sp, #76	; 0x4c
   51b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   51b96:	683a      	ldr	r2, [r7, #0]
   51b98:	4b0a      	ldr	r3, [pc, #40]	; (51bc4 <nrf_modem_full_dfu_setup+0xe0>)
   51b9a:	429a      	cmp	r2, r3
   51b9c:	d0f8      	beq.n	51b90 <nrf_modem_full_dfu_setup+0xac>
   51b9e:	f06f 0404 	mvn.w	r4, #4
   51ba2:	e7f3      	b.n	51b8c <nrf_modem_full_dfu_setup+0xa8>
   51ba4:	2001add8 	.word	0x2001add8
   51ba8:	2001bc54 	.word	0x2001bc54
   51bac:	2001bc58 	.word	0x2001bc58
   51bb0:	4002a000 	.word	0x4002a000
   51bb4:	2002063a 	.word	0x2002063a
   51bb8:	00051a99 	.word	0x00051a99
   51bbc:	2001bc50 	.word	0x2001bc50
   51bc0:	40005600 	.word	0x40005600
   51bc4:	a5000001 	.word	0xa5000001

00051bc8 <modem_off>:
   51bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   51bca:	2501      	movs	r5, #1
   51bcc:	4c07      	ldr	r4, [pc, #28]	; (51bec <modem_off+0x24>)
   51bce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   51bd2:	6165      	str	r5, [r4, #20]
   51bd4:	f005 fb94 	bl	57300 <nrf_modem_os_busywait>
   51bd8:	2300      	movs	r3, #0
   51bda:	6163      	str	r3, [r4, #20]
   51bdc:	9301      	str	r3, [sp, #4]
   51bde:	6125      	str	r5, [r4, #16]
   51be0:	6923      	ldr	r3, [r4, #16]
   51be2:	9301      	str	r3, [sp, #4]
   51be4:	9b01      	ldr	r3, [sp, #4]
   51be6:	b003      	add	sp, #12
   51be8:	bd30      	pop	{r4, r5, pc}
   51bea:	bf00      	nop
   51bec:	40005600 	.word	0x40005600

00051bf0 <nrf_modem_init>:
   51bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   51bf2:	460d      	mov	r5, r1
   51bf4:	4606      	mov	r6, r0
   51bf6:	2800      	cmp	r0, #0
   51bf8:	d057      	beq.n	51caa <nrf_modem_init+0xba>
   51bfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
   51bfc:	2b00      	cmp	r3, #0
   51bfe:	d057      	beq.n	51cb0 <nrf_modem_init+0xc0>
   51c00:	2301      	movs	r3, #1
   51c02:	4c2e      	ldr	r4, [pc, #184]	; (51cbc <nrf_modem_init+0xcc>)
   51c04:	e8d4 2fef 	ldaex	r2, [r4]
   51c08:	2a00      	cmp	r2, #0
   51c0a:	d103      	bne.n	51c14 <nrf_modem_init+0x24>
   51c0c:	e8c4 3fe1 	stlex	r1, r3, [r4]
   51c10:	2900      	cmp	r1, #0
   51c12:	d1f7      	bne.n	51c04 <nrf_modem_init+0x14>
   51c14:	d14f      	bne.n	51cb6 <nrf_modem_init+0xc6>
   51c16:	6a70      	ldr	r0, [r6, #36]	; 0x24
   51c18:	f000 f854 	bl	51cc4 <nrf_modem_fault_handler_set>
   51c1c:	2d01      	cmp	r5, #1
   51c1e:	d023      	beq.n	51c68 <nrf_modem_init+0x78>
   51c20:	f7f8 f85e 	bl	49ce0 <nrf_modem_os_init>
   51c24:	6a33      	ldr	r3, [r6, #32]
   51c26:	4668      	mov	r0, sp
   51c28:	9600      	str	r6, [sp, #0]
   51c2a:	f88d 3004 	strb.w	r3, [sp, #4]
   51c2e:	f7fe fa41 	bl	500b4 <rpc_init>
   51c32:	4606      	mov	r6, r0
   51c34:	bb78      	cbnz	r0, 51c96 <nrf_modem_init+0xa6>
   51c36:	f7ff fe1b 	bl	51870 <rpc_at_init>
   51c3a:	4606      	mov	r6, r0
   51c3c:	bb58      	cbnz	r0, 51c96 <nrf_modem_init+0xa6>
   51c3e:	f7ff fb25 	bl	5128c <rpc_ip_init>
   51c42:	4606      	mov	r6, r0
   51c44:	bb38      	cbnz	r0, 51c96 <nrf_modem_init+0xa6>
   51c46:	f7ff ff05 	bl	51a54 <rpc_gnss_init>
   51c4a:	4606      	mov	r6, r0
   51c4c:	bb18      	cbnz	r0, 51c96 <nrf_modem_init+0xa6>
   51c4e:	4b1c      	ldr	r3, [pc, #112]	; (51cc0 <nrf_modem_init+0xd0>)
   51c50:	701d      	strb	r5, [r3, #0]
   51c52:	2302      	movs	r3, #2
   51c54:	e8d4 2fef 	ldaex	r2, [r4]
   51c58:	e8c4 3fe1 	stlex	r1, r3, [r4]
   51c5c:	2900      	cmp	r1, #0
   51c5e:	d1f9      	bne.n	51c54 <nrf_modem_init+0x64>
   51c60:	2600      	movs	r6, #0
   51c62:	4630      	mov	r0, r6
   51c64:	b002      	add	sp, #8
   51c66:	bd70      	pop	{r4, r5, r6, pc}
   51c68:	69f2      	ldr	r2, [r6, #28]
   51c6a:	6873      	ldr	r3, [r6, #4]
   51c6c:	4413      	add	r3, r2
   51c6e:	68f2      	ldr	r2, [r6, #12]
   51c70:	4413      	add	r3, r2
   51c72:	6972      	ldr	r2, [r6, #20]
   51c74:	4413      	add	r3, r2
   51c76:	f242 021b 	movw	r2, #8219	; 0x201b
   51c7a:	4293      	cmp	r3, r2
   51c7c:	d909      	bls.n	51c92 <nrf_modem_init+0xa2>
   51c7e:	6a31      	ldr	r1, [r6, #32]
   51c80:	6830      	ldr	r0, [r6, #0]
   51c82:	f7ff ff2f 	bl	51ae4 <nrf_modem_full_dfu_setup>
   51c86:	4606      	mov	r6, r0
   51c88:	b928      	cbnz	r0, 51c96 <nrf_modem_init+0xa6>
   51c8a:	2002      	movs	r0, #2
   51c8c:	f000 f830 	bl	51cf0 <nrf_modem_state_set>
   51c90:	e7dd      	b.n	51c4e <nrf_modem_init+0x5e>
   51c92:	f06f 060b 	mvn.w	r6, #11
   51c96:	f7ff ff97 	bl	51bc8 <modem_off>
   51c9a:	2300      	movs	r3, #0
   51c9c:	e8d4 2fef 	ldaex	r2, [r4]
   51ca0:	e8c4 3fe1 	stlex	r1, r3, [r4]
   51ca4:	2900      	cmp	r1, #0
   51ca6:	d0dc      	beq.n	51c62 <nrf_modem_init+0x72>
   51ca8:	e7f8      	b.n	51c9c <nrf_modem_init+0xac>
   51caa:	f06f 060d 	mvn.w	r6, #13
   51cae:	e7d8      	b.n	51c62 <nrf_modem_init+0x72>
   51cb0:	f06f 0615 	mvn.w	r6, #21
   51cb4:	e7d5      	b.n	51c62 <nrf_modem_init+0x72>
   51cb6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   51cba:	e7d2      	b.n	51c62 <nrf_modem_init+0x72>
   51cbc:	2001bc5c 	.word	0x2001bc5c
   51cc0:	2002063b 	.word	0x2002063b

00051cc4 <nrf_modem_fault_handler_set>:
   51cc4:	4b01      	ldr	r3, [pc, #4]	; (51ccc <nrf_modem_fault_handler_set+0x8>)
   51cc6:	6018      	str	r0, [r3, #0]
   51cc8:	4770      	bx	lr
   51cca:	bf00      	nop
   51ccc:	2001bc60 	.word	0x2001bc60

00051cd0 <nrf_modem_fault_handler_internal>:
   51cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   51cd2:	460c      	mov	r4, r1
   51cd4:	4605      	mov	r5, r0
   51cd6:	2003      	movs	r0, #3
   51cd8:	f000 f80a 	bl	51cf0 <nrf_modem_state_set>
   51cdc:	4b03      	ldr	r3, [pc, #12]	; (51cec <nrf_modem_fault_handler_internal+0x1c>)
   51cde:	4668      	mov	r0, sp
   51ce0:	e9cd 5400 	strd	r5, r4, [sp]
   51ce4:	681b      	ldr	r3, [r3, #0]
   51ce6:	4798      	blx	r3
   51ce8:	b003      	add	sp, #12
   51cea:	bd30      	pop	{r4, r5, pc}
   51cec:	2001bc60 	.word	0x2001bc60

00051cf0 <nrf_modem_state_set>:
   51cf0:	4b01      	ldr	r3, [pc, #4]	; (51cf8 <nrf_modem_state_set+0x8>)
   51cf2:	7018      	strb	r0, [r3, #0]
   51cf4:	4770      	bx	lr
   51cf6:	bf00      	nop
   51cf8:	2002063c 	.word	0x2002063c

00051cfc <nrf_modem_state_is_initialized>:
   51cfc:	4b02      	ldr	r3, [pc, #8]	; (51d08 <nrf_modem_state_is_initialized+0xc>)
   51cfe:	7818      	ldrb	r0, [r3, #0]
   51d00:	1e43      	subs	r3, r0, #1
   51d02:	4258      	negs	r0, r3
   51d04:	4158      	adcs	r0, r3
   51d06:	4770      	bx	lr
   51d08:	2002063c 	.word	0x2002063c

00051d0c <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
   51d0c:	4b02      	ldr	r3, [pc, #8]	; (51d18 <mbedtls_platform_set_calloc_free+0xc>)
   51d0e:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
   51d10:	4b02      	ldr	r3, [pc, #8]	; (51d1c <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
   51d12:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
   51d14:	6019      	str	r1, [r3, #0]
}
   51d16:	4770      	bx	lr
   51d18:	2001a824 	.word	0x2001a824
   51d1c:	2001a820 	.word	0x2001a820

00051d20 <_heap_init>:
 *
 * Not static in order to allow extern use.
 */
void _heap_init(void)
{
	mbedtls_memory_buffer_alloc_init(mbedtls_heap, sizeof(mbedtls_heap));
   51d20:	f44f 7100 	mov.w	r1, #512	; 0x200
   51d24:	4801      	ldr	r0, [pc, #4]	; (51d2c <_heap_init+0xc>)
   51d26:	f000 b935 	b.w	51f94 <mbedtls_memory_buffer_alloc_init>
   51d2a:	bf00      	nop
   51d2c:	2002063d 	.word	0x2002063d

00051d30 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
   51d30:	6801      	ldr	r1, [r0, #0]
   51d32:	4a0e      	ldr	r2, [pc, #56]	; (51d6c <verify_header+0x3c>)
{
   51d34:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
   51d36:	4291      	cmp	r1, r2
   51d38:	d115      	bne.n	51d66 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
   51d3a:	69c1      	ldr	r1, [r0, #28]
   51d3c:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
   51d40:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
   51d44:	4291      	cmp	r1, r2
   51d46:	d10e      	bne.n	51d66 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
   51d48:	6882      	ldr	r2, [r0, #8]
   51d4a:	2a01      	cmp	r2, #1
   51d4c:	d80b      	bhi.n	51d66 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
   51d4e:	68c2      	ldr	r2, [r0, #12]
   51d50:	b112      	cbz	r2, 51d58 <verify_header+0x28>
   51d52:	6901      	ldr	r1, [r0, #16]
   51d54:	428a      	cmp	r2, r1
   51d56:	d006      	beq.n	51d66 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
   51d58:	6958      	ldr	r0, [r3, #20]
   51d5a:	b128      	cbz	r0, 51d68 <verify_header+0x38>
   51d5c:	699b      	ldr	r3, [r3, #24]
   51d5e:	1a1b      	subs	r3, r3, r0
   51d60:	4258      	negs	r0, r3
   51d62:	4158      	adcs	r0, r3
   51d64:	4770      	bx	lr
        return( 1 );
   51d66:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
   51d68:	4770      	bx	lr
   51d6a:	bf00      	nop
   51d6c:	ff00aa55 	.word	0xff00aa55

00051d70 <verify_chain>:

static int verify_chain( void )
{
   51d70:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
   51d72:	4b0d      	ldr	r3, [pc, #52]	; (51da8 <verify_chain+0x38>)
   51d74:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
   51d76:	b1a6      	cbz	r6, 51da2 <verify_chain+0x32>
   51d78:	4630      	mov	r0, r6
   51d7a:	f7ff ffd9 	bl	51d30 <verify_header>
   51d7e:	4604      	mov	r4, r0
   51d80:	b978      	cbnz	r0, 51da2 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
   51d82:	68f3      	ldr	r3, [r6, #12]
   51d84:	b96b      	cbnz	r3, 51da2 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
   51d86:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
   51d88:	b90d      	cbnz	r5, 51d8e <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
   51d8a:	4620      	mov	r0, r4
   51d8c:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
   51d8e:	4628      	mov	r0, r5
   51d90:	f7ff ffce 	bl	51d30 <verify_header>
   51d94:	b928      	cbnz	r0, 51da2 <verify_chain+0x32>
        if( cur->prev != prv )
   51d96:	68eb      	ldr	r3, [r5, #12]
   51d98:	42b3      	cmp	r3, r6
   51d9a:	d102      	bne.n	51da2 <verify_chain+0x32>
        cur = cur->next;
   51d9c:	462e      	mov	r6, r5
   51d9e:	692d      	ldr	r5, [r5, #16]
   51da0:	e7f2      	b.n	51d88 <verify_chain+0x18>
        return( 1 );
   51da2:	2401      	movs	r4, #1
   51da4:	e7f1      	b.n	51d8a <verify_chain+0x1a>
   51da6:	bf00      	nop
   51da8:	2001bc64 	.word	0x2001bc64

00051dac <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
   51dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memory_header *new, *cur = heap.first_free;
   51dae:	4d38      	ldr	r5, [pc, #224]	; (51e90 <buffer_alloc_calloc+0xe4>)
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
   51db0:	682b      	ldr	r3, [r5, #0]
    memory_header *new, *cur = heap.first_free;
   51db2:	68ee      	ldr	r6, [r5, #12]
    if( heap.buf == NULL || heap.first == NULL )
   51db4:	b1d3      	cbz	r3, 51dec <buffer_alloc_calloc+0x40>
   51db6:	68ab      	ldr	r3, [r5, #8]
   51db8:	b1c3      	cbz	r3, 51dec <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
   51dba:	2800      	cmp	r0, #0
   51dbc:	d060      	beq.n	51e80 <buffer_alloc_calloc+0xd4>
   51dbe:	2900      	cmp	r1, #0
   51dc0:	d05e      	beq.n	51e80 <buffer_alloc_calloc+0xd4>
    original_len = len = n * size;
   51dc2:	fb01 f400 	mul.w	r4, r1, r0
    if( n == 0 || size == 0 || len / n != size )
   51dc6:	fbb4 f0f0 	udiv	r0, r4, r0
   51dca:	4288      	cmp	r0, r1
   51dcc:	d158      	bne.n	51e80 <buffer_alloc_calloc+0xd4>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   51dce:	1d21      	adds	r1, r4, #4
   51dd0:	d856      	bhi.n	51e80 <buffer_alloc_calloc+0xd4>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   51dd2:	07a2      	lsls	r2, r4, #30
   51dd4:	d00c      	beq.n	51df0 <buffer_alloc_calloc+0x44>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
   51dd6:	f024 0203 	bic.w	r2, r4, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
   51dda:	3204      	adds	r2, #4
   51ddc:	4633      	mov	r3, r6
   51dde:	e003      	b.n	51de8 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
   51de0:	6858      	ldr	r0, [r3, #4]
   51de2:	4290      	cmp	r0, r2
   51de4:	d24e      	bcs.n	51e84 <buffer_alloc_calloc+0xd8>
            break;

        cur = cur->next_free;
   51de6:	699b      	ldr	r3, [r3, #24]
    while( cur != NULL )
   51de8:	2b00      	cmp	r3, #0
   51dea:	d1f9      	bne.n	51de0 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
   51dec:	4618      	mov	r0, r3
   51dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   51df0:	4622      	mov	r2, r4
   51df2:	e7f3      	b.n	51ddc <buffer_alloc_calloc+0x30>
    if( cur->size - len < sizeof(memory_header) +
   51df4:	1a80      	subs	r0, r0, r2
   51df6:	2823      	cmp	r0, #35	; 0x23
   51df8:	f103 0620 	add.w	r6, r3, #32
   51dfc:	d81c      	bhi.n	51e38 <buffer_alloc_calloc+0x8c>
        cur->alloc = 1;
   51dfe:	2201      	movs	r2, #1
   51e00:	609a      	str	r2, [r3, #8]
            cur->prev_free->next_free = cur->next_free;
   51e02:	e9d3 1205 	ldrd	r1, r2, [r3, #20]
        if( cur->prev_free != NULL )
   51e06:	b1a9      	cbz	r1, 51e34 <buffer_alloc_calloc+0x88>
            cur->prev_free->next_free = cur->next_free;
   51e08:	618a      	str	r2, [r1, #24]
        if( cur->next_free != NULL )
   51e0a:	699a      	ldr	r2, [r3, #24]
   51e0c:	b10a      	cbz	r2, 51e12 <buffer_alloc_calloc+0x66>
            cur->next_free->prev_free = cur->prev_free;
   51e0e:	6959      	ldr	r1, [r3, #20]
   51e10:	6151      	str	r1, [r2, #20]
    cur->prev_free = NULL;
   51e12:	2200      	movs	r2, #0
    cur->next_free = NULL;
   51e14:	e9c3 2205 	strd	r2, r2, [r3, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
   51e18:	692b      	ldr	r3, [r5, #16]
   51e1a:	07db      	lsls	r3, r3, #31
   51e1c:	d503      	bpl.n	51e26 <buffer_alloc_calloc+0x7a>
   51e1e:	f7ff ffa7 	bl	51d70 <verify_chain>
   51e22:	2800      	cmp	r0, #0
   51e24:	d131      	bne.n	51e8a <buffer_alloc_calloc+0xde>
   51e26:	4622      	mov	r2, r4
   51e28:	2100      	movs	r1, #0
   51e2a:	4630      	mov	r0, r6
   51e2c:	f009 f894 	bl	5af58 <memset>
   51e30:	4603      	mov	r3, r0
   51e32:	e7db      	b.n	51dec <buffer_alloc_calloc+0x40>
            heap.first_free = cur->next_free;
   51e34:	60ea      	str	r2, [r5, #12]
   51e36:	e7e8      	b.n	51e0a <buffer_alloc_calloc+0x5e>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
   51e38:	f102 0c20 	add.w	ip, r2, #32
   51e3c:	eb03 010c 	add.w	r1, r3, ip
    new->size = cur->size - len - sizeof(memory_header);
   51e40:	3820      	subs	r0, #32
    new->alloc = 0;
   51e42:	e9c1 0701 	strd	r0, r7, [r1, #4]
    new->prev = cur;
   51e46:	60cb      	str	r3, [r1, #12]
    new->next = cur->next;
   51e48:	6918      	ldr	r0, [r3, #16]
    new->magic1 = MAGIC1;
   51e4a:	4f12      	ldr	r7, [pc, #72]	; (51e94 <buffer_alloc_calloc+0xe8>)
    new->next = cur->next;
   51e4c:	6108      	str	r0, [r1, #16]
    new->magic1 = MAGIC1;
   51e4e:	f843 700c 	str.w	r7, [r3, ip]
    new->magic2 = MAGIC2;
   51e52:	f1a7 2710 	sub.w	r7, r7, #268439552	; 0x10001000
   51e56:	f1a7 17ef 	sub.w	r7, r7, #15663343	; 0xef00ef
   51e5a:	61cf      	str	r7, [r1, #28]
    if( new->next != NULL )
   51e5c:	b100      	cbz	r0, 51e60 <buffer_alloc_calloc+0xb4>
        new->next->prev = new;
   51e5e:	60c1      	str	r1, [r0, #12]
    new->prev_free = cur->prev_free;
   51e60:	6958      	ldr	r0, [r3, #20]
   51e62:	6148      	str	r0, [r1, #20]
    new->next_free = cur->next_free;
   51e64:	699f      	ldr	r7, [r3, #24]
   51e66:	618f      	str	r7, [r1, #24]
    if( new->prev_free != NULL )
   51e68:	b140      	cbz	r0, 51e7c <buffer_alloc_calloc+0xd0>
        new->prev_free->next_free = new;
   51e6a:	6181      	str	r1, [r0, #24]
    if( new->next_free != NULL )
   51e6c:	6988      	ldr	r0, [r1, #24]
   51e6e:	b100      	cbz	r0, 51e72 <buffer_alloc_calloc+0xc6>
        new->next_free->prev_free = new;
   51e70:	6141      	str	r1, [r0, #20]
    cur->alloc = 1;
   51e72:	2001      	movs	r0, #1
    cur->next = new;
   51e74:	6119      	str	r1, [r3, #16]
    cur->size = len;
   51e76:	e9c3 2001 	strd	r2, r0, [r3, #4]
    cur->next = new;
   51e7a:	e7ca      	b.n	51e12 <buffer_alloc_calloc+0x66>
        heap.first_free = new;
   51e7c:	60e9      	str	r1, [r5, #12]
   51e7e:	e7f5      	b.n	51e6c <buffer_alloc_calloc+0xc0>
        return( NULL );
   51e80:	2300      	movs	r3, #0
   51e82:	e7b3      	b.n	51dec <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
   51e84:	689f      	ldr	r7, [r3, #8]
   51e86:	2f00      	cmp	r7, #0
   51e88:	d0b4      	beq.n	51df4 <buffer_alloc_calloc+0x48>
        mbedtls_exit( 1 );
   51e8a:	2001      	movs	r0, #1
   51e8c:	f001 faa2 	bl	533d4 <exit>
   51e90:	2001bc64 	.word	0x2001bc64
   51e94:	ff00aa55 	.word	0xff00aa55

00051e98 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
   51e98:	b570      	push	{r4, r5, r6, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
   51e9a:	4605      	mov	r5, r0
   51e9c:	2800      	cmp	r0, #0
   51e9e:	d040      	beq.n	51f22 <buffer_alloc_free+0x8a>
   51ea0:	4e3b      	ldr	r6, [pc, #236]	; (51f90 <buffer_alloc_free+0xf8>)
   51ea2:	6833      	ldr	r3, [r6, #0]
   51ea4:	2b00      	cmp	r3, #0
   51ea6:	d03c      	beq.n	51f22 <buffer_alloc_free+0x8a>
   51ea8:	68b2      	ldr	r2, [r6, #8]
   51eaa:	2a00      	cmp	r2, #0
   51eac:	d039      	beq.n	51f22 <buffer_alloc_free+0x8a>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
   51eae:	4283      	cmp	r3, r0
   51eb0:	d803      	bhi.n	51eba <buffer_alloc_free+0x22>
   51eb2:	6872      	ldr	r2, [r6, #4]
   51eb4:	4413      	add	r3, r2
   51eb6:	4298      	cmp	r0, r3
   51eb8:	d302      	bcc.n	51ec0 <buffer_alloc_free+0x28>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
   51eba:	2001      	movs	r0, #1
   51ebc:	f001 fa8a 	bl	533d4 <exit>
    }

    p -= sizeof(memory_header);
   51ec0:	f1a0 0420 	sub.w	r4, r0, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
   51ec4:	4620      	mov	r0, r4
   51ec6:	f7ff ff33 	bl	51d30 <verify_header>
   51eca:	2800      	cmp	r0, #0
   51ecc:	d1f5      	bne.n	51eba <buffer_alloc_free+0x22>
        mbedtls_exit( 1 );

    if( hdr->alloc != 1 )
   51ece:	f855 3c18 	ldr.w	r3, [r5, #-24]
   51ed2:	2b01      	cmp	r3, #1
   51ed4:	d1f1      	bne.n	51eba <buffer_alloc_free+0x22>
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
   51ed6:	f855 3c14 	ldr.w	r3, [r5, #-20]
    hdr->alloc = 0;
   51eda:	f845 0c18 	str.w	r0, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
   51ede:	b30b      	cbz	r3, 51f24 <buffer_alloc_free+0x8c>
   51ee0:	689a      	ldr	r2, [r3, #8]
   51ee2:	b9fa      	cbnz	r2, 51f24 <buffer_alloc_free+0x8c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
   51ee4:	f855 2c1c 	ldr.w	r2, [r5, #-28]
   51ee8:	f102 0120 	add.w	r1, r2, #32
   51eec:	685a      	ldr	r2, [r3, #4]
   51eee:	440a      	add	r2, r1
   51ef0:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
   51ef2:	e955 3205 	ldrd	r3, r2, [r5, #-20]
   51ef6:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
   51ef8:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if( hdr->next != NULL )
   51efc:	692b      	ldr	r3, [r5, #16]
   51efe:	b103      	cbz	r3, 51f02 <buffer_alloc_free+0x6a>
            hdr->next->prev = hdr;
   51f00:	60dd      	str	r5, [r3, #12]
   51f02:	2220      	movs	r2, #32
   51f04:	2100      	movs	r1, #0
   51f06:	4620      	mov	r0, r4
   51f08:	f009 f826 	bl	5af58 <memset>
        memset( old, 0, sizeof(memory_header) );
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
   51f0c:	6928      	ldr	r0, [r5, #16]
   51f0e:	b108      	cbz	r0, 51f14 <buffer_alloc_free+0x7c>
   51f10:	6883      	ldr	r3, [r0, #8]
   51f12:	b34b      	cbz	r3, 51f68 <buffer_alloc_free+0xd0>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
   51f14:	6933      	ldr	r3, [r6, #16]
   51f16:	079b      	lsls	r3, r3, #30
   51f18:	d503      	bpl.n	51f22 <buffer_alloc_free+0x8a>
   51f1a:	f7ff ff29 	bl	51d70 <verify_chain>
   51f1e:	2800      	cmp	r0, #0
   51f20:	d1cb      	bne.n	51eba <buffer_alloc_free+0x22>
        mbedtls_exit( 1 );
}
   51f22:	bd70      	pop	{r4, r5, r6, pc}
    if( hdr->next != NULL && hdr->next->alloc == 0 )
   51f24:	f855 0c10 	ldr.w	r0, [r5, #-16]
   51f28:	2800      	cmp	r0, #0
   51f2a:	d02a      	beq.n	51f82 <buffer_alloc_free+0xea>
   51f2c:	6883      	ldr	r3, [r0, #8]
   51f2e:	bb43      	cbnz	r3, 51f82 <buffer_alloc_free+0xea>
        hdr->size += sizeof(memory_header) + hdr->next->size;
   51f30:	6842      	ldr	r2, [r0, #4]
   51f32:	6863      	ldr	r3, [r4, #4]
   51f34:	4413      	add	r3, r2
   51f36:	3320      	adds	r3, #32
   51f38:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
   51f3a:	6903      	ldr	r3, [r0, #16]
   51f3c:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
   51f3e:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   51f42:	b99a      	cbnz	r2, 51f6c <buffer_alloc_free+0xd4>
   51f44:	b9cb      	cbnz	r3, 51f7a <buffer_alloc_free+0xe2>
        hdr->prev_free = old->prev_free;
   51f46:	6943      	ldr	r3, [r0, #20]
   51f48:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
   51f4a:	6982      	ldr	r2, [r0, #24]
   51f4c:	61a2      	str	r2, [r4, #24]
        if( hdr->prev_free != NULL )
   51f4e:	b1b3      	cbz	r3, 51f7e <buffer_alloc_free+0xe6>
            hdr->prev_free->next_free = hdr;
   51f50:	619c      	str	r4, [r3, #24]
        if( hdr->next_free != NULL )
   51f52:	69a3      	ldr	r3, [r4, #24]
   51f54:	b103      	cbz	r3, 51f58 <buffer_alloc_free+0xc0>
            hdr->next_free->prev_free = hdr;
   51f56:	615c      	str	r4, [r3, #20]
        if( hdr->next != NULL )
   51f58:	6923      	ldr	r3, [r4, #16]
   51f5a:	b103      	cbz	r3, 51f5e <buffer_alloc_free+0xc6>
            hdr->next->prev = hdr;
   51f5c:	60dc      	str	r4, [r3, #12]
   51f5e:	2220      	movs	r2, #32
   51f60:	2100      	movs	r1, #0
   51f62:	f008 fff9 	bl	5af58 <memset>
    if( old == NULL )
   51f66:	e7d5      	b.n	51f14 <buffer_alloc_free+0x7c>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
   51f68:	462c      	mov	r4, r5
   51f6a:	e7e1      	b.n	51f30 <buffer_alloc_free+0x98>
                hdr->prev_free->next_free = hdr->next_free;
   51f6c:	6193      	str	r3, [r2, #24]
            if( hdr->next_free != NULL )
   51f6e:	69a3      	ldr	r3, [r4, #24]
   51f70:	2b00      	cmp	r3, #0
   51f72:	d0e8      	beq.n	51f46 <buffer_alloc_free+0xae>
                hdr->next_free->prev_free = hdr->prev_free;
   51f74:	6962      	ldr	r2, [r4, #20]
   51f76:	615a      	str	r2, [r3, #20]
   51f78:	e7e5      	b.n	51f46 <buffer_alloc_free+0xae>
                heap.first_free = hdr->next_free;
   51f7a:	60f3      	str	r3, [r6, #12]
   51f7c:	e7f7      	b.n	51f6e <buffer_alloc_free+0xd6>
            heap.first_free = hdr;
   51f7e:	60f4      	str	r4, [r6, #12]
   51f80:	e7e7      	b.n	51f52 <buffer_alloc_free+0xba>
        hdr->next_free = heap.first_free;
   51f82:	68f3      	ldr	r3, [r6, #12]
   51f84:	f845 3c08 	str.w	r3, [r5, #-8]
        if( heap.first_free != NULL )
   51f88:	b103      	cbz	r3, 51f8c <buffer_alloc_free+0xf4>
            heap.first_free->prev_free = hdr;
   51f8a:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
   51f8c:	60f4      	str	r4, [r6, #12]
   51f8e:	e7c1      	b.n	51f14 <buffer_alloc_free+0x7c>
   51f90:	2001bc64 	.word	0x2001bc64

00051f94 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
   51f94:	b538      	push	{r3, r4, r5, lr}
   51f96:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
   51f98:	2214      	movs	r2, #20
   51f9a:	2100      	movs	r1, #0
{
   51f9c:	4605      	mov	r5, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
   51f9e:	4813      	ldr	r0, [pc, #76]	; (51fec <mbedtls_memory_buffer_alloc_init+0x58>)
   51fa0:	f008 ffda 	bl	5af58 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
   51fa4:	4912      	ldr	r1, [pc, #72]	; (51ff0 <mbedtls_memory_buffer_alloc_init+0x5c>)
   51fa6:	4813      	ldr	r0, [pc, #76]	; (51ff4 <mbedtls_memory_buffer_alloc_init+0x60>)
   51fa8:	f7ff feb0 	bl	51d0c <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   51fac:	2c23      	cmp	r4, #35	; 0x23
   51fae:	d91c      	bls.n	51fea <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
   51fb0:	f015 0303 	ands.w	r3, r5, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
   51fb4:	bf1f      	itttt	ne
   51fb6:	3c04      	subne	r4, #4
   51fb8:	18e4      	addne	r4, r4, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
   51fba:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
   51fbe:	18ed      	addne	r5, r5, r3
   51fc0:	4622      	mov	r2, r4
   51fc2:	2100      	movs	r1, #0
   51fc4:	4628      	mov	r0, r5
   51fc6:	f008 ffc7 	bl	5af58 <memset>
    }

    memset( buf, 0, len );

    heap.buf = buf;
   51fca:	4b08      	ldr	r3, [pc, #32]	; (51fec <mbedtls_memory_buffer_alloc_init+0x58>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
   51fcc:	490a      	ldr	r1, [pc, #40]	; (51ff8 <mbedtls_memory_buffer_alloc_init+0x64>)
    heap.len = len;
   51fce:	e9c3 5400 	strd	r5, r4, [r3]
    heap.first->size = len - sizeof( memory_header );
   51fd2:	3c20      	subs	r4, #32
    heap.first = (memory_header *)buf;
   51fd4:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
   51fd6:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
   51fd8:	689a      	ldr	r2, [r3, #8]
   51fda:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
   51fdc:	689a      	ldr	r2, [r3, #8]
   51fde:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
   51fe2:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
   51fe6:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
   51fe8:	60da      	str	r2, [r3, #12]
}
   51fea:	bd38      	pop	{r3, r4, r5, pc}
   51fec:	2001bc64 	.word	0x2001bc64
   51ff0:	00051e99 	.word	0x00051e99
   51ff4:	00051dad 	.word	0x00051dad
   51ff8:	ff00aa55 	.word	0xff00aa55

00051ffc <z_device_get_all_static>:
#include <syscalls/device_is_ready_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   51ffc:	4a03      	ldr	r2, [pc, #12]	; (5200c <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   51ffe:	4b04      	ldr	r3, [pc, #16]	; (52010 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   52000:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   52002:	1a9b      	subs	r3, r3, r2
}
   52004:	4803      	ldr	r0, [pc, #12]	; (52014 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   52006:	109b      	asrs	r3, r3, #2
}
   52008:	4358      	muls	r0, r3
   5200a:	4770      	bx	lr
   5200c:	0005bc00 	.word	0x0005bc00
   52010:	0005bce0 	.word	0x0005bce0
   52014:	b6db6db7 	.word	0xb6db6db7

00052018 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   52018:	4b01      	ldr	r3, [pc, #4]	; (52020 <z_impl_z_errno+0x8>)
   5201a:	6898      	ldr	r0, [r3, #8]
}
   5201c:	3064      	adds	r0, #100	; 0x64
   5201e:	4770      	bx	lr
   52020:	2001bc78 	.word	0x2001bc78

00052024 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   52024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   52028:	4606      	mov	r6, r0
   5202a:	b086      	sub	sp, #24
   5202c:	460f      	mov	r7, r1
	__asm__ volatile(
   5202e:	f04f 0320 	mov.w	r3, #32
   52032:	f3ef 8811 	mrs	r8, BASEPRI
   52036:	f383 8812 	msr	BASEPRI_MAX, r3
   5203a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   5203e:	f000 ff7f 	bl	52f40 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   52042:	2400      	movs	r4, #0
   52044:	2e04      	cmp	r6, #4
   52046:	bf96      	itet	ls
   52048:	4b21      	ldrls	r3, [pc, #132]	; (520d0 <z_fatal_error+0xac>)
   5204a:	4b22      	ldrhi	r3, [pc, #136]	; (520d4 <z_fatal_error+0xb0>)
   5204c:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
   52050:	4605      	mov	r5, r0
   52052:	e9cd 3404 	strd	r3, r4, [sp, #16]
   52056:	4b20      	ldr	r3, [pc, #128]	; (520d8 <z_fatal_error+0xb4>)
   52058:	2201      	movs	r2, #1
   5205a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   5205e:	4620      	mov	r0, r4
   52060:	4623      	mov	r3, r4
   52062:	491e      	ldr	r1, [pc, #120]	; (520dc <z_fatal_error+0xb8>)
   52064:	9603      	str	r6, [sp, #12]
   52066:	9400      	str	r4, [sp, #0]
   52068:	f008 fb36 	bl	5a6d8 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   5206c:	b16f      	cbz	r7, 5208a <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   5206e:	69fb      	ldr	r3, [r7, #28]
   52070:	f3c3 0308 	ubfx	r3, r3, #0, #9
   52074:	b14b      	cbz	r3, 5208a <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   52076:	4b1a      	ldr	r3, [pc, #104]	; (520e0 <z_fatal_error+0xbc>)
   52078:	2201      	movs	r2, #1
   5207a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   5207e:	4620      	mov	r0, r4
   52080:	4623      	mov	r3, r4
   52082:	4916      	ldr	r1, [pc, #88]	; (520dc <z_fatal_error+0xb8>)
   52084:	9400      	str	r4, [sp, #0]
   52086:	f008 fb27 	bl	5a6d8 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   5208a:	b12d      	cbz	r5, 52098 <z_fatal_error+0x74>
   5208c:	4628      	mov	r0, r5
   5208e:	f008 fbfc 	bl	5a88a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   52092:	b108      	cbz	r0, 52098 <z_fatal_error+0x74>
   52094:	7803      	ldrb	r3, [r0, #0]
   52096:	b903      	cbnz	r3, 5209a <z_fatal_error+0x76>
		thread_name = "unknown";
   52098:	4812      	ldr	r0, [pc, #72]	; (520e4 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   5209a:	4b13      	ldr	r3, [pc, #76]	; (520e8 <z_fatal_error+0xc4>)
   5209c:	2201      	movs	r2, #1
   5209e:	9302      	str	r3, [sp, #8]
   520a0:	2300      	movs	r3, #0
   520a2:	e9cd 5003 	strd	r5, r0, [sp, #12]
   520a6:	e9cd 3300 	strd	r3, r3, [sp]
   520aa:	4618      	mov	r0, r3
   520ac:	490b      	ldr	r1, [pc, #44]	; (520dc <z_fatal_error+0xb8>)
   520ae:	f008 fb13 	bl	5a6d8 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   520b2:	4639      	mov	r1, r7
   520b4:	4630      	mov	r0, r6
   520b6:	f7fa fed5 	bl	4ce64 <k_sys_fatal_error_handler>
	__asm__ volatile(
   520ba:	f388 8811 	msr	BASEPRI, r8
   520be:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   520c2:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   520c4:	b006      	add	sp, #24
   520c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   520ca:	f7f4 bb2f 	b.w	4672c <z_impl_k_thread_abort>
   520ce:	bf00      	nop
   520d0:	0005c894 	.word	0x0005c894
   520d4:	00060891 	.word	0x00060891
   520d8:	000608a7 	.word	0x000608a7
   520dc:	0005c00c 	.word	0x0005c00c
   520e0:	000608cf 	.word	0x000608cf
   520e4:	0006089f 	.word	0x0006089f
   520e8:	000608f0 	.word	0x000608f0

000520ec <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   520ec:	4b0f      	ldr	r3, [pc, #60]	; (5212c <z_sys_init_run_level+0x40>)
{
   520ee:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   520f0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   520f4:	3001      	adds	r0, #1
   520f6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   520fa:	42a6      	cmp	r6, r4
   520fc:	d800      	bhi.n	52100 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   520fe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   52100:	e9d4 3500 	ldrd	r3, r5, [r4]
   52104:	4628      	mov	r0, r5
   52106:	4798      	blx	r3
		if (dev != NULL) {
   52108:	b16d      	cbz	r5, 52126 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   5210a:	b138      	cbz	r0, 5211c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   5210c:	2800      	cmp	r0, #0
   5210e:	bfb8      	it	lt
   52110:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   52112:	28ff      	cmp	r0, #255	; 0xff
   52114:	bfa8      	it	ge
   52116:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   52118:	68eb      	ldr	r3, [r5, #12]
   5211a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   5211c:	68ea      	ldr	r2, [r5, #12]
   5211e:	7853      	ldrb	r3, [r2, #1]
   52120:	f043 0301 	orr.w	r3, r3, #1
   52124:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   52126:	3408      	adds	r4, #8
   52128:	e7e7      	b.n	520fa <z_sys_init_run_level+0xe>
   5212a:	bf00      	nop
   5212c:	0005c8a8 	.word	0x0005c8a8

00052130 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   52130:	2201      	movs	r2, #1
{
   52132:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   52134:	4b09      	ldr	r3, [pc, #36]	; (5215c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   52136:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   52138:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   5213a:	f7ff ffd7 	bl	520ec <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   5213e:	f001 f921 	bl	53384 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   52142:	2004      	movs	r0, #4
   52144:	f7ff ffd2 	bl	520ec <z_sys_init_run_level>

	z_init_static_threads();
   52148:	f000 f96c 	bl	52424 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   5214c:	f7f1 ff90 	bl	44070 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   52150:	4a03      	ldr	r2, [pc, #12]	; (52160 <bg_thread_main+0x30>)
   52152:	7b13      	ldrb	r3, [r2, #12]
   52154:	f023 0301 	bic.w	r3, r3, #1
   52158:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   5215a:	bd08      	pop	{r3, pc}
   5215c:	2002083d 	.word	0x2002083d
   52160:	2001aeb8 	.word	0x2001aeb8

00052164 <z_bss_zero>:
{
   52164:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   52166:	4803      	ldr	r0, [pc, #12]	; (52174 <z_bss_zero+0x10>)
   52168:	4a03      	ldr	r2, [pc, #12]	; (52178 <z_bss_zero+0x14>)
   5216a:	2100      	movs	r1, #0
   5216c:	1a12      	subs	r2, r2, r0
   5216e:	f008 fac3 	bl	5a6f8 <z_early_memset>
}
   52172:	bd08      	pop	{r3, pc}
   52174:	2001ac70 	.word	0x2001ac70
   52178:	20020840 	.word	0x20020840

0005217c <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   5217c:	23c8      	movs	r3, #200	; 0xc8
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   5217e:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   52180:	4e13      	ldr	r6, [pc, #76]	; (521d0 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   52182:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   52184:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   52188:	2300      	movs	r3, #0
{
   5218a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   5218c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   52190:	220f      	movs	r2, #15
   52192:	9301      	str	r3, [sp, #4]
   52194:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   52198:	231c      	movs	r3, #28
	z_setup_new_thread(thread, stack,
   5219a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   5219e:	4d0d      	ldr	r5, [pc, #52]	; (521d4 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   521a0:	490d      	ldr	r1, [pc, #52]	; (521d8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   521a2:	fb03 5500 	mla	r5, r3, r0, r5
{
   521a6:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   521a8:	fb02 1100 	mla	r1, r2, r0, r1
   521ac:	4b0b      	ldr	r3, [pc, #44]	; (521dc <z_init_cpu+0x60>)
   521ae:	4630      	mov	r0, r6
   521b0:	9500      	str	r5, [sp, #0]
   521b2:	f000 f8db 	bl	5236c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   521b6:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   521b8:	752c      	strb	r4, [r5, #20]
   521ba:	f023 0304 	bic.w	r3, r3, #4
   521be:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   521c0:	4b07      	ldr	r3, [pc, #28]	; (521e0 <z_init_cpu+0x64>)
   521c2:	3401      	adds	r4, #1
   521c4:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   521c8:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   521ca:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   521cc:	b006      	add	sp, #24
   521ce:	bd70      	pop	{r4, r5, r6, pc}
   521d0:	2001adf0 	.word	0x2001adf0
   521d4:	2001bc78 	.word	0x2001bc78
   521d8:	20021640 	.word	0x20021640
   521dc:	000524dd 	.word	0x000524dd
   521e0:	20020e40 	.word	0x20020e40

000521e4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   521e4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   521e6:	2000      	movs	r0, #0
{
   521e8:	b0b8      	sub	sp, #224	; 0xe0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   521ea:	f7ff ff7f 	bl	520ec <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   521ee:	4b2f      	ldr	r3, [pc, #188]	; (522ac <z_cstart+0xc8>)
	uint32_t msp =
   521f0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   521f4:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   521f8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   521fc:	2400      	movs	r4, #0
   521fe:	23e0      	movs	r3, #224	; 0xe0
   52200:	4d2b      	ldr	r5, [pc, #172]	; (522b0 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   52202:	4e2c      	ldr	r6, [pc, #176]	; (522b4 <z_cstart+0xd0>)
   52204:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   52208:	77ec      	strb	r4, [r5, #31]
   5220a:	762c      	strb	r4, [r5, #24]
   5220c:	766c      	strb	r4, [r5, #25]
   5220e:	76ac      	strb	r4, [r5, #26]
   52210:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   52214:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   52216:	4f28      	ldr	r7, [pc, #160]	; (522b8 <z_cstart+0xd4>)
   52218:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   5221c:	626b      	str	r3, [r5, #36]	; 0x24
   5221e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   52222:	f7f4 f9e7 	bl	465f4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   52226:	f7f3 fd25 	bl	45c74 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   5222a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   5222e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   52230:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   52232:	f7f4 fc17 	bl	46a64 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   52236:	f7f4 fa8f 	bl	46758 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   5223a:	f7f2 ff79 	bl	45130 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   5223e:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   52242:	ad06      	add	r5, sp, #24
   52244:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   52246:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   5224a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   5224e:	f001 f87b 	bl	53348 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   52252:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   52254:	f008 fa34 	bl	5a6c0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   52258:	2001      	movs	r0, #1
   5225a:	f7ff ff47 	bl	520ec <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   5225e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   52260:	4d16      	ldr	r5, [pc, #88]	; (522bc <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   52262:	f7ff ff43 	bl	520ec <z_sys_init_run_level>
	z_sched_init();
   52266:	f000 fdc3 	bl	52df0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   5226a:	4b15      	ldr	r3, [pc, #84]	; (522c0 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   5226c:	6235      	str	r5, [r6, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   5226e:	9305      	str	r3, [sp, #20]
   52270:	2301      	movs	r3, #1
   52272:	4914      	ldr	r1, [pc, #80]	; (522c4 <z_cstart+0xe0>)
   52274:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   52278:	e9cd 4303 	strd	r4, r3, [sp, #12]
   5227c:	4628      	mov	r0, r5
   5227e:	463b      	mov	r3, r7
   52280:	e9cd 4401 	strd	r4, r4, [sp, #4]
   52284:	9400      	str	r4, [sp, #0]
   52286:	f000 f871 	bl	5236c <z_setup_new_thread>
   5228a:	4606      	mov	r6, r0
   5228c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   5228e:	4628      	mov	r0, r5
   52290:	f022 0204 	bic.w	r2, r2, #4
   52294:	736a      	strb	r2, [r5, #13]
   52296:	f008 fc74 	bl	5ab82 <z_ready_thread>
	z_init_cpu(0);
   5229a:	4620      	mov	r0, r4
   5229c:	f7ff ff6e 	bl	5217c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   522a0:	463a      	mov	r2, r7
   522a2:	4631      	mov	r1, r6
   522a4:	4628      	mov	r0, r5
   522a6:	f7f3 fea3 	bl	45ff0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   522aa:	bf00      	nop
   522ac:	20020e40 	.word	0x20020e40
   522b0:	e000ed00 	.word	0xe000ed00
   522b4:	2001bc78 	.word	0x2001bc78
   522b8:	00052131 	.word	0x00052131
   522bc:	2001aeb8 	.word	0x2001aeb8
   522c0:	0005d7d0 	.word	0x0005d7d0
   522c4:	20021780 	.word	0x20021780

000522c8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   522c8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   522ca:	4c06      	ldr	r4, [pc, #24]	; (522e4 <statics_init+0x1c>)
   522cc:	4d06      	ldr	r5, [pc, #24]	; (522e8 <statics_init+0x20>)
   522ce:	42ac      	cmp	r4, r5
   522d0:	d301      	bcc.n	522d6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   522d2:	2000      	movs	r0, #0
   522d4:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   522d6:	4620      	mov	r0, r4
   522d8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   522dc:	f008 fa10 	bl	5a700 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   522e0:	3414      	adds	r4, #20
   522e2:	e7f4      	b.n	522ce <statics_init+0x6>
   522e4:	2001aaf8 	.word	0x2001aaf8
   522e8:	2001ab20 	.word	0x2001ab20

000522ec <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   522ec:	2000      	movs	r0, #0
{
   522ee:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   522f0:	4c05      	ldr	r4, [pc, #20]	; (52308 <init_mem_slab_module+0x1c>)
   522f2:	4d06      	ldr	r5, [pc, #24]	; (5230c <init_mem_slab_module+0x20>)
   522f4:	42ac      	cmp	r4, r5
   522f6:	d300      	bcc.n	522fa <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   522f8:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   522fa:	4620      	mov	r0, r4
   522fc:	f008 fa7d 	bl	5a7fa <create_free_list>
		if (rc < 0) {
   52300:	2800      	cmp	r0, #0
   52302:	dbf9      	blt.n	522f8 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   52304:	341c      	adds	r4, #28
   52306:	e7f5      	b.n	522f4 <init_mem_slab_module+0x8>
   52308:	2001aac0 	.word	0x2001aac0
   5230c:	2001aaf8 	.word	0x2001aaf8

00052310 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   52310:	b573      	push	{r0, r1, r4, r5, r6, lr}
   52312:	460c      	mov	r4, r1
	__asm__ volatile(
   52314:	f04f 0520 	mov.w	r5, #32
   52318:	f3ef 8111 	mrs	r1, BASEPRI
   5231c:	f385 8812 	msr	BASEPRI_MAX, r5
   52320:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   52324:	6945      	ldr	r5, [r0, #20]
   52326:	b15d      	cbz	r5, 52340 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   52328:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   5232a:	682b      	ldr	r3, [r5, #0]
   5232c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   5232e:	6983      	ldr	r3, [r0, #24]
   52330:	3301      	adds	r3, #1
   52332:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   52334:	2000      	movs	r0, #0
	__asm__ volatile(
   52336:	f381 8811 	msr	BASEPRI, r1
   5233a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   5233e:	e011      	b.n	52364 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   52340:	ea52 0603 	orrs.w	r6, r2, r3
   52344:	d103      	bne.n	5234e <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   52346:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   5234a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   5234c:	e7f3      	b.n	52336 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   5234e:	e9cd 2300 	strd	r2, r3, [sp]
   52352:	4602      	mov	r2, r0
   52354:	3008      	adds	r0, #8
   52356:	f000 fc55 	bl	52c04 <z_pend_curr>
		if (result == 0) {
   5235a:	b918      	cbnz	r0, 52364 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   5235c:	4b02      	ldr	r3, [pc, #8]	; (52368 <k_mem_slab_alloc+0x58>)
   5235e:	689b      	ldr	r3, [r3, #8]
   52360:	695b      	ldr	r3, [r3, #20]
   52362:	6023      	str	r3, [r4, #0]
}
   52364:	b002      	add	sp, #8
   52366:	bd70      	pop	{r4, r5, r6, pc}
   52368:	2001bc78 	.word	0x2001bc78

0005236c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   5236c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   52370:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   52372:	f100 0558 	add.w	r5, r0, #88	; 0x58
   52376:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   52378:	2604      	movs	r6, #4
	list->tail = (sys_dnode_t *)list;
   5237a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   5237e:	2500      	movs	r5, #0
{
   52380:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   52382:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   52384:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	node->prev = NULL;
   52386:	e9c0 5506 	strd	r5, r5, [r0, #24]
   5238a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   5238c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   5238e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   52390:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   52394:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   52398:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   5239a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   5239c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   5239e:	9202      	str	r2, [sp, #8]
   523a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   523a2:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   523a6:	9201      	str	r2, [sp, #4]
   523a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   523aa:	9200      	str	r2, [sp, #0]
   523ac:	4642      	mov	r2, r8
   523ae:	f7f3 fdff 	bl	45fb0 <arch_new_thread>
	if (!_current) {
   523b2:	4b05      	ldr	r3, [pc, #20]	; (523c8 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   523b4:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   523b6:	689b      	ldr	r3, [r3, #8]
   523b8:	b103      	cbz	r3, 523bc <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   523ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   523bc:	4640      	mov	r0, r8
   523be:	6763      	str	r3, [r4, #116]	; 0x74
   523c0:	b004      	add	sp, #16
   523c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   523c6:	bf00      	nop
   523c8:	2001bc78 	.word	0x2001bc78

000523cc <z_impl_k_thread_create>:
{
   523cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   523ce:	2500      	movs	r5, #0
{
   523d0:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   523d2:	9505      	str	r5, [sp, #20]
   523d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   523d6:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   523da:	9504      	str	r5, [sp, #16]
   523dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   523de:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   523e0:	9503      	str	r5, [sp, #12]
   523e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   523e4:	9502      	str	r5, [sp, #8]
   523e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   523e8:	9501      	str	r5, [sp, #4]
   523ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   523ec:	9500      	str	r5, [sp, #0]
   523ee:	f7ff ffbd 	bl	5236c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   523f2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   523f6:	bf08      	it	eq
   523f8:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   523fc:	d005      	beq.n	5240a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   523fe:	ea56 0307 	orrs.w	r3, r6, r7
   52402:	d105      	bne.n	52410 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   52404:	4620      	mov	r0, r4
   52406:	f000 fc73 	bl	52cf0 <z_sched_start>
}
   5240a:	4620      	mov	r0, r4
   5240c:	b007      	add	sp, #28
   5240e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   52410:	463a      	mov	r2, r7
   52412:	4633      	mov	r3, r6
   52414:	4902      	ldr	r1, [pc, #8]	; (52420 <z_impl_k_thread_create+0x54>)
   52416:	f104 0018 	add.w	r0, r4, #24
   5241a:	f000 fe71 	bl	53100 <z_add_timeout>
   5241e:	e7f4      	b.n	5240a <z_impl_k_thread_create+0x3e>
   52420:	0005aaef 	.word	0x0005aaef

00052424 <z_init_static_threads>:
{
   52424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   52428:	4c29      	ldr	r4, [pc, #164]	; (524d0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   5242a:	4d2a      	ldr	r5, [pc, #168]	; (524d4 <z_init_static_threads+0xb0>)
{
   5242c:	b087      	sub	sp, #28
   5242e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   52430:	42ae      	cmp	r6, r5
   52432:	f104 0430 	add.w	r4, r4, #48	; 0x30
   52436:	d30f      	bcc.n	52458 <z_init_static_threads+0x34>
	k_sched_lock();
   52438:	f000 fcaa 	bl	52d90 <k_sched_lock>
   5243c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   52440:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   52444:	4c22      	ldr	r4, [pc, #136]	; (524d0 <z_init_static_threads+0xac>)
   52446:	f8df 9090 	ldr.w	r9, [pc, #144]	; 524d8 <z_init_static_threads+0xb4>
   5244a:	42ac      	cmp	r4, r5
   5244c:	d320      	bcc.n	52490 <z_init_static_threads+0x6c>
}
   5244e:	b007      	add	sp, #28
   52450:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   52454:	f000 bcb0 	b.w	52db8 <k_sched_unlock>
		z_setup_new_thread(
   52458:	f854 3c04 	ldr.w	r3, [r4, #-4]
   5245c:	9305      	str	r3, [sp, #20]
   5245e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   52462:	9304      	str	r3, [sp, #16]
   52464:	f854 3c14 	ldr.w	r3, [r4, #-20]
   52468:	9303      	str	r3, [sp, #12]
   5246a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   5246e:	9302      	str	r3, [sp, #8]
   52470:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   52474:	9301      	str	r3, [sp, #4]
   52476:	f854 3c20 	ldr.w	r3, [r4, #-32]
   5247a:	9300      	str	r3, [sp, #0]
   5247c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   52480:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   52484:	f7ff ff72 	bl	5236c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   52488:	f854 3c30 	ldr.w	r3, [r4, #-48]
   5248c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   5248e:	e7ce      	b.n	5242e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   52490:	6a63      	ldr	r3, [r4, #36]	; 0x24
   52492:	1c5a      	adds	r2, r3, #1
   52494:	d00d      	beq.n	524b2 <z_init_static_threads+0x8e>
   52496:	2100      	movs	r1, #0
   52498:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   5249a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   5249e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   524a2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   524a6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   524aa:	d104      	bne.n	524b6 <z_init_static_threads+0x92>
	z_sched_start(thread);
   524ac:	4640      	mov	r0, r8
   524ae:	f000 fc1f 	bl	52cf0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   524b2:	3430      	adds	r4, #48	; 0x30
   524b4:	e7c9      	b.n	5244a <z_init_static_threads+0x26>
   524b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   524ba:	2300      	movs	r3, #0
   524bc:	f7ee fb28 	bl	40b10 <__aeabi_uldivmod>
   524c0:	4602      	mov	r2, r0
   524c2:	460b      	mov	r3, r1
   524c4:	f108 0018 	add.w	r0, r8, #24
   524c8:	4649      	mov	r1, r9
   524ca:	f000 fe19 	bl	53100 <z_add_timeout>
   524ce:	e7f0      	b.n	524b2 <z_init_static_threads+0x8e>
   524d0:	0005bee8 	.word	0x0005bee8
   524d4:	0005bee8 	.word	0x0005bee8
   524d8:	0005aaef 	.word	0x0005aaef

000524dc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   524dc:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   524de:	4c0b      	ldr	r4, [pc, #44]	; (5250c <idle+0x30>)
   524e0:	4d0b      	ldr	r5, [pc, #44]	; (52510 <idle+0x34>)
	__asm__ volatile(
   524e2:	f04f 0220 	mov.w	r2, #32
   524e6:	f3ef 8311 	mrs	r3, BASEPRI
   524ea:	f382 8812 	msr	BASEPRI_MAX, r2
   524ee:	f3bf 8f6f 	isb	sy
   524f2:	f008 fbe5 	bl	5acc0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   524f6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   524f8:	61e0      	str	r0, [r4, #28]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   524fa:	b913      	cbnz	r3, 52502 <idle+0x26>
	arch_cpu_idle();
   524fc:	f7f3 fbc0 	bl	45c80 <arch_cpu_idle>
}
   52500:	e7ef      	b.n	524e2 <idle+0x6>
   52502:	f7f3 fa1b 	bl	4593c <pm_system_suspend>
   52506:	2800      	cmp	r0, #0
   52508:	d1eb      	bne.n	524e2 <idle+0x6>
   5250a:	e7f7      	b.n	524fc <idle+0x20>
   5250c:	2001bc78 	.word	0x2001bc78
   52510:	2002083d 	.word	0x2002083d

00052514 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   52514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   52518:	4604      	mov	r4, r0
   5251a:	4617      	mov	r7, r2
   5251c:	461e      	mov	r6, r3
   5251e:	f04f 0320 	mov.w	r3, #32
   52522:	f3ef 8811 	mrs	r8, BASEPRI
   52526:	f383 8812 	msr	BASEPRI_MAX, r3
   5252a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   5252e:	68c3      	ldr	r3, [r0, #12]
   52530:	4a33      	ldr	r2, [pc, #204]	; (52600 <z_impl_k_mutex_lock+0xec>)
   52532:	b17b      	cbz	r3, 52554 <z_impl_k_mutex_lock+0x40>
   52534:	6880      	ldr	r0, [r0, #8]
   52536:	6891      	ldr	r1, [r2, #8]
   52538:	4288      	cmp	r0, r1
   5253a:	d019      	beq.n	52570 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   5253c:	ea57 0306 	orrs.w	r3, r7, r6
   52540:	d118      	bne.n	52574 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   52542:	f388 8811 	msr	BASEPRI, r8
   52546:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   5254a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   5254e:	b002      	add	sp, #8
   52550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   52554:	6891      	ldr	r1, [r2, #8]
   52556:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   5255a:	3301      	adds	r3, #1
   5255c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   5255e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   52560:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   52562:	60a3      	str	r3, [r4, #8]
   52564:	f388 8811 	msr	BASEPRI, r8
   52568:	f3bf 8f6f 	isb	sy
		return 0;
   5256c:	2000      	movs	r0, #0
   5256e:	e7ee      	b.n	5254e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   52570:	6921      	ldr	r1, [r4, #16]
   52572:	e7f2      	b.n	5255a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   52574:	f991 100e 	ldrsb.w	r1, [r1, #14]
   52578:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   5257c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   52580:	4299      	cmp	r1, r3
   52582:	bfa8      	it	ge
   52584:	4619      	movge	r1, r3
   52586:	4291      	cmp	r1, r2
   52588:	bfb8      	it	lt
   5258a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   5258c:	428b      	cmp	r3, r1
   5258e:	dd2e      	ble.n	525ee <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   52590:	f008 f986 	bl	5a8a0 <adjust_owner_prio.isra.0>
   52594:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   52596:	4622      	mov	r2, r4
   52598:	4641      	mov	r1, r8
   5259a:	e9cd 7600 	strd	r7, r6, [sp]
   5259e:	4819      	ldr	r0, [pc, #100]	; (52604 <z_impl_k_mutex_lock+0xf0>)
   525a0:	f000 fb30 	bl	52c04 <z_pend_curr>
	if (got_mutex == 0) {
   525a4:	2800      	cmp	r0, #0
   525a6:	d0e1      	beq.n	5256c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   525a8:	f04f 0320 	mov.w	r3, #32
   525ac:	f3ef 8611 	mrs	r6, BASEPRI
   525b0:	f383 8812 	msr	BASEPRI_MAX, r3
   525b4:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   525b8:	68a0      	ldr	r0, [r4, #8]
   525ba:	b1d0      	cbz	r0, 525f2 <z_impl_k_mutex_lock+0xde>
	return list->head == list;
   525bc:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   525be:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   525c0:	429c      	cmp	r4, r3
   525c2:	d00a      	beq.n	525da <z_impl_k_mutex_lock+0xc6>
   525c4:	b14b      	cbz	r3, 525da <z_impl_k_mutex_lock+0xc6>
   525c6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   525ca:	4299      	cmp	r1, r3
   525cc:	bfa8      	it	ge
   525ce:	4619      	movge	r1, r3
   525d0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   525d4:	4299      	cmp	r1, r3
   525d6:	bfb8      	it	lt
   525d8:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   525da:	f008 f961 	bl	5a8a0 <adjust_owner_prio.isra.0>
   525de:	b140      	cbz	r0, 525f2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   525e0:	4631      	mov	r1, r6
   525e2:	4808      	ldr	r0, [pc, #32]	; (52604 <z_impl_k_mutex_lock+0xf0>)
   525e4:	f000 fb72 	bl	52ccc <z_reschedule>
	return -EAGAIN;
   525e8:	f06f 000a 	mvn.w	r0, #10
   525ec:	e7af      	b.n	5254e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   525ee:	2500      	movs	r5, #0
   525f0:	e7d1      	b.n	52596 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   525f2:	2d00      	cmp	r5, #0
   525f4:	d1f4      	bne.n	525e0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   525f6:	f386 8811 	msr	BASEPRI, r6
   525fa:	f3bf 8f6f 	isb	sy
   525fe:	e7f3      	b.n	525e8 <z_impl_k_mutex_lock+0xd4>
   52600:	2001bc78 	.word	0x2001bc78
   52604:	2002083e 	.word	0x2002083e

00052608 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   52608:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   5260a:	6883      	ldr	r3, [r0, #8]
{
   5260c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   5260e:	b36b      	cbz	r3, 5266c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   52610:	4a19      	ldr	r2, [pc, #100]	; (52678 <z_impl_k_mutex_unlock+0x70>)
   52612:	6892      	ldr	r2, [r2, #8]
   52614:	4293      	cmp	r3, r2
   52616:	d12c      	bne.n	52672 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   52618:	68c3      	ldr	r3, [r0, #12]
   5261a:	2b01      	cmp	r3, #1
   5261c:	d903      	bls.n	52626 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   5261e:	3b01      	subs	r3, #1
   52620:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   52622:	2000      	movs	r0, #0
}
   52624:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   52626:	f04f 0320 	mov.w	r3, #32
   5262a:	f3ef 8511 	mrs	r5, BASEPRI
   5262e:	f383 8812 	msr	BASEPRI_MAX, r3
   52632:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   52636:	6901      	ldr	r1, [r0, #16]
   52638:	6880      	ldr	r0, [r0, #8]
   5263a:	f008 f931 	bl	5a8a0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   5263e:	4620      	mov	r0, r4
   52640:	f008 faaf 	bl	5aba2 <z_unpend_first_thread>
	mutex->owner = new_owner;
   52644:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   52646:	b158      	cbz	r0, 52660 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   52648:	f990 200e 	ldrsb.w	r2, [r0, #14]
   5264c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   5264e:	2200      	movs	r2, #0
   52650:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   52652:	f008 fa96 	bl	5ab82 <z_ready_thread>
		z_reschedule(&lock, key);
   52656:	4629      	mov	r1, r5
   52658:	4808      	ldr	r0, [pc, #32]	; (5267c <z_impl_k_mutex_unlock+0x74>)
   5265a:	f000 fb37 	bl	52ccc <z_reschedule>
   5265e:	e7e0      	b.n	52622 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   52660:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   52662:	f385 8811 	msr	BASEPRI, r5
   52666:	f3bf 8f6f 	isb	sy
   5266a:	e7da      	b.n	52622 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   5266c:	f06f 0015 	mvn.w	r0, #21
   52670:	e7d8      	b.n	52624 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   52672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   52676:	e7d5      	b.n	52624 <z_impl_k_mutex_unlock+0x1c>
   52678:	2001bc78 	.word	0x2001bc78
   5267c:	2002083e 	.word	0x2002083e

00052680 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   52680:	b537      	push	{r0, r1, r2, r4, r5, lr}
   52682:	4611      	mov	r1, r2
	__asm__ volatile(
   52684:	f04f 0220 	mov.w	r2, #32
   52688:	f3ef 8511 	mrs	r5, BASEPRI
   5268c:	f382 8812 	msr	BASEPRI_MAX, r2
   52690:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   52694:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   52696:	b19c      	cbz	r4, 526c0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   52698:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   5269a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   5269c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   526a0:	4294      	cmp	r4, r2
	list->head = node;
   526a2:	6003      	str	r3, [r0, #0]
	list->tail = node;
   526a4:	bf08      	it	eq
   526a6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   526a8:	2101      	movs	r1, #1
   526aa:	4620      	mov	r0, r4
   526ac:	f008 f96d 	bl	5a98a <z_queue_node_peek>
   526b0:	4604      	mov	r4, r0
	__asm__ volatile(
   526b2:	f385 8811 	msr	BASEPRI, r5
   526b6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   526ba:	4620      	mov	r0, r4
   526bc:	b003      	add	sp, #12
   526be:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   526c0:	ea51 0203 	orrs.w	r2, r1, r3
   526c4:	d0f5      	beq.n	526b2 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   526c6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   526ca:	e9cd 1300 	strd	r1, r3, [sp]
   526ce:	4610      	mov	r0, r2
   526d0:	4629      	mov	r1, r5
   526d2:	f000 fa97 	bl	52c04 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   526d6:	2800      	cmp	r0, #0
   526d8:	d1ef      	bne.n	526ba <z_impl_k_queue_get+0x3a>
   526da:	4b02      	ldr	r3, [pc, #8]	; (526e4 <z_impl_k_queue_get+0x64>)
   526dc:	689b      	ldr	r3, [r3, #8]
   526de:	695c      	ldr	r4, [r3, #20]
   526e0:	e7eb      	b.n	526ba <z_impl_k_queue_get+0x3a>
   526e2:	bf00      	nop
   526e4:	2001bc78 	.word	0x2001bc78

000526e8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   526e8:	b538      	push	{r3, r4, r5, lr}
   526ea:	4604      	mov	r4, r0
	__asm__ volatile(
   526ec:	f04f 0320 	mov.w	r3, #32
   526f0:	f3ef 8511 	mrs	r5, BASEPRI
   526f4:	f383 8812 	msr	BASEPRI_MAX, r3
   526f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   526fc:	f008 fa51 	bl	5aba2 <z_unpend_first_thread>

	if (thread != NULL) {
   52700:	b148      	cbz	r0, 52716 <z_impl_k_sem_give+0x2e>
   52702:	2200      	movs	r2, #0
   52704:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   52706:	f008 fa3c 	bl	5ab82 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   5270a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   5270c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   52710:	4807      	ldr	r0, [pc, #28]	; (52730 <z_impl_k_sem_give+0x48>)
   52712:	f000 badb 	b.w	52ccc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   52716:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   5271a:	429a      	cmp	r2, r3
   5271c:	bf18      	it	ne
   5271e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   52720:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   52722:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   52724:	f104 0010 	add.w	r0, r4, #16
   52728:	f008 fb7c 	bl	5ae24 <z_handle_obj_poll_events>
}
   5272c:	e7ed      	b.n	5270a <z_impl_k_sem_give+0x22>
   5272e:	bf00      	nop
   52730:	2002083e 	.word	0x2002083e

00052734 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   52734:	b513      	push	{r0, r1, r4, lr}
   52736:	f04f 0420 	mov.w	r4, #32
   5273a:	f3ef 8111 	mrs	r1, BASEPRI
   5273e:	f384 8812 	msr	BASEPRI_MAX, r4
   52742:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   52746:	6884      	ldr	r4, [r0, #8]
   52748:	b144      	cbz	r4, 5275c <z_impl_k_sem_take+0x28>
		sem->count--;
   5274a:	3c01      	subs	r4, #1
   5274c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   5274e:	f381 8811 	msr	BASEPRI, r1
   52752:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   52756:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   52758:	b002      	add	sp, #8
   5275a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   5275c:	ea52 0403 	orrs.w	r4, r2, r3
   52760:	d106      	bne.n	52770 <z_impl_k_sem_take+0x3c>
   52762:	f381 8811 	msr	BASEPRI, r1
   52766:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   5276a:	f06f 000f 	mvn.w	r0, #15
   5276e:	e7f3      	b.n	52758 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   52770:	e9cd 2300 	strd	r2, r3, [sp]
   52774:	4602      	mov	r2, r0
   52776:	4802      	ldr	r0, [pc, #8]	; (52780 <z_impl_k_sem_take+0x4c>)
   52778:	f000 fa44 	bl	52c04 <z_pend_curr>
	return ret;
   5277c:	e7ec      	b.n	52758 <z_impl_k_sem_take+0x24>
   5277e:	bf00      	nop
   52780:	2002083e 	.word	0x2002083e

00052784 <submit_to_queue_locked>:
{
   52784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   52786:	68c3      	ldr	r3, [r0, #12]
{
   52788:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   5278a:	079a      	lsls	r2, r3, #30
{
   5278c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   5278e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   52792:	d42c      	bmi.n	527ee <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   52794:	075b      	lsls	r3, r3, #29
   52796:	d41a      	bmi.n	527ce <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   52798:	680b      	ldr	r3, [r1, #0]
   5279a:	b90b      	cbnz	r3, 527a0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   5279c:	6883      	ldr	r3, [r0, #8]
   5279e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   527a0:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   527a2:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   527a4:	bf42      	ittt	mi
   527a6:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   527a8:	2602      	movmi	r6, #2
			*queuep = work->queue;
   527aa:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   527ac:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   527ae:	bf58      	it	pl
   527b0:	2601      	movpl	r6, #1
	if (queue == NULL) {
   527b2:	2d00      	cmp	r5, #0
   527b4:	d03a      	beq.n	5282c <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   527b6:	4b1f      	ldr	r3, [pc, #124]	; (52834 <submit_to_queue_locked+0xb0>)
   527b8:	689b      	ldr	r3, [r3, #8]
   527ba:	42ab      	cmp	r3, r5
   527bc:	d00a      	beq.n	527d4 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   527be:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   527c2:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   527c4:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   527c8:	d414      	bmi.n	527f4 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   527ca:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   527ce:	2300      	movs	r3, #0
   527d0:	603b      	str	r3, [r7, #0]
	return ret;
   527d2:	e025      	b.n	52820 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   527d4:	f008 f850 	bl	5a878 <k_is_in_isr>
   527d8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   527dc:	2800      	cmp	r0, #0
   527de:	d1f0      	bne.n	527c2 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   527e0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   527e2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   527e6:	d5f0      	bpl.n	527ca <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   527e8:	b152      	cbz	r2, 52800 <submit_to_queue_locked+0x7c>
   527ea:	075b      	lsls	r3, r3, #29
   527ec:	d408      	bmi.n	52800 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   527ee:	f06f 060f 	mvn.w	r6, #15
   527f2:	e7ec      	b.n	527ce <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   527f4:	2a00      	cmp	r2, #0
   527f6:	d1fa      	bne.n	527ee <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   527f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   527fc:	2b00      	cmp	r3, #0
   527fe:	d1f6      	bne.n	527ee <submit_to_queue_locked+0x6a>
	parent->next = child;
   52800:	2300      	movs	r3, #0
   52802:	6023      	str	r3, [r4, #0]
	return list->tail;
   52804:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   52808:	b963      	cbnz	r3, 52824 <submit_to_queue_locked+0xa0>
	list->head = node;
   5280a:	e9c5 4432 	strd	r4, r4, [r5, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   5280e:	4628      	mov	r0, r5
   52810:	f008 f8fb 	bl	5aa0a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   52814:	68e3      	ldr	r3, [r4, #12]
   52816:	f043 0304 	orr.w	r3, r3, #4
   5281a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   5281c:	683b      	ldr	r3, [r7, #0]
   5281e:	60a3      	str	r3, [r4, #8]
}
   52820:	4630      	mov	r0, r6
   52822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   52824:	601c      	str	r4, [r3, #0]
	list->tail = node;
   52826:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
}
   5282a:	e7f0      	b.n	5280e <submit_to_queue_locked+0x8a>
		return -EINVAL;
   5282c:	f06f 0615 	mvn.w	r6, #21
   52830:	e7cd      	b.n	527ce <submit_to_queue_locked+0x4a>
   52832:	bf00      	nop
   52834:	2001bc78 	.word	0x2001bc78

00052838 <k_work_submit>:
{
   52838:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   5283a:	4801      	ldr	r0, [pc, #4]	; (52840 <k_work_submit+0x8>)
   5283c:	f008 b928 	b.w	5aa90 <k_work_submit_to_queue>
   52840:	2001af88 	.word	0x2001af88

00052844 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   52844:	b5f0      	push	{r4, r5, r6, r7, lr}
   52846:	4604      	mov	r4, r0
	list->head = NULL;
   52848:	2000      	movs	r0, #0
   5284a:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   5284c:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   52850:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   52852:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   52856:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   5285a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   5285e:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   52862:	b31d      	cbz	r5, 528ac <k_work_queue_start+0x68>
   52864:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   52866:	2800      	cmp	r0, #0
   52868:	f240 1001 	movw	r0, #257	; 0x101
   5286c:	bf08      	it	eq
   5286e:	2001      	moveq	r0, #1
	*flagp = flags;
   52870:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   52874:	2000      	movs	r0, #0
   52876:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   5287a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   5287e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   52882:	e9cd 0001 	strd	r0, r0, [sp, #4]
   52886:	e9cd 6706 	strd	r6, r7, [sp, #24]
   5288a:	4620      	mov	r0, r4
   5288c:	4b08      	ldr	r3, [pc, #32]	; (528b0 <k_work_queue_start+0x6c>)
   5288e:	9400      	str	r4, [sp, #0]
   52890:	f7ff fd9c 	bl	523cc <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   52894:	b125      	cbz	r5, 528a0 <k_work_queue_start+0x5c>
   52896:	6829      	ldr	r1, [r5, #0]
   52898:	b111      	cbz	r1, 528a0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   5289a:	4620      	mov	r0, r4
   5289c:	f007 fff2 	bl	5a884 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   528a0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   528a2:	b009      	add	sp, #36	; 0x24
   528a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   528a8:	f007 bff1 	b.w	5a88e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   528ac:	2001      	movs	r0, #1
   528ae:	e7df      	b.n	52870 <k_work_queue_start+0x2c>
   528b0:	00041cc9 	.word	0x00041cc9

000528b4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   528b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   528b6:	9001      	str	r0, [sp, #4]
   528b8:	4608      	mov	r0, r1
	__asm__ volatile(
   528ba:	f04f 0120 	mov.w	r1, #32
   528be:	f3ef 8411 	mrs	r4, BASEPRI
   528c2:	f381 8812 	msr	BASEPRI_MAX, r1
   528c6:	f3bf 8f6f 	isb	sy
	return *flagp;
   528ca:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   528cc:	f011 0f0e 	tst.w	r1, #14
   528d0:	d116      	bne.n	52900 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   528d2:	ea53 0502 	orrs.w	r5, r3, r2
   528d6:	d108      	bne.n	528ea <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   528d8:	a901      	add	r1, sp, #4
   528da:	f7ff ff53 	bl	52784 <submit_to_queue_locked>
	__asm__ volatile(
   528de:	f384 8811 	msr	BASEPRI, r4
   528e2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   528e6:	b003      	add	sp, #12
   528e8:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   528ea:	f041 0108 	orr.w	r1, r1, #8
   528ee:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   528f0:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   528f2:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   528f4:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   528f6:	4903      	ldr	r1, [pc, #12]	; (52904 <k_work_schedule_for_queue+0x50>)
   528f8:	f000 fc02 	bl	53100 <z_add_timeout>
	return ret;
   528fc:	2001      	movs	r0, #1
   528fe:	e7ee      	b.n	528de <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   52900:	2000      	movs	r0, #0
   52902:	e7ec      	b.n	528de <k_work_schedule_for_queue+0x2a>
   52904:	0005aa19 	.word	0x0005aa19

00052908 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   52908:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   5290a:	4801      	ldr	r0, [pc, #4]	; (52910 <k_work_schedule+0x8>)
   5290c:	f7ff bfd2 	b.w	528b4 <k_work_schedule_for_queue>
   52910:	2001af88 	.word	0x2001af88

00052914 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   52914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   52916:	460c      	mov	r4, r1
   52918:	4616      	mov	r6, r2
   5291a:	461d      	mov	r5, r3
   5291c:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   5291e:	f04f 0320 	mov.w	r3, #32
   52922:	f3ef 8711 	mrs	r7, BASEPRI
   52926:	f383 8812 	msr	BASEPRI_MAX, r3
   5292a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   5292e:	4608      	mov	r0, r1
   52930:	f008 f85d 	bl	5a9ee <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   52934:	ea55 0306 	orrs.w	r3, r5, r6
   52938:	d109      	bne.n	5294e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   5293a:	4620      	mov	r0, r4
   5293c:	a901      	add	r1, sp, #4
   5293e:	f7ff ff21 	bl	52784 <submit_to_queue_locked>
	__asm__ volatile(
   52942:	f387 8811 	msr	BASEPRI, r7
   52946:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   5294a:	b003      	add	sp, #12
   5294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   5294e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   52950:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   52954:	f043 0308 	orr.w	r3, r3, #8
   52958:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   5295a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   5295c:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   5295e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   52960:	4902      	ldr	r1, [pc, #8]	; (5296c <k_work_reschedule_for_queue+0x58>)
   52962:	462b      	mov	r3, r5
   52964:	f000 fbcc 	bl	53100 <z_add_timeout>
	return ret;
   52968:	2001      	movs	r0, #1
   5296a:	e7ea      	b.n	52942 <k_work_reschedule_for_queue+0x2e>
   5296c:	0005aa19 	.word	0x0005aa19

00052970 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   52970:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   52972:	4801      	ldr	r0, [pc, #4]	; (52978 <k_work_reschedule+0x8>)
   52974:	f7ff bfce 	b.w	52914 <k_work_reschedule_for_queue>
   52978:	2001af88 	.word	0x2001af88

0005297c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   5297c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   5297e:	4d07      	ldr	r5, [pc, #28]	; (5299c <z_reset_time_slice+0x20>)
   52980:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   52982:	b154      	cbz	r4, 5299a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   52984:	f7f6 ff9a 	bl	498bc <sys_clock_elapsed>
   52988:	4b05      	ldr	r3, [pc, #20]	; (529a0 <z_reset_time_slice+0x24>)
   5298a:	4404      	add	r4, r0
   5298c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   5298e:	6828      	ldr	r0, [r5, #0]
   52990:	2100      	movs	r1, #0
	}
}
   52992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   52996:	f008 b9a3 	b.w	5ace0 <z_set_timeout_expiry>
}
   5299a:	bd38      	pop	{r3, r4, r5, pc}
   5299c:	2001bcb8 	.word	0x2001bcb8
   529a0:	2001bc78 	.word	0x2001bc78

000529a4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   529a4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   529a6:	4d0d      	ldr	r5, [pc, #52]	; (529dc <update_cache+0x38>)
   529a8:	462b      	mov	r3, r5
   529aa:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   529ae:	429c      	cmp	r4, r3
   529b0:	d000      	beq.n	529b4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   529b2:	b904      	cbnz	r4, 529b6 <update_cache+0x12>
   529b4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   529b6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   529b8:	b938      	cbnz	r0, 529ca <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   529ba:	7b5a      	ldrb	r2, [r3, #13]
   529bc:	06d2      	lsls	r2, r2, #27
   529be:	d104      	bne.n	529ca <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   529c0:	69a2      	ldr	r2, [r4, #24]
   529c2:	b912      	cbnz	r2, 529ca <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   529c4:	89da      	ldrh	r2, [r3, #14]
   529c6:	2a7f      	cmp	r2, #127	; 0x7f
   529c8:	d805      	bhi.n	529d6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   529ca:	429c      	cmp	r4, r3
   529cc:	d002      	beq.n	529d4 <update_cache+0x30>
			z_reset_time_slice(thread);
   529ce:	4620      	mov	r0, r4
   529d0:	f7ff ffd4 	bl	5297c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   529d4:	4623      	mov	r3, r4
   529d6:	622b      	str	r3, [r5, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   529d8:	bd38      	pop	{r3, r4, r5, pc}
   529da:	bf00      	nop
   529dc:	2001bc78 	.word	0x2001bc78

000529e0 <move_thread_to_end_of_prio_q>:
{
   529e0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   529e2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   529e6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   529e8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   529ea:	7b43      	ldrb	r3, [r0, #13]
   529ec:	da04      	bge.n	529f8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   529ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   529f2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   529f4:	f008 f869 	bl	5aaca <sys_dlist_remove>
	return list->head == list;
   529f8:	4a15      	ldr	r2, [pc, #84]	; (52a50 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   529fa:	7b4b      	ldrb	r3, [r1, #13]
   529fc:	4610      	mov	r0, r2
   529fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
   52a02:	734b      	strb	r3, [r1, #13]
   52a04:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return (node == list->tail) ? NULL : node->next;
   52a08:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52a0a:	4283      	cmp	r3, r0
   52a0c:	bf08      	it	eq
   52a0e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   52a10:	b923      	cbnz	r3, 52a1c <move_thread_to_end_of_prio_q+0x3c>
	node->prev = tail;
   52a12:	e9c1 0400 	strd	r0, r4, [r1]
	tail->next = node;
   52a16:	6021      	str	r1, [r4, #0]
	list->tail = node;
   52a18:	6291      	str	r1, [r2, #40]	; 0x28
}
   52a1a:	e00c      	b.n	52a36 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   52a1c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   52a20:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   52a24:	42b5      	cmp	r5, r6
   52a26:	d00e      	beq.n	52a46 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   52a28:	42ae      	cmp	r6, r5
   52a2a:	dd0c      	ble.n	52a46 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   52a2c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   52a2e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   52a32:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   52a34:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   52a36:	6890      	ldr	r0, [r2, #8]
}
   52a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   52a3c:	1a43      	subs	r3, r0, r1
   52a3e:	4258      	negs	r0, r3
   52a40:	4158      	adcs	r0, r3
   52a42:	f7ff bfaf 	b.w	529a4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   52a46:	429c      	cmp	r4, r3
   52a48:	d0e3      	beq.n	52a12 <move_thread_to_end_of_prio_q+0x32>
   52a4a:	681b      	ldr	r3, [r3, #0]
   52a4c:	e7e0      	b.n	52a10 <move_thread_to_end_of_prio_q+0x30>
   52a4e:	bf00      	nop
   52a50:	2001bc78 	.word	0x2001bc78

00052a54 <ready_thread>:
{
   52a54:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   52a56:	f990 300d 	ldrsb.w	r3, [r0, #13]
   52a5a:	7b42      	ldrb	r2, [r0, #13]
   52a5c:	2b00      	cmp	r3, #0
   52a5e:	db29      	blt.n	52ab4 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   52a60:	06d3      	lsls	r3, r2, #27
   52a62:	d127      	bne.n	52ab4 <ready_thread+0x60>
	return node->next != NULL;
   52a64:	6983      	ldr	r3, [r0, #24]
   52a66:	bb2b      	cbnz	r3, 52ab4 <ready_thread+0x60>
	return list->head == list;
   52a68:	4913      	ldr	r1, [pc, #76]	; (52ab8 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   52a6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   52a6e:	7342      	strb	r2, [r0, #13]
   52a70:	460a      	mov	r2, r1
   52a72:	f852 4f24 	ldr.w	r4, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52a76:	4294      	cmp	r4, r2
   52a78:	bf18      	it	ne
   52a7a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   52a7c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   52a7e:	b923      	cbnz	r3, 52a8a <ready_thread+0x36>
	node->prev = tail;
   52a80:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   52a84:	6020      	str	r0, [r4, #0]
	list->tail = node;
   52a86:	6288      	str	r0, [r1, #40]	; 0x28
}
   52a88:	e00c      	b.n	52aa4 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   52a8a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   52a8e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   52a92:	42b5      	cmp	r5, r6
   52a94:	d00a      	beq.n	52aac <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   52a96:	42ae      	cmp	r6, r5
   52a98:	dd08      	ble.n	52aac <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   52a9a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   52a9c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   52aa0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   52aa2:	6058      	str	r0, [r3, #4]
		update_cache(0);
   52aa4:	2000      	movs	r0, #0
}
   52aa6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   52aa8:	f7ff bf7c 	b.w	529a4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   52aac:	42a3      	cmp	r3, r4
   52aae:	d0e7      	beq.n	52a80 <ready_thread+0x2c>
   52ab0:	681b      	ldr	r3, [r3, #0]
   52ab2:	e7e4      	b.n	52a7e <ready_thread+0x2a>
}
   52ab4:	bc70      	pop	{r4, r5, r6}
   52ab6:	4770      	bx	lr
   52ab8:	2001bc78 	.word	0x2001bc78

00052abc <unready_thread>:
{
   52abc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   52abe:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   52ac2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   52ac4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   52ac6:	7b43      	ldrb	r3, [r0, #13]
   52ac8:	da04      	bge.n	52ad4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   52ace:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   52ad0:	f007 fffb 	bl	5aaca <sys_dlist_remove>
	update_cache(thread == _current);
   52ad4:	4b04      	ldr	r3, [pc, #16]	; (52ae8 <unready_thread+0x2c>)
   52ad6:	6898      	ldr	r0, [r3, #8]
   52ad8:	1a43      	subs	r3, r0, r1
   52ada:	4258      	negs	r0, r3
   52adc:	4158      	adcs	r0, r3
}
   52ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   52ae2:	f7ff bf5f 	b.w	529a4 <update_cache>
   52ae6:	bf00      	nop
   52ae8:	2001bc78 	.word	0x2001bc78

00052aec <pend_locked>:
{
   52aec:	b570      	push	{r4, r5, r6, lr}
   52aee:	4615      	mov	r5, r2
   52af0:	461c      	mov	r4, r3
   52af2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   52af4:	f008 f81d 	bl	5ab32 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   52af8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   52afc:	bf08      	it	eq
   52afe:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   52b02:	d008      	beq.n	52b16 <pend_locked+0x2a>
   52b04:	462a      	mov	r2, r5
   52b06:	4623      	mov	r3, r4
   52b08:	f106 0018 	add.w	r0, r6, #24
   52b0c:	4902      	ldr	r1, [pc, #8]	; (52b18 <pend_locked+0x2c>)
}
   52b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   52b12:	f000 baf5 	b.w	53100 <z_add_timeout>
   52b16:	bd70      	pop	{r4, r5, r6, pc}
   52b18:	0005aaef 	.word	0x0005aaef

00052b1c <k_sched_time_slice_set>:
{
   52b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   52b1e:	4604      	mov	r4, r0
   52b20:	460d      	mov	r5, r1
	__asm__ volatile(
   52b22:	f04f 0320 	mov.w	r3, #32
   52b26:	f3ef 8711 	mrs	r7, BASEPRI
   52b2a:	f383 8812 	msr	BASEPRI_MAX, r3
   52b2e:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   52b32:	2600      	movs	r6, #0
   52b34:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   52b38:	f240 30e7 	movw	r0, #999	; 0x3e7
   52b3c:	4631      	mov	r1, r6
   52b3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   52b42:	2300      	movs	r3, #0
   52b44:	fbe4 010c 	umlal	r0, r1, r4, ip
   52b48:	f7ed ffe2 	bl	40b10 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   52b4c:	42b4      	cmp	r4, r6
   52b4e:	dd02      	ble.n	52b56 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   52b50:	2802      	cmp	r0, #2
   52b52:	bfb8      	it	lt
   52b54:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   52b56:	4a07      	ldr	r2, [pc, #28]	; (52b74 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   52b58:	4b07      	ldr	r3, [pc, #28]	; (52b78 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   52b5a:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   52b5c:	4a07      	ldr	r2, [pc, #28]	; (52b7c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   52b5e:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   52b60:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   52b62:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   52b64:	f7ff ff0a 	bl	5297c <z_reset_time_slice>
	__asm__ volatile(
   52b68:	f387 8811 	msr	BASEPRI, r7
   52b6c:	f3bf 8f6f 	isb	sy
}
   52b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   52b72:	bf00      	nop
   52b74:	2001bcb8 	.word	0x2001bcb8
   52b78:	2001bc78 	.word	0x2001bc78
   52b7c:	2001bcb4 	.word	0x2001bcb4

00052b80 <z_time_slice>:
{
   52b80:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   52b82:	f04f 0320 	mov.w	r3, #32
   52b86:	f3ef 8511 	mrs	r5, BASEPRI
   52b8a:	f383 8812 	msr	BASEPRI_MAX, r3
   52b8e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   52b92:	4b17      	ldr	r3, [pc, #92]	; (52bf0 <z_time_slice+0x70>)
   52b94:	4a17      	ldr	r2, [pc, #92]	; (52bf4 <z_time_slice+0x74>)
   52b96:	689c      	ldr	r4, [r3, #8]
   52b98:	6811      	ldr	r1, [r2, #0]
   52b9a:	428c      	cmp	r4, r1
   52b9c:	d107      	bne.n	52bae <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   52b9e:	4620      	mov	r0, r4
   52ba0:	f7ff feec 	bl	5297c <z_reset_time_slice>
	__asm__ volatile(
   52ba4:	f385 8811 	msr	BASEPRI, r5
   52ba8:	f3bf 8f6f 	isb	sy
}
   52bac:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   52bae:	2100      	movs	r1, #0
   52bb0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   52bb2:	4a11      	ldr	r2, [pc, #68]	; (52bf8 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   52bb4:	6812      	ldr	r2, [r2, #0]
   52bb6:	b1c2      	cbz	r2, 52bea <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   52bb8:	89e2      	ldrh	r2, [r4, #14]
   52bba:	2a7f      	cmp	r2, #127	; 0x7f
   52bbc:	d815      	bhi.n	52bea <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   52bbe:	7b62      	ldrb	r2, [r4, #13]
   52bc0:	06d2      	lsls	r2, r2, #27
   52bc2:	d112      	bne.n	52bea <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   52bc4:	4a0d      	ldr	r2, [pc, #52]	; (52bfc <z_time_slice+0x7c>)
   52bc6:	f994 100e 	ldrsb.w	r1, [r4, #14]
   52bca:	6812      	ldr	r2, [r2, #0]
   52bcc:	4291      	cmp	r1, r2
   52bce:	db0c      	blt.n	52bea <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   52bd0:	4a0b      	ldr	r2, [pc, #44]	; (52c00 <z_time_slice+0x80>)
   52bd2:	4294      	cmp	r4, r2
   52bd4:	d009      	beq.n	52bea <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   52bd6:	691a      	ldr	r2, [r3, #16]
   52bd8:	4282      	cmp	r2, r0
   52bda:	dc03      	bgt.n	52be4 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   52bdc:	4620      	mov	r0, r4
   52bde:	f7ff feff 	bl	529e0 <move_thread_to_end_of_prio_q>
   52be2:	e7dc      	b.n	52b9e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   52be4:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   52be6:	611a      	str	r2, [r3, #16]
   52be8:	e7dc      	b.n	52ba4 <z_time_slice+0x24>
   52bea:	2200      	movs	r2, #0
   52bec:	e7fb      	b.n	52be6 <z_time_slice+0x66>
   52bee:	bf00      	nop
   52bf0:	2001bc78 	.word	0x2001bc78
   52bf4:	2001bcb0 	.word	0x2001bcb0
   52bf8:	2001bcb8 	.word	0x2001bcb8
   52bfc:	2001bcb4 	.word	0x2001bcb4
   52c00:	2001adf0 	.word	0x2001adf0

00052c04 <z_pend_curr>:
{
   52c04:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   52c06:	480c      	ldr	r0, [pc, #48]	; (52c38 <z_pend_curr+0x34>)
   52c08:	4d0c      	ldr	r5, [pc, #48]	; (52c3c <z_pend_curr+0x38>)
   52c0a:	6886      	ldr	r6, [r0, #8]
{
   52c0c:	460c      	mov	r4, r1
	pending_current = _current;
   52c0e:	602e      	str	r6, [r5, #0]
{
   52c10:	4611      	mov	r1, r2
   52c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   52c16:	f04f 0620 	mov.w	r6, #32
   52c1a:	f3ef 8511 	mrs	r5, BASEPRI
   52c1e:	f386 8812 	msr	BASEPRI_MAX, r6
   52c22:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   52c26:	6880      	ldr	r0, [r0, #8]
   52c28:	f7ff ff60 	bl	52aec <pend_locked>
	ret = arch_swap(key);
   52c2c:	4620      	mov	r0, r4
}
   52c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   52c32:	f7f3 b949 	b.w	45ec8 <arch_swap>
   52c36:	bf00      	nop
   52c38:	2001bc78 	.word	0x2001bc78
   52c3c:	2001bcb0 	.word	0x2001bcb0

00052c40 <z_set_prio>:
{
   52c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   52c42:	4604      	mov	r4, r0
   52c44:	f04f 0320 	mov.w	r3, #32
   52c48:	f3ef 8611 	mrs	r6, BASEPRI
   52c4c:	f383 8812 	msr	BASEPRI_MAX, r3
   52c50:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   52c54:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   52c56:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   52c58:	06da      	lsls	r2, r3, #27
   52c5a:	d119      	bne.n	52c90 <z_set_prio+0x50>
	return node->next != NULL;
   52c5c:	6985      	ldr	r5, [r0, #24]
   52c5e:	b9bd      	cbnz	r5, 52c90 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   52c64:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   52c66:	f007 ff30 	bl	5aaca <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   52c6a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   52c6c:	4a16      	ldr	r2, [pc, #88]	; (52cc8 <z_set_prio+0x88>)
   52c6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   52c72:	7343      	strb	r3, [r0, #13]
   52c74:	4613      	mov	r3, r2
				thread->base.prio = prio;
   52c76:	7381      	strb	r1, [r0, #14]
   52c78:	f853 0f24 	ldr.w	r0, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52c7c:	4298      	cmp	r0, r3
   52c7e:	bf18      	it	ne
   52c80:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   52c82:	6a90      	ldr	r0, [r2, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   52c84:	b95d      	cbnz	r5, 52c9e <z_set_prio+0x5e>
	node->prev = tail;
   52c86:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   52c8a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   52c8c:	6294      	str	r4, [r2, #40]	; 0x28
}
   52c8e:	e011      	b.n	52cb4 <z_set_prio+0x74>
   52c90:	2000      	movs	r0, #0
			thread->base.prio = prio;
   52c92:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   52c94:	f386 8811 	msr	BASEPRI, r6
   52c98:	f3bf 8f6f 	isb	sy
}
   52c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   52c9e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   52ca2:	42b9      	cmp	r1, r7
   52ca4:	d00b      	beq.n	52cbe <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   52ca6:	428f      	cmp	r7, r1
   52ca8:	dd09      	ble.n	52cbe <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   52caa:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   52cac:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   52cb0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   52cb2:	606c      	str	r4, [r5, #4]
			update_cache(1);
   52cb4:	2001      	movs	r0, #1
   52cb6:	f7ff fe75 	bl	529a4 <update_cache>
   52cba:	2001      	movs	r0, #1
   52cbc:	e7ea      	b.n	52c94 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   52cbe:	42a8      	cmp	r0, r5
   52cc0:	d0e1      	beq.n	52c86 <z_set_prio+0x46>
   52cc2:	682d      	ldr	r5, [r5, #0]
   52cc4:	e7de      	b.n	52c84 <z_set_prio+0x44>
   52cc6:	bf00      	nop
   52cc8:	2001bc78 	.word	0x2001bc78

00052ccc <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   52ccc:	b949      	cbnz	r1, 52ce2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   52cce:	f3ef 8005 	mrs	r0, IPSR
   52cd2:	b930      	cbnz	r0, 52ce2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   52cd4:	4b05      	ldr	r3, [pc, #20]	; (52cec <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   52cd6:	6a1a      	ldr	r2, [r3, #32]
   52cd8:	689b      	ldr	r3, [r3, #8]
   52cda:	429a      	cmp	r2, r3
   52cdc:	d001      	beq.n	52ce2 <z_reschedule+0x16>
   52cde:	f7f3 b8f3 	b.w	45ec8 <arch_swap>
   52ce2:	f381 8811 	msr	BASEPRI, r1
   52ce6:	f3bf 8f6f 	isb	sy
}
   52cea:	4770      	bx	lr
   52cec:	2001bc78 	.word	0x2001bc78

00052cf0 <z_sched_start>:
{
   52cf0:	b510      	push	{r4, lr}
	__asm__ volatile(
   52cf2:	f04f 0220 	mov.w	r2, #32
   52cf6:	f3ef 8411 	mrs	r4, BASEPRI
   52cfa:	f382 8812 	msr	BASEPRI_MAX, r2
   52cfe:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   52d02:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   52d04:	0751      	lsls	r1, r2, #29
   52d06:	d404      	bmi.n	52d12 <z_sched_start+0x22>
	__asm__ volatile(
   52d08:	f384 8811 	msr	BASEPRI, r4
   52d0c:	f3bf 8f6f 	isb	sy
}
   52d10:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   52d12:	f022 0204 	bic.w	r2, r2, #4
   52d16:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   52d18:	f7ff fe9c 	bl	52a54 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   52d1c:	4621      	mov	r1, r4
}
   52d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   52d22:	4801      	ldr	r0, [pc, #4]	; (52d28 <z_sched_start+0x38>)
   52d24:	f7ff bfd2 	b.w	52ccc <z_reschedule>
   52d28:	2002083e 	.word	0x2002083e

00052d2c <z_impl_k_thread_suspend>:
{
   52d2c:	b570      	push	{r4, r5, r6, lr}
   52d2e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   52d30:	3018      	adds	r0, #24
   52d32:	f007 ffaf 	bl	5ac94 <z_abort_timeout>
	__asm__ volatile(
   52d36:	f04f 0320 	mov.w	r3, #32
   52d3a:	f3ef 8611 	mrs	r6, BASEPRI
   52d3e:	f383 8812 	msr	BASEPRI_MAX, r3
   52d42:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   52d46:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   52d4a:	7b63      	ldrb	r3, [r4, #13]
   52d4c:	2a00      	cmp	r2, #0
   52d4e:	da05      	bge.n	52d5c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   52d54:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52d56:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   52d58:	f007 feb7 	bl	5aaca <sys_dlist_remove>
		update_cache(thread == _current);
   52d5c:	4d0b      	ldr	r5, [pc, #44]	; (52d8c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   52d5e:	7b63      	ldrb	r3, [r4, #13]
   52d60:	68a8      	ldr	r0, [r5, #8]
   52d62:	f043 0310 	orr.w	r3, r3, #16
   52d66:	7363      	strb	r3, [r4, #13]
   52d68:	1b03      	subs	r3, r0, r4
   52d6a:	4258      	negs	r0, r3
   52d6c:	4158      	adcs	r0, r3
   52d6e:	f7ff fe19 	bl	529a4 <update_cache>
	__asm__ volatile(
   52d72:	f386 8811 	msr	BASEPRI, r6
   52d76:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   52d7a:	68ab      	ldr	r3, [r5, #8]
   52d7c:	42a3      	cmp	r3, r4
   52d7e:	d103      	bne.n	52d88 <z_impl_k_thread_suspend+0x5c>
}
   52d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   52d84:	f007 bf49 	b.w	5ac1a <z_reschedule_unlocked>
}
   52d88:	bd70      	pop	{r4, r5, r6, pc}
   52d8a:	bf00      	nop
   52d8c:	2001bc78 	.word	0x2001bc78

00052d90 <k_sched_lock>:
	__asm__ volatile(
   52d90:	f04f 0320 	mov.w	r3, #32
   52d94:	f3ef 8111 	mrs	r1, BASEPRI
   52d98:	f383 8812 	msr	BASEPRI_MAX, r3
   52d9c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   52da0:	4b04      	ldr	r3, [pc, #16]	; (52db4 <k_sched_lock+0x24>)
   52da2:	689a      	ldr	r2, [r3, #8]
   52da4:	7bd3      	ldrb	r3, [r2, #15]
   52da6:	3b01      	subs	r3, #1
   52da8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   52daa:	f381 8811 	msr	BASEPRI, r1
   52dae:	f3bf 8f6f 	isb	sy
}
   52db2:	4770      	bx	lr
   52db4:	2001bc78 	.word	0x2001bc78

00052db8 <k_sched_unlock>:
{
   52db8:	b510      	push	{r4, lr}
	__asm__ volatile(
   52dba:	f04f 0320 	mov.w	r3, #32
   52dbe:	f3ef 8411 	mrs	r4, BASEPRI
   52dc2:	f383 8812 	msr	BASEPRI_MAX, r3
   52dc6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   52dca:	4b08      	ldr	r3, [pc, #32]	; (52dec <k_sched_unlock+0x34>)
		update_cache(0);
   52dcc:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   52dce:	689a      	ldr	r2, [r3, #8]
   52dd0:	7bd3      	ldrb	r3, [r2, #15]
   52dd2:	3301      	adds	r3, #1
   52dd4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   52dd6:	f7ff fde5 	bl	529a4 <update_cache>
	__asm__ volatile(
   52dda:	f384 8811 	msr	BASEPRI, r4
   52dde:	f3bf 8f6f 	isb	sy
}
   52de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   52de6:	f007 bf18 	b.w	5ac1a <z_reschedule_unlocked>
   52dea:	bf00      	nop
   52dec:	2001bc78 	.word	0x2001bc78

00052df0 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   52df0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   52df2:	4b04      	ldr	r3, [pc, #16]	; (52e04 <z_sched_init+0x14>)
   52df4:	4608      	mov	r0, r1
   52df6:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
   52dfa:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
   52dfe:	f7ff be8d 	b.w	52b1c <k_sched_time_slice_set>
   52e02:	bf00      	nop
   52e04:	2001bc78 	.word	0x2001bc78

00052e08 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   52e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   52e0a:	f04f 0320 	mov.w	r3, #32
   52e0e:	f3ef 8511 	mrs	r5, BASEPRI
   52e12:	f383 8812 	msr	BASEPRI_MAX, r3
   52e16:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   52e1a:	4919      	ldr	r1, [pc, #100]	; (52e80 <z_impl_k_yield+0x78>)
   52e1c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52e1e:	7b43      	ldrb	r3, [r0, #13]
   52e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   52e24:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   52e26:	f007 fe50 	bl	5aaca <sys_dlist_remove>
	return list->head == list;
   52e2a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   52e2c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   52e2e:	7b5a      	ldrb	r2, [r3, #13]
   52e30:	f062 027f 	orn	r2, r2, #127	; 0x7f
   52e34:	735a      	strb	r2, [r3, #13]
   52e36:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return (node == list->tail) ? NULL : node->next;
   52e3a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52e3c:	4282      	cmp	r2, r0
   52e3e:	bf08      	it	eq
   52e40:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   52e42:	b922      	cbnz	r2, 52e4e <z_impl_k_yield+0x46>
	node->prev = tail;
   52e44:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   52e48:	6023      	str	r3, [r4, #0]
	list->tail = node;
   52e4a:	628b      	str	r3, [r1, #40]	; 0x28
}
   52e4c:	e00c      	b.n	52e68 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   52e4e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   52e52:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   52e56:	42be      	cmp	r6, r7
   52e58:	d00e      	beq.n	52e78 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   52e5a:	42b7      	cmp	r7, r6
   52e5c:	dd0c      	ble.n	52e78 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   52e5e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   52e60:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   52e64:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   52e66:	6053      	str	r3, [r2, #4]
	update_cache(1);
   52e68:	2001      	movs	r0, #1
   52e6a:	f7ff fd9b 	bl	529a4 <update_cache>
   52e6e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   52e70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   52e74:	f7f3 b828 	b.w	45ec8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   52e78:	42a2      	cmp	r2, r4
   52e7a:	d0e3      	beq.n	52e44 <z_impl_k_yield+0x3c>
   52e7c:	6812      	ldr	r2, [r2, #0]
   52e7e:	e7e0      	b.n	52e42 <z_impl_k_yield+0x3a>
   52e80:	2001bc78 	.word	0x2001bc78

00052e84 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   52e84:	ea50 0301 	orrs.w	r3, r0, r1
{
   52e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   52e8c:	4605      	mov	r5, r0
   52e8e:	460e      	mov	r6, r1
	if (ticks == 0) {
   52e90:	d103      	bne.n	52e9a <z_tick_sleep+0x16>
	z_impl_k_yield();
   52e92:	f7ff ffb9 	bl	52e08 <z_impl_k_yield>
		k_yield();
		return 0;
   52e96:	2000      	movs	r0, #0
   52e98:	e02c      	b.n	52ef4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   52e9a:	1c83      	adds	r3, r0, #2
   52e9c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   52ea0:	db2a      	blt.n	52ef8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   52ea2:	f007 ff39 	bl	5ad18 <sys_clock_tick_get_32>
   52ea6:	1944      	adds	r4, r0, r5
   52ea8:	f04f 0320 	mov.w	r3, #32
   52eac:	f3ef 8811 	mrs	r8, BASEPRI
   52eb0:	f383 8812 	msr	BASEPRI_MAX, r3
   52eb4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   52eb8:	4f11      	ldr	r7, [pc, #68]	; (52f00 <z_tick_sleep+0x7c>)
   52eba:	4b12      	ldr	r3, [pc, #72]	; (52f04 <z_tick_sleep+0x80>)
   52ebc:	68b8      	ldr	r0, [r7, #8]
   52ebe:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   52ec0:	f7ff fdfc 	bl	52abc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   52ec4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   52ec6:	4910      	ldr	r1, [pc, #64]	; (52f08 <z_tick_sleep+0x84>)
   52ec8:	462a      	mov	r2, r5
   52eca:	4633      	mov	r3, r6
   52ecc:	3018      	adds	r0, #24
   52ece:	f000 f917 	bl	53100 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   52ed2:	68ba      	ldr	r2, [r7, #8]
   52ed4:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   52ed6:	7b53      	ldrb	r3, [r2, #13]
   52ed8:	f043 0310 	orr.w	r3, r3, #16
   52edc:	7353      	strb	r3, [r2, #13]
   52ede:	f7f2 fff3 	bl	45ec8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   52ee2:	f007 ff19 	bl	5ad18 <sys_clock_tick_get_32>
   52ee6:	1a20      	subs	r0, r4, r0
   52ee8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   52eec:	2801      	cmp	r0, #1
   52eee:	f173 0300 	sbcs.w	r3, r3, #0
   52ef2:	dbd0      	blt.n	52e96 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   52ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   52ef8:	f06f 0401 	mvn.w	r4, #1
   52efc:	1a24      	subs	r4, r4, r0
   52efe:	e7d3      	b.n	52ea8 <z_tick_sleep+0x24>
   52f00:	2001bc78 	.word	0x2001bc78
   52f04:	2001bcb0 	.word	0x2001bcb0
   52f08:	0005aaef 	.word	0x0005aaef

00052f0c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   52f0c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   52f10:	bf08      	it	eq
   52f12:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   52f16:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   52f18:	d106      	bne.n	52f28 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   52f1a:	4b08      	ldr	r3, [pc, #32]	; (52f3c <z_impl_k_sleep+0x30>)
   52f1c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   52f1e:	f7ff ff05 	bl	52d2c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   52f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   52f26:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   52f28:	f7ff ffac 	bl	52e84 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   52f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   52f30:	fb80 0303 	smull	r0, r3, r0, r3
   52f34:	0bc0      	lsrs	r0, r0, #15
   52f36:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   52f3a:	e7f4      	b.n	52f26 <z_impl_k_sleep+0x1a>
   52f3c:	2001bc78 	.word	0x2001bc78

00052f40 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   52f40:	4b01      	ldr	r3, [pc, #4]	; (52f48 <z_impl_z_current_get+0x8>)
   52f42:	6898      	ldr	r0, [r3, #8]
   52f44:	4770      	bx	lr
   52f46:	bf00      	nop
   52f48:	2001bc78 	.word	0x2001bc78

00052f4c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   52f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   52f50:	4604      	mov	r4, r0
   52f52:	f04f 0320 	mov.w	r3, #32
   52f56:	f3ef 8611 	mrs	r6, BASEPRI
   52f5a:	f383 8812 	msr	BASEPRI_MAX, r3
   52f5e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   52f62:	7b03      	ldrb	r3, [r0, #12]
   52f64:	07d9      	lsls	r1, r3, #31
   52f66:	d50b      	bpl.n	52f80 <z_thread_abort+0x34>
	__asm__ volatile(
   52f68:	f386 8811 	msr	BASEPRI, r6
   52f6c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   52f70:	4040      	eors	r0, r0
   52f72:	f380 8811 	msr	BASEPRI, r0
   52f76:	f04f 0004 	mov.w	r0, #4
   52f7a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   52f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   52f80:	7b43      	ldrb	r3, [r0, #13]
   52f82:	071a      	lsls	r2, r3, #28
   52f84:	d504      	bpl.n	52f90 <z_thread_abort+0x44>
   52f86:	f386 8811 	msr	BASEPRI, r6
   52f8a:	f3bf 8f6f 	isb	sy
   52f8e:	e7f5      	b.n	52f7c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   52f90:	f023 0220 	bic.w	r2, r3, #32
   52f94:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   52f98:	09d2      	lsrs	r2, r2, #7
   52f9a:	d120      	bne.n	52fde <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   52f9c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   52f9e:	68a3      	ldr	r3, [r4, #8]
   52fa0:	b113      	cbz	r3, 52fa8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   52fa2:	4620      	mov	r0, r4
   52fa4:	f007 fd99 	bl	5aada <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   52fa8:	f104 0018 	add.w	r0, r4, #24
   52fac:	f007 fe72 	bl	5ac94 <z_abort_timeout>
   52fb0:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   52fb4:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   52fb8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   52fba:	42bd      	cmp	r5, r7
   52fbc:	d000      	beq.n	52fc0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   52fbe:	b9b5      	cbnz	r5, 52fee <z_thread_abort+0xa2>
		update_cache(1);
   52fc0:	2001      	movs	r0, #1
   52fc2:	f7ff fcef 	bl	529a4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   52fc6:	4b10      	ldr	r3, [pc, #64]	; (53008 <z_thread_abort+0xbc>)
   52fc8:	689b      	ldr	r3, [r3, #8]
   52fca:	42a3      	cmp	r3, r4
   52fcc:	d1db      	bne.n	52f86 <z_thread_abort+0x3a>
   52fce:	f3ef 8305 	mrs	r3, IPSR
   52fd2:	2b00      	cmp	r3, #0
   52fd4:	d1d7      	bne.n	52f86 <z_thread_abort+0x3a>
   52fd6:	4630      	mov	r0, r6
   52fd8:	f7f2 ff76 	bl	45ec8 <arch_swap>
	return ret;
   52fdc:	e7d3      	b.n	52f86 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   52fde:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   52fe2:	f043 0308 	orr.w	r3, r3, #8
   52fe6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   52fe8:	f007 fd6f 	bl	5aaca <sys_dlist_remove>
}
   52fec:	e7d7      	b.n	52f9e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   52fee:	4628      	mov	r0, r5
   52ff0:	f007 fd73 	bl	5aada <unpend_thread_no_timeout>
   52ff4:	f105 0018 	add.w	r0, r5, #24
   52ff8:	f007 fe4c 	bl	5ac94 <z_abort_timeout>
		ready_thread(thread);
   52ffc:	4628      	mov	r0, r5
   52ffe:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   53002:	f7ff fd27 	bl	52a54 <ready_thread>
   53006:	e7d7      	b.n	52fb8 <z_thread_abort+0x6c>
   53008:	2001bc78 	.word	0x2001bc78

0005300c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   5300c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   5300e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   53012:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   53014:	e9cd 6700 	strd	r6, r7, [sp]
   53018:	f7ff fdf4 	bl	52c04 <z_pend_curr>

	if (data != NULL) {
   5301c:	b11c      	cbz	r4, 53026 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   5301e:	4b03      	ldr	r3, [pc, #12]	; (5302c <z_sched_wait+0x20>)
   53020:	689b      	ldr	r3, [r3, #8]
   53022:	695b      	ldr	r3, [r3, #20]
   53024:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   53026:	b002      	add	sp, #8
   53028:	bdd0      	pop	{r4, r6, r7, pc}
   5302a:	bf00      	nop
   5302c:	2001bc78 	.word	0x2001bc78

00053030 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   53030:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   53032:	4806      	ldr	r0, [pc, #24]	; (5304c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   53034:	4a06      	ldr	r2, [pc, #24]	; (53050 <z_data_copy+0x20>)
   53036:	4907      	ldr	r1, [pc, #28]	; (53054 <z_data_copy+0x24>)
   53038:	1a12      	subs	r2, r2, r0
   5303a:	f007 fb5f 	bl	5a6fc <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   5303e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   53042:	4a05      	ldr	r2, [pc, #20]	; (53058 <z_data_copy+0x28>)
   53044:	4905      	ldr	r1, [pc, #20]	; (5305c <z_data_copy+0x2c>)
   53046:	4806      	ldr	r0, [pc, #24]	; (53060 <z_data_copy+0x30>)
   53048:	f007 bb58 	b.w	5a6fc <z_early_memcpy>
   5304c:	2001a500 	.word	0x2001a500
   53050:	2001ac70 	.word	0x2001ac70
   53054:	00060c4c 	.word	0x00060c4c
   53058:	00000000 	.word	0x00000000
   5305c:	00060c34 	.word	0x00060c34
   53060:	2001a500 	.word	0x2001a500

00053064 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   53064:	4b03      	ldr	r3, [pc, #12]	; (53074 <elapsed+0x10>)
   53066:	681b      	ldr	r3, [r3, #0]
   53068:	b90b      	cbnz	r3, 5306e <elapsed+0xa>
   5306a:	f7f6 bc27 	b.w	498bc <sys_clock_elapsed>
}
   5306e:	2000      	movs	r0, #0
   53070:	4770      	bx	lr
   53072:	bf00      	nop
   53074:	2001bcbc 	.word	0x2001bcbc

00053078 <next_timeout>:

static int32_t next_timeout(void)
{
   53078:	b510      	push	{r4, lr}
	return list->head == list;
   5307a:	4b11      	ldr	r3, [pc, #68]	; (530c0 <next_timeout+0x48>)
   5307c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5307e:	429c      	cmp	r4, r3
   53080:	d10a      	bne.n	53098 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   53082:	f7ff ffef 	bl	53064 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   53086:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   5308a:	4b0e      	ldr	r3, [pc, #56]	; (530c4 <next_timeout+0x4c>)
   5308c:	691b      	ldr	r3, [r3, #16]
   5308e:	b113      	cbz	r3, 53096 <next_timeout+0x1e>
   53090:	4298      	cmp	r0, r3
   53092:	bfa8      	it	ge
   53094:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   53096:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   53098:	f7ff ffe4 	bl	53064 <elapsed>
	if ((to == NULL) ||
   5309c:	2c00      	cmp	r4, #0
   5309e:	d0f2      	beq.n	53086 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   530a0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   530a4:	1a1b      	subs	r3, r3, r0
   530a6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   530aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   530ae:	f172 0100 	sbcs.w	r1, r2, #0
   530b2:	dae8      	bge.n	53086 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   530b4:	2a00      	cmp	r2, #0
   530b6:	bfac      	ite	ge
   530b8:	4618      	movge	r0, r3
   530ba:	2000      	movlt	r0, #0
   530bc:	e7e5      	b.n	5308a <next_timeout+0x12>
   530be:	bf00      	nop
   530c0:	2001a828 	.word	0x2001a828
   530c4:	2001bc78 	.word	0x2001bc78

000530c8 <remove_timeout>:
{
   530c8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   530ca:	b170      	cbz	r0, 530ea <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   530cc:	4b0b      	ldr	r3, [pc, #44]	; (530fc <remove_timeout+0x34>)
   530ce:	685b      	ldr	r3, [r3, #4]
   530d0:	4298      	cmp	r0, r3
   530d2:	d00a      	beq.n	530ea <remove_timeout+0x22>
   530d4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   530d6:	b143      	cbz	r3, 530ea <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   530d8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   530dc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   530e0:	1912      	adds	r2, r2, r4
   530e2:	eb41 0105 	adc.w	r1, r1, r5
   530e6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   530ea:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   530ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   530f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   530f2:	2300      	movs	r3, #0
	node->prev = NULL;
   530f4:	e9c0 3300 	strd	r3, r3, [r0]
}
   530f8:	bd30      	pop	{r4, r5, pc}
   530fa:	bf00      	nop
   530fc:	2001a828 	.word	0x2001a828

00053100 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   53100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   53104:	bf08      	it	eq
   53106:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   5310a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5310c:	4604      	mov	r4, r0
   5310e:	461d      	mov	r5, r3
   53110:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   53112:	d061      	beq.n	531d8 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   53114:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   53116:	f04f 0320 	mov.w	r3, #32
   5311a:	f3ef 8711 	mrs	r7, BASEPRI
   5311e:	f383 8812 	msr	BASEPRI_MAX, r3
   53122:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   53126:	3201      	adds	r2, #1
   53128:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   5312c:	da24      	bge.n	53178 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   5312e:	f06f 0301 	mvn.w	r3, #1
   53132:	492f      	ldr	r1, [pc, #188]	; (531f0 <z_add_timeout+0xf0>)
   53134:	e9d1 2000 	ldrd	r2, r0, [r1]
   53138:	1a9b      	subs	r3, r3, r2
   5313a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   5313e:	eb62 0000 	sbc.w	r0, r2, r0
   53142:	1b9e      	subs	r6, r3, r6
   53144:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   53148:	2e01      	cmp	r6, #1
   5314a:	f170 0300 	sbcs.w	r3, r0, #0
   5314e:	da01      	bge.n	53154 <z_add_timeout+0x54>
   53150:	2601      	movs	r6, #1
   53152:	2000      	movs	r0, #0
   53154:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   53158:	4e26      	ldr	r6, [pc, #152]	; (531f4 <z_add_timeout+0xf4>)
   5315a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   5315e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   53160:	45b4      	cmp	ip, r6
   53162:	bf08      	it	eq
   53164:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   53168:	f1bc 0f00 	cmp.w	ip, #0
   5316c:	d10d      	bne.n	5318a <z_add_timeout+0x8a>
	node->prev = tail;
   5316e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   53172:	602c      	str	r4, [r5, #0]
	list->tail = node;
   53174:	6074      	str	r4, [r6, #4]
}
   53176:	e01c      	b.n	531b2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   53178:	f7ff ff74 	bl	53064 <elapsed>
   5317c:	3601      	adds	r6, #1
   5317e:	f145 0500 	adc.w	r5, r5, #0
   53182:	1836      	adds	r6, r6, r0
   53184:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   53188:	e7e4      	b.n	53154 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   5318a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   5318e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   53192:	4293      	cmp	r3, r2
   53194:	eb71 0e00 	sbcs.w	lr, r1, r0
   53198:	da1f      	bge.n	531da <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   5319a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   5319c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   531a0:	eb60 0001 	sbc.w	r0, r0, r1
   531a4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   531a8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   531ac:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   531ae:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   531b2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   531b4:	42b3      	cmp	r3, r6
   531b6:	d00b      	beq.n	531d0 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   531b8:	429c      	cmp	r4, r3
   531ba:	d109      	bne.n	531d0 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   531bc:	f7ff ff5c 	bl	53078 <next_timeout>

			if (next_time == 0 ||
   531c0:	b118      	cbz	r0, 531ca <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   531c2:	4b0d      	ldr	r3, [pc, #52]	; (531f8 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   531c4:	691b      	ldr	r3, [r3, #16]
   531c6:	4283      	cmp	r3, r0
   531c8:	d002      	beq.n	531d0 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   531ca:	2100      	movs	r1, #0
   531cc:	f7f6 fb46 	bl	4985c <sys_clock_set_timeout>
	__asm__ volatile(
   531d0:	f387 8811 	msr	BASEPRI, r7
   531d4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   531d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   531da:	1a9b      	subs	r3, r3, r2
   531dc:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   531e0:	45ac      	cmp	ip, r5
   531e2:	e9c4 3104 	strd	r3, r1, [r4, #16]
   531e6:	d0c2      	beq.n	5316e <z_add_timeout+0x6e>
   531e8:	f8dc c000 	ldr.w	ip, [ip]
   531ec:	e7bc      	b.n	53168 <z_add_timeout+0x68>
   531ee:	bf00      	nop
   531f0:	2001af80 	.word	0x2001af80
   531f4:	2001a828 	.word	0x2001a828
   531f8:	2001bc78 	.word	0x2001bc78

000531fc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   531fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   53200:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   53202:	f7ff fcbd 	bl	52b80 <z_time_slice>
	__asm__ volatile(
   53206:	f04f 0320 	mov.w	r3, #32
   5320a:	f3ef 8611 	mrs	r6, BASEPRI
   5320e:	f383 8812 	msr	BASEPRI_MAX, r3
   53212:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   53216:	4f24      	ldr	r7, [pc, #144]	; (532a8 <sys_clock_announce+0xac>)
	return list->head == list;
   53218:	f8df 8094 	ldr.w	r8, [pc, #148]	; 532b0 <sys_clock_announce+0xb4>
   5321c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   53220:	4a22      	ldr	r2, [pc, #136]	; (532ac <sys_clock_announce+0xb0>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   53222:	4540      	cmp	r0, r8
	announce_remaining = ticks;
   53224:	603c      	str	r4, [r7, #0]
	return list->head == list;
   53226:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   5322a:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5322e:	d00b      	beq.n	53248 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   53230:	b150      	cbz	r0, 53248 <sys_clock_announce+0x4c>
   53232:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   53236:	42ac      	cmp	r4, r5
   53238:	eb71 090c 	sbcs.w	r9, r1, ip
   5323c:	da17      	bge.n	5326e <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   5323e:	1b2d      	subs	r5, r5, r4
   53240:	eb6c 0c01 	sbc.w	ip, ip, r1
   53244:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   53248:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   5324a:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   5324e:	eb4e 0101 	adc.w	r1, lr, r1
   53252:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   53256:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   53258:	f7ff ff0e 	bl	53078 <next_timeout>
   5325c:	4621      	mov	r1, r4
   5325e:	f7f6 fafd 	bl	4985c <sys_clock_set_timeout>
	__asm__ volatile(
   53262:	f386 8811 	msr	BASEPRI, r6
   53266:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   5326a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   5326e:	18eb      	adds	r3, r5, r3
   53270:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   53274:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   53278:	2200      	movs	r2, #0
   5327a:	2300      	movs	r3, #0
   5327c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   53280:	f7ff ff22 	bl	530c8 <remove_timeout>
   53284:	f386 8811 	msr	BASEPRI, r6
   53288:	f3bf 8f6f 	isb	sy
		t->fn(t);
   5328c:	6883      	ldr	r3, [r0, #8]
   5328e:	4798      	blx	r3
	__asm__ volatile(
   53290:	f04f 0320 	mov.w	r3, #32
   53294:	f3ef 8611 	mrs	r6, BASEPRI
   53298:	f383 8812 	msr	BASEPRI_MAX, r3
   5329c:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   532a0:	683c      	ldr	r4, [r7, #0]
   532a2:	1b64      	subs	r4, r4, r5
   532a4:	e7ba      	b.n	5321c <sys_clock_announce+0x20>
   532a6:	bf00      	nop
   532a8:	2001bcbc 	.word	0x2001bcbc
   532ac:	2001af80 	.word	0x2001af80
   532b0:	2001a828 	.word	0x2001a828

000532b4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   532b4:	b510      	push	{r4, lr}
   532b6:	f04f 0320 	mov.w	r3, #32
   532ba:	f3ef 8411 	mrs	r4, BASEPRI
   532be:	f383 8812 	msr	BASEPRI_MAX, r3
   532c2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   532c6:	f7ff fecd 	bl	53064 <elapsed>
   532ca:	4603      	mov	r3, r0
   532cc:	4a05      	ldr	r2, [pc, #20]	; (532e4 <sys_clock_tick_get+0x30>)
   532ce:	e9d2 0100 	ldrd	r0, r1, [r2]
   532d2:	1818      	adds	r0, r3, r0
   532d4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   532d8:	f384 8811 	msr	BASEPRI, r4
   532dc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   532e0:	bd10      	pop	{r4, pc}
   532e2:	bf00      	nop
   532e4:	2001af80 	.word	0x2001af80

000532e8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   532e8:	b538      	push	{r3, r4, r5, lr}
   532ea:	4603      	mov	r3, r0
	__asm__ volatile(
   532ec:	f04f 0220 	mov.w	r2, #32
   532f0:	f3ef 8511 	mrs	r5, BASEPRI
   532f4:	f382 8812 	msr	BASEPRI_MAX, r2
   532f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   532fc:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   532fe:	2101      	movs	r1, #1
   53300:	6081      	str	r1, [r0, #8]
	return list->head == list;
   53302:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   53304:	4283      	cmp	r3, r0
   53306:	d106      	bne.n	53316 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   53308:	f385 8811 	msr	BASEPRI, r5
   5330c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   53310:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   53312:	4620      	mov	r0, r4
   53314:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   53316:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   5331a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   5331c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   5331e:	2300      	movs	r3, #0
	node->prev = NULL;
   53320:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   53324:	f007 fd24 	bl	5ad70 <signal_poll_event>
	z_reschedule(&lock, key);
   53328:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   5332a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   5332c:	4801      	ldr	r0, [pc, #4]	; (53334 <z_impl_k_poll_signal_raise+0x4c>)
   5332e:	f7ff fccd 	bl	52ccc <z_reschedule>
	return rc;
   53332:	e7ee      	b.n	53312 <z_impl_k_poll_signal_raise+0x2a>
   53334:	2002083e 	.word	0x2002083e

00053338 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   53338:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   5333a:	4601      	mov	r1, r0
   5333c:	4801      	ldr	r0, [pc, #4]	; (53344 <k_aligned_alloc+0xc>)
   5333e:	f007 bd7f 	b.w	5ae40 <z_heap_aligned_alloc>
   53342:	bf00      	nop
   53344:	2001aaf8 	.word	0x2001aaf8

00053348 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   53348:	4b01      	ldr	r3, [pc, #4]	; (53350 <k_thread_system_pool_assign+0x8>)
   5334a:	6743      	str	r3, [r0, #116]	; 0x74
}
   5334c:	4770      	bx	lr
   5334e:	bf00      	nop
   53350:	2001aaf8 	.word	0x2001aaf8

00053354 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   53354:	b538      	push	{r3, r4, r5, lr}
   53356:	4604      	mov	r4, r0
   53358:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   5335a:	f007 fa8d 	bl	5a878 <k_is_in_isr>
   5335e:	b920      	cbnz	r0, 5336a <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   53360:	4b06      	ldr	r3, [pc, #24]	; (5337c <z_thread_aligned_alloc+0x28>)
   53362:	689b      	ldr	r3, [r3, #8]
   53364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   53366:	b90b      	cbnz	r3, 5336c <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   53368:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   5336a:	4b05      	ldr	r3, [pc, #20]	; (53380 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   5336c:	462a      	mov	r2, r5
   5336e:	4621      	mov	r1, r4
   53370:	4618      	mov	r0, r3
}
   53372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   53376:	f007 bd63 	b.w	5ae40 <z_heap_aligned_alloc>
   5337a:	bf00      	nop
   5337c:	2001bc78 	.word	0x2001bc78
   53380:	2001aaf8 	.word	0x2001aaf8

00053384 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   53384:	4801      	ldr	r0, [pc, #4]	; (5338c <boot_banner+0x8>)
   53386:	f002 ba0b 	b.w	557a0 <printk>
   5338a:	bf00      	nop
   5338c:	00060955 	.word	0x00060955

00053390 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   53390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   53392:	2400      	movs	r4, #0
   53394:	4b08      	ldr	r3, [pc, #32]	; (533b8 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   53396:	f44f 6290 	mov.w	r2, #1152	; 0x480
	struct k_work_queue_config cfg = {
   5339a:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   5339c:	ab02      	add	r3, sp, #8
   5339e:	9300      	str	r3, [sp, #0]
   533a0:	4906      	ldr	r1, [pc, #24]	; (533bc <k_sys_work_q_init+0x2c>)
   533a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   533a6:	4806      	ldr	r0, [pc, #24]	; (533c0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   533a8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   533ac:	f7ff fa4a 	bl	52844 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   533b0:	4620      	mov	r0, r4
   533b2:	b004      	add	sp, #16
   533b4:	bd10      	pop	{r4, pc}
   533b6:	bf00      	nop
   533b8:	00060983 	.word	0x00060983
   533bc:	20024f80 	.word	0x20024f80
   533c0:	2001af88 	.word	0x2001af88

000533c4 <calloc>:
   533c4:	4b02      	ldr	r3, [pc, #8]	; (533d0 <calloc+0xc>)
   533c6:	460a      	mov	r2, r1
   533c8:	4601      	mov	r1, r0
   533ca:	6818      	ldr	r0, [r3, #0]
   533cc:	f007 bdcc 	b.w	5af68 <_calloc_r>
   533d0:	2001a830 	.word	0x2001a830

000533d4 <exit>:
   533d4:	b508      	push	{r3, lr}
   533d6:	4b07      	ldr	r3, [pc, #28]	; (533f4 <exit+0x20>)
   533d8:	4604      	mov	r4, r0
   533da:	b113      	cbz	r3, 533e2 <exit+0xe>
   533dc:	2100      	movs	r1, #0
   533de:	f3af 8000 	nop.w
   533e2:	4b05      	ldr	r3, [pc, #20]	; (533f8 <exit+0x24>)
   533e4:	6818      	ldr	r0, [r3, #0]
   533e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
   533e8:	b103      	cbz	r3, 533ec <exit+0x18>
   533ea:	4798      	blx	r3
   533ec:	4620      	mov	r0, r4
   533ee:	f7f3 fb91 	bl	46b14 <_exit>
   533f2:	bf00      	nop
   533f4:	00000000 	.word	0x00000000
   533f8:	0005c8c0 	.word	0x0005c8c0

000533fc <malloc>:
   533fc:	4b02      	ldr	r3, [pc, #8]	; (53408 <malloc+0xc>)
   533fe:	4601      	mov	r1, r0
   53400:	6818      	ldr	r0, [r3, #0]
   53402:	f000 b855 	b.w	534b0 <_malloc_r>
   53406:	bf00      	nop
   53408:	2001a830 	.word	0x2001a830

0005340c <free>:
   5340c:	4b02      	ldr	r3, [pc, #8]	; (53418 <free+0xc>)
   5340e:	4601      	mov	r1, r0
   53410:	6818      	ldr	r0, [r3, #0]
   53412:	f000 b803 	b.w	5341c <_free_r>
   53416:	bf00      	nop
   53418:	2001a830 	.word	0x2001a830

0005341c <_free_r>:
   5341c:	b538      	push	{r3, r4, r5, lr}
   5341e:	4605      	mov	r5, r0
   53420:	2900      	cmp	r1, #0
   53422:	d041      	beq.n	534a8 <_free_r+0x8c>
   53424:	f851 3c04 	ldr.w	r3, [r1, #-4]
   53428:	1f0c      	subs	r4, r1, #4
   5342a:	2b00      	cmp	r3, #0
   5342c:	bfb8      	it	lt
   5342e:	18e4      	addlt	r4, r4, r3
   53430:	f000 fe40 	bl	540b4 <__malloc_lock>
   53434:	4a1d      	ldr	r2, [pc, #116]	; (534ac <_free_r+0x90>)
   53436:	6813      	ldr	r3, [r2, #0]
   53438:	b933      	cbnz	r3, 53448 <_free_r+0x2c>
   5343a:	6063      	str	r3, [r4, #4]
   5343c:	6014      	str	r4, [r2, #0]
   5343e:	4628      	mov	r0, r5
   53440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   53444:	f000 be3c 	b.w	540c0 <__malloc_unlock>
   53448:	42a3      	cmp	r3, r4
   5344a:	d908      	bls.n	5345e <_free_r+0x42>
   5344c:	6820      	ldr	r0, [r4, #0]
   5344e:	1821      	adds	r1, r4, r0
   53450:	428b      	cmp	r3, r1
   53452:	bf01      	itttt	eq
   53454:	6819      	ldreq	r1, [r3, #0]
   53456:	685b      	ldreq	r3, [r3, #4]
   53458:	1809      	addeq	r1, r1, r0
   5345a:	6021      	streq	r1, [r4, #0]
   5345c:	e7ed      	b.n	5343a <_free_r+0x1e>
   5345e:	461a      	mov	r2, r3
   53460:	685b      	ldr	r3, [r3, #4]
   53462:	b10b      	cbz	r3, 53468 <_free_r+0x4c>
   53464:	42a3      	cmp	r3, r4
   53466:	d9fa      	bls.n	5345e <_free_r+0x42>
   53468:	6811      	ldr	r1, [r2, #0]
   5346a:	1850      	adds	r0, r2, r1
   5346c:	42a0      	cmp	r0, r4
   5346e:	d10b      	bne.n	53488 <_free_r+0x6c>
   53470:	6820      	ldr	r0, [r4, #0]
   53472:	4401      	add	r1, r0
   53474:	1850      	adds	r0, r2, r1
   53476:	6011      	str	r1, [r2, #0]
   53478:	4283      	cmp	r3, r0
   5347a:	d1e0      	bne.n	5343e <_free_r+0x22>
   5347c:	6818      	ldr	r0, [r3, #0]
   5347e:	685b      	ldr	r3, [r3, #4]
   53480:	4408      	add	r0, r1
   53482:	6053      	str	r3, [r2, #4]
   53484:	6010      	str	r0, [r2, #0]
   53486:	e7da      	b.n	5343e <_free_r+0x22>
   53488:	d902      	bls.n	53490 <_free_r+0x74>
   5348a:	230c      	movs	r3, #12
   5348c:	602b      	str	r3, [r5, #0]
   5348e:	e7d6      	b.n	5343e <_free_r+0x22>
   53490:	6820      	ldr	r0, [r4, #0]
   53492:	1821      	adds	r1, r4, r0
   53494:	428b      	cmp	r3, r1
   53496:	bf02      	ittt	eq
   53498:	6819      	ldreq	r1, [r3, #0]
   5349a:	685b      	ldreq	r3, [r3, #4]
   5349c:	1809      	addeq	r1, r1, r0
   5349e:	6063      	str	r3, [r4, #4]
   534a0:	bf08      	it	eq
   534a2:	6021      	streq	r1, [r4, #0]
   534a4:	6054      	str	r4, [r2, #4]
   534a6:	e7ca      	b.n	5343e <_free_r+0x22>
   534a8:	bd38      	pop	{r3, r4, r5, pc}
   534aa:	bf00      	nop
   534ac:	2001bcc4 	.word	0x2001bcc4

000534b0 <_malloc_r>:
   534b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   534b2:	1ccd      	adds	r5, r1, #3
   534b4:	4606      	mov	r6, r0
   534b6:	f025 0503 	bic.w	r5, r5, #3
   534ba:	3508      	adds	r5, #8
   534bc:	2d0c      	cmp	r5, #12
   534be:	bf38      	it	cc
   534c0:	250c      	movcc	r5, #12
   534c2:	2d00      	cmp	r5, #0
   534c4:	db01      	blt.n	534ca <_malloc_r+0x1a>
   534c6:	42a9      	cmp	r1, r5
   534c8:	d903      	bls.n	534d2 <_malloc_r+0x22>
   534ca:	230c      	movs	r3, #12
   534cc:	6033      	str	r3, [r6, #0]
   534ce:	2000      	movs	r0, #0
   534d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   534d2:	f000 fdef 	bl	540b4 <__malloc_lock>
   534d6:	4921      	ldr	r1, [pc, #132]	; (5355c <_malloc_r+0xac>)
   534d8:	680a      	ldr	r2, [r1, #0]
   534da:	4614      	mov	r4, r2
   534dc:	b99c      	cbnz	r4, 53506 <_malloc_r+0x56>
   534de:	4f20      	ldr	r7, [pc, #128]	; (53560 <_malloc_r+0xb0>)
   534e0:	683b      	ldr	r3, [r7, #0]
   534e2:	b923      	cbnz	r3, 534ee <_malloc_r+0x3e>
   534e4:	4621      	mov	r1, r4
   534e6:	4630      	mov	r0, r6
   534e8:	f000 fb9e 	bl	53c28 <_sbrk_r>
   534ec:	6038      	str	r0, [r7, #0]
   534ee:	4629      	mov	r1, r5
   534f0:	4630      	mov	r0, r6
   534f2:	f000 fb99 	bl	53c28 <_sbrk_r>
   534f6:	1c43      	adds	r3, r0, #1
   534f8:	d123      	bne.n	53542 <_malloc_r+0x92>
   534fa:	230c      	movs	r3, #12
   534fc:	4630      	mov	r0, r6
   534fe:	6033      	str	r3, [r6, #0]
   53500:	f000 fdde 	bl	540c0 <__malloc_unlock>
   53504:	e7e3      	b.n	534ce <_malloc_r+0x1e>
   53506:	6823      	ldr	r3, [r4, #0]
   53508:	1b5b      	subs	r3, r3, r5
   5350a:	d417      	bmi.n	5353c <_malloc_r+0x8c>
   5350c:	2b0b      	cmp	r3, #11
   5350e:	d903      	bls.n	53518 <_malloc_r+0x68>
   53510:	6023      	str	r3, [r4, #0]
   53512:	441c      	add	r4, r3
   53514:	6025      	str	r5, [r4, #0]
   53516:	e004      	b.n	53522 <_malloc_r+0x72>
   53518:	6863      	ldr	r3, [r4, #4]
   5351a:	42a2      	cmp	r2, r4
   5351c:	bf0c      	ite	eq
   5351e:	600b      	streq	r3, [r1, #0]
   53520:	6053      	strne	r3, [r2, #4]
   53522:	4630      	mov	r0, r6
   53524:	f000 fdcc 	bl	540c0 <__malloc_unlock>
   53528:	f104 000b 	add.w	r0, r4, #11
   5352c:	1d23      	adds	r3, r4, #4
   5352e:	f020 0007 	bic.w	r0, r0, #7
   53532:	1ac2      	subs	r2, r0, r3
   53534:	bf1c      	itt	ne
   53536:	1a1b      	subne	r3, r3, r0
   53538:	50a3      	strne	r3, [r4, r2]
   5353a:	e7c9      	b.n	534d0 <_malloc_r+0x20>
   5353c:	4622      	mov	r2, r4
   5353e:	6864      	ldr	r4, [r4, #4]
   53540:	e7cc      	b.n	534dc <_malloc_r+0x2c>
   53542:	1cc4      	adds	r4, r0, #3
   53544:	f024 0403 	bic.w	r4, r4, #3
   53548:	42a0      	cmp	r0, r4
   5354a:	d0e3      	beq.n	53514 <_malloc_r+0x64>
   5354c:	1a21      	subs	r1, r4, r0
   5354e:	4630      	mov	r0, r6
   53550:	f000 fb6a 	bl	53c28 <_sbrk_r>
   53554:	3001      	adds	r0, #1
   53556:	d1dd      	bne.n	53514 <_malloc_r+0x64>
   53558:	e7cf      	b.n	534fa <_malloc_r+0x4a>
   5355a:	bf00      	nop
   5355c:	2001bcc4 	.word	0x2001bcc4
   53560:	2001bcc0 	.word	0x2001bcc0

00053564 <_printf_float>:
   53564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   53568:	b08d      	sub	sp, #52	; 0x34
   5356a:	460c      	mov	r4, r1
   5356c:	4616      	mov	r6, r2
   5356e:	461f      	mov	r7, r3
   53570:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   53574:	4605      	mov	r5, r0
   53576:	f000 fd87 	bl	54088 <_localeconv_r>
   5357a:	6803      	ldr	r3, [r0, #0]
   5357c:	4618      	mov	r0, r3
   5357e:	9304      	str	r3, [sp, #16]
   53580:	f7ed fc38 	bl	40df4 <strlen>
   53584:	2300      	movs	r3, #0
   53586:	9005      	str	r0, [sp, #20]
   53588:	930a      	str	r3, [sp, #40]	; 0x28
   5358a:	f8d8 3000 	ldr.w	r3, [r8]
   5358e:	f894 a018 	ldrb.w	sl, [r4, #24]
   53592:	3307      	adds	r3, #7
   53594:	f8d4 b000 	ldr.w	fp, [r4]
   53598:	f023 0307 	bic.w	r3, r3, #7
   5359c:	f103 0208 	add.w	r2, r3, #8
   535a0:	f8c8 2000 	str.w	r2, [r8]
   535a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   535a8:	e9d3 8900 	ldrd	r8, r9, [r3]
   535ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   535b0:	f8cd 8018 	str.w	r8, [sp, #24]
   535b4:	9307      	str	r3, [sp, #28]
   535b6:	4b9c      	ldr	r3, [pc, #624]	; (53828 <_printf_float+0x2c4>)
   535b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   535bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   535c0:	f7ed fa18 	bl	409f4 <__aeabi_dcmpun>
   535c4:	bb70      	cbnz	r0, 53624 <_printf_float+0xc0>
   535c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   535ca:	4b97      	ldr	r3, [pc, #604]	; (53828 <_printf_float+0x2c4>)
   535cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   535d0:	f7ed f9f2 	bl	409b8 <__aeabi_dcmple>
   535d4:	bb30      	cbnz	r0, 53624 <_printf_float+0xc0>
   535d6:	2200      	movs	r2, #0
   535d8:	2300      	movs	r3, #0
   535da:	4640      	mov	r0, r8
   535dc:	4649      	mov	r1, r9
   535de:	f7ed f9e1 	bl	409a4 <__aeabi_dcmplt>
   535e2:	b110      	cbz	r0, 535ea <_printf_float+0x86>
   535e4:	232d      	movs	r3, #45	; 0x2d
   535e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   535ea:	4a90      	ldr	r2, [pc, #576]	; (5382c <_printf_float+0x2c8>)
   535ec:	4b90      	ldr	r3, [pc, #576]	; (53830 <_printf_float+0x2cc>)
   535ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   535f2:	bf94      	ite	ls
   535f4:	4690      	movls	r8, r2
   535f6:	4698      	movhi	r8, r3
   535f8:	2303      	movs	r3, #3
   535fa:	f04f 0900 	mov.w	r9, #0
   535fe:	6123      	str	r3, [r4, #16]
   53600:	f02b 0304 	bic.w	r3, fp, #4
   53604:	6023      	str	r3, [r4, #0]
   53606:	4633      	mov	r3, r6
   53608:	aa0b      	add	r2, sp, #44	; 0x2c
   5360a:	4621      	mov	r1, r4
   5360c:	4628      	mov	r0, r5
   5360e:	9700      	str	r7, [sp, #0]
   53610:	f007 fd59 	bl	5b0c6 <_printf_common>
   53614:	3001      	adds	r0, #1
   53616:	f040 8096 	bne.w	53746 <_printf_float+0x1e2>
   5361a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5361e:	b00d      	add	sp, #52	; 0x34
   53620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53624:	4642      	mov	r2, r8
   53626:	464b      	mov	r3, r9
   53628:	4640      	mov	r0, r8
   5362a:	4649      	mov	r1, r9
   5362c:	f7ed f9e2 	bl	409f4 <__aeabi_dcmpun>
   53630:	b140      	cbz	r0, 53644 <_printf_float+0xe0>
   53632:	464b      	mov	r3, r9
   53634:	4a7f      	ldr	r2, [pc, #508]	; (53834 <_printf_float+0x2d0>)
   53636:	2b00      	cmp	r3, #0
   53638:	bfbc      	itt	lt
   5363a:	232d      	movlt	r3, #45	; 0x2d
   5363c:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   53640:	4b7d      	ldr	r3, [pc, #500]	; (53838 <_printf_float+0x2d4>)
   53642:	e7d4      	b.n	535ee <_printf_float+0x8a>
   53644:	6863      	ldr	r3, [r4, #4]
   53646:	1c5a      	adds	r2, r3, #1
   53648:	d126      	bne.n	53698 <_printf_float+0x134>
   5364a:	2306      	movs	r3, #6
   5364c:	6063      	str	r3, [r4, #4]
   5364e:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   53652:	2300      	movs	r3, #0
   53654:	4628      	mov	r0, r5
   53656:	6022      	str	r2, [r4, #0]
   53658:	9303      	str	r3, [sp, #12]
   5365a:	ab0a      	add	r3, sp, #40	; 0x28
   5365c:	e9cd a301 	strd	sl, r3, [sp, #4]
   53660:	ab09      	add	r3, sp, #36	; 0x24
   53662:	ec49 8b10 	vmov	d0, r8, r9
   53666:	9300      	str	r3, [sp, #0]
   53668:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   5366c:	6861      	ldr	r1, [r4, #4]
   5366e:	f007 fc89 	bl	5af84 <__cvt>
   53672:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   53676:	4680      	mov	r8, r0
   53678:	9909      	ldr	r1, [sp, #36]	; 0x24
   5367a:	d115      	bne.n	536a8 <_printf_float+0x144>
   5367c:	1ccb      	adds	r3, r1, #3
   5367e:	db3b      	blt.n	536f8 <_printf_float+0x194>
   53680:	6863      	ldr	r3, [r4, #4]
   53682:	4299      	cmp	r1, r3
   53684:	dc38      	bgt.n	536f8 <_printf_float+0x194>
   53686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   53688:	4299      	cmp	r1, r3
   5368a:	db55      	blt.n	53738 <_printf_float+0x1d4>
   5368c:	6823      	ldr	r3, [r4, #0]
   5368e:	6121      	str	r1, [r4, #16]
   53690:	07d8      	lsls	r0, r3, #31
   53692:	d545      	bpl.n	53720 <_printf_float+0x1bc>
   53694:	1c4b      	adds	r3, r1, #1
   53696:	e042      	b.n	5371e <_printf_float+0x1ba>
   53698:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   5369c:	2a47      	cmp	r2, #71	; 0x47
   5369e:	d1d6      	bne.n	5364e <_printf_float+0xea>
   536a0:	2b00      	cmp	r3, #0
   536a2:	d1d4      	bne.n	5364e <_printf_float+0xea>
   536a4:	2301      	movs	r3, #1
   536a6:	e7d1      	b.n	5364c <_printf_float+0xe8>
   536a8:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   536ac:	d107      	bne.n	536be <_printf_float+0x15a>
   536ae:	1cc8      	adds	r0, r1, #3
   536b0:	db25      	blt.n	536fe <_printf_float+0x19a>
   536b2:	6863      	ldr	r3, [r4, #4]
   536b4:	428b      	cmp	r3, r1
   536b6:	db22      	blt.n	536fe <_printf_float+0x19a>
   536b8:	f04f 0a67 	mov.w	sl, #103	; 0x67
   536bc:	e7e3      	b.n	53686 <_printf_float+0x122>
   536be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   536c2:	d81f      	bhi.n	53704 <_printf_float+0x1a0>
   536c4:	3901      	subs	r1, #1
   536c6:	4652      	mov	r2, sl
   536c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
   536cc:	9109      	str	r1, [sp, #36]	; 0x24
   536ce:	f007 fcc1 	bl	5b054 <__exponent>
   536d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   536d4:	4681      	mov	r9, r0
   536d6:	1813      	adds	r3, r2, r0
   536d8:	2a01      	cmp	r2, #1
   536da:	6123      	str	r3, [r4, #16]
   536dc:	dc02      	bgt.n	536e4 <_printf_float+0x180>
   536de:	6822      	ldr	r2, [r4, #0]
   536e0:	07d2      	lsls	r2, r2, #31
   536e2:	d501      	bpl.n	536e8 <_printf_float+0x184>
   536e4:	3301      	adds	r3, #1
   536e6:	6123      	str	r3, [r4, #16]
   536e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   536ec:	2b00      	cmp	r3, #0
   536ee:	d08a      	beq.n	53606 <_printf_float+0xa2>
   536f0:	232d      	movs	r3, #45	; 0x2d
   536f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   536f6:	e786      	b.n	53606 <_printf_float+0xa2>
   536f8:	f04f 0a65 	mov.w	sl, #101	; 0x65
   536fc:	e7e2      	b.n	536c4 <_printf_float+0x160>
   536fe:	f04f 0a45 	mov.w	sl, #69	; 0x45
   53702:	e7df      	b.n	536c4 <_printf_float+0x160>
   53704:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   53708:	d1bd      	bne.n	53686 <_printf_float+0x122>
   5370a:	2900      	cmp	r1, #0
   5370c:	6863      	ldr	r3, [r4, #4]
   5370e:	dd0b      	ble.n	53728 <_printf_float+0x1c4>
   53710:	6121      	str	r1, [r4, #16]
   53712:	b913      	cbnz	r3, 5371a <_printf_float+0x1b6>
   53714:	6822      	ldr	r2, [r4, #0]
   53716:	07d0      	lsls	r0, r2, #31
   53718:	d502      	bpl.n	53720 <_printf_float+0x1bc>
   5371a:	3301      	adds	r3, #1
   5371c:	440b      	add	r3, r1
   5371e:	6123      	str	r3, [r4, #16]
   53720:	f04f 0900 	mov.w	r9, #0
   53724:	65a1      	str	r1, [r4, #88]	; 0x58
   53726:	e7df      	b.n	536e8 <_printf_float+0x184>
   53728:	b913      	cbnz	r3, 53730 <_printf_float+0x1cc>
   5372a:	6822      	ldr	r2, [r4, #0]
   5372c:	07d2      	lsls	r2, r2, #31
   5372e:	d501      	bpl.n	53734 <_printf_float+0x1d0>
   53730:	3302      	adds	r3, #2
   53732:	e7f4      	b.n	5371e <_printf_float+0x1ba>
   53734:	2301      	movs	r3, #1
   53736:	e7f2      	b.n	5371e <_printf_float+0x1ba>
   53738:	2900      	cmp	r1, #0
   5373a:	bfd4      	ite	le
   5373c:	f1c1 0202 	rsble	r2, r1, #2
   53740:	2201      	movgt	r2, #1
   53742:	4413      	add	r3, r2
   53744:	e7eb      	b.n	5371e <_printf_float+0x1ba>
   53746:	6823      	ldr	r3, [r4, #0]
   53748:	055a      	lsls	r2, r3, #21
   5374a:	d407      	bmi.n	5375c <_printf_float+0x1f8>
   5374c:	6923      	ldr	r3, [r4, #16]
   5374e:	4642      	mov	r2, r8
   53750:	4631      	mov	r1, r6
   53752:	4628      	mov	r0, r5
   53754:	47b8      	blx	r7
   53756:	3001      	adds	r0, #1
   53758:	d12b      	bne.n	537b2 <_printf_float+0x24e>
   5375a:	e75e      	b.n	5361a <_printf_float+0xb6>
   5375c:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   53760:	f240 80dd 	bls.w	5391e <_printf_float+0x3ba>
   53764:	2200      	movs	r2, #0
   53766:	2300      	movs	r3, #0
   53768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   5376c:	f7ed f910 	bl	40990 <__aeabi_dcmpeq>
   53770:	2800      	cmp	r0, #0
   53772:	d033      	beq.n	537dc <_printf_float+0x278>
   53774:	2301      	movs	r3, #1
   53776:	4a31      	ldr	r2, [pc, #196]	; (5383c <_printf_float+0x2d8>)
   53778:	4631      	mov	r1, r6
   5377a:	4628      	mov	r0, r5
   5377c:	47b8      	blx	r7
   5377e:	3001      	adds	r0, #1
   53780:	f43f af4b 	beq.w	5361a <_printf_float+0xb6>
   53784:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	; 0x24
   53788:	4543      	cmp	r3, r8
   5378a:	db02      	blt.n	53792 <_printf_float+0x22e>
   5378c:	6823      	ldr	r3, [r4, #0]
   5378e:	07d8      	lsls	r0, r3, #31
   53790:	d50f      	bpl.n	537b2 <_printf_float+0x24e>
   53792:	4631      	mov	r1, r6
   53794:	4628      	mov	r0, r5
   53796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   5379a:	47b8      	blx	r7
   5379c:	3001      	adds	r0, #1
   5379e:	f43f af3c 	beq.w	5361a <_printf_float+0xb6>
   537a2:	f04f 0900 	mov.w	r9, #0
   537a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   537aa:	f104 0a1a 	add.w	sl, r4, #26
   537ae:	45c8      	cmp	r8, r9
   537b0:	dc09      	bgt.n	537c6 <_printf_float+0x262>
   537b2:	6823      	ldr	r3, [r4, #0]
   537b4:	079b      	lsls	r3, r3, #30
   537b6:	f100 8103 	bmi.w	539c0 <_printf_float+0x45c>
   537ba:	68e0      	ldr	r0, [r4, #12]
   537bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   537be:	4298      	cmp	r0, r3
   537c0:	bfb8      	it	lt
   537c2:	4618      	movlt	r0, r3
   537c4:	e72b      	b.n	5361e <_printf_float+0xba>
   537c6:	2301      	movs	r3, #1
   537c8:	4652      	mov	r2, sl
   537ca:	4631      	mov	r1, r6
   537cc:	4628      	mov	r0, r5
   537ce:	47b8      	blx	r7
   537d0:	3001      	adds	r0, #1
   537d2:	f43f af22 	beq.w	5361a <_printf_float+0xb6>
   537d6:	f109 0901 	add.w	r9, r9, #1
   537da:	e7e8      	b.n	537ae <_printf_float+0x24a>
   537dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   537de:	2b00      	cmp	r3, #0
   537e0:	dc39      	bgt.n	53856 <_printf_float+0x2f2>
   537e2:	2301      	movs	r3, #1
   537e4:	4a15      	ldr	r2, [pc, #84]	; (5383c <_printf_float+0x2d8>)
   537e6:	4631      	mov	r1, r6
   537e8:	4628      	mov	r0, r5
   537ea:	47b8      	blx	r7
   537ec:	3001      	adds	r0, #1
   537ee:	f43f af14 	beq.w	5361a <_printf_float+0xb6>
   537f2:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	; 0x24
   537f6:	ea59 0303 	orrs.w	r3, r9, r3
   537fa:	d102      	bne.n	53802 <_printf_float+0x29e>
   537fc:	6823      	ldr	r3, [r4, #0]
   537fe:	07d9      	lsls	r1, r3, #31
   53800:	d5d7      	bpl.n	537b2 <_printf_float+0x24e>
   53802:	4631      	mov	r1, r6
   53804:	4628      	mov	r0, r5
   53806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   5380a:	47b8      	blx	r7
   5380c:	3001      	adds	r0, #1
   5380e:	f43f af04 	beq.w	5361a <_printf_float+0xb6>
   53812:	f04f 0a00 	mov.w	sl, #0
   53816:	f104 0b1a 	add.w	fp, r4, #26
   5381a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   5381c:	425b      	negs	r3, r3
   5381e:	4553      	cmp	r3, sl
   53820:	dc0e      	bgt.n	53840 <_printf_float+0x2dc>
   53822:	464b      	mov	r3, r9
   53824:	e793      	b.n	5374e <_printf_float+0x1ea>
   53826:	bf00      	nop
   53828:	7fefffff 	.word	0x7fefffff
   5382c:	00060a8d 	.word	0x00060a8d
   53830:	0005d854 	.word	0x0005d854
   53834:	00060a91 	.word	0x00060a91
   53838:	00060a95 	.word	0x00060a95
   5383c:	0005f3f1 	.word	0x0005f3f1
   53840:	2301      	movs	r3, #1
   53842:	465a      	mov	r2, fp
   53844:	4631      	mov	r1, r6
   53846:	4628      	mov	r0, r5
   53848:	47b8      	blx	r7
   5384a:	3001      	adds	r0, #1
   5384c:	f43f aee5 	beq.w	5361a <_printf_float+0xb6>
   53850:	f10a 0a01 	add.w	sl, sl, #1
   53854:	e7e1      	b.n	5381a <_printf_float+0x2b6>
   53856:	6da3      	ldr	r3, [r4, #88]	; 0x58
   53858:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   5385c:	4553      	cmp	r3, sl
   5385e:	bfa8      	it	ge
   53860:	4653      	movge	r3, sl
   53862:	2b00      	cmp	r3, #0
   53864:	4699      	mov	r9, r3
   53866:	dc36      	bgt.n	538d6 <_printf_float+0x372>
   53868:	f04f 0b00 	mov.w	fp, #0
   5386c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   53870:	f104 021a 	add.w	r2, r4, #26
   53874:	6da3      	ldr	r3, [r4, #88]	; 0x58
   53876:	9306      	str	r3, [sp, #24]
   53878:	eba3 0309 	sub.w	r3, r3, r9
   5387c:	455b      	cmp	r3, fp
   5387e:	dc31      	bgt.n	538e4 <_printf_float+0x380>
   53880:	9b09      	ldr	r3, [sp, #36]	; 0x24
   53882:	459a      	cmp	sl, r3
   53884:	dc3a      	bgt.n	538fc <_printf_float+0x398>
   53886:	6823      	ldr	r3, [r4, #0]
   53888:	07da      	lsls	r2, r3, #31
   5388a:	d437      	bmi.n	538fc <_printf_float+0x398>
   5388c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   5388e:	ebaa 0903 	sub.w	r9, sl, r3
   53892:	9b06      	ldr	r3, [sp, #24]
   53894:	ebaa 0303 	sub.w	r3, sl, r3
   53898:	4599      	cmp	r9, r3
   5389a:	bfa8      	it	ge
   5389c:	4699      	movge	r9, r3
   5389e:	f1b9 0f00 	cmp.w	r9, #0
   538a2:	dc33      	bgt.n	5390c <_printf_float+0x3a8>
   538a4:	f04f 0800 	mov.w	r8, #0
   538a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   538ac:	f104 0b1a 	add.w	fp, r4, #26
   538b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   538b2:	ebaa 0303 	sub.w	r3, sl, r3
   538b6:	eba3 0309 	sub.w	r3, r3, r9
   538ba:	4543      	cmp	r3, r8
   538bc:	f77f af79 	ble.w	537b2 <_printf_float+0x24e>
   538c0:	2301      	movs	r3, #1
   538c2:	465a      	mov	r2, fp
   538c4:	4631      	mov	r1, r6
   538c6:	4628      	mov	r0, r5
   538c8:	47b8      	blx	r7
   538ca:	3001      	adds	r0, #1
   538cc:	f43f aea5 	beq.w	5361a <_printf_float+0xb6>
   538d0:	f108 0801 	add.w	r8, r8, #1
   538d4:	e7ec      	b.n	538b0 <_printf_float+0x34c>
   538d6:	4642      	mov	r2, r8
   538d8:	4631      	mov	r1, r6
   538da:	4628      	mov	r0, r5
   538dc:	47b8      	blx	r7
   538de:	3001      	adds	r0, #1
   538e0:	d1c2      	bne.n	53868 <_printf_float+0x304>
   538e2:	e69a      	b.n	5361a <_printf_float+0xb6>
   538e4:	2301      	movs	r3, #1
   538e6:	4631      	mov	r1, r6
   538e8:	4628      	mov	r0, r5
   538ea:	9206      	str	r2, [sp, #24]
   538ec:	47b8      	blx	r7
   538ee:	3001      	adds	r0, #1
   538f0:	f43f ae93 	beq.w	5361a <_printf_float+0xb6>
   538f4:	f10b 0b01 	add.w	fp, fp, #1
   538f8:	9a06      	ldr	r2, [sp, #24]
   538fa:	e7bb      	b.n	53874 <_printf_float+0x310>
   538fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   53900:	4631      	mov	r1, r6
   53902:	4628      	mov	r0, r5
   53904:	47b8      	blx	r7
   53906:	3001      	adds	r0, #1
   53908:	d1c0      	bne.n	5388c <_printf_float+0x328>
   5390a:	e686      	b.n	5361a <_printf_float+0xb6>
   5390c:	9a06      	ldr	r2, [sp, #24]
   5390e:	464b      	mov	r3, r9
   53910:	4631      	mov	r1, r6
   53912:	4628      	mov	r0, r5
   53914:	4442      	add	r2, r8
   53916:	47b8      	blx	r7
   53918:	3001      	adds	r0, #1
   5391a:	d1c3      	bne.n	538a4 <_printf_float+0x340>
   5391c:	e67d      	b.n	5361a <_printf_float+0xb6>
   5391e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   53922:	f1ba 0f01 	cmp.w	sl, #1
   53926:	dc01      	bgt.n	5392c <_printf_float+0x3c8>
   53928:	07db      	lsls	r3, r3, #31
   5392a:	d536      	bpl.n	5399a <_printf_float+0x436>
   5392c:	2301      	movs	r3, #1
   5392e:	4642      	mov	r2, r8
   53930:	4631      	mov	r1, r6
   53932:	4628      	mov	r0, r5
   53934:	47b8      	blx	r7
   53936:	3001      	adds	r0, #1
   53938:	f43f ae6f 	beq.w	5361a <_printf_float+0xb6>
   5393c:	4631      	mov	r1, r6
   5393e:	4628      	mov	r0, r5
   53940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   53944:	47b8      	blx	r7
   53946:	3001      	adds	r0, #1
   53948:	f43f ae67 	beq.w	5361a <_printf_float+0xb6>
   5394c:	2200      	movs	r2, #0
   5394e:	2300      	movs	r3, #0
   53950:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   53954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   53958:	f7ed f81a 	bl	40990 <__aeabi_dcmpeq>
   5395c:	b9c0      	cbnz	r0, 53990 <_printf_float+0x42c>
   5395e:	4653      	mov	r3, sl
   53960:	f108 0201 	add.w	r2, r8, #1
   53964:	4631      	mov	r1, r6
   53966:	4628      	mov	r0, r5
   53968:	47b8      	blx	r7
   5396a:	3001      	adds	r0, #1
   5396c:	d10c      	bne.n	53988 <_printf_float+0x424>
   5396e:	e654      	b.n	5361a <_printf_float+0xb6>
   53970:	2301      	movs	r3, #1
   53972:	465a      	mov	r2, fp
   53974:	4631      	mov	r1, r6
   53976:	4628      	mov	r0, r5
   53978:	47b8      	blx	r7
   5397a:	3001      	adds	r0, #1
   5397c:	f43f ae4d 	beq.w	5361a <_printf_float+0xb6>
   53980:	f108 0801 	add.w	r8, r8, #1
   53984:	45d0      	cmp	r8, sl
   53986:	dbf3      	blt.n	53970 <_printf_float+0x40c>
   53988:	464b      	mov	r3, r9
   5398a:	f104 0250 	add.w	r2, r4, #80	; 0x50
   5398e:	e6df      	b.n	53750 <_printf_float+0x1ec>
   53990:	f04f 0800 	mov.w	r8, #0
   53994:	f104 0b1a 	add.w	fp, r4, #26
   53998:	e7f4      	b.n	53984 <_printf_float+0x420>
   5399a:	2301      	movs	r3, #1
   5399c:	4642      	mov	r2, r8
   5399e:	e7e1      	b.n	53964 <_printf_float+0x400>
   539a0:	2301      	movs	r3, #1
   539a2:	464a      	mov	r2, r9
   539a4:	4631      	mov	r1, r6
   539a6:	4628      	mov	r0, r5
   539a8:	47b8      	blx	r7
   539aa:	3001      	adds	r0, #1
   539ac:	f43f ae35 	beq.w	5361a <_printf_float+0xb6>
   539b0:	f108 0801 	add.w	r8, r8, #1
   539b4:	68e3      	ldr	r3, [r4, #12]
   539b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   539b8:	1a5b      	subs	r3, r3, r1
   539ba:	4543      	cmp	r3, r8
   539bc:	dcf0      	bgt.n	539a0 <_printf_float+0x43c>
   539be:	e6fc      	b.n	537ba <_printf_float+0x256>
   539c0:	f04f 0800 	mov.w	r8, #0
   539c4:	f104 0919 	add.w	r9, r4, #25
   539c8:	e7f4      	b.n	539b4 <_printf_float+0x450>
   539ca:	bf00      	nop

000539cc <_printf_i>:
   539cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   539d0:	7e0f      	ldrb	r7, [r1, #24]
   539d2:	4691      	mov	r9, r2
   539d4:	4680      	mov	r8, r0
   539d6:	460c      	mov	r4, r1
   539d8:	2f78      	cmp	r7, #120	; 0x78
   539da:	469a      	mov	sl, r3
   539dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   539de:	f101 0243 	add.w	r2, r1, #67	; 0x43
   539e2:	d807      	bhi.n	539f4 <_printf_i+0x28>
   539e4:	2f62      	cmp	r7, #98	; 0x62
   539e6:	d80a      	bhi.n	539fe <_printf_i+0x32>
   539e8:	2f00      	cmp	r7, #0
   539ea:	f000 80e0 	beq.w	53bae <_printf_i+0x1e2>
   539ee:	2f58      	cmp	r7, #88	; 0x58
   539f0:	f000 80bb 	beq.w	53b6a <_printf_i+0x19e>
   539f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
   539f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   539fc:	e03a      	b.n	53a74 <_printf_i+0xa8>
   539fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   53a02:	2b15      	cmp	r3, #21
   53a04:	d8f6      	bhi.n	539f4 <_printf_i+0x28>
   53a06:	a101      	add	r1, pc, #4	; (adr r1, 53a0c <_printf_i+0x40>)
   53a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   53a0c:	00053a65 	.word	0x00053a65
   53a10:	00053a79 	.word	0x00053a79
   53a14:	000539f5 	.word	0x000539f5
   53a18:	000539f5 	.word	0x000539f5
   53a1c:	000539f5 	.word	0x000539f5
   53a20:	000539f5 	.word	0x000539f5
   53a24:	00053a79 	.word	0x00053a79
   53a28:	000539f5 	.word	0x000539f5
   53a2c:	000539f5 	.word	0x000539f5
   53a30:	000539f5 	.word	0x000539f5
   53a34:	000539f5 	.word	0x000539f5
   53a38:	00053b95 	.word	0x00053b95
   53a3c:	00053b09 	.word	0x00053b09
   53a40:	00053b4b 	.word	0x00053b4b
   53a44:	000539f5 	.word	0x000539f5
   53a48:	000539f5 	.word	0x000539f5
   53a4c:	00053bb7 	.word	0x00053bb7
   53a50:	000539f5 	.word	0x000539f5
   53a54:	00053b09 	.word	0x00053b09
   53a58:	000539f5 	.word	0x000539f5
   53a5c:	000539f5 	.word	0x000539f5
   53a60:	00053b53 	.word	0x00053b53
   53a64:	682b      	ldr	r3, [r5, #0]
   53a66:	f104 0642 	add.w	r6, r4, #66	; 0x42
   53a6a:	1d1a      	adds	r2, r3, #4
   53a6c:	681b      	ldr	r3, [r3, #0]
   53a6e:	602a      	str	r2, [r5, #0]
   53a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   53a74:	2301      	movs	r3, #1
   53a76:	e0ab      	b.n	53bd0 <_printf_i+0x204>
   53a78:	6823      	ldr	r3, [r4, #0]
   53a7a:	6829      	ldr	r1, [r5, #0]
   53a7c:	061f      	lsls	r7, r3, #24
   53a7e:	f101 0004 	add.w	r0, r1, #4
   53a82:	6028      	str	r0, [r5, #0]
   53a84:	d501      	bpl.n	53a8a <_printf_i+0xbe>
   53a86:	680d      	ldr	r5, [r1, #0]
   53a88:	e003      	b.n	53a92 <_printf_i+0xc6>
   53a8a:	065e      	lsls	r6, r3, #25
   53a8c:	d5fb      	bpl.n	53a86 <_printf_i+0xba>
   53a8e:	f9b1 5000 	ldrsh.w	r5, [r1]
   53a92:	2d00      	cmp	r5, #0
   53a94:	6861      	ldr	r1, [r4, #4]
   53a96:	da7a      	bge.n	53b8e <_printf_i+0x1c2>
   53a98:	202d      	movs	r0, #45	; 0x2d
   53a9a:	2900      	cmp	r1, #0
   53a9c:	60a1      	str	r1, [r4, #8]
   53a9e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   53aa2:	da2d      	bge.n	53b00 <_printf_i+0x134>
   53aa4:	426d      	negs	r5, r5
   53aa6:	485e      	ldr	r0, [pc, #376]	; (53c20 <_printf_i+0x254>)
   53aa8:	230a      	movs	r3, #10
   53aaa:	4616      	mov	r6, r2
   53aac:	fbb5 f1f3 	udiv	r1, r5, r3
   53ab0:	fb03 5711 	mls	r7, r3, r1, r5
   53ab4:	5dc7      	ldrb	r7, [r0, r7]
   53ab6:	f806 7d01 	strb.w	r7, [r6, #-1]!
   53aba:	462f      	mov	r7, r5
   53abc:	460d      	mov	r5, r1
   53abe:	42bb      	cmp	r3, r7
   53ac0:	d9f4      	bls.n	53aac <_printf_i+0xe0>
   53ac2:	2b08      	cmp	r3, #8
   53ac4:	d10b      	bne.n	53ade <_printf_i+0x112>
   53ac6:	6823      	ldr	r3, [r4, #0]
   53ac8:	07df      	lsls	r7, r3, #31
   53aca:	d508      	bpl.n	53ade <_printf_i+0x112>
   53acc:	6923      	ldr	r3, [r4, #16]
   53ace:	6861      	ldr	r1, [r4, #4]
   53ad0:	4299      	cmp	r1, r3
   53ad2:	bfde      	ittt	le
   53ad4:	2330      	movle	r3, #48	; 0x30
   53ad6:	f806 3c01 	strble.w	r3, [r6, #-1]
   53ada:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   53ade:	1b92      	subs	r2, r2, r6
   53ae0:	6122      	str	r2, [r4, #16]
   53ae2:	464b      	mov	r3, r9
   53ae4:	aa03      	add	r2, sp, #12
   53ae6:	4621      	mov	r1, r4
   53ae8:	4640      	mov	r0, r8
   53aea:	f8cd a000 	str.w	sl, [sp]
   53aee:	f007 faea 	bl	5b0c6 <_printf_common>
   53af2:	3001      	adds	r0, #1
   53af4:	d171      	bne.n	53bda <_printf_i+0x20e>
   53af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   53afa:	b004      	add	sp, #16
   53afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   53b00:	f023 0304 	bic.w	r3, r3, #4
   53b04:	6023      	str	r3, [r4, #0]
   53b06:	e7cd      	b.n	53aa4 <_printf_i+0xd8>
   53b08:	682b      	ldr	r3, [r5, #0]
   53b0a:	6820      	ldr	r0, [r4, #0]
   53b0c:	1d19      	adds	r1, r3, #4
   53b0e:	6029      	str	r1, [r5, #0]
   53b10:	0605      	lsls	r5, r0, #24
   53b12:	d501      	bpl.n	53b18 <_printf_i+0x14c>
   53b14:	681d      	ldr	r5, [r3, #0]
   53b16:	e002      	b.n	53b1e <_printf_i+0x152>
   53b18:	0641      	lsls	r1, r0, #25
   53b1a:	d5fb      	bpl.n	53b14 <_printf_i+0x148>
   53b1c:	881d      	ldrh	r5, [r3, #0]
   53b1e:	2f6f      	cmp	r7, #111	; 0x6f
   53b20:	483f      	ldr	r0, [pc, #252]	; (53c20 <_printf_i+0x254>)
   53b22:	bf14      	ite	ne
   53b24:	230a      	movne	r3, #10
   53b26:	2308      	moveq	r3, #8
   53b28:	2100      	movs	r1, #0
   53b2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   53b2e:	6866      	ldr	r6, [r4, #4]
   53b30:	2e00      	cmp	r6, #0
   53b32:	60a6      	str	r6, [r4, #8]
   53b34:	dbb9      	blt.n	53aaa <_printf_i+0xde>
   53b36:	6821      	ldr	r1, [r4, #0]
   53b38:	f021 0104 	bic.w	r1, r1, #4
   53b3c:	6021      	str	r1, [r4, #0]
   53b3e:	2d00      	cmp	r5, #0
   53b40:	d1b3      	bne.n	53aaa <_printf_i+0xde>
   53b42:	2e00      	cmp	r6, #0
   53b44:	d1b1      	bne.n	53aaa <_printf_i+0xde>
   53b46:	4616      	mov	r6, r2
   53b48:	e7bb      	b.n	53ac2 <_printf_i+0xf6>
   53b4a:	6823      	ldr	r3, [r4, #0]
   53b4c:	f043 0320 	orr.w	r3, r3, #32
   53b50:	6023      	str	r3, [r4, #0]
   53b52:	2778      	movs	r7, #120	; 0x78
   53b54:	4833      	ldr	r0, [pc, #204]	; (53c24 <_printf_i+0x258>)
   53b56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   53b5a:	6829      	ldr	r1, [r5, #0]
   53b5c:	6823      	ldr	r3, [r4, #0]
   53b5e:	1d0e      	adds	r6, r1, #4
   53b60:	602e      	str	r6, [r5, #0]
   53b62:	061e      	lsls	r6, r3, #24
   53b64:	d503      	bpl.n	53b6e <_printf_i+0x1a2>
   53b66:	680d      	ldr	r5, [r1, #0]
   53b68:	e004      	b.n	53b74 <_printf_i+0x1a8>
   53b6a:	482d      	ldr	r0, [pc, #180]	; (53c20 <_printf_i+0x254>)
   53b6c:	e7f3      	b.n	53b56 <_printf_i+0x18a>
   53b6e:	065d      	lsls	r5, r3, #25
   53b70:	d5f9      	bpl.n	53b66 <_printf_i+0x19a>
   53b72:	880d      	ldrh	r5, [r1, #0]
   53b74:	07d9      	lsls	r1, r3, #31
   53b76:	bf44      	itt	mi
   53b78:	f043 0320 	orrmi.w	r3, r3, #32
   53b7c:	6023      	strmi	r3, [r4, #0]
   53b7e:	b10d      	cbz	r5, 53b84 <_printf_i+0x1b8>
   53b80:	2310      	movs	r3, #16
   53b82:	e7d1      	b.n	53b28 <_printf_i+0x15c>
   53b84:	6823      	ldr	r3, [r4, #0]
   53b86:	f023 0320 	bic.w	r3, r3, #32
   53b8a:	6023      	str	r3, [r4, #0]
   53b8c:	e7f8      	b.n	53b80 <_printf_i+0x1b4>
   53b8e:	4824      	ldr	r0, [pc, #144]	; (53c20 <_printf_i+0x254>)
   53b90:	230a      	movs	r3, #10
   53b92:	e7cc      	b.n	53b2e <_printf_i+0x162>
   53b94:	682b      	ldr	r3, [r5, #0]
   53b96:	6826      	ldr	r6, [r4, #0]
   53b98:	1d18      	adds	r0, r3, #4
   53b9a:	6961      	ldr	r1, [r4, #20]
   53b9c:	6028      	str	r0, [r5, #0]
   53b9e:	0635      	lsls	r5, r6, #24
   53ba0:	681b      	ldr	r3, [r3, #0]
   53ba2:	d501      	bpl.n	53ba8 <_printf_i+0x1dc>
   53ba4:	6019      	str	r1, [r3, #0]
   53ba6:	e002      	b.n	53bae <_printf_i+0x1e2>
   53ba8:	0670      	lsls	r0, r6, #25
   53baa:	d5fb      	bpl.n	53ba4 <_printf_i+0x1d8>
   53bac:	8019      	strh	r1, [r3, #0]
   53bae:	2300      	movs	r3, #0
   53bb0:	4616      	mov	r6, r2
   53bb2:	6123      	str	r3, [r4, #16]
   53bb4:	e795      	b.n	53ae2 <_printf_i+0x116>
   53bb6:	682b      	ldr	r3, [r5, #0]
   53bb8:	2100      	movs	r1, #0
   53bba:	1d1a      	adds	r2, r3, #4
   53bbc:	602a      	str	r2, [r5, #0]
   53bbe:	681e      	ldr	r6, [r3, #0]
   53bc0:	6862      	ldr	r2, [r4, #4]
   53bc2:	4630      	mov	r0, r6
   53bc4:	f007 f970 	bl	5aea8 <memchr>
   53bc8:	b108      	cbz	r0, 53bce <_printf_i+0x202>
   53bca:	1b80      	subs	r0, r0, r6
   53bcc:	6060      	str	r0, [r4, #4]
   53bce:	6863      	ldr	r3, [r4, #4]
   53bd0:	6123      	str	r3, [r4, #16]
   53bd2:	2300      	movs	r3, #0
   53bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   53bd8:	e783      	b.n	53ae2 <_printf_i+0x116>
   53bda:	6923      	ldr	r3, [r4, #16]
   53bdc:	4632      	mov	r2, r6
   53bde:	4649      	mov	r1, r9
   53be0:	4640      	mov	r0, r8
   53be2:	47d0      	blx	sl
   53be4:	3001      	adds	r0, #1
   53be6:	d086      	beq.n	53af6 <_printf_i+0x12a>
   53be8:	6823      	ldr	r3, [r4, #0]
   53bea:	079b      	lsls	r3, r3, #30
   53bec:	d414      	bmi.n	53c18 <_printf_i+0x24c>
   53bee:	68e0      	ldr	r0, [r4, #12]
   53bf0:	9b03      	ldr	r3, [sp, #12]
   53bf2:	4298      	cmp	r0, r3
   53bf4:	bfb8      	it	lt
   53bf6:	4618      	movlt	r0, r3
   53bf8:	e77f      	b.n	53afa <_printf_i+0x12e>
   53bfa:	2301      	movs	r3, #1
   53bfc:	4632      	mov	r2, r6
   53bfe:	4649      	mov	r1, r9
   53c00:	4640      	mov	r0, r8
   53c02:	47d0      	blx	sl
   53c04:	3001      	adds	r0, #1
   53c06:	f43f af76 	beq.w	53af6 <_printf_i+0x12a>
   53c0a:	3501      	adds	r5, #1
   53c0c:	68e3      	ldr	r3, [r4, #12]
   53c0e:	9903      	ldr	r1, [sp, #12]
   53c10:	1a5b      	subs	r3, r3, r1
   53c12:	42ab      	cmp	r3, r5
   53c14:	dcf1      	bgt.n	53bfa <_printf_i+0x22e>
   53c16:	e7ea      	b.n	53bee <_printf_i+0x222>
   53c18:	2500      	movs	r5, #0
   53c1a:	f104 0619 	add.w	r6, r4, #25
   53c1e:	e7f5      	b.n	53c0c <_printf_i+0x240>
   53c20:	00060a99 	.word	0x00060a99
   53c24:	00060aaa 	.word	0x00060aaa

00053c28 <_sbrk_r>:
   53c28:	b538      	push	{r3, r4, r5, lr}
   53c2a:	2300      	movs	r3, #0
   53c2c:	4d05      	ldr	r5, [pc, #20]	; (53c44 <_sbrk_r+0x1c>)
   53c2e:	4604      	mov	r4, r0
   53c30:	4608      	mov	r0, r1
   53c32:	602b      	str	r3, [r5, #0]
   53c34:	f7f2 ff76 	bl	46b24 <_sbrk>
   53c38:	1c43      	adds	r3, r0, #1
   53c3a:	d102      	bne.n	53c42 <_sbrk_r+0x1a>
   53c3c:	682b      	ldr	r3, [r5, #0]
   53c3e:	b103      	cbz	r3, 53c42 <_sbrk_r+0x1a>
   53c40:	6023      	str	r3, [r4, #0]
   53c42:	bd38      	pop	{r3, r4, r5, pc}
   53c44:	2001bcc8 	.word	0x2001bcc8

00053c48 <_strtol_l.constprop.0>:
   53c48:	2b24      	cmp	r3, #36	; 0x24
   53c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   53c4e:	4686      	mov	lr, r0
   53c50:	4690      	mov	r8, r2
   53c52:	d801      	bhi.n	53c58 <_strtol_l.constprop.0+0x10>
   53c54:	2b01      	cmp	r3, #1
   53c56:	d106      	bne.n	53c66 <_strtol_l.constprop.0+0x1e>
   53c58:	f002 fa91 	bl	5617e <__errno>
   53c5c:	2316      	movs	r3, #22
   53c5e:	6003      	str	r3, [r0, #0]
   53c60:	2000      	movs	r0, #0
   53c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   53c66:	460d      	mov	r5, r1
   53c68:	4835      	ldr	r0, [pc, #212]	; (53d40 <_strtol_l.constprop.0+0xf8>)
   53c6a:	462a      	mov	r2, r5
   53c6c:	f815 4b01 	ldrb.w	r4, [r5], #1
   53c70:	5d06      	ldrb	r6, [r0, r4]
   53c72:	f016 0608 	ands.w	r6, r6, #8
   53c76:	d1f8      	bne.n	53c6a <_strtol_l.constprop.0+0x22>
   53c78:	2c2d      	cmp	r4, #45	; 0x2d
   53c7a:	d124      	bne.n	53cc6 <_strtol_l.constprop.0+0x7e>
   53c7c:	782c      	ldrb	r4, [r5, #0]
   53c7e:	2601      	movs	r6, #1
   53c80:	1c95      	adds	r5, r2, #2
   53c82:	bb2b      	cbnz	r3, 53cd0 <_strtol_l.constprop.0+0x88>
   53c84:	2c30      	cmp	r4, #48	; 0x30
   53c86:	d030      	beq.n	53cea <_strtol_l.constprop.0+0xa2>
   53c88:	230a      	movs	r3, #10
   53c8a:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   53c8e:	2200      	movs	r2, #0
   53c90:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   53c94:	4610      	mov	r0, r2
   53c96:	fbbc f9f3 	udiv	r9, ip, r3
   53c9a:	fb03 ca19 	mls	sl, r3, r9, ip
   53c9e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   53ca2:	2f09      	cmp	r7, #9
   53ca4:	d828      	bhi.n	53cf8 <_strtol_l.constprop.0+0xb0>
   53ca6:	463c      	mov	r4, r7
   53ca8:	42a3      	cmp	r3, r4
   53caa:	dd34      	ble.n	53d16 <_strtol_l.constprop.0+0xce>
   53cac:	1c57      	adds	r7, r2, #1
   53cae:	d007      	beq.n	53cc0 <_strtol_l.constprop.0+0x78>
   53cb0:	4581      	cmp	r9, r0
   53cb2:	d32d      	bcc.n	53d10 <_strtol_l.constprop.0+0xc8>
   53cb4:	d101      	bne.n	53cba <_strtol_l.constprop.0+0x72>
   53cb6:	45a2      	cmp	sl, r4
   53cb8:	db2a      	blt.n	53d10 <_strtol_l.constprop.0+0xc8>
   53cba:	fb00 4003 	mla	r0, r0, r3, r4
   53cbe:	2201      	movs	r2, #1
   53cc0:	f815 4b01 	ldrb.w	r4, [r5], #1
   53cc4:	e7eb      	b.n	53c9e <_strtol_l.constprop.0+0x56>
   53cc6:	2c2b      	cmp	r4, #43	; 0x2b
   53cc8:	bf04      	itt	eq
   53cca:	782c      	ldrbeq	r4, [r5, #0]
   53ccc:	1c95      	addeq	r5, r2, #2
   53cce:	e7d8      	b.n	53c82 <_strtol_l.constprop.0+0x3a>
   53cd0:	2b10      	cmp	r3, #16
   53cd2:	d1da      	bne.n	53c8a <_strtol_l.constprop.0+0x42>
   53cd4:	2c30      	cmp	r4, #48	; 0x30
   53cd6:	d1d8      	bne.n	53c8a <_strtol_l.constprop.0+0x42>
   53cd8:	782a      	ldrb	r2, [r5, #0]
   53cda:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   53cde:	2a58      	cmp	r2, #88	; 0x58
   53ce0:	d1d3      	bne.n	53c8a <_strtol_l.constprop.0+0x42>
   53ce2:	786c      	ldrb	r4, [r5, #1]
   53ce4:	2310      	movs	r3, #16
   53ce6:	3502      	adds	r5, #2
   53ce8:	e7cf      	b.n	53c8a <_strtol_l.constprop.0+0x42>
   53cea:	782b      	ldrb	r3, [r5, #0]
   53cec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   53cf0:	2b58      	cmp	r3, #88	; 0x58
   53cf2:	d0f6      	beq.n	53ce2 <_strtol_l.constprop.0+0x9a>
   53cf4:	2308      	movs	r3, #8
   53cf6:	e7c8      	b.n	53c8a <_strtol_l.constprop.0+0x42>
   53cf8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   53cfc:	2f19      	cmp	r7, #25
   53cfe:	d801      	bhi.n	53d04 <_strtol_l.constprop.0+0xbc>
   53d00:	3c37      	subs	r4, #55	; 0x37
   53d02:	e7d1      	b.n	53ca8 <_strtol_l.constprop.0+0x60>
   53d04:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   53d08:	2f19      	cmp	r7, #25
   53d0a:	d804      	bhi.n	53d16 <_strtol_l.constprop.0+0xce>
   53d0c:	3c57      	subs	r4, #87	; 0x57
   53d0e:	e7cb      	b.n	53ca8 <_strtol_l.constprop.0+0x60>
   53d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   53d14:	e7d4      	b.n	53cc0 <_strtol_l.constprop.0+0x78>
   53d16:	1c53      	adds	r3, r2, #1
   53d18:	d108      	bne.n	53d2c <_strtol_l.constprop.0+0xe4>
   53d1a:	2322      	movs	r3, #34	; 0x22
   53d1c:	4660      	mov	r0, ip
   53d1e:	f8ce 3000 	str.w	r3, [lr]
   53d22:	f1b8 0f00 	cmp.w	r8, #0
   53d26:	d09c      	beq.n	53c62 <_strtol_l.constprop.0+0x1a>
   53d28:	1e69      	subs	r1, r5, #1
   53d2a:	e006      	b.n	53d3a <_strtol_l.constprop.0+0xf2>
   53d2c:	b106      	cbz	r6, 53d30 <_strtol_l.constprop.0+0xe8>
   53d2e:	4240      	negs	r0, r0
   53d30:	f1b8 0f00 	cmp.w	r8, #0
   53d34:	d095      	beq.n	53c62 <_strtol_l.constprop.0+0x1a>
   53d36:	2a00      	cmp	r2, #0
   53d38:	d1f6      	bne.n	53d28 <_strtol_l.constprop.0+0xe0>
   53d3a:	f8c8 1000 	str.w	r1, [r8]
   53d3e:	e790      	b.n	53c62 <_strtol_l.constprop.0+0x1a>
   53d40:	0006098d 	.word	0x0006098d

00053d44 <strtol>:
   53d44:	4613      	mov	r3, r2
   53d46:	460a      	mov	r2, r1
   53d48:	4601      	mov	r1, r0
   53d4a:	4802      	ldr	r0, [pc, #8]	; (53d54 <strtol+0x10>)
   53d4c:	6800      	ldr	r0, [r0, #0]
   53d4e:	f7ff bf7b 	b.w	53c48 <_strtol_l.constprop.0>
   53d52:	bf00      	nop
   53d54:	2001a830 	.word	0x2001a830

00053d58 <_strtoll_l.constprop.0>:
   53d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   53d5c:	4690      	mov	r8, r2
   53d5e:	b085      	sub	sp, #20
   53d60:	4689      	mov	r9, r1
   53d62:	461e      	mov	r6, r3
   53d64:	460d      	mov	r5, r1
   53d66:	4a45      	ldr	r2, [pc, #276]	; (53e7c <_strtoll_l.constprop.0+0x124>)
   53d68:	9002      	str	r0, [sp, #8]
   53d6a:	462b      	mov	r3, r5
   53d6c:	f815 4b01 	ldrb.w	r4, [r5], #1
   53d70:	5d17      	ldrb	r7, [r2, r4]
   53d72:	f017 0708 	ands.w	r7, r7, #8
   53d76:	d1f8      	bne.n	53d6a <_strtoll_l.constprop.0+0x12>
   53d78:	2c2d      	cmp	r4, #45	; 0x2d
   53d7a:	d141      	bne.n	53e00 <_strtoll_l.constprop.0+0xa8>
   53d7c:	782c      	ldrb	r4, [r5, #0]
   53d7e:	2701      	movs	r7, #1
   53d80:	1c9d      	adds	r5, r3, #2
   53d82:	2e00      	cmp	r6, #0
   53d84:	d141      	bne.n	53e0a <_strtoll_l.constprop.0+0xb2>
   53d86:	2c30      	cmp	r4, #48	; 0x30
   53d88:	d04c      	beq.n	53e24 <_strtoll_l.constprop.0+0xcc>
   53d8a:	260a      	movs	r6, #10
   53d8c:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   53d90:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
   53d94:	17f3      	asrs	r3, r6, #31
   53d96:	4632      	mov	r2, r6
   53d98:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   53d9c:	4658      	mov	r0, fp
   53d9e:	9303      	str	r3, [sp, #12]
   53da0:	4651      	mov	r1, sl
   53da2:	f7ec feb5 	bl	40b10 <__aeabi_uldivmod>
   53da6:	9201      	str	r2, [sp, #4]
   53da8:	2200      	movs	r2, #0
   53daa:	468e      	mov	lr, r1
   53dac:	4684      	mov	ip, r0
   53dae:	4611      	mov	r1, r2
   53db0:	4610      	mov	r0, r2
   53db2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   53db6:	2b09      	cmp	r3, #9
   53db8:	d905      	bls.n	53dc6 <_strtoll_l.constprop.0+0x6e>
   53dba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   53dbe:	2b19      	cmp	r3, #25
   53dc0:	d837      	bhi.n	53e32 <_strtoll_l.constprop.0+0xda>
   53dc2:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   53dc6:	429e      	cmp	r6, r3
   53dc8:	dd3d      	ble.n	53e46 <_strtoll_l.constprop.0+0xee>
   53dca:	1c54      	adds	r4, r2, #1
   53dcc:	d015      	beq.n	53dfa <_strtoll_l.constprop.0+0xa2>
   53dce:	4584      	cmp	ip, r0
   53dd0:	eb7e 0201 	sbcs.w	r2, lr, r1
   53dd4:	d334      	bcc.n	53e40 <_strtoll_l.constprop.0+0xe8>
   53dd6:	458e      	cmp	lr, r1
   53dd8:	bf08      	it	eq
   53dda:	4584      	cmpeq	ip, r0
   53ddc:	d102      	bne.n	53de4 <_strtoll_l.constprop.0+0x8c>
   53dde:	9a01      	ldr	r2, [sp, #4]
   53de0:	429a      	cmp	r2, r3
   53de2:	db2d      	blt.n	53e40 <_strtoll_l.constprop.0+0xe8>
   53de4:	9a03      	ldr	r2, [sp, #12]
   53de6:	4371      	muls	r1, r6
   53de8:	fb00 1102 	mla	r1, r0, r2, r1
   53dec:	fba6 0200 	umull	r0, r2, r6, r0
   53df0:	440a      	add	r2, r1
   53df2:	1818      	adds	r0, r3, r0
   53df4:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   53df8:	2201      	movs	r2, #1
   53dfa:	f815 4b01 	ldrb.w	r4, [r5], #1
   53dfe:	e7d8      	b.n	53db2 <_strtoll_l.constprop.0+0x5a>
   53e00:	2c2b      	cmp	r4, #43	; 0x2b
   53e02:	bf04      	itt	eq
   53e04:	782c      	ldrbeq	r4, [r5, #0]
   53e06:	1c9d      	addeq	r5, r3, #2
   53e08:	e7bb      	b.n	53d82 <_strtoll_l.constprop.0+0x2a>
   53e0a:	2e10      	cmp	r6, #16
   53e0c:	d1be      	bne.n	53d8c <_strtoll_l.constprop.0+0x34>
   53e0e:	2c30      	cmp	r4, #48	; 0x30
   53e10:	d1bc      	bne.n	53d8c <_strtoll_l.constprop.0+0x34>
   53e12:	782b      	ldrb	r3, [r5, #0]
   53e14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   53e18:	2b58      	cmp	r3, #88	; 0x58
   53e1a:	d1b7      	bne.n	53d8c <_strtoll_l.constprop.0+0x34>
   53e1c:	786c      	ldrb	r4, [r5, #1]
   53e1e:	2610      	movs	r6, #16
   53e20:	3502      	adds	r5, #2
   53e22:	e7b3      	b.n	53d8c <_strtoll_l.constprop.0+0x34>
   53e24:	782b      	ldrb	r3, [r5, #0]
   53e26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   53e2a:	2b58      	cmp	r3, #88	; 0x58
   53e2c:	d0f6      	beq.n	53e1c <_strtoll_l.constprop.0+0xc4>
   53e2e:	2608      	movs	r6, #8
   53e30:	e7ac      	b.n	53d8c <_strtoll_l.constprop.0+0x34>
   53e32:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   53e36:	2b19      	cmp	r3, #25
   53e38:	d805      	bhi.n	53e46 <_strtoll_l.constprop.0+0xee>
   53e3a:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   53e3e:	e7c2      	b.n	53dc6 <_strtoll_l.constprop.0+0x6e>
   53e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   53e44:	e7d9      	b.n	53dfa <_strtoll_l.constprop.0+0xa2>
   53e46:	1c53      	adds	r3, r2, #1
   53e48:	d10a      	bne.n	53e60 <_strtoll_l.constprop.0+0x108>
   53e4a:	2322      	movs	r3, #34	; 0x22
   53e4c:	9a02      	ldr	r2, [sp, #8]
   53e4e:	4658      	mov	r0, fp
   53e50:	4651      	mov	r1, sl
   53e52:	6013      	str	r3, [r2, #0]
   53e54:	f1b8 0f00 	cmp.w	r8, #0
   53e58:	d10a      	bne.n	53e70 <_strtoll_l.constprop.0+0x118>
   53e5a:	b005      	add	sp, #20
   53e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53e60:	b117      	cbz	r7, 53e68 <_strtoll_l.constprop.0+0x110>
   53e62:	4240      	negs	r0, r0
   53e64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   53e68:	f1b8 0f00 	cmp.w	r8, #0
   53e6c:	d0f5      	beq.n	53e5a <_strtoll_l.constprop.0+0x102>
   53e6e:	b10a      	cbz	r2, 53e74 <_strtoll_l.constprop.0+0x11c>
   53e70:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   53e74:	f8c8 9000 	str.w	r9, [r8]
   53e78:	e7ef      	b.n	53e5a <_strtoll_l.constprop.0+0x102>
   53e7a:	bf00      	nop
   53e7c:	0006098d 	.word	0x0006098d

00053e80 <strtoll>:
   53e80:	4613      	mov	r3, r2
   53e82:	460a      	mov	r2, r1
   53e84:	4601      	mov	r1, r0
   53e86:	4802      	ldr	r0, [pc, #8]	; (53e90 <strtoll+0x10>)
   53e88:	6800      	ldr	r0, [r0, #0]
   53e8a:	f7ff bf65 	b.w	53d58 <_strtoll_l.constprop.0>
   53e8e:	bf00      	nop
   53e90:	2001a830 	.word	0x2001a830

00053e94 <_strtoul_l.constprop.0>:
   53e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   53e98:	4686      	mov	lr, r0
   53e9a:	460d      	mov	r5, r1
   53e9c:	4e35      	ldr	r6, [pc, #212]	; (53f74 <_strtoul_l.constprop.0+0xe0>)
   53e9e:	4628      	mov	r0, r5
   53ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
   53ea4:	5d37      	ldrb	r7, [r6, r4]
   53ea6:	f017 0708 	ands.w	r7, r7, #8
   53eaa:	d1f8      	bne.n	53e9e <_strtoul_l.constprop.0+0xa>
   53eac:	2c2d      	cmp	r4, #45	; 0x2d
   53eae:	d126      	bne.n	53efe <_strtoul_l.constprop.0+0x6a>
   53eb0:	782c      	ldrb	r4, [r5, #0]
   53eb2:	2701      	movs	r7, #1
   53eb4:	1c85      	adds	r5, r0, #2
   53eb6:	bb3b      	cbnz	r3, 53f08 <_strtoul_l.constprop.0+0x74>
   53eb8:	2c30      	cmp	r4, #48	; 0x30
   53eba:	d032      	beq.n	53f22 <_strtoul_l.constprop.0+0x8e>
   53ebc:	230a      	movs	r3, #10
   53ebe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   53ec2:	2600      	movs	r6, #0
   53ec4:	fbb8 f8f3 	udiv	r8, r8, r3
   53ec8:	fb03 f908 	mul.w	r9, r3, r8
   53ecc:	4630      	mov	r0, r6
   53ece:	ea6f 0909 	mvn.w	r9, r9
   53ed2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   53ed6:	f1bc 0f09 	cmp.w	ip, #9
   53eda:	d829      	bhi.n	53f30 <_strtoul_l.constprop.0+0x9c>
   53edc:	4664      	mov	r4, ip
   53ede:	42a3      	cmp	r3, r4
   53ee0:	dd37      	ble.n	53f52 <_strtoul_l.constprop.0+0xbe>
   53ee2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   53ee6:	d007      	beq.n	53ef8 <_strtoul_l.constprop.0+0x64>
   53ee8:	4580      	cmp	r8, r0
   53eea:	d32f      	bcc.n	53f4c <_strtoul_l.constprop.0+0xb8>
   53eec:	d101      	bne.n	53ef2 <_strtoul_l.constprop.0+0x5e>
   53eee:	45a1      	cmp	r9, r4
   53ef0:	db2c      	blt.n	53f4c <_strtoul_l.constprop.0+0xb8>
   53ef2:	fb00 4003 	mla	r0, r0, r3, r4
   53ef6:	2601      	movs	r6, #1
   53ef8:	f815 4b01 	ldrb.w	r4, [r5], #1
   53efc:	e7e9      	b.n	53ed2 <_strtoul_l.constprop.0+0x3e>
   53efe:	2c2b      	cmp	r4, #43	; 0x2b
   53f00:	bf04      	itt	eq
   53f02:	782c      	ldrbeq	r4, [r5, #0]
   53f04:	1c85      	addeq	r5, r0, #2
   53f06:	e7d6      	b.n	53eb6 <_strtoul_l.constprop.0+0x22>
   53f08:	2b10      	cmp	r3, #16
   53f0a:	d1d8      	bne.n	53ebe <_strtoul_l.constprop.0+0x2a>
   53f0c:	2c30      	cmp	r4, #48	; 0x30
   53f0e:	d1d6      	bne.n	53ebe <_strtoul_l.constprop.0+0x2a>
   53f10:	7828      	ldrb	r0, [r5, #0]
   53f12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   53f16:	2858      	cmp	r0, #88	; 0x58
   53f18:	d1d1      	bne.n	53ebe <_strtoul_l.constprop.0+0x2a>
   53f1a:	786c      	ldrb	r4, [r5, #1]
   53f1c:	2310      	movs	r3, #16
   53f1e:	3502      	adds	r5, #2
   53f20:	e7cd      	b.n	53ebe <_strtoul_l.constprop.0+0x2a>
   53f22:	782b      	ldrb	r3, [r5, #0]
   53f24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   53f28:	2b58      	cmp	r3, #88	; 0x58
   53f2a:	d0f6      	beq.n	53f1a <_strtoul_l.constprop.0+0x86>
   53f2c:	2308      	movs	r3, #8
   53f2e:	e7c6      	b.n	53ebe <_strtoul_l.constprop.0+0x2a>
   53f30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   53f34:	f1bc 0f19 	cmp.w	ip, #25
   53f38:	d801      	bhi.n	53f3e <_strtoul_l.constprop.0+0xaa>
   53f3a:	3c37      	subs	r4, #55	; 0x37
   53f3c:	e7cf      	b.n	53ede <_strtoul_l.constprop.0+0x4a>
   53f3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   53f42:	f1bc 0f19 	cmp.w	ip, #25
   53f46:	d804      	bhi.n	53f52 <_strtoul_l.constprop.0+0xbe>
   53f48:	3c57      	subs	r4, #87	; 0x57
   53f4a:	e7c8      	b.n	53ede <_strtoul_l.constprop.0+0x4a>
   53f4c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   53f50:	e7d2      	b.n	53ef8 <_strtoul_l.constprop.0+0x64>
   53f52:	1c73      	adds	r3, r6, #1
   53f54:	d106      	bne.n	53f64 <_strtoul_l.constprop.0+0xd0>
   53f56:	2322      	movs	r3, #34	; 0x22
   53f58:	4630      	mov	r0, r6
   53f5a:	f8ce 3000 	str.w	r3, [lr]
   53f5e:	b932      	cbnz	r2, 53f6e <_strtoul_l.constprop.0+0xda>
   53f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   53f64:	b107      	cbz	r7, 53f68 <_strtoul_l.constprop.0+0xd4>
   53f66:	4240      	negs	r0, r0
   53f68:	2a00      	cmp	r2, #0
   53f6a:	d0f9      	beq.n	53f60 <_strtoul_l.constprop.0+0xcc>
   53f6c:	b106      	cbz	r6, 53f70 <_strtoul_l.constprop.0+0xdc>
   53f6e:	1e69      	subs	r1, r5, #1
   53f70:	6011      	str	r1, [r2, #0]
   53f72:	e7f5      	b.n	53f60 <_strtoul_l.constprop.0+0xcc>
   53f74:	0006098d 	.word	0x0006098d

00053f78 <strtoul>:
   53f78:	4613      	mov	r3, r2
   53f7a:	460a      	mov	r2, r1
   53f7c:	4601      	mov	r1, r0
   53f7e:	4802      	ldr	r0, [pc, #8]	; (53f88 <strtoul+0x10>)
   53f80:	6800      	ldr	r0, [r0, #0]
   53f82:	f7ff bf87 	b.w	53e94 <_strtoul_l.constprop.0>
   53f86:	bf00      	nop
   53f88:	2001a830 	.word	0x2001a830

00053f8c <vsniprintf>:
   53f8c:	b507      	push	{r0, r1, r2, lr}
   53f8e:	9300      	str	r3, [sp, #0]
   53f90:	4613      	mov	r3, r2
   53f92:	460a      	mov	r2, r1
   53f94:	4601      	mov	r1, r0
   53f96:	4803      	ldr	r0, [pc, #12]	; (53fa4 <vsniprintf+0x18>)
   53f98:	6800      	ldr	r0, [r0, #0]
   53f9a:	f007 f9f9 	bl	5b390 <_vsniprintf_r>
   53f9e:	b003      	add	sp, #12
   53fa0:	f85d fb04 	ldr.w	pc, [sp], #4
   53fa4:	2001a830 	.word	0x2001a830

00053fa8 <_vsiprintf_r>:
   53fa8:	b500      	push	{lr}
   53faa:	b09b      	sub	sp, #108	; 0x6c
   53fac:	9100      	str	r1, [sp, #0]
   53fae:	9104      	str	r1, [sp, #16]
   53fb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   53fb4:	9105      	str	r1, [sp, #20]
   53fb6:	9102      	str	r1, [sp, #8]
   53fb8:	4905      	ldr	r1, [pc, #20]	; (53fd0 <_vsiprintf_r+0x28>)
   53fba:	9103      	str	r1, [sp, #12]
   53fbc:	4669      	mov	r1, sp
   53fbe:	f000 fba5 	bl	5470c <_svfiprintf_r>
   53fc2:	9b00      	ldr	r3, [sp, #0]
   53fc4:	2200      	movs	r2, #0
   53fc6:	701a      	strb	r2, [r3, #0]
   53fc8:	b01b      	add	sp, #108	; 0x6c
   53fca:	f85d fb04 	ldr.w	pc, [sp], #4
   53fce:	bf00      	nop
   53fd0:	ffff0208 	.word	0xffff0208

00053fd4 <vsiprintf>:
   53fd4:	4613      	mov	r3, r2
   53fd6:	460a      	mov	r2, r1
   53fd8:	4601      	mov	r1, r0
   53fda:	4802      	ldr	r0, [pc, #8]	; (53fe4 <vsiprintf+0x10>)
   53fdc:	6800      	ldr	r0, [r0, #0]
   53fde:	f7ff bfe3 	b.w	53fa8 <_vsiprintf_r>
   53fe2:	bf00      	nop
   53fe4:	2001a830 	.word	0x2001a830

00053fe8 <_vsiscanf_r>:
   53fe8:	b570      	push	{r4, r5, r6, lr}
   53fea:	461e      	mov	r6, r3
   53fec:	b09a      	sub	sp, #104	; 0x68
   53fee:	f44f 7301 	mov.w	r3, #516	; 0x204
   53ff2:	4604      	mov	r4, r0
   53ff4:	4608      	mov	r0, r1
   53ff6:	4615      	mov	r5, r2
   53ff8:	f8ad 300c 	strh.w	r3, [sp, #12]
   53ffc:	9100      	str	r1, [sp, #0]
   53ffe:	9104      	str	r1, [sp, #16]
   54000:	f7ec fef8 	bl	40df4 <strlen>
   54004:	4b09      	ldr	r3, [pc, #36]	; (5402c <_vsiscanf_r+0x44>)
   54006:	462a      	mov	r2, r5
   54008:	4669      	mov	r1, sp
   5400a:	9001      	str	r0, [sp, #4]
   5400c:	9309      	str	r3, [sp, #36]	; 0x24
   5400e:	2300      	movs	r3, #0
   54010:	9005      	str	r0, [sp, #20]
   54012:	4620      	mov	r0, r4
   54014:	930d      	str	r3, [sp, #52]	; 0x34
   54016:	9312      	str	r3, [sp, #72]	; 0x48
   54018:	f64f 73ff 	movw	r3, #65535	; 0xffff
   5401c:	f8ad 300e 	strh.w	r3, [sp, #14]
   54020:	4633      	mov	r3, r6
   54022:	f000 fc6f 	bl	54904 <__ssvfiscanf_r>
   54026:	b01a      	add	sp, #104	; 0x68
   54028:	bd70      	pop	{r4, r5, r6, pc}
   5402a:	bf00      	nop
   5402c:	0005b201 	.word	0x0005b201

00054030 <vsiscanf>:
   54030:	4613      	mov	r3, r2
   54032:	460a      	mov	r2, r1
   54034:	4601      	mov	r1, r0
   54036:	4802      	ldr	r0, [pc, #8]	; (54040 <vsiscanf+0x10>)
   54038:	6800      	ldr	r0, [r0, #0]
   5403a:	f7ff bfd5 	b.w	53fe8 <_vsiscanf_r>
   5403e:	bf00      	nop
   54040:	2001a830 	.word	0x2001a830

00054044 <_write_r>:
   54044:	b538      	push	{r3, r4, r5, lr}
   54046:	4604      	mov	r4, r0
   54048:	4d06      	ldr	r5, [pc, #24]	; (54064 <_write_r+0x20>)
   5404a:	4608      	mov	r0, r1
   5404c:	4611      	mov	r1, r2
   5404e:	2200      	movs	r2, #0
   54050:	602a      	str	r2, [r5, #0]
   54052:	461a      	mov	r2, r3
   54054:	f002 f86a 	bl	5612c <_write>
   54058:	1c43      	adds	r3, r0, #1
   5405a:	d102      	bne.n	54062 <_write_r+0x1e>
   5405c:	682b      	ldr	r3, [r5, #0]
   5405e:	b103      	cbz	r3, 54062 <_write_r+0x1e>
   54060:	6023      	str	r3, [r4, #0]
   54062:	bd38      	pop	{r3, r4, r5, pc}
   54064:	2001bcc8 	.word	0x2001bcc8

00054068 <_close_r>:
   54068:	b538      	push	{r3, r4, r5, lr}
   5406a:	2300      	movs	r3, #0
   5406c:	4d05      	ldr	r5, [pc, #20]	; (54084 <_close_r+0x1c>)
   5406e:	4604      	mov	r4, r0
   54070:	4608      	mov	r0, r1
   54072:	602b      	str	r3, [r5, #0]
   54074:	f002 f85e 	bl	56134 <_close>
   54078:	1c43      	adds	r3, r0, #1
   5407a:	d102      	bne.n	54082 <_close_r+0x1a>
   5407c:	682b      	ldr	r3, [r5, #0]
   5407e:	b103      	cbz	r3, 54082 <_close_r+0x1a>
   54080:	6023      	str	r3, [r4, #0]
   54082:	bd38      	pop	{r3, r4, r5, pc}
   54084:	2001bcc8 	.word	0x2001bcc8

00054088 <_localeconv_r>:
   54088:	4800      	ldr	r0, [pc, #0]	; (5408c <_localeconv_r+0x4>)
   5408a:	4770      	bx	lr
   5408c:	2001a984 	.word	0x2001a984

00054090 <_lseek_r>:
   54090:	b538      	push	{r3, r4, r5, lr}
   54092:	4604      	mov	r4, r0
   54094:	4d06      	ldr	r5, [pc, #24]	; (540b0 <_lseek_r+0x20>)
   54096:	4608      	mov	r0, r1
   54098:	4611      	mov	r1, r2
   5409a:	2200      	movs	r2, #0
   5409c:	602a      	str	r2, [r5, #0]
   5409e:	461a      	mov	r2, r3
   540a0:	f002 f84b 	bl	5613a <_lseek>
   540a4:	1c43      	adds	r3, r0, #1
   540a6:	d102      	bne.n	540ae <_lseek_r+0x1e>
   540a8:	682b      	ldr	r3, [r5, #0]
   540aa:	b103      	cbz	r3, 540ae <_lseek_r+0x1e>
   540ac:	6023      	str	r3, [r4, #0]
   540ae:	bd38      	pop	{r3, r4, r5, pc}
   540b0:	2001bcc8 	.word	0x2001bcc8

000540b4 <__malloc_lock>:
   540b4:	4801      	ldr	r0, [pc, #4]	; (540bc <__malloc_lock+0x8>)
   540b6:	f002 b85a 	b.w	5616e <__retarget_lock_acquire_recursive>
   540ba:	bf00      	nop
   540bc:	2001ab20 	.word	0x2001ab20

000540c0 <__malloc_unlock>:
   540c0:	4801      	ldr	r0, [pc, #4]	; (540c8 <__malloc_unlock+0x8>)
   540c2:	f002 b85a 	b.w	5617a <__retarget_lock_release_recursive>
   540c6:	bf00      	nop
   540c8:	2001ab20 	.word	0x2001ab20

000540cc <_Balloc>:
   540cc:	b570      	push	{r4, r5, r6, lr}
   540ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   540d0:	4604      	mov	r4, r0
   540d2:	460d      	mov	r5, r1
   540d4:	b976      	cbnz	r6, 540f4 <_Balloc+0x28>
   540d6:	2010      	movs	r0, #16
   540d8:	f7ff f990 	bl	533fc <malloc>
   540dc:	4602      	mov	r2, r0
   540de:	6260      	str	r0, [r4, #36]	; 0x24
   540e0:	b920      	cbnz	r0, 540ec <_Balloc+0x20>
   540e2:	4b18      	ldr	r3, [pc, #96]	; (54144 <_Balloc+0x78>)
   540e4:	2166      	movs	r1, #102	; 0x66
   540e6:	4818      	ldr	r0, [pc, #96]	; (54148 <_Balloc+0x7c>)
   540e8:	f000 feee 	bl	54ec8 <__assert_func>
   540ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   540f0:	6006      	str	r6, [r0, #0]
   540f2:	60c6      	str	r6, [r0, #12]
   540f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   540f6:	68f3      	ldr	r3, [r6, #12]
   540f8:	b183      	cbz	r3, 5411c <_Balloc+0x50>
   540fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   540fc:	68db      	ldr	r3, [r3, #12]
   540fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   54102:	b9b8      	cbnz	r0, 54134 <_Balloc+0x68>
   54104:	2101      	movs	r1, #1
   54106:	4620      	mov	r0, r4
   54108:	fa01 f605 	lsl.w	r6, r1, r5
   5410c:	1d72      	adds	r2, r6, #5
   5410e:	0092      	lsls	r2, r2, #2
   54110:	f006 ff2a 	bl	5af68 <_calloc_r>
   54114:	b160      	cbz	r0, 54130 <_Balloc+0x64>
   54116:	e9c0 5601 	strd	r5, r6, [r0, #4]
   5411a:	e00e      	b.n	5413a <_Balloc+0x6e>
   5411c:	2221      	movs	r2, #33	; 0x21
   5411e:	2104      	movs	r1, #4
   54120:	4620      	mov	r0, r4
   54122:	f006 ff21 	bl	5af68 <_calloc_r>
   54126:	6a63      	ldr	r3, [r4, #36]	; 0x24
   54128:	60f0      	str	r0, [r6, #12]
   5412a:	68db      	ldr	r3, [r3, #12]
   5412c:	2b00      	cmp	r3, #0
   5412e:	d1e4      	bne.n	540fa <_Balloc+0x2e>
   54130:	2000      	movs	r0, #0
   54132:	bd70      	pop	{r4, r5, r6, pc}
   54134:	6802      	ldr	r2, [r0, #0]
   54136:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   5413a:	2300      	movs	r3, #0
   5413c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   54140:	e7f7      	b.n	54132 <_Balloc+0x66>
   54142:	bf00      	nop
   54144:	00060ac8 	.word	0x00060ac8
   54148:	00060b52 	.word	0x00060b52

0005414c <_Bfree>:
   5414c:	b570      	push	{r4, r5, r6, lr}
   5414e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   54150:	4605      	mov	r5, r0
   54152:	460c      	mov	r4, r1
   54154:	b976      	cbnz	r6, 54174 <_Bfree+0x28>
   54156:	2010      	movs	r0, #16
   54158:	f7ff f950 	bl	533fc <malloc>
   5415c:	4602      	mov	r2, r0
   5415e:	6268      	str	r0, [r5, #36]	; 0x24
   54160:	b920      	cbnz	r0, 5416c <_Bfree+0x20>
   54162:	4b09      	ldr	r3, [pc, #36]	; (54188 <_Bfree+0x3c>)
   54164:	218a      	movs	r1, #138	; 0x8a
   54166:	4809      	ldr	r0, [pc, #36]	; (5418c <_Bfree+0x40>)
   54168:	f000 feae 	bl	54ec8 <__assert_func>
   5416c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   54170:	6006      	str	r6, [r0, #0]
   54172:	60c6      	str	r6, [r0, #12]
   54174:	b13c      	cbz	r4, 54186 <_Bfree+0x3a>
   54176:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   54178:	6862      	ldr	r2, [r4, #4]
   5417a:	68db      	ldr	r3, [r3, #12]
   5417c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   54180:	6021      	str	r1, [r4, #0]
   54182:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   54186:	bd70      	pop	{r4, r5, r6, pc}
   54188:	00060ac8 	.word	0x00060ac8
   5418c:	00060b52 	.word	0x00060b52

00054190 <__multadd>:
   54190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   54194:	f101 0c14 	add.w	ip, r1, #20
   54198:	4607      	mov	r7, r0
   5419a:	460c      	mov	r4, r1
   5419c:	461e      	mov	r6, r3
   5419e:	690d      	ldr	r5, [r1, #16]
   541a0:	2000      	movs	r0, #0
   541a2:	f8dc 3000 	ldr.w	r3, [ip]
   541a6:	3001      	adds	r0, #1
   541a8:	b299      	uxth	r1, r3
   541aa:	4285      	cmp	r5, r0
   541ac:	fb02 6101 	mla	r1, r2, r1, r6
   541b0:	ea4f 4613 	mov.w	r6, r3, lsr #16
   541b4:	ea4f 4311 	mov.w	r3, r1, lsr #16
   541b8:	b289      	uxth	r1, r1
   541ba:	fb02 3306 	mla	r3, r2, r6, r3
   541be:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   541c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   541c6:	f84c 1b04 	str.w	r1, [ip], #4
   541ca:	dcea      	bgt.n	541a2 <__multadd+0x12>
   541cc:	b30e      	cbz	r6, 54212 <__multadd+0x82>
   541ce:	68a3      	ldr	r3, [r4, #8]
   541d0:	42ab      	cmp	r3, r5
   541d2:	dc19      	bgt.n	54208 <__multadd+0x78>
   541d4:	6861      	ldr	r1, [r4, #4]
   541d6:	4638      	mov	r0, r7
   541d8:	3101      	adds	r1, #1
   541da:	f7ff ff77 	bl	540cc <_Balloc>
   541de:	4680      	mov	r8, r0
   541e0:	b928      	cbnz	r0, 541ee <__multadd+0x5e>
   541e2:	4602      	mov	r2, r0
   541e4:	4b0c      	ldr	r3, [pc, #48]	; (54218 <__multadd+0x88>)
   541e6:	21b5      	movs	r1, #181	; 0xb5
   541e8:	480c      	ldr	r0, [pc, #48]	; (5421c <__multadd+0x8c>)
   541ea:	f000 fe6d 	bl	54ec8 <__assert_func>
   541ee:	6922      	ldr	r2, [r4, #16]
   541f0:	f104 010c 	add.w	r1, r4, #12
   541f4:	300c      	adds	r0, #12
   541f6:	3202      	adds	r2, #2
   541f8:	0092      	lsls	r2, r2, #2
   541fa:	f006 fe73 	bl	5aee4 <memcpy>
   541fe:	4621      	mov	r1, r4
   54200:	4644      	mov	r4, r8
   54202:	4638      	mov	r0, r7
   54204:	f7ff ffa2 	bl	5414c <_Bfree>
   54208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   5420c:	3501      	adds	r5, #1
   5420e:	615e      	str	r6, [r3, #20]
   54210:	6125      	str	r5, [r4, #16]
   54212:	4620      	mov	r0, r4
   54214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   54218:	00060b3b 	.word	0x00060b3b
   5421c:	00060b52 	.word	0x00060b52

00054220 <__i2b>:
   54220:	b510      	push	{r4, lr}
   54222:	460c      	mov	r4, r1
   54224:	2101      	movs	r1, #1
   54226:	f7ff ff51 	bl	540cc <_Balloc>
   5422a:	4602      	mov	r2, r0
   5422c:	b928      	cbnz	r0, 5423a <__i2b+0x1a>
   5422e:	4b05      	ldr	r3, [pc, #20]	; (54244 <__i2b+0x24>)
   54230:	f44f 71a0 	mov.w	r1, #320	; 0x140
   54234:	4804      	ldr	r0, [pc, #16]	; (54248 <__i2b+0x28>)
   54236:	f000 fe47 	bl	54ec8 <__assert_func>
   5423a:	2301      	movs	r3, #1
   5423c:	6144      	str	r4, [r0, #20]
   5423e:	6103      	str	r3, [r0, #16]
   54240:	bd10      	pop	{r4, pc}
   54242:	bf00      	nop
   54244:	00060b3b 	.word	0x00060b3b
   54248:	00060b52 	.word	0x00060b52

0005424c <__multiply>:
   5424c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   54250:	4614      	mov	r4, r2
   54252:	690a      	ldr	r2, [r1, #16]
   54254:	460f      	mov	r7, r1
   54256:	b085      	sub	sp, #20
   54258:	6923      	ldr	r3, [r4, #16]
   5425a:	429a      	cmp	r2, r3
   5425c:	bfa2      	ittt	ge
   5425e:	4623      	movge	r3, r4
   54260:	460c      	movge	r4, r1
   54262:	461f      	movge	r7, r3
   54264:	f8d4 a010 	ldr.w	sl, [r4, #16]
   54268:	68a3      	ldr	r3, [r4, #8]
   5426a:	f8d7 9010 	ldr.w	r9, [r7, #16]
   5426e:	6861      	ldr	r1, [r4, #4]
   54270:	eb0a 0609 	add.w	r6, sl, r9
   54274:	42b3      	cmp	r3, r6
   54276:	bfb8      	it	lt
   54278:	3101      	addlt	r1, #1
   5427a:	f7ff ff27 	bl	540cc <_Balloc>
   5427e:	b930      	cbnz	r0, 5428e <__multiply+0x42>
   54280:	4602      	mov	r2, r0
   54282:	4b45      	ldr	r3, [pc, #276]	; (54398 <__multiply+0x14c>)
   54284:	f240 115d 	movw	r1, #349	; 0x15d
   54288:	4844      	ldr	r0, [pc, #272]	; (5439c <__multiply+0x150>)
   5428a:	f000 fe1d 	bl	54ec8 <__assert_func>
   5428e:	f100 0514 	add.w	r5, r0, #20
   54292:	2200      	movs	r2, #0
   54294:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   54298:	462b      	mov	r3, r5
   5429a:	4543      	cmp	r3, r8
   5429c:	d321      	bcc.n	542e2 <__multiply+0x96>
   5429e:	f107 0114 	add.w	r1, r7, #20
   542a2:	f104 0214 	add.w	r2, r4, #20
   542a6:	f104 0715 	add.w	r7, r4, #21
   542aa:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   542ae:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   542b2:	9302      	str	r3, [sp, #8]
   542b4:	1b13      	subs	r3, r2, r4
   542b6:	3b15      	subs	r3, #21
   542b8:	f023 0303 	bic.w	r3, r3, #3
   542bc:	3304      	adds	r3, #4
   542be:	42ba      	cmp	r2, r7
   542c0:	bf38      	it	cc
   542c2:	2304      	movcc	r3, #4
   542c4:	9301      	str	r3, [sp, #4]
   542c6:	9b02      	ldr	r3, [sp, #8]
   542c8:	9103      	str	r1, [sp, #12]
   542ca:	428b      	cmp	r3, r1
   542cc:	d80c      	bhi.n	542e8 <__multiply+0x9c>
   542ce:	2e00      	cmp	r6, #0
   542d0:	dd03      	ble.n	542da <__multiply+0x8e>
   542d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   542d6:	2b00      	cmp	r3, #0
   542d8:	d05b      	beq.n	54392 <__multiply+0x146>
   542da:	6106      	str	r6, [r0, #16]
   542dc:	b005      	add	sp, #20
   542de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   542e2:	f843 2b04 	str.w	r2, [r3], #4
   542e6:	e7d8      	b.n	5429a <__multiply+0x4e>
   542e8:	f8b1 a000 	ldrh.w	sl, [r1]
   542ec:	f1ba 0f00 	cmp.w	sl, #0
   542f0:	d024      	beq.n	5433c <__multiply+0xf0>
   542f2:	f104 0e14 	add.w	lr, r4, #20
   542f6:	46a9      	mov	r9, r5
   542f8:	f04f 0c00 	mov.w	ip, #0
   542fc:	f85e 7b04 	ldr.w	r7, [lr], #4
   54300:	f8d9 3000 	ldr.w	r3, [r9]
   54304:	fa1f fb87 	uxth.w	fp, r7
   54308:	4572      	cmp	r2, lr
   5430a:	b29b      	uxth	r3, r3
   5430c:	fb0a 330b 	mla	r3, sl, fp, r3
   54310:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   54314:	f8d9 7000 	ldr.w	r7, [r9]
   54318:	4463      	add	r3, ip
   5431a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   5431e:	fb0a c70b 	mla	r7, sl, fp, ip
   54322:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   54326:	b29b      	uxth	r3, r3
   54328:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   5432c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   54330:	f849 3b04 	str.w	r3, [r9], #4
   54334:	d8e2      	bhi.n	542fc <__multiply+0xb0>
   54336:	9b01      	ldr	r3, [sp, #4]
   54338:	f845 c003 	str.w	ip, [r5, r3]
   5433c:	9b03      	ldr	r3, [sp, #12]
   5433e:	3104      	adds	r1, #4
   54340:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   54344:	f1b9 0f00 	cmp.w	r9, #0
   54348:	d021      	beq.n	5438e <__multiply+0x142>
   5434a:	682b      	ldr	r3, [r5, #0]
   5434c:	f104 0c14 	add.w	ip, r4, #20
   54350:	46ae      	mov	lr, r5
   54352:	f04f 0a00 	mov.w	sl, #0
   54356:	f8bc b000 	ldrh.w	fp, [ip]
   5435a:	b29b      	uxth	r3, r3
   5435c:	f8be 7002 	ldrh.w	r7, [lr, #2]
   54360:	fb09 770b 	mla	r7, r9, fp, r7
   54364:	4457      	add	r7, sl
   54366:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   5436a:	f84e 3b04 	str.w	r3, [lr], #4
   5436e:	f85c 3b04 	ldr.w	r3, [ip], #4
   54372:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   54376:	f8be 3000 	ldrh.w	r3, [lr]
   5437a:	4562      	cmp	r2, ip
   5437c:	fb09 330a 	mla	r3, r9, sl, r3
   54380:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   54384:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   54388:	d8e5      	bhi.n	54356 <__multiply+0x10a>
   5438a:	9f01      	ldr	r7, [sp, #4]
   5438c:	51eb      	str	r3, [r5, r7]
   5438e:	3504      	adds	r5, #4
   54390:	e799      	b.n	542c6 <__multiply+0x7a>
   54392:	3e01      	subs	r6, #1
   54394:	e79b      	b.n	542ce <__multiply+0x82>
   54396:	bf00      	nop
   54398:	00060b3b 	.word	0x00060b3b
   5439c:	00060b52 	.word	0x00060b52

000543a0 <__pow5mult>:
   543a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   543a4:	4615      	mov	r5, r2
   543a6:	f012 0203 	ands.w	r2, r2, #3
   543aa:	4607      	mov	r7, r0
   543ac:	460e      	mov	r6, r1
   543ae:	d007      	beq.n	543c0 <__pow5mult+0x20>
   543b0:	3a01      	subs	r2, #1
   543b2:	4c25      	ldr	r4, [pc, #148]	; (54448 <__pow5mult+0xa8>)
   543b4:	2300      	movs	r3, #0
   543b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   543ba:	f7ff fee9 	bl	54190 <__multadd>
   543be:	4606      	mov	r6, r0
   543c0:	10ad      	asrs	r5, r5, #2
   543c2:	d03d      	beq.n	54440 <__pow5mult+0xa0>
   543c4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   543c6:	b97c      	cbnz	r4, 543e8 <__pow5mult+0x48>
   543c8:	2010      	movs	r0, #16
   543ca:	f7ff f817 	bl	533fc <malloc>
   543ce:	4602      	mov	r2, r0
   543d0:	6278      	str	r0, [r7, #36]	; 0x24
   543d2:	b928      	cbnz	r0, 543e0 <__pow5mult+0x40>
   543d4:	4b1d      	ldr	r3, [pc, #116]	; (5444c <__pow5mult+0xac>)
   543d6:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   543da:	481d      	ldr	r0, [pc, #116]	; (54450 <__pow5mult+0xb0>)
   543dc:	f000 fd74 	bl	54ec8 <__assert_func>
   543e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   543e4:	6004      	str	r4, [r0, #0]
   543e6:	60c4      	str	r4, [r0, #12]
   543e8:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   543ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
   543f0:	b94c      	cbnz	r4, 54406 <__pow5mult+0x66>
   543f2:	f240 2171 	movw	r1, #625	; 0x271
   543f6:	4638      	mov	r0, r7
   543f8:	f7ff ff12 	bl	54220 <__i2b>
   543fc:	2300      	movs	r3, #0
   543fe:	4604      	mov	r4, r0
   54400:	f8c8 0008 	str.w	r0, [r8, #8]
   54404:	6003      	str	r3, [r0, #0]
   54406:	f04f 0900 	mov.w	r9, #0
   5440a:	07eb      	lsls	r3, r5, #31
   5440c:	d50a      	bpl.n	54424 <__pow5mult+0x84>
   5440e:	4631      	mov	r1, r6
   54410:	4622      	mov	r2, r4
   54412:	4638      	mov	r0, r7
   54414:	f7ff ff1a 	bl	5424c <__multiply>
   54418:	4680      	mov	r8, r0
   5441a:	4631      	mov	r1, r6
   5441c:	4638      	mov	r0, r7
   5441e:	4646      	mov	r6, r8
   54420:	f7ff fe94 	bl	5414c <_Bfree>
   54424:	106d      	asrs	r5, r5, #1
   54426:	d00b      	beq.n	54440 <__pow5mult+0xa0>
   54428:	6820      	ldr	r0, [r4, #0]
   5442a:	b938      	cbnz	r0, 5443c <__pow5mult+0x9c>
   5442c:	4622      	mov	r2, r4
   5442e:	4621      	mov	r1, r4
   54430:	4638      	mov	r0, r7
   54432:	f7ff ff0b 	bl	5424c <__multiply>
   54436:	6020      	str	r0, [r4, #0]
   54438:	f8c0 9000 	str.w	r9, [r0]
   5443c:	4604      	mov	r4, r0
   5443e:	e7e4      	b.n	5440a <__pow5mult+0x6a>
   54440:	4630      	mov	r0, r6
   54442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   54446:	bf00      	nop
   54448:	0005c8c4 	.word	0x0005c8c4
   5444c:	00060ac8 	.word	0x00060ac8
   54450:	00060b52 	.word	0x00060b52

00054454 <__lshift>:
   54454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   54458:	460c      	mov	r4, r1
   5445a:	4607      	mov	r7, r0
   5445c:	4691      	mov	r9, r2
   5445e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   54462:	6923      	ldr	r3, [r4, #16]
   54464:	6849      	ldr	r1, [r1, #4]
   54466:	eb03 1862 	add.w	r8, r3, r2, asr #5
   5446a:	68a3      	ldr	r3, [r4, #8]
   5446c:	f108 0601 	add.w	r6, r8, #1
   54470:	42b3      	cmp	r3, r6
   54472:	db0b      	blt.n	5448c <__lshift+0x38>
   54474:	4638      	mov	r0, r7
   54476:	f7ff fe29 	bl	540cc <_Balloc>
   5447a:	4605      	mov	r5, r0
   5447c:	b948      	cbnz	r0, 54492 <__lshift+0x3e>
   5447e:	4602      	mov	r2, r0
   54480:	4b28      	ldr	r3, [pc, #160]	; (54524 <__lshift+0xd0>)
   54482:	f240 11d9 	movw	r1, #473	; 0x1d9
   54486:	4828      	ldr	r0, [pc, #160]	; (54528 <__lshift+0xd4>)
   54488:	f000 fd1e 	bl	54ec8 <__assert_func>
   5448c:	3101      	adds	r1, #1
   5448e:	005b      	lsls	r3, r3, #1
   54490:	e7ee      	b.n	54470 <__lshift+0x1c>
   54492:	2300      	movs	r3, #0
   54494:	f100 0114 	add.w	r1, r0, #20
   54498:	f100 0210 	add.w	r2, r0, #16
   5449c:	4618      	mov	r0, r3
   5449e:	4553      	cmp	r3, sl
   544a0:	db33      	blt.n	5450a <__lshift+0xb6>
   544a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   544a6:	f104 0314 	add.w	r3, r4, #20
   544aa:	6920      	ldr	r0, [r4, #16]
   544ac:	f019 091f 	ands.w	r9, r9, #31
   544b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   544b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   544b8:	d02b      	beq.n	54512 <__lshift+0xbe>
   544ba:	f1c9 0e20 	rsb	lr, r9, #32
   544be:	468a      	mov	sl, r1
   544c0:	2200      	movs	r2, #0
   544c2:	6818      	ldr	r0, [r3, #0]
   544c4:	fa00 f009 	lsl.w	r0, r0, r9
   544c8:	4310      	orrs	r0, r2
   544ca:	f84a 0b04 	str.w	r0, [sl], #4
   544ce:	f853 2b04 	ldr.w	r2, [r3], #4
   544d2:	459c      	cmp	ip, r3
   544d4:	fa22 f20e 	lsr.w	r2, r2, lr
   544d8:	d8f3      	bhi.n	544c2 <__lshift+0x6e>
   544da:	ebac 0304 	sub.w	r3, ip, r4
   544de:	f104 0015 	add.w	r0, r4, #21
   544e2:	3b15      	subs	r3, #21
   544e4:	f023 0303 	bic.w	r3, r3, #3
   544e8:	3304      	adds	r3, #4
   544ea:	4584      	cmp	ip, r0
   544ec:	bf38      	it	cc
   544ee:	2304      	movcc	r3, #4
   544f0:	50ca      	str	r2, [r1, r3]
   544f2:	b10a      	cbz	r2, 544f8 <__lshift+0xa4>
   544f4:	f108 0602 	add.w	r6, r8, #2
   544f8:	3e01      	subs	r6, #1
   544fa:	4638      	mov	r0, r7
   544fc:	4621      	mov	r1, r4
   544fe:	612e      	str	r6, [r5, #16]
   54500:	f7ff fe24 	bl	5414c <_Bfree>
   54504:	4628      	mov	r0, r5
   54506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   5450a:	3301      	adds	r3, #1
   5450c:	f842 0f04 	str.w	r0, [r2, #4]!
   54510:	e7c5      	b.n	5449e <__lshift+0x4a>
   54512:	3904      	subs	r1, #4
   54514:	f853 2b04 	ldr.w	r2, [r3], #4
   54518:	459c      	cmp	ip, r3
   5451a:	f841 2f04 	str.w	r2, [r1, #4]!
   5451e:	d8f9      	bhi.n	54514 <__lshift+0xc0>
   54520:	e7ea      	b.n	544f8 <__lshift+0xa4>
   54522:	bf00      	nop
   54524:	00060b3b 	.word	0x00060b3b
   54528:	00060b52 	.word	0x00060b52

0005452c <__mdiff>:
   5452c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   54530:	4689      	mov	r9, r1
   54532:	4606      	mov	r6, r0
   54534:	4611      	mov	r1, r2
   54536:	4614      	mov	r4, r2
   54538:	4648      	mov	r0, r9
   5453a:	f007 f842 	bl	5b5c2 <__mcmp>
   5453e:	1e05      	subs	r5, r0, #0
   54540:	d112      	bne.n	54568 <__mdiff+0x3c>
   54542:	4629      	mov	r1, r5
   54544:	4630      	mov	r0, r6
   54546:	f7ff fdc1 	bl	540cc <_Balloc>
   5454a:	4602      	mov	r2, r0
   5454c:	b928      	cbnz	r0, 5455a <__mdiff+0x2e>
   5454e:	4b41      	ldr	r3, [pc, #260]	; (54654 <__mdiff+0x128>)
   54550:	f240 2132 	movw	r1, #562	; 0x232
   54554:	4840      	ldr	r0, [pc, #256]	; (54658 <__mdiff+0x12c>)
   54556:	f000 fcb7 	bl	54ec8 <__assert_func>
   5455a:	2301      	movs	r3, #1
   5455c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   54560:	4610      	mov	r0, r2
   54562:	b003      	add	sp, #12
   54564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   54568:	bfbc      	itt	lt
   5456a:	464b      	movlt	r3, r9
   5456c:	46a1      	movlt	r9, r4
   5456e:	4630      	mov	r0, r6
   54570:	bfb8      	it	lt
   54572:	2501      	movlt	r5, #1
   54574:	f8d9 1004 	ldr.w	r1, [r9, #4]
   54578:	bfb4      	ite	lt
   5457a:	461c      	movlt	r4, r3
   5457c:	2500      	movge	r5, #0
   5457e:	f7ff fda5 	bl	540cc <_Balloc>
   54582:	4602      	mov	r2, r0
   54584:	b918      	cbnz	r0, 5458e <__mdiff+0x62>
   54586:	4b33      	ldr	r3, [pc, #204]	; (54654 <__mdiff+0x128>)
   54588:	f44f 7110 	mov.w	r1, #576	; 0x240
   5458c:	e7e2      	b.n	54554 <__mdiff+0x28>
   5458e:	f8d9 7010 	ldr.w	r7, [r9, #16]
   54592:	f104 0e14 	add.w	lr, r4, #20
   54596:	6926      	ldr	r6, [r4, #16]
   54598:	f100 0b14 	add.w	fp, r0, #20
   5459c:	60c5      	str	r5, [r0, #12]
   5459e:	f109 0514 	add.w	r5, r9, #20
   545a2:	f109 0310 	add.w	r3, r9, #16
   545a6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   545aa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   545ae:	46d9      	mov	r9, fp
   545b0:	f04f 0c00 	mov.w	ip, #0
   545b4:	9301      	str	r3, [sp, #4]
   545b6:	9b01      	ldr	r3, [sp, #4]
   545b8:	f85e 0b04 	ldr.w	r0, [lr], #4
   545bc:	f853 af04 	ldr.w	sl, [r3, #4]!
   545c0:	4576      	cmp	r6, lr
   545c2:	9301      	str	r3, [sp, #4]
   545c4:	fa1f f38a 	uxth.w	r3, sl
   545c8:	4619      	mov	r1, r3
   545ca:	b283      	uxth	r3, r0
   545cc:	ea4f 4010 	mov.w	r0, r0, lsr #16
   545d0:	eba1 0303 	sub.w	r3, r1, r3
   545d4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   545d8:	4463      	add	r3, ip
   545da:	eb00 4023 	add.w	r0, r0, r3, asr #16
   545de:	b29b      	uxth	r3, r3
   545e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
   545e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   545e8:	f849 3b04 	str.w	r3, [r9], #4
   545ec:	d8e3      	bhi.n	545b6 <__mdiff+0x8a>
   545ee:	1b33      	subs	r3, r6, r4
   545f0:	3415      	adds	r4, #21
   545f2:	3b15      	subs	r3, #21
   545f4:	f023 0303 	bic.w	r3, r3, #3
   545f8:	3304      	adds	r3, #4
   545fa:	42a6      	cmp	r6, r4
   545fc:	bf38      	it	cc
   545fe:	2304      	movcc	r3, #4
   54600:	441d      	add	r5, r3
   54602:	445b      	add	r3, fp
   54604:	462c      	mov	r4, r5
   54606:	461e      	mov	r6, r3
   54608:	4544      	cmp	r4, r8
   5460a:	d30e      	bcc.n	5462a <__mdiff+0xfe>
   5460c:	f108 0103 	add.w	r1, r8, #3
   54610:	1b49      	subs	r1, r1, r5
   54612:	3d03      	subs	r5, #3
   54614:	f021 0103 	bic.w	r1, r1, #3
   54618:	45a8      	cmp	r8, r5
   5461a:	bf38      	it	cc
   5461c:	2100      	movcc	r1, #0
   5461e:	440b      	add	r3, r1
   54620:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   54624:	b199      	cbz	r1, 5464e <__mdiff+0x122>
   54626:	6117      	str	r7, [r2, #16]
   54628:	e79a      	b.n	54560 <__mdiff+0x34>
   5462a:	f854 1b04 	ldr.w	r1, [r4], #4
   5462e:	46e6      	mov	lr, ip
   54630:	fa1f fc81 	uxth.w	ip, r1
   54634:	0c08      	lsrs	r0, r1, #16
   54636:	4471      	add	r1, lr
   54638:	44f4      	add	ip, lr
   5463a:	b289      	uxth	r1, r1
   5463c:	eb00 402c 	add.w	r0, r0, ip, asr #16
   54640:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   54644:	ea4f 4c20 	mov.w	ip, r0, asr #16
   54648:	f846 1b04 	str.w	r1, [r6], #4
   5464c:	e7dc      	b.n	54608 <__mdiff+0xdc>
   5464e:	3f01      	subs	r7, #1
   54650:	e7e6      	b.n	54620 <__mdiff+0xf4>
   54652:	bf00      	nop
   54654:	00060b3b 	.word	0x00060b3b
   54658:	00060b52 	.word	0x00060b52

0005465c <__d2b>:
   5465c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   54660:	460f      	mov	r7, r1
   54662:	2101      	movs	r1, #1
   54664:	4616      	mov	r6, r2
   54666:	ec59 8b10 	vmov	r8, r9, d0
   5466a:	f7ff fd2f 	bl	540cc <_Balloc>
   5466e:	4604      	mov	r4, r0
   54670:	b930      	cbnz	r0, 54680 <__d2b+0x24>
   54672:	4602      	mov	r2, r0
   54674:	4b23      	ldr	r3, [pc, #140]	; (54704 <__d2b+0xa8>)
   54676:	f240 310a 	movw	r1, #778	; 0x30a
   5467a:	4823      	ldr	r0, [pc, #140]	; (54708 <__d2b+0xac>)
   5467c:	f000 fc24 	bl	54ec8 <__assert_func>
   54680:	f3c9 550a 	ubfx	r5, r9, #20, #11
   54684:	f3c9 0313 	ubfx	r3, r9, #0, #20
   54688:	b10d      	cbz	r5, 5468e <__d2b+0x32>
   5468a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   5468e:	9301      	str	r3, [sp, #4]
   54690:	f1b8 0300 	subs.w	r3, r8, #0
   54694:	d023      	beq.n	546de <__d2b+0x82>
   54696:	4668      	mov	r0, sp
   54698:	9300      	str	r3, [sp, #0]
   5469a:	f006 ff65 	bl	5b568 <__lo0bits>
   5469e:	e9dd 1200 	ldrd	r1, r2, [sp]
   546a2:	b1d0      	cbz	r0, 546da <__d2b+0x7e>
   546a4:	f1c0 0320 	rsb	r3, r0, #32
   546a8:	fa02 f303 	lsl.w	r3, r2, r3
   546ac:	40c2      	lsrs	r2, r0
   546ae:	430b      	orrs	r3, r1
   546b0:	9201      	str	r2, [sp, #4]
   546b2:	6163      	str	r3, [r4, #20]
   546b4:	9b01      	ldr	r3, [sp, #4]
   546b6:	2b00      	cmp	r3, #0
   546b8:	61a3      	str	r3, [r4, #24]
   546ba:	bf0c      	ite	eq
   546bc:	2201      	moveq	r2, #1
   546be:	2202      	movne	r2, #2
   546c0:	6122      	str	r2, [r4, #16]
   546c2:	b1a5      	cbz	r5, 546ee <__d2b+0x92>
   546c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   546c8:	4405      	add	r5, r0
   546ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   546ce:	603d      	str	r5, [r7, #0]
   546d0:	6030      	str	r0, [r6, #0]
   546d2:	4620      	mov	r0, r4
   546d4:	b003      	add	sp, #12
   546d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   546da:	6161      	str	r1, [r4, #20]
   546dc:	e7ea      	b.n	546b4 <__d2b+0x58>
   546de:	a801      	add	r0, sp, #4
   546e0:	f006 ff42 	bl	5b568 <__lo0bits>
   546e4:	9b01      	ldr	r3, [sp, #4]
   546e6:	3020      	adds	r0, #32
   546e8:	2201      	movs	r2, #1
   546ea:	6163      	str	r3, [r4, #20]
   546ec:	e7e8      	b.n	546c0 <__d2b+0x64>
   546ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   546f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   546f6:	6038      	str	r0, [r7, #0]
   546f8:	6918      	ldr	r0, [r3, #16]
   546fa:	f006 ff13 	bl	5b524 <__hi0bits>
   546fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   54702:	e7e5      	b.n	546d0 <__d2b+0x74>
   54704:	00060b3b 	.word	0x00060b3b
   54708:	00060b52 	.word	0x00060b52

0005470c <_svfiprintf_r>:
   5470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   54710:	4698      	mov	r8, r3
   54712:	898b      	ldrh	r3, [r1, #12]
   54714:	b09d      	sub	sp, #116	; 0x74
   54716:	4607      	mov	r7, r0
   54718:	061b      	lsls	r3, r3, #24
   5471a:	460d      	mov	r5, r1
   5471c:	4614      	mov	r4, r2
   5471e:	d510      	bpl.n	54742 <_svfiprintf_r+0x36>
   54720:	690b      	ldr	r3, [r1, #16]
   54722:	b973      	cbnz	r3, 54742 <_svfiprintf_r+0x36>
   54724:	2140      	movs	r1, #64	; 0x40
   54726:	f7fe fec3 	bl	534b0 <_malloc_r>
   5472a:	6028      	str	r0, [r5, #0]
   5472c:	6128      	str	r0, [r5, #16]
   5472e:	b930      	cbnz	r0, 5473e <_svfiprintf_r+0x32>
   54730:	230c      	movs	r3, #12
   54732:	603b      	str	r3, [r7, #0]
   54734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   54738:	b01d      	add	sp, #116	; 0x74
   5473a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5473e:	2340      	movs	r3, #64	; 0x40
   54740:	616b      	str	r3, [r5, #20]
   54742:	2300      	movs	r3, #0
   54744:	f8cd 800c 	str.w	r8, [sp, #12]
   54748:	f04f 0901 	mov.w	r9, #1
   5474c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 548f0 <_svfiprintf_r+0x1e4>
   54750:	9309      	str	r3, [sp, #36]	; 0x24
   54752:	2320      	movs	r3, #32
   54754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   54758:	2330      	movs	r3, #48	; 0x30
   5475a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   5475e:	4623      	mov	r3, r4
   54760:	469a      	mov	sl, r3
   54762:	f813 2b01 	ldrb.w	r2, [r3], #1
   54766:	b10a      	cbz	r2, 5476c <_svfiprintf_r+0x60>
   54768:	2a25      	cmp	r2, #37	; 0x25
   5476a:	d1f9      	bne.n	54760 <_svfiprintf_r+0x54>
   5476c:	ebba 0b04 	subs.w	fp, sl, r4
   54770:	d00b      	beq.n	5478a <_svfiprintf_r+0x7e>
   54772:	465b      	mov	r3, fp
   54774:	4622      	mov	r2, r4
   54776:	4629      	mov	r1, r5
   54778:	4638      	mov	r0, r7
   5477a:	f006 ff62 	bl	5b642 <__ssputs_r>
   5477e:	3001      	adds	r0, #1
   54780:	f000 80a7 	beq.w	548d2 <_svfiprintf_r+0x1c6>
   54784:	9a09      	ldr	r2, [sp, #36]	; 0x24
   54786:	445a      	add	r2, fp
   54788:	9209      	str	r2, [sp, #36]	; 0x24
   5478a:	f89a 3000 	ldrb.w	r3, [sl]
   5478e:	2b00      	cmp	r3, #0
   54790:	f000 809f 	beq.w	548d2 <_svfiprintf_r+0x1c6>
   54794:	2300      	movs	r3, #0
   54796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   5479a:	f10a 0a01 	add.w	sl, sl, #1
   5479e:	9304      	str	r3, [sp, #16]
   547a0:	9307      	str	r3, [sp, #28]
   547a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   547a6:	931a      	str	r3, [sp, #104]	; 0x68
   547a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
   547ac:	4654      	mov	r4, sl
   547ae:	2205      	movs	r2, #5
   547b0:	484f      	ldr	r0, [pc, #316]	; (548f0 <_svfiprintf_r+0x1e4>)
   547b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   547b6:	f006 fb77 	bl	5aea8 <memchr>
   547ba:	9a04      	ldr	r2, [sp, #16]
   547bc:	b9d8      	cbnz	r0, 547f6 <_svfiprintf_r+0xea>
   547be:	06d0      	lsls	r0, r2, #27
   547c0:	bf44      	itt	mi
   547c2:	2320      	movmi	r3, #32
   547c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   547c8:	0711      	lsls	r1, r2, #28
   547ca:	bf44      	itt	mi
   547cc:	232b      	movmi	r3, #43	; 0x2b
   547ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   547d2:	f89a 3000 	ldrb.w	r3, [sl]
   547d6:	2b2a      	cmp	r3, #42	; 0x2a
   547d8:	d015      	beq.n	54806 <_svfiprintf_r+0xfa>
   547da:	9a07      	ldr	r2, [sp, #28]
   547dc:	4654      	mov	r4, sl
   547de:	2000      	movs	r0, #0
   547e0:	f04f 0c0a 	mov.w	ip, #10
   547e4:	4621      	mov	r1, r4
   547e6:	f811 3b01 	ldrb.w	r3, [r1], #1
   547ea:	3b30      	subs	r3, #48	; 0x30
   547ec:	2b09      	cmp	r3, #9
   547ee:	d94b      	bls.n	54888 <_svfiprintf_r+0x17c>
   547f0:	b1b0      	cbz	r0, 54820 <_svfiprintf_r+0x114>
   547f2:	9207      	str	r2, [sp, #28]
   547f4:	e014      	b.n	54820 <_svfiprintf_r+0x114>
   547f6:	eba0 0308 	sub.w	r3, r0, r8
   547fa:	46a2      	mov	sl, r4
   547fc:	fa09 f303 	lsl.w	r3, r9, r3
   54800:	4313      	orrs	r3, r2
   54802:	9304      	str	r3, [sp, #16]
   54804:	e7d2      	b.n	547ac <_svfiprintf_r+0xa0>
   54806:	9b03      	ldr	r3, [sp, #12]
   54808:	1d19      	adds	r1, r3, #4
   5480a:	681b      	ldr	r3, [r3, #0]
   5480c:	2b00      	cmp	r3, #0
   5480e:	9103      	str	r1, [sp, #12]
   54810:	bfbb      	ittet	lt
   54812:	425b      	neglt	r3, r3
   54814:	f042 0202 	orrlt.w	r2, r2, #2
   54818:	9307      	strge	r3, [sp, #28]
   5481a:	9307      	strlt	r3, [sp, #28]
   5481c:	bfb8      	it	lt
   5481e:	9204      	strlt	r2, [sp, #16]
   54820:	7823      	ldrb	r3, [r4, #0]
   54822:	2b2e      	cmp	r3, #46	; 0x2e
   54824:	d10a      	bne.n	5483c <_svfiprintf_r+0x130>
   54826:	7863      	ldrb	r3, [r4, #1]
   54828:	2b2a      	cmp	r3, #42	; 0x2a
   5482a:	d132      	bne.n	54892 <_svfiprintf_r+0x186>
   5482c:	9b03      	ldr	r3, [sp, #12]
   5482e:	3402      	adds	r4, #2
   54830:	1d1a      	adds	r2, r3, #4
   54832:	681b      	ldr	r3, [r3, #0]
   54834:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   54838:	9203      	str	r2, [sp, #12]
   5483a:	9305      	str	r3, [sp, #20]
   5483c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 54900 <_svfiprintf_r+0x1f4>
   54840:	2203      	movs	r2, #3
   54842:	7821      	ldrb	r1, [r4, #0]
   54844:	4650      	mov	r0, sl
   54846:	f006 fb2f 	bl	5aea8 <memchr>
   5484a:	b138      	cbz	r0, 5485c <_svfiprintf_r+0x150>
   5484c:	eba0 000a 	sub.w	r0, r0, sl
   54850:	2240      	movs	r2, #64	; 0x40
   54852:	9b04      	ldr	r3, [sp, #16]
   54854:	3401      	adds	r4, #1
   54856:	4082      	lsls	r2, r0
   54858:	4313      	orrs	r3, r2
   5485a:	9304      	str	r3, [sp, #16]
   5485c:	f814 1b01 	ldrb.w	r1, [r4], #1
   54860:	2206      	movs	r2, #6
   54862:	4824      	ldr	r0, [pc, #144]	; (548f4 <_svfiprintf_r+0x1e8>)
   54864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   54868:	f006 fb1e 	bl	5aea8 <memchr>
   5486c:	2800      	cmp	r0, #0
   5486e:	d036      	beq.n	548de <_svfiprintf_r+0x1d2>
   54870:	4b21      	ldr	r3, [pc, #132]	; (548f8 <_svfiprintf_r+0x1ec>)
   54872:	bb1b      	cbnz	r3, 548bc <_svfiprintf_r+0x1b0>
   54874:	9b03      	ldr	r3, [sp, #12]
   54876:	3307      	adds	r3, #7
   54878:	f023 0307 	bic.w	r3, r3, #7
   5487c:	3308      	adds	r3, #8
   5487e:	9303      	str	r3, [sp, #12]
   54880:	9b09      	ldr	r3, [sp, #36]	; 0x24
   54882:	4433      	add	r3, r6
   54884:	9309      	str	r3, [sp, #36]	; 0x24
   54886:	e76a      	b.n	5475e <_svfiprintf_r+0x52>
   54888:	fb0c 3202 	mla	r2, ip, r2, r3
   5488c:	460c      	mov	r4, r1
   5488e:	2001      	movs	r0, #1
   54890:	e7a8      	b.n	547e4 <_svfiprintf_r+0xd8>
   54892:	2300      	movs	r3, #0
   54894:	3401      	adds	r4, #1
   54896:	f04f 0c0a 	mov.w	ip, #10
   5489a:	4619      	mov	r1, r3
   5489c:	9305      	str	r3, [sp, #20]
   5489e:	4620      	mov	r0, r4
   548a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   548a4:	3a30      	subs	r2, #48	; 0x30
   548a6:	2a09      	cmp	r2, #9
   548a8:	d903      	bls.n	548b2 <_svfiprintf_r+0x1a6>
   548aa:	2b00      	cmp	r3, #0
   548ac:	d0c6      	beq.n	5483c <_svfiprintf_r+0x130>
   548ae:	9105      	str	r1, [sp, #20]
   548b0:	e7c4      	b.n	5483c <_svfiprintf_r+0x130>
   548b2:	fb0c 2101 	mla	r1, ip, r1, r2
   548b6:	4604      	mov	r4, r0
   548b8:	2301      	movs	r3, #1
   548ba:	e7f0      	b.n	5489e <_svfiprintf_r+0x192>
   548bc:	ab03      	add	r3, sp, #12
   548be:	462a      	mov	r2, r5
   548c0:	a904      	add	r1, sp, #16
   548c2:	4638      	mov	r0, r7
   548c4:	9300      	str	r3, [sp, #0]
   548c6:	4b0d      	ldr	r3, [pc, #52]	; (548fc <_svfiprintf_r+0x1f0>)
   548c8:	f7fe fe4c 	bl	53564 <_printf_float>
   548cc:	1c42      	adds	r2, r0, #1
   548ce:	4606      	mov	r6, r0
   548d0:	d1d6      	bne.n	54880 <_svfiprintf_r+0x174>
   548d2:	89ab      	ldrh	r3, [r5, #12]
   548d4:	065b      	lsls	r3, r3, #25
   548d6:	f53f af2d 	bmi.w	54734 <_svfiprintf_r+0x28>
   548da:	9809      	ldr	r0, [sp, #36]	; 0x24
   548dc:	e72c      	b.n	54738 <_svfiprintf_r+0x2c>
   548de:	ab03      	add	r3, sp, #12
   548e0:	462a      	mov	r2, r5
   548e2:	a904      	add	r1, sp, #16
   548e4:	4638      	mov	r0, r7
   548e6:	9300      	str	r3, [sp, #0]
   548e8:	4b04      	ldr	r3, [pc, #16]	; (548fc <_svfiprintf_r+0x1f0>)
   548ea:	f7ff f86f 	bl	539cc <_printf_i>
   548ee:	e7ed      	b.n	548cc <_svfiprintf_r+0x1c0>
   548f0:	00060baf 	.word	0x00060baf
   548f4:	00060bb9 	.word	0x00060bb9
   548f8:	00053565 	.word	0x00053565
   548fc:	0005b643 	.word	0x0005b643
   54900:	00060bb5 	.word	0x00060bb5

00054904 <__ssvfiscanf_r>:
   54904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   54908:	460c      	mov	r4, r1
   5490a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   5490e:	2100      	movs	r1, #0
   54910:	4606      	mov	r6, r0
   54912:	f10d 0804 	add.w	r8, sp, #4
   54916:	4fa7      	ldr	r7, [pc, #668]	; (54bb4 <__ssvfiscanf_r+0x2b0>)
   54918:	9300      	str	r3, [sp, #0]
   5491a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   5491e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   54922:	49a5      	ldr	r1, [pc, #660]	; (54bb8 <__ssvfiscanf_r+0x2b4>)
   54924:	91a0      	str	r1, [sp, #640]	; 0x280
   54926:	49a5      	ldr	r1, [pc, #660]	; (54bbc <__ssvfiscanf_r+0x2b8>)
   54928:	91a1      	str	r1, [sp, #644]	; 0x284
   5492a:	7813      	ldrb	r3, [r2, #0]
   5492c:	2b00      	cmp	r3, #0
   5492e:	f000 815c 	beq.w	54bea <__ssvfiscanf_r+0x2e6>
   54932:	5cf9      	ldrb	r1, [r7, r3]
   54934:	1c55      	adds	r5, r2, #1
   54936:	f011 0108 	ands.w	r1, r1, #8
   5493a:	d019      	beq.n	54970 <__ssvfiscanf_r+0x6c>
   5493c:	6863      	ldr	r3, [r4, #4]
   5493e:	2b00      	cmp	r3, #0
   54940:	dd0f      	ble.n	54962 <__ssvfiscanf_r+0x5e>
   54942:	6823      	ldr	r3, [r4, #0]
   54944:	781a      	ldrb	r2, [r3, #0]
   54946:	5cba      	ldrb	r2, [r7, r2]
   54948:	0712      	lsls	r2, r2, #28
   5494a:	d401      	bmi.n	54950 <__ssvfiscanf_r+0x4c>
   5494c:	462a      	mov	r2, r5
   5494e:	e7ec      	b.n	5492a <__ssvfiscanf_r+0x26>
   54950:	9a45      	ldr	r2, [sp, #276]	; 0x114
   54952:	3301      	adds	r3, #1
   54954:	3201      	adds	r2, #1
   54956:	6023      	str	r3, [r4, #0]
   54958:	9245      	str	r2, [sp, #276]	; 0x114
   5495a:	6862      	ldr	r2, [r4, #4]
   5495c:	3a01      	subs	r2, #1
   5495e:	6062      	str	r2, [r4, #4]
   54960:	e7ec      	b.n	5493c <__ssvfiscanf_r+0x38>
   54962:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   54964:	4621      	mov	r1, r4
   54966:	4630      	mov	r0, r6
   54968:	4798      	blx	r3
   5496a:	2800      	cmp	r0, #0
   5496c:	d0e9      	beq.n	54942 <__ssvfiscanf_r+0x3e>
   5496e:	e7ed      	b.n	5494c <__ssvfiscanf_r+0x48>
   54970:	2b25      	cmp	r3, #37	; 0x25
   54972:	d012      	beq.n	5499a <__ssvfiscanf_r+0x96>
   54974:	4699      	mov	r9, r3
   54976:	6863      	ldr	r3, [r4, #4]
   54978:	2b00      	cmp	r3, #0
   5497a:	f340 8094 	ble.w	54aa6 <__ssvfiscanf_r+0x1a2>
   5497e:	6822      	ldr	r2, [r4, #0]
   54980:	7813      	ldrb	r3, [r2, #0]
   54982:	454b      	cmp	r3, r9
   54984:	f040 8131 	bne.w	54bea <__ssvfiscanf_r+0x2e6>
   54988:	6863      	ldr	r3, [r4, #4]
   5498a:	3201      	adds	r2, #1
   5498c:	3b01      	subs	r3, #1
   5498e:	6022      	str	r2, [r4, #0]
   54990:	6063      	str	r3, [r4, #4]
   54992:	9b45      	ldr	r3, [sp, #276]	; 0x114
   54994:	3301      	adds	r3, #1
   54996:	9345      	str	r3, [sp, #276]	; 0x114
   54998:	e7d8      	b.n	5494c <__ssvfiscanf_r+0x48>
   5499a:	9141      	str	r1, [sp, #260]	; 0x104
   5499c:	9143      	str	r1, [sp, #268]	; 0x10c
   5499e:	7853      	ldrb	r3, [r2, #1]
   549a0:	2b2a      	cmp	r3, #42	; 0x2a
   549a2:	bf04      	itt	eq
   549a4:	2310      	moveq	r3, #16
   549a6:	1c95      	addeq	r5, r2, #2
   549a8:	f04f 020a 	mov.w	r2, #10
   549ac:	bf08      	it	eq
   549ae:	9341      	streq	r3, [sp, #260]	; 0x104
   549b0:	46a9      	mov	r9, r5
   549b2:	f819 1b01 	ldrb.w	r1, [r9], #1
   549b6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   549ba:	2b09      	cmp	r3, #9
   549bc:	d91e      	bls.n	549fc <__ssvfiscanf_r+0xf8>
   549be:	f8df a200 	ldr.w	sl, [pc, #512]	; 54bc0 <__ssvfiscanf_r+0x2bc>
   549c2:	2203      	movs	r2, #3
   549c4:	4650      	mov	r0, sl
   549c6:	f006 fa6f 	bl	5aea8 <memchr>
   549ca:	b138      	cbz	r0, 549dc <__ssvfiscanf_r+0xd8>
   549cc:	eba0 000a 	sub.w	r0, r0, sl
   549d0:	2301      	movs	r3, #1
   549d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
   549d4:	464d      	mov	r5, r9
   549d6:	4083      	lsls	r3, r0
   549d8:	4313      	orrs	r3, r2
   549da:	9341      	str	r3, [sp, #260]	; 0x104
   549dc:	f815 3b01 	ldrb.w	r3, [r5], #1
   549e0:	2b78      	cmp	r3, #120	; 0x78
   549e2:	d806      	bhi.n	549f2 <__ssvfiscanf_r+0xee>
   549e4:	2b57      	cmp	r3, #87	; 0x57
   549e6:	d810      	bhi.n	54a0a <__ssvfiscanf_r+0x106>
   549e8:	2b25      	cmp	r3, #37	; 0x25
   549ea:	d0c3      	beq.n	54974 <__ssvfiscanf_r+0x70>
   549ec:	d856      	bhi.n	54a9c <__ssvfiscanf_r+0x198>
   549ee:	2b00      	cmp	r3, #0
   549f0:	d064      	beq.n	54abc <__ssvfiscanf_r+0x1b8>
   549f2:	2303      	movs	r3, #3
   549f4:	9347      	str	r3, [sp, #284]	; 0x11c
   549f6:	230a      	movs	r3, #10
   549f8:	9342      	str	r3, [sp, #264]	; 0x108
   549fa:	e06a      	b.n	54ad2 <__ssvfiscanf_r+0x1ce>
   549fc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   549fe:	464d      	mov	r5, r9
   54a00:	fb02 1103 	mla	r1, r2, r3, r1
   54a04:	3930      	subs	r1, #48	; 0x30
   54a06:	9143      	str	r1, [sp, #268]	; 0x10c
   54a08:	e7d2      	b.n	549b0 <__ssvfiscanf_r+0xac>
   54a0a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   54a0e:	2a20      	cmp	r2, #32
   54a10:	d8ef      	bhi.n	549f2 <__ssvfiscanf_r+0xee>
   54a12:	a101      	add	r1, pc, #4	; (adr r1, 54a18 <__ssvfiscanf_r+0x114>)
   54a14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   54a18:	00054b07 	.word	0x00054b07
   54a1c:	000549f3 	.word	0x000549f3
   54a20:	000549f3 	.word	0x000549f3
   54a24:	00054b29 	.word	0x00054b29
   54a28:	000549f3 	.word	0x000549f3
   54a2c:	000549f3 	.word	0x000549f3
   54a30:	000549f3 	.word	0x000549f3
   54a34:	000549f3 	.word	0x000549f3
   54a38:	000549f3 	.word	0x000549f3
   54a3c:	000549f3 	.word	0x000549f3
   54a40:	000549f3 	.word	0x000549f3
   54a44:	00054b3f 	.word	0x00054b3f
   54a48:	00054b25 	.word	0x00054b25
   54a4c:	00054aa3 	.word	0x00054aa3
   54a50:	00054aa3 	.word	0x00054aa3
   54a54:	00054aa3 	.word	0x00054aa3
   54a58:	000549f3 	.word	0x000549f3
   54a5c:	00054b19 	.word	0x00054b19
   54a60:	000549f3 	.word	0x000549f3
   54a64:	000549f3 	.word	0x000549f3
   54a68:	000549f3 	.word	0x000549f3
   54a6c:	000549f3 	.word	0x000549f3
   54a70:	00054b4f 	.word	0x00054b4f
   54a74:	00054b21 	.word	0x00054b21
   54a78:	00054ac3 	.word	0x00054ac3
   54a7c:	000549f3 	.word	0x000549f3
   54a80:	000549f3 	.word	0x000549f3
   54a84:	00054b4b 	.word	0x00054b4b
   54a88:	000549f3 	.word	0x000549f3
   54a8c:	00054b25 	.word	0x00054b25
   54a90:	000549f3 	.word	0x000549f3
   54a94:	000549f3 	.word	0x000549f3
   54a98:	00054b07 	.word	0x00054b07
   54a9c:	3b45      	subs	r3, #69	; 0x45
   54a9e:	2b02      	cmp	r3, #2
   54aa0:	d8a7      	bhi.n	549f2 <__ssvfiscanf_r+0xee>
   54aa2:	2305      	movs	r3, #5
   54aa4:	e014      	b.n	54ad0 <__ssvfiscanf_r+0x1cc>
   54aa6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   54aa8:	4621      	mov	r1, r4
   54aaa:	4630      	mov	r0, r6
   54aac:	4798      	blx	r3
   54aae:	2800      	cmp	r0, #0
   54ab0:	f43f af65 	beq.w	5497e <__ssvfiscanf_r+0x7a>
   54ab4:	9844      	ldr	r0, [sp, #272]	; 0x110
   54ab6:	2800      	cmp	r0, #0
   54ab8:	f040 808f 	bne.w	54bda <__ssvfiscanf_r+0x2d6>
   54abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   54ac0:	e08f      	b.n	54be2 <__ssvfiscanf_r+0x2de>
   54ac2:	9b41      	ldr	r3, [sp, #260]	; 0x104
   54ac4:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   54ac8:	9341      	str	r3, [sp, #260]	; 0x104
   54aca:	2310      	movs	r3, #16
   54acc:	9342      	str	r3, [sp, #264]	; 0x108
   54ace:	2304      	movs	r3, #4
   54ad0:	9347      	str	r3, [sp, #284]	; 0x11c
   54ad2:	6863      	ldr	r3, [r4, #4]
   54ad4:	2b00      	cmp	r3, #0
   54ad6:	dd4a      	ble.n	54b6e <__ssvfiscanf_r+0x26a>
   54ad8:	9b41      	ldr	r3, [sp, #260]	; 0x104
   54ada:	0659      	lsls	r1, r3, #25
   54adc:	d404      	bmi.n	54ae8 <__ssvfiscanf_r+0x1e4>
   54ade:	6823      	ldr	r3, [r4, #0]
   54ae0:	781a      	ldrb	r2, [r3, #0]
   54ae2:	5cba      	ldrb	r2, [r7, r2]
   54ae4:	0712      	lsls	r2, r2, #28
   54ae6:	d449      	bmi.n	54b7c <__ssvfiscanf_r+0x278>
   54ae8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   54aea:	2b02      	cmp	r3, #2
   54aec:	dc58      	bgt.n	54ba0 <__ssvfiscanf_r+0x29c>
   54aee:	466b      	mov	r3, sp
   54af0:	4622      	mov	r2, r4
   54af2:	a941      	add	r1, sp, #260	; 0x104
   54af4:	4630      	mov	r0, r6
   54af6:	f000 f87d 	bl	54bf4 <_scanf_chars>
   54afa:	2801      	cmp	r0, #1
   54afc:	d075      	beq.n	54bea <__ssvfiscanf_r+0x2e6>
   54afe:	2802      	cmp	r0, #2
   54b00:	f47f af24 	bne.w	5494c <__ssvfiscanf_r+0x48>
   54b04:	e7d6      	b.n	54ab4 <__ssvfiscanf_r+0x1b0>
   54b06:	9a41      	ldr	r2, [sp, #260]	; 0x104
   54b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   54b0c:	9241      	str	r2, [sp, #260]	; 0x104
   54b0e:	2210      	movs	r2, #16
   54b10:	2b6e      	cmp	r3, #110	; 0x6e
   54b12:	9242      	str	r2, [sp, #264]	; 0x108
   54b14:	d902      	bls.n	54b1c <__ssvfiscanf_r+0x218>
   54b16:	e7da      	b.n	54ace <__ssvfiscanf_r+0x1ca>
   54b18:	2300      	movs	r3, #0
   54b1a:	9342      	str	r3, [sp, #264]	; 0x108
   54b1c:	2303      	movs	r3, #3
   54b1e:	e7d7      	b.n	54ad0 <__ssvfiscanf_r+0x1cc>
   54b20:	2308      	movs	r3, #8
   54b22:	e7d3      	b.n	54acc <__ssvfiscanf_r+0x1c8>
   54b24:	220a      	movs	r2, #10
   54b26:	e7f3      	b.n	54b10 <__ssvfiscanf_r+0x20c>
   54b28:	4629      	mov	r1, r5
   54b2a:	4640      	mov	r0, r8
   54b2c:	f006 fe3c 	bl	5b7a8 <__sccl>
   54b30:	9b41      	ldr	r3, [sp, #260]	; 0x104
   54b32:	4605      	mov	r5, r0
   54b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   54b38:	9341      	str	r3, [sp, #260]	; 0x104
   54b3a:	2301      	movs	r3, #1
   54b3c:	e7c8      	b.n	54ad0 <__ssvfiscanf_r+0x1cc>
   54b3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   54b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   54b44:	9341      	str	r3, [sp, #260]	; 0x104
   54b46:	2300      	movs	r3, #0
   54b48:	e7c2      	b.n	54ad0 <__ssvfiscanf_r+0x1cc>
   54b4a:	2302      	movs	r3, #2
   54b4c:	e7c0      	b.n	54ad0 <__ssvfiscanf_r+0x1cc>
   54b4e:	9841      	ldr	r0, [sp, #260]	; 0x104
   54b50:	06c3      	lsls	r3, r0, #27
   54b52:	f53f aefb 	bmi.w	5494c <__ssvfiscanf_r+0x48>
   54b56:	9b00      	ldr	r3, [sp, #0]
   54b58:	f010 0f01 	tst.w	r0, #1
   54b5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   54b5e:	f103 0104 	add.w	r1, r3, #4
   54b62:	9100      	str	r1, [sp, #0]
   54b64:	681b      	ldr	r3, [r3, #0]
   54b66:	bf14      	ite	ne
   54b68:	801a      	strhne	r2, [r3, #0]
   54b6a:	601a      	streq	r2, [r3, #0]
   54b6c:	e6ee      	b.n	5494c <__ssvfiscanf_r+0x48>
   54b6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   54b70:	4621      	mov	r1, r4
   54b72:	4630      	mov	r0, r6
   54b74:	4798      	blx	r3
   54b76:	2800      	cmp	r0, #0
   54b78:	d0ae      	beq.n	54ad8 <__ssvfiscanf_r+0x1d4>
   54b7a:	e79b      	b.n	54ab4 <__ssvfiscanf_r+0x1b0>
   54b7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   54b7e:	3201      	adds	r2, #1
   54b80:	9245      	str	r2, [sp, #276]	; 0x114
   54b82:	6862      	ldr	r2, [r4, #4]
   54b84:	3a01      	subs	r2, #1
   54b86:	2a00      	cmp	r2, #0
   54b88:	6062      	str	r2, [r4, #4]
   54b8a:	dd02      	ble.n	54b92 <__ssvfiscanf_r+0x28e>
   54b8c:	3301      	adds	r3, #1
   54b8e:	6023      	str	r3, [r4, #0]
   54b90:	e7a5      	b.n	54ade <__ssvfiscanf_r+0x1da>
   54b92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   54b94:	4621      	mov	r1, r4
   54b96:	4630      	mov	r0, r6
   54b98:	4798      	blx	r3
   54b9a:	2800      	cmp	r0, #0
   54b9c:	d09f      	beq.n	54ade <__ssvfiscanf_r+0x1da>
   54b9e:	e789      	b.n	54ab4 <__ssvfiscanf_r+0x1b0>
   54ba0:	2b04      	cmp	r3, #4
   54ba2:	dc0f      	bgt.n	54bc4 <__ssvfiscanf_r+0x2c0>
   54ba4:	466b      	mov	r3, sp
   54ba6:	4622      	mov	r2, r4
   54ba8:	a941      	add	r1, sp, #260	; 0x104
   54baa:	4630      	mov	r0, r6
   54bac:	f000 f87c 	bl	54ca8 <_scanf_i>
   54bb0:	e7a3      	b.n	54afa <__ssvfiscanf_r+0x1f6>
   54bb2:	bf00      	nop
   54bb4:	0006098d 	.word	0x0006098d
   54bb8:	0005b6f9 	.word	0x0005b6f9
   54bbc:	0005b76f 	.word	0x0005b76f
   54bc0:	00060bb5 	.word	0x00060bb5
   54bc4:	4b0a      	ldr	r3, [pc, #40]	; (54bf0 <__ssvfiscanf_r+0x2ec>)
   54bc6:	2b00      	cmp	r3, #0
   54bc8:	f43f aec0 	beq.w	5494c <__ssvfiscanf_r+0x48>
   54bcc:	466b      	mov	r3, sp
   54bce:	4622      	mov	r2, r4
   54bd0:	a941      	add	r1, sp, #260	; 0x104
   54bd2:	4630      	mov	r0, r6
   54bd4:	f3af 8000 	nop.w
   54bd8:	e78f      	b.n	54afa <__ssvfiscanf_r+0x1f6>
   54bda:	89a3      	ldrh	r3, [r4, #12]
   54bdc:	065b      	lsls	r3, r3, #25
   54bde:	f53f af6d 	bmi.w	54abc <__ssvfiscanf_r+0x1b8>
   54be2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   54be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   54bea:	9844      	ldr	r0, [sp, #272]	; 0x110
   54bec:	e7f9      	b.n	54be2 <__ssvfiscanf_r+0x2de>
   54bee:	bf00      	nop
   54bf0:	00000000 	.word	0x00000000

00054bf4 <_scanf_chars>:
   54bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   54bf8:	4615      	mov	r5, r2
   54bfa:	688a      	ldr	r2, [r1, #8]
   54bfc:	4680      	mov	r8, r0
   54bfe:	460c      	mov	r4, r1
   54c00:	b932      	cbnz	r2, 54c10 <_scanf_chars+0x1c>
   54c02:	698a      	ldr	r2, [r1, #24]
   54c04:	2a00      	cmp	r2, #0
   54c06:	bf14      	ite	ne
   54c08:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   54c0c:	2201      	moveq	r2, #1
   54c0e:	608a      	str	r2, [r1, #8]
   54c10:	6822      	ldr	r2, [r4, #0]
   54c12:	2700      	movs	r7, #0
   54c14:	f8df 908c 	ldr.w	r9, [pc, #140]	; 54ca4 <_scanf_chars+0xb0>
   54c18:	06d1      	lsls	r1, r2, #27
   54c1a:	bf5f      	itttt	pl
   54c1c:	681a      	ldrpl	r2, [r3, #0]
   54c1e:	1d11      	addpl	r1, r2, #4
   54c20:	6019      	strpl	r1, [r3, #0]
   54c22:	6816      	ldrpl	r6, [r2, #0]
   54c24:	69a0      	ldr	r0, [r4, #24]
   54c26:	b188      	cbz	r0, 54c4c <_scanf_chars+0x58>
   54c28:	2801      	cmp	r0, #1
   54c2a:	d107      	bne.n	54c3c <_scanf_chars+0x48>
   54c2c:	682b      	ldr	r3, [r5, #0]
   54c2e:	781a      	ldrb	r2, [r3, #0]
   54c30:	6963      	ldr	r3, [r4, #20]
   54c32:	5c9b      	ldrb	r3, [r3, r2]
   54c34:	b953      	cbnz	r3, 54c4c <_scanf_chars+0x58>
   54c36:	2f00      	cmp	r7, #0
   54c38:	d031      	beq.n	54c9e <_scanf_chars+0xaa>
   54c3a:	e022      	b.n	54c82 <_scanf_chars+0x8e>
   54c3c:	2802      	cmp	r0, #2
   54c3e:	d120      	bne.n	54c82 <_scanf_chars+0x8e>
   54c40:	682b      	ldr	r3, [r5, #0]
   54c42:	781b      	ldrb	r3, [r3, #0]
   54c44:	f819 3003 	ldrb.w	r3, [r9, r3]
   54c48:	071b      	lsls	r3, r3, #28
   54c4a:	d41a      	bmi.n	54c82 <_scanf_chars+0x8e>
   54c4c:	6823      	ldr	r3, [r4, #0]
   54c4e:	3701      	adds	r7, #1
   54c50:	06da      	lsls	r2, r3, #27
   54c52:	bf5e      	ittt	pl
   54c54:	682b      	ldrpl	r3, [r5, #0]
   54c56:	781b      	ldrbpl	r3, [r3, #0]
   54c58:	f806 3b01 	strbpl.w	r3, [r6], #1
   54c5c:	682a      	ldr	r2, [r5, #0]
   54c5e:	686b      	ldr	r3, [r5, #4]
   54c60:	3201      	adds	r2, #1
   54c62:	3b01      	subs	r3, #1
   54c64:	602a      	str	r2, [r5, #0]
   54c66:	68a2      	ldr	r2, [r4, #8]
   54c68:	606b      	str	r3, [r5, #4]
   54c6a:	3a01      	subs	r2, #1
   54c6c:	60a2      	str	r2, [r4, #8]
   54c6e:	b142      	cbz	r2, 54c82 <_scanf_chars+0x8e>
   54c70:	2b00      	cmp	r3, #0
   54c72:	dcd7      	bgt.n	54c24 <_scanf_chars+0x30>
   54c74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   54c78:	4629      	mov	r1, r5
   54c7a:	4640      	mov	r0, r8
   54c7c:	4798      	blx	r3
   54c7e:	2800      	cmp	r0, #0
   54c80:	d0d0      	beq.n	54c24 <_scanf_chars+0x30>
   54c82:	6823      	ldr	r3, [r4, #0]
   54c84:	f013 0310 	ands.w	r3, r3, #16
   54c88:	d105      	bne.n	54c96 <_scanf_chars+0xa2>
   54c8a:	68e2      	ldr	r2, [r4, #12]
   54c8c:	3201      	adds	r2, #1
   54c8e:	60e2      	str	r2, [r4, #12]
   54c90:	69a2      	ldr	r2, [r4, #24]
   54c92:	b102      	cbz	r2, 54c96 <_scanf_chars+0xa2>
   54c94:	7033      	strb	r3, [r6, #0]
   54c96:	6923      	ldr	r3, [r4, #16]
   54c98:	2000      	movs	r0, #0
   54c9a:	443b      	add	r3, r7
   54c9c:	6123      	str	r3, [r4, #16]
   54c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   54ca2:	bf00      	nop
   54ca4:	0006098d 	.word	0x0006098d

00054ca8 <_scanf_i>:
   54ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   54cac:	4698      	mov	r8, r3
   54cae:	b087      	sub	sp, #28
   54cb0:	4b78      	ldr	r3, [pc, #480]	; (54e94 <_scanf_i+0x1ec>)
   54cb2:	460c      	mov	r4, r1
   54cb4:	4682      	mov	sl, r0
   54cb6:	4616      	mov	r6, r2
   54cb8:	4627      	mov	r7, r4
   54cba:	f04f 0b00 	mov.w	fp, #0
   54cbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   54cc2:	ab03      	add	r3, sp, #12
   54cc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   54cc8:	4b73      	ldr	r3, [pc, #460]	; (54e98 <_scanf_i+0x1f0>)
   54cca:	69a1      	ldr	r1, [r4, #24]
   54ccc:	4a73      	ldr	r2, [pc, #460]	; (54e9c <_scanf_i+0x1f4>)
   54cce:	2903      	cmp	r1, #3
   54cd0:	bf08      	it	eq
   54cd2:	461a      	moveq	r2, r3
   54cd4:	68a3      	ldr	r3, [r4, #8]
   54cd6:	9201      	str	r2, [sp, #4]
   54cd8:	1e5a      	subs	r2, r3, #1
   54cda:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   54cde:	bf89      	itett	hi
   54ce0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   54ce4:	f04f 0900 	movls.w	r9, #0
   54ce8:	eb03 0905 	addhi.w	r9, r3, r5
   54cec:	f240 135d 	movwhi	r3, #349	; 0x15d
   54cf0:	bf88      	it	hi
   54cf2:	60a3      	strhi	r3, [r4, #8]
   54cf4:	f857 3b1c 	ldr.w	r3, [r7], #28
   54cf8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   54cfc:	463d      	mov	r5, r7
   54cfe:	6023      	str	r3, [r4, #0]
   54d00:	6831      	ldr	r1, [r6, #0]
   54d02:	ab03      	add	r3, sp, #12
   54d04:	2202      	movs	r2, #2
   54d06:	7809      	ldrb	r1, [r1, #0]
   54d08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   54d0c:	f006 f8cc 	bl	5aea8 <memchr>
   54d10:	2800      	cmp	r0, #0
   54d12:	d040      	beq.n	54d96 <_scanf_i+0xee>
   54d14:	f1bb 0f01 	cmp.w	fp, #1
   54d18:	d112      	bne.n	54d40 <_scanf_i+0x98>
   54d1a:	6862      	ldr	r2, [r4, #4]
   54d1c:	b92a      	cbnz	r2, 54d2a <_scanf_i+0x82>
   54d1e:	6822      	ldr	r2, [r4, #0]
   54d20:	2108      	movs	r1, #8
   54d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   54d26:	6061      	str	r1, [r4, #4]
   54d28:	6022      	str	r2, [r4, #0]
   54d2a:	6822      	ldr	r2, [r4, #0]
   54d2c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   54d30:	6022      	str	r2, [r4, #0]
   54d32:	68a2      	ldr	r2, [r4, #8]
   54d34:	1e51      	subs	r1, r2, #1
   54d36:	60a1      	str	r1, [r4, #8]
   54d38:	b9da      	cbnz	r2, 54d72 <_scanf_i+0xca>
   54d3a:	f04f 0b02 	mov.w	fp, #2
   54d3e:	e7df      	b.n	54d00 <_scanf_i+0x58>
   54d40:	f1bb 0f02 	cmp.w	fp, #2
   54d44:	d006      	beq.n	54d54 <_scanf_i+0xac>
   54d46:	68a2      	ldr	r2, [r4, #8]
   54d48:	1e51      	subs	r1, r2, #1
   54d4a:	60a1      	str	r1, [r4, #8]
   54d4c:	b98a      	cbnz	r2, 54d72 <_scanf_i+0xca>
   54d4e:	f04f 0b01 	mov.w	fp, #1
   54d52:	e7d5      	b.n	54d00 <_scanf_i+0x58>
   54d54:	6822      	ldr	r2, [r4, #0]
   54d56:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   54d5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   54d5e:	d11f      	bne.n	54da0 <_scanf_i+0xf8>
   54d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   54d64:	2110      	movs	r1, #16
   54d66:	6022      	str	r2, [r4, #0]
   54d68:	68a2      	ldr	r2, [r4, #8]
   54d6a:	6061      	str	r1, [r4, #4]
   54d6c:	1e51      	subs	r1, r2, #1
   54d6e:	60a1      	str	r1, [r4, #8]
   54d70:	b1b2      	cbz	r2, 54da0 <_scanf_i+0xf8>
   54d72:	6832      	ldr	r2, [r6, #0]
   54d74:	1c51      	adds	r1, r2, #1
   54d76:	6031      	str	r1, [r6, #0]
   54d78:	7812      	ldrb	r2, [r2, #0]
   54d7a:	f805 2b01 	strb.w	r2, [r5], #1
   54d7e:	6872      	ldr	r2, [r6, #4]
   54d80:	3a01      	subs	r2, #1
   54d82:	2a00      	cmp	r2, #0
   54d84:	6072      	str	r2, [r6, #4]
   54d86:	dc06      	bgt.n	54d96 <_scanf_i+0xee>
   54d88:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   54d8c:	4631      	mov	r1, r6
   54d8e:	4650      	mov	r0, sl
   54d90:	4790      	blx	r2
   54d92:	2800      	cmp	r0, #0
   54d94:	d174      	bne.n	54e80 <_scanf_i+0x1d8>
   54d96:	f10b 0b01 	add.w	fp, fp, #1
   54d9a:	f1bb 0f03 	cmp.w	fp, #3
   54d9e:	d1af      	bne.n	54d00 <_scanf_i+0x58>
   54da0:	6863      	ldr	r3, [r4, #4]
   54da2:	b90b      	cbnz	r3, 54da8 <_scanf_i+0x100>
   54da4:	230a      	movs	r3, #10
   54da6:	6063      	str	r3, [r4, #4]
   54da8:	6863      	ldr	r3, [r4, #4]
   54daa:	f04f 0b00 	mov.w	fp, #0
   54dae:	493c      	ldr	r1, [pc, #240]	; (54ea0 <_scanf_i+0x1f8>)
   54db0:	6960      	ldr	r0, [r4, #20]
   54db2:	1ac9      	subs	r1, r1, r3
   54db4:	f006 fcf8 	bl	5b7a8 <__sccl>
   54db8:	68a3      	ldr	r3, [r4, #8]
   54dba:	6822      	ldr	r2, [r4, #0]
   54dbc:	b373      	cbz	r3, 54e1c <_scanf_i+0x174>
   54dbe:	6831      	ldr	r1, [r6, #0]
   54dc0:	6960      	ldr	r0, [r4, #20]
   54dc2:	f891 c000 	ldrb.w	ip, [r1]
   54dc6:	f810 000c 	ldrb.w	r0, [r0, ip]
   54dca:	b338      	cbz	r0, 54e1c <_scanf_i+0x174>
   54dcc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   54dd0:	d116      	bne.n	54e00 <_scanf_i+0x158>
   54dd2:	0510      	lsls	r0, r2, #20
   54dd4:	d514      	bpl.n	54e00 <_scanf_i+0x158>
   54dd6:	f10b 0b01 	add.w	fp, fp, #1
   54dda:	f1b9 0f00 	cmp.w	r9, #0
   54dde:	d003      	beq.n	54de8 <_scanf_i+0x140>
   54de0:	3301      	adds	r3, #1
   54de2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   54de6:	60a3      	str	r3, [r4, #8]
   54de8:	6873      	ldr	r3, [r6, #4]
   54dea:	3b01      	subs	r3, #1
   54dec:	2b00      	cmp	r3, #0
   54dee:	6073      	str	r3, [r6, #4]
   54df0:	dd0d      	ble.n	54e0e <_scanf_i+0x166>
   54df2:	6833      	ldr	r3, [r6, #0]
   54df4:	3301      	adds	r3, #1
   54df6:	6033      	str	r3, [r6, #0]
   54df8:	68a3      	ldr	r3, [r4, #8]
   54dfa:	3b01      	subs	r3, #1
   54dfc:	60a3      	str	r3, [r4, #8]
   54dfe:	e7db      	b.n	54db8 <_scanf_i+0x110>
   54e00:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   54e04:	6022      	str	r2, [r4, #0]
   54e06:	780b      	ldrb	r3, [r1, #0]
   54e08:	f805 3b01 	strb.w	r3, [r5], #1
   54e0c:	e7ec      	b.n	54de8 <_scanf_i+0x140>
   54e0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   54e12:	4631      	mov	r1, r6
   54e14:	4650      	mov	r0, sl
   54e16:	4798      	blx	r3
   54e18:	2800      	cmp	r0, #0
   54e1a:	d0ed      	beq.n	54df8 <_scanf_i+0x150>
   54e1c:	6823      	ldr	r3, [r4, #0]
   54e1e:	05d9      	lsls	r1, r3, #23
   54e20:	d50d      	bpl.n	54e3e <_scanf_i+0x196>
   54e22:	42bd      	cmp	r5, r7
   54e24:	d909      	bls.n	54e3a <_scanf_i+0x192>
   54e26:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   54e2a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   54e2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   54e32:	4632      	mov	r2, r6
   54e34:	464d      	mov	r5, r9
   54e36:	4650      	mov	r0, sl
   54e38:	4798      	blx	r3
   54e3a:	42bd      	cmp	r5, r7
   54e3c:	d028      	beq.n	54e90 <_scanf_i+0x1e8>
   54e3e:	6822      	ldr	r2, [r4, #0]
   54e40:	f012 0210 	ands.w	r2, r2, #16
   54e44:	d113      	bne.n	54e6e <_scanf_i+0x1c6>
   54e46:	702a      	strb	r2, [r5, #0]
   54e48:	4639      	mov	r1, r7
   54e4a:	6863      	ldr	r3, [r4, #4]
   54e4c:	4650      	mov	r0, sl
   54e4e:	9e01      	ldr	r6, [sp, #4]
   54e50:	47b0      	blx	r6
   54e52:	f8d8 3000 	ldr.w	r3, [r8]
   54e56:	6821      	ldr	r1, [r4, #0]
   54e58:	1d1a      	adds	r2, r3, #4
   54e5a:	f011 0f20 	tst.w	r1, #32
   54e5e:	f8c8 2000 	str.w	r2, [r8]
   54e62:	681b      	ldr	r3, [r3, #0]
   54e64:	d00f      	beq.n	54e86 <_scanf_i+0x1de>
   54e66:	6018      	str	r0, [r3, #0]
   54e68:	68e3      	ldr	r3, [r4, #12]
   54e6a:	3301      	adds	r3, #1
   54e6c:	60e3      	str	r3, [r4, #12]
   54e6e:	1bed      	subs	r5, r5, r7
   54e70:	6923      	ldr	r3, [r4, #16]
   54e72:	2000      	movs	r0, #0
   54e74:	445d      	add	r5, fp
   54e76:	442b      	add	r3, r5
   54e78:	6123      	str	r3, [r4, #16]
   54e7a:	b007      	add	sp, #28
   54e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   54e80:	f04f 0b00 	mov.w	fp, #0
   54e84:	e7ca      	b.n	54e1c <_scanf_i+0x174>
   54e86:	07ca      	lsls	r2, r1, #31
   54e88:	bf4c      	ite	mi
   54e8a:	8018      	strhmi	r0, [r3, #0]
   54e8c:	6018      	strpl	r0, [r3, #0]
   54e8e:	e7eb      	b.n	54e68 <_scanf_i+0x1c0>
   54e90:	2001      	movs	r0, #1
   54e92:	e7f2      	b.n	54e7a <_scanf_i+0x1d2>
   54e94:	0005c080 	.word	0x0005c080
   54e98:	0005b389 	.word	0x0005b389
   54e9c:	0005b38d 	.word	0x0005b38d
   54ea0:	00060bd0 	.word	0x00060bd0

00054ea4 <_read_r>:
   54ea4:	b538      	push	{r3, r4, r5, lr}
   54ea6:	4604      	mov	r4, r0
   54ea8:	4d06      	ldr	r5, [pc, #24]	; (54ec4 <_read_r+0x20>)
   54eaa:	4608      	mov	r0, r1
   54eac:	4611      	mov	r1, r2
   54eae:	2200      	movs	r2, #0
   54eb0:	602a      	str	r2, [r5, #0]
   54eb2:	461a      	mov	r2, r3
   54eb4:	f001 f936 	bl	56124 <_read>
   54eb8:	1c43      	adds	r3, r0, #1
   54eba:	d102      	bne.n	54ec2 <_read_r+0x1e>
   54ebc:	682b      	ldr	r3, [r5, #0]
   54ebe:	b103      	cbz	r3, 54ec2 <_read_r+0x1e>
   54ec0:	6023      	str	r3, [r4, #0]
   54ec2:	bd38      	pop	{r3, r4, r5, pc}
   54ec4:	2001bcc8 	.word	0x2001bcc8

00054ec8 <__assert_func>:
   54ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   54eca:	4614      	mov	r4, r2
   54ecc:	461a      	mov	r2, r3
   54ece:	4b09      	ldr	r3, [pc, #36]	; (54ef4 <__assert_func+0x2c>)
   54ed0:	4605      	mov	r5, r0
   54ed2:	681b      	ldr	r3, [r3, #0]
   54ed4:	68d8      	ldr	r0, [r3, #12]
   54ed6:	b954      	cbnz	r4, 54eee <__assert_func+0x26>
   54ed8:	4b07      	ldr	r3, [pc, #28]	; (54ef8 <__assert_func+0x30>)
   54eda:	461c      	mov	r4, r3
   54edc:	9100      	str	r1, [sp, #0]
   54ede:	4907      	ldr	r1, [pc, #28]	; (54efc <__assert_func+0x34>)
   54ee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
   54ee4:	462b      	mov	r3, r5
   54ee6:	f000 f909 	bl	550fc <fiprintf>
   54eea:	f006 fdc3 	bl	5ba74 <abort>
   54eee:	4b04      	ldr	r3, [pc, #16]	; (54f00 <__assert_func+0x38>)
   54ef0:	e7f4      	b.n	54edc <__assert_func+0x14>
   54ef2:	bf00      	nop
   54ef4:	2001a830 	.word	0x2001a830
   54ef8:	0005fcce 	.word	0x0005fcce
   54efc:	00060be5 	.word	0x00060be5
   54f00:	00060bd8 	.word	0x00060bd8

00054f04 <_fflush_r>:
   54f04:	b538      	push	{r3, r4, r5, lr}
   54f06:	690b      	ldr	r3, [r1, #16]
   54f08:	4605      	mov	r5, r0
   54f0a:	460c      	mov	r4, r1
   54f0c:	b913      	cbnz	r3, 54f14 <_fflush_r+0x10>
   54f0e:	2500      	movs	r5, #0
   54f10:	4628      	mov	r0, r5
   54f12:	bd38      	pop	{r3, r4, r5, pc}
   54f14:	b118      	cbz	r0, 54f1e <_fflush_r+0x1a>
   54f16:	6983      	ldr	r3, [r0, #24]
   54f18:	b90b      	cbnz	r3, 54f1e <_fflush_r+0x1a>
   54f1a:	f000 f871 	bl	55000 <__sinit>
   54f1e:	4b14      	ldr	r3, [pc, #80]	; (54f70 <_fflush_r+0x6c>)
   54f20:	429c      	cmp	r4, r3
   54f22:	d11b      	bne.n	54f5c <_fflush_r+0x58>
   54f24:	686c      	ldr	r4, [r5, #4]
   54f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   54f2a:	2b00      	cmp	r3, #0
   54f2c:	d0ef      	beq.n	54f0e <_fflush_r+0xa>
   54f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   54f30:	07d0      	lsls	r0, r2, #31
   54f32:	d404      	bmi.n	54f3e <_fflush_r+0x3a>
   54f34:	0599      	lsls	r1, r3, #22
   54f36:	d402      	bmi.n	54f3e <_fflush_r+0x3a>
   54f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
   54f3a:	f001 f918 	bl	5616e <__retarget_lock_acquire_recursive>
   54f3e:	4628      	mov	r0, r5
   54f40:	4621      	mov	r1, r4
   54f42:	f006 fcae 	bl	5b8a2 <__sflush_r>
   54f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
   54f48:	4605      	mov	r5, r0
   54f4a:	07da      	lsls	r2, r3, #31
   54f4c:	d4e0      	bmi.n	54f10 <_fflush_r+0xc>
   54f4e:	89a3      	ldrh	r3, [r4, #12]
   54f50:	059b      	lsls	r3, r3, #22
   54f52:	d4dd      	bmi.n	54f10 <_fflush_r+0xc>
   54f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
   54f56:	f001 f910 	bl	5617a <__retarget_lock_release_recursive>
   54f5a:	e7d9      	b.n	54f10 <_fflush_r+0xc>
   54f5c:	4b05      	ldr	r3, [pc, #20]	; (54f74 <_fflush_r+0x70>)
   54f5e:	429c      	cmp	r4, r3
   54f60:	d101      	bne.n	54f66 <_fflush_r+0x62>
   54f62:	68ac      	ldr	r4, [r5, #8]
   54f64:	e7df      	b.n	54f26 <_fflush_r+0x22>
   54f66:	4b04      	ldr	r3, [pc, #16]	; (54f78 <_fflush_r+0x74>)
   54f68:	429c      	cmp	r4, r3
   54f6a:	bf08      	it	eq
   54f6c:	68ec      	ldreq	r4, [r5, #12]
   54f6e:	e7da      	b.n	54f26 <_fflush_r+0x22>
   54f70:	0005c910 	.word	0x0005c910
   54f74:	0005c8f0 	.word	0x0005c8f0
   54f78:	0005c8d0 	.word	0x0005c8d0

00054f7c <std>:
   54f7c:	2300      	movs	r3, #0
   54f7e:	b510      	push	{r4, lr}
   54f80:	4604      	mov	r4, r0
   54f82:	6083      	str	r3, [r0, #8]
   54f84:	8181      	strh	r1, [r0, #12]
   54f86:	4619      	mov	r1, r3
   54f88:	6643      	str	r3, [r0, #100]	; 0x64
   54f8a:	81c2      	strh	r2, [r0, #14]
   54f8c:	2208      	movs	r2, #8
   54f8e:	6183      	str	r3, [r0, #24]
   54f90:	e9c0 3300 	strd	r3, r3, [r0]
   54f94:	e9c0 3304 	strd	r3, r3, [r0, #16]
   54f98:	305c      	adds	r0, #92	; 0x5c
   54f9a:	f005 ffdd 	bl	5af58 <memset>
   54f9e:	4b05      	ldr	r3, [pc, #20]	; (54fb4 <std+0x38>)
   54fa0:	6224      	str	r4, [r4, #32]
   54fa2:	6263      	str	r3, [r4, #36]	; 0x24
   54fa4:	4b04      	ldr	r3, [pc, #16]	; (54fb8 <std+0x3c>)
   54fa6:	62a3      	str	r3, [r4, #40]	; 0x28
   54fa8:	4b04      	ldr	r3, [pc, #16]	; (54fbc <std+0x40>)
   54faa:	62e3      	str	r3, [r4, #44]	; 0x2c
   54fac:	4b04      	ldr	r3, [pc, #16]	; (54fc0 <std+0x44>)
   54fae:	6323      	str	r3, [r4, #48]	; 0x30
   54fb0:	bd10      	pop	{r4, pc}
   54fb2:	bf00      	nop
   54fb4:	0005b1df 	.word	0x0005b1df
   54fb8:	0005b205 	.word	0x0005b205
   54fbc:	0005b23d 	.word	0x0005b23d
   54fc0:	0005b261 	.word	0x0005b261

00054fc4 <_cleanup_r>:
   54fc4:	4901      	ldr	r1, [pc, #4]	; (54fcc <_cleanup_r+0x8>)
   54fc6:	f006 bd05 	b.w	5b9d4 <_fwalk_reent>
   54fca:	bf00      	nop
   54fcc:	00054f05 	.word	0x00054f05

00054fd0 <__sfp_lock_acquire>:
   54fd0:	4801      	ldr	r0, [pc, #4]	; (54fd8 <__sfp_lock_acquire+0x8>)
   54fd2:	f001 b8cc 	b.w	5616e <__retarget_lock_acquire_recursive>
   54fd6:	bf00      	nop
   54fd8:	2001ab34 	.word	0x2001ab34

00054fdc <__sfp_lock_release>:
   54fdc:	4801      	ldr	r0, [pc, #4]	; (54fe4 <__sfp_lock_release+0x8>)
   54fde:	f001 b8cc 	b.w	5617a <__retarget_lock_release_recursive>
   54fe2:	bf00      	nop
   54fe4:	2001ab34 	.word	0x2001ab34

00054fe8 <__sinit_lock_acquire>:
   54fe8:	4801      	ldr	r0, [pc, #4]	; (54ff0 <__sinit_lock_acquire+0x8>)
   54fea:	f001 b8c0 	b.w	5616e <__retarget_lock_acquire_recursive>
   54fee:	bf00      	nop
   54ff0:	2001ab48 	.word	0x2001ab48

00054ff4 <__sinit_lock_release>:
   54ff4:	4801      	ldr	r0, [pc, #4]	; (54ffc <__sinit_lock_release+0x8>)
   54ff6:	f001 b8c0 	b.w	5617a <__retarget_lock_release_recursive>
   54ffa:	bf00      	nop
   54ffc:	2001ab48 	.word	0x2001ab48

00055000 <__sinit>:
   55000:	b510      	push	{r4, lr}
   55002:	4604      	mov	r4, r0
   55004:	f7ff fff0 	bl	54fe8 <__sinit_lock_acquire>
   55008:	69a3      	ldr	r3, [r4, #24]
   5500a:	b11b      	cbz	r3, 55014 <__sinit+0x14>
   5500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   55010:	f7ff bff0 	b.w	54ff4 <__sinit_lock_release>
   55014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   55018:	6523      	str	r3, [r4, #80]	; 0x50
   5501a:	4620      	mov	r0, r4
   5501c:	4b12      	ldr	r3, [pc, #72]	; (55068 <__sinit+0x68>)
   5501e:	4a13      	ldr	r2, [pc, #76]	; (5506c <__sinit+0x6c>)
   55020:	681b      	ldr	r3, [r3, #0]
   55022:	62a2      	str	r2, [r4, #40]	; 0x28
   55024:	42a3      	cmp	r3, r4
   55026:	bf04      	itt	eq
   55028:	2301      	moveq	r3, #1
   5502a:	61a3      	streq	r3, [r4, #24]
   5502c:	f000 f820 	bl	55070 <__sfp>
   55030:	6060      	str	r0, [r4, #4]
   55032:	4620      	mov	r0, r4
   55034:	f000 f81c 	bl	55070 <__sfp>
   55038:	60a0      	str	r0, [r4, #8]
   5503a:	4620      	mov	r0, r4
   5503c:	f000 f818 	bl	55070 <__sfp>
   55040:	2200      	movs	r2, #0
   55042:	2104      	movs	r1, #4
   55044:	60e0      	str	r0, [r4, #12]
   55046:	6860      	ldr	r0, [r4, #4]
   55048:	f7ff ff98 	bl	54f7c <std>
   5504c:	2201      	movs	r2, #1
   5504e:	2109      	movs	r1, #9
   55050:	68a0      	ldr	r0, [r4, #8]
   55052:	f7ff ff93 	bl	54f7c <std>
   55056:	2202      	movs	r2, #2
   55058:	2112      	movs	r1, #18
   5505a:	68e0      	ldr	r0, [r4, #12]
   5505c:	f7ff ff8e 	bl	54f7c <std>
   55060:	2301      	movs	r3, #1
   55062:	61a3      	str	r3, [r4, #24]
   55064:	e7d2      	b.n	5500c <__sinit+0xc>
   55066:	bf00      	nop
   55068:	0005c8c0 	.word	0x0005c8c0
   5506c:	00054fc5 	.word	0x00054fc5

00055070 <__sfp>:
   55070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   55072:	4607      	mov	r7, r0
   55074:	f7ff ffac 	bl	54fd0 <__sfp_lock_acquire>
   55078:	4b1e      	ldr	r3, [pc, #120]	; (550f4 <__sfp+0x84>)
   5507a:	681e      	ldr	r6, [r3, #0]
   5507c:	69b3      	ldr	r3, [r6, #24]
   5507e:	b913      	cbnz	r3, 55086 <__sfp+0x16>
   55080:	4630      	mov	r0, r6
   55082:	f7ff ffbd 	bl	55000 <__sinit>
   55086:	3648      	adds	r6, #72	; 0x48
   55088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   5508c:	3b01      	subs	r3, #1
   5508e:	d503      	bpl.n	55098 <__sfp+0x28>
   55090:	6833      	ldr	r3, [r6, #0]
   55092:	b30b      	cbz	r3, 550d8 <__sfp+0x68>
   55094:	6836      	ldr	r6, [r6, #0]
   55096:	e7f7      	b.n	55088 <__sfp+0x18>
   55098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   5509c:	b9d5      	cbnz	r5, 550d4 <__sfp+0x64>
   5509e:	4b16      	ldr	r3, [pc, #88]	; (550f8 <__sfp+0x88>)
   550a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   550a4:	6665      	str	r5, [r4, #100]	; 0x64
   550a6:	60e3      	str	r3, [r4, #12]
   550a8:	f001 f857 	bl	5615a <__retarget_lock_init_recursive>
   550ac:	f7ff ff96 	bl	54fdc <__sfp_lock_release>
   550b0:	2208      	movs	r2, #8
   550b2:	4629      	mov	r1, r5
   550b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   550b8:	6025      	str	r5, [r4, #0]
   550ba:	61a5      	str	r5, [r4, #24]
   550bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
   550c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
   550c4:	f005 ff48 	bl	5af58 <memset>
   550c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   550cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   550d0:	4620      	mov	r0, r4
   550d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   550d4:	3468      	adds	r4, #104	; 0x68
   550d6:	e7d9      	b.n	5508c <__sfp+0x1c>
   550d8:	2104      	movs	r1, #4
   550da:	4638      	mov	r0, r7
   550dc:	f006 fc64 	bl	5b9a8 <__sfmoreglue>
   550e0:	4604      	mov	r4, r0
   550e2:	6030      	str	r0, [r6, #0]
   550e4:	2800      	cmp	r0, #0
   550e6:	d1d5      	bne.n	55094 <__sfp+0x24>
   550e8:	f7ff ff78 	bl	54fdc <__sfp_lock_release>
   550ec:	230c      	movs	r3, #12
   550ee:	603b      	str	r3, [r7, #0]
   550f0:	e7ee      	b.n	550d0 <__sfp+0x60>
   550f2:	bf00      	nop
   550f4:	0005c8c0 	.word	0x0005c8c0
   550f8:	ffff0001 	.word	0xffff0001

000550fc <fiprintf>:
   550fc:	b40e      	push	{r1, r2, r3}
   550fe:	b503      	push	{r0, r1, lr}
   55100:	ab03      	add	r3, sp, #12
   55102:	4601      	mov	r1, r0
   55104:	4805      	ldr	r0, [pc, #20]	; (5511c <fiprintf+0x20>)
   55106:	f853 2b04 	ldr.w	r2, [r3], #4
   5510a:	6800      	ldr	r0, [r0, #0]
   5510c:	9301      	str	r3, [sp, #4]
   5510e:	f000 f807 	bl	55120 <_vfiprintf_r>
   55112:	b002      	add	sp, #8
   55114:	f85d eb04 	ldr.w	lr, [sp], #4
   55118:	b003      	add	sp, #12
   5511a:	4770      	bx	lr
   5511c:	2001a830 	.word	0x2001a830

00055120 <_vfiprintf_r>:
   55120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   55124:	460d      	mov	r5, r1
   55126:	b09d      	sub	sp, #116	; 0x74
   55128:	4614      	mov	r4, r2
   5512a:	4698      	mov	r8, r3
   5512c:	4606      	mov	r6, r0
   5512e:	b118      	cbz	r0, 55138 <_vfiprintf_r+0x18>
   55130:	6983      	ldr	r3, [r0, #24]
   55132:	b90b      	cbnz	r3, 55138 <_vfiprintf_r+0x18>
   55134:	f7ff ff64 	bl	55000 <__sinit>
   55138:	4b87      	ldr	r3, [pc, #540]	; (55358 <_vfiprintf_r+0x238>)
   5513a:	429d      	cmp	r5, r3
   5513c:	d11b      	bne.n	55176 <_vfiprintf_r+0x56>
   5513e:	6875      	ldr	r5, [r6, #4]
   55140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   55142:	07d9      	lsls	r1, r3, #31
   55144:	d405      	bmi.n	55152 <_vfiprintf_r+0x32>
   55146:	89ab      	ldrh	r3, [r5, #12]
   55148:	059a      	lsls	r2, r3, #22
   5514a:	d402      	bmi.n	55152 <_vfiprintf_r+0x32>
   5514c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   5514e:	f001 f80e 	bl	5616e <__retarget_lock_acquire_recursive>
   55152:	89ab      	ldrh	r3, [r5, #12]
   55154:	071b      	lsls	r3, r3, #28
   55156:	d501      	bpl.n	5515c <_vfiprintf_r+0x3c>
   55158:	692b      	ldr	r3, [r5, #16]
   5515a:	b9eb      	cbnz	r3, 55198 <_vfiprintf_r+0x78>
   5515c:	4629      	mov	r1, r5
   5515e:	4630      	mov	r0, r6
   55160:	f000 f95c 	bl	5541c <__swsetup_r>
   55164:	b1c0      	cbz	r0, 55198 <_vfiprintf_r+0x78>
   55166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   55168:	07dc      	lsls	r4, r3, #31
   5516a:	d50e      	bpl.n	5518a <_vfiprintf_r+0x6a>
   5516c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   55170:	b01d      	add	sp, #116	; 0x74
   55172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   55176:	4b79      	ldr	r3, [pc, #484]	; (5535c <_vfiprintf_r+0x23c>)
   55178:	429d      	cmp	r5, r3
   5517a:	d101      	bne.n	55180 <_vfiprintf_r+0x60>
   5517c:	68b5      	ldr	r5, [r6, #8]
   5517e:	e7df      	b.n	55140 <_vfiprintf_r+0x20>
   55180:	4b77      	ldr	r3, [pc, #476]	; (55360 <_vfiprintf_r+0x240>)
   55182:	429d      	cmp	r5, r3
   55184:	bf08      	it	eq
   55186:	68f5      	ldreq	r5, [r6, #12]
   55188:	e7da      	b.n	55140 <_vfiprintf_r+0x20>
   5518a:	89ab      	ldrh	r3, [r5, #12]
   5518c:	0598      	lsls	r0, r3, #22
   5518e:	d4ed      	bmi.n	5516c <_vfiprintf_r+0x4c>
   55190:	6da8      	ldr	r0, [r5, #88]	; 0x58
   55192:	f000 fff2 	bl	5617a <__retarget_lock_release_recursive>
   55196:	e7e9      	b.n	5516c <_vfiprintf_r+0x4c>
   55198:	2300      	movs	r3, #0
   5519a:	f8cd 800c 	str.w	r8, [sp, #12]
   5519e:	f04f 0901 	mov.w	r9, #1
   551a2:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 55364 <_vfiprintf_r+0x244>
   551a6:	9309      	str	r3, [sp, #36]	; 0x24
   551a8:	2320      	movs	r3, #32
   551aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   551ae:	2330      	movs	r3, #48	; 0x30
   551b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   551b4:	4623      	mov	r3, r4
   551b6:	469a      	mov	sl, r3
   551b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   551bc:	b10a      	cbz	r2, 551c2 <_vfiprintf_r+0xa2>
   551be:	2a25      	cmp	r2, #37	; 0x25
   551c0:	d1f9      	bne.n	551b6 <_vfiprintf_r+0x96>
   551c2:	ebba 0b04 	subs.w	fp, sl, r4
   551c6:	d00b      	beq.n	551e0 <_vfiprintf_r+0xc0>
   551c8:	465b      	mov	r3, fp
   551ca:	4622      	mov	r2, r4
   551cc:	4629      	mov	r1, r5
   551ce:	4630      	mov	r0, r6
   551d0:	f006 fc3e 	bl	5ba50 <__sfputs_r>
   551d4:	3001      	adds	r0, #1
   551d6:	f000 80a6 	beq.w	55326 <_vfiprintf_r+0x206>
   551da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   551dc:	445a      	add	r2, fp
   551de:	9209      	str	r2, [sp, #36]	; 0x24
   551e0:	f89a 3000 	ldrb.w	r3, [sl]
   551e4:	2b00      	cmp	r3, #0
   551e6:	f000 809e 	beq.w	55326 <_vfiprintf_r+0x206>
   551ea:	2300      	movs	r3, #0
   551ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   551f0:	f10a 0a01 	add.w	sl, sl, #1
   551f4:	9304      	str	r3, [sp, #16]
   551f6:	9307      	str	r3, [sp, #28]
   551f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   551fc:	931a      	str	r3, [sp, #104]	; 0x68
   551fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
   55202:	4654      	mov	r4, sl
   55204:	2205      	movs	r2, #5
   55206:	4857      	ldr	r0, [pc, #348]	; (55364 <_vfiprintf_r+0x244>)
   55208:	f814 1b01 	ldrb.w	r1, [r4], #1
   5520c:	f005 fe4c 	bl	5aea8 <memchr>
   55210:	9b04      	ldr	r3, [sp, #16]
   55212:	b9d0      	cbnz	r0, 5524a <_vfiprintf_r+0x12a>
   55214:	06d9      	lsls	r1, r3, #27
   55216:	bf44      	itt	mi
   55218:	2220      	movmi	r2, #32
   5521a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   5521e:	071a      	lsls	r2, r3, #28
   55220:	bf44      	itt	mi
   55222:	222b      	movmi	r2, #43	; 0x2b
   55224:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   55228:	f89a 2000 	ldrb.w	r2, [sl]
   5522c:	2a2a      	cmp	r2, #42	; 0x2a
   5522e:	d014      	beq.n	5525a <_vfiprintf_r+0x13a>
   55230:	9a07      	ldr	r2, [sp, #28]
   55232:	4654      	mov	r4, sl
   55234:	2000      	movs	r0, #0
   55236:	f04f 0c0a 	mov.w	ip, #10
   5523a:	4621      	mov	r1, r4
   5523c:	f811 3b01 	ldrb.w	r3, [r1], #1
   55240:	3b30      	subs	r3, #48	; 0x30
   55242:	2b09      	cmp	r3, #9
   55244:	d94a      	bls.n	552dc <_vfiprintf_r+0x1bc>
   55246:	b970      	cbnz	r0, 55266 <_vfiprintf_r+0x146>
   55248:	e014      	b.n	55274 <_vfiprintf_r+0x154>
   5524a:	eba0 0008 	sub.w	r0, r0, r8
   5524e:	46a2      	mov	sl, r4
   55250:	fa09 f000 	lsl.w	r0, r9, r0
   55254:	4318      	orrs	r0, r3
   55256:	9004      	str	r0, [sp, #16]
   55258:	e7d3      	b.n	55202 <_vfiprintf_r+0xe2>
   5525a:	9a03      	ldr	r2, [sp, #12]
   5525c:	1d11      	adds	r1, r2, #4
   5525e:	6812      	ldr	r2, [r2, #0]
   55260:	2a00      	cmp	r2, #0
   55262:	9103      	str	r1, [sp, #12]
   55264:	db01      	blt.n	5526a <_vfiprintf_r+0x14a>
   55266:	9207      	str	r2, [sp, #28]
   55268:	e004      	b.n	55274 <_vfiprintf_r+0x154>
   5526a:	4252      	negs	r2, r2
   5526c:	f043 0302 	orr.w	r3, r3, #2
   55270:	9207      	str	r2, [sp, #28]
   55272:	9304      	str	r3, [sp, #16]
   55274:	7823      	ldrb	r3, [r4, #0]
   55276:	2b2e      	cmp	r3, #46	; 0x2e
   55278:	d10a      	bne.n	55290 <_vfiprintf_r+0x170>
   5527a:	7863      	ldrb	r3, [r4, #1]
   5527c:	2b2a      	cmp	r3, #42	; 0x2a
   5527e:	d132      	bne.n	552e6 <_vfiprintf_r+0x1c6>
   55280:	9b03      	ldr	r3, [sp, #12]
   55282:	3402      	adds	r4, #2
   55284:	1d1a      	adds	r2, r3, #4
   55286:	681b      	ldr	r3, [r3, #0]
   55288:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   5528c:	9203      	str	r2, [sp, #12]
   5528e:	9305      	str	r3, [sp, #20]
   55290:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 55374 <_vfiprintf_r+0x254>
   55294:	2203      	movs	r2, #3
   55296:	7821      	ldrb	r1, [r4, #0]
   55298:	4650      	mov	r0, sl
   5529a:	f005 fe05 	bl	5aea8 <memchr>
   5529e:	b138      	cbz	r0, 552b0 <_vfiprintf_r+0x190>
   552a0:	eba0 000a 	sub.w	r0, r0, sl
   552a4:	2240      	movs	r2, #64	; 0x40
   552a6:	9b04      	ldr	r3, [sp, #16]
   552a8:	3401      	adds	r4, #1
   552aa:	4082      	lsls	r2, r0
   552ac:	4313      	orrs	r3, r2
   552ae:	9304      	str	r3, [sp, #16]
   552b0:	f814 1b01 	ldrb.w	r1, [r4], #1
   552b4:	2206      	movs	r2, #6
   552b6:	482c      	ldr	r0, [pc, #176]	; (55368 <_vfiprintf_r+0x248>)
   552b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   552bc:	f005 fdf4 	bl	5aea8 <memchr>
   552c0:	2800      	cmp	r0, #0
   552c2:	d03f      	beq.n	55344 <_vfiprintf_r+0x224>
   552c4:	4b29      	ldr	r3, [pc, #164]	; (5536c <_vfiprintf_r+0x24c>)
   552c6:	bb1b      	cbnz	r3, 55310 <_vfiprintf_r+0x1f0>
   552c8:	9b03      	ldr	r3, [sp, #12]
   552ca:	3307      	adds	r3, #7
   552cc:	f023 0307 	bic.w	r3, r3, #7
   552d0:	3308      	adds	r3, #8
   552d2:	9303      	str	r3, [sp, #12]
   552d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   552d6:	443b      	add	r3, r7
   552d8:	9309      	str	r3, [sp, #36]	; 0x24
   552da:	e76b      	b.n	551b4 <_vfiprintf_r+0x94>
   552dc:	fb0c 3202 	mla	r2, ip, r2, r3
   552e0:	460c      	mov	r4, r1
   552e2:	2001      	movs	r0, #1
   552e4:	e7a9      	b.n	5523a <_vfiprintf_r+0x11a>
   552e6:	2300      	movs	r3, #0
   552e8:	3401      	adds	r4, #1
   552ea:	f04f 0c0a 	mov.w	ip, #10
   552ee:	4619      	mov	r1, r3
   552f0:	9305      	str	r3, [sp, #20]
   552f2:	4620      	mov	r0, r4
   552f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   552f8:	3a30      	subs	r2, #48	; 0x30
   552fa:	2a09      	cmp	r2, #9
   552fc:	d903      	bls.n	55306 <_vfiprintf_r+0x1e6>
   552fe:	2b00      	cmp	r3, #0
   55300:	d0c6      	beq.n	55290 <_vfiprintf_r+0x170>
   55302:	9105      	str	r1, [sp, #20]
   55304:	e7c4      	b.n	55290 <_vfiprintf_r+0x170>
   55306:	fb0c 2101 	mla	r1, ip, r1, r2
   5530a:	4604      	mov	r4, r0
   5530c:	2301      	movs	r3, #1
   5530e:	e7f0      	b.n	552f2 <_vfiprintf_r+0x1d2>
   55310:	ab03      	add	r3, sp, #12
   55312:	462a      	mov	r2, r5
   55314:	a904      	add	r1, sp, #16
   55316:	4630      	mov	r0, r6
   55318:	9300      	str	r3, [sp, #0]
   5531a:	4b15      	ldr	r3, [pc, #84]	; (55370 <_vfiprintf_r+0x250>)
   5531c:	f7fe f922 	bl	53564 <_printf_float>
   55320:	4607      	mov	r7, r0
   55322:	1c78      	adds	r0, r7, #1
   55324:	d1d6      	bne.n	552d4 <_vfiprintf_r+0x1b4>
   55326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   55328:	07d9      	lsls	r1, r3, #31
   5532a:	d405      	bmi.n	55338 <_vfiprintf_r+0x218>
   5532c:	89ab      	ldrh	r3, [r5, #12]
   5532e:	059a      	lsls	r2, r3, #22
   55330:	d402      	bmi.n	55338 <_vfiprintf_r+0x218>
   55332:	6da8      	ldr	r0, [r5, #88]	; 0x58
   55334:	f000 ff21 	bl	5617a <__retarget_lock_release_recursive>
   55338:	89ab      	ldrh	r3, [r5, #12]
   5533a:	065b      	lsls	r3, r3, #25
   5533c:	f53f af16 	bmi.w	5516c <_vfiprintf_r+0x4c>
   55340:	9809      	ldr	r0, [sp, #36]	; 0x24
   55342:	e715      	b.n	55170 <_vfiprintf_r+0x50>
   55344:	ab03      	add	r3, sp, #12
   55346:	462a      	mov	r2, r5
   55348:	a904      	add	r1, sp, #16
   5534a:	4630      	mov	r0, r6
   5534c:	9300      	str	r3, [sp, #0]
   5534e:	4b08      	ldr	r3, [pc, #32]	; (55370 <_vfiprintf_r+0x250>)
   55350:	f7fe fb3c 	bl	539cc <_printf_i>
   55354:	e7e4      	b.n	55320 <_vfiprintf_r+0x200>
   55356:	bf00      	nop
   55358:	0005c910 	.word	0x0005c910
   5535c:	0005c8f0 	.word	0x0005c8f0
   55360:	0005c8d0 	.word	0x0005c8d0
   55364:	00060baf 	.word	0x00060baf
   55368:	00060bb9 	.word	0x00060bb9
   5536c:	00053565 	.word	0x00053565
   55370:	0005ba51 	.word	0x0005ba51
   55374:	00060bb5 	.word	0x00060bb5

00055378 <__swbuf_r>:
   55378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5537a:	460e      	mov	r6, r1
   5537c:	4614      	mov	r4, r2
   5537e:	4605      	mov	r5, r0
   55380:	b118      	cbz	r0, 5538a <__swbuf_r+0x12>
   55382:	6983      	ldr	r3, [r0, #24]
   55384:	b90b      	cbnz	r3, 5538a <__swbuf_r+0x12>
   55386:	f7ff fe3b 	bl	55000 <__sinit>
   5538a:	4b21      	ldr	r3, [pc, #132]	; (55410 <__swbuf_r+0x98>)
   5538c:	429c      	cmp	r4, r3
   5538e:	d110      	bne.n	553b2 <__swbuf_r+0x3a>
   55390:	686c      	ldr	r4, [r5, #4]
   55392:	69a3      	ldr	r3, [r4, #24]
   55394:	60a3      	str	r3, [r4, #8]
   55396:	89a3      	ldrh	r3, [r4, #12]
   55398:	071a      	lsls	r2, r3, #28
   5539a:	d501      	bpl.n	553a0 <__swbuf_r+0x28>
   5539c:	6923      	ldr	r3, [r4, #16]
   5539e:	b993      	cbnz	r3, 553c6 <__swbuf_r+0x4e>
   553a0:	4621      	mov	r1, r4
   553a2:	4628      	mov	r0, r5
   553a4:	f000 f83a 	bl	5541c <__swsetup_r>
   553a8:	b168      	cbz	r0, 553c6 <__swbuf_r+0x4e>
   553aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   553ae:	4638      	mov	r0, r7
   553b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   553b2:	4b18      	ldr	r3, [pc, #96]	; (55414 <__swbuf_r+0x9c>)
   553b4:	429c      	cmp	r4, r3
   553b6:	d101      	bne.n	553bc <__swbuf_r+0x44>
   553b8:	68ac      	ldr	r4, [r5, #8]
   553ba:	e7ea      	b.n	55392 <__swbuf_r+0x1a>
   553bc:	4b16      	ldr	r3, [pc, #88]	; (55418 <__swbuf_r+0xa0>)
   553be:	429c      	cmp	r4, r3
   553c0:	bf08      	it	eq
   553c2:	68ec      	ldreq	r4, [r5, #12]
   553c4:	e7e5      	b.n	55392 <__swbuf_r+0x1a>
   553c6:	6923      	ldr	r3, [r4, #16]
   553c8:	b2f6      	uxtb	r6, r6
   553ca:	6820      	ldr	r0, [r4, #0]
   553cc:	4637      	mov	r7, r6
   553ce:	1ac0      	subs	r0, r0, r3
   553d0:	6963      	ldr	r3, [r4, #20]
   553d2:	4283      	cmp	r3, r0
   553d4:	dc05      	bgt.n	553e2 <__swbuf_r+0x6a>
   553d6:	4621      	mov	r1, r4
   553d8:	4628      	mov	r0, r5
   553da:	f7ff fd93 	bl	54f04 <_fflush_r>
   553de:	2800      	cmp	r0, #0
   553e0:	d1e3      	bne.n	553aa <__swbuf_r+0x32>
   553e2:	68a3      	ldr	r3, [r4, #8]
   553e4:	3001      	adds	r0, #1
   553e6:	3b01      	subs	r3, #1
   553e8:	60a3      	str	r3, [r4, #8]
   553ea:	6823      	ldr	r3, [r4, #0]
   553ec:	1c5a      	adds	r2, r3, #1
   553ee:	6022      	str	r2, [r4, #0]
   553f0:	701e      	strb	r6, [r3, #0]
   553f2:	6963      	ldr	r3, [r4, #20]
   553f4:	4283      	cmp	r3, r0
   553f6:	d004      	beq.n	55402 <__swbuf_r+0x8a>
   553f8:	89a3      	ldrh	r3, [r4, #12]
   553fa:	07db      	lsls	r3, r3, #31
   553fc:	d5d7      	bpl.n	553ae <__swbuf_r+0x36>
   553fe:	2e0a      	cmp	r6, #10
   55400:	d1d5      	bne.n	553ae <__swbuf_r+0x36>
   55402:	4621      	mov	r1, r4
   55404:	4628      	mov	r0, r5
   55406:	f7ff fd7d 	bl	54f04 <_fflush_r>
   5540a:	2800      	cmp	r0, #0
   5540c:	d0cf      	beq.n	553ae <__swbuf_r+0x36>
   5540e:	e7cc      	b.n	553aa <__swbuf_r+0x32>
   55410:	0005c910 	.word	0x0005c910
   55414:	0005c8f0 	.word	0x0005c8f0
   55418:	0005c8d0 	.word	0x0005c8d0

0005541c <__swsetup_r>:
   5541c:	4b31      	ldr	r3, [pc, #196]	; (554e4 <__swsetup_r+0xc8>)
   5541e:	b570      	push	{r4, r5, r6, lr}
   55420:	681d      	ldr	r5, [r3, #0]
   55422:	4606      	mov	r6, r0
   55424:	460c      	mov	r4, r1
   55426:	b125      	cbz	r5, 55432 <__swsetup_r+0x16>
   55428:	69ab      	ldr	r3, [r5, #24]
   5542a:	b913      	cbnz	r3, 55432 <__swsetup_r+0x16>
   5542c:	4628      	mov	r0, r5
   5542e:	f7ff fde7 	bl	55000 <__sinit>
   55432:	4b2d      	ldr	r3, [pc, #180]	; (554e8 <__swsetup_r+0xcc>)
   55434:	429c      	cmp	r4, r3
   55436:	d10e      	bne.n	55456 <__swsetup_r+0x3a>
   55438:	686c      	ldr	r4, [r5, #4]
   5543a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   5543e:	071a      	lsls	r2, r3, #28
   55440:	d42c      	bmi.n	5549c <__swsetup_r+0x80>
   55442:	06dd      	lsls	r5, r3, #27
   55444:	d411      	bmi.n	5546a <__swsetup_r+0x4e>
   55446:	2209      	movs	r2, #9
   55448:	6032      	str	r2, [r6, #0]
   5544a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   5544e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   55452:	81a3      	strh	r3, [r4, #12]
   55454:	e03d      	b.n	554d2 <__swsetup_r+0xb6>
   55456:	4b25      	ldr	r3, [pc, #148]	; (554ec <__swsetup_r+0xd0>)
   55458:	429c      	cmp	r4, r3
   5545a:	d101      	bne.n	55460 <__swsetup_r+0x44>
   5545c:	68ac      	ldr	r4, [r5, #8]
   5545e:	e7ec      	b.n	5543a <__swsetup_r+0x1e>
   55460:	4b23      	ldr	r3, [pc, #140]	; (554f0 <__swsetup_r+0xd4>)
   55462:	429c      	cmp	r4, r3
   55464:	bf08      	it	eq
   55466:	68ec      	ldreq	r4, [r5, #12]
   55468:	e7e7      	b.n	5543a <__swsetup_r+0x1e>
   5546a:	0758      	lsls	r0, r3, #29
   5546c:	d512      	bpl.n	55494 <__swsetup_r+0x78>
   5546e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   55470:	b141      	cbz	r1, 55484 <__swsetup_r+0x68>
   55472:	f104 0344 	add.w	r3, r4, #68	; 0x44
   55476:	4299      	cmp	r1, r3
   55478:	d002      	beq.n	55480 <__swsetup_r+0x64>
   5547a:	4630      	mov	r0, r6
   5547c:	f7fd ffce 	bl	5341c <_free_r>
   55480:	2300      	movs	r3, #0
   55482:	6363      	str	r3, [r4, #52]	; 0x34
   55484:	89a3      	ldrh	r3, [r4, #12]
   55486:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   5548a:	81a3      	strh	r3, [r4, #12]
   5548c:	2300      	movs	r3, #0
   5548e:	6063      	str	r3, [r4, #4]
   55490:	6923      	ldr	r3, [r4, #16]
   55492:	6023      	str	r3, [r4, #0]
   55494:	89a3      	ldrh	r3, [r4, #12]
   55496:	f043 0308 	orr.w	r3, r3, #8
   5549a:	81a3      	strh	r3, [r4, #12]
   5549c:	6923      	ldr	r3, [r4, #16]
   5549e:	b94b      	cbnz	r3, 554b4 <__swsetup_r+0x98>
   554a0:	89a3      	ldrh	r3, [r4, #12]
   554a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
   554a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   554aa:	d003      	beq.n	554b4 <__swsetup_r+0x98>
   554ac:	4621      	mov	r1, r4
   554ae:	4630      	mov	r0, r6
   554b0:	f000 f820 	bl	554f4 <__smakebuf_r>
   554b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   554b8:	f013 0201 	ands.w	r2, r3, #1
   554bc:	d00a      	beq.n	554d4 <__swsetup_r+0xb8>
   554be:	2200      	movs	r2, #0
   554c0:	60a2      	str	r2, [r4, #8]
   554c2:	6962      	ldr	r2, [r4, #20]
   554c4:	4252      	negs	r2, r2
   554c6:	61a2      	str	r2, [r4, #24]
   554c8:	6922      	ldr	r2, [r4, #16]
   554ca:	b942      	cbnz	r2, 554de <__swsetup_r+0xc2>
   554cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   554d0:	d1bb      	bne.n	5544a <__swsetup_r+0x2e>
   554d2:	bd70      	pop	{r4, r5, r6, pc}
   554d4:	0799      	lsls	r1, r3, #30
   554d6:	bf58      	it	pl
   554d8:	6962      	ldrpl	r2, [r4, #20]
   554da:	60a2      	str	r2, [r4, #8]
   554dc:	e7f4      	b.n	554c8 <__swsetup_r+0xac>
   554de:	2000      	movs	r0, #0
   554e0:	e7f7      	b.n	554d2 <__swsetup_r+0xb6>
   554e2:	bf00      	nop
   554e4:	2001a830 	.word	0x2001a830
   554e8:	0005c910 	.word	0x0005c910
   554ec:	0005c8f0 	.word	0x0005c8f0
   554f0:	0005c8d0 	.word	0x0005c8d0

000554f4 <__smakebuf_r>:
   554f4:	898b      	ldrh	r3, [r1, #12]
   554f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   554f8:	079d      	lsls	r5, r3, #30
   554fa:	4606      	mov	r6, r0
   554fc:	460c      	mov	r4, r1
   554fe:	d507      	bpl.n	55510 <__smakebuf_r+0x1c>
   55500:	f104 0347 	add.w	r3, r4, #71	; 0x47
   55504:	6023      	str	r3, [r4, #0]
   55506:	6123      	str	r3, [r4, #16]
   55508:	2301      	movs	r3, #1
   5550a:	6163      	str	r3, [r4, #20]
   5550c:	b003      	add	sp, #12
   5550e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   55510:	ab01      	add	r3, sp, #4
   55512:	466a      	mov	r2, sp
   55514:	f006 fab5 	bl	5ba82 <__swhatbuf_r>
   55518:	9f00      	ldr	r7, [sp, #0]
   5551a:	4605      	mov	r5, r0
   5551c:	4630      	mov	r0, r6
   5551e:	4639      	mov	r1, r7
   55520:	f7fd ffc6 	bl	534b0 <_malloc_r>
   55524:	b948      	cbnz	r0, 5553a <__smakebuf_r+0x46>
   55526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   5552a:	059a      	lsls	r2, r3, #22
   5552c:	d4ee      	bmi.n	5550c <__smakebuf_r+0x18>
   5552e:	f023 0303 	bic.w	r3, r3, #3
   55532:	f043 0302 	orr.w	r3, r3, #2
   55536:	81a3      	strh	r3, [r4, #12]
   55538:	e7e2      	b.n	55500 <__smakebuf_r+0xc>
   5553a:	4b0d      	ldr	r3, [pc, #52]	; (55570 <__smakebuf_r+0x7c>)
   5553c:	62b3      	str	r3, [r6, #40]	; 0x28
   5553e:	89a3      	ldrh	r3, [r4, #12]
   55540:	6020      	str	r0, [r4, #0]
   55542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   55546:	81a3      	strh	r3, [r4, #12]
   55548:	9b01      	ldr	r3, [sp, #4]
   5554a:	e9c4 0704 	strd	r0, r7, [r4, #16]
   5554e:	b15b      	cbz	r3, 55568 <__smakebuf_r+0x74>
   55550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   55554:	4630      	mov	r0, r6
   55556:	f000 f839 	bl	555cc <_isatty_r>
   5555a:	b128      	cbz	r0, 55568 <__smakebuf_r+0x74>
   5555c:	89a3      	ldrh	r3, [r4, #12]
   5555e:	f023 0303 	bic.w	r3, r3, #3
   55562:	f043 0301 	orr.w	r3, r3, #1
   55566:	81a3      	strh	r3, [r4, #12]
   55568:	89a3      	ldrh	r3, [r4, #12]
   5556a:	431d      	orrs	r5, r3
   5556c:	81a5      	strh	r5, [r4, #12]
   5556e:	e7cd      	b.n	5550c <__smakebuf_r+0x18>
   55570:	00054fc5 	.word	0x00054fc5

00055574 <raise>:
   55574:	4b02      	ldr	r3, [pc, #8]	; (55580 <raise+0xc>)
   55576:	4601      	mov	r1, r0
   55578:	6818      	ldr	r0, [r3, #0]
   5557a:	f006 baa7 	b.w	5bacc <_raise_r>
   5557e:	bf00      	nop
   55580:	2001a830 	.word	0x2001a830

00055584 <_kill_r>:
   55584:	b538      	push	{r3, r4, r5, lr}
   55586:	2300      	movs	r3, #0
   55588:	4d06      	ldr	r5, [pc, #24]	; (555a4 <_kill_r+0x20>)
   5558a:	4604      	mov	r4, r0
   5558c:	4608      	mov	r0, r1
   5558e:	4611      	mov	r1, r2
   55590:	602b      	str	r3, [r5, #0]
   55592:	f000 fdd9 	bl	56148 <_kill>
   55596:	1c43      	adds	r3, r0, #1
   55598:	d102      	bne.n	555a0 <_kill_r+0x1c>
   5559a:	682b      	ldr	r3, [r5, #0]
   5559c:	b103      	cbz	r3, 555a0 <_kill_r+0x1c>
   5559e:	6023      	str	r3, [r4, #0]
   555a0:	bd38      	pop	{r3, r4, r5, pc}
   555a2:	bf00      	nop
   555a4:	2001bcc8 	.word	0x2001bcc8

000555a8 <_fstat_r>:
   555a8:	b538      	push	{r3, r4, r5, lr}
   555aa:	2300      	movs	r3, #0
   555ac:	4d06      	ldr	r5, [pc, #24]	; (555c8 <_fstat_r+0x20>)
   555ae:	4604      	mov	r4, r0
   555b0:	4608      	mov	r0, r1
   555b2:	4611      	mov	r1, r2
   555b4:	602b      	str	r3, [r5, #0]
   555b6:	f000 fdcb 	bl	56150 <_fstat>
   555ba:	1c43      	adds	r3, r0, #1
   555bc:	d102      	bne.n	555c4 <_fstat_r+0x1c>
   555be:	682b      	ldr	r3, [r5, #0]
   555c0:	b103      	cbz	r3, 555c4 <_fstat_r+0x1c>
   555c2:	6023      	str	r3, [r4, #0]
   555c4:	bd38      	pop	{r3, r4, r5, pc}
   555c6:	bf00      	nop
   555c8:	2001bcc8 	.word	0x2001bcc8

000555cc <_isatty_r>:
   555cc:	b538      	push	{r3, r4, r5, lr}
   555ce:	2300      	movs	r3, #0
   555d0:	4d05      	ldr	r5, [pc, #20]	; (555e8 <_isatty_r+0x1c>)
   555d2:	4604      	mov	r4, r0
   555d4:	4608      	mov	r0, r1
   555d6:	602b      	str	r3, [r5, #0]
   555d8:	f000 fdb1 	bl	5613e <_isatty>
   555dc:	1c43      	adds	r3, r0, #1
   555de:	d102      	bne.n	555e6 <_isatty_r+0x1a>
   555e0:	682b      	ldr	r3, [r5, #0]
   555e2:	b103      	cbz	r3, 555e6 <_isatty_r+0x1a>
   555e4:	6023      	str	r3, [r4, #0]
   555e6:	bd38      	pop	{r3, r4, r5, pc}
   555e8:	2001bcc8 	.word	0x2001bcc8

000555ec <disable_ds_1>:
{
   555ec:	b508      	push	{r3, lr}
	pm_policy_state_lock_get(PM_STATE_SOFT_OFF, PM_ALL_SUBSTATES);
   555ee:	21ff      	movs	r1, #255	; 0xff
   555f0:	2006      	movs	r0, #6
   555f2:	f000 fcdb 	bl	55fac <pm_policy_state_lock_get>
}
   555f6:	2000      	movs	r0, #0
   555f8:	bd08      	pop	{r3, pc}

000555fa <gpio_pin_configure_dt.constprop.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   555fa:	4603      	mov	r3, r0
   555fc:	b4f0      	push	{r4, r5, r6, r7}
				  spec->pin,
   555fe:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   55600:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
   55602:	88db      	ldrh	r3, [r3, #6]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   55604:	2501      	movs	r5, #1
	struct gpio_driver_data *data =
   55606:	6906      	ldr	r6, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   55608:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   5560a:	6834      	ldr	r4, [r6, #0]
	return gpio_pin_configure(spec->port,
   5560c:	bf54      	ite	pl
   5560e:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   55612:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   55616:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   55618:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   5561c:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
   5561e:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   55620:	bf4c      	ite	mi
   55622:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   55624:	43ac      	bicpl	r4, r5
   55626:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   55628:	683b      	ldr	r3, [r7, #0]
}
   5562a:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   5562c:	4718      	bx	r3

0005562e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   5562e:	b510      	push	{r4, lr}
   55630:	b086      	sub	sp, #24
	va_start(ap, fmt);
   55632:	a80b      	add	r0, sp, #44	; 0x2c
   55634:	9005      	str	r0, [sp, #20]
   55636:	9003      	str	r0, [sp, #12]
   55638:	980a      	ldr	r0, [sp, #40]	; 0x28
   5563a:	9c08      	ldr	r4, [sp, #32]
   5563c:	9002      	str	r0, [sp, #8]
   5563e:	2000      	movs	r0, #0
   55640:	9400      	str	r4, [sp, #0]
   55642:	9001      	str	r0, [sp, #4]
   55644:	f7ef fdf4 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   55648:	b006      	add	sp, #24
   5564a:	bd10      	pop	{r4, pc}

0005564c <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   5564c:	4603      	mov	r3, r0
   5564e:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   55650:	7919      	ldrb	r1, [r3, #4]
   55652:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   55654:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   55656:	fa03 f101 	lsl.w	r1, r3, r1
   5565a:	6903      	ldr	r3, [r0, #16]
   5565c:	681b      	ldr	r3, [r3, #0]
   5565e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   55660:	bf18      	it	ne
   55662:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   55666:	b112      	cbz	r2, 5566e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   55668:	6883      	ldr	r3, [r0, #8]
   5566a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   5566c:	4718      	bx	r3
   5566e:	6883      	ldr	r3, [r0, #8]
   55670:	691b      	ldr	r3, [r3, #16]
   55672:	e7fb      	b.n	5566c <gpio_pin_set_dt.isra.0+0x20>

00055674 <k_msleep.constprop.0.isra.0>:
	return z_impl_k_sleep(timeout);
   55674:	f240 6067 	movw	r0, #1639	; 0x667
   55678:	2100      	movs	r1, #0
   5567a:	f7fd bc47 	b.w	52f0c <z_impl_k_sleep>

0005567e <crypto_init>:
{
   5567e:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   55680:	f002 fa7e 	bl	57b80 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
   55684:	3800      	subs	r0, #0
   55686:	bf18      	it	ne
   55688:	2001      	movne	r0, #1
}
   5568a:	4240      	negs	r0, r0
   5568c:	bd08      	pop	{r3, pc}

0005568e <decryptData>:
{
   5568e:	b508      	push	{r3, lr}
	status = decrypt_aes_gcm();
   55690:	f7ed fec0 	bl	43414 <decrypt_aes_gcm>
	if (status != 0) {
   55694:	3800      	subs	r0, #0
   55696:	bf18      	it	ne
   55698:	2001      	movne	r0, #1
}
   5569a:	4240      	negs	r0, r0
   5569c:	bd08      	pop	{r3, pc}

0005569e <cryptoEnd>:
{
   5569e:	b508      	push	{r3, lr}
	status = crypto_finish();
   556a0:	f7ed fd34 	bl	4310c <crypto_finish>
	if (status != 0) {
   556a4:	3800      	subs	r0, #0
   556a6:	bf18      	it	ne
   556a8:	2001      	movne	r0, #1
}
   556aa:	4240      	negs	r0, r0
   556ac:	bd08      	pop	{r3, pc}

000556ae <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   556ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   556b2:	4606      	mov	r6, r0
   556b4:	460d      	mov	r5, r1
   556b6:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   556b8:	4698      	mov	r8, r3
   556ba:	b32b      	cbz	r3, 55708 <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   556bc:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   556c0:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   556c4:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   556c8:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   556ca:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   556cc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   556d0:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   556d4:	441c      	add	r4, r3
   556d6:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   556d8:	45ca      	cmp	sl, r9
   556da:	d309      	bcc.n	556f0 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   556dc:	4639      	mov	r1, r7
   556de:	4630      	mov	r0, r6
   556e0:	46ac      	mov	ip, r5
   556e2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   556e6:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   556ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   556ee:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   556f0:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   556f4:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   556f8:	4620      	mov	r0, r4
		*ps = s;
   556fa:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   556fe:	f7eb fb79 	bl	40df4 <strlen>
   55702:	3001      	adds	r0, #1
   55704:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   55706:	e7e7      	b.n	556d8 <cbpprintf_external+0x2a>
}
   55708:	f06f 0015 	mvn.w	r0, #21
   5570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00055710 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
   55710:	440a      	add	r2, r1
   55712:	428a      	cmp	r2, r1
   55714:	d100      	bne.n	55718 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
   55716:	4770      	bx	lr
		seed ^= *src++;
   55718:	f811 3b01 	ldrb.w	r3, [r1], #1
   5571c:	ba40      	rev16	r0, r0
   5571e:	b280      	uxth	r0, r0
   55720:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
   55722:	f3c0 1303 	ubfx	r3, r0, #4, #4
   55726:	4043      	eors	r3, r0
		seed ^= seed << 12U;
   55728:	0318      	lsls	r0, r3, #12
   5572a:	b280      	uxth	r0, r0
   5572c:	4043      	eors	r3, r0
		seed ^= (seed & 0xffU) << 5U;
   5572e:	0158      	lsls	r0, r3, #5
   55730:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
   55734:	4058      	eors	r0, r3
	for (; len > 0; len--) {
   55736:	e7ec      	b.n	55712 <crc16_itu_t+0x2>

00055738 <crc7_be>:

#include <zephyr/sys/crc.h>

uint8_t crc7_be(uint8_t seed, const uint8_t *src, size_t len)
{
	while (len--) {
   55738:	440a      	add	r2, r1
   5573a:	4291      	cmp	r1, r2
   5573c:	d100      	bne.n	55740 <crc7_be+0x8>

		seed = (f << 1) ^ (f << 4);
	}

	return seed;
}
   5573e:	4770      	bx	lr
		uint8_t e = seed ^ *src++;
   55740:	f811 3b01 	ldrb.w	r3, [r1], #1
   55744:	4058      	eors	r0, r3
		uint8_t f = e ^ (e >> 4) ^ (e >> 7);
   55746:	09c3      	lsrs	r3, r0, #7
   55748:	ea83 1310 	eor.w	r3, r3, r0, lsr #4
		seed = (f << 1) ^ (f << 4);
   5574c:	4058      	eors	r0, r3
   5574e:	0103      	lsls	r3, r0, #4
   55750:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
   55754:	b2d8      	uxtb	r0, r3
   55756:	e7f0      	b.n	5573a <crc7_be+0x2>

00055758 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   55758:	b40c      	push	{r2, r3}
   5575a:	4603      	mov	r3, r0
   5575c:	b507      	push	{r0, r1, r2, lr}
   5575e:	4608      	mov	r0, r1
				       unsigned long request, ...)
{
	va_list args;
	int res;

	va_start(args, request);
   55760:	aa05      	add	r2, sp, #20
	res = vtable->ioctl(obj, request, args);
   55762:	f240 1105 	movw	r1, #261	; 0x105
   55766:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   55768:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   5576a:	4798      	blx	r3
	va_end(args);

	return res;
}
   5576c:	b003      	add	sp, #12
   5576e:	f85d eb04 	ldr.w	lr, [sp], #4
   55772:	b002      	add	sp, #8
   55774:	4770      	bx	lr

00055776 <arch_printk_char_out>:
}
   55776:	2000      	movs	r0, #0
   55778:	4770      	bx	lr

0005577a <str_out>:
{
   5577a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   5577c:	688a      	ldr	r2, [r1, #8]
   5577e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   55780:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   55782:	b114      	cbz	r4, 5578a <str_out+0x10>
   55784:	684b      	ldr	r3, [r1, #4]
   55786:	4293      	cmp	r3, r2
   55788:	dc01      	bgt.n	5578e <str_out+0x14>
		ctx->count++;
   5578a:	608d      	str	r5, [r1, #8]
}
   5578c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   5578e:	3b01      	subs	r3, #1
   55790:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   55792:	bf08      	it	eq
   55794:	2200      	moveq	r2, #0
   55796:	608d      	str	r5, [r1, #8]
   55798:	bf0c      	ite	eq
   5579a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   5579c:	54a0      	strbne	r0, [r4, r2]
   5579e:	e7f5      	b.n	5578c <str_out+0x12>

000557a0 <printk>:
{
   557a0:	b40f      	push	{r0, r1, r2, r3}
   557a2:	b507      	push	{r0, r1, r2, lr}
   557a4:	a904      	add	r1, sp, #16
   557a6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   557aa:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   557ac:	f7ef fa8e 	bl	44ccc <vprintk>
}
   557b0:	b003      	add	sp, #12
   557b2:	f85d eb04 	ldr.w	lr, [sp], #4
   557b6:	b004      	add	sp, #16
   557b8:	4770      	bx	lr

000557ba <snprintk>:
{
   557ba:	b40c      	push	{r2, r3}
   557bc:	b507      	push	{r0, r1, r2, lr}
   557be:	ab04      	add	r3, sp, #16
   557c0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   557c4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   557c6:	f7ef fa8f 	bl	44ce8 <vsnprintk>
}
   557ca:	b003      	add	sp, #12
   557cc:	f85d eb04 	ldr.w	lr, [sp], #4
   557d0:	b002      	add	sp, #8
   557d2:	4770      	bx	lr

000557d4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   557d4:	4604      	mov	r4, r0
   557d6:	b508      	push	{r3, lr}
   557d8:	4608      	mov	r0, r1
   557da:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   557dc:	461a      	mov	r2, r3
   557de:	47a0      	blx	r4
	return z_impl_z_current_get();
   557e0:	f7fd fbae 	bl	52f40 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   557e4:	f7f0 ffa2 	bl	4672c <z_impl_k_thread_abort>

000557e8 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   557e8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   557ec:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   557ee:	0840      	lsrs	r0, r0, #1
   557f0:	4770      	bx	lr

000557f2 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   557f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   557f4:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   557f6:	f7ff fff7 	bl	557e8 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   557fa:	fab0 f080 	clz	r0, r0
   557fe:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   55802:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   55806:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   5580a:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   5580c:	1d17      	adds	r7, r2, #4
{
   5580e:	460c      	mov	r4, r1
   55810:	3206      	adds	r2, #6
   55812:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   55814:	b956      	cbnz	r6, 5582c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   55816:	2101      	movs	r1, #1
   55818:	fa01 f000 	lsl.w	r0, r1, r0
   5581c:	68d9      	ldr	r1, [r3, #12]
   5581e:	4301      	orrs	r1, r0
   55820:	60d9      	str	r1, [r3, #12]
		b->next = c;
   55822:	f8cc 4010 	str.w	r4, [ip, #16]
   55826:	53dd      	strh	r5, [r3, r7]
   55828:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   5582a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   5582c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   5582e:	3104      	adds	r1, #4
   55830:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   55832:	53d8      	strh	r0, [r3, r7]
   55834:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   55838:	529e      	strh	r6, [r3, r2]
   5583a:	80c5      	strh	r5, [r0, #6]
   5583c:	525d      	strh	r5, [r3, r1]
   5583e:	e7f4      	b.n	5582a <free_list_add+0x38>

00055840 <free_list_remove_bidx>:
{
   55840:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   55842:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   55846:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   55848:	4299      	cmp	r1, r3
   5584a:	f102 0104 	add.w	r1, r2, #4
   5584e:	d10a      	bne.n	55866 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   55850:	2301      	movs	r3, #1
   55852:	fa03 f202 	lsl.w	r2, r3, r2
   55856:	68c3      	ldr	r3, [r0, #12]
   55858:	ea23 0302 	bic.w	r3, r3, r2
   5585c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   5585e:	2300      	movs	r3, #0
   55860:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   55864:	bd10      	pop	{r4, pc}
   55866:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   55868:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   5586c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   55870:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   55874:	80cb      	strh	r3, [r1, #6]
   55876:	8082      	strh	r2, [r0, #4]
}
   55878:	e7f4      	b.n	55864 <free_list_remove_bidx+0x24>

0005587a <free_list_remove>:
{
   5587a:	b508      	push	{r3, lr}
   5587c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   5587e:	f7ff ffb3 	bl	557e8 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   55882:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   55886:	4618      	mov	r0, r3
}
   55888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   5588c:	f1c2 021f 	rsb	r2, r2, #31
   55890:	f7ff bfd6 	b.w	55840 <free_list_remove_bidx>

00055894 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   55894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   55898:	fab1 f581 	clz	r5, r1
   5589c:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   558a0:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   558a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   558a8:	4603      	mov	r3, r0
   558aa:	460e      	mov	r6, r1
	if (b->next) {
   558ac:	b1c2      	cbz	r2, 558e0 <alloc_chunk+0x4c>
   558ae:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   558b0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   558b4:	4618      	mov	r0, r3
   558b6:	4621      	mov	r1, r4
   558b8:	f7ff ff96 	bl	557e8 <chunk_size>
   558bc:	42b0      	cmp	r0, r6
   558be:	d306      	bcc.n	558ce <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   558c0:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   558c2:	4618      	mov	r0, r3
   558c4:	f7ff ffbc 	bl	55840 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   558c8:	4620      	mov	r0, r4
   558ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   558ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   558d2:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   558d4:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   558d6:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   558da:	d001      	beq.n	558e0 <alloc_chunk+0x4c>
   558dc:	4282      	cmp	r2, r0
   558de:	d1e7      	bne.n	558b0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   558e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   558e4:	f1c5 0220 	rsb	r2, r5, #32
   558e8:	4094      	lsls	r4, r2
   558ea:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   558ec:	4014      	ands	r4, r2
   558ee:	d0eb      	beq.n	558c8 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   558f0:	fa94 f2a4 	rbit	r2, r4
   558f4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   558f8:	1d11      	adds	r1, r2, #4
   558fa:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   558fe:	4621      	mov	r1, r4
   55900:	e7df      	b.n	558c2 <alloc_chunk+0x2e>

00055902 <merge_chunks>:
{
   55902:	b538      	push	{r3, r4, r5, lr}
   55904:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   55906:	f7ff ff6f 	bl	557e8 <chunk_size>
{
   5590a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   5590c:	4604      	mov	r4, r0
   5590e:	4611      	mov	r1, r2
   55910:	4618      	mov	r0, r3
   55912:	f7ff ff69 	bl	557e8 <chunk_size>
   55916:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   55918:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   5591a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   5591e:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   55920:	4618      	mov	r0, r3
   55922:	f7ff ff61 	bl	557e8 <chunk_size>
	void *cmem = &buf[c];
   55926:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   55928:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   5592c:	bd38      	pop	{r3, r4, r5, pc}

0005592e <split_chunks>:
{
   5592e:	b538      	push	{r3, r4, r5, lr}
   55930:	460c      	mov	r4, r1
   55932:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   55934:	f7ff ff58 	bl	557e8 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   55938:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   5593a:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   5593c:	4405      	add	r5, r0
   5593e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   55942:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   55944:	8060      	strh	r0, [r4, #2]
   55946:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   5594a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   5594c:	8044      	strh	r4, [r0, #2]
   5594e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   55952:	4618      	mov	r0, r3
   55954:	4611      	mov	r1, r2
   55956:	f7ff ff47 	bl	557e8 <chunk_size>
	void *cmem = &buf[c];
   5595a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   5595c:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   55960:	bd38      	pop	{r3, r4, r5, pc}

00055962 <free_chunk>:
{
   55962:	b538      	push	{r3, r4, r5, lr}
   55964:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   55966:	f7ff ff3f 	bl	557e8 <chunk_size>
   5596a:	460c      	mov	r4, r1
   5596c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   5596e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   55972:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   55974:	07da      	lsls	r2, r3, #31
   55976:	d40a      	bmi.n	5598e <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   55978:	4628      	mov	r0, r5
   5597a:	f7ff ff7e 	bl	5587a <free_list_remove>
	return c + chunk_size(h, c);
   5597e:	4621      	mov	r1, r4
   55980:	4628      	mov	r0, r5
   55982:	f7ff ff31 	bl	557e8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   55986:	1822      	adds	r2, r4, r0
   55988:	4628      	mov	r0, r5
   5598a:	f7ff ffba 	bl	55902 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   5598e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   55992:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   55994:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   55998:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   5599a:	07db      	lsls	r3, r3, #31
   5599c:	d40c      	bmi.n	559b8 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   5599e:	4628      	mov	r0, r5
   559a0:	f7ff ff6b 	bl	5587a <free_list_remove>
		return ((uint16_t *)cmem)[f];
   559a4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   559a8:	4622      	mov	r2, r4
   559aa:	1a61      	subs	r1, r4, r1
   559ac:	4628      	mov	r0, r5
   559ae:	f7ff ffa8 	bl	55902 <merge_chunks>
   559b2:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   559b6:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   559b8:	4621      	mov	r1, r4
   559ba:	4628      	mov	r0, r5
}
   559bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   559c0:	f7ff bf17 	b.w	557f2 <free_list_add>

000559c4 <sys_heap_free>:
	if (mem == NULL) {
   559c4:	b161      	cbz	r1, 559e0 <sys_heap_free+0x1c>
   559c6:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   559c8:	3904      	subs	r1, #4
   559ca:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   559cc:	f021 0307 	bic.w	r3, r1, #7
   559d0:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   559d2:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   559d4:	08c9      	lsrs	r1, r1, #3
   559d6:	f022 0201 	bic.w	r2, r2, #1
   559da:	805a      	strh	r2, [r3, #2]
   559dc:	f7ff bfc1 	b.w	55962 <free_chunk>
}
   559e0:	4770      	bx	lr

000559e2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   559e2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   559e4:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   559e6:	b909      	cbnz	r1, 559ec <sys_heap_alloc+0xa>
		return NULL;
   559e8:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   559ea:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   559ec:	68ab      	ldr	r3, [r5, #8]
   559ee:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   559f2:	d9f9      	bls.n	559e8 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   559f4:	310b      	adds	r1, #11
   559f6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   559f8:	4621      	mov	r1, r4
   559fa:	4628      	mov	r0, r5
   559fc:	f7ff ff4a 	bl	55894 <alloc_chunk>
	if (c == 0U) {
   55a00:	4606      	mov	r6, r0
   55a02:	2800      	cmp	r0, #0
   55a04:	d0f0      	beq.n	559e8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   55a06:	4601      	mov	r1, r0
   55a08:	4628      	mov	r0, r5
   55a0a:	f7ff feed 	bl	557e8 <chunk_size>
   55a0e:	42a0      	cmp	r0, r4
   55a10:	d907      	bls.n	55a22 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   55a12:	4628      	mov	r0, r5
   55a14:	1932      	adds	r2, r6, r4
   55a16:	f7ff ff8a 	bl	5592e <split_chunks>
		free_list_add(h, c + chunk_sz);
   55a1a:	4611      	mov	r1, r2
   55a1c:	4628      	mov	r0, r5
   55a1e:	f7ff fee8 	bl	557f2 <free_list_add>
	void *cmem = &buf[c];
   55a22:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   55a26:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   55a28:	8853      	ldrh	r3, [r2, #2]
   55a2a:	3004      	adds	r0, #4
   55a2c:	f043 0301 	orr.w	r3, r3, #1
   55a30:	8053      	strh	r3, [r2, #2]
	return mem;
   55a32:	e7da      	b.n	559ea <sys_heap_alloc+0x8>

00055a34 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   55a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   55a38:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   55a3c:	ea19 0901 	ands.w	r9, r9, r1
{
   55a40:	460f      	mov	r7, r1
   55a42:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   55a44:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   55a46:	d00c      	beq.n	55a62 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   55a48:	424b      	negs	r3, r1
   55a4a:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   55a4c:	2b04      	cmp	r3, #4
   55a4e:	461a      	mov	r2, r3
   55a50:	464f      	mov	r7, r9
   55a52:	bf28      	it	cs
   55a54:	2204      	movcs	r2, #4
	rew = align & -align;
   55a56:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   55a58:	b964      	cbnz	r4, 55a74 <sys_heap_aligned_alloc+0x40>
		return NULL;
   55a5a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   55a5c:	4628      	mov	r0, r5
   55a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   55a62:	2904      	cmp	r1, #4
   55a64:	d804      	bhi.n	55a70 <sys_heap_aligned_alloc+0x3c>
}
   55a66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   55a6a:	4611      	mov	r1, r2
   55a6c:	f7ff bfb9 	b.w	559e2 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   55a70:	2204      	movs	r2, #4
   55a72:	e7f1      	b.n	55a58 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   55a74:	68b3      	ldr	r3, [r6, #8]
   55a76:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   55a7a:	d9ee      	bls.n	55a5a <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   55a7c:	f104 010b 	add.w	r1, r4, #11
   55a80:	4439      	add	r1, r7
   55a82:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   55a84:	4630      	mov	r0, r6
   55a86:	08c9      	lsrs	r1, r1, #3
   55a88:	f7ff ff04 	bl	55894 <alloc_chunk>
	if (c0 == 0) {
   55a8c:	4680      	mov	r8, r0
   55a8e:	2800      	cmp	r0, #0
   55a90:	d0e3      	beq.n	55a5a <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   55a92:	f109 0504 	add.w	r5, r9, #4
   55a96:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   55a9a:	1e7b      	subs	r3, r7, #1
   55a9c:	4435      	add	r5, r6
   55a9e:	441d      	add	r5, r3
   55aa0:	427f      	negs	r7, r7
   55aa2:	403d      	ands	r5, r7
   55aa4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   55aa8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   55aaa:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   55aac:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   55aae:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   55ab0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   55ab4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   55ab6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   55aba:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   55abe:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   55ac2:	d208      	bcs.n	55ad6 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   55ac4:	4601      	mov	r1, r0
   55ac6:	463a      	mov	r2, r7
   55ac8:	4630      	mov	r0, r6
   55aca:	f7ff ff30 	bl	5592e <split_chunks>
		free_list_add(h, c0);
   55ace:	4641      	mov	r1, r8
   55ad0:	4630      	mov	r0, r6
   55ad2:	f7ff fe8e 	bl	557f2 <free_list_add>
	return c + chunk_size(h, c);
   55ad6:	4639      	mov	r1, r7
   55ad8:	4630      	mov	r0, r6
   55ada:	f7ff fe85 	bl	557e8 <chunk_size>
   55ade:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   55ae0:	4284      	cmp	r4, r0
   55ae2:	d207      	bcs.n	55af4 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   55ae4:	4630      	mov	r0, r6
   55ae6:	4622      	mov	r2, r4
   55ae8:	f7ff ff21 	bl	5592e <split_chunks>
		free_list_add(h, c_end);
   55aec:	4621      	mov	r1, r4
   55aee:	4630      	mov	r0, r6
   55af0:	f7ff fe7f 	bl	557f2 <free_list_add>
	void *cmem = &buf[c];
   55af4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   55af8:	8873      	ldrh	r3, [r6, #2]
   55afa:	f043 0301 	orr.w	r3, r3, #1
   55afe:	8073      	strh	r3, [r6, #2]
   55b00:	e7ac      	b.n	55a5c <sys_heap_aligned_alloc+0x28>

00055b02 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   55b02:	b4f0      	push	{r4, r5, r6, r7}
   55b04:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   55b06:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   55b08:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   55b0a:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   55b0c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   55b10:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   55b14:	1a0e      	subs	r6, r1, r0
   55b16:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   55b18:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   55b1c:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   55b1e:	2700      	movs	r7, #0
   55b20:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   55b22:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   55b26:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   55b28:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   55b2a:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   55b2c:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   55b30:	f1c2 0220 	rsb	r2, r2, #32
   55b34:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   55b36:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   55b3a:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   55b3e:	4294      	cmp	r4, r2
   55b40:	d1fb      	bne.n	55b3a <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   55b42:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   55b44:	f042 0201 	orr.w	r2, r2, #1
   55b48:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   55b4a:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   55b4c:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   55b4e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   55b52:	8007      	strh	r7, [r0, #0]
   55b54:	8065      	strh	r5, [r4, #2]
   55b56:	1984      	adds	r4, r0, r6
   55b58:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   55b5c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   55b60:	8067      	strh	r7, [r4, #2]
   55b62:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   55b64:	885a      	ldrh	r2, [r3, #2]
   55b66:	f042 0201 	orr.w	r2, r2, #1
   55b6a:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   55b6c:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   55b6e:	f7ff be40 	b.w	557f2 <free_list_add>

00055b72 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   55b72:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   55b74:	f013 0307 	ands.w	r3, r3, #7
   55b78:	d105      	bne.n	55b86 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   55b7a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   55b7c:	2b00      	cmp	r3, #0
   55b7e:	bf0c      	ite	eq
   55b80:	2000      	moveq	r0, #0
   55b82:	2003      	movne	r0, #3
   55b84:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   55b86:	2b02      	cmp	r3, #2
   55b88:	d105      	bne.n	55b96 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   55b8a:	8b40      	ldrh	r0, [r0, #26]
   55b8c:	fab0 f080 	clz	r0, r0
   55b90:	0940      	lsrs	r0, r0, #5
   55b92:	0080      	lsls	r0, r0, #2
   55b94:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   55b96:	2b01      	cmp	r3, #1
   55b98:	d105      	bne.n	55ba6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   55b9a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   55b9c:	2b00      	cmp	r3, #0
   55b9e:	bf0c      	ite	eq
   55ba0:	2000      	moveq	r0, #0
   55ba2:	2005      	movne	r0, #5
   55ba4:	4770      	bx	lr
	int evt = EVT_NOP;
   55ba6:	2000      	movs	r0, #0
}
   55ba8:	4770      	bx	lr

00055baa <validate_args>:
{
   55baa:	b510      	push	{r4, lr}
   55bac:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   55bae:	b100      	cbz	r0, 55bb2 <validate_args+0x8>
   55bb0:	b911      	cbnz	r1, 55bb8 <validate_args+0xe>
		return -EINVAL;
   55bb2:	f06f 0015 	mvn.w	r0, #21
}
   55bb6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   55bb8:	1d08      	adds	r0, r1, #4
   55bba:	f000 f896 	bl	55cea <sys_notify_validate>
	if ((rv == 0)
   55bbe:	2800      	cmp	r0, #0
   55bc0:	d1f9      	bne.n	55bb6 <validate_args+0xc>
	    && ((cli->notify.flags
   55bc2:	68a3      	ldr	r3, [r4, #8]
   55bc4:	2b03      	cmp	r3, #3
   55bc6:	d9f6      	bls.n	55bb6 <validate_args+0xc>
   55bc8:	e7f3      	b.n	55bb2 <validate_args+0x8>

00055bca <notify_one>:
{
   55bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   55bce:	460d      	mov	r5, r1
   55bd0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   55bd2:	4619      	mov	r1, r3
   55bd4:	1d28      	adds	r0, r5, #4
{
   55bd6:	4690      	mov	r8, r2
   55bd8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   55bda:	f000 f89a 	bl	55d12 <sys_notify_finalize>
	if (cb) {
   55bde:	4604      	mov	r4, r0
   55be0:	b138      	cbz	r0, 55bf2 <notify_one+0x28>
		cb(mgr, cli, state, res);
   55be2:	4633      	mov	r3, r6
   55be4:	4642      	mov	r2, r8
   55be6:	4629      	mov	r1, r5
   55be8:	4638      	mov	r0, r7
   55bea:	46a4      	mov	ip, r4
}
   55bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   55bf0:	4760      	bx	ip
}
   55bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00055bf6 <transition_complete>:
{
   55bf6:	b410      	push	{r4}
	__asm__ volatile(
   55bf8:	f04f 0420 	mov.w	r4, #32
   55bfc:	f3ef 8211 	mrs	r2, BASEPRI
   55c00:	f384 8812 	msr	BASEPRI_MAX, r4
   55c04:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   55c08:	6141      	str	r1, [r0, #20]
}
   55c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   55c0e:	2101      	movs	r1, #1
   55c10:	f7ef b880 	b.w	44d14 <process_event>

00055c14 <onoff_manager_init>:
{
   55c14:	b538      	push	{r3, r4, r5, lr}
   55c16:	460c      	mov	r4, r1
	if ((mgr == NULL)
   55c18:	4605      	mov	r5, r0
   55c1a:	b158      	cbz	r0, 55c34 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   55c1c:	b151      	cbz	r1, 55c34 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   55c1e:	680b      	ldr	r3, [r1, #0]
   55c20:	b143      	cbz	r3, 55c34 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   55c22:	684b      	ldr	r3, [r1, #4]
   55c24:	b133      	cbz	r3, 55c34 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   55c26:	221c      	movs	r2, #28
   55c28:	2100      	movs	r1, #0
   55c2a:	f005 f995 	bl	5af58 <memset>
	return 0;
   55c2e:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   55c30:	612c      	str	r4, [r5, #16]
}
   55c32:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   55c34:	f06f 0015 	mvn.w	r0, #21
   55c38:	e7fb      	b.n	55c32 <onoff_manager_init+0x1e>

00055c3a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   55c3a:	b570      	push	{r4, r5, r6, lr}
   55c3c:	4605      	mov	r5, r0
   55c3e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   55c40:	f7ff ffb3 	bl	55baa <validate_args>

	if (rv < 0) {
   55c44:	1e04      	subs	r4, r0, #0
   55c46:	db15      	blt.n	55c74 <onoff_request+0x3a>
   55c48:	f04f 0320 	mov.w	r3, #32
   55c4c:	f3ef 8211 	mrs	r2, BASEPRI
   55c50:	f383 8812 	msr	BASEPRI_MAX, r3
   55c54:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   55c58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   55c5c:	8b6b      	ldrh	r3, [r5, #26]
   55c5e:	8b2c      	ldrh	r4, [r5, #24]
   55c60:	428b      	cmp	r3, r1
   55c62:	f004 0407 	and.w	r4, r4, #7
   55c66:	d107      	bne.n	55c78 <onoff_request+0x3e>
	__asm__ volatile(
   55c68:	f382 8811 	msr	BASEPRI, r2
   55c6c:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   55c70:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   55c74:	4620      	mov	r0, r4
   55c76:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   55c78:	2c02      	cmp	r4, #2
   55c7a:	d10c      	bne.n	55c96 <onoff_request+0x5c>
		mgr->refs += 1U;
   55c7c:	3301      	adds	r3, #1
   55c7e:	836b      	strh	r3, [r5, #26]
   55c80:	f382 8811 	msr	BASEPRI, r2
   55c84:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   55c88:	2300      	movs	r3, #0
   55c8a:	4622      	mov	r2, r4
   55c8c:	4631      	mov	r1, r6
   55c8e:	4628      	mov	r0, r5
   55c90:	f7ff ff9b 	bl	55bca <notify_one>
   55c94:	e7ee      	b.n	55c74 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   55c96:	2c06      	cmp	r4, #6
   55c98:	d814      	bhi.n	55cc4 <onoff_request+0x8a>
   55c9a:	e8df f004 	tbb	[pc, r4]
   55c9e:	1304      	.short	0x1304
   55ca0:	1a041313 	.word	0x1a041313
   55ca4:	04          	.byte	0x04
   55ca5:	00          	.byte	0x00
	parent->next = child;
   55ca6:	2300      	movs	r3, #0
   55ca8:	6033      	str	r3, [r6, #0]
	return list->tail;
   55caa:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   55cac:	b93b      	cbnz	r3, 55cbe <onoff_request+0x84>
	list->head = node;
   55cae:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   55cb2:	b9ac      	cbnz	r4, 55ce0 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   55cb4:	2102      	movs	r1, #2
   55cb6:	4628      	mov	r0, r5
   55cb8:	f7ef f82c 	bl	44d14 <process_event>
   55cbc:	e7da      	b.n	55c74 <onoff_request+0x3a>
	parent->next = child;
   55cbe:	601e      	str	r6, [r3, #0]
	list->tail = node;
   55cc0:	606e      	str	r6, [r5, #4]
}
   55cc2:	e7f6      	b.n	55cb2 <onoff_request+0x78>
   55cc4:	f382 8811 	msr	BASEPRI, r2
   55cc8:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   55ccc:	f06f 0404 	mvn.w	r4, #4
   55cd0:	e7d0      	b.n	55c74 <onoff_request+0x3a>
   55cd2:	f382 8811 	msr	BASEPRI, r2
   55cd6:	f3bf 8f6f 	isb	sy
   55cda:	f06f 0485 	mvn.w	r4, #133	; 0x85
   55cde:	e7c9      	b.n	55c74 <onoff_request+0x3a>
   55ce0:	f382 8811 	msr	BASEPRI, r2
   55ce4:	f3bf 8f6f 	isb	sy
		if (notify) {
   55ce8:	e7c4      	b.n	55c74 <onoff_request+0x3a>

00055cea <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   55cea:	4603      	mov	r3, r0
   55cec:	b140      	cbz	r0, 55d00 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   55cee:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   55cf0:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   55cf4:	2a02      	cmp	r2, #2
   55cf6:	d006      	beq.n	55d06 <sys_notify_validate+0x1c>
   55cf8:	2a03      	cmp	r2, #3
   55cfa:	d004      	beq.n	55d06 <sys_notify_validate+0x1c>
   55cfc:	2a01      	cmp	r2, #1
   55cfe:	d005      	beq.n	55d0c <sys_notify_validate+0x22>
   55d00:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   55d04:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   55d06:	681a      	ldr	r2, [r3, #0]
   55d08:	2a00      	cmp	r2, #0
   55d0a:	d0f9      	beq.n	55d00 <sys_notify_validate+0x16>
		notify->result = 0;
   55d0c:	2000      	movs	r0, #0
   55d0e:	6098      	str	r0, [r3, #8]
   55d10:	4770      	bx	lr

00055d12 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   55d12:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   55d14:	6842      	ldr	r2, [r0, #4]
   55d16:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   55d18:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   55d1c:	2a02      	cmp	r2, #2
   55d1e:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   55d22:	6081      	str	r1, [r0, #8]
	switch (method) {
   55d24:	d007      	beq.n	55d36 <sys_notify_finalize+0x24>
   55d26:	2a03      	cmp	r2, #3
   55d28:	d002      	beq.n	55d30 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   55d2a:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   55d2c:	2000      	movs	r0, #0
   55d2e:	e001      	b.n	55d34 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   55d30:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   55d32:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   55d34:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   55d36:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   55d38:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   55d3a:	2800      	cmp	r0, #0
   55d3c:	d0f6      	beq.n	55d2c <sys_notify_finalize+0x1a>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   55d3e:	f7fd fad3 	bl	532e8 <z_impl_k_poll_signal_raise>
   55d42:	e7f3      	b.n	55d2c <sys_notify_finalize+0x1a>

00055d44 <_ldiv5>:
	uint32_t v_lo = *v;
   55d44:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   55d48:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   55d4a:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   55d4e:	fba2 2403 	umull	r2, r4, r2, r3
   55d52:	18d5      	adds	r5, r2, r3
   55d54:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   55d58:	fba1 1303 	umull	r1, r3, r1, r3
   55d5c:	1852      	adds	r2, r2, r1
   55d5e:	eb44 0403 	adc.w	r4, r4, r3
   55d62:	1952      	adds	r2, r2, r5
   55d64:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   55d68:	1889      	adds	r1, r1, r2
   55d6a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   55d6e:	e9c0 1300 	strd	r1, r3, [r0]
}
   55d72:	bd30      	pop	{r4, r5, pc}

00055d74 <_get_digit>:
{
   55d74:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   55d76:	680a      	ldr	r2, [r1, #0]
{
   55d78:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   55d7a:	2a00      	cmp	r2, #0
   55d7c:	dd0f      	ble.n	55d9e <_get_digit+0x2a>
		--*digit_count;
   55d7e:	3a01      	subs	r2, #1
   55d80:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   55d82:	6844      	ldr	r4, [r0, #4]
   55d84:	200a      	movs	r0, #10
   55d86:	681a      	ldr	r2, [r3, #0]
   55d88:	fba2 1200 	umull	r1, r2, r2, r0
   55d8c:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   55d90:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   55d92:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   55d96:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   55d9a:	3030      	adds	r0, #48	; 0x30
}
   55d9c:	bd10      	pop	{r4, pc}
		rval = '0';
   55d9e:	2030      	movs	r0, #48	; 0x30
   55da0:	e7fc      	b.n	55d9c <_get_digit+0x28>

00055da2 <outs>:
{
   55da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   55da6:	4607      	mov	r7, r0
   55da8:	4688      	mov	r8, r1
   55daa:	4615      	mov	r5, r2
   55dac:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   55dae:	4614      	mov	r4, r2
   55db0:	42b4      	cmp	r4, r6
   55db2:	d305      	bcc.n	55dc0 <outs+0x1e>
   55db4:	b10e      	cbz	r6, 55dba <outs+0x18>
	return (int)count;
   55db6:	1b60      	subs	r0, r4, r5
   55db8:	e008      	b.n	55dcc <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   55dba:	7823      	ldrb	r3, [r4, #0]
   55dbc:	2b00      	cmp	r3, #0
   55dbe:	d0fa      	beq.n	55db6 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   55dc0:	4641      	mov	r1, r8
   55dc2:	f814 0b01 	ldrb.w	r0, [r4], #1
   55dc6:	47b8      	blx	r7
		if (rc < 0) {
   55dc8:	2800      	cmp	r0, #0
   55dca:	daf1      	bge.n	55db0 <outs+0xe>
}
   55dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00055dd0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   55dd0:	4770      	bx	lr

00055dd2 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   55dd2:	2806      	cmp	r0, #6
   55dd4:	d108      	bne.n	55de8 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   55dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   55dda:	2201      	movs	r2, #1
   55ddc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   55de0:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   55de4:	bf20      	wfe
    while (true)
   55de6:	e7fd      	b.n	55de4 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   55de8:	4770      	bx	lr

00055dea <pm_state_exit_post_ops>:
   55dea:	2300      	movs	r3, #0
   55dec:	f383 8811 	msr	BASEPRI, r3
   55df0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   55df4:	4770      	bx	lr

00055df6 <dummy_timestamp>:
}
   55df6:	2000      	movs	r0, #0
   55df8:	4770      	bx	lr

00055dfa <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   55dfa:	f001 ba67 	b.w	572cc <sys_clock_cycle_get_32>

00055dfe <atomic_inc>:
{
   55dfe:	4603      	mov	r3, r0
}
   55e00:	e8d3 0fef 	ldaex	r0, [r3]
   55e04:	1c42      	adds	r2, r0, #1
   55e06:	e8c3 2fe1 	stlex	r1, r2, [r3]
   55e0a:	2900      	cmp	r1, #0
   55e0c:	d1f8      	bne.n	55e00 <atomic_inc+0x2>
   55e0e:	4770      	bx	lr

00055e10 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   55e10:	2100      	movs	r1, #0
{
   55e12:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   55e14:	4608      	mov	r0, r1
   55e16:	f7ef f90d 	bl	45034 <z_log_init.isra.0>
	}

	return 0;
}
   55e1a:	2000      	movs	r0, #0
   55e1c:	bd08      	pop	{r3, pc}

00055e1e <z_log_notify_backend_enabled>:
}
   55e1e:	4770      	bx	lr

00055e20 <z_log_get_tag>:
}
   55e20:	2000      	movs	r0, #0
   55e22:	4770      	bx	lr

00055e24 <z_log_msg_finalize>:
{
   55e24:	b570      	push	{r4, r5, r6, lr}
   55e26:	460e      	mov	r6, r1
   55e28:	4615      	mov	r5, r2
   55e2a:	4619      	mov	r1, r3
	if (!msg) {
   55e2c:	4604      	mov	r4, r0
   55e2e:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   55e32:	b918      	cbnz	r0, 55e3c <z_log_msg_finalize+0x18>
}
   55e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   55e38:	f7ef b9a8 	b.w	4518c <z_log_dropped>
	if (data) {
   55e3c:	b12b      	cbz	r3, 55e4a <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   55e3e:	3010      	adds	r0, #16
   55e40:	f3c5 2349 	ubfx	r3, r5, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   55e44:	4418      	add	r0, r3
   55e46:	f005 f84d 	bl	5aee4 <memcpy>
	msg->hdr.source = source;
   55e4a:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   55e4e:	4620      	mov	r0, r4
}
   55e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   55e54:	f7ef b9ae 	b.w	451b4 <z_log_msg_commit>

00055e58 <out_func>:
{
   55e58:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   55e5a:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   55e5e:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   55e62:	2101      	movs	r1, #1
   55e64:	6852      	ldr	r2, [r2, #4]
   55e66:	f10d 0007 	add.w	r0, sp, #7
   55e6a:	4798      	blx	r3
}
   55e6c:	2000      	movs	r0, #0
   55e6e:	b003      	add	sp, #12
   55e70:	f85d fb04 	ldr.w	pc, [sp], #4

00055e74 <cr_out_func>:
	if (c == '\n') {
   55e74:	280a      	cmp	r0, #10
{
   55e76:	b538      	push	{r3, r4, r5, lr}
   55e78:	4604      	mov	r4, r0
   55e7a:	460d      	mov	r5, r1
	if (c == '\n') {
   55e7c:	d102      	bne.n	55e84 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   55e7e:	200d      	movs	r0, #13
   55e80:	f7ff ffea 	bl	55e58 <out_func>
	out_func(c, ctx);
   55e84:	4629      	mov	r1, r5
   55e86:	4620      	mov	r0, r4
   55e88:	f7ff ffe6 	bl	55e58 <out_func>
}
   55e8c:	2000      	movs	r0, #0
   55e8e:	bd38      	pop	{r3, r4, r5, pc}

00055e90 <buffer_write>:
{
   55e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   55e92:	4606      	mov	r6, r0
   55e94:	460d      	mov	r5, r1
   55e96:	4614      	mov	r4, r2
   55e98:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   55e9a:	4621      	mov	r1, r4
   55e9c:	4628      	mov	r0, r5
   55e9e:	463a      	mov	r2, r7
   55ea0:	47b0      	blx	r6
	} while (len != 0);
   55ea2:	1a24      	subs	r4, r4, r0
		buf += processed;
   55ea4:	4405      	add	r5, r0
	} while (len != 0);
   55ea6:	d1f8      	bne.n	55e9a <buffer_write+0xa>
}
   55ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00055eaa <cbvprintf>:
{
   55eaa:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   55eac:	2400      	movs	r4, #0
   55eae:	9400      	str	r4, [sp, #0]
   55eb0:	f7ea ffaa 	bl	40e08 <z_cbvprintf_impl>
}
   55eb4:	b002      	add	sp, #8
   55eb6:	bd10      	pop	{r4, pc}

00055eb8 <log_output_flush>:
{
   55eb8:	b510      	push	{r4, lr}
		     output->control_block->offset,
   55eba:	6842      	ldr	r2, [r0, #4]
{
   55ebc:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   55ebe:	e9d2 2300 	ldrd	r2, r3, [r2]
   55ec2:	6881      	ldr	r1, [r0, #8]
   55ec4:	6800      	ldr	r0, [r0, #0]
   55ec6:	f7ff ffe3 	bl	55e90 <buffer_write>
	output->control_block->offset = 0;
   55eca:	2200      	movs	r2, #0
   55ecc:	6863      	ldr	r3, [r4, #4]
   55ece:	601a      	str	r2, [r3, #0]
}
   55ed0:	bd10      	pop	{r4, pc}

00055ed2 <log_backend_uart_init>:
}
   55ed2:	4770      	bx	lr

00055ed4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   55ed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   55ed6:	ab0b      	add	r3, sp, #44	; 0x2c
   55ed8:	9305      	str	r3, [sp, #20]
   55eda:	9303      	str	r3, [sp, #12]
   55edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   55ede:	2201      	movs	r2, #1
   55ee0:	9302      	str	r3, [sp, #8]
   55ee2:	2300      	movs	r3, #0
   55ee4:	4618      	mov	r0, r3
   55ee6:	e9cd 3300 	strd	r3, r3, [sp]
   55eea:	f7ef f9a1 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   55eee:	b007      	add	sp, #28
   55ef0:	f85d fb04 	ldr.w	pc, [sp], #4

00055ef4 <disk_access_init>:
{
   55ef4:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   55ef6:	f7ef fbe7 	bl	456c8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   55efa:	b130      	cbz	r0, 55f0a <disk_access_init+0x16>
   55efc:	68c3      	ldr	r3, [r0, #12]
   55efe:	b123      	cbz	r3, 55f0a <disk_access_init+0x16>
				(disk->ops->init != NULL)) {
   55f00:	681b      	ldr	r3, [r3, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
   55f02:	b113      	cbz	r3, 55f0a <disk_access_init+0x16>
}
   55f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->init(disk);
   55f08:	4718      	bx	r3
}
   55f0a:	f06f 0015 	mvn.w	r0, #21
   55f0e:	bd10      	pop	{r4, pc}

00055f10 <disk_access_status>:
{
   55f10:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   55f12:	f7ef fbd9 	bl	456c8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   55f16:	b130      	cbz	r0, 55f26 <disk_access_status+0x16>
   55f18:	68c3      	ldr	r3, [r0, #12]
   55f1a:	b123      	cbz	r3, 55f26 <disk_access_status+0x16>
				(disk->ops->status != NULL)) {
   55f1c:	685b      	ldr	r3, [r3, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
   55f1e:	b113      	cbz	r3, 55f26 <disk_access_status+0x16>
}
   55f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->status(disk);
   55f24:	4718      	bx	r3
}
   55f26:	f06f 0015 	mvn.w	r0, #21
   55f2a:	bd10      	pop	{r4, pc}

00055f2c <disk_access_read>:
{
   55f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   55f30:	460d      	mov	r5, r1
   55f32:	4616      	mov	r6, r2
   55f34:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   55f36:	f7ef fbc7 	bl	456c8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   55f3a:	b150      	cbz	r0, 55f52 <disk_access_read+0x26>
   55f3c:	68c3      	ldr	r3, [r0, #12]
   55f3e:	b143      	cbz	r3, 55f52 <disk_access_read+0x26>
				(disk->ops->read != NULL)) {
   55f40:	689c      	ldr	r4, [r3, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
   55f42:	b134      	cbz	r4, 55f52 <disk_access_read+0x26>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
   55f44:	463b      	mov	r3, r7
   55f46:	4632      	mov	r2, r6
   55f48:	4629      	mov	r1, r5
   55f4a:	46a4      	mov	ip, r4
}
   55f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
   55f50:	4760      	bx	ip
}
   55f52:	f06f 0015 	mvn.w	r0, #21
   55f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00055f5a <disk_access_write>:
{
   55f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   55f5e:	460d      	mov	r5, r1
   55f60:	4616      	mov	r6, r2
   55f62:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   55f64:	f7ef fbb0 	bl	456c8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   55f68:	b150      	cbz	r0, 55f80 <disk_access_write+0x26>
   55f6a:	68c3      	ldr	r3, [r0, #12]
   55f6c:	b143      	cbz	r3, 55f80 <disk_access_write+0x26>
				(disk->ops->write != NULL)) {
   55f6e:	68dc      	ldr	r4, [r3, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
   55f70:	b134      	cbz	r4, 55f80 <disk_access_write+0x26>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
   55f72:	463b      	mov	r3, r7
   55f74:	4632      	mov	r2, r6
   55f76:	4629      	mov	r1, r5
   55f78:	46a4      	mov	ip, r4
}
   55f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
   55f7e:	4760      	bx	ip
}
   55f80:	f06f 0015 	mvn.w	r0, #21
   55f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00055f88 <disk_access_ioctl>:
{
   55f88:	b570      	push	{r4, r5, r6, lr}
   55f8a:	460c      	mov	r4, r1
   55f8c:	4615      	mov	r5, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
   55f8e:	f7ef fb9b 	bl	456c8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   55f92:	b140      	cbz	r0, 55fa6 <disk_access_ioctl+0x1e>
   55f94:	68c3      	ldr	r3, [r0, #12]
   55f96:	b133      	cbz	r3, 55fa6 <disk_access_ioctl+0x1e>
				(disk->ops->ioctl != NULL)) {
   55f98:	691b      	ldr	r3, [r3, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
   55f9a:	b123      	cbz	r3, 55fa6 <disk_access_ioctl+0x1e>
		rc = disk->ops->ioctl(disk, cmd, buf);
   55f9c:	462a      	mov	r2, r5
   55f9e:	4621      	mov	r1, r4
}
   55fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc = disk->ops->ioctl(disk, cmd, buf);
   55fa4:	4718      	bx	r3
}
   55fa6:	f06f 0015 	mvn.w	r0, #21
   55faa:	bd70      	pop	{r4, r5, r6, pc}

00055fac <pm_policy_state_lock_get>:
		   (substate_lock_t[i].substate_id == substate_id ||
		    substate_id == PM_ALL_SUBSTATES)) {
			atomic_inc(&substate_lock_t[i].lock);
		}
	}
}
   55fac:	4770      	bx	lr

00055fae <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
   55fae:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   55fb0:	b11b      	cbz	r3, 55fba <pm_device_state_get+0xc>
		return -ENOSYS;
	}

	*state = pm->state;
   55fb2:	7a1b      	ldrb	r3, [r3, #8]

	return 0;
   55fb4:	2000      	movs	r0, #0
	*state = pm->state;
   55fb6:	700b      	strb	r3, [r1, #0]
	return 0;
   55fb8:	4770      	bx	lr
		return -ENOSYS;
   55fba:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   55fbe:	4770      	bx	lr

00055fc0 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   55fc0:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   55fc2:	b120      	cbz	r0, 55fce <pm_device_is_busy+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   55fc4:	3004      	adds	r0, #4
   55fc6:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   55fca:	f000 0001 	and.w	r0, r0, #1
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
}
   55fce:	4770      	bx	lr

00055fd0 <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   55fd0:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   55fd2:	b120      	cbz	r0, 55fde <pm_device_wakeup_is_enabled+0xe>
   55fd4:	3004      	adds	r0, #4
   55fd6:	e8d0 0faf 	lda	r0, [r0]
   55fda:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_WS_ENABLED);
}
   55fde:	4770      	bx	lr

00055fe0 <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   55fe0:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   55fe2:	b120      	cbz	r0, 55fee <pm_device_state_is_locked+0xe>
   55fe4:	3004      	adds	r0, #4
   55fe6:	e8d0 0faf 	lda	r0, [r0]
   55fea:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
   55fee:	4770      	bx	lr

00055ff0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   55ff0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   55ff2:	ab0b      	add	r3, sp, #44	; 0x2c
   55ff4:	9305      	str	r3, [sp, #20]
   55ff6:	9303      	str	r3, [sp, #12]
   55ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   55ffa:	2201      	movs	r2, #1
   55ffc:	9302      	str	r3, [sp, #8]
   55ffe:	2300      	movs	r3, #0
   56000:	4618      	mov	r0, r3
   56002:	e9cd 3300 	strd	r3, r3, [sp]
   56006:	f7ef f913 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   5600a:	b007      	add	sp, #28
   5600c:	f85d fb04 	ldr.w	pc, [sp], #4

00056010 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   56010:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   56012:	6800      	ldr	r0, [r0, #0]
   56014:	f7ef be4c 	b.w	45cb0 <z_arm_fatal_error>

00056018 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   56018:	2100      	movs	r1, #0
   5601a:	2001      	movs	r0, #1
   5601c:	f7ef be48 	b.w	45cb0 <z_arm_fatal_error>

00056020 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   56020:	b508      	push	{r3, lr}
	handler();
   56022:	f7ef ff1f 	bl	45e64 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   56026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   5602a:	f7f0 b823 	b.w	46074 <z_arm_exc_exit>

0005602e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   5602e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   56030:	f383 880b 	msr	PSPLIM, r3
}
   56034:	4770      	bx	lr

00056036 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   56036:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   56038:	ab0b      	add	r3, sp, #44	; 0x2c
   5603a:	9305      	str	r3, [sp, #20]
   5603c:	9303      	str	r3, [sp, #12]
   5603e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   56040:	2201      	movs	r2, #1
   56042:	9302      	str	r3, [sp, #8]
   56044:	2300      	movs	r3, #0
   56046:	4618      	mov	r0, r3
   56048:	e9cd 3300 	strd	r3, r3, [sp]
   5604c:	f7ef f8f0 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   56050:	b007      	add	sp, #28
   56052:	f85d fb04 	ldr.w	pc, [sp], #4

00056056 <z_arm_save_fp_context>:
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   56056:	f3ef 8314 	mrs	r3, CONTROL
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   5605a:	075a      	lsls	r2, r3, #29
   5605c:	d512      	bpl.n	56084 <z_arm_save_fp_context+0x2e>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   5605e:	f100 0240 	add.w	r2, r0, #64	; 0x40
   56062:	ec80 0a10 	vstmia	r0, {s0-s15}
   56066:	ec82 8a10 	vstmia	r2, {s16-s31}
  return __builtin_arm_get_fpscr();
   5606a:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   5606e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		buffer->ctx_saved = true;
   56072:	2201      	movs	r2, #1

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   56074:	f023 0304 	bic.w	r3, r3, #4
		buffer->ctx_saved = true;
   56078:	f880 2084 	strb.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   5607c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   56080:	f3bf 8f6f 	isb	sy
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   56084:	4770      	bx	lr

00056086 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   56086:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   5608a:	b18b      	cbz	r3, 560b0 <z_arm_restore_fp_context+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   5608c:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   56090:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   56094:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   56098:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
   5609c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   560a0:	eee1 3a10 	vmsr	fpscr, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);

		__asm__ volatile(
   560a4:	f100 0340 	add.w	r3, r0, #64	; 0x40
   560a8:	ec90 0a10 	vldmia	r0, {s0-s15}
   560ac:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   560b0:	4770      	bx	lr

000560b2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   560b2:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   560b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   560ba:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   560bc:	bf08      	it	eq
   560be:	f06f 0015 	mvneq.w	r0, #21
   560c2:	4770      	bx	lr

000560c4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   560c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   560c6:	ab0b      	add	r3, sp, #44	; 0x2c
   560c8:	9305      	str	r3, [sp, #20]
   560ca:	9303      	str	r3, [sp, #12]
   560cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   560ce:	2201      	movs	r2, #1
   560d0:	9302      	str	r3, [sp, #8]
   560d2:	2300      	movs	r3, #0
   560d4:	4618      	mov	r0, r3
   560d6:	e9cd 3300 	strd	r3, r3, [sp]
   560da:	f7ef f8a9 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   560de:	b007      	add	sp, #28
   560e0:	f85d fb04 	ldr.w	pc, [sp], #4

000560e4 <mpu_configure_region>:
{
   560e4:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   560e6:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   560e8:	684b      	ldr	r3, [r1, #4]
{
   560ea:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   560ec:	890a      	ldrh	r2, [r1, #8]
   560ee:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   560f0:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   560f2:	3b01      	subs	r3, #1
   560f4:	f024 041f 	bic.w	r4, r4, #31
   560f8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   560fa:	f002 021f 	and.w	r2, r2, #31
   560fe:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   56102:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   56106:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   56108:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   5610c:	9303      	str	r3, [sp, #12]
   5610e:	f7f0 fb59 	bl	467c4 <region_allocate_and_init>
}
   56112:	b005      	add	sp, #20
   56114:	bd30      	pop	{r4, r5, pc}

00056116 <malloc_prepare>:
}
   56116:	2000      	movs	r0, #0
   56118:	4770      	bx	lr

0005611a <_stdout_hook_default>:
}
   5611a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5611e:	4770      	bx	lr

00056120 <_stdin_hook_default>:
}
   56120:	2000      	movs	r0, #0
   56122:	4770      	bx	lr

00056124 <_read>:
{
   56124:	4608      	mov	r0, r1
   56126:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   56128:	f7f0 bcc8 	b.w	46abc <z_impl_zephyr_read_stdin>

0005612c <_write>:
{
   5612c:	4608      	mov	r0, r1
   5612e:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   56130:	f7f0 bcd8 	b.w	46ae4 <z_impl_zephyr_write_stdout>

00056134 <_close>:
int _close(int file)
   56134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   56138:	4770      	bx	lr

0005613a <_lseek>:
}
   5613a:	2000      	movs	r0, #0
   5613c:	4770      	bx	lr

0005613e <_isatty>:
}
   5613e:	2802      	cmp	r0, #2
   56140:	bfcc      	ite	gt
   56142:	2000      	movgt	r0, #0
   56144:	2001      	movle	r0, #1
   56146:	4770      	bx	lr

00056148 <_kill>:
}
   56148:	2000      	movs	r0, #0
   5614a:	4770      	bx	lr

0005614c <_getpid>:
}
   5614c:	2000      	movs	r0, #0
   5614e:	4770      	bx	lr

00056150 <_fstat>:
	st->st_mode = S_IFCHR;
   56150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   56154:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   56156:	604b      	str	r3, [r1, #4]
}
   56158:	4770      	bx	lr

0005615a <__retarget_lock_init_recursive>:
{
   5615a:	b510      	push	{r4, lr}
   5615c:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   5615e:	2014      	movs	r0, #20
   56160:	f7fd f94c 	bl	533fc <malloc>
   56164:	6020      	str	r0, [r4, #0]
}
   56166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   5616a:	f004 bba1 	b.w	5a8b0 <z_impl_k_mutex_init>

0005616e <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   5616e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   56172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   56176:	f7fc b9cd 	b.w	52514 <z_impl_k_mutex_lock>

0005617a <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   5617a:	f7fc ba45 	b.w	52608 <z_impl_k_mutex_unlock>

0005617e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   5617e:	f7fb bf4b 	b.w	52018 <z_impl_z_errno>

00056182 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   56182:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   56184:	ab0b      	add	r3, sp, #44	; 0x2c
   56186:	9305      	str	r3, [sp, #20]
   56188:	9303      	str	r3, [sp, #12]
   5618a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   5618c:	9302      	str	r3, [sp, #8]
   5618e:	2300      	movs	r3, #0
   56190:	4618      	mov	r0, r3
   56192:	e9cd 3300 	strd	r3, r3, [sp]
   56196:	f7ef f84b 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   5619a:	b007      	add	sp, #28
   5619c:	f85d fb04 	ldr.w	pc, [sp], #4

000561a0 <fatfs_tell>:
	return f_tell((FIL *)zfp->filep);
   561a0:	6803      	ldr	r3, [r0, #0]
}
   561a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
   561a4:	4770      	bx	lr

000561a6 <fatfs_mkdir>:
{
   561a6:	b508      	push	{r3, lr}
	res = f_mkdir(&path[1]);
   561a8:	1c48      	adds	r0, r1, #1
   561aa:	f003 fa02 	bl	595b2 <f_mkdir>
}
   561ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
   561b2:	f7f1 b803 	b.w	471bc <translate_error>

000561b6 <fatfs_unlink>:
{
   561b6:	b508      	push	{r3, lr}
	res = f_unlink(&path[1]);
   561b8:	1c48      	adds	r0, r1, #1
   561ba:	f003 f99f 	bl	594fc <f_unlink>
}
   561be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
   561c2:	f7f0 bffb 	b.w	471bc <translate_error>

000561c6 <fatfs_rename>:
{
   561c6:	b530      	push	{r4, r5, lr}
	res = f_stat(&to[1], &fno);
   561c8:	1c54      	adds	r4, r2, #1
{
   561ca:	b0c9      	sub	sp, #292	; 0x124
   561cc:	460d      	mov	r5, r1
	res = f_stat(&to[1], &fno);
   561ce:	4620      	mov	r0, r4
   561d0:	4669      	mov	r1, sp
   561d2:	f003 f877 	bl	592c4 <f_stat>
	if (FR_OK == res) {
   561d6:	b940      	cbnz	r0, 561ea <fatfs_rename+0x24>
		res = f_unlink(&to[1]);
   561d8:	4620      	mov	r0, r4
   561da:	f003 f98f 	bl	594fc <f_unlink>
		if (FR_OK != res)
   561de:	b120      	cbz	r0, 561ea <fatfs_rename+0x24>
}
   561e0:	b049      	add	sp, #292	; 0x124
   561e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	res = translate_error(res);
   561e6:	f7f0 bfe9 	b.w	471bc <translate_error>
	res = f_rename(&from[1], &to[1]);
   561ea:	4621      	mov	r1, r4
   561ec:	1c68      	adds	r0, r5, #1
   561ee:	f003 fa96 	bl	5971e <f_rename>
   561f2:	e7f5      	b.n	561e0 <fatfs_rename+0x1a>

000561f4 <fatfs_unmount>:
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
   561f4:	2200      	movs	r2, #0
{
   561f6:	b508      	push	{r3, lr}
	res = f_mount(NULL, &mountp->mnt_point[1], 0);
   561f8:	68c1      	ldr	r1, [r0, #12]
   561fa:	4610      	mov	r0, r2
   561fc:	3101      	adds	r1, #1
   561fe:	f7f8 f905 	bl	4e40c <f_mount>
}
   56202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return translate_error(res);
   56206:	f7f0 bfd9 	b.w	471bc <translate_error>

0005620a <fatfs_sync>:
{
   5620a:	b508      	push	{r3, lr}
	res = f_sync(zfp->filep);
   5620c:	6800      	ldr	r0, [r0, #0]
   5620e:	f002 fe57 	bl	58ec0 <f_sync>
}
   56212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = translate_error(res);
   56216:	f7f0 bfd1 	b.w	471bc <translate_error>

0005621a <fatfs_seek>:
	switch (whence) {
   5621a:	2a01      	cmp	r2, #1
{
   5621c:	b510      	push	{r4, lr}
	switch (whence) {
   5621e:	d012      	beq.n	56246 <fatfs_seek+0x2c>
   56220:	2a02      	cmp	r2, #2
   56222:	d014      	beq.n	5624e <fatfs_seek+0x34>
   56224:	b9b2      	cbnz	r2, 56254 <fatfs_seek+0x3a>
	if ((pos < 0) || (pos > f_size((FIL *)zfp->filep))) {
   56226:	2900      	cmp	r1, #0
   56228:	db14      	blt.n	56254 <fatfs_seek+0x3a>
   5622a:	6800      	ldr	r0, [r0, #0]
   5622c:	17cb      	asrs	r3, r1, #31
   5622e:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
   56232:	428c      	cmp	r4, r1
   56234:	419a      	sbcs	r2, r3
   56236:	d30d      	bcc.n	56254 <fatfs_seek+0x3a>
	res = f_lseek(zfp->filep, pos);
   56238:	460a      	mov	r2, r1
   5623a:	f002 fee6 	bl	5900a <f_lseek>
}
   5623e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return translate_error(res);
   56242:	f7f0 bfbb 	b.w	471bc <translate_error>
		pos = f_tell((FIL *)zfp->filep) + offset;
   56246:	6803      	ldr	r3, [r0, #0]
   56248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		pos = f_size((FIL *)zfp->filep) + offset;
   5624a:	4419      	add	r1, r3
		break;
   5624c:	e7eb      	b.n	56226 <fatfs_seek+0xc>
		pos = f_size((FIL *)zfp->filep) + offset;
   5624e:	6803      	ldr	r3, [r0, #0]
   56250:	691b      	ldr	r3, [r3, #16]
   56252:	e7fa      	b.n	5624a <fatfs_seek+0x30>
}
   56254:	f06f 0015 	mvn.w	r0, #21
   56258:	bd10      	pop	{r4, pc}

0005625a <fatfs_truncate>:
{
   5625a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   5625c:	4604      	mov	r4, r0
	off_t cur_length = f_size((FIL *)zfp->filep);
   5625e:	6800      	ldr	r0, [r0, #0]
	res = f_lseek(zfp->filep, length);
   56260:	460a      	mov	r2, r1
   56262:	17cb      	asrs	r3, r1, #31
{
   56264:	460d      	mov	r5, r1
	off_t cur_length = f_size((FIL *)zfp->filep);
   56266:	6907      	ldr	r7, [r0, #16]
	res = f_lseek(zfp->filep, length);
   56268:	f002 fecf 	bl	5900a <f_lseek>
	if (res != FR_OK) {
   5626c:	b120      	cbz	r0, 56278 <fatfs_truncate+0x1e>
}
   5626e:	b003      	add	sp, #12
   56270:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	res = translate_error(res);
   56274:	f7f0 bfa2 	b.w	471bc <translate_error>
	if (length < cur_length) {
   56278:	42af      	cmp	r7, r5
	off_t cur_length = f_size((FIL *)zfp->filep);
   5627a:	463e      	mov	r6, r7
		res = f_truncate(zfp->filep);
   5627c:	6820      	ldr	r0, [r4, #0]
	if (length < cur_length) {
   5627e:	dd02      	ble.n	56286 <fatfs_truncate+0x2c>
		res = f_truncate(zfp->filep);
   56280:	f003 f8d4 	bl	5942c <f_truncate>
   56284:	e7f3      	b.n	5626e <fatfs_truncate+0x14>
		res = f_lseek(zfp->filep, cur_length);
   56286:	463a      	mov	r2, r7
   56288:	17fb      	asrs	r3, r7, #31
		length = f_tell((FIL *)zfp->filep);
   5628a:	6b85      	ldr	r5, [r0, #56]	; 0x38
		res = f_lseek(zfp->filep, cur_length);
   5628c:	f002 febd 	bl	5900a <f_lseek>
		if (res != FR_OK) {
   56290:	2800      	cmp	r0, #0
   56292:	d1ec      	bne.n	5626e <fatfs_truncate+0x14>
		uint8_t c = 0U;
   56294:	f88d 0003 	strb.w	r0, [sp, #3]
		for (int i = cur_length; i < length; i++) {
   56298:	42ae      	cmp	r6, r5
   5629a:	db01      	blt.n	562a0 <fatfs_truncate+0x46>
   5629c:	2000      	movs	r0, #0
   5629e:	e7e6      	b.n	5626e <fatfs_truncate+0x14>
			res = f_write(zfp->filep, &c, 1, &bw);
   562a0:	2201      	movs	r2, #1
   562a2:	6820      	ldr	r0, [r4, #0]
   562a4:	ab01      	add	r3, sp, #4
   562a6:	f10d 0103 	add.w	r1, sp, #3
   562aa:	f002 fd2e 	bl	58d0a <f_write>
			if (res != FR_OK) {
   562ae:	2800      	cmp	r0, #0
   562b0:	d1dd      	bne.n	5626e <fatfs_truncate+0x14>
		for (int i = cur_length; i < length; i++) {
   562b2:	3601      	adds	r6, #1
   562b4:	e7f0      	b.n	56298 <fatfs_truncate+0x3e>

000562b6 <fatfs_write>:
{
   562b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   562b8:	4604      	mov	r4, r0
	if (zfp->flags & FS_O_APPEND) {
   562ba:	7a23      	ldrb	r3, [r4, #8]
	off_t pos = f_size((FIL *)zfp->filep);
   562bc:	6800      	ldr	r0, [r0, #0]
	if (zfp->flags & FS_O_APPEND) {
   562be:	069b      	lsls	r3, r3, #26
{
   562c0:	4616      	mov	r6, r2
   562c2:	460d      	mov	r5, r1
	off_t pos = f_size((FIL *)zfp->filep);
   562c4:	6902      	ldr	r2, [r0, #16]
	if (zfp->flags & FS_O_APPEND) {
   562c6:	d409      	bmi.n	562dc <fatfs_write+0x26>
		res = f_write(zfp->filep, ptr, size, &bw);
   562c8:	4632      	mov	r2, r6
   562ca:	4629      	mov	r1, r5
   562cc:	6820      	ldr	r0, [r4, #0]
   562ce:	ab01      	add	r3, sp, #4
   562d0:	f002 fd1b 	bl	58d0a <f_write>
	if (res != FR_OK) {
   562d4:	b938      	cbnz	r0, 562e6 <fatfs_write+0x30>
}
   562d6:	9801      	ldr	r0, [sp, #4]
   562d8:	b002      	add	sp, #8
   562da:	bd70      	pop	{r4, r5, r6, pc}
		res = f_lseek(zfp->filep, pos);
   562dc:	17d3      	asrs	r3, r2, #31
   562de:	f002 fe94 	bl	5900a <f_lseek>
	if (res == FR_OK) {
   562e2:	2800      	cmp	r0, #0
   562e4:	d0f0      	beq.n	562c8 <fatfs_write+0x12>
}
   562e6:	b002      	add	sp, #8
   562e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = translate_error(res);
   562ec:	f7f0 bf66 	b.w	471bc <translate_error>

000562f0 <fatfs_read>:
{
   562f0:	b507      	push	{r0, r1, r2, lr}
	res = f_read(zfp->filep, ptr, size, &br);
   562f2:	6800      	ldr	r0, [r0, #0]
   562f4:	ab01      	add	r3, sp, #4
   562f6:	f002 fc5d 	bl	58bb4 <f_read>
	if (res != FR_OK) {
   562fa:	b120      	cbz	r0, 56306 <fatfs_read+0x16>
}
   562fc:	b003      	add	sp, #12
   562fe:	f85d eb04 	ldr.w	lr, [sp], #4
		return translate_error(res);
   56302:	f7f0 bf5b 	b.w	471bc <translate_error>
}
   56306:	9801      	ldr	r0, [sp, #4]
   56308:	b003      	add	sp, #12
   5630a:	f85d fb04 	ldr.w	pc, [sp], #4

0005630e <fatfs_stat>:
{
   5630e:	4608      	mov	r0, r1
   56310:	b530      	push	{r4, r5, lr}
   56312:	b0c9      	sub	sp, #292	; 0x124
	res = f_stat(&path[1], &fno);
   56314:	4669      	mov	r1, sp
   56316:	3001      	adds	r0, #1
{
   56318:	4615      	mov	r5, r2
	res = f_stat(&path[1], &fno);
   5631a:	f002 ffd3 	bl	592c4 <f_stat>
	if (res == FR_OK) {
   5631e:	4604      	mov	r4, r0
   56320:	b968      	cbnz	r0, 5633e <fatfs_stat+0x30>
		entry->type = ((fno.fattrib & AM_DIR) ?
   56322:	4628      	mov	r0, r5
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   56324:	f89d 300c 	ldrb.w	r3, [sp, #12]
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   56328:	f10d 011a 	add.w	r1, sp, #26
   5632c:	f3c3 1300 	ubfx	r3, r3, #4, #1
		entry->type = ((fno.fattrib & AM_DIR) ?
   56330:	f800 3b01 	strb.w	r3, [r0], #1
   56334:	f004 ffbd 	bl	5b2b2 <strcpy>
		entry->size = fno.fsize;
   56338:	9b00      	ldr	r3, [sp, #0]
   5633a:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
	return translate_error(res);
   5633e:	4620      	mov	r0, r4
}
   56340:	b049      	add	sp, #292	; 0x124
   56342:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
   56346:	f7f0 bf39 	b.w	471bc <translate_error>

0005634a <fatfs_readdir>:
{
   5634a:	b530      	push	{r4, r5, lr}
   5634c:	b0c9      	sub	sp, #292	; 0x124
   5634e:	460c      	mov	r4, r1
	res = f_readdir(zdp->dirp, &fno);
   56350:	6800      	ldr	r0, [r0, #0]
   56352:	4669      	mov	r1, sp
   56354:	f002 ff94 	bl	59280 <f_readdir>
	if (res == FR_OK) {
   56358:	4605      	mov	r5, r0
   5635a:	b970      	cbnz	r0, 5637a <fatfs_readdir+0x30>
   5635c:	f10d 011a 	add.w	r1, sp, #26
   56360:	1c60      	adds	r0, r4, #1
   56362:	f004 ffa6 	bl	5b2b2 <strcpy>
		if (entry->name[0] != 0) {
   56366:	7863      	ldrb	r3, [r4, #1]
   56368:	b13b      	cbz	r3, 5637a <fatfs_readdir+0x30>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   5636a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   5636e:	f3c3 1300 	ubfx	r3, r3, #4, #1
			entry->type = ((fno.fattrib & AM_DIR) ?
   56372:	7023      	strb	r3, [r4, #0]
			entry->size = fno.fsize;
   56374:	9b00      	ldr	r3, [sp, #0]
   56376:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	return translate_error(res);
   5637a:	4628      	mov	r0, r5
}
   5637c:	b049      	add	sp, #292	; 0x124
   5637e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return translate_error(res);
   56382:	f7f0 bf1b 	b.w	471bc <translate_error>

00056386 <fatfs_statvfs>:
	DWORD f_bfree = 0;
   56386:	2300      	movs	r3, #0
{
   56388:	b513      	push	{r0, r1, r4, lr}
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
   5638a:	68c0      	ldr	r0, [r0, #12]
{
   5638c:	4614      	mov	r4, r2
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
   5638e:	a901      	add	r1, sp, #4
   56390:	466a      	mov	r2, sp
   56392:	3001      	adds	r0, #1
	DWORD f_bfree = 0;
   56394:	9301      	str	r3, [sp, #4]
	res = f_getfree(&mountp->mnt_point[1], &f_bfree, &fs);
   56396:	f002 ffb4 	bl	59302 <f_getfree>
	if (res != FR_OK) {
   5639a:	b968      	cbnz	r0, 563b8 <fatfs_statvfs+0x32>
	stat->f_bfree = f_bfree;
   5639c:	9b01      	ldr	r3, [sp, #4]
	stat->f_frsize = fs->csize * stat->f_bsize;
   5639e:	9a00      	ldr	r2, [sp, #0]
	stat->f_bfree = f_bfree;
   563a0:	60e3      	str	r3, [r4, #12]
	stat->f_bsize = FF_MIN_SS;
   563a2:	f44f 7300 	mov.w	r3, #512	; 0x200
   563a6:	6023      	str	r3, [r4, #0]
	stat->f_frsize = fs->csize * stat->f_bsize;
   563a8:	8953      	ldrh	r3, [r2, #10]
   563aa:	025b      	lsls	r3, r3, #9
   563ac:	6063      	str	r3, [r4, #4]
	stat->f_blocks = (fs->n_fatent - 2);
   563ae:	69d3      	ldr	r3, [r2, #28]
   563b0:	3b02      	subs	r3, #2
   563b2:	60a3      	str	r3, [r4, #8]
}
   563b4:	b002      	add	sp, #8
   563b6:	bd10      	pop	{r4, pc}
		return -EIO;
   563b8:	f06f 0004 	mvn.w	r0, #4
   563bc:	e7fa      	b.n	563b4 <fatfs_statvfs+0x2e>

000563be <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   563be:	b508      	push	{r3, lr}
	net_if_init();
   563c0:	f7f0 ffce 	bl	47360 <net_if_init>
	net_if_post_init();
   563c4:	f7f0 fff0 	bl	473a8 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   563c8:	2000      	movs	r0, #0
   563ca:	bd08      	pop	{r3, pc}

000563cc <net_if_l2>:
	if (!iface || !iface->if_dev) {
   563cc:	b110      	cbz	r0, 563d4 <net_if_l2+0x8>
   563ce:	6800      	ldr	r0, [r0, #0]
   563d0:	b100      	cbz	r0, 563d4 <net_if_l2+0x8>
	return iface->if_dev->l2;
   563d2:	6840      	ldr	r0, [r0, #4]
}
   563d4:	4770      	bx	lr

000563d6 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   563d6:	2301      	movs	r3, #1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   563d8:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   563da:	f001 011f 	and.w	r1, r1, #31
   563de:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   563e0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   563e4:	e8d0 2fef 	ldaex	r2, [r0]
   563e8:	431a      	orrs	r2, r3
   563ea:	e8c0 2fe1 	stlex	r1, r2, [r0]
   563ee:	2900      	cmp	r1, #0
   563f0:	d1f8      	bne.n	563e4 <atomic_set_bit+0xe>
}
   563f2:	4770      	bx	lr

000563f4 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   563f4:	2301      	movs	r3, #1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   563f6:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   563f8:	f001 011f 	and.w	r1, r1, #31
   563fc:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   563fe:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   56400:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   56404:	e8d0 2fef 	ldaex	r2, [r0]
   56408:	401a      	ands	r2, r3
   5640a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   5640e:	2900      	cmp	r1, #0
   56410:	d1f8      	bne.n	56404 <atomic_clear_bit+0x10>
}
   56412:	4770      	bx	lr

00056414 <net_if_flag_is_set>:
	if (iface == NULL) {
   56414:	b130      	cbz	r0, 56424 <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   56416:	6803      	ldr	r3, [r0, #0]
   56418:	330c      	adds	r3, #12
   5641a:	e8d3 0faf 	lda	r0, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   5641e:	4108      	asrs	r0, r1
   56420:	f000 0001 	and.w	r0, r0, #1
}
   56424:	4770      	bx	lr

00056426 <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   56426:	b510      	push	{r4, lr}
   56428:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   5642a:	f7ff ffcf 	bl	563cc <net_if_l2>
   5642e:	b128      	cbz	r0, 5643c <l2_flags_get.isra.0+0x16>
   56430:	68c2      	ldr	r2, [r0, #12]
   56432:	b11a      	cbz	r2, 5643c <l2_flags_get.isra.0+0x16>
}
   56434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   56438:	4618      	mov	r0, r3
   5643a:	4710      	bx	r2
}
   5643c:	bd10      	pop	{r4, pc}

0005643e <update_operational_state>:
{
   5643e:	b510      	push	{r4, lr}
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   56440:	6803      	ldr	r3, [r0, #0]
 */
static inline bool net_if_is_admin_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_UP);
   56442:	2100      	movs	r1, #0
{
   56444:	4604      	mov	r4, r0
	enum net_if_oper_state prev_state = iface->if_dev->oper_state;
   56446:	f893 2020 	ldrb.w	r2, [r3, #32]
   5644a:	f7ff ffe3 	bl	56414 <net_if_flag_is_set>
	if (!net_if_is_admin_up(iface)) {
   5644e:	b978      	cbnz	r0, 56470 <update_operational_state+0x32>
		iface->if_dev->oper_state = oper_state;
   56450:	2102      	movs	r1, #2
   56452:	6823      	ldr	r3, [r4, #0]
   56454:	f883 1020 	strb.w	r1, [r3, #32]
	return iface->if_dev->oper_state;
   56458:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   5645a:	f890 3020 	ldrb.w	r3, [r0, #32]
   5645e:	428b      	cmp	r3, r1
   56460:	d12b      	bne.n	564ba <update_operational_state+0x7c>
		if (prev_state == NET_IF_OPER_UP) {
   56462:	2a06      	cmp	r2, #6
   56464:	d129      	bne.n	564ba <update_operational_state+0x7c>
	atomic_clear_bit(iface->if_dev->flags, value);
   56466:	2108      	movs	r1, #8
   56468:	300c      	adds	r0, #12
   5646a:	f7ff ffc3 	bl	563f4 <atomic_clear_bit>
	return (iface->if_dev->socket_offload != NULL);
   5646e:	e01c      	b.n	564aa <update_operational_state+0x6c>
 */
static inline bool net_if_is_carrier_ok(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_LOWER_UP);
   56470:	2109      	movs	r1, #9
   56472:	4620      	mov	r0, r4
   56474:	f7ff ffce 	bl	56414 <net_if_flag_is_set>
	if (!net_if_is_carrier_ok(iface)) {
   56478:	2800      	cmp	r0, #0
   5647a:	d0e9      	beq.n	56450 <update_operational_state+0x12>
 */
static inline bool net_if_is_dormant(struct net_if *iface)
{
	NET_ASSERT(iface);

	return net_if_flag_is_set(iface, NET_IF_DORMANT);
   5647c:	210a      	movs	r1, #10
   5647e:	4620      	mov	r0, r4
   56480:	f7ff ffc8 	bl	56414 <net_if_flag_is_set>
		iface->if_dev->oper_state = oper_state;
   56484:	6821      	ldr	r1, [r4, #0]
   56486:	f1c0 0306 	rsb	r3, r0, #6
   5648a:	b2db      	uxtb	r3, r3
   5648c:	f881 3020 	strb.w	r3, [r1, #32]
	return iface->if_dev->oper_state;
   56490:	6820      	ldr	r0, [r4, #0]
	if (net_if_oper_state_set(iface, new_state) != new_state) {
   56492:	f890 1020 	ldrb.w	r1, [r0, #32]
   56496:	4299      	cmp	r1, r3
   56498:	d10f      	bne.n	564ba <update_operational_state+0x7c>
	if (net_if_oper_state(iface) == NET_IF_OPER_UP) {
   5649a:	2906      	cmp	r1, #6
   5649c:	d1e1      	bne.n	56462 <update_operational_state+0x24>
		if (prev_state != NET_IF_OPER_UP) {
   5649e:	2a06      	cmp	r2, #6
   564a0:	d00b      	beq.n	564ba <update_operational_state+0x7c>
	atomic_set_bit(iface->if_dev->flags, value);
   564a2:	2108      	movs	r1, #8
   564a4:	300c      	adds	r0, #12
   564a6:	f7ff ff96 	bl	563d6 <atomic_set_bit>
	return (iface->if_dev->socket_offload != NULL);
   564aa:	6823      	ldr	r3, [r4, #0]
	if (!is_iface_offloaded(iface) &&
   564ac:	69db      	ldr	r3, [r3, #28]
   564ae:	b923      	cbnz	r3, 564ba <update_operational_state+0x7c>
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   564b0:	4620      	mov	r0, r4
}
   564b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    !(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   564b6:	f7ff bfb6 	b.w	56426 <l2_flags_get.isra.0>
}
   564ba:	bd10      	pop	{r4, pc}

000564bc <net_if_flag_test_and_set.isra.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   564bc:	2301      	movs	r3, #1
static inline bool net_if_flag_test_and_set(struct net_if *iface,
   564be:	b510      	push	{r4, lr}
   564c0:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   564c4:	300c      	adds	r0, #12
   564c6:	e8d0 3fef 	ldaex	r3, [r0]
   564ca:	ea43 0201 	orr.w	r2, r3, r1
   564ce:	e8c0 2fe4 	stlex	r4, r2, [r0]
   564d2:	2c00      	cmp	r4, #0
   564d4:	d1f7      	bne.n	564c6 <net_if_flag_test_and_set.isra.0+0xa>
	return (old & mask) != 0;
   564d6:	4219      	tst	r1, r3
}
   564d8:	bf14      	ite	ne
   564da:	2001      	movne	r0, #1
   564dc:	2000      	moveq	r0, #0
   564de:	bd10      	pop	{r4, pc}

000564e0 <net_if_up>:
{
   564e0:	b538      	push	{r3, r4, r5, lr}
   564e2:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   564e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   564e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   564ec:	f7f0 ff2a 	bl	47344 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   564f0:	2100      	movs	r1, #0
   564f2:	4628      	mov	r0, r5
   564f4:	f7ff ff8e 	bl	56414 <net_if_flag_is_set>
   564f8:	4604      	mov	r4, r0
   564fa:	b9d0      	cbnz	r0, 56532 <net_if_up+0x52>
	return (iface->if_dev->socket_offload != NULL);
   564fc:	682b      	ldr	r3, [r5, #0]
	if (is_iface_offloaded(iface)) {
   564fe:	69db      	ldr	r3, [r3, #28]
   56500:	b95b      	cbnz	r3, 5651a <net_if_up+0x3a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   56502:	4628      	mov	r0, r5
   56504:	f7ff ff62 	bl	563cc <net_if_l2>
   56508:	4604      	mov	r4, r0
   5650a:	b130      	cbz	r0, 5651a <net_if_up+0x3a>
   5650c:	6884      	ldr	r4, [r0, #8]
   5650e:	b124      	cbz	r4, 5651a <net_if_up+0x3a>
	status = net_if_l2(iface)->enable(iface, true);
   56510:	2101      	movs	r1, #1
   56512:	4628      	mov	r0, r5
   56514:	47a0      	blx	r4
	if (status < 0) {
   56516:	1e04      	subs	r4, r0, #0
   56518:	db07      	blt.n	5652a <net_if_up+0x4a>
	atomic_set_bit(iface->if_dev->flags, value);
   5651a:	6828      	ldr	r0, [r5, #0]
   5651c:	2100      	movs	r1, #0
   5651e:	300c      	adds	r0, #12
   56520:	f7ff ff59 	bl	563d6 <atomic_set_bit>
	update_operational_state(iface);
   56524:	4628      	mov	r0, r5
   56526:	f7ff ff8a 	bl	5643e <update_operational_state>
	k_mutex_unlock(&lock);
   5652a:	f7f0 ff13 	bl	47354 <k_mutex_unlock.constprop.0.isra.0>
}
   5652e:	4620      	mov	r0, r4
   56530:	bd38      	pop	{r3, r4, r5, pc}
		status = -EALREADY;
   56532:	f06f 0477 	mvn.w	r4, #119	; 0x77
   56536:	e7f8      	b.n	5652a <net_if_up+0x4a>

00056538 <sdhc_set_io>:
	if (!api->set_io) {
   56538:	6883      	ldr	r3, [r0, #8]
   5653a:	689b      	ldr	r3, [r3, #8]
   5653c:	b103      	cbz	r3, 56540 <sdhc_set_io+0x8>
	return api->set_io(dev, io);
   5653e:	4718      	bx	r3
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SDHC_SET_IO);
	}
#endif
	compiler_barrier();
	return z_impl_sdhc_set_io(dev, io);
}
   56540:	f06f 0057 	mvn.w	r0, #87	; 0x57
   56544:	4770      	bx	lr

00056546 <k_mutex_unlock>:
   56546:	f7fc b85f 	b.w	52608 <z_impl_k_mutex_unlock>

0005654a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   5654a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   5654c:	ab0b      	add	r3, sp, #44	; 0x2c
   5654e:	9305      	str	r3, [sp, #20]
   56550:	9303      	str	r3, [sp, #12]
   56552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   56554:	9302      	str	r3, [sp, #8]
   56556:	2300      	movs	r3, #0
   56558:	4618      	mov	r0, r3
   5655a:	e9cd 3300 	strd	r3, r3, [sp]
   5655e:	f7ee fe67 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   56562:	b007      	add	sp, #28
   56564:	f85d fb04 	ldr.w	pc, [sp], #4

00056568 <sdhc_request.constprop.0>:
	if (!api->request) {
   56568:	6883      	ldr	r3, [r0, #8]
   5656a:	685b      	ldr	r3, [r3, #4]
   5656c:	b10b      	cbz	r3, 56572 <sdhc_request.constprop.0+0xa>
	return api->request(dev, cmd, data);
   5656e:	2200      	movs	r2, #0
   56570:	4718      	bx	r3
}
   56572:	f06f 0057 	mvn.w	r0, #87	; 0x57
   56576:	4770      	bx	lr

00056578 <sd_idle.isra.0>:
static inline int sd_idle(struct sd_card *card)
   56578:	b510      	push	{r4, lr}
   5657a:	b08a      	sub	sp, #40	; 0x28
   5657c:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   5657e:	2220      	movs	r2, #32
   56580:	2100      	movs	r1, #0
   56582:	a801      	add	r0, sp, #4
   56584:	f004 fce8 	bl	5af58 <memset>
	cmd.response_type = (SD_RSP_TYPE_NONE | SD_SPI_RSP_TYPE_R1);
   56588:	2310      	movs	r3, #16
   5658a:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   5658c:	23c8      	movs	r3, #200	; 0xc8
	return sdhc_request(card->sdhc, &cmd, NULL);
   5658e:	4620      	mov	r0, r4
   56590:	a901      	add	r1, sp, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   56592:	9309      	str	r3, [sp, #36]	; 0x24
	return sdhc_request(card->sdhc, &cmd, NULL);
   56594:	f7ff ffe8 	bl	56568 <sdhc_request.constprop.0>
}
   56598:	b00a      	add	sp, #40	; 0x28
   5659a:	bd10      	pop	{r4, pc}

0005659c <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   5659c:	b538      	push	{r3, r4, r5, lr}
   5659e:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
   565a0:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   565a4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   565a8:	f240 30e7 	movw	r0, #999	; 0x3e7
   565ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   565b0:	2300      	movs	r3, #0
   565b2:	fbc4 0105 	smlal	r0, r1, r4, r5
   565b6:	f7ea faab 	bl	40b10 <__aeabi_uldivmod>
}
   565ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   565be:	f7fc bca5 	b.w	52f0c <z_impl_k_sleep>

000565c2 <sd_test_sdio>:
{
   565c2:	b510      	push	{r4, lr}
   565c4:	b08a      	sub	sp, #40	; 0x28
   565c6:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   565c8:	2100      	movs	r1, #0
   565ca:	221c      	movs	r2, #28
   565cc:	a802      	add	r0, sp, #8
   565ce:	f004 fcc3 	bl	5af58 <memset>
	cmd.opcode = SDIO_SEND_OP_COND;
   565d2:	2305      	movs	r3, #5
   565d4:	9301      	str	r3, [sp, #4]
	cmd.response_type = (SD_RSP_TYPE_R4 | SD_SPI_RSP_TYPE_R4);
   565d6:	2355      	movs	r3, #85	; 0x55
   565d8:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   565da:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   565dc:	6820      	ldr	r0, [r4, #0]
   565de:	a901      	add	r1, sp, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   565e0:	9309      	str	r3, [sp, #36]	; 0x24
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   565e2:	f7ff ffc1 	bl	56568 <sdhc_request.constprop.0>
	if (ret) {
   565e6:	b128      	cbz	r0, 565f4 <sd_test_sdio+0x32>
		card->type = CARD_SDMMC;
   565e8:	2300      	movs	r3, #0
		return SD_NOT_SDIO;
   565ea:	2002      	movs	r0, #2
		card->type = CARD_SDMMC;
   565ec:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
}
   565f0:	b00a      	add	sp, #40	; 0x28
   565f2:	bd10      	pop	{r4, pc}
	card->num_io = ((cmd.response[0] & SDIO_OCR_IO_NUMBER)
   565f4:	9b03      	ldr	r3, [sp, #12]
			>> SDIO_OCR_IO_NUMBER_SHIFT);
   565f6:	f3c3 7202 	ubfx	r2, r3, #28, #3
	if ((card->num_io == 0) | ((cmd.response[0] & SDIO_IO_OCR_MASK) == 0)) {
   565fa:	f033 417f 	bics.w	r1, r3, #4278190080	; 0xff000000
	card->num_io = ((cmd.response[0] & SDIO_OCR_IO_NUMBER)
   565fe:	65e2      	str	r2, [r4, #92]	; 0x5c
	if ((card->num_io == 0) | ((cmd.response[0] & SDIO_IO_OCR_MASK) == 0)) {
   56600:	d000      	beq.n	56604 <sd_test_sdio+0x42>
   56602:	b922      	cbnz	r2, 5660e <sd_test_sdio+0x4c>
		if (cmd.response[0] & SDIO_OCR_MEM_PRESENT_FLAG) {
   56604:	011b      	lsls	r3, r3, #4
   56606:	d4ef      	bmi.n	565e8 <sd_test_sdio+0x26>
		return -ENOTSUP;
   56608:	f06f 0085 	mvn.w	r0, #133	; 0x85
   5660c:	e7f0      	b.n	565f0 <sd_test_sdio+0x2e>
	card->type = CARD_SDIO;
   5660e:	2301      	movs	r3, #1
   56610:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
	return 0;
   56614:	e7ec      	b.n	565f0 <sd_test_sdio+0x2e>

00056616 <sd_is_card_present>:

/* Return true if card is present, false otherwise */
bool sd_is_card_present(const struct device *sdhc_dev)
{
   56616:	b508      	push	{r3, lr}
	if (!sdhc_dev) {
   56618:	b130      	cbz	r0, 56628 <sd_is_card_present+0x12>
	if (!api->get_card_present) {
   5661a:	6883      	ldr	r3, [r0, #8]
   5661c:	68db      	ldr	r3, [r3, #12]
   5661e:	b123      	cbz	r3, 5662a <sd_is_card_present+0x14>
	return api->get_card_present(dev);
   56620:	4798      	blx	r3
		return false;
	}
	return sdhc_card_present(sdhc_dev) == 1;
   56622:	1e43      	subs	r3, r0, #1
   56624:	4258      	negs	r0, r3
   56626:	4158      	adcs	r0, r3
}
   56628:	bd08      	pop	{r3, pc}
		return -ENOSYS;
   5662a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   5662e:	e7f8      	b.n	56622 <sd_is_card_present+0xc>

00056630 <sdhc_request>:
	if (!api->request) {
   56630:	6883      	ldr	r3, [r0, #8]
   56632:	685b      	ldr	r3, [r3, #4]
   56634:	b103      	cbz	r3, 56638 <sdhc_request+0x8>
	return api->request(dev, cmd, data);
   56636:	4718      	bx	r3
   56638:	f06f 0057 	mvn.w	r0, #87	; 0x57
   5663c:	4770      	bx	lr

0005663e <sdhc_set_io>:
	if (!api->set_io) {
   5663e:	6883      	ldr	r3, [r0, #8]
   56640:	689b      	ldr	r3, [r3, #8]
   56642:	b103      	cbz	r3, 56646 <sdhc_set_io+0x8>
	return api->set_io(dev, io);
   56644:	4718      	bx	r3
}
   56646:	f06f 0057 	mvn.w	r0, #87	; 0x57
   5664a:	4770      	bx	lr

0005664c <sdhc_card_busy>:
	if (!api->card_busy) {
   5664c:	6883      	ldr	r3, [r0, #8]
   5664e:	695b      	ldr	r3, [r3, #20]
   56650:	b103      	cbz	r3, 56654 <sdhc_card_busy+0x8>
	return api->card_busy(dev);
   56652:	4718      	bx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_SDHC_CARD_BUSY);
	}
#endif
	compiler_barrier();
	return z_impl_sdhc_card_busy(dev);
}
   56654:	f06f 0057 	mvn.w	r0, #87	; 0x57
   56658:	4770      	bx	lr

0005665a <sdmmc_spi_read_cxd>:
{
   5665a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct sdhc_data data = {0};
   5665c:	2610      	movs	r6, #16
{
   5665e:	b091      	sub	sp, #68	; 0x44
   56660:	4604      	mov	r4, r0
   56662:	460f      	mov	r7, r1
   56664:	4615      	mov	r5, r2
	struct sdhc_command cmd = {0};
   56666:	2100      	movs	r1, #0
   56668:	221c      	movs	r2, #28
   5666a:	a808      	add	r0, sp, #32
   5666c:	f004 fc74 	bl	5af58 <memset>
	struct sdhc_data data = {0};
   56670:	4632      	mov	r2, r6
   56672:	2100      	movs	r1, #0
   56674:	a801      	add	r0, sp, #4
   56676:	f004 fc6f 	bl	5af58 <memset>
	data.blocks = 1U;
   5667a:	2201      	movs	r2, #1
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   5667c:	23c8      	movs	r3, #200	; 0xc8
	data.blocks = 1U;
   5667e:	9203      	str	r2, [sp, #12]
	uint32_t *cxd_be = (uint32_t *)card->card_buffer;
   56680:	f104 0278 	add.w	r2, r4, #120	; 0x78
	data.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   56684:	e9cd 2305 	strd	r2, r3, [sp, #20]
	ret = sdhc_request(card->sdhc, &cmd, &data);
   56688:	f854 0b74 	ldr.w	r0, [r4], #116
   5668c:	aa01      	add	r2, sp, #4
   5668e:	a907      	add	r1, sp, #28
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   56690:	930f      	str	r3, [sp, #60]	; 0x3c
	cmd.opcode = opcode;
   56692:	9707      	str	r7, [sp, #28]
	cmd.response_type = SD_SPI_RSP_TYPE_R1;
   56694:	960d      	str	r6, [sp, #52]	; 0x34
	data.block_size = 16;
   56696:	9602      	str	r6, [sp, #8]
	ret = sdhc_request(card->sdhc, &cmd, &data);
   56698:	f7ff ffca 	bl	56630 <sdhc_request>
	for (i = 0; i < 4; i++) {
   5669c:	19ab      	adds	r3, r5, r6
		cxd[3-i] = sys_be32_to_cpu(cxd_be[i]);
   5669e:	f854 2f04 	ldr.w	r2, [r4, #4]!
   566a2:	ba12      	rev	r2, r2
   566a4:	f843 2d04 	str.w	r2, [r3, #-4]!
	for (i = 0; i < 4; i++) {
   566a8:	42ab      	cmp	r3, r5
   566aa:	d1f8      	bne.n	5669e <sdmmc_spi_read_cxd+0x44>
}
   566ac:	2000      	movs	r0, #0
   566ae:	b011      	add	sp, #68	; 0x44
   566b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000566b2 <sdmmc_read_status>:
{
   566b2:	b510      	push	{r4, lr}
   566b4:	b08a      	sub	sp, #40	; 0x28
   566b6:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
   566b8:	221c      	movs	r2, #28
   566ba:	2100      	movs	r1, #0
   566bc:	a802      	add	r0, sp, #8
   566be:	f004 fc4b 	bl	5af58 <memset>
	cmd.opcode = SD_SEND_STATUS;
   566c2:	230d      	movs	r3, #13
   566c4:	9301      	str	r3, [sp, #4]
	if (!card->host_props.is_spi) {
   566c6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   566ca:	b913      	cbnz	r3, 566d2 <sdmmc_read_status+0x20>
		cmd.arg = (card->relative_addr << 16U);
   566cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   566ce:	041b      	lsls	r3, r3, #16
   566d0:	9302      	str	r3, [sp, #8]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R2);
   566d2:	2331      	movs	r3, #49	; 0x31
   566d4:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   566d6:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   566d8:	2200      	movs	r2, #0
   566da:	6820      	ldr	r0, [r4, #0]
   566dc:	a901      	add	r1, sp, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   566de:	9309      	str	r3, [sp, #36]	; 0x24
	ret = sdhc_request(card->sdhc, &cmd, NULL);
   566e0:	f7ff ffa6 	bl	56630 <sdhc_request>
	if (ret) {
   566e4:	b9c8      	cbnz	r0, 5671a <sdmmc_read_status+0x68>
	if (card->host_props.is_spi) {
   566e6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
		if ((cmd.response[0U] & SDHC_SPI_R2_CARD_LOCKED) ||
   566ea:	9b03      	ldr	r3, [sp, #12]
	if (card->host_props.is_spi) {
   566ec:	b162      	cbz	r2, 56708 <sdmmc_read_status+0x56>
		if ((cmd.response[0U] & SDHC_SPI_R2_CARD_LOCKED) ||
   566ee:	f413 7f40 	tst.w	r3, #768	; 0x300
   566f2:	d114      	bne.n	5671e <sdmmc_read_status+0x6c>
		} else if ((cmd.response[0U] & SDHC_SPI_R2_WP_VIOLATION) ||
   566f4:	f413 4f60 	tst.w	r3, #57344	; 0xe000
   566f8:	d114      	bne.n	56724 <sdmmc_read_status+0x72>
			return -EIO;
   566fa:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
   566fe:	bf18      	it	ne
   56700:	f06f 0004 	mvnne.w	r0, #4
}
   56704:	b00a      	add	sp, #40	; 0x28
   56706:	bd10      	pop	{r4, pc}
	if ((cmd.response[0U] & SD_R1_RDY_DATA) &&
   56708:	05da      	lsls	r2, r3, #23
   5670a:	d50e      	bpl.n	5672a <sdmmc_read_status+0x78>
		(SD_R1_CURRENT_STATE(cmd.response[0U]) == SDMMC_R1_TRANSFER)) {
   5670c:	f3c3 2343 	ubfx	r3, r3, #9, #4
	return -EBUSY;
   56710:	2b04      	cmp	r3, #4
   56712:	bf18      	it	ne
   56714:	f06f 000f 	mvnne.w	r0, #15
   56718:	e7f4      	b.n	56704 <sdmmc_read_status+0x52>
		return SD_RETRY;
   5671a:	2001      	movs	r0, #1
   5671c:	e7f2      	b.n	56704 <sdmmc_read_status+0x52>
			return -EACCES;
   5671e:	f06f 000c 	mvn.w	r0, #12
   56722:	e7ef      	b.n	56704 <sdmmc_read_status+0x52>
			return -EINVAL;
   56724:	f06f 0015 	mvn.w	r0, #21
   56728:	e7ec      	b.n	56704 <sdmmc_read_status+0x52>
	return -EBUSY;
   5672a:	f06f 000f 	mvn.w	r0, #15
   5672e:	e7e9      	b.n	56704 <sdmmc_read_status+0x52>

00056730 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   56730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   56732:	ab0b      	add	r3, sp, #44	; 0x2c
   56734:	9305      	str	r3, [sp, #20]
   56736:	9303      	str	r3, [sp, #12]
   56738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   5673a:	9302      	str	r3, [sp, #8]
   5673c:	2300      	movs	r3, #0
   5673e:	4618      	mov	r0, r3
   56740:	e9cd 3300 	strd	r3, r3, [sp]
   56744:	f7ee fd74 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   56748:	b007      	add	sp, #28
   5674a:	f85d fb04 	ldr.w	pc, [sp], #4

0005674e <sdmmc_switch.constprop.0.isra.0>:
static int sdmmc_switch(struct sd_card *card, enum sd_switch_arg mode,
   5674e:	b5f0      	push	{r4, r5, r6, r7, lr}
   56750:	b091      	sub	sp, #68	; 0x44
   56752:	4606      	mov	r6, r0
   56754:	460c      	mov	r4, r1
   56756:	4615      	mov	r5, r2
	struct sdhc_command cmd = {0};
   56758:	2100      	movs	r1, #0
   5675a:	2218      	movs	r2, #24
   5675c:	a809      	add	r0, sp, #36	; 0x24
static int sdmmc_switch(struct sd_card *card, enum sd_switch_arg mode,
   5675e:	461f      	mov	r7, r3
	struct sdhc_command cmd = {0};
   56760:	f004 fbfa 	bl	5af58 <memset>
	struct sdhc_data data = {0};
   56764:	2210      	movs	r2, #16
   56766:	2100      	movs	r1, #0
   56768:	a801      	add	r0, sp, #4
   5676a:	f004 fbf5 	bl	5af58 <memset>
	cmd.opcode = SD_SWITCH;
   5676e:	2306      	movs	r3, #6
   56770:	9307      	str	r3, [sp, #28]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
   56772:	2311      	movs	r3, #17
   56774:	930d      	str	r3, [sp, #52]	; 0x34
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   56776:	23c8      	movs	r3, #200	; 0xc8
	cmd.arg &= ~(0xFU << (group * 4));
   56778:	00a1      	lsls	r1, r4, #2
   5677a:	240f      	movs	r4, #15
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
   5677c:	930f      	str	r3, [sp, #60]	; 0x3c
	data.blocks = 1;
   5677e:	2040      	movs	r0, #64	; 0x40
   56780:	2301      	movs	r3, #1
	cmd.arg &= ~(0xFU << (group * 4));
   56782:	408c      	lsls	r4, r1
   56784:	f084 44fe 	eor.w	r4, r4, #2130706432	; 0x7f000000
   56788:	43e4      	mvns	r4, r4
	data.blocks = 1;
   5678a:	e9cd 0302 	strd	r0, r3, [sp, #8]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   5678e:	f242 7310 	movw	r3, #10000	; 0x2710
	cmd.arg |= (value & 0xF) << (group * 4);
   56792:	f005 050f 	and.w	r5, r5, #15
   56796:	408d      	lsls	r5, r1
	return sdhc_request(card->sdhc, &cmd, &data);
   56798:	4630      	mov	r0, r6
	cmd.arg |= (value & 0xF) << (group * 4);
   5679a:	432c      	orrs	r4, r5
	return sdhc_request(card->sdhc, &cmd, &data);
   5679c:	aa01      	add	r2, sp, #4
   5679e:	a907      	add	r1, sp, #28
	cmd.arg |= (value & 0xF) << (group * 4);
   567a0:	9408      	str	r4, [sp, #32]
	data.data = response;
   567a2:	9705      	str	r7, [sp, #20]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
   567a4:	9306      	str	r3, [sp, #24]
	return sdhc_request(card->sdhc, &cmd, &data);
   567a6:	f7ff ff43 	bl	56630 <sdhc_request>
}
   567aa:	b011      	add	sp, #68	; 0x44
   567ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000567ae <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   567ae:	f7fb bf2b 	b.w	52608 <z_impl_k_mutex_unlock>

000567b2 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   567b2:	4601      	mov	r1, r0
   567b4:	f240 30e7 	movw	r0, #999	; 0x3e7
   567b8:	b508      	push	{r3, lr}
   567ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   567be:	2300      	movs	r3, #0
   567c0:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   567c4:	1449      	asrs	r1, r1, #17
   567c6:	f7ea f9a3 	bl	40b10 <__aeabi_uldivmod>
}
   567ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   567ce:	f7fc bb9d 	b.w	52f0c <z_impl_k_sleep>

000567d2 <sdmmc_ioctl>:


/* IO Control handler for SD MMC */
int sdmmc_ioctl(struct sd_card *card, uint8_t cmd, void *buf)
{
	switch (cmd) {
   567d2:	3901      	subs	r1, #1
   567d4:	2904      	cmp	r1, #4
   567d6:	d80c      	bhi.n	567f2 <sdmmc_ioctl+0x20>
   567d8:	e8df f001 	tbb	[pc, r1]
   567dc:	070b0703 	.word	0x070b0703
   567e0:	09          	.byte	0x09
   567e1:	00          	.byte	0x00
	case DISK_IOCTL_GET_SECTOR_COUNT:
		(*(uint32_t *)buf) = card->block_count;
   567e2:	6e43      	ldr	r3, [r0, #100]	; 0x64
		 */
		return sdmmc_wait_ready(card);
	default:
		return -ENOTSUP;
	}
	return 0;
   567e4:	2000      	movs	r0, #0
		(*(uint32_t *)buf) = card->block_count;
   567e6:	6013      	str	r3, [r2, #0]
   567e8:	4770      	bx	lr
		(*(uint32_t *)buf) = card->block_size;
   567ea:	6e83      	ldr	r3, [r0, #104]	; 0x68
		break;
   567ec:	e7fa      	b.n	567e4 <sdmmc_ioctl+0x12>
		return sdmmc_wait_ready(card);
   567ee:	f7f0 bff9 	b.w	477e4 <sdmmc_wait_ready>
	switch (cmd) {
   567f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   567f6:	4770      	bx	lr

000567f8 <disk_sdmmc_access_ioctl>:
	struct sdmmc_data *data = dev->data;
   567f8:	6903      	ldr	r3, [r0, #16]
	return sdmmc_ioctl(&data->card, cmd, buf);
   567fa:	6918      	ldr	r0, [r3, #16]
   567fc:	f7ff bfe9 	b.w	567d2 <sdmmc_ioctl>

00056800 <disk_sdmmc_access_write>:
	struct sdmmc_data *data = dev->data;
   56800:	6900      	ldr	r0, [r0, #16]
	return sdmmc_write_blocks(&data->card, buf, sector, count);
   56802:	6900      	ldr	r0, [r0, #16]
   56804:	f7f1 bc4c 	b.w	480a0 <sdmmc_write_blocks>

00056808 <disk_sdmmc_access_read>:
	struct sdmmc_data *data = dev->data;
   56808:	6900      	ldr	r0, [r0, #16]
	return sdmmc_read_blocks(&data->card, buf, sector, count);
   5680a:	6900      	ldr	r0, [r0, #16]
   5680c:	f7f1 bba6 	b.w	47f5c <sdmmc_read_blocks>

00056810 <disk_sdmmc_access_status>:
{
   56810:	b510      	push	{r4, lr}
	const struct device *dev = disk->dev;
   56812:	6903      	ldr	r3, [r0, #16]
	struct sdmmc_data *data = dev->data;
   56814:	691c      	ldr	r4, [r3, #16]
	if (!sd_is_card_present(cfg->host_controller)) {
   56816:	685b      	ldr	r3, [r3, #4]
   56818:	6818      	ldr	r0, [r3, #0]
   5681a:	f7ff fefc 	bl	56616 <sd_is_card_present>
   5681e:	b128      	cbz	r0, 5682c <disk_sdmmc_access_status+0x1c>
	if (data->status == SD_OK) {
   56820:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
   56824:	3802      	subs	r0, #2
   56826:	bf18      	it	ne
   56828:	2001      	movne	r0, #1
}
   5682a:	bd10      	pop	{r4, pc}
		return DISK_STATUS_NOMEDIA;
   5682c:	2002      	movs	r0, #2
   5682e:	e7fc      	b.n	5682a <disk_sdmmc_access_status+0x1a>

00056830 <disk_sdmmc_access_init>:
{
   56830:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev = disk->dev;
   56832:	6903      	ldr	r3, [r0, #16]
	struct sdmmc_data *data = dev->data;
   56834:	691c      	ldr	r4, [r3, #16]
	if (data->status == SD_OK) {
   56836:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
   5683a:	2a02      	cmp	r2, #2
   5683c:	d010      	beq.n	56860 <disk_sdmmc_access_init+0x30>
	const struct sdmmc_config *cfg = dev->config;
   5683e:	685d      	ldr	r5, [r3, #4]
	if (!sd_is_card_present(cfg->host_controller)) {
   56840:	6828      	ldr	r0, [r5, #0]
   56842:	f7ff fee8 	bl	56616 <sd_is_card_present>
   56846:	b168      	cbz	r0, 56864 <disk_sdmmc_access_init+0x34>
	ret = sd_init(cfg->host_controller, &data->card);
   56848:	4621      	mov	r1, r4
   5684a:	6828      	ldr	r0, [r5, #0]
   5684c:	f7f0 ff14 	bl	47678 <sd_init>
	if (ret) {
   56850:	b118      	cbz	r0, 5685a <disk_sdmmc_access_init+0x2a>
		data->status = SD_ERROR;
   56852:	2301      	movs	r3, #1
   56854:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
}
   56858:	bd38      	pop	{r3, r4, r5, pc}
	data->status = SD_OK;
   5685a:	2302      	movs	r3, #2
   5685c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		return 0;
   56860:	2000      	movs	r0, #0
   56862:	e7f9      	b.n	56858 <disk_sdmmc_access_init+0x28>
		return DISK_STATUS_NOMEDIA;
   56864:	2002      	movs	r0, #2
   56866:	e7f7      	b.n	56858 <disk_sdmmc_access_init+0x28>

00056868 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   56868:	220c      	movs	r2, #12
   5686a:	6903      	ldr	r3, [r0, #16]
   5686c:	b2c9      	uxtb	r1, r1
   5686e:	fb01 3302 	mla	r3, r1, r2, r3
   56872:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   56874:	f000 0007 	and.w	r0, r0, #7
   56878:	4770      	bx	lr

0005687a <set_on_state>:
	__asm__ volatile(
   5687a:	f04f 0320 	mov.w	r3, #32
   5687e:	f3ef 8211 	mrs	r2, BASEPRI
   56882:	f383 8812 	msr	BASEPRI_MAX, r3
   56886:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   5688a:	6803      	ldr	r3, [r0, #0]
   5688c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   56890:	f043 0302 	orr.w	r3, r3, #2
   56894:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   56896:	f382 8811 	msr	BASEPRI, r2
   5689a:	f3bf 8f6f 	isb	sy
}
   5689e:	4770      	bx	lr

000568a0 <stop>:
{
   568a0:	b570      	push	{r4, r5, r6, lr}
   568a2:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   568a4:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   568a6:	f04f 0420 	mov.w	r4, #32
   568aa:	f3ef 8511 	mrs	r5, BASEPRI
   568ae:	f384 8812 	msr	BASEPRI_MAX, r4
   568b2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   568b6:	260c      	movs	r6, #12
   568b8:	fb06 3401 	mla	r4, r6, r1, r3
   568bc:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   568be:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   568c2:	d008      	beq.n	568d6 <stop+0x36>
   568c4:	42a2      	cmp	r2, r4
   568c6:	d006      	beq.n	568d6 <stop+0x36>
	__asm__ volatile(
   568c8:	f385 8811 	msr	BASEPRI, r5
   568cc:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   568d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   568d4:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   568d6:	2201      	movs	r2, #1
   568d8:	4371      	muls	r1, r6
   568da:	440b      	add	r3, r1
   568dc:	641a      	str	r2, [r3, #64]	; 0x40
   568de:	f385 8811 	msr	BASEPRI, r5
   568e2:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   568e6:	6843      	ldr	r3, [r0, #4]
   568e8:	440b      	add	r3, r1
   568ea:	685b      	ldr	r3, [r3, #4]
   568ec:	4798      	blx	r3
	return 0;
   568ee:	2000      	movs	r0, #0
   568f0:	e7f0      	b.n	568d4 <stop+0x34>

000568f2 <api_stop>:
	return stop(dev, subsys, CTX_API);
   568f2:	2280      	movs	r2, #128	; 0x80
   568f4:	f7ff bfd4 	b.w	568a0 <stop>

000568f8 <async_start>:
{
   568f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   568fa:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   568fc:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   568fe:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   56900:	f04f 0520 	mov.w	r5, #32
   56904:	f3ef 8611 	mrs	r6, BASEPRI
   56908:	f385 8812 	msr	BASEPRI_MAX, r5
   5690c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   56910:	250c      	movs	r5, #12
   56912:	4369      	muls	r1, r5
   56914:	440c      	add	r4, r1
   56916:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   56918:	f005 0c07 	and.w	ip, r5, #7
   5691c:	f1bc 0f01 	cmp.w	ip, #1
   56920:	d10b      	bne.n	5693a <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   56922:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   56924:	f386 8811 	msr	BASEPRI, r6
   56928:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   5692c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   56930:	6843      	ldr	r3, [r0, #4]
   56932:	585b      	ldr	r3, [r3, r1]
   56934:	4798      	blx	r3
	return 0;
   56936:	2000      	movs	r0, #0
}
   56938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   5693a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   5693e:	42af      	cmp	r7, r5
   56940:	f386 8811 	msr	BASEPRI, r6
   56944:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   56948:	bf0c      	ite	eq
   5694a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   5694e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   56952:	e7f1      	b.n	56938 <async_start+0x40>

00056954 <api_start>:
{
   56954:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   56956:	2480      	movs	r4, #128	; 0x80
   56958:	9400      	str	r4, [sp, #0]
   5695a:	f7ff ffcd 	bl	568f8 <async_start>
}
   5695e:	b002      	add	sp, #8
   56960:	bd10      	pop	{r4, pc}

00056962 <onoff_started_callback>:
{
   56962:	b410      	push	{r4}
	notify(mgr, 0);
   56964:	241c      	movs	r4, #28
	return &data->mgr[type];
   56966:	6900      	ldr	r0, [r0, #16]
   56968:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   5696a:	fb03 0004 	mla	r0, r3, r4, r0
   5696e:	2100      	movs	r1, #0
}
   56970:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   56974:	4710      	bx	r2

00056976 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   56976:	2000      	movs	r0, #0
   56978:	f7f8 bd6a 	b.w	4f450 <nrfx_clock_start>

0005697c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   5697c:	2000      	movs	r0, #0
   5697e:	f002 bfb3 	b.w	598e8 <nrfx_clock_stop>

00056982 <blocking_start_callback>:
{
   56982:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   56984:	f7fb beb0 	b.w	526e8 <z_impl_k_sem_give>

00056988 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   56988:	6843      	ldr	r3, [r0, #4]
}
   5698a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   5698c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   5698e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   56990:	600b      	str	r3, [r1, #0]
}
   56992:	4770      	bx	lr

00056994 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   56994:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   56996:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   5699a:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   5699c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   569a0:	6098      	str	r0, [r3, #8]
}
   569a2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   569a4:	60d9      	str	r1, [r3, #12]
   569a6:	4770      	bx	lr

000569a8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   569a8:	6843      	ldr	r3, [r0, #4]
}
   569aa:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   569ac:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   569ae:	6099      	str	r1, [r3, #8]
}
   569b0:	4770      	bx	lr

000569b2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   569b2:	6843      	ldr	r3, [r0, #4]
}
   569b4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   569b6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   569b8:	60d9      	str	r1, [r3, #12]
}
   569ba:	4770      	bx	lr

000569bc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   569bc:	6843      	ldr	r3, [r0, #4]
   569be:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   569c0:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   569c2:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   569c6:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   569c8:	6090      	str	r0, [r2, #8]
}
   569ca:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   569cc:	60d3      	str	r3, [r2, #12]
   569ce:	4770      	bx	lr

000569d0 <gpio_nrfx_manage_callback>:
{
   569d0:	b510      	push	{r4, lr}
	return port->data;
   569d2:	6903      	ldr	r3, [r0, #16]
	return list->head;
   569d4:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   569d6:	b1f8      	cbz	r0, 56a18 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   569d8:	4288      	cmp	r0, r1
   569da:	d119      	bne.n	56a10 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   569dc:	689c      	ldr	r4, [r3, #8]
	return node->next;
   569de:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   569e0:	42a1      	cmp	r1, r4
	list->head = node;
   569e2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   569e4:	d100      	bne.n	569e8 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   569e6:	6098      	str	r0, [r3, #8]
	parent->next = child;
   569e8:	2000      	movs	r0, #0
   569ea:	6008      	str	r0, [r1, #0]
	if (set) {
   569ec:	b12a      	cbz	r2, 569fa <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   569ee:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   569f0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   569f2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   569f4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   569f6:	b902      	cbnz	r2, 569fa <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   569f8:	6099      	str	r1, [r3, #8]
	return 0;
   569fa:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   569fc:	e010      	b.n	56a20 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   569fe:	4281      	cmp	r1, r0
   56a00:	d106      	bne.n	56a10 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   56a02:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   56a04:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   56a06:	6898      	ldr	r0, [r3, #8]
   56a08:	4281      	cmp	r1, r0
   56a0a:	d1ed      	bne.n	569e8 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   56a0c:	609c      	str	r4, [r3, #8]
}
   56a0e:	e7eb      	b.n	569e8 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   56a10:	4604      	mov	r4, r0
   56a12:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   56a14:	2800      	cmp	r0, #0
   56a16:	d1f2      	bne.n	569fe <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   56a18:	2a00      	cmp	r2, #0
   56a1a:	d1e8      	bne.n	569ee <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   56a1c:	f06f 0015 	mvn.w	r0, #21
}
   56a20:	bd10      	pop	{r4, pc}

00056a22 <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   56a22:	2200      	movs	r2, #0
   56a24:	2101      	movs	r1, #1
   56a26:	200b      	movs	r0, #11
   56a28:	f7ef ba06 	b.w	45e38 <z_arm_irq_priority_set>

00056a2c <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   56a2c:	b510      	push	{r4, lr}
	while (*count) {
   56a2e:	680b      	ldr	r3, [r1, #0]
   56a30:	b913      	cbnz	r3, 56a38 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   56a32:	4618      	mov	r0, r3
	*buf_len = 0;
   56a34:	6013      	str	r3, [r2, #0]
	return NULL;
   56a36:	e005      	b.n	56a44 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   56a38:	6803      	ldr	r3, [r0, #0]
   56a3a:	685c      	ldr	r4, [r3, #4]
   56a3c:	b11c      	cbz	r4, 56a46 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   56a3e:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   56a40:	6803      	ldr	r3, [r0, #0]
   56a42:	6818      	ldr	r0, [r3, #0]
}
   56a44:	bd10      	pop	{r4, pc}
		++(*current);
   56a46:	3308      	adds	r3, #8
   56a48:	6003      	str	r3, [r0, #0]
		--(*count);
   56a4a:	680b      	ldr	r3, [r1, #0]
   56a4c:	3b01      	subs	r3, #1
   56a4e:	600b      	str	r3, [r1, #0]
   56a50:	e7ed      	b.n	56a2e <spi_context_get_next_buf.constprop.0+0x2>

00056a52 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   56a52:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   56a54:	ab0b      	add	r3, sp, #44	; 0x2c
   56a56:	9305      	str	r3, [sp, #20]
   56a58:	9303      	str	r3, [sp, #12]
   56a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   56a5c:	2201      	movs	r2, #1
   56a5e:	9302      	str	r3, [sp, #8]
   56a60:	2300      	movs	r3, #0
   56a62:	4618      	mov	r0, r3
   56a64:	e9cd 3300 	strd	r3, r3, [sp]
   56a68:	f7ee fbe2 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   56a6c:	b007      	add	sp, #28
   56a6e:	f85d fb04 	ldr.w	pc, [sp], #4

00056a72 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   56a72:	b513      	push	{r0, r1, r4, lr}
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   56a74:	aa01      	add	r2, sp, #4
{
   56a76:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   56a78:	f000 fc2c 	bl	572d4 <pinctrl_lookup_state>
	if (ret < 0) {
   56a7c:	2800      	cmp	r0, #0
   56a7e:	db05      	blt.n	56a8c <pinctrl_apply_state+0x1a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   56a80:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   56a82:	6822      	ldr	r2, [r4, #0]
   56a84:	7919      	ldrb	r1, [r3, #4]
   56a86:	6818      	ldr	r0, [r3, #0]
   56a88:	f7f2 ff22 	bl	498d0 <pinctrl_configure_pins>
}
   56a8c:	b002      	add	sp, #8
   56a8e:	bd10      	pop	{r4, pc}

00056a90 <spim_nrfx_pm_action>:
{
   56a90:	b570      	push	{r4, r5, r6, lr}
	switch (action) {
   56a92:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
   56a94:	6906      	ldr	r6, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   56a96:	6845      	ldr	r5, [r0, #4]
	switch (action) {
   56a98:	b139      	cbz	r1, 56aaa <spim_nrfx_pm_action+0x1a>
   56a9a:	2901      	cmp	r1, #1
   56a9c:	d10f      	bne.n	56abe <spim_nrfx_pm_action+0x2e>
		ret = pinctrl_apply_state(dev_config->pcfg,
   56a9e:	2100      	movs	r1, #0
		ret = pinctrl_apply_state(dev_config->pcfg,
   56aa0:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   56aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ret = pinctrl_apply_state(dev_config->pcfg,
   56aa6:	f7ff bfe4 	b.w	56a72 <pinctrl_apply_state>
		if (dev_data->initialized) {
   56aaa:	f896 306d 	ldrb.w	r3, [r6, #109]	; 0x6d
   56aae:	b123      	cbz	r3, 56aba <spim_nrfx_pm_action+0x2a>
			nrfx_spim_uninit(&dev_config->spim);
   56ab0:	4628      	mov	r0, r5
   56ab2:	f7f9 f9dd 	bl	4fe70 <nrfx_spim_uninit>
			dev_data->initialized = false;
   56ab6:	f886 406d 	strb.w	r4, [r6, #109]	; 0x6d
		ret = pinctrl_apply_state(dev_config->pcfg,
   56aba:	2101      	movs	r1, #1
   56abc:	e7f0      	b.n	56aa0 <spim_nrfx_pm_action+0x10>
}
   56abe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   56ac2:	bd70      	pop	{r4, r5, r6, pc}

00056ac4 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   56ac4:	4603      	mov	r3, r0
   56ac6:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   56ac8:	7919      	ldrb	r1, [r3, #4]
   56aca:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   56acc:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   56ace:	fa03 f101 	lsl.w	r1, r3, r1
   56ad2:	6903      	ldr	r3, [r0, #16]
   56ad4:	681b      	ldr	r3, [r3, #0]
   56ad6:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   56ad8:	bf18      	it	ne
   56ada:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   56ade:	b112      	cbz	r2, 56ae6 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   56ae0:	6883      	ldr	r3, [r0, #8]
   56ae2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   56ae4:	4718      	bx	r3
   56ae6:	6883      	ldr	r3, [r0, #8]
   56ae8:	691b      	ldr	r3, [r3, #16]
   56aea:	e7fb      	b.n	56ae4 <gpio_pin_set_dt.isra.0+0x20>

00056aec <_spi_context_cs_control>:
{
   56aec:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   56aee:	6803      	ldr	r3, [r0, #0]
{
   56af0:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   56af2:	b1e3      	cbz	r3, 56b2e <_spi_context_cs_control+0x42>
   56af4:	6898      	ldr	r0, [r3, #8]
   56af6:	b1d0      	cbz	r0, 56b2e <_spi_context_cs_control+0x42>
   56af8:	6805      	ldr	r5, [r0, #0]
   56afa:	b1c5      	cbz	r5, 56b2e <_spi_context_cs_control+0x42>
		if (on) {
   56afc:	b149      	cbz	r1, 56b12 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   56afe:	2101      	movs	r1, #1
   56b00:	f7ff ffe0 	bl	56ac4 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   56b04:	6823      	ldr	r3, [r4, #0]
   56b06:	689b      	ldr	r3, [r3, #8]
   56b08:	6898      	ldr	r0, [r3, #8]
}
   56b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   56b0e:	f004 b909 	b.w	5ad24 <z_impl_k_busy_wait>
			if (!force_off &&
   56b12:	b912      	cbnz	r2, 56b1a <_spi_context_cs_control+0x2e>
   56b14:	889b      	ldrh	r3, [r3, #4]
   56b16:	04db      	lsls	r3, r3, #19
   56b18:	d409      	bmi.n	56b2e <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   56b1a:	6880      	ldr	r0, [r0, #8]
   56b1c:	f004 f902 	bl	5ad24 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   56b20:	6823      	ldr	r3, [r4, #0]
   56b22:	2100      	movs	r1, #0
   56b24:	6898      	ldr	r0, [r3, #8]
}
   56b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   56b2a:	f7ff bfcb 	b.w	56ac4 <gpio_pin_set_dt.isra.0>
}
   56b2e:	bd38      	pop	{r3, r4, r5, pc}

00056b30 <spi_context_unlock_unconditionally>:
{
   56b30:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   56b32:	2201      	movs	r2, #1
   56b34:	2100      	movs	r1, #0
{
   56b36:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   56b38:	f7ff ffd8 	bl	56aec <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   56b3c:	69a3      	ldr	r3, [r4, #24]
   56b3e:	b933      	cbnz	r3, 56b4e <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   56b40:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   56b42:	f104 0010 	add.w	r0, r4, #16
}
   56b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   56b4a:	f7fb bdcd 	b.w	526e8 <z_impl_k_sem_give>
   56b4e:	bd10      	pop	{r4, pc}

00056b50 <spi_nrfx_release>:
{
   56b50:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   56b52:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   56b54:	6803      	ldr	r3, [r0, #0]
   56b56:	428b      	cmp	r3, r1
   56b58:	d106      	bne.n	56b68 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   56b5a:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   56b5e:	b934      	cbnz	r4, 56b6e <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   56b60:	f7ff ffe6 	bl	56b30 <spi_context_unlock_unconditionally>
	return 0;
   56b64:	4620      	mov	r0, r4
}
   56b66:	bd10      	pop	{r4, pc}
		return -EINVAL;
   56b68:	f06f 0015 	mvn.w	r0, #21
   56b6c:	e7fb      	b.n	56b66 <spi_nrfx_release+0x16>
		return -EBUSY;
   56b6e:	f06f 000f 	mvn.w	r0, #15
   56b72:	e7f8      	b.n	56b66 <spi_nrfx_release+0x16>

00056b74 <gpio_pin_set_dt>:
{
   56b74:	4603      	mov	r3, r0
   56b76:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   56b78:	7919      	ldrb	r1, [r3, #4]
   56b7a:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   56b7c:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   56b7e:	fa03 f101 	lsl.w	r1, r3, r1
   56b82:	6903      	ldr	r3, [r0, #16]
   56b84:	681b      	ldr	r3, [r3, #0]
   56b86:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   56b88:	bf18      	it	ne
   56b8a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   56b8e:	b112      	cbz	r2, 56b96 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   56b90:	6883      	ldr	r3, [r0, #8]
   56b92:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   56b94:	4718      	bx	r3
   56b96:	6883      	ldr	r3, [r0, #8]
   56b98:	691b      	ldr	r3, [r3, #16]
   56b9a:	e7fb      	b.n	56b94 <gpio_pin_set_dt+0x20>

00056b9c <spi_transceive>:

extern int z_impl_spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs);

__pinned_func
static inline int spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs)
{
   56b9c:	b410      	push	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   56b9e:	6884      	ldr	r4, [r0, #8]
   56ba0:	6824      	ldr	r4, [r4, #0]
   56ba2:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_SPI_TRANSCEIVE);
	}
#endif
	compiler_barrier();
	return z_impl_spi_transceive(dev, config, tx_bufs, rx_bufs);
}
   56ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
   56ba8:	4760      	bx	ip

00056baa <sdhc_spi_card_busy>:
{
   56baa:	b507      	push	{r0, r1, r2, lr}
	ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg, &response, 1);
   56bac:	6901      	ldr	r1, [r0, #16]
   56bae:	6840      	ldr	r0, [r0, #4]
   56bb0:	2301      	movs	r3, #1
   56bb2:	6849      	ldr	r1, [r1, #4]
   56bb4:	6800      	ldr	r0, [r0, #0]
   56bb6:	f10d 0207 	add.w	r2, sp, #7
   56bba:	f7f2 f8a9 	bl	48d10 <sdhc_spi_rx>
	if (ret) {
   56bbe:	b938      	cbnz	r0, 56bd0 <sdhc_spi_card_busy+0x26>
	if (response == 0xFF) {
   56bc0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   56bc4:	38ff      	subs	r0, #255	; 0xff
   56bc6:	bf18      	it	ne
   56bc8:	2001      	movne	r0, #1
}
   56bca:	b003      	add	sp, #12
   56bcc:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EIO;
   56bd0:	f06f 0004 	mvn.w	r0, #4
   56bd4:	e7f9      	b.n	56bca <sdhc_spi_card_busy+0x20>

00056bd6 <sdhc_spi_get_card_present>:
}
   56bd6:	2001      	movs	r0, #1
   56bd8:	4770      	bx	lr

00056bda <sdhc_spi_init>:

static int sdhc_spi_init(const struct device *dev)
{
   56bda:	b510      	push	{r4, lr}
	const struct sdhc_spi_config *cfg = dev->config;
	struct sdhc_spi_data *data = dev->data;

	if (!device_is_ready(cfg->spi_dev)) {
   56bdc:	6843      	ldr	r3, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   56bde:	6904      	ldr	r4, [r0, #16]
	if (!device_is_ready(cfg->spi_dev)) {
   56be0:	6818      	ldr	r0, [r3, #0]
   56be2:	f003 fd6e 	bl	5a6c2 <z_device_is_ready>
   56be6:	b138      	cbz	r0, 56bf8 <sdhc_spi_init+0x1e>
		return -ENODEV;
	}
	data->power_mode = SDHC_POWER_OFF;
   56be8:	4623      	mov	r3, r4
   56bea:	2201      	movs	r2, #1
	data->spi_cfg = &data->cfg_a;
	data->spi_cfg->frequency = 0;
   56bec:	2000      	movs	r0, #0
	data->power_mode = SDHC_POWER_OFF;
   56bee:	f803 2b08 	strb.w	r2, [r3], #8
	data->spi_cfg = &data->cfg_a;
   56bf2:	6063      	str	r3, [r4, #4]
	data->spi_cfg->frequency = 0;
   56bf4:	60a0      	str	r0, [r4, #8]
	return 0;
}
   56bf6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   56bf8:	f06f 0012 	mvn.w	r0, #18
   56bfc:	e7fb      	b.n	56bf6 <sdhc_spi_init+0x1c>

00056bfe <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   56bfe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   56c00:	ab0b      	add	r3, sp, #44	; 0x2c
   56c02:	9305      	str	r3, [sp, #20]
   56c04:	9303      	str	r3, [sp, #12]
   56c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   56c08:	2201      	movs	r2, #1
   56c0a:	9302      	str	r3, [sp, #8]
   56c0c:	2300      	movs	r3, #0
   56c0e:	4618      	mov	r0, r3
   56c10:	e9cd 3300 	strd	r3, r3, [sp]
   56c14:	f7ee fb0c 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   56c18:	b007      	add	sp, #28
   56c1a:	f85d fb04 	ldr.w	pc, [sp], #4

00056c1e <sdhc_spi_wait_unbusy>:
{
   56c1e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
			return (uint32_t)((t * to_hz + off) / from_hz);
   56c22:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			return ((t * to_hz + off) / from_hz);
   56c26:	f240 33e7 	movw	r3, #999	; 0x3e7
			return (uint32_t)((t * to_hz + off) / from_hz);
   56c2a:	fb82 2505 	smull	r2, r5, r2, r5
   56c2e:	0bd4      	lsrs	r4, r2, #15
   56c30:	ea44 4445 	orr.w	r4, r4, r5, lsl #17
			return ((t * to_hz + off) / from_hz);
   56c34:	f425 45ff 	bic.w	r5, r5, #32640	; 0x7f80
	const struct sdhc_spi_config *config = dev->config;
   56c38:	6847      	ldr	r7, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
   56c3a:	f8d0 8010 	ldr.w	r8, [r0, #16]
   56c3e:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
   56c42:	03e0      	lsls	r0, r4, #15
   56c44:	18c0      	adds	r0, r0, r3
   56c46:	ea45 4554 	orr.w	r5, r5, r4, lsr #17
{
   56c4a:	460e      	mov	r6, r1
   56c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   56c50:	f145 0100 	adc.w	r1, r5, #0
   56c54:	2300      	movs	r3, #0
   56c56:	f7e9 ff5b 	bl	40b10 <__aeabi_uldivmod>
   56c5a:	4605      	mov	r5, r0
   56c5c:	4689      	mov	r9, r1
	while (timeout_ms > 0) {
   56c5e:	2e00      	cmp	r6, #0
   56c60:	dc04      	bgt.n	56c6c <sdhc_spi_wait_unbusy+0x4e>
	return -ETIMEDOUT;
   56c62:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   56c66:	b003      	add	sp, #12
   56c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg, &response, 1);
   56c6c:	2301      	movs	r3, #1
   56c6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   56c72:	6838      	ldr	r0, [r7, #0]
   56c74:	f10d 0207 	add.w	r2, sp, #7
   56c78:	f7f2 f84a 	bl	48d10 <sdhc_spi_rx>
		if (ret) {
   56c7c:	2800      	cmp	r0, #0
   56c7e:	d1f2      	bne.n	56c66 <sdhc_spi_wait_unbusy+0x48>
		if (response == 0xFF) {
   56c80:	f89d 3007 	ldrb.w	r3, [sp, #7]
   56c84:	2bff      	cmp	r3, #255	; 0xff
   56c86:	d0ee      	beq.n	56c66 <sdhc_spi_wait_unbusy+0x48>
	return z_impl_k_sleep(timeout);
   56c88:	4628      	mov	r0, r5
   56c8a:	4649      	mov	r1, r9
   56c8c:	f7fc f93e 	bl	52f0c <z_impl_k_sleep>
		timeout_ms -= k_ticks_to_ms_floor32(interval_ticks);
   56c90:	1b36      	subs	r6, r6, r4
   56c92:	e7e4      	b.n	56c5e <sdhc_spi_wait_unbusy+0x40>

00056c94 <sdhc_spi_send_cmd>:
{
   56c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	const struct spi_buf_set buf_set = {
   56c98:	2301      	movs	r3, #1
		bufs[0].len = SD_SPI_CMD_SIZE + 3;
   56c9a:	2a00      	cmp	r2, #0
	const struct spi_buf_set buf_set = {
   56c9c:	9303      	str	r3, [sp, #12]
{
   56c9e:	460d      	mov	r5, r1
		bufs[0].len = SD_SPI_CMD_SIZE + 3;
   56ca0:	bf0c      	ite	eq
   56ca2:	2315      	moveq	r3, #21
   56ca4:	2309      	movne	r3, #9
	struct sdhc_spi_data *dev_data = dev->data;
   56ca6:	6904      	ldr	r4, [r0, #16]
	const struct sdhc_spi_config *config = dev->config;
   56ca8:	6846      	ldr	r6, [r0, #4]
__ssp_bos_icheck3(memset, void *, int)
   56caa:	2215      	movs	r2, #21
   56cac:	21ff      	movs	r1, #255	; 0xff
{
   56cae:	4681      	mov	r9, r0
			.buf = dev_data->scratch,
   56cb0:	f104 0020 	add.w	r0, r4, #32
   56cb4:	9301      	str	r3, [sp, #4]
	struct spi_buf bufs[] = {
   56cb6:	9000      	str	r0, [sp, #0]
	const struct spi_buf_set buf_set = {
   56cb8:	f8cd d008 	str.w	sp, [sp, #8]
   56cbc:	f004 f94c 	bl	5af58 <memset>
	cmd_buf[0] = (cmd->opcode & SD_SPI_CMD);
   56cc0:	682b      	ldr	r3, [r5, #0]
	cmd_buf[SD_SPI_CMD_BODY_SIZE] = crc7_be(0, cmd_buf, SD_SPI_CMD_BODY_SIZE) | 0x1;
   56cc2:	2000      	movs	r0, #0
	cmd_buf[0] = (cmd->opcode & SD_SPI_CMD);
   56cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	cmd_buf[0] = ((cmd_buf[0] | SD_SPI_TX) & ~SD_SPI_START);
   56cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   56ccc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	sys_put_be32(cmd->arg, &cmd_buf[1]);
   56cd0:	686b      	ldr	r3, [r5, #4]
 *  @param val 32-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_be32(uint32_t val, uint8_t dst[4])
{
	sys_put_be16(val >> 16, dst);
   56cd2:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   56cd4:	0e19      	lsrs	r1, r3, #24
	dst[1] = val;
   56cd6:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	dst[0] = val >> 8;
   56cda:	f3c3 2207 	ubfx	r2, r3, #8, #8
   56cde:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
   56ce2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	dst[1] = val;
   56ce6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	cmd_buf[SD_SPI_CMD_BODY_SIZE] = crc7_be(0, cmd_buf, SD_SPI_CMD_BODY_SIZE) | 0x1;
   56cea:	f104 0121 	add.w	r1, r4, #33	; 0x21
   56cee:	2205      	movs	r2, #5
   56cf0:	f7fe fd22 	bl	55738 <crc7_be>
   56cf4:	f040 0001 	orr.w	r0, r0, #1
   56cf8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
	err = spi_transceive(config->spi_dev, dev_data->spi_cfg, &buf_set, &buf_set);
   56cfc:	ab02      	add	r3, sp, #8
   56cfe:	6861      	ldr	r1, [r4, #4]
   56d00:	461a      	mov	r2, r3
   56d02:	6830      	ldr	r0, [r6, #0]
   56d04:	f7ff ff4a 	bl	56b9c <spi_transceive>
	if (err != 0) {
   56d08:	4604      	mov	r4, r0
   56d0a:	2800      	cmp	r0, #0
   56d0c:	d146      	bne.n	56d9c <sdhc_spi_send_cmd+0x108>
	struct sdhc_spi_data *dev_data = dev->data;
   56d0e:	f8d9 6010 	ldr.w	r6, [r9, #16]
	uint8_t *end = response + rx_len;
   56d12:	9f01      	ldr	r7, [sp, #4]
	uint8_t *response = dev_data->scratch;
   56d14:	f106 0820 	add.w	r8, r6, #32
	const struct sdhc_spi_config *config = dev->config;
   56d18:	f8d9 a004 	ldr.w	sl, [r9, #4]
	uint8_t *end = response + rx_len;
   56d1c:	4447      	add	r7, r8
	response += 8;
   56d1e:	f106 0228 	add.w	r2, r6, #40	; 0x28
	while (response < end && ((*response & SD_SPI_START) == SD_SPI_START)) {
   56d22:	4297      	cmp	r7, r2
   56d24:	4613      	mov	r3, r2
   56d26:	d81f      	bhi.n	56d68 <sdhc_spi_send_cmd+0xd4>
	if (response == end) {
   56d28:	d024      	beq.n	56d74 <sdhc_spi_send_cmd+0xe0>
	cmd->response[0] = *response++;
   56d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
   56d2e:	60aa      	str	r2, [r5, #8]
	if (cmd->response[0] != 0) {
   56d30:	b16a      	cbz	r2, 56d4e <sdhc_spi_send_cmd+0xba>
		if (cmd->response[0] &	(SD_SPI_R1PARAMETER_ERR | SD_SPI_R1ADDRESS_ERR)) {
   56d32:	f012 0f60 	tst.w	r2, #96	; 0x60
   56d36:	f040 8082 	bne.w	56e3e <sdhc_spi_send_cmd+0x1aa>
		} else if (cmd->response[0] & (SD_SPI_R1ILLEGAL_CMD_ERR)) {
   56d3a:	0750      	lsls	r0, r2, #29
   56d3c:	f100 8082 	bmi.w	56e44 <sdhc_spi_send_cmd+0x1b0>
		} else if (cmd->response[0] & (SD_SPI_R1CMD_CRC_ERR)) {
   56d40:	0711      	lsls	r1, r2, #28
   56d42:	f100 8082 	bmi.w	56e4a <sdhc_spi_send_cmd+0x1b6>
		} else if (cmd->response[0] & (SD_SPI_R1ERASE_SEQ_ERR | SD_SPI_R1ERASE_RESET)) {
   56d46:	f012 0f12 	tst.w	r2, #18
   56d4a:	f040 8081 	bne.w	56e50 <sdhc_spi_send_cmd+0x1bc>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
   56d4e:	69a9      	ldr	r1, [r5, #24]
   56d50:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
   56d54:	2a30      	cmp	r2, #48	; 0x30
   56d56:	d063      	beq.n	56e20 <sdhc_spi_send_cmd+0x18c>
   56d58:	d828      	bhi.n	56dac <sdhc_spi_send_cmd+0x118>
   56d5a:	2a10      	cmp	r2, #16
   56d5c:	d01e      	beq.n	56d9c <sdhc_spi_send_cmd+0x108>
   56d5e:	2a20      	cmp	r2, #32
   56d60:	d052      	beq.n	56e08 <sdhc_spi_send_cmd+0x174>
   56d62:	f06f 0485 	mvn.w	r4, #133	; 0x85
   56d66:	e019      	b.n	56d9c <sdhc_spi_send_cmd+0x108>
	while (response < end && ((*response & SD_SPI_START) == SD_SPI_START)) {
   56d68:	f993 1000 	ldrsb.w	r1, [r3]
   56d6c:	3201      	adds	r2, #1
   56d6e:	2900      	cmp	r1, #0
   56d70:	dbd7      	blt.n	56d22 <sdhc_spi_send_cmd+0x8e>
   56d72:	e7da      	b.n	56d2a <sdhc_spi_send_cmd+0x96>
   56d74:	2710      	movs	r7, #16
			ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
   56d76:	2301      	movs	r3, #1
   56d78:	4642      	mov	r2, r8
   56d7a:	6871      	ldr	r1, [r6, #4]
   56d7c:	f8da 0000 	ldr.w	r0, [sl]
   56d80:	f7f1 ffc6 	bl	48d10 <sdhc_spi_rx>
			if (ret < 0) {
   56d84:	2800      	cmp	r0, #0
   56d86:	db66      	blt.n	56e56 <sdhc_spi_send_cmd+0x1c2>
			if (*response != 0xff) {
   56d88:	f896 3020 	ldrb.w	r3, [r6, #32]
   56d8c:	2bff      	cmp	r3, #255	; 0xff
   56d8e:	d109      	bne.n	56da4 <sdhc_spi_send_cmd+0x110>
		for (i = 0; i < 16; i++) {
   56d90:	3f01      	subs	r7, #1
   56d92:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   56d96:	d1ee      	bne.n	56d76 <sdhc_spi_send_cmd+0xe2>
			return -ETIMEDOUT;
   56d98:	f06f 0473 	mvn.w	r4, #115	; 0x73
}
   56d9c:	4620      	mov	r0, r4
   56d9e:	b004      	add	sp, #16
   56da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		response = dev_data->scratch;
   56da4:	4643      	mov	r3, r8
		end = response + 1;
   56da6:	f106 0721 	add.w	r7, r6, #33	; 0x21
   56daa:	e7be      	b.n	56d2a <sdhc_spi_send_cmd+0x96>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
   56dac:	2a60      	cmp	r2, #96	; 0x60
   56dae:	d037      	beq.n	56e20 <sdhc_spi_send_cmd+0x18c>
   56db0:	d824      	bhi.n	56dfc <sdhc_spi_send_cmd+0x168>
   56db2:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
   56db6:	2940      	cmp	r1, #64	; 0x40
   56db8:	d1d3      	bne.n	56d62 <sdhc_spi_send_cmd+0xce>
		cmd->response[1] = 0;
   56dba:	2200      	movs	r2, #0
   56dbc:	f04f 0904 	mov.w	r9, #4
   56dc0:	60ea      	str	r2, [r5, #12]
			cmd->response[1] <<= 8;
   56dc2:	68ea      	ldr	r2, [r5, #12]
			if (response == end) {
   56dc4:	42bb      	cmp	r3, r7
			cmd->response[1] <<= 8;
   56dc6:	ea4f 2202 	mov.w	r2, r2, lsl #8
   56dca:	60ea      	str	r2, [r5, #12]
			if (response == end) {
   56dcc:	d10b      	bne.n	56de6 <sdhc_spi_send_cmd+0x152>
				ret = sdhc_spi_rx(config->spi_dev,
   56dce:	2301      	movs	r3, #1
   56dd0:	4642      	mov	r2, r8
   56dd2:	6871      	ldr	r1, [r6, #4]
   56dd4:	f8da 0000 	ldr.w	r0, [sl]
				end = response + 1;
   56dd8:	f106 0721 	add.w	r7, r6, #33	; 0x21
				ret = sdhc_spi_rx(config->spi_dev,
   56ddc:	f7f1 ff98 	bl	48d10 <sdhc_spi_rx>
				if (ret) {
   56de0:	2800      	cmp	r0, #0
   56de2:	d138      	bne.n	56e56 <sdhc_spi_send_cmd+0x1c2>
				response = dev_data->scratch;
   56de4:	4643      	mov	r3, r8
			cmd->response[1] |= *response++;
   56de6:	f813 1b01 	ldrb.w	r1, [r3], #1
   56dea:	68ea      	ldr	r2, [r5, #12]
		for (i = 0; i < 4; i++) {
   56dec:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
			cmd->response[1] |= *response++;
   56df0:	430a      	orrs	r2, r1
		for (i = 0; i < 4; i++) {
   56df2:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
			cmd->response[1] |= *response++;
   56df6:	60ea      	str	r2, [r5, #12]
		for (i = 0; i < 4; i++) {
   56df8:	d1e3      	bne.n	56dc2 <sdhc_spi_send_cmd+0x12e>
   56dfa:	e7cf      	b.n	56d9c <sdhc_spi_send_cmd+0x108>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
   56dfc:	2a70      	cmp	r2, #112	; 0x70
   56dfe:	e7db      	b.n	56db8 <sdhc_spi_send_cmd+0x124>
		while (response < end && (*response == 0x0)) {
   56e00:	7812      	ldrb	r2, [r2, #0]
   56e02:	3301      	adds	r3, #1
   56e04:	2a00      	cmp	r2, #0
   56e06:	d1c9      	bne.n	56d9c <sdhc_spi_send_cmd+0x108>
   56e08:	42bb      	cmp	r3, r7
   56e0a:	461a      	mov	r2, r3
   56e0c:	d3f8      	bcc.n	56e00 <sdhc_spi_send_cmd+0x16c>
		if (response == end) {
   56e0e:	d1c5      	bne.n	56d9c <sdhc_spi_send_cmd+0x108>
			ret = sdhc_spi_wait_unbusy(dev,
   56e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   56e14:	f640 31b8 	movw	r1, #3000	; 0xbb8
   56e18:	4648      	mov	r0, r9
   56e1a:	f7ff ff00 	bl	56c1e <sdhc_spi_wait_unbusy>
   56e1e:	e7bd      	b.n	56d9c <sdhc_spi_send_cmd+0x108>
		if (response == end) {
   56e20:	42bb      	cmp	r3, r7
   56e22:	d108      	bne.n	56e36 <sdhc_spi_send_cmd+0x1a2>
			ret = sdhc_spi_rx(config->spi_dev,
   56e24:	2301      	movs	r3, #1
   56e26:	4642      	mov	r2, r8
   56e28:	6871      	ldr	r1, [r6, #4]
   56e2a:	f8da 0000 	ldr.w	r0, [sl]
   56e2e:	f7f1 ff6f 	bl	48d10 <sdhc_spi_rx>
			if (ret) {
   56e32:	b980      	cbnz	r0, 56e56 <sdhc_spi_send_cmd+0x1c2>
			response = dev_data->scratch;
   56e34:	4643      	mov	r3, r8
		cmd->response[0] = (*response) << 8;
   56e36:	781b      	ldrb	r3, [r3, #0]
   56e38:	021b      	lsls	r3, r3, #8
   56e3a:	60ab      	str	r3, [r5, #8]
		break;
   56e3c:	e7ae      	b.n	56d9c <sdhc_spi_send_cmd+0x108>
			return -EFAULT; /* Bad address */
   56e3e:	f06f 040d 	mvn.w	r4, #13
   56e42:	e7ab      	b.n	56d9c <sdhc_spi_send_cmd+0x108>
			return -EINVAL; /* Invalid command */
   56e44:	f06f 0415 	mvn.w	r4, #21
   56e48:	e7a8      	b.n	56d9c <sdhc_spi_send_cmd+0x108>
			return -EILSEQ; /* Illegal byte sequence */
   56e4a:	f06f 0489 	mvn.w	r4, #137	; 0x89
   56e4e:	e7a5      	b.n	56d9c <sdhc_spi_send_cmd+0x108>
			return -EIO;
   56e50:	f06f 0404 	mvn.w	r4, #4
   56e54:	e7a2      	b.n	56d9c <sdhc_spi_send_cmd+0x108>
				ret = sdhc_spi_rx(config->spi_dev,
   56e56:	4604      	mov	r4, r0
   56e58:	e7a0      	b.n	56d9c <sdhc_spi_send_cmd+0x108>

00056e5a <uarte_nrfx_config_get>:
{
   56e5a:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   56e5c:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   56e5e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   56e62:	e883 0003 	stmia.w	r3, {r0, r1}
}
   56e66:	2000      	movs	r0, #0
   56e68:	4770      	bx	lr

00056e6a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   56e6a:	6843      	ldr	r3, [r0, #4]
   56e6c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   56e6e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   56e72:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   56e76:	4770      	bx	lr

00056e78 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   56e78:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   56e7a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   56e7c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   56e7e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   56e82:	b150      	cbz	r0, 56e9a <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   56e84:	2000      	movs	r0, #0
	*c = *data->rx_data;
   56e86:	6992      	ldr	r2, [r2, #24]
   56e88:	7812      	ldrb	r2, [r2, #0]
   56e8a:	700a      	strb	r2, [r1, #0]
   56e8c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   56e90:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   56e94:	2201      	movs	r2, #1
   56e96:	601a      	str	r2, [r3, #0]
	return 0;
   56e98:	4770      	bx	lr
		return -1;
   56e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   56e9e:	4770      	bx	lr

00056ea0 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   56ea0:	2a00      	cmp	r2, #0
{
   56ea2:	b510      	push	{r4, lr}
   56ea4:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   56ea6:	dd10      	ble.n	56eca <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
   56ea8:	6843      	ldr	r3, [r0, #4]
   56eaa:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   56eac:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   56eb0:	b150      	cbz	r0, 56ec8 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   56eb2:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
   56eb4:	6922      	ldr	r2, [r4, #16]
   56eb6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   56eba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   56ebe:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
   56ec0:	6992      	ldr	r2, [r2, #24]
   56ec2:	7812      	ldrb	r2, [r2, #0]
   56ec4:	700a      	strb	r2, [r1, #0]
   56ec6:	6018      	str	r0, [r3, #0]
}
   56ec8:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   56eca:	2000      	movs	r0, #0
   56ecc:	e7fc      	b.n	56ec8 <uarte_nrfx_fifo_read+0x28>

00056ece <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   56ece:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   56ed0:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   56ed2:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   56ed4:	f04f 0020 	mov.w	r0, #32
   56ed8:	f3ef 8311 	mrs	r3, BASEPRI
   56edc:	f380 8812 	msr	BASEPRI_MAX, r0
   56ee0:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   56ee4:	2000      	movs	r0, #0
   56ee6:	68c9      	ldr	r1, [r1, #12]
   56ee8:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   56eea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   56eee:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   56ef2:	f383 8811 	msr	BASEPRI, r3
   56ef6:	f3bf 8f6f 	isb	sy
}
   56efa:	4770      	bx	lr

00056efc <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   56efc:	2201      	movs	r2, #1
   56efe:	6903      	ldr	r3, [r0, #16]
   56f00:	68db      	ldr	r3, [r3, #12]
   56f02:	739a      	strb	r2, [r3, #14]
}
   56f04:	4770      	bx	lr

00056f06 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   56f06:	6903      	ldr	r3, [r0, #16]
   56f08:	68db      	ldr	r3, [r3, #12]
   56f0a:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   56f0c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   56f10:	b962      	cbnz	r2, 56f2c <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   56f12:	6842      	ldr	r2, [r0, #4]
   56f14:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   56f16:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   56f1a:	b140      	cbz	r0, 56f2e <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   56f1c:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   56f20:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   56f24:	d003      	beq.n	56f2e <uarte_nrfx_irq_tx_ready_complete+0x28>
   56f26:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   56f28:	6119      	str	r1, [r3, #16]
   56f2a:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   56f2c:	2000      	movs	r0, #0
}
   56f2e:	4770      	bx	lr

00056f30 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   56f30:	6843      	ldr	r3, [r0, #4]
   56f32:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   56f34:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   56f38:	3800      	subs	r0, #0
   56f3a:	bf18      	it	ne
   56f3c:	2001      	movne	r0, #1
   56f3e:	4770      	bx	lr

00056f40 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   56f40:	2210      	movs	r2, #16
	return config->uarte_regs;
   56f42:	6843      	ldr	r3, [r0, #4]
   56f44:	681b      	ldr	r3, [r3, #0]
   56f46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   56f4a:	4770      	bx	lr

00056f4c <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   56f4c:	2210      	movs	r2, #16
	return config->uarte_regs;
   56f4e:	6843      	ldr	r3, [r0, #4]
   56f50:	681b      	ldr	r3, [r3, #0]
   56f52:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   56f56:	4770      	bx	lr

00056f58 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   56f58:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   56f5c:	6843      	ldr	r3, [r0, #4]
   56f5e:	681b      	ldr	r3, [r3, #0]
   56f60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   56f64:	4770      	bx	lr

00056f66 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   56f66:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   56f6a:	6843      	ldr	r3, [r0, #4]
   56f6c:	681b      	ldr	r3, [r3, #0]
   56f6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   56f72:	4770      	bx	lr

00056f74 <uarte_nrfx_irq_is_pending>:
{
   56f74:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   56f76:	6843      	ldr	r3, [r0, #4]
{
   56f78:	4604      	mov	r4, r0
	return config->uarte_regs;
   56f7a:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   56f7c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   56f80:	025b      	lsls	r3, r3, #9
   56f82:	d405      	bmi.n	56f90 <uarte_nrfx_irq_is_pending+0x1c>
   56f84:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   56f88:	f010 0010 	ands.w	r0, r0, #16
   56f8c:	d106      	bne.n	56f9c <uarte_nrfx_irq_is_pending+0x28>
}
   56f8e:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   56f90:	f7ff ffb9 	bl	56f06 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   56f94:	2800      	cmp	r0, #0
   56f96:	d0f5      	beq.n	56f84 <uarte_nrfx_irq_is_pending+0x10>
		||
   56f98:	2001      	movs	r0, #1
   56f9a:	e7f8      	b.n	56f8e <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   56f9c:	4620      	mov	r0, r4
   56f9e:	f7ff ffc7 	bl	56f30 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   56fa2:	3800      	subs	r0, #0
   56fa4:	bf18      	it	ne
   56fa6:	2001      	movne	r0, #1
   56fa8:	e7f1      	b.n	56f8e <uarte_nrfx_irq_is_pending+0x1a>

00056faa <uarte_nrfx_irq_update>:
}
   56faa:	2001      	movs	r0, #1
   56fac:	4770      	bx	lr

00056fae <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   56fae:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   56fb0:	68d8      	ldr	r0, [r3, #12]
   56fb2:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   56fb4:	68db      	ldr	r3, [r3, #12]
   56fb6:	605a      	str	r2, [r3, #4]
}
   56fb8:	4770      	bx	lr

00056fba <tx_start>:
{
   56fba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
   56fbe:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   56fc2:	460f      	mov	r7, r1
	(void)pm_device_state_get(dev, &state);
   56fc4:	f10d 0107 	add.w	r1, sp, #7
{
   56fc8:	4605      	mov	r5, r0
   56fca:	4616      	mov	r6, r2
	return config->uarte_regs;
   56fcc:	f8d8 4000 	ldr.w	r4, [r8]
	(void)pm_device_state_get(dev, &state);
   56fd0:	f7fe ffed 	bl	55fae <pm_device_state_get>
	if (state != PM_DEVICE_STATE_ACTIVE) {
   56fd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   56fd8:	b9d3      	cbnz	r3, 57010 <tx_start+0x56>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   56fda:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   56fde:	f8c4 6548 	str.w	r6, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   56fe2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   56fe6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   56fea:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   56fee:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   56ff2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   56ff6:	06db      	lsls	r3, r3, #27
   56ff8:	d508      	bpl.n	5700c <tx_start+0x52>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   56ffa:	2208      	movs	r2, #8
	return config->uarte_regs;
   56ffc:	686b      	ldr	r3, [r5, #4]
   56ffe:	681b      	ldr	r3, [r3, #0]
   57000:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   57004:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   57008:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   5700c:	2301      	movs	r3, #1
   5700e:	60a3      	str	r3, [r4, #8]
}
   57010:	b002      	add	sp, #8
   57012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00057016 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   57016:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   57018:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   5701a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   5701e:	b940      	cbnz	r0, 57032 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   57020:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   57022:	079b      	lsls	r3, r3, #30
   57024:	d406      	bmi.n	57034 <is_tx_ready.isra.0+0x1e>
   57026:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   5702a:	3800      	subs	r0, #0
   5702c:	bf18      	it	ne
   5702e:	2001      	movne	r0, #1
   57030:	4770      	bx	lr
   57032:	2001      	movs	r0, #1
}
   57034:	4770      	bx	lr

00057036 <uarte_nrfx_fifo_fill>:
{
   57036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   57038:	6906      	ldr	r6, [r0, #16]
{
   5703a:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   5703c:	68f3      	ldr	r3, [r6, #12]
   5703e:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   57040:	3310      	adds	r3, #16
   57042:	4294      	cmp	r4, r2
   57044:	bfa8      	it	ge
   57046:	4614      	movge	r4, r2
   57048:	2201      	movs	r2, #1
   5704a:	e8d3 0fef 	ldaex	r0, [r3]
   5704e:	2800      	cmp	r0, #0
   57050:	d103      	bne.n	5705a <uarte_nrfx_fifo_fill+0x24>
   57052:	e8c3 2fe7 	stlex	r7, r2, [r3]
   57056:	2f00      	cmp	r7, #0
   57058:	d1f7      	bne.n	5704a <uarte_nrfx_fifo_fill+0x14>
   5705a:	bf0c      	ite	eq
   5705c:	4613      	moveq	r3, r2
   5705e:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   57060:	d11f      	bne.n	570a2 <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   57062:	68f3      	ldr	r3, [r6, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   57064:	4622      	mov	r2, r4
   57066:	6898      	ldr	r0, [r3, #8]
   57068:	f003 ff3c 	bl	5aee4 <memcpy>
	__asm__ volatile(
   5706c:	f04f 0320 	mov.w	r3, #32
   57070:	f3ef 8711 	mrs	r7, BASEPRI
   57074:	f383 8812 	msr	BASEPRI_MAX, r3
   57078:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   5707c:	6868      	ldr	r0, [r5, #4]
   5707e:	f7ff ffca 	bl	57016 <is_tx_ready.isra.0>
   57082:	68f3      	ldr	r3, [r6, #12]
   57084:	b938      	cbnz	r0, 57096 <uarte_nrfx_fifo_fill+0x60>
		len = 0;
   57086:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   57088:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   5708a:	f387 8811 	msr	BASEPRI, r7
   5708e:	f3bf 8f6f 	isb	sy
}
   57092:	4620      	mov	r0, r4
   57094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   57096:	4622      	mov	r2, r4
   57098:	4628      	mov	r0, r5
   5709a:	6899      	ldr	r1, [r3, #8]
   5709c:	f7ff ff8d 	bl	56fba <tx_start>
   570a0:	e7f3      	b.n	5708a <uarte_nrfx_fifo_fill+0x54>
		return 0;
   570a2:	461c      	mov	r4, r3
   570a4:	e7f5      	b.n	57092 <uarte_nrfx_fifo_fill+0x5c>

000570a6 <uarte_nrfx_isr_int>:
{
   570a6:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
   570a8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   570aa:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   570ac:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   570b0:	05c9      	lsls	r1, r1, #23
   570b2:	d518      	bpl.n	570e6 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   570b4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   570b8:	b1a9      	cbz	r1, 570e6 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   570ba:	f04f 0420 	mov.w	r4, #32
   570be:	f3ef 8111 	mrs	r1, BASEPRI
   570c2:	f384 8812 	msr	BASEPRI_MAX, r4
   570c6:	f3bf 8f6f 	isb	sy
   570ca:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   570ce:	b134      	cbz	r4, 570de <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   570d0:	2400      	movs	r4, #0
   570d2:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   570d6:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   570da:	2401      	movs	r4, #1
   570dc:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   570de:	f381 8811 	msr	BASEPRI, r1
   570e2:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   570e6:	6852      	ldr	r2, [r2, #4]
   570e8:	06d2      	lsls	r2, r2, #27
   570ea:	d51a      	bpl.n	57122 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   570ec:	f04f 0220 	mov.w	r2, #32
   570f0:	f3ef 8111 	mrs	r1, BASEPRI
   570f4:	f382 8812 	msr	BASEPRI_MAX, r2
   570f8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   570fc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   57100:	b112      	cbz	r2, 57108 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   57102:	2200      	movs	r2, #0
   57104:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   57108:	6902      	ldr	r2, [r0, #16]
   5710a:	68d2      	ldr	r2, [r2, #12]
   5710c:	b10a      	cbz	r2, 57112 <uarte_nrfx_isr_int+0x6c>
   5710e:	6912      	ldr	r2, [r2, #16]
   57110:	b91a      	cbnz	r2, 5711a <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   57112:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   57116:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   5711a:	f381 8811 	msr	BASEPRI, r1
   5711e:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
   57122:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
   57124:	68d4      	ldr	r4, [r2, #12]
   57126:	b16c      	cbz	r4, 57144 <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   57128:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   5712c:	b169      	cbz	r1, 5714a <uarte_nrfx_isr_int+0xa4>
		data->int_driven->fifo_fill_lock = 0;
   5712e:	2100      	movs	r1, #0
   57130:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
   57132:	68d4      	ldr	r4, [r2, #12]
   57134:	7ba4      	ldrb	r4, [r4, #14]
   57136:	b144      	cbz	r4, 5714a <uarte_nrfx_isr_int+0xa4>
    p_reg->INTENCLR = mask;
   57138:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   5713c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   57140:	68d3      	ldr	r3, [r2, #12]
   57142:	7399      	strb	r1, [r3, #14]
}
   57144:	f85d 4b04 	ldr.w	r4, [sp], #4
   57148:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   5714a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   5714e:	b121      	cbz	r1, 5715a <uarte_nrfx_isr_int+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   57150:	2100      	movs	r1, #0
   57152:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   57156:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   5715a:	68d2      	ldr	r2, [r2, #12]
   5715c:	6813      	ldr	r3, [r2, #0]
   5715e:	2b00      	cmp	r3, #0
   57160:	d0f0      	beq.n	57144 <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   57162:	6851      	ldr	r1, [r2, #4]
}
   57164:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   57168:	4718      	bx	r3

0005716a <pinctrl_apply_state>:
{
   5716a:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   5716c:	aa01      	add	r2, sp, #4
{
   5716e:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   57170:	f000 f8b0 	bl	572d4 <pinctrl_lookup_state>
	if (ret < 0) {
   57174:	2800      	cmp	r0, #0
   57176:	db05      	blt.n	57184 <pinctrl_apply_state+0x1a>
	return pinctrl_apply_state_direct(config, state);
   57178:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   5717a:	6822      	ldr	r2, [r4, #0]
   5717c:	7919      	ldrb	r1, [r3, #4]
   5717e:	6818      	ldr	r0, [r3, #0]
   57180:	f7f2 fba6 	bl	498d0 <pinctrl_configure_pins>
}
   57184:	b002      	add	sp, #8
   57186:	bd10      	pop	{r4, pc}

00057188 <uarte_nrfx_pm_action>:
{
   57188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
   5718c:	6846      	ldr	r6, [r0, #4]
{
   5718e:	4605      	mov	r5, r0
	return config->uarte_regs;
   57190:	6834      	ldr	r4, [r6, #0]
	struct uarte_nrfx_data *data = dev->data;
   57192:	6907      	ldr	r7, [r0, #16]
	switch (action) {
   57194:	b309      	cbz	r1, 571da <uarte_nrfx_pm_action+0x52>
   57196:	2901      	cmp	r1, #1
   57198:	f040 8083 	bne.w	572a2 <uarte_nrfx_pm_action+0x11a>
		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   5719c:	6873      	ldr	r3, [r6, #4]
   5719e:	07da      	lsls	r2, r3, #31
   571a0:	d413      	bmi.n	571ca <uarte_nrfx_pm_action+0x42>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   571a2:	2308      	movs	r3, #8
   571a4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   571a8:	7a33      	ldrb	r3, [r6, #8]
   571aa:	b963      	cbnz	r3, 571c6 <uarte_nrfx_pm_action+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   571ac:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   571b0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   571b4:	2301      	movs	r3, #1
   571b6:	6023      	str	r3, [r4, #0]
			if (data->int_driven &&
   571b8:	68fb      	ldr	r3, [r7, #12]
   571ba:	b123      	cbz	r3, 571c6 <uarte_nrfx_pm_action+0x3e>
   571bc:	7bdb      	ldrb	r3, [r3, #15]
   571be:	b113      	cbz	r3, 571c6 <uarte_nrfx_pm_action+0x3e>
    p_reg->INTENSET = mask;
   571c0:	2310      	movs	r3, #16
   571c2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return 0;
   571c6:	2000      	movs	r0, #0
   571c8:	e005      	b.n	571d6 <uarte_nrfx_pm_action+0x4e>
			ret = pinctrl_apply_state(cfg->pcfg,
   571ca:	2100      	movs	r1, #0
   571cc:	68f0      	ldr	r0, [r6, #12]
   571ce:	f7ff ffcc 	bl	5716a <pinctrl_apply_state>
			if (ret < 0) {
   571d2:	2800      	cmp	r0, #0
   571d4:	dae5      	bge.n	571a2 <uarte_nrfx_pm_action+0x1a>
}
   571d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   571da:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   571de:	b313      	cbz	r3, 57226 <uarte_nrfx_pm_action+0x9e>
			if (data->int_driven) {
   571e0:	68fa      	ldr	r2, [r7, #12]
   571e2:	b152      	cbz	r2, 571fa <uarte_nrfx_pm_action+0x72>
    return p_reg->INTENSET & mask;
   571e4:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
					nrf_uarte_int_enable_check(uarte,
   571e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
				data->int_driven->rx_irq_enabled =
   571ec:	73d3      	strb	r3, [r2, #15]
				if (data->int_driven->rx_irq_enabled) {
   571ee:	68fb      	ldr	r3, [r7, #12]
   571f0:	7bdb      	ldrb	r3, [r3, #15]
   571f2:	b113      	cbz	r3, 571fa <uarte_nrfx_pm_action+0x72>
    p_reg->INTENCLR = mask;
   571f4:	2310      	movs	r3, #16
   571f6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   571fa:	2301      	movs	r3, #1
   571fc:	6063      	str	r3, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   571fe:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
						      NRF_UARTE_EVENT_RXTO) &&
   57202:	b91b      	cbnz	r3, 5720c <uarte_nrfx_pm_action+0x84>
   57204:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   57208:	2b00      	cmp	r3, #0
   5720a:	d0f8      	beq.n	571fe <uarte_nrfx_pm_action+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   5720c:	2300      	movs	r3, #0
   5720e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   57212:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   57216:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   5721a:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   5721e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   57222:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	const struct uarte_nrfx_config *config = dev->config;
   57226:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   57228:	e9d2 4300 	ldrd	r4, r3, [r2]
	if (!ppi_endtx) {
   5722c:	f013 0802 	ands.w	r8, r3, #2
   57230:	d117      	bne.n	57262 <uarte_nrfx_pm_action+0xda>
    p_reg->INTENCLR = mask;
   57232:	f44f 7380 	mov.w	r3, #256	; 0x100
   57236:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   5723a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
		NRFX_WAIT_FOR(is_tx_ready(dev), 1000, 1, res);
   5723e:	6868      	ldr	r0, [r5, #4]
   57240:	f7ff fee9 	bl	57016 <is_tx_ready.isra.0>
   57244:	b920      	cbnz	r0, 57250 <uarte_nrfx_pm_action+0xc8>
   57246:	2001      	movs	r0, #1
   57248:	f002 fb4c 	bl	598e4 <nrfx_busy_wait>
   5724c:	3f01      	subs	r7, #1
   5724e:	d1f6      	bne.n	5723e <uarte_nrfx_pm_action+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   57250:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   57254:	b92b      	cbnz	r3, 57262 <uarte_nrfx_pm_action+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   57256:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   5725a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   5725e:	2301      	movs	r3, #1
   57260:	60e3      	str	r3, [r4, #12]
    p_reg->INTENCLR = mask;
   57262:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   57266:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED),
   5726a:	b923      	cbnz	r3, 57276 <uarte_nrfx_pm_action+0xee>
   5726c:	2001      	movs	r0, #1
   5726e:	f002 fb39 	bl	598e4 <nrfx_busy_wait>
   57272:	3f01      	subs	r7, #1
   57274:	d1f7      	bne.n	57266 <uarte_nrfx_pm_action+0xde>
	if (!ppi_endtx) {
   57276:	f1b8 0f00 	cmp.w	r8, #0
   5727a:	d103      	bne.n	57284 <uarte_nrfx_pm_action+0xfc>
    p_reg->INTENSET = mask;
   5727c:	f44f 7380 	mov.w	r3, #256	; 0x100
   57280:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   57284:	2200      	movs	r2, #0
	return config->uarte_regs;
   57286:	686b      	ldr	r3, [r5, #4]
   57288:	681b      	ldr	r3, [r3, #0]
   5728a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   5728e:	6873      	ldr	r3, [r6, #4]
   57290:	07db      	lsls	r3, r3, #31
   57292:	d598      	bpl.n	571c6 <uarte_nrfx_pm_action+0x3e>
			ret = pinctrl_apply_state(cfg->pcfg,
   57294:	2101      	movs	r1, #1
   57296:	68f0      	ldr	r0, [r6, #12]
   57298:	f7ff ff67 	bl	5716a <pinctrl_apply_state>
			if (ret < 0) {
   5729c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   572a0:	e799      	b.n	571d6 <uarte_nrfx_pm_action+0x4e>
	switch (action) {
   572a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   572a6:	e796      	b.n	571d6 <uarte_nrfx_pm_action+0x4e>

000572a8 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   572a8:	4608      	mov	r0, r1
   572aa:	b508      	push	{r3, lr}
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   572ac:	4611      	mov	r1, r2
   572ae:	f7f6 f909 	bl	4d4c4 <psa_generate_random>
	int err = EINVAL;
   572b2:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   572b4:	bf18      	it	ne
   572b6:	2016      	movne	r0, #22
   572b8:	bd08      	pop	{r3, pc}

000572ba <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   572ba:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   572bc:	f000 fc60 	bl	57b80 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   572c0:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   572c2:	bf18      	it	ne
   572c4:	f06f 0015 	mvnne.w	r0, #21
   572c8:	bd08      	pop	{r3, pc}

000572ca <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   572ca:	4770      	bx	lr

000572cc <sys_clock_cycle_get_32>:
{
   572cc:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   572ce:	f7f2 f955 	bl	4957c <z_nrf_rtc_timer_read>
}
   572d2:	bd08      	pop	{r3, pc}

000572d4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   572d4:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
   572d6:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   572da:	6843      	ldr	r3, [r0, #4]
   572dc:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   572de:	7a05      	ldrb	r5, [r0, #8]
   572e0:	6844      	ldr	r4, [r0, #4]
   572e2:	4435      	add	r5, r6
   572e4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   572e8:	42a3      	cmp	r3, r4
   572ea:	d902      	bls.n	572f2 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   572ec:	f06f 0001 	mvn.w	r0, #1
}
   572f0:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   572f2:	795c      	ldrb	r4, [r3, #5]
   572f4:	428c      	cmp	r4, r1
   572f6:	d001      	beq.n	572fc <pinctrl_lookup_state+0x28>
		(*state)++;
   572f8:	3308      	adds	r3, #8
   572fa:	e7ef      	b.n	572dc <pinctrl_lookup_state+0x8>
			return 0;
   572fc:	2000      	movs	r0, #0
   572fe:	e7f7      	b.n	572f0 <pinctrl_lookup_state+0x1c>

00057300 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   57300:	f003 bd10 	b.w	5ad24 <z_impl_k_busy_wait>

00057304 <nrf_modem_os_errno_set>:
{
   57304:	b510      	push	{r4, lr}
   57306:	4604      	mov	r4, r0
	errno = err_code;
   57308:	f7fe ff39 	bl	5617e <__errno>
   5730c:	6004      	str	r4, [r0, #0]
}
   5730e:	bd10      	pop	{r4, pc}

00057310 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   57310:	f003 bab2 	b.w	5a878 <k_is_in_isr>

00057314 <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   57314:	f7fb b9e8 	b.w	526e8 <z_impl_k_sem_give>

00057318 <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   57318:	1c4b      	adds	r3, r1, #1
{
   5731a:	b570      	push	{r4, r5, r6, lr}
   5731c:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   5731e:	d017      	beq.n	57350 <nrf_modem_os_sem_take+0x38>
   57320:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   57324:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   57328:	f240 30e7 	movw	r0, #999	; 0x3e7
   5732c:	2100      	movs	r1, #0
   5732e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   57332:	2300      	movs	r3, #0
   57334:	fbc4 0106 	smlal	r0, r1, r4, r6
   57338:	f7e9 fbea 	bl	40b10 <__aeabi_uldivmod>
   5733c:	4602      	mov	r2, r0
   5733e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   57340:	4628      	mov	r0, r5
   57342:	f7fb f9f7 	bl	52734 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   57346:	2800      	cmp	r0, #0
}
   57348:	bf18      	it	ne
   5734a:	f06f 000a 	mvnne.w	r0, #10
   5734e:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   57350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   57354:	4613      	mov	r3, r2
   57356:	e7f3      	b.n	57340 <nrf_modem_os_sem_take+0x28>

00057358 <nrf91_socket_offload_setsockopt>:
{
   57358:	b5f0      	push	{r4, r5, r6, r7, lr}
   5735a:	460d      	mov	r5, r1
   5735c:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = { 0 };
   5735e:	2300      	movs	r3, #0
{
   57360:	b087      	sub	sp, #28
   57362:	4611      	mov	r1, r2
	int sd = OBJ_TO_SD(obj);
   57364:	6807      	ldr	r7, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   57366:	aa03      	add	r2, sp, #12
   57368:	4628      	mov	r0, r5
	struct nrf_timeval nrf_timeo = { 0 };
   5736a:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   5736e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   57370:	f7f2 fcce 	bl	49d10 <z_to_nrf_optname>
   57374:	2800      	cmp	r0, #0
   57376:	da07      	bge.n	57388 <nrf91_socket_offload_setsockopt+0x30>
		errno = ENOPROTOOPT;
   57378:	f7fe ff01 	bl	5617e <__errno>
   5737c:	236d      	movs	r3, #109	; 0x6d
   5737e:	6003      	str	r3, [r0, #0]
		return -1;
   57380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   57384:	b007      	add	sp, #28
   57386:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   57388:	2d01      	cmp	r5, #1
   5738a:	d112      	bne.n	573b2 <nrf91_socket_offload_setsockopt+0x5a>
   5738c:	f1a1 0214 	sub.w	r2, r1, #20
   57390:	2a01      	cmp	r2, #1
   57392:	d806      	bhi.n	573a2 <nrf91_socket_offload_setsockopt+0x4a>
		if (optval != NULL) {
   57394:	b12c      	cbz	r4, 573a2 <nrf91_socket_offload_setsockopt+0x4a>
			nrf_optlen = sizeof(struct nrf_timeval);
   57396:	2608      	movs	r6, #8
			nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   57398:	6823      	ldr	r3, [r4, #0]
   5739a:	9304      	str	r3, [sp, #16]
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   5739c:	68a3      	ldr	r3, [r4, #8]
			nrf_optval = &nrf_timeo;
   5739e:	ac04      	add	r4, sp, #16
			nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   573a0:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   573a2:	4623      	mov	r3, r4
   573a4:	4629      	mov	r1, r5
   573a6:	4638      	mov	r0, r7
   573a8:	9a03      	ldr	r2, [sp, #12]
   573aa:	9600      	str	r6, [sp, #0]
   573ac:	f7f9 fe76 	bl	5109c <nrf_setsockopt>
	return retval;
   573b0:	e7e8      	b.n	57384 <nrf91_socket_offload_setsockopt+0x2c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   573b2:	f5b5 7f8d 	cmp.w	r5, #282	; 0x11a
   573b6:	d1f4      	bne.n	573a2 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   573b8:	290c      	cmp	r1, #12
   573ba:	bf08      	it	eq
   573bc:	2604      	moveq	r6, #4
   573be:	e7f0      	b.n	573a2 <nrf91_socket_offload_setsockopt+0x4a>

000573c0 <nrf91_socket_offload_getsockopt>:
{
   573c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   573c4:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   573c6:	2300      	movs	r3, #0
{
   573c8:	b086      	sub	sp, #24
   573ca:	460f      	mov	r7, r1
   573cc:	4615      	mov	r5, r2
	struct nrf_timeval nrf_timeo = {0, 0};
   573ce:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   573d2:	2308      	movs	r3, #8
	int sd = OBJ_TO_SD(obj);
   573d4:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   573d6:	4629      	mov	r1, r5
   573d8:	4638      	mov	r0, r7
   573da:	eb0d 0203 	add.w	r2, sp, r3
{
   573de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	nrf_socklen_t nrf_timeo_size = sizeof(struct nrf_timeval);
   573e2:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   573e4:	f7f2 fc94 	bl	49d10 <z_to_nrf_optname>
   573e8:	2800      	cmp	r0, #0
   573ea:	da09      	bge.n	57400 <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   573ec:	f7fe fec7 	bl	5617e <__errno>
   573f0:	236d      	movs	r3, #109	; 0x6d
		return -1;
   573f2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		errno = ENOPROTOOPT;
   573f6:	6003      	str	r3, [r0, #0]
}
   573f8:	4630      	mov	r0, r6
   573fa:	b006      	add	sp, #24
   573fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   57400:	2f01      	cmp	r7, #1
   57402:	d11c      	bne.n	5743e <nrf91_socket_offload_getsockopt+0x7e>
   57404:	f1a5 0314 	sub.w	r3, r5, #20
   57408:	2b01      	cmp	r3, #1
   5740a:	d818      	bhi.n	5743e <nrf91_socket_offload_getsockopt+0x7e>
		nrf_optlen = &nrf_timeo_size;
   5740c:	aa03      	add	r2, sp, #12
		nrf_optval = &nrf_timeo;
   5740e:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   57410:	4630      	mov	r0, r6
   57412:	9200      	str	r2, [sp, #0]
   57414:	4639      	mov	r1, r7
   57416:	9a02      	ldr	r2, [sp, #8]
   57418:	f002 fef5 	bl	5a206 <nrf_getsockopt>
	if (retval == 0) {
   5741c:	4606      	mov	r6, r0
   5741e:	2800      	cmp	r0, #0
   57420:	d1ea      	bne.n	573f8 <nrf91_socket_offload_getsockopt+0x38>
		if (level == SOL_SOCKET) {
   57422:	2f01      	cmp	r7, #1
   57424:	d1e8      	bne.n	573f8 <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   57426:	2d04      	cmp	r5, #4
   57428:	d10c      	bne.n	57444 <nrf91_socket_offload_getsockopt+0x84>
				if (*(int *)optval != 0) {
   5742a:	6820      	ldr	r0, [r4, #0]
   5742c:	2800      	cmp	r0, #0
   5742e:	d0e3      	beq.n	573f8 <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   57430:	f7ff ff68 	bl	57304 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   57434:	f7fe fea3 	bl	5617e <__errno>
   57438:	6803      	ldr	r3, [r0, #0]
   5743a:	6023      	str	r3, [r4, #0]
   5743c:	e7dc      	b.n	573f8 <nrf91_socket_offload_getsockopt+0x38>
	nrf_socklen_t *nrf_optlen = (nrf_socklen_t *)optlen;
   5743e:	4642      	mov	r2, r8
   57440:	4623      	mov	r3, r4
   57442:	e7e5      	b.n	57410 <nrf91_socket_offload_getsockopt+0x50>
			} else if ((optname == SO_RCVTIMEO) ||
   57444:	3d14      	subs	r5, #20
   57446:	2d01      	cmp	r5, #1
   57448:	d8d6      	bhi.n	573f8 <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   5744a:	9b04      	ldr	r3, [sp, #16]
   5744c:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   57450:	9b05      	ldr	r3, [sp, #20]
   57452:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   57454:	2310      	movs	r3, #16
   57456:	f8c8 3000 	str.w	r3, [r8]
   5745a:	e7cd      	b.n	573f8 <nrf91_socket_offload_getsockopt+0x38>

0005745c <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   5745c:	6800      	ldr	r0, [r0, #0]
   5745e:	f002 bd1a 	b.w	59e96 <nrf_listen>

00057462 <nrf91_socket_offload_freeaddrinfo>:
{
   57462:	b538      	push	{r3, r4, r5, lr}
   57464:	4604      	mov	r4, r0
	while (next != NULL) {
   57466:	b904      	cbnz	r4, 5746a <nrf91_socket_offload_freeaddrinfo+0x8>
}
   57468:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   5746a:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   5746c:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   5746e:	f003 fcfa 	bl	5ae66 <k_free>
		k_free(this);
   57472:	4620      	mov	r0, r4
   57474:	f003 fcf7 	bl	5ae66 <k_free>
		next = next->ai_next;
   57478:	462c      	mov	r4, r5
   5747a:	e7f4      	b.n	57466 <nrf91_socket_offload_freeaddrinfo+0x4>

0005747c <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   5747c:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   5747e:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   57480:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   57482:	4603      	mov	r3, r0
{
   57484:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   57486:	f823 2b04 	strh.w	r2, [r3], #4
   5748a:	f101 0420 	add.w	r4, r1, #32
   5748e:	f101 0210 	add.w	r2, r1, #16
   57492:	f852 5b04 	ldr.w	r5, [r2], #4
   57496:	42a2      	cmp	r2, r4
   57498:	f843 5b04 	str.w	r5, [r3], #4
   5749c:	d1f9      	bne.n	57492 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   5749e:	6a0b      	ldr	r3, [r1, #32]
   574a0:	7503      	strb	r3, [r0, #20]
}
   574a2:	bd30      	pop	{r4, r5, pc}

000574a4 <z_to_nrf_ipv6>:
{
   574a4:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   574a6:	2124      	movs	r1, #36	; 0x24
{
   574a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   574aa:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   574ac:	8841      	ldrh	r1, [r0, #2]
{
   574ae:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   574b0:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   574b2:	2102      	movs	r1, #2
   574b4:	1d04      	adds	r4, r0, #4
   574b6:	6059      	str	r1, [r3, #4]
   574b8:	f103 0610 	add.w	r6, r3, #16
   574bc:	f100 0714 	add.w	r7, r0, #20
   574c0:	4635      	mov	r5, r6
   574c2:	6820      	ldr	r0, [r4, #0]
   574c4:	6861      	ldr	r1, [r4, #4]
   574c6:	3408      	adds	r4, #8
   574c8:	c503      	stmia	r5!, {r0, r1}
   574ca:	42bc      	cmp	r4, r7
   574cc:	462e      	mov	r6, r5
   574ce:	d1f7      	bne.n	574c0 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   574d0:	7d12      	ldrb	r2, [r2, #20]
   574d2:	621a      	str	r2, [r3, #32]
}
   574d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000574d6 <nrf91_socket_offload_sendto>:
{
   574d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   574da:	4604      	mov	r4, r0
   574dc:	b08c      	sub	sp, #48	; 0x30
   574de:	9812      	ldr	r0, [sp, #72]	; 0x48
   574e0:	460d      	mov	r5, r1
   574e2:	4616      	mov	r6, r2
   574e4:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   574e6:	6824      	ldr	r4, [r4, #0]
	if (to == NULL) {
   574e8:	b930      	cbnz	r0, 574f8 <nrf91_socket_offload_sendto+0x22>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   574ea:	9013      	str	r0, [sp, #76]	; 0x4c
   574ec:	4620      	mov	r0, r4
}
   574ee:	b00c      	add	sp, #48	; 0x30
   574f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   574f4:	f7f9 bcd2 	b.w	50e9c <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   574f8:	f8b0 c000 	ldrh.w	ip, [r0]
   574fc:	f1bc 0f01 	cmp.w	ip, #1
   57500:	d112      	bne.n	57528 <nrf91_socket_offload_sendto+0x52>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   57502:	2510      	movs	r5, #16
	nrf_out->sin_port = ptr->sin_port;
   57504:	8846      	ldrh	r6, [r0, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   57506:	6840      	ldr	r0, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   57508:	f88d 500c 	strb.w	r5, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   5750c:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   5750e:	a803      	add	r0, sp, #12
	nrf_out->sin_port = ptr->sin_port;
   57510:	f8ad 6014 	strh.w	r6, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   57514:	f8cd c010 	str.w	ip, [sp, #16]
		retval = nrf_sendto(sd, buf, len, flags,
   57518:	9501      	str	r5, [sp, #4]
   5751a:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   5751c:	4620      	mov	r0, r4
   5751e:	f7f9 fcbd 	bl	50e9c <nrf_sendto>
}
   57522:	b00c      	add	sp, #48	; 0x30
   57524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   57528:	f1bc 0f02 	cmp.w	ip, #2
   5752c:	d10b      	bne.n	57546 <nrf91_socket_offload_sendto+0x70>
		z_to_nrf_ipv6(to, &ipv6);
   5752e:	f10d 080c 	add.w	r8, sp, #12
   57532:	4641      	mov	r1, r8
   57534:	f7ff ffb6 	bl	574a4 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   57538:	2324      	movs	r3, #36	; 0x24
   5753a:	4632      	mov	r2, r6
   5753c:	e9cd 8300 	strd	r8, r3, [sp]
   57540:	4629      	mov	r1, r5
   57542:	463b      	mov	r3, r7
   57544:	e7ea      	b.n	5751c <nrf91_socket_offload_sendto+0x46>
		errno = EAFNOSUPPORT;
   57546:	f7fe fe1a 	bl	5617e <__errno>
   5754a:	236a      	movs	r3, #106	; 0x6a
   5754c:	6003      	str	r3, [r0, #0]
		retval = -1;
   5754e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return retval;
   57552:	e7e6      	b.n	57522 <nrf91_socket_offload_sendto+0x4c>

00057554 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   57554:	2300      	movs	r3, #0
{
   57556:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   57558:	e9cd 3300 	strd	r3, r3, [sp]
   5755c:	f7ff ffbb 	bl	574d6 <nrf91_socket_offload_sendto>
}
   57560:	b003      	add	sp, #12
   57562:	f85d fb04 	ldr.w	pc, [sp], #4

00057566 <nrf91_socket_offload_connect>:
{
   57566:	4603      	mov	r3, r0
   57568:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   5756a:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   5756c:	880b      	ldrh	r3, [r1, #0]
{
   5756e:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   57570:	2b01      	cmp	r3, #1
{
   57572:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   57574:	d10e      	bne.n	57594 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   57576:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   57578:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   5757a:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   5757c:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   5757e:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   57582:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   57586:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   57588:	4620      	mov	r0, r4
   5758a:	a901      	add	r1, sp, #4
   5758c:	f002 fb9f 	bl	59cce <nrf_connect>
}
   57590:	b00a      	add	sp, #40	; 0x28
   57592:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   57594:	2b02      	cmp	r3, #2
   57596:	d104      	bne.n	575a2 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   57598:	a901      	add	r1, sp, #4
   5759a:	f7ff ff83 	bl	574a4 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   5759e:	2224      	movs	r2, #36	; 0x24
   575a0:	e7f2      	b.n	57588 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   575a2:	4620      	mov	r0, r4
}
   575a4:	b00a      	add	sp, #40	; 0x28
   575a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = nrf_connect(sd, (void *)addr, addrlen);
   575aa:	f002 bb90 	b.w	59cce <nrf_connect>

000575ae <nrf91_socket_offload_bind>:
{
   575ae:	4603      	mov	r3, r0
   575b0:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   575b2:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   575b4:	880b      	ldrh	r3, [r1, #0]
{
   575b6:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   575b8:	2b01      	cmp	r3, #1
{
   575ba:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   575bc:	d10e      	bne.n	575dc <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   575be:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   575c0:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_family = NRF_AF_INET;
   575c2:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   575c4:	6843      	ldr	r3, [r0, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   575c6:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   575ca:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   575ce:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   575d0:	4620      	mov	r0, r4
   575d2:	a901      	add	r1, sp, #4
   575d4:	f002 fc15 	bl	59e02 <nrf_bind>
}
   575d8:	b00a      	add	sp, #40	; 0x28
   575da:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   575dc:	2b02      	cmp	r3, #2
   575de:	d104      	bne.n	575ea <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   575e0:	a901      	add	r1, sp, #4
   575e2:	f7ff ff5f 	bl	574a4 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   575e6:	2224      	movs	r2, #36	; 0x24
   575e8:	e7f2      	b.n	575d0 <nrf91_socket_offload_bind+0x22>
		errno = EAFNOSUPPORT;
   575ea:	f7fe fdc8 	bl	5617e <__errno>
   575ee:	236a      	movs	r3, #106	; 0x6a
   575f0:	6003      	str	r3, [r0, #0]
		retval = -1;
   575f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return retval;
   575f6:	e7ef      	b.n	575d8 <nrf91_socket_offload_bind+0x2a>

000575f8 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   575f8:	f7fa bf8c 	b.w	52514 <z_impl_k_mutex_lock>

000575fc <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   575fc:	f7fb b804 	b.w	52608 <z_impl_k_mutex_unlock>

00057600 <nrf91_socket_offload_recvfrom>:
{
   57600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   57604:	4605      	mov	r5, r0
	if (ctx->lock) {
   57606:	6840      	ldr	r0, [r0, #4]
{
   57608:	b08d      	sub	sp, #52	; 0x34
   5760a:	460c      	mov	r4, r1
   5760c:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   57610:	4691      	mov	r9, r2
   57612:	469a      	mov	sl, r3
	if (ctx->lock) {
   57614:	b108      	cbz	r0, 5761a <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   57616:	f7ff fff1 	bl	575fc <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   5761a:	f8d5 b000 	ldr.w	fp, [r5]
	if (from == NULL || fromlen == NULL) {
   5761e:	b106      	cbz	r6, 57622 <nrf91_socket_offload_recvfrom+0x22>
   57620:	b9af      	cbnz	r7, 5764e <nrf91_socket_offload_recvfrom+0x4e>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   57622:	2300      	movs	r3, #0
   57624:	4621      	mov	r1, r4
   57626:	e9cd 3300 	strd	r3, r3, [sp]
   5762a:	464a      	mov	r2, r9
   5762c:	4653      	mov	r3, sl
   5762e:	4658      	mov	r0, fp
   57630:	f002 fcfb 	bl	5a02a <nrf_recvfrom>
   57634:	4604      	mov	r4, r0
	if (ctx->lock) {
   57636:	6868      	ldr	r0, [r5, #4]
   57638:	b128      	cbz	r0, 57646 <nrf91_socket_offload_recvfrom+0x46>
		k_mutex_lock(ctx->lock, K_FOREVER);
   5763a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   5763e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   57642:	f7ff ffd9 	bl	575f8 <k_mutex_lock.constprop.0.isra.0>
}
   57646:	4620      	mov	r0, r4
   57648:	b00d      	add	sp, #52	; 0x34
   5764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   5764e:	f10d 080c 	add.w	r8, sp, #12
   57652:	2224      	movs	r2, #36	; 0x24
   57654:	2100      	movs	r1, #0
   57656:	4640      	mov	r0, r8
   57658:	f003 fc7e 	bl	5af58 <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   5765c:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   5765e:	ab02      	add	r3, sp, #8
   57660:	4621      	mov	r1, r4
   57662:	e9cd 8300 	strd	r8, r3, [sp]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   57666:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   57668:	4653      	mov	r3, sl
   5766a:	464a      	mov	r2, r9
   5766c:	4658      	mov	r0, fp
   5766e:	f002 fcdc 	bl	5a02a <nrf_recvfrom>
		if (retval < 0) {
   57672:	1e04      	subs	r4, r0, #0
   57674:	dbdf      	blt.n	57636 <nrf91_socket_offload_recvfrom+0x36>
		if (cliaddr->sa_family == NRF_AF_INET &&
   57676:	9b04      	ldr	r3, [sp, #16]
   57678:	2b01      	cmp	r3, #1
   5767a:	d10b      	bne.n	57694 <nrf91_socket_offload_recvfrom+0x94>
   5767c:	9a02      	ldr	r2, [sp, #8]
   5767e:	2a10      	cmp	r2, #16
   57680:	d1d9      	bne.n	57636 <nrf91_socket_offload_recvfrom+0x36>
	ptr->sin_family = AF_INET;
   57682:	8033      	strh	r3, [r6, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   57684:	9b06      	ldr	r3, [sp, #24]
	ptr->sin_port = nrf_in->sin_port;
   57686:	f8bd 2014 	ldrh.w	r2, [sp, #20]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   5768a:	6073      	str	r3, [r6, #4]
			*fromlen = sizeof(struct sockaddr_in);
   5768c:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   5768e:	8072      	strh	r2, [r6, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   57690:	603b      	str	r3, [r7, #0]
   57692:	e7d0      	b.n	57636 <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6 &&
   57694:	2b02      	cmp	r3, #2
   57696:	d1ce      	bne.n	57636 <nrf91_socket_offload_recvfrom+0x36>
   57698:	9b02      	ldr	r3, [sp, #8]
   5769a:	2b24      	cmp	r3, #36	; 0x24
   5769c:	d1cb      	bne.n	57636 <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   5769e:	4641      	mov	r1, r8
   576a0:	4630      	mov	r0, r6
   576a2:	f7ff feeb 	bl	5747c <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   576a6:	2318      	movs	r3, #24
   576a8:	e7f2      	b.n	57690 <nrf91_socket_offload_recvfrom+0x90>

000576aa <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   576aa:	2300      	movs	r3, #0
{
   576ac:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   576ae:	e9cd 3300 	strd	r3, r3, [sp]
   576b2:	f7ff ffa5 	bl	57600 <nrf91_socket_offload_recvfrom>
}
   576b6:	b003      	add	sp, #12
   576b8:	f85d fb04 	ldr.w	pc, [sp], #4

000576bc <nrf91_socket_offload_close>:
{
   576bc:	b538      	push	{r3, r4, r5, lr}
   576be:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   576c0:	6800      	ldr	r0, [r0, #0]
   576c2:	f7f9 fbb5 	bl	50e30 <nrf_close>
	if (retval == 0) {
   576c6:	4604      	mov	r4, r0
   576c8:	b910      	cbnz	r0, 576d0 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   576ca:	4628      	mov	r0, r5
   576cc:	f7f2 fd82 	bl	4a1d4 <release_ctx>
}
   576d0:	4620      	mov	r0, r4
   576d2:	bd38      	pop	{r3, r4, r5, pc}

000576d4 <gpio_pin_configure_dt>:
{
   576d4:	4603      	mov	r3, r0
   576d6:	b470      	push	{r4, r5, r6}
   576d8:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   576da:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   576dc:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   576de:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   576e0:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   576e2:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   576e4:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   576e6:	408c      	lsls	r4, r1
   576e8:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   576ea:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   576ee:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   576f0:	bf14      	ite	ne
   576f2:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   576f4:	43a3      	biceq	r3, r4
   576f6:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   576f8:	6833      	ldr	r3, [r6, #0]
}
   576fa:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   576fc:	4718      	bx	r3

000576fe <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   576fe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57700:	ab0b      	add	r3, sp, #44	; 0x2c
   57702:	9305      	str	r3, [sp, #20]
   57704:	9303      	str	r3, [sp, #12]
   57706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   57708:	2201      	movs	r2, #1
   5770a:	9302      	str	r3, [sp, #8]
   5770c:	2300      	movs	r3, #0
   5770e:	4618      	mov	r0, r3
   57710:	e9cd 3300 	strd	r3, r3, [sp]
   57714:	f7ed fd8c 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   57718:	b007      	add	sp, #28
   5771a:	f85d fb04 	ldr.w	pc, [sp], #4

0005771e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   5771e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57720:	ab0b      	add	r3, sp, #44	; 0x2c
   57722:	9305      	str	r3, [sp, #20]
   57724:	9303      	str	r3, [sp, #12]
   57726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   57728:	9302      	str	r3, [sp, #8]
   5772a:	2300      	movs	r3, #0
   5772c:	4618      	mov	r0, r3
   5772e:	e9cd 3300 	strd	r3, r3, [sp]
   57732:	f7ed fd7d 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   57736:	b007      	add	sp, #28
   57738:	f85d fb04 	ldr.w	pc, [sp], #4

0005773c <response_handler>:
	write_uart_string(response);
   5773c:	f7f3 b88c 	b.w	4a858 <write_uart_string>

00057740 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   57740:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57742:	ab0b      	add	r3, sp, #44	; 0x2c
   57744:	9305      	str	r3, [sp, #20]
   57746:	9303      	str	r3, [sp, #12]
   57748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   5774a:	9302      	str	r3, [sp, #8]
   5774c:	2300      	movs	r3, #0
   5774e:	4618      	mov	r0, r3
   57750:	e9cd 3300 	strd	r3, r3, [sp]
   57754:	f7ed fd6c 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   57758:	b007      	add	sp, #28
   5775a:	f85d fb04 	ldr.w	pc, [sp], #4

0005775e <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   5775e:	280d      	cmp	r0, #13
   57760:	d004      	beq.n	5776c <is_lfcr+0xe>
   57762:	f1a0 030a 	sub.w	r3, r0, #10
   57766:	4258      	negs	r0, r3
   57768:	4158      	adcs	r0, r3
   5776a:	4770      	bx	lr
		return true;
   5776c:	2001      	movs	r0, #1
}
   5776e:	4770      	bx	lr

00057770 <skip_command_prefix>:
{
   57770:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   57772:	6801      	ldr	r1, [r0, #0]
{
   57774:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   57776:	1c8b      	adds	r3, r1, #2
   57778:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   5777a:	788c      	ldrb	r4, [r1, #2]
   5777c:	4620      	mov	r0, r4
   5777e:	f7ff ffee 	bl	5775e <is_lfcr>
   57782:	b910      	cbnz	r0, 5778a <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   57784:	b10c      	cbz	r4, 5778a <skip_command_prefix+0x1a>
	(*cmd)++;
   57786:	3103      	adds	r1, #3
   57788:	6011      	str	r1, [r2, #0]
}
   5778a:	bd10      	pop	{r4, pc}

0005778c <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   5778c:	6813      	ldr	r3, [r2, #0]
   5778e:	f7f3 bc2d 	b.w	4afec <at_parser_max_params_from_str>

00057792 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   57792:	6803      	ldr	r3, [r0, #0]
   57794:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   57796:	bf86      	itte	hi
   57798:	6840      	ldrhi	r0, [r0, #4]
   5779a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   5779e:	2000      	movls	r0, #0
}
   577a0:	4770      	bx	lr

000577a2 <at_param_clear>:
{
   577a2:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   577a4:	7803      	ldrb	r3, [r0, #0]
{
   577a6:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   577a8:	3b02      	subs	r3, #2
   577aa:	2b01      	cmp	r3, #1
   577ac:	d802      	bhi.n	577b4 <at_param_clear+0x12>
		k_free(param->value.str_val);
   577ae:	6880      	ldr	r0, [r0, #8]
   577b0:	f003 fb59 	bl	5ae66 <k_free>
	param->value.int_val = 0;
   577b4:	2200      	movs	r2, #0
   577b6:	2300      	movs	r3, #0
   577b8:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   577bc:	bd10      	pop	{r4, pc}

000577be <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   577be:	b538      	push	{r3, r4, r5, lr}
   577c0:	460d      	mov	r5, r1
	if (list == NULL) {
   577c2:	4604      	mov	r4, r0
   577c4:	b140      	cbz	r0, 577d8 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   577c6:	2110      	movs	r1, #16
   577c8:	4628      	mov	r0, r5
   577ca:	f003 fb57 	bl	5ae7c <k_calloc>
   577ce:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   577d0:	b128      	cbz	r0, 577de <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   577d2:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   577d4:	6025      	str	r5, [r4, #0]
}
   577d6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   577d8:	f06f 0015 	mvn.w	r0, #21
   577dc:	e7fb      	b.n	577d6 <at_params_list_init+0x18>
		return -ENOMEM;
   577de:	f06f 000b 	mvn.w	r0, #11
   577e2:	e7f8      	b.n	577d6 <at_params_list_init+0x18>

000577e4 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   577e4:	b570      	push	{r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   577e6:	4604      	mov	r4, r0
   577e8:	b128      	cbz	r0, 577f6 <at_params_list_clear+0x12>
   577ea:	6843      	ldr	r3, [r0, #4]
   577ec:	b11b      	cbz	r3, 577f6 <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   577ee:	2500      	movs	r5, #0
   577f0:	6823      	ldr	r3, [r4, #0]
   577f2:	429d      	cmp	r5, r3
   577f4:	d300      	bcc.n	577f8 <at_params_list_clear+0x14>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   577f6:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   577f8:	6866      	ldr	r6, [r4, #4]
   577fa:	eb06 1605 	add.w	r6, r6, r5, lsl #4
   577fe:	4630      	mov	r0, r6
   57800:	f7ff ffcf 	bl	577a2 <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   57804:	2210      	movs	r2, #16
   57806:	2100      	movs	r1, #0
   57808:	4630      	mov	r0, r6
   5780a:	f003 fba5 	bl	5af58 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   5780e:	3501      	adds	r5, #1
   57810:	e7ee      	b.n	577f0 <at_params_list_clear+0xc>

00057812 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   57812:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   57814:	4604      	mov	r4, r0
   57816:	b148      	cbz	r0, 5782c <at_params_list_free+0x1a>
   57818:	6843      	ldr	r3, [r0, #4]
   5781a:	b13b      	cbz	r3, 5782c <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   5781c:	2500      	movs	r5, #0
	at_params_list_clear(list);
   5781e:	f7ff ffe1 	bl	577e4 <at_params_list_clear>
	k_free(list->params);
   57822:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   57824:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   57826:	f003 fb1e 	bl	5ae66 <k_free>
	list->params = NULL;
   5782a:	6065      	str	r5, [r4, #4]
}
   5782c:	bd38      	pop	{r3, r4, r5, pc}

0005782e <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   5782e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   57830:	b178      	cbz	r0, 57852 <at_params_empty_put+0x24>
   57832:	6843      	ldr	r3, [r0, #4]
   57834:	b16b      	cbz	r3, 57852 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   57836:	f7ff ffac 	bl	57792 <at_params_get>

	if (param == NULL) {
   5783a:	4604      	mov	r4, r0
   5783c:	b148      	cbz	r0, 57852 <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   5783e:	f7ff ffb0 	bl	577a2 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   57842:	2304      	movs	r3, #4
	param->value.int_val = 0;
   57844:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   57846:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   57848:	2300      	movs	r3, #0

	return 0;
   5784a:	2000      	movs	r0, #0
	param->value.int_val = 0;
   5784c:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   57850:	bd10      	pop	{r4, pc}
		return -EINVAL;
   57852:	f06f 0015 	mvn.w	r0, #21
   57856:	e7fb      	b.n	57850 <at_params_empty_put+0x22>

00057858 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   57858:	b570      	push	{r4, r5, r6, lr}
   5785a:	4616      	mov	r6, r2
   5785c:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   5785e:	b168      	cbz	r0, 5787c <at_params_int_put+0x24>
   57860:	6843      	ldr	r3, [r0, #4]
   57862:	b15b      	cbz	r3, 5787c <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   57864:	f7ff ff95 	bl	57792 <at_params_get>

	if (param == NULL) {
   57868:	4604      	mov	r4, r0
   5786a:	b138      	cbz	r0, 5787c <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   5786c:	f7ff ff99 	bl	577a2 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   57870:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   57872:	2000      	movs	r0, #0
	param->value.int_val = value;
   57874:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   57878:	7023      	strb	r3, [r4, #0]
}
   5787a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   5787c:	f06f 0015 	mvn.w	r0, #21
   57880:	e7fb      	b.n	5787a <at_params_int_put+0x22>

00057882 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   57882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   57884:	4617      	mov	r7, r2
   57886:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   57888:	b1c0      	cbz	r0, 578bc <at_params_string_put+0x3a>
   5788a:	6843      	ldr	r3, [r0, #4]
   5788c:	b1b3      	cbz	r3, 578bc <at_params_string_put+0x3a>
   5788e:	b1aa      	cbz	r2, 578bc <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   57890:	f7ff ff7f 	bl	57792 <at_params_get>

	if (param == NULL) {
   57894:	4604      	mov	r4, r0
   57896:	b188      	cbz	r0, 578bc <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   57898:	1c68      	adds	r0, r5, #1
   5789a:	f003 faeb 	bl	5ae74 <k_malloc>

	if (param_value == NULL) {
   5789e:	4606      	mov	r6, r0
   578a0:	b178      	cbz	r0, 578c2 <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   578a2:	462a      	mov	r2, r5
   578a4:	4639      	mov	r1, r7
   578a6:	f003 fb1d 	bl	5aee4 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   578aa:	4620      	mov	r0, r4
   578ac:	f7ff ff79 	bl	577a2 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   578b0:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   578b2:	2000      	movs	r0, #0
	param->size = str_len;
   578b4:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   578b6:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   578b8:	60a6      	str	r6, [r4, #8]
}
   578ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   578bc:	f06f 0015 	mvn.w	r0, #21
   578c0:	e7fb      	b.n	578ba <at_params_string_put+0x38>
		return -ENOMEM;
   578c2:	f06f 000b 	mvn.w	r0, #11
   578c6:	e7f8      	b.n	578ba <at_params_string_put+0x38>

000578c8 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   578c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   578ca:	4617      	mov	r7, r2
   578cc:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   578ce:	b1c0      	cbz	r0, 57902 <at_params_array_put+0x3a>
   578d0:	6843      	ldr	r3, [r0, #4]
   578d2:	b1b3      	cbz	r3, 57902 <at_params_array_put+0x3a>
   578d4:	b1aa      	cbz	r2, 57902 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   578d6:	f7ff ff5c 	bl	57792 <at_params_get>

	if (param == NULL) {
   578da:	4604      	mov	r4, r0
   578dc:	b188      	cbz	r0, 57902 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   578de:	4628      	mov	r0, r5
   578e0:	f003 fac8 	bl	5ae74 <k_malloc>

	if (param_value == NULL) {
   578e4:	4606      	mov	r6, r0
   578e6:	b178      	cbz	r0, 57908 <at_params_array_put+0x40>
   578e8:	462a      	mov	r2, r5
   578ea:	4639      	mov	r1, r7
   578ec:	f003 fafa 	bl	5aee4 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   578f0:	4620      	mov	r0, r4
   578f2:	f7ff ff56 	bl	577a2 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   578f6:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   578f8:	2000      	movs	r0, #0
	param->size = array_len;
   578fa:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   578fc:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   578fe:	60a6      	str	r6, [r4, #8]
}
   57900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   57902:	f06f 0015 	mvn.w	r0, #21
   57906:	e7fb      	b.n	57900 <at_params_array_put+0x38>
		return -ENOMEM;
   57908:	f06f 000b 	mvn.w	r0, #11
   5790c:	e7f8      	b.n	57900 <at_params_array_put+0x38>

0005790e <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   5790e:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   57910:	b1b0      	cbz	r0, 57940 <at_params_short_get+0x32>
   57912:	6843      	ldr	r3, [r0, #4]
   57914:	b1a3      	cbz	r3, 57940 <at_params_short_get+0x32>
   57916:	b19a      	cbz	r2, 57940 <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   57918:	f7ff ff3b 	bl	57792 <at_params_get>

	if (param == NULL) {
   5791c:	b180      	cbz	r0, 57940 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   5791e:	7803      	ldrb	r3, [r0, #0]
   57920:	2b01      	cmp	r3, #1
   57922:	d10d      	bne.n	57940 <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   57924:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   57928:	f513 4000 	adds.w	r0, r3, #32768	; 0x8000
   5792c:	f141 0100 	adc.w	r1, r1, #0
   57930:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   57934:	f171 0100 	sbcs.w	r1, r1, #0
   57938:	d202      	bcs.n	57940 <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   5793a:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   5793c:	8013      	strh	r3, [r2, #0]
}
   5793e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   57940:	f06f 0015 	mvn.w	r0, #21
   57944:	e7fb      	b.n	5793e <at_params_short_get+0x30>

00057946 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   57946:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   57948:	b190      	cbz	r0, 57970 <at_params_unsigned_short_get+0x2a>
   5794a:	6843      	ldr	r3, [r0, #4]
   5794c:	b183      	cbz	r3, 57970 <at_params_unsigned_short_get+0x2a>
   5794e:	b17a      	cbz	r2, 57970 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   57950:	f7ff ff1f 	bl	57792 <at_params_get>

	if (param == NULL) {
   57954:	b160      	cbz	r0, 57970 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   57956:	7803      	ldrb	r3, [r0, #0]
   57958:	2b01      	cmp	r3, #1
   5795a:	d109      	bne.n	57970 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   5795c:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   57960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   57964:	f171 0100 	sbcs.w	r1, r1, #0
   57968:	d202      	bcs.n	57970 <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   5796a:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   5796c:	8013      	strh	r3, [r2, #0]
}
   5796e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   57970:	f06f 0015 	mvn.w	r0, #21
   57974:	e7fb      	b.n	5796e <at_params_unsigned_short_get+0x28>

00057976 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   57976:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   57978:	b190      	cbz	r0, 579a0 <at_params_int_get+0x2a>
   5797a:	6843      	ldr	r3, [r0, #4]
   5797c:	b183      	cbz	r3, 579a0 <at_params_int_get+0x2a>
   5797e:	b17a      	cbz	r2, 579a0 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   57980:	f7ff ff07 	bl	57792 <at_params_get>

	if (param == NULL) {
   57984:	b160      	cbz	r0, 579a0 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   57986:	7803      	ldrb	r3, [r0, #0]
   57988:	2b01      	cmp	r3, #1
   5798a:	d109      	bne.n	579a0 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   5798c:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   57990:	f113 4000 	adds.w	r0, r3, #2147483648	; 0x80000000
   57994:	f141 0100 	adc.w	r1, r1, #0
   57998:	b911      	cbnz	r1, 579a0 <at_params_int_get+0x2a>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   5799a:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   5799c:	6013      	str	r3, [r2, #0]
}
   5799e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   579a0:	f06f 0015 	mvn.w	r0, #21
   579a4:	e7fb      	b.n	5799e <at_params_int_get+0x28>

000579a6 <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   579a6:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   579a8:	b170      	cbz	r0, 579c8 <at_params_int64_get+0x22>
   579aa:	6843      	ldr	r3, [r0, #4]
   579ac:	b163      	cbz	r3, 579c8 <at_params_int64_get+0x22>
   579ae:	b15a      	cbz	r2, 579c8 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   579b0:	f7ff feef 	bl	57792 <at_params_get>

	if (param == NULL) {
   579b4:	b140      	cbz	r0, 579c8 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   579b6:	7803      	ldrb	r3, [r0, #0]
   579b8:	2b01      	cmp	r3, #1
   579ba:	d105      	bne.n	579c8 <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   579bc:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   579c0:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   579c4:	2000      	movs	r0, #0
}
   579c6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   579c8:	f06f 0015 	mvn.w	r0, #21
   579cc:	e7fb      	b.n	579c6 <at_params_int64_get+0x20>

000579ce <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   579ce:	b570      	push	{r4, r5, r6, lr}
   579d0:	4615      	mov	r5, r2
   579d2:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   579d4:	b1a8      	cbz	r0, 57a02 <at_params_string_get+0x34>
   579d6:	6843      	ldr	r3, [r0, #4]
   579d8:	b19b      	cbz	r3, 57a02 <at_params_string_get+0x34>
   579da:	b192      	cbz	r2, 57a02 <at_params_string_get+0x34>
	    value == NULL || len == NULL) {
   579dc:	b18c      	cbz	r4, 57a02 <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   579de:	f7ff fed8 	bl	57792 <at_params_get>

	if (param == NULL) {
   579e2:	b170      	cbz	r0, 57a02 <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   579e4:	7803      	ldrb	r3, [r0, #0]
   579e6:	2b02      	cmp	r3, #2
   579e8:	d10b      	bne.n	57a02 <at_params_string_get+0x34>
		return param->size;
   579ea:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   579ec:	6823      	ldr	r3, [r4, #0]
   579ee:	42b3      	cmp	r3, r6
   579f0:	d30a      	bcc.n	57a08 <at_params_string_get+0x3a>
   579f2:	6881      	ldr	r1, [r0, #8]
   579f4:	4632      	mov	r2, r6
   579f6:	4628      	mov	r0, r5
   579f8:	f003 fa74 	bl	5aee4 <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   579fc:	2000      	movs	r0, #0
	*len = param_len;
   579fe:	6026      	str	r6, [r4, #0]
}
   57a00:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   57a02:	f06f 0015 	mvn.w	r0, #21
   57a06:	e7fb      	b.n	57a00 <at_params_string_get+0x32>
		return -ENOMEM;
   57a08:	f06f 000b 	mvn.w	r0, #11
   57a0c:	e7f8      	b.n	57a00 <at_params_string_get+0x32>

00057a0e <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   57a0e:	4602      	mov	r2, r0
{
   57a10:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   57a12:	b170      	cbz	r0, 57a32 <at_params_valid_count_get+0x24>
   57a14:	6840      	ldr	r0, [r0, #4]
   57a16:	b160      	cbz	r0, 57a32 <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   57a18:	6811      	ldr	r1, [r2, #0]
   57a1a:	b119      	cbz	r1, 57a24 <at_params_valid_count_get+0x16>
   57a1c:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   57a1e:	b108      	cbz	r0, 57a24 <at_params_valid_count_get+0x16>
   57a20:	7803      	ldrb	r3, [r0, #0]
   57a22:	b90b      	cbnz	r3, 57a28 <at_params_valid_count_get+0x1a>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   57a24:	4608      	mov	r0, r1
   57a26:	bd08      	pop	{r3, pc}
		param = at_params_get(list, valid_i);
   57a28:	4610      	mov	r0, r2
		valid_i += 1;
   57a2a:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   57a2c:	f7ff feb1 	bl	57792 <at_params_get>
   57a30:	e7f5      	b.n	57a1e <at_params_valid_count_get+0x10>
		return -EINVAL;
   57a32:	f06f 0115 	mvn.w	r1, #21
   57a36:	e7f5      	b.n	57a24 <at_params_valid_count_get+0x16>

00057a38 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   57a38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57a3a:	ab0b      	add	r3, sp, #44	; 0x2c
   57a3c:	9305      	str	r3, [sp, #20]
   57a3e:	9303      	str	r3, [sp, #12]
   57a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   57a42:	9302      	str	r3, [sp, #8]
   57a44:	2300      	movs	r3, #0
   57a46:	4618      	mov	r0, r3
   57a48:	e9cd 3300 	strd	r3, r3, [sp]
   57a4c:	f7ed fbf0 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   57a50:	b007      	add	sp, #28
   57a52:	f85d fb04 	ldr.w	pc, [sp], #4

00057a56 <lte_lc_init_and_connect_async>:
{
   57a56:	b510      	push	{r4, lr}
   57a58:	4604      	mov	r4, r0
	err = init_and_config();
   57a5a:	f7f4 f883 	bl	4bb64 <init_and_config>
	if (err) {
   57a5e:	b920      	cbnz	r0, 57a6a <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   57a60:	4620      	mov	r0, r4
}
   57a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   57a66:	f7f4 ba23 	b.w	4beb0 <lte_lc_connect_async>
}
   57a6a:	f06f 000d 	mvn.w	r0, #13
   57a6e:	bd10      	pop	{r4, pc}

00057a70 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   57a70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57a72:	ab0b      	add	r3, sp, #44	; 0x2c
   57a74:	9305      	str	r3, [sp, #20]
   57a76:	9303      	str	r3, [sp, #12]
   57a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   57a7a:	9302      	str	r3, [sp, #8]
   57a7c:	2300      	movs	r3, #0
   57a7e:	4618      	mov	r0, r3
   57a80:	e9cd 3300 	strd	r3, r3, [sp]
   57a84:	f7ed fbd4 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   57a88:	b007      	add	sp, #28
   57a8a:	f85d fb04 	ldr.w	pc, [sp], #4

00057a8e <string_to_int>:
{
   57a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   57a90:	460c      	mov	r4, r1
   57a92:	4605      	mov	r5, r0
   57a94:	4616      	mov	r6, r2
	errno = 0;
   57a96:	f7fe fb72 	bl	5617e <__errno>
   57a9a:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   57a9c:	4622      	mov	r2, r4
	errno = 0;
   57a9e:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   57aa0:	a901      	add	r1, sp, #4
   57aa2:	4628      	mov	r0, r5
   57aa4:	f7fc f94e 	bl	53d44 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   57aa8:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   57aaa:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   57aac:	42ab      	cmp	r3, r5
   57aae:	d103      	bne.n	57ab8 <string_to_int+0x2a>
		return -ENODATA;
   57ab0:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   57ab4:	b002      	add	sp, #8
   57ab6:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   57ab8:	781b      	ldrb	r3, [r3, #0]
   57aba:	2b00      	cmp	r3, #0
   57abc:	d1f8      	bne.n	57ab0 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   57abe:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   57ac2:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   57ac4:	3303      	adds	r3, #3
   57ac6:	d802      	bhi.n	57ace <string_to_int+0x40>
	return 0;
   57ac8:	2000      	movs	r0, #0
	*output = temp;
   57aca:	6034      	str	r4, [r6, #0]
	return 0;
   57acc:	e7f2      	b.n	57ab4 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   57ace:	f7fe fb56 	bl	5617e <__errno>
   57ad2:	6803      	ldr	r3, [r0, #0]
   57ad4:	2b22      	cmp	r3, #34	; 0x22
   57ad6:	d1f7      	bne.n	57ac8 <string_to_int+0x3a>
   57ad8:	e7ea      	b.n	57ab0 <string_to_int+0x22>

00057ada <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   57ada:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   57adc:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   57ade:	b087      	sub	sp, #28
   57ae0:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   57ae2:	ab01      	add	r3, sp, #4
   57ae4:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   57ae6:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   57ae8:	f7ff ff71 	bl	579ce <at_params_string_get>
	if (err) {
   57aec:	b968      	cbnz	r0, 57b0a <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   57aee:	9b01      	ldr	r3, [sp, #4]
	if (string_to_int(str_buf, base, output)) {
   57af0:	4622      	mov	r2, r4
	str_buf[len] = '\0';
   57af2:	3318      	adds	r3, #24
   57af4:	446b      	add	r3, sp
   57af6:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   57afa:	4629      	mov	r1, r5
   57afc:	a802      	add	r0, sp, #8
   57afe:	f7ff ffc6 	bl	57a8e <string_to_int>
		return -ENODATA;
   57b02:	2800      	cmp	r0, #0
   57b04:	bf18      	it	ne
   57b06:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   57b0a:	b007      	add	sp, #28
   57b0c:	bd30      	pop	{r4, r5, pc}

00057b0e <on_modem_init>:
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   57b0e:	4770      	bx	lr

00057b10 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   57b10:	f7f4 b9f0 	b.w	4bef4 <lte_lc_deinit>

00057b14 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   57b14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57b16:	ab0b      	add	r3, sp, #44	; 0x2c
   57b18:	9305      	str	r3, [sp, #20]
   57b1a:	9303      	str	r3, [sp, #12]
   57b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   57b1e:	9302      	str	r3, [sp, #8]
   57b20:	2300      	movs	r3, #0
   57b22:	4618      	mov	r0, r3
   57b24:	e9cd 3300 	strd	r3, r3, [sp]
   57b28:	f7ed fb82 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   57b2c:	b007      	add	sp, #28
   57b2e:	f85d fb04 	ldr.w	pc, [sp], #4

00057b32 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   57b32:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57b34:	ab0b      	add	r3, sp, #44	; 0x2c
   57b36:	9305      	str	r3, [sp, #20]
   57b38:	9303      	str	r3, [sp, #12]
   57b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   57b3c:	9302      	str	r3, [sp, #8]
   57b3e:	2300      	movs	r3, #0
   57b40:	4618      	mov	r0, r3
   57b42:	e9cd 3300 	strd	r3, r3, [sp]
   57b46:	f7ed fb73 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   57b4a:	b007      	add	sp, #28
   57b4c:	f85d fb04 	ldr.w	pc, [sp], #4

00057b50 <location_service_get_certificate>:
static char recv_buf[CONFIG_MULTICELL_LOCATION_RECV_BUF_SIZE];

const char *location_service_get_certificate(enum multicell_service service)
{
#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	if (service == MULTICELL_SERVICE_NRF_CLOUD) {
   57b50:	2801      	cmp	r0, #1
   57b52:	d101      	bne.n	57b58 <location_service_get_certificate+0x8>
		return location_service_get_certificate_nrf_cloud();
   57b54:	f7f5 bb46 	b.w	4d1e4 <location_service_get_certificate_nrf_cloud>
	if (service == MULTICELL_SERVICE_HERE) {
		return location_service_get_certificate_here();
	}
#endif
	return NULL;
}
   57b58:	2000      	movs	r0, #0
   57b5a:	4770      	bx	lr

00057b5c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   57b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   57b5e:	ab0b      	add	r3, sp, #44	; 0x2c
   57b60:	9305      	str	r3, [sp, #20]
   57b62:	9303      	str	r3, [sp, #12]
   57b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   57b66:	2201      	movs	r2, #1
   57b68:	9302      	str	r3, [sp, #8]
   57b6a:	2300      	movs	r3, #0
   57b6c:	4618      	mov	r0, r3
   57b6e:	e9cd 3300 	strd	r3, r3, [sp]
   57b72:	f7ed fb5d 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   57b76:	b007      	add	sp, #28
   57b78:	f85d fb04 	ldr.w	pc, [sp], #4

00057b7c <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   57b7c:	2000      	movs	r0, #0
   57b7e:	4770      	bx	lr

00057b80 <psa_crypto_init>:
}
   57b80:	2000      	movs	r0, #0
   57b82:	4770      	bx	lr

00057b84 <ld_dword>:
}
   57b84:	6800      	ldr	r0, [r0, #0]
   57b86:	4770      	bx	lr

00057b88 <ld_qword>:
{
   57b88:	4603      	mov	r3, r0
}
   57b8a:	6800      	ldr	r0, [r0, #0]
   57b8c:	6859      	ldr	r1, [r3, #4]
   57b8e:	4770      	bx	lr

00057b90 <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
   57b90:	0a0b      	lsrs	r3, r1, #8
   57b92:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   57b94:	7043      	strb	r3, [r0, #1]
   57b96:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
   57b98:	0e09      	lsrs	r1, r1, #24
   57b9a:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
   57b9c:	70c1      	strb	r1, [r0, #3]
}
   57b9e:	4770      	bx	lr

00057ba0 <st_qword>:
	*ptr++ = (BYTE)val; val >>= 8;
   57ba0:	0a11      	lsrs	r1, r2, #8
   57ba2:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   57ba4:	7041      	strb	r1, [r0, #1]
   57ba6:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
   57ba8:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
   57baa:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   57bac:	0a1a      	lsrs	r2, r3, #8
   57bae:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   57bb0:	7142      	strb	r2, [r0, #5]
   57bb2:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
   57bb4:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
   57bb6:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
   57bb8:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
   57bba:	71c3      	strb	r3, [r0, #7]
}
   57bbc:	4770      	bx	lr

00057bbe <clst2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   57bbe:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
   57bc0:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   57bc2:	3b02      	subs	r3, #2
   57bc4:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
   57bc6:	bf83      	ittte	hi
   57bc8:	8943      	ldrhhi	r3, [r0, #10]
   57bca:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
   57bcc:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   57bd0:	2000      	movls	r0, #0
}
   57bd2:	4770      	bx	lr

00057bd4 <sum_sfn>:
{
   57bd4:	4603      	mov	r3, r0
   57bd6:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
   57bda:	2000      	movs	r0, #0
		sum = (sum >> 1) + (sum << 7) + *dir++;
   57bdc:	01c2      	lsls	r2, r0, #7
   57bde:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
   57be2:	f813 0b01 	ldrb.w	r0, [r3], #1
   57be6:	fa50 f282 	uxtab	r2, r0, r2
	} while (--n);
   57bea:	428b      	cmp	r3, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
   57bec:	b2d0      	uxtb	r0, r2
	} while (--n);
   57bee:	d1f5      	bne.n	57bdc <sum_sfn+0x8>
}
   57bf0:	4770      	bx	lr

00057bf2 <xdir_sum>:
{
   57bf2:	b510      	push	{r4, lr}
   57bf4:	4604      	mov	r4, r0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
   57bf6:	7841      	ldrb	r1, [r0, #1]
	for (i = sum = 0; i < szblk; i++) {
   57bf8:	2000      	movs	r0, #0
   57bfa:	4602      	mov	r2, r0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
   57bfc:	3101      	adds	r1, #1
   57bfe:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
   57c00:	2a02      	cmp	r2, #2
   57c02:	bf08      	it	eq
   57c04:	2204      	moveq	r2, #4
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
   57c06:	5ca3      	ldrb	r3, [r4, r2]
	for (i = sum = 0; i < szblk; i++) {
   57c08:	3201      	adds	r2, #1
   57c0a:	eb03 33c0 	add.w	r3, r3, r0, lsl #15
   57c0e:	b29b      	uxth	r3, r3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
   57c10:	eb03 0350 	add.w	r3, r3, r0, lsr #1
	for (i = sum = 0; i < szblk; i++) {
   57c14:	4291      	cmp	r1, r2
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
   57c16:	b298      	uxth	r0, r3
	for (i = sum = 0; i < szblk; i++) {
   57c18:	d8f2      	bhi.n	57c00 <xdir_sum+0xe>
}
   57c1a:	bd10      	pop	{r4, pc}

00057c1c <init_alloc_info>:
{
   57c1c:	b510      	push	{r4, lr}
   57c1e:	4604      	mov	r4, r0
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
   57c20:	6900      	ldr	r0, [r0, #16]
{
   57c22:	460a      	mov	r2, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
   57c24:	3034      	adds	r0, #52	; 0x34
   57c26:	f7ff ffad 	bl	57b84 <ld_dword>
   57c2a:	6088      	str	r0, [r1, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   57c2c:	6920      	ldr	r0, [r4, #16]
   57c2e:	3038      	adds	r0, #56	; 0x38
   57c30:	f7ff ffaa 	bl	57b88 <ld_qword>
   57c34:	e9c2 0104 	strd	r0, r1, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
   57c38:	6923      	ldr	r3, [r4, #16]
   57c3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   57c3e:	f003 0302 	and.w	r3, r3, #2
   57c42:	71d3      	strb	r3, [r2, #7]
	obj->n_frag = 0;										/* No last fragment info */
   57c44:	2300      	movs	r3, #0
   57c46:	61d3      	str	r3, [r2, #28]
}
   57c48:	bd10      	pop	{r4, pc}

00057c4a <validate>:
{
   57c4a:	b538      	push	{r3, r4, r5, lr}
   57c4c:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   57c4e:	4604      	mov	r4, r0
   57c50:	b918      	cbnz	r0, 57c5a <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
   57c52:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   57c54:	2300      	movs	r3, #0
   57c56:	602b      	str	r3, [r5, #0]
}
   57c58:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   57c5a:	6803      	ldr	r3, [r0, #0]
   57c5c:	2b00      	cmp	r3, #0
   57c5e:	d0f8      	beq.n	57c52 <validate+0x8>
   57c60:	781a      	ldrb	r2, [r3, #0]
   57c62:	2a00      	cmp	r2, #0
   57c64:	d0f5      	beq.n	57c52 <validate+0x8>
   57c66:	8881      	ldrh	r1, [r0, #4]
   57c68:	88da      	ldrh	r2, [r3, #6]
   57c6a:	4291      	cmp	r1, r2
   57c6c:	d1f1      	bne.n	57c52 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
   57c6e:	7858      	ldrb	r0, [r3, #1]
   57c70:	f7f7 fa4e 	bl	4f110 <disk_status>
   57c74:	f010 0001 	ands.w	r0, r0, #1
   57c78:	d1eb      	bne.n	57c52 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   57c7a:	6823      	ldr	r3, [r4, #0]
   57c7c:	e7eb      	b.n	57c56 <validate+0xc>

00057c7e <sync_window>:
{
   57c7e:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
   57c80:	78c3      	ldrb	r3, [r0, #3]
{
   57c82:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
   57c84:	b1c3      	cbz	r3, 57cb8 <sync_window+0x3a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
   57c86:	f100 053c 	add.w	r5, r0, #60	; 0x3c
   57c8a:	6b82      	ldr	r2, [r0, #56]	; 0x38
   57c8c:	2301      	movs	r3, #1
   57c8e:	4629      	mov	r1, r5
   57c90:	7840      	ldrb	r0, [r0, #1]
   57c92:	f7f7 fa61 	bl	4f158 <disk_write>
   57c96:	b988      	cbnz	r0, 57cbc <sync_window+0x3e>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   57c98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   57c9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   57c9c:	6a22      	ldr	r2, [r4, #32]
   57c9e:	1acb      	subs	r3, r1, r3
   57ca0:	4293      	cmp	r3, r2
			fs->wflag = 0;	/* Clear window dirty flag */
   57ca2:	70e0      	strb	r0, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   57ca4:	d208      	bcs.n	57cb8 <sync_window+0x3a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
   57ca6:	78a3      	ldrb	r3, [r4, #2]
   57ca8:	2b02      	cmp	r3, #2
   57caa:	d105      	bne.n	57cb8 <sync_window+0x3a>
   57cac:	440a      	add	r2, r1
   57cae:	2301      	movs	r3, #1
   57cb0:	4629      	mov	r1, r5
   57cb2:	7860      	ldrb	r0, [r4, #1]
   57cb4:	f7f7 fa50 	bl	4f158 <disk_write>
	FRESULT res = FR_OK;
   57cb8:	2000      	movs	r0, #0
}
   57cba:	bd38      	pop	{r3, r4, r5, pc}
			res = FR_DISK_ERR;
   57cbc:	2001      	movs	r0, #1
   57cbe:	e7fc      	b.n	57cba <sync_window+0x3c>

00057cc0 <put_utf>:
{
   57cc0:	b538      	push	{r3, r4, r5, lr}
   57cc2:	460d      	mov	r5, r1
	wc = ff_uni2oem(chr, CODEPAGE);
   57cc4:	f240 11b5 	movw	r1, #437	; 0x1b5
{
   57cc8:	4614      	mov	r4, r2
	wc = ff_uni2oem(chr, CODEPAGE);
   57cca:	f7f7 fa7f 	bl	4f1cc <ff_uni2oem>
	if (wc >= 0x100) {	/* Is this a DBC? */
   57cce:	28ff      	cmp	r0, #255	; 0xff
   57cd0:	d907      	bls.n	57ce2 <put_utf+0x22>
		if (szb < 2) return 0;
   57cd2:	2c01      	cmp	r4, #1
   57cd4:	d90b      	bls.n	57cee <put_utf+0x2e>
		return 2;
   57cd6:	2402      	movs	r4, #2
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
   57cd8:	0a03      	lsrs	r3, r0, #8
   57cda:	702b      	strb	r3, [r5, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
   57cdc:	7068      	strb	r0, [r5, #1]
}
   57cde:	4620      	mov	r0, r4
   57ce0:	bd38      	pop	{r3, r4, r5, pc}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
   57ce2:	b130      	cbz	r0, 57cf2 <put_utf+0x32>
   57ce4:	2c00      	cmp	r4, #0
   57ce6:	d0fa      	beq.n	57cde <put_utf+0x1e>
	return 1;
   57ce8:	2401      	movs	r4, #1
	*buf++ = (TCHAR)wc;					/* Store the character */
   57cea:	7028      	strb	r0, [r5, #0]
	return 1;
   57cec:	e7f7      	b.n	57cde <put_utf+0x1e>
		if (szb < 2) return 0;
   57cee:	2400      	movs	r4, #0
   57cf0:	e7f5      	b.n	57cde <put_utf+0x1e>
   57cf2:	4604      	mov	r4, r0
   57cf4:	e7f3      	b.n	57cde <put_utf+0x1e>

00057cf6 <get_fileinfo>:
{
   57cf6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	fno->fname[0] = 0;			/* Invaidate file info */
   57cfa:	2600      	movs	r6, #0
	FATFS *fs = dp->obj.fs;
   57cfc:	6807      	ldr	r7, [r0, #0]
	fno->fname[0] = 0;			/* Invaidate file info */
   57cfe:	768e      	strb	r6, [r1, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   57d00:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   57d02:	4605      	mov	r5, r0
   57d04:	460c      	mov	r4, r1
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   57d06:	2b00      	cmp	r3, #0
   57d08:	d049      	beq.n	57d9e <get_fileinfo+0xa8>
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
   57d0a:	783b      	ldrb	r3, [r7, #0]
   57d0c:	2b04      	cmp	r3, #4
   57d0e:	d14b      	bne.n	57da8 <get_fileinfo+0xb2>
		UINT nc = 0;
   57d10:	4635      	mov	r5, r6
		hs = 0;
   57d12:	4633      	mov	r3, r6
		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
   57d14:	f04f 0840 	mov.w	r8, #64	; 0x40
   57d18:	e020      	b.n	57d5c <get_fileinfo+0x66>
			if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
   57d1a:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
   57d1e:	d224      	bcs.n	57d6a <get_fileinfo+0x74>
			if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
   57d20:	f018 0f1f 	tst.w	r8, #31
   57d24:	bf08      	it	eq
   57d26:	f108 0802 	addeq.w	r8, r8, #2
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
   57d2a:	f832 0008 	ldrh.w	r0, [r2, r8]
   57d2e:	3501      	adds	r5, #1
   57d30:	f108 0802 	add.w	r8, r8, #2
			if (hs == 0 && IsSurrogate(wc)) {		/* Is it a surrogate? */
   57d34:	b92b      	cbnz	r3, 57d42 <get_fileinfo+0x4c>
   57d36:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
   57d3a:	b292      	uxth	r2, r2
   57d3c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   57d40:	d30b      	bcc.n	57d5a <get_fileinfo+0x64>
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
   57d42:	f106 011a 	add.w	r1, r6, #26
   57d46:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
   57d4a:	4421      	add	r1, r4
   57d4c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   57d50:	f7ff ffb6 	bl	57cc0 <put_utf>
			if (nw == 0) { di = 0; break; }			/* Buffer overflow or wrong char? */
   57d54:	b148      	cbz	r0, 57d6a <get_fileinfo+0x74>
			di += nw;
   57d56:	4406      	add	r6, r0
			hs = 0;
   57d58:	2000      	movs	r0, #0
   57d5a:	4603      	mov	r3, r0
		while (nc < fs->dirbuf[XDIR_NumName]) {
   57d5c:	693a      	ldr	r2, [r7, #16]
   57d5e:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
   57d62:	42a9      	cmp	r1, r5
   57d64:	d8d9      	bhi.n	57d1a <get_fileinfo+0x24>
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
   57d66:	b903      	cbnz	r3, 57d6a <get_fileinfo+0x74>
		if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
   57d68:	b916      	cbnz	r6, 57d70 <get_fileinfo+0x7a>
   57d6a:	233f      	movs	r3, #63	; 0x3f
   57d6c:	2601      	movs	r6, #1
   57d6e:	76a3      	strb	r3, [r4, #26]
		fno->fname[di] = 0;						/* Terminate the name */
   57d70:	2300      	movs	r3, #0
   57d72:	4426      	add	r6, r4
   57d74:	76b3      	strb	r3, [r6, #26]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
   57d76:	7363      	strb	r3, [r4, #13]
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
   57d78:	693b      	ldr	r3, [r7, #16]
   57d7a:	791b      	ldrb	r3, [r3, #4]
   57d7c:	f003 0237 	and.w	r2, r3, #55	; 0x37
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   57d80:	06db      	lsls	r3, r3, #27
		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
   57d82:	7322      	strb	r2, [r4, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   57d84:	d40d      	bmi.n	57da2 <get_fileinfo+0xac>
   57d86:	6938      	ldr	r0, [r7, #16]
   57d88:	3038      	adds	r0, #56	; 0x38
   57d8a:	f7ff fefd 	bl	57b88 <ld_qword>
   57d8e:	e9c4 0100 	strd	r0, r1, [r4]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
   57d92:	693b      	ldr	r3, [r7, #16]
   57d94:	899b      	ldrh	r3, [r3, #12]
   57d96:	8163      	strh	r3, [r4, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
   57d98:	693b      	ldr	r3, [r7, #16]
   57d9a:	89db      	ldrh	r3, [r3, #14]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
   57d9c:	8123      	strh	r3, [r4, #8]
}
   57d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   57da2:	2000      	movs	r0, #0
   57da4:	4601      	mov	r1, r0
   57da6:	e7f2      	b.n	57d8e <get_fileinfo+0x98>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
   57da8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   57daa:	3301      	adds	r3, #1
   57dac:	d13f      	bne.n	57e2e <get_fileinfo+0x138>
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
   57dae:	2300      	movs	r3, #0
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
   57db0:	272e      	movs	r7, #46	; 0x2e
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
   57db2:	461a      	mov	r2, r3
		wc = dp->dir[si++];			/* Get a char */
   57db4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   57db6:	1c50      	adds	r0, r2, #1
   57db8:	5c8a      	ldrb	r2, [r1, r2]
		if (wc == ' ') continue;	/* Skip padding spaces */
   57dba:	2a20      	cmp	r2, #32
   57dbc:	d03c      	beq.n	57e38 <get_fileinfo+0x142>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
   57dbe:	2a05      	cmp	r2, #5
   57dc0:	bf08      	it	eq
   57dc2:	22e5      	moveq	r2, #229	; 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
   57dc4:	2809      	cmp	r0, #9
   57dc6:	f103 0101 	add.w	r1, r3, #1
   57dca:	eb04 0603 	add.w	r6, r4, r3
   57dce:	d131      	bne.n	57e34 <get_fileinfo+0x13e>
   57dd0:	2b0b      	cmp	r3, #11
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
   57dd2:	bf8f      	iteee	hi
   57dd4:	460b      	movhi	r3, r1
   57dd6:	1909      	addls	r1, r1, r4
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
   57dd8:	7377      	strbls	r7, [r6, #13]
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
   57dda:	3302      	addls	r3, #2
   57ddc:	bf94      	ite	ls
   57dde:	734a      	strbls	r2, [r1, #13]
   57de0:	7372      	strbhi	r2, [r6, #13]
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
   57de2:	4602      	mov	r2, r0
   57de4:	e7e6      	b.n	57db4 <get_fileinfo+0xbe>
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
   57de6:	f1b9 0f00 	cmp.w	r9, #0
   57dea:	d105      	bne.n	57df8 <get_fileinfo+0x102>
   57dec:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
   57df0:	b29b      	uxth	r3, r3
   57df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   57df6:	d30b      	bcc.n	57e10 <get_fileinfo+0x11a>
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
   57df8:	f108 011a 	add.w	r1, r8, #26
   57dfc:	f1c8 02ff 	rsb	r2, r8, #255	; 0xff
   57e00:	4421      	add	r1, r4
   57e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   57e06:	f7ff ff5b 	bl	57cc0 <put_utf>
				if (nw == 0) { di = 0; break; }	/* Buffer overflow or wrong char? */
   57e0a:	b140      	cbz	r0, 57e1e <get_fileinfo+0x128>
				di += nw;
   57e0c:	4480      	add	r8, r0
				hs = 0;
   57e0e:	2000      	movs	r0, #0
   57e10:	4681      	mov	r9, r0
   57e12:	3602      	adds	r6, #2
			while (fs->lfnbuf[si] != 0) {
   57e14:	68fb      	ldr	r3, [r7, #12]
   57e16:	5b98      	ldrh	r0, [r3, r6]
   57e18:	2800      	cmp	r0, #0
   57e1a:	d1e4      	bne.n	57de6 <get_fileinfo+0xf0>
   57e1c:	4640      	mov	r0, r8
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
   57e1e:	f1b9 0f00 	cmp.w	r9, #0
   57e22:	bf18      	it	ne
   57e24:	2000      	movne	r0, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
   57e26:	2300      	movs	r3, #0
   57e28:	4420      	add	r0, r4
   57e2a:	7683      	strb	r3, [r0, #26]
	while (si < 11) {		/* Get SFN from SFN entry */
   57e2c:	e7bf      	b.n	57dae <get_fileinfo+0xb8>
			hs = 0;
   57e2e:	46b1      	mov	r9, r6
			si = di = 0;
   57e30:	46b0      	mov	r8, r6
   57e32:	e7ef      	b.n	57e14 <get_fileinfo+0x11e>
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
   57e34:	460b      	mov	r3, r1
   57e36:	7372      	strb	r2, [r6, #13]
	while (si < 11) {		/* Get SFN from SFN entry */
   57e38:	280b      	cmp	r0, #11
   57e3a:	d1d2      	bne.n	57de2 <get_fileinfo+0xec>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
   57e3c:	2100      	movs	r1, #0
   57e3e:	18e2      	adds	r2, r4, r3
   57e40:	7351      	strb	r1, [r2, #13]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
   57e42:	7ea2      	ldrb	r2, [r4, #26]
   57e44:	b99a      	cbnz	r2, 57e6e <get_fileinfo+0x178>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
   57e46:	b143      	cbz	r3, 57e5a <get_fileinfo+0x164>
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
   57e48:	2008      	movs	r0, #8
   57e4a:	f104 030c 	add.w	r3, r4, #12
   57e4e:	785a      	ldrb	r2, [r3, #1]
   57e50:	1c59      	adds	r1, r3, #1
   57e52:	b9f2      	cbnz	r2, 57e92 <get_fileinfo+0x19c>
   57e54:	1b1b      	subs	r3, r3, r4
   57e56:	3b0c      	subs	r3, #12
   57e58:	e002      	b.n	57e60 <get_fileinfo+0x16a>
			fno->fname[di++] = '?';
   57e5a:	233f      	movs	r3, #63	; 0x3f
   57e5c:	76a3      	strb	r3, [r4, #26]
   57e5e:	2301      	movs	r3, #1
		fno->fname[di] = 0;	/* Terminate the LFN */
   57e60:	2200      	movs	r2, #0
   57e62:	4423      	add	r3, r4
   57e64:	769a      	strb	r2, [r3, #26]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
   57e66:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   57e68:	7b1b      	ldrb	r3, [r3, #12]
   57e6a:	b903      	cbnz	r3, 57e6e <get_fileinfo+0x178>
   57e6c:	7363      	strb	r3, [r4, #13]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
   57e6e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   57e70:	7adb      	ldrb	r3, [r3, #11]
   57e72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   57e76:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
   57e78:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   57e7a:	2300      	movs	r3, #0
   57e7c:	301c      	adds	r0, #28
   57e7e:	f7ff fe81 	bl	57b84 <ld_dword>
   57e82:	6063      	str	r3, [r4, #4]
   57e84:	6020      	str	r0, [r4, #0]
   57e86:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   57e88:	8adb      	ldrh	r3, [r3, #22]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
   57e8a:	8163      	strh	r3, [r4, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
   57e8c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   57e8e:	8b1b      	ldrh	r3, [r3, #24]
   57e90:	e784      	b.n	57d9c <get_fileinfo+0xa6>
				if (wc == '.') lcf = NS_EXT;
   57e92:	2a2e      	cmp	r2, #46	; 0x2e
   57e94:	d00b      	beq.n	57eae <get_fileinfo+0x1b8>
				wc = (WCHAR)fno->altname[si];
   57e96:	4613      	mov	r3, r2
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
   57e98:	3a41      	subs	r2, #65	; 0x41
   57e9a:	2a19      	cmp	r2, #25
   57e9c:	d804      	bhi.n	57ea8 <get_fileinfo+0x1b2>
   57e9e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   57ea0:	7b12      	ldrb	r2, [r2, #12]
   57ea2:	4210      	tst	r0, r2
   57ea4:	d000      	beq.n	57ea8 <get_fileinfo+0x1b2>
   57ea6:	3320      	adds	r3, #32
				fno->fname[di] = (TCHAR)wc;
   57ea8:	734b      	strb	r3, [r1, #13]
   57eaa:	460b      	mov	r3, r1
   57eac:	e7cf      	b.n	57e4e <get_fileinfo+0x158>
				if (wc == '.') lcf = NS_EXT;
   57eae:	2010      	movs	r0, #16
   57eb0:	4613      	mov	r3, r2
   57eb2:	e7f9      	b.n	57ea8 <get_fileinfo+0x1b2>

00057eb4 <xname_sum>:
{
   57eb4:	b538      	push	{r3, r4, r5, lr}
   57eb6:	4605      	mov	r5, r0
	WORD sum = 0;
   57eb8:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
   57eba:	f835 0b02 	ldrh.w	r0, [r5], #2
   57ebe:	b908      	cbnz	r0, 57ec4 <xname_sum+0x10>
}
   57ec0:	4620      	mov	r0, r4
   57ec2:	bd38      	pop	{r3, r4, r5, pc}
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
   57ec4:	f7f7 f9b4 	bl	4f230 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
   57ec8:	0862      	lsrs	r2, r4, #1
   57eca:	eb02 32c4 	add.w	r2, r2, r4, lsl #15
   57ece:	b2c3      	uxtb	r3, r0
   57ed0:	fa13 f282 	uxtah	r2, r3, r2
   57ed4:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
   57ed6:	f3c0 2307 	ubfx	r3, r0, #8, #8
   57eda:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   57ede:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
   57ee2:	b29c      	uxth	r4, r3
   57ee4:	e7e9      	b.n	57eba <xname_sum+0x6>

00057ee6 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
   57ee6:	f3c2 2307 	ubfx	r3, r2, #8, #8
   57eea:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
   57eec:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
   57eee:	7803      	ldrb	r3, [r0, #0]
   57ef0:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
   57ef2:	bf01      	itttt	eq
   57ef4:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
   57ef6:	750a      	strbeq	r2, [r1, #20]
   57ef8:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
   57efa:	754a      	strbeq	r2, [r1, #21]
}
   57efc:	4770      	bx	lr

00057efe <move_window>:
{
   57efe:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
   57f00:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   57f02:	4605      	mov	r5, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
   57f04:	428b      	cmp	r3, r1
{
   57f06:	460c      	mov	r4, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
   57f08:	d010      	beq.n	57f2c <move_window+0x2e>
		res = sync_window(fs);		/* Flush the window */
   57f0a:	f7ff feb8 	bl	57c7e <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
   57f0e:	b960      	cbnz	r0, 57f2a <move_window+0x2c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
   57f10:	4622      	mov	r2, r4
   57f12:	2301      	movs	r3, #1
   57f14:	7868      	ldrb	r0, [r5, #1]
   57f16:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   57f1a:	f7f7 f911 	bl	4f140 <disk_read>
				res = FR_DISK_ERR;
   57f1e:	2800      	cmp	r0, #0
   57f20:	bf1c      	itt	ne
   57f22:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
   57f26:	2001      	movne	r0, #1
			fs->winsect = sect;
   57f28:	63ac      	str	r4, [r5, #56]	; 0x38
}
   57f2a:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
   57f2c:	2000      	movs	r0, #0
   57f2e:	e7fc      	b.n	57f2a <move_window+0x2c>

00057f30 <change_bitmap>:
{
   57f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
   57f34:	f04f 0a01 	mov.w	sl, #1
{
   57f38:	4605      	mov	r5, r0
   57f3a:	4617      	mov	r7, r2
   57f3c:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
   57f3e:	3902      	subs	r1, #2
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
   57f40:	6b46      	ldr	r6, [r0, #52]	; 0x34
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
   57f42:	f001 0407 	and.w	r4, r1, #7
   57f46:	fa0a f404 	lsl.w	r4, sl, r4
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
   57f4a:	eb06 3611 	add.w	r6, r6, r1, lsr #12
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
   57f4e:	f3c1 09c8 	ubfx	r9, r1, #3, #9
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
   57f52:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
   57f54:	4631      	mov	r1, r6
   57f56:	4628      	mov	r0, r5
   57f58:	3601      	adds	r6, #1
   57f5a:	f7ff ffd0 	bl	57efe <move_window>
   57f5e:	b118      	cbz	r0, 57f68 <change_bitmap+0x38>
   57f60:	2001      	movs	r0, #1
}
   57f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   57f66:	4699      	mov	r9, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
   57f68:	eb05 0209 	add.w	r2, r5, r9
   57f6c:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
   57f70:	4223      	tst	r3, r4
   57f72:	bf14      	ite	ne
   57f74:	2101      	movne	r1, #1
   57f76:	2100      	moveq	r1, #0
   57f78:	4541      	cmp	r1, r8
   57f7a:	d014      	beq.n	57fa6 <change_bitmap+0x76>
				fs->win[i] ^= bm;	/* Flip the bit */
   57f7c:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
   57f7e:	3f01      	subs	r7, #1
				fs->win[i] ^= bm;	/* Flip the bit */
   57f80:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
				fs->wflag = 1;
   57f84:	f885 a003 	strb.w	sl, [r5, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
   57f88:	d0eb      	beq.n	57f62 <change_bitmap+0x32>
			} while (bm <<= 1);		/* Next bit */
   57f8a:	0064      	lsls	r4, r4, #1
   57f8c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   57f90:	d1ea      	bne.n	57f68 <change_bitmap+0x38>
		} while (++i < SS(fs));		/* Next byte */
   57f92:	f109 0301 	add.w	r3, r9, #1
   57f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
			bm = 1;
   57f9a:	f04f 0401 	mov.w	r4, #1
		i = 0;
   57f9e:	f04f 0900 	mov.w	r9, #0
		} while (++i < SS(fs));		/* Next byte */
   57fa2:	d1e0      	bne.n	57f66 <change_bitmap+0x36>
   57fa4:	e7d6      	b.n	57f54 <change_bitmap+0x24>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
   57fa6:	2002      	movs	r0, #2
   57fa8:	e7db      	b.n	57f62 <change_bitmap+0x32>

00057faa <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   57faa:	2901      	cmp	r1, #1
{
   57fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   57fae:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   57fb0:	f240 808b 	bls.w	580ca <get_fat+0x120>
	FATFS *fs = obj->fs;
   57fb4:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   57fb6:	69f3      	ldr	r3, [r6, #28]
   57fb8:	428b      	cmp	r3, r1
   57fba:	f240 8086 	bls.w	580ca <get_fat+0x120>
		switch (fs->fs_type) {
   57fbe:	7833      	ldrb	r3, [r6, #0]
   57fc0:	3b01      	subs	r3, #1
   57fc2:	2b03      	cmp	r3, #3
   57fc4:	f200 8081 	bhi.w	580ca <get_fat+0x120>
   57fc8:	e8df f003 	tbb	[pc, r3]
   57fcc:	4a372902 	.word	0x4a372902
			bc = (UINT)clst; bc += bc / 2;
   57fd0:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   57fd4:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   57fd6:	4630      	mov	r0, r6
   57fd8:	eb01 2155 	add.w	r1, r1, r5, lsr #9
   57fdc:	f7ff ff8f 	bl	57efe <move_window>
   57fe0:	b110      	cbz	r0, 57fe8 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   57fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   57fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   57fe8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   57fea:	1c6f      	adds	r7, r5, #1
   57fec:	f3c5 0508 	ubfx	r5, r5, #0, #9
   57ff0:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   57ff2:	4630      	mov	r0, r6
   57ff4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   57ff8:	f895 503c 	ldrb.w	r5, [r5, #60]	; 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   57ffc:	f7ff ff7f 	bl	57efe <move_window>
   58000:	2800      	cmp	r0, #0
   58002:	d1ee      	bne.n	57fe2 <get_fat+0x38>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
   58004:	f3c7 0708 	ubfx	r7, r7, #0, #9
   58008:	4437      	add	r7, r6
   5800a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   5800e:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
   58012:	07e3      	lsls	r3, r4, #31
   58014:	bf4c      	ite	mi
   58016:	0900      	lsrmi	r0, r0, #4
   58018:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
   5801c:	e7e3      	b.n	57fe6 <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   5801e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   58020:	4630      	mov	r0, r6
   58022:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   58026:	f7ff ff6a 	bl	57efe <move_window>
   5802a:	2800      	cmp	r0, #0
   5802c:	d1d9      	bne.n	57fe2 <get_fat+0x38>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
   5802e:	0064      	lsls	r4, r4, #1
   58030:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   58034:	4434      	add	r4, r6
   58036:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
			break;
   58038:	e7d5      	b.n	57fe6 <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   5803a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   5803c:	4630      	mov	r0, r6
   5803e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   58042:	f7ff ff5c 	bl	57efe <move_window>
   58046:	2800      	cmp	r0, #0
   58048:	d1cb      	bne.n	57fe2 <get_fat+0x38>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
   5804a:	00a4      	lsls	r4, r4, #2
   5804c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   58050:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   58054:	4420      	add	r0, r4
   58056:	f7ff fd95 	bl	57b84 <ld_dword>
   5805a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
   5805e:	e7c2      	b.n	57fe6 <get_fat+0x3c>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
   58060:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
   58064:	ea53 0201 	orrs.w	r2, r3, r1
   58068:	79c5      	ldrb	r5, [r0, #7]
   5806a:	d001      	beq.n	58070 <get_fat+0xc6>
   5806c:	6882      	ldr	r2, [r0, #8]
   5806e:	b902      	cbnz	r2, 58072 <get_fat+0xc8>
   58070:	bb5d      	cbnz	r5, 580ca <get_fat+0x120>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
   58072:	6882      	ldr	r2, [r0, #8]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   58074:	2d02      	cmp	r5, #2
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
   58076:	8977      	ldrh	r7, [r6, #10]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
   58078:	eba4 0202 	sub.w	r2, r4, r2
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   5807c:	d10c      	bne.n	58098 <get_fat+0xee>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
   5807e:	3b01      	subs	r3, #1
   58080:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
   58084:	0a5b      	lsrs	r3, r3, #9
   58086:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   5808a:	fbb3 f3f7 	udiv	r3, r3, r7
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   5808e:	429a      	cmp	r2, r3
   58090:	d81b      	bhi.n	580ca <get_fat+0x120>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
   58092:	d01c      	beq.n	580ce <get_fat+0x124>
   58094:	1c60      	adds	r0, r4, #1
   58096:	e7a6      	b.n	57fe6 <get_fat+0x3c>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
   58098:	2d03      	cmp	r5, #3
   5809a:	d102      	bne.n	580a2 <get_fat+0xf8>
   5809c:	6983      	ldr	r3, [r0, #24]
   5809e:	4293      	cmp	r3, r2
   580a0:	d8f8      	bhi.n	58094 <get_fat+0xea>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
   580a2:	69c3      	ldr	r3, [r0, #28]
   580a4:	b99b      	cbnz	r3, 580ce <get_fat+0x124>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   580a6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   580a8:	4630      	mov	r0, r6
   580aa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   580ae:	f7ff ff26 	bl	57efe <move_window>
   580b2:	2800      	cmp	r0, #0
   580b4:	d195      	bne.n	57fe2 <get_fat+0x38>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
   580b6:	00a0      	lsls	r0, r4, #2
   580b8:	363c      	adds	r6, #60	; 0x3c
   580ba:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
   580be:	4430      	add	r0, r6
   580c0:	f7ff fd60 	bl	57b84 <ld_dword>
   580c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   580c8:	e78d      	b.n	57fe6 <get_fat+0x3c>
   580ca:	2001      	movs	r0, #1
   580cc:	e78b      	b.n	57fe6 <get_fat+0x3c>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
   580ce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return val;
   580d2:	e788      	b.n	57fe6 <get_fat+0x3c>

000580d4 <dir_sdi>:
{
   580d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
   580d6:	6804      	ldr	r4, [r0, #0]
{
   580d8:	4606      	mov	r6, r0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   580da:	7823      	ldrb	r3, [r4, #0]
{
   580dc:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   580de:	2b04      	cmp	r3, #4
   580e0:	bf14      	ite	ne
   580e2:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
   580e6:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
   580ea:	428b      	cmp	r3, r1
   580ec:	d801      	bhi.n	580f2 <dir_sdi+0x1e>
		return FR_INT_ERR;
   580ee:	2002      	movs	r0, #2
}
   580f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   580f2:	06ca      	lsls	r2, r1, #27
   580f4:	d1fb      	bne.n	580ee <dir_sdi+0x1a>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
   580f6:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
   580f8:	6301      	str	r1, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
   580fa:	bb1a      	cbnz	r2, 58144 <dir_sdi+0x70>
   580fc:	7823      	ldrb	r3, [r4, #0]
   580fe:	2b02      	cmp	r3, #2
   58100:	d812      	bhi.n	58128 <dir_sdi+0x54>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
   58102:	8923      	ldrh	r3, [r4, #8]
   58104:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
   58108:	d9f1      	bls.n	580ee <dir_sdi+0x1a>
		dp->sect = fs->dirbase;
   5810a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	dp->clust = clst;					/* Current cluster# */
   5810c:	e9c6 200d 	strd	r2, r0, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
   58110:	2800      	cmp	r0, #0
   58112:	d0ec      	beq.n	580ee <dir_sdi+0x1a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   58114:	eb00 2055 	add.w	r0, r0, r5, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   58118:	343c      	adds	r4, #60	; 0x3c
   5811a:	f3c5 0508 	ubfx	r5, r5, #0, #9
   5811e:	442c      	add	r4, r5
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   58120:	63b0      	str	r0, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   58122:	63f4      	str	r4, [r6, #60]	; 0x3c
	return FR_OK;
   58124:	2000      	movs	r0, #0
   58126:	e7e3      	b.n	580f0 <dir_sdi+0x1c>
		clst = (DWORD)fs->dirbase;
   58128:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
   5812a:	71c2      	strb	r2, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
   5812c:	2b00      	cmp	r3, #0
   5812e:	d0e8      	beq.n	58102 <dir_sdi+0x2e>
		while (ofs >= csz) {				/* Follow cluster chain */
   58130:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
   58132:	8967      	ldrh	r7, [r4, #10]
   58134:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
   58136:	42bd      	cmp	r5, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   58138:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
   5813a:	d205      	bcs.n	58148 <dir_sdi+0x74>
		dp->sect = clst2sect(fs, clst);
   5813c:	4620      	mov	r0, r4
   5813e:	f7ff fd3e 	bl	57bbe <clst2sect>
   58142:	e7e3      	b.n	5810c <dir_sdi+0x38>
   58144:	4613      	mov	r3, r2
   58146:	e7f3      	b.n	58130 <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   58148:	4630      	mov	r0, r6
   5814a:	f7ff ff2e 	bl	57faa <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   5814e:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   58150:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   58152:	d006      	beq.n	58162 <dir_sdi+0x8e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   58154:	2801      	cmp	r0, #1
   58156:	d9ca      	bls.n	580ee <dir_sdi+0x1a>
   58158:	69e3      	ldr	r3, [r4, #28]
   5815a:	4283      	cmp	r3, r0
   5815c:	d9c7      	bls.n	580ee <dir_sdi+0x1a>
			ofs -= csz;
   5815e:	1bed      	subs	r5, r5, r7
   58160:	e7e9      	b.n	58136 <dir_sdi+0x62>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   58162:	2001      	movs	r0, #1
   58164:	e7c4      	b.n	580f0 <dir_sdi+0x1c>

00058166 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   58166:	2901      	cmp	r1, #1
{
   58168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   5816c:	4606      	mov	r6, r0
   5816e:	460c      	mov	r4, r1
   58170:	4615      	mov	r5, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   58172:	d908      	bls.n	58186 <put_fat+0x20>
   58174:	69c3      	ldr	r3, [r0, #28]
   58176:	428b      	cmp	r3, r1
   58178:	d905      	bls.n	58186 <put_fat+0x20>
		switch (fs->fs_type) {
   5817a:	7803      	ldrb	r3, [r0, #0]
   5817c:	2b02      	cmp	r3, #2
   5817e:	d05e      	beq.n	5823e <put_fat+0xd8>
   58180:	d803      	bhi.n	5818a <put_fat+0x24>
   58182:	2b01      	cmp	r3, #1
   58184:	d021      	beq.n	581ca <put_fat+0x64>
	FRESULT res = FR_INT_ERR;
   58186:	2002      	movs	r0, #2
   58188:	e04f      	b.n	5822a <put_fat+0xc4>
		switch (fs->fs_type) {
   5818a:	3b03      	subs	r3, #3
   5818c:	2b01      	cmp	r3, #1
   5818e:	d8fa      	bhi.n	58186 <put_fat+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   58190:	6a81      	ldr	r1, [r0, #40]	; 0x28
   58192:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   58196:	f7ff feb2 	bl	57efe <move_window>
			if (res != FR_OK) break;
   5819a:	2800      	cmp	r0, #0
   5819c:	d145      	bne.n	5822a <put_fat+0xc4>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   5819e:	7832      	ldrb	r2, [r6, #0]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   581a0:	00a4      	lsls	r4, r4, #2
			p = fs->win + bc++ % SS(fs);
   581a2:	f106 033c 	add.w	r3, r6, #60	; 0x3c
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   581a6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   581aa:	2a04      	cmp	r2, #4
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   581ac:	4423      	add	r3, r4
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   581ae:	d007      	beq.n	581c0 <put_fat+0x5a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   581b0:	4618      	mov	r0, r3
   581b2:	f7ff fce7 	bl	57b84 <ld_dword>
   581b6:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
   581ba:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
   581be:	4305      	orrs	r5, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
   581c0:	4629      	mov	r1, r5
   581c2:	4618      	mov	r0, r3
   581c4:	f7ff fce4 	bl	57b90 <st_dword>
			break;
   581c8:	e02c      	b.n	58224 <put_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
   581ca:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   581ce:	6a81      	ldr	r1, [r0, #40]	; 0x28
   581d0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
   581d4:	f7ff fe93 	bl	57efe <move_window>
			if (res != FR_OK) break;
   581d8:	bb38      	cbnz	r0, 5822a <put_fat+0xc4>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
   581da:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
   581de:	f106 083c 	add.w	r8, r6, #60	; 0x3c
   581e2:	f107 0901 	add.w	r9, r7, #1
   581e6:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
   581ea:	bf1f      	itttt	ne
   581ec:	f818 2007 	ldrbne.w	r2, [r8, r7]
   581f0:	012b      	lslne	r3, r5, #4
   581f2:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
   581f6:	f002 020f 	andne.w	r2, r2, #15
   581fa:	bf14      	ite	ne
   581fc:	4313      	orrne	r3, r2
   581fe:	b2eb      	uxtbeq	r3, r5
   58200:	f808 3007 	strb.w	r3, [r8, r7]
			fs->wflag = 1;
   58204:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   58206:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   58208:	4630      	mov	r0, r6
			fs->wflag = 1;
   5820a:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   5820c:	eb01 2159 	add.w	r1, r1, r9, lsr #9
   58210:	f7ff fe75 	bl	57efe <move_window>
			if (res != FR_OK) break;
   58214:	b948      	cbnz	r0, 5822a <put_fat+0xc4>
			p = fs->win + bc % SS(fs);
   58216:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   5821a:	b144      	cbz	r4, 5822e <put_fat+0xc8>
   5821c:	f3c5 1507 	ubfx	r5, r5, #4, #8
   58220:	f808 5009 	strb.w	r5, [r8, r9]
			fs->wflag = 1;
   58224:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   58226:	2000      	movs	r0, #0
			fs->wflag = 1;
   58228:	70f3      	strb	r3, [r6, #3]
}
   5822a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   5822e:	f818 3009 	ldrb.w	r3, [r8, r9]
   58232:	f3c5 2503 	ubfx	r5, r5, #8, #4
   58236:	f023 030f 	bic.w	r3, r3, #15
   5823a:	431d      	orrs	r5, r3
   5823c:	e7f0      	b.n	58220 <put_fat+0xba>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   5823e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   58240:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   58244:	f7ff fe5b 	bl	57efe <move_window>
			if (res != FR_OK) break;
   58248:	2800      	cmp	r0, #0
   5824a:	d1ee      	bne.n	5822a <put_fat+0xc4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
   5824c:	0064      	lsls	r4, r4, #1
   5824e:	f106 033c 	add.w	r3, r6, #60	; 0x3c
   58252:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
   58256:	551d      	strb	r5, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
   58258:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
   5825a:	f3c5 2507 	ubfx	r5, r5, #8, #8
	*ptr++ = (BYTE)val;
   5825e:	7055      	strb	r5, [r2, #1]
			break;
   58260:	e7e0      	b.n	58224 <put_fat+0xbe>

00058262 <fill_last_frag>:
{
   58262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   58264:	4604      	mov	r4, r0
   58266:	460e      	mov	r6, r1
   58268:	4617      	mov	r7, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
   5826a:	69e3      	ldr	r3, [r4, #28]
   5826c:	b90b      	cbnz	r3, 58272 <fill_last_frag+0x10>
	return FR_OK;
   5826e:	4618      	mov	r0, r3
}
   58270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
   58272:	2b01      	cmp	r3, #1
   58274:	eba6 0503 	sub.w	r5, r6, r3
   58278:	bf0c      	ite	eq
   5827a:	463a      	moveq	r2, r7
   5827c:	1caa      	addne	r2, r5, #2
   5827e:	6820      	ldr	r0, [r4, #0]
   58280:	1c69      	adds	r1, r5, #1
   58282:	f7ff ff70 	bl	58166 <put_fat>
		if (res != FR_OK) return res;
   58286:	2800      	cmp	r0, #0
   58288:	d1f2      	bne.n	58270 <fill_last_frag+0xe>
		obj->n_frag--;
   5828a:	69e3      	ldr	r3, [r4, #28]
   5828c:	3b01      	subs	r3, #1
   5828e:	61e3      	str	r3, [r4, #28]
   58290:	e7eb      	b.n	5826a <fill_last_frag+0x8>

00058292 <fill_first_frag>:
{
   58292:	b570      	push	{r4, r5, r6, lr}
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
   58294:	79c3      	ldrb	r3, [r0, #7]
{
   58296:	4604      	mov	r4, r0
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
   58298:	2b03      	cmp	r3, #3
   5829a:	d001      	beq.n	582a0 <fill_first_frag+0xe>
	return FR_OK;
   5829c:	2000      	movs	r0, #0
}
   5829e:	bd70      	pop	{r4, r5, r6, pc}
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
   582a0:	6881      	ldr	r1, [r0, #8]
   582a2:	6983      	ldr	r3, [r0, #24]
   582a4:	18cd      	adds	r5, r1, r3
   582a6:	42a9      	cmp	r1, r5
   582a8:	d102      	bne.n	582b0 <fill_first_frag+0x1e>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
   582aa:	2300      	movs	r3, #0
   582ac:	71e3      	strb	r3, [r4, #7]
   582ae:	e7f5      	b.n	5829c <fill_first_frag+0xa>
			res = put_fat(obj->fs, cl, cl + 1);
   582b0:	1c4e      	adds	r6, r1, #1
   582b2:	4632      	mov	r2, r6
   582b4:	6820      	ldr	r0, [r4, #0]
   582b6:	f7ff ff56 	bl	58166 <put_fat>
			if (res != FR_OK) return res;
   582ba:	2800      	cmp	r0, #0
   582bc:	d1ef      	bne.n	5829e <fill_first_frag+0xc>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
   582be:	4631      	mov	r1, r6
   582c0:	e7f1      	b.n	582a6 <fill_first_frag+0x14>

000582c2 <remove_chain>:
{
   582c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   582c6:	2901      	cmp	r1, #1
{
   582c8:	4606      	mov	r6, r0
   582ca:	460c      	mov	r4, r1
   582cc:	4617      	mov	r7, r2
	FATFS *fs = obj->fs;
   582ce:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   582d0:	d802      	bhi.n	582d8 <remove_chain+0x16>
   582d2:	2002      	movs	r0, #2
}
   582d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   582d8:	69eb      	ldr	r3, [r5, #28]
   582da:	428b      	cmp	r3, r1
   582dc:	d9f9      	bls.n	582d2 <remove_chain+0x10>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   582de:	b97a      	cbnz	r2, 58300 <remove_chain+0x3e>
{
   582e0:	46a1      	mov	r9, r4
		nxt = get_fat(obj, clst);			/* Get cluster status */
   582e2:	4621      	mov	r1, r4
   582e4:	4630      	mov	r0, r6
   582e6:	f7ff fe60 	bl	57faa <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
   582ea:	46a0      	mov	r8, r4
   582ec:	4604      	mov	r4, r0
   582ee:	b9b0      	cbnz	r0, 5831e <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
   582f0:	782b      	ldrb	r3, [r5, #0]
   582f2:	2b04      	cmp	r3, #4
   582f4:	d102      	bne.n	582fc <remove_chain+0x3a>
		if (pclst == 0) {	/* Has the entire chain been removed? */
   582f6:	2f00      	cmp	r7, #0
   582f8:	d144      	bne.n	58384 <remove_chain+0xc2>
			obj->stat = 0;		/* Change the chain status 'initial' */
   582fa:	71f7      	strb	r7, [r6, #7]
	return FR_OK;
   582fc:	2000      	movs	r0, #0
   582fe:	e7e9      	b.n	582d4 <remove_chain+0x12>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   58300:	782b      	ldrb	r3, [r5, #0]
   58302:	2b04      	cmp	r3, #4
   58304:	d102      	bne.n	5830c <remove_chain+0x4a>
   58306:	79c3      	ldrb	r3, [r0, #7]
   58308:	2b02      	cmp	r3, #2
   5830a:	d0e9      	beq.n	582e0 <remove_chain+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
   5830c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   58310:	4639      	mov	r1, r7
   58312:	4628      	mov	r0, r5
   58314:	f7ff ff27 	bl	58166 <put_fat>
		if (res != FR_OK) return res;
   58318:	2800      	cmp	r0, #0
   5831a:	d0e1      	beq.n	582e0 <remove_chain+0x1e>
   5831c:	e7da      	b.n	582d4 <remove_chain+0x12>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   5831e:	2801      	cmp	r0, #1
   58320:	d0d7      	beq.n	582d2 <remove_chain+0x10>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   58322:	1c42      	adds	r2, r0, #1
   58324:	d101      	bne.n	5832a <remove_chain+0x68>
   58326:	2001      	movs	r0, #1
   58328:	e7d4      	b.n	582d4 <remove_chain+0x12>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   5832a:	782b      	ldrb	r3, [r5, #0]
   5832c:	2b04      	cmp	r3, #4
   5832e:	d110      	bne.n	58352 <remove_chain+0x90>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
   58330:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   58334:	3a02      	subs	r2, #2
   58336:	4293      	cmp	r3, r2
   58338:	d313      	bcc.n	58362 <remove_chain+0xa0>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
   5833a:	f108 0201 	add.w	r2, r8, #1
   5833e:	42a2      	cmp	r2, r4
   58340:	d003      	beq.n	5834a <remove_chain+0x88>
			if (fs->fs_type == FS_EXFAT) {
   58342:	782b      	ldrb	r3, [r5, #0]
   58344:	2b04      	cmp	r3, #4
   58346:	d013      	beq.n	58370 <remove_chain+0xae>
{
   58348:	46a1      	mov	r9, r4
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
   5834a:	69eb      	ldr	r3, [r5, #28]
   5834c:	42a3      	cmp	r3, r4
   5834e:	d8c8      	bhi.n	582e2 <remove_chain+0x20>
   58350:	e7ce      	b.n	582f0 <remove_chain+0x2e>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
   58352:	2200      	movs	r2, #0
   58354:	4641      	mov	r1, r8
   58356:	4628      	mov	r0, r5
   58358:	f7ff ff05 	bl	58166 <put_fat>
			if (res != FR_OK) return res;
   5835c:	2800      	cmp	r0, #0
   5835e:	d0e7      	beq.n	58330 <remove_chain+0x6e>
   58360:	e7b8      	b.n	582d4 <remove_chain+0x12>
			fs->free_clst++;
   58362:	3301      	adds	r3, #1
   58364:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
   58366:	792b      	ldrb	r3, [r5, #4]
   58368:	f043 0301 	orr.w	r3, r3, #1
   5836c:	712b      	strb	r3, [r5, #4]
   5836e:	e7e4      	b.n	5833a <remove_chain+0x78>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
   58370:	2300      	movs	r3, #0
   58372:	4649      	mov	r1, r9
   58374:	4628      	mov	r0, r5
   58376:	eba2 0209 	sub.w	r2, r2, r9
   5837a:	f7ff fdd9 	bl	57f30 <change_bitmap>
				if (res != FR_OK) return res;
   5837e:	2800      	cmp	r0, #0
   58380:	d0e2      	beq.n	58348 <remove_chain+0x86>
   58382:	e7a7      	b.n	582d4 <remove_chain+0x12>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
   58384:	79f3      	ldrb	r3, [r6, #7]
   58386:	b98b      	cbnz	r3, 583ac <remove_chain+0xea>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
   58388:	68b4      	ldr	r4, [r6, #8]
				while (clst != pclst) {
   5838a:	42bc      	cmp	r4, r7
   5838c:	d102      	bne.n	58394 <remove_chain+0xd2>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
   5838e:	2302      	movs	r3, #2
   58390:	71f3      	strb	r3, [r6, #7]
   58392:	e7b3      	b.n	582fc <remove_chain+0x3a>
					nxt = get_fat(obj, clst);
   58394:	4621      	mov	r1, r4
   58396:	4630      	mov	r0, r6
   58398:	f7ff fe07 	bl	57faa <get_fat>
					if (nxt < 2) return FR_INT_ERR;
   5839c:	2801      	cmp	r0, #1
   5839e:	d998      	bls.n	582d2 <remove_chain+0x10>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
   583a0:	1c43      	adds	r3, r0, #1
   583a2:	d0c0      	beq.n	58326 <remove_chain+0x64>
					if (nxt != clst + 1) break;	/* Not contiguous? */
   583a4:	3401      	adds	r4, #1
   583a6:	4284      	cmp	r4, r0
   583a8:	d0ef      	beq.n	5838a <remove_chain+0xc8>
   583aa:	e7a7      	b.n	582fc <remove_chain+0x3a>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
   583ac:	2b03      	cmp	r3, #3
   583ae:	d1a5      	bne.n	582fc <remove_chain+0x3a>
   583b0:	68b3      	ldr	r3, [r6, #8]
   583b2:	42bb      	cmp	r3, r7
   583b4:	d8a2      	bhi.n	582fc <remove_chain+0x3a>
   583b6:	69b2      	ldr	r2, [r6, #24]
   583b8:	4413      	add	r3, r2
   583ba:	42bb      	cmp	r3, r7
   583bc:	d2e7      	bcs.n	5838e <remove_chain+0xcc>
   583be:	e79d      	b.n	582fc <remove_chain+0x3a>

000583c0 <dir_clear>:
{
   583c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   583c2:	4605      	mov	r5, r0
   583c4:	460e      	mov	r6, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   583c6:	f7ff fc5a 	bl	57c7e <sync_window>
   583ca:	4604      	mov	r4, r0
   583cc:	b9f8      	cbnz	r0, 5840e <dir_clear+0x4e>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   583ce:	4631      	mov	r1, r6
   583d0:	4628      	mov	r0, r5
   583d2:	f7ff fbf4 	bl	57bbe <clst2sect>
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
   583d6:	f105 073c 	add.w	r7, r5, #60	; 0x3c
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   583da:	4606      	mov	r6, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
   583dc:	63a8      	str	r0, [r5, #56]	; 0x38
__ssp_bos_icheck3(memset, void *, int)
   583de:	f44f 7200 	mov.w	r2, #512	; 0x200
   583e2:	4621      	mov	r1, r4
   583e4:	4638      	mov	r0, r7
   583e6:	f002 fdb7 	bl	5af58 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   583ea:	896b      	ldrh	r3, [r5, #10]
   583ec:	429c      	cmp	r4, r3
   583ee:	d304      	bcc.n	583fa <dir_clear+0x3a>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
   583f0:	8968      	ldrh	r0, [r5, #10]
   583f2:	1b00      	subs	r0, r0, r4
   583f4:	bf18      	it	ne
   583f6:	2001      	movne	r0, #1
}
   583f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   583fa:	2301      	movs	r3, #1
   583fc:	4639      	mov	r1, r7
   583fe:	7868      	ldrb	r0, [r5, #1]
   58400:	1932      	adds	r2, r6, r4
   58402:	f7f6 fea9 	bl	4f158 <disk_write>
   58406:	2800      	cmp	r0, #0
   58408:	d1f2      	bne.n	583f0 <dir_clear+0x30>
   5840a:	3401      	adds	r4, #1
   5840c:	e7ed      	b.n	583ea <dir_clear+0x2a>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   5840e:	2001      	movs	r0, #1
   58410:	e7f2      	b.n	583f8 <dir_clear+0x38>

00058412 <sync_fs>:
{
   58412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   58414:	4604      	mov	r4, r0
	res = sync_window(fs);
   58416:	f7ff fc32 	bl	57c7e <sync_window>
   5841a:	4605      	mov	r5, r0
	if (res == FR_OK) {
   5841c:	2800      	cmp	r0, #0
   5841e:	d142      	bne.n	584a6 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
   58420:	7823      	ldrb	r3, [r4, #0]
   58422:	2b03      	cmp	r3, #3
   58424:	d137      	bne.n	58496 <sync_fs+0x84>
   58426:	7927      	ldrb	r7, [r4, #4]
   58428:	2f01      	cmp	r7, #1
   5842a:	d134      	bne.n	58496 <sync_fs+0x84>
			memset(fs->win, 0, sizeof fs->win);
   5842c:	f104 063c 	add.w	r6, r4, #60	; 0x3c
   58430:	4601      	mov	r1, r0
   58432:	f44f 7200 	mov.w	r2, #512	; 0x200
   58436:	4630      	mov	r0, r6
   58438:	f002 fd8e 	bl	5af58 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
   5843c:	2355      	movs	r3, #85	; 0x55
   5843e:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
	*ptr++ = (BYTE)val;
   58442:	23aa      	movs	r3, #170	; 0xaa
   58444:	f884 323b 	strb.w	r3, [r4, #571]	; 0x23b
	*ptr++ = (BYTE)val; val >>= 8;
   58448:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
   5844a:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
   5844c:	2172      	movs	r1, #114	; 0x72
   5844e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
   58452:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	*ptr++ = (BYTE)val; val >>= 8;
   58456:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val;
   58458:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
   5845c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	*ptr++ = (BYTE)val;
   58460:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val; val >>= 8;
   58464:	f884 1220 	strb.w	r1, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
   58468:	f884 1221 	strb.w	r1, [r4, #545]	; 0x221
	*ptr++ = (BYTE)val; val >>= 8;
   5846c:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
   58470:	69a1      	ldr	r1, [r4, #24]
   58472:	f504 7009 	add.w	r0, r4, #548	; 0x224
   58476:	f7ff fb8b 	bl	57b90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
   5847a:	6961      	ldr	r1, [r4, #20]
   5847c:	f504 700a 	add.w	r0, r4, #552	; 0x228
   58480:	f7ff fb86 	bl	57b90 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
   58484:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
   58486:	463b      	mov	r3, r7
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
   58488:	3201      	adds	r2, #1
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
   5848a:	4631      	mov	r1, r6
   5848c:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
   5848e:	63a2      	str	r2, [r4, #56]	; 0x38
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
   58490:	f7f6 fe62 	bl	4f158 <disk_write>
			fs->fsi_flag = 0;
   58494:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
   58496:	2200      	movs	r2, #0
   58498:	7860      	ldrb	r0, [r4, #1]
   5849a:	4611      	mov	r1, r2
   5849c:	f7f6 fe68 	bl	4f170 <disk_ioctl>
   584a0:	3800      	subs	r0, #0
   584a2:	bf18      	it	ne
   584a4:	2001      	movne	r0, #1
}
   584a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000584a8 <create_chain>:
{
   584a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   584ac:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
   584ae:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
   584b0:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
   584b2:	2900      	cmp	r1, #0
   584b4:	d139      	bne.n	5852a <create_chain+0x82>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   584b6:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   584ba:	2e00      	cmp	r6, #0
   584bc:	d04a      	beq.n	58554 <create_chain+0xac>
   584be:	69ea      	ldr	r2, [r5, #28]
   584c0:	42b2      	cmp	r2, r6
   584c2:	d947      	bls.n	58554 <create_chain+0xac>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   584c4:	b91b      	cbnz	r3, 584ce <create_chain+0x26>
   584c6:	2400      	movs	r4, #0
}
   584c8:	4620      	mov	r0, r4
   584ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   584ce:	782b      	ldrb	r3, [r5, #0]
   584d0:	2b04      	cmp	r3, #4
   584d2:	d145      	bne.n	58560 <create_chain+0xb8>
	if (clst >= fs->n_fatent - 2) clst = 0;
   584d4:	69eb      	ldr	r3, [r5, #28]
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
   584d6:	1eb4      	subs	r4, r6, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
   584d8:	3b02      	subs	r3, #2
   584da:	429c      	cmp	r4, r3
   584dc:	bf28      	it	cs
   584de:	2400      	movcs	r4, #0
	scl = val = clst; ctr = 0;
   584e0:	46a1      	mov	r9, r4
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
   584e2:	f04f 0a01 	mov.w	sl, #1
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
   584e6:	6b69      	ldr	r1, [r5, #52]	; 0x34
   584e8:	4628      	mov	r0, r5
   584ea:	eb01 3119 	add.w	r1, r1, r9, lsr #12
   584ee:	f7ff fd06 	bl	57efe <move_window>
   584f2:	2800      	cmp	r0, #0
   584f4:	d17f      	bne.n	585f6 <create_chain+0x14e>
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   584f6:	69ea      	ldr	r2, [r5, #28]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
   584f8:	f009 0307 	and.w	r3, r9, #7
   584fc:	fa0a f303 	lsl.w	r3, sl, r3
   58500:	f3c9 01c8 	ubfx	r1, r9, #3, #9
   58504:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   58506:	f1a2 0c02 	sub.w	ip, r2, #2
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   5850a:	186a      	adds	r2, r5, r1
   5850c:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   58510:	f109 0201 	add.w	r2, r9, #1
   58514:	4562      	cmp	r2, ip
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   58516:	ea00 0003 	and.w	r0, r0, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   5851a:	d33a      	bcc.n	58592 <create_chain+0xea>
				if (bv == 0) {	/* Is it a free cluster? */
   5851c:	2800      	cmp	r0, #0
   5851e:	d039      	beq.n	58594 <create_chain+0xec>
				if (val == clst) return 0;	/* All cluster scanned? */
   58520:	2c00      	cmp	r4, #0
   58522:	d039      	beq.n	58598 <create_chain+0xf0>
   58524:	2200      	movs	r2, #0
	scl = val = clst; ctr = 0;
   58526:	4691      	mov	r9, r2
   58528:	e7dd      	b.n	584e6 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
   5852a:	f7ff fd3e 	bl	57faa <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
   5852e:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
   58530:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
   58532:	d801      	bhi.n	58538 <create_chain+0x90>
   58534:	2401      	movs	r4, #1
   58536:	e7c7      	b.n	584c8 <create_chain+0x20>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
   58538:	1c42      	adds	r2, r0, #1
   5853a:	f000 80b1 	beq.w	586a0 <create_chain+0x1f8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   5853e:	69eb      	ldr	r3, [r5, #28]
   58540:	4283      	cmp	r3, r0
   58542:	d8c1      	bhi.n	584c8 <create_chain+0x20>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   58544:	69aa      	ldr	r2, [r5, #24]
   58546:	2a00      	cmp	r2, #0
   58548:	d0bd      	beq.n	584c6 <create_chain+0x1e>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   5854a:	782a      	ldrb	r2, [r5, #0]
   5854c:	2a04      	cmp	r2, #4
   5854e:	d179      	bne.n	58644 <create_chain+0x19c>
		scl = clst;							/* Cluster to start to find */
   58550:	4646      	mov	r6, r8
   58552:	e7bf      	b.n	584d4 <create_chain+0x2c>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   58554:	2b00      	cmp	r3, #0
   58556:	d0b6      	beq.n	584c6 <create_chain+0x1e>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   58558:	782b      	ldrb	r3, [r5, #0]
   5855a:	2b04      	cmp	r3, #4
   5855c:	d016      	beq.n	5858c <create_chain+0xe4>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   5855e:	2601      	movs	r6, #1
		scl = clst;							/* Cluster to start to find */
   58560:	4634      	mov	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   58562:	69eb      	ldr	r3, [r5, #28]
				ncl++;							/* Next cluster */
   58564:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   58566:	42a3      	cmp	r3, r4
   58568:	d802      	bhi.n	58570 <create_chain+0xc8>
					if (ncl > scl) return 0;	/* No free cluster found? */
   5856a:	2e01      	cmp	r6, #1
   5856c:	d0ab      	beq.n	584c6 <create_chain+0x1e>
					ncl = 2;
   5856e:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
   58570:	4621      	mov	r1, r4
   58572:	4638      	mov	r0, r7
   58574:	f7ff fd19 	bl	57faa <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
   58578:	2800      	cmp	r0, #0
   5857a:	d07d      	beq.n	58678 <create_chain+0x1d0>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   5857c:	2801      	cmp	r0, #1
   5857e:	d0d9      	beq.n	58534 <create_chain+0x8c>
   58580:	3001      	adds	r0, #1
   58582:	f000 808d 	beq.w	586a0 <create_chain+0x1f8>
				if (ncl == scl) return 0;		/* No free cluster found? */
   58586:	42b4      	cmp	r4, r6
   58588:	d1eb      	bne.n	58562 <create_chain+0xba>
   5858a:	e79c      	b.n	584c6 <create_chain+0x1e>
	if (clst >= fs->n_fatent - 2) clst = 0;
   5858c:	2400      	movs	r4, #0
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   5858e:	2601      	movs	r6, #1
   58590:	e7a6      	b.n	584e0 <create_chain+0x38>
				if (bv == 0) {	/* Is it a free cluster? */
   58592:	bb18      	cbnz	r0, 585dc <create_chain+0x134>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
   58594:	f109 0402 	add.w	r4, r9, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
   58598:	1e63      	subs	r3, r4, #1
   5859a:	3303      	adds	r3, #3
   5859c:	d894      	bhi.n	584c8 <create_chain+0x20>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
   5859e:	2301      	movs	r3, #1
   585a0:	4621      	mov	r1, r4
   585a2:	461a      	mov	r2, r3
   585a4:	4628      	mov	r0, r5
   585a6:	f7ff fcc3 	bl	57f30 <change_bitmap>
		if (res == FR_INT_ERR) return 1;
   585aa:	2802      	cmp	r0, #2
   585ac:	d0c2      	beq.n	58534 <create_chain+0x8c>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
   585ae:	2801      	cmp	r0, #1
   585b0:	d076      	beq.n	586a0 <create_chain+0x1f8>
		if (clst == 0) {							/* Is it a new chain? */
   585b2:	f1b8 0f00 	cmp.w	r8, #0
   585b6:	d123      	bne.n	58600 <create_chain+0x158>
			obj->stat = 2;							/* Set status 'contiguous' */
   585b8:	2302      	movs	r3, #2
   585ba:	71fb      	strb	r3, [r7, #7]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   585bc:	2800      	cmp	r0, #0
   585be:	d1b9      	bne.n	58534 <create_chain+0x8c>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
   585c0:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
   585c4:	3a02      	subs	r2, #2
   585c6:	4293      	cmp	r3, r2
   585c8:	bf9c      	itt	ls
   585ca:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
   585ce:	61ab      	strls	r3, [r5, #24]
		fs->fsi_flag |= 1;
   585d0:	792b      	ldrb	r3, [r5, #4]
		fs->last_clst = ncl;
   585d2:	616c      	str	r4, [r5, #20]
		fs->fsi_flag |= 1;
   585d4:	f043 0301 	orr.w	r3, r3, #1
   585d8:	712b      	strb	r3, [r5, #4]
   585da:	e775      	b.n	584c8 <create_chain+0x20>
				if (val == clst) return 0;	/* All cluster scanned? */
   585dc:	42a2      	cmp	r2, r4
   585de:	d00d      	beq.n	585fc <create_chain+0x154>
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   585e0:	005b      	lsls	r3, r3, #1
			} while (bm != 0);
   585e2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   585e6:	d104      	bne.n	585f2 <create_chain+0x14a>
		} while (++i < SS(fs));
   585e8:	3101      	adds	r1, #1
   585ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   585ee:	d09a      	beq.n	58526 <create_chain+0x7e>
			bm = 1;
   585f0:	2301      	movs	r3, #1
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   585f2:	4691      	mov	r9, r2
   585f4:	e789      	b.n	5850a <create_chain+0x62>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
   585f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   585fa:	e7cd      	b.n	58598 <create_chain+0xf0>
				if (val == clst) return 0;	/* All cluster scanned? */
   585fc:	2400      	movs	r4, #0
   585fe:	e7cb      	b.n	58598 <create_chain+0xf0>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
   58600:	79fb      	ldrb	r3, [r7, #7]
   58602:	2b02      	cmp	r3, #2
   58604:	d107      	bne.n	58616 <create_chain+0x16e>
   58606:	1c73      	adds	r3, r6, #1
   58608:	42a3      	cmp	r3, r4
   5860a:	d0d7      	beq.n	585bc <create_chain+0x114>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
   5860c:	68bb      	ldr	r3, [r7, #8]
   5860e:	1af3      	subs	r3, r6, r3
   58610:	61bb      	str	r3, [r7, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
   58612:	2303      	movs	r3, #3
   58614:	71fb      	strb	r3, [r7, #7]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
   58616:	f108 0201 	add.w	r2, r8, #1
   5861a:	42a2      	cmp	r2, r4
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
   5861c:	69fb      	ldr	r3, [r7, #28]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
   5861e:	d00b      	beq.n	58638 <create_chain+0x190>
				if (obj->n_frag == 0) obj->n_frag = 1;
   58620:	b90b      	cbnz	r3, 58626 <create_chain+0x17e>
   58622:	2301      	movs	r3, #1
   58624:	61fb      	str	r3, [r7, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
   58626:	4622      	mov	r2, r4
   58628:	4641      	mov	r1, r8
   5862a:	4638      	mov	r0, r7
   5862c:	f7ff fe19 	bl	58262 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
   58630:	bb98      	cbnz	r0, 5869a <create_chain+0x1f2>
   58632:	2301      	movs	r3, #1
   58634:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   58636:	e7c3      	b.n	585c0 <create_chain+0x118>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
   58638:	b113      	cbz	r3, 58640 <create_chain+0x198>
   5863a:	3301      	adds	r3, #1
   5863c:	61fb      	str	r3, [r7, #28]
   5863e:	e7bd      	b.n	585bc <create_chain+0x114>
   58640:	2302      	movs	r3, #2
   58642:	e7fb      	b.n	5863c <create_chain+0x194>
			ncl = scl + 1;						/* Test if next cluster is free */
   58644:	f108 0401 	add.w	r4, r8, #1
			if (ncl >= fs->n_fatent) ncl = 2;
   58648:	42a3      	cmp	r3, r4
   5864a:	bf98      	it	ls
   5864c:	2402      	movls	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
   5864e:	4638      	mov	r0, r7
   58650:	4621      	mov	r1, r4
   58652:	f7ff fcaa 	bl	57faa <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   58656:	2801      	cmp	r0, #1
   58658:	f43f af6c 	beq.w	58534 <create_chain+0x8c>
   5865c:	1c43      	adds	r3, r0, #1
   5865e:	d01f      	beq.n	586a0 <create_chain+0x1f8>
			if (cs != 0) {						/* Not free? */
   58660:	b138      	cbz	r0, 58672 <create_chain+0x1ca>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
   58662:	696e      	ldr	r6, [r5, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
   58664:	2e01      	cmp	r6, #1
   58666:	d905      	bls.n	58674 <create_chain+0x1cc>
   58668:	69eb      	ldr	r3, [r5, #28]
		scl = clst;							/* Cluster to start to find */
   5866a:	429e      	cmp	r6, r3
   5866c:	bf28      	it	cs
   5866e:	4646      	movcs	r6, r8
   58670:	e776      	b.n	58560 <create_chain+0xb8>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
   58672:	b90c      	cbnz	r4, 58678 <create_chain+0x1d0>
		scl = clst;							/* Cluster to start to find */
   58674:	4646      	mov	r6, r8
   58676:	e773      	b.n	58560 <create_chain+0xb8>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
   58678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   5867c:	4621      	mov	r1, r4
   5867e:	4628      	mov	r0, r5
   58680:	f7ff fd71 	bl	58166 <put_fat>
		if (res == FR_OK && clst != 0) {
   58684:	b948      	cbnz	r0, 5869a <create_chain+0x1f2>
   58686:	f1b8 0f00 	cmp.w	r8, #0
   5868a:	d099      	beq.n	585c0 <create_chain+0x118>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
   5868c:	4622      	mov	r2, r4
   5868e:	4641      	mov	r1, r8
   58690:	4628      	mov	r0, r5
   58692:	f7ff fd68 	bl	58166 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   58696:	2800      	cmp	r0, #0
   58698:	d092      	beq.n	585c0 <create_chain+0x118>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
   5869a:	2801      	cmp	r0, #1
   5869c:	f47f af4a 	bne.w	58534 <create_chain+0x8c>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
   586a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   586a4:	e710      	b.n	584c8 <create_chain+0x20>

000586a6 <dir_next>:
{
   586a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
   586aa:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
   586ac:	6b07      	ldr	r7, [r0, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   586ae:	7833      	ldrb	r3, [r6, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
   586b0:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   586b2:	2b04      	cmp	r3, #4
   586b4:	bf14      	ite	ne
   586b6:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
   586ba:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
   586be:	42bb      	cmp	r3, r7
   586c0:	bf9c      	itt	ls
   586c2:	2300      	movls	r3, #0
   586c4:	6383      	strls	r3, [r0, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   586c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   586c8:	4604      	mov	r4, r0
   586ca:	4689      	mov	r9, r1
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   586cc:	b173      	cbz	r3, 586ec <dir_next+0x46>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
   586ce:	f3c7 0808 	ubfx	r8, r7, #0, #9
   586d2:	f1b8 0f00 	cmp.w	r8, #0
   586d6:	d13c      	bne.n	58752 <dir_next+0xac>
		if (dp->clust == 0) {	/* Static table */
   586d8:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
   586da:	3301      	adds	r3, #1
   586dc:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
   586de:	b941      	cbnz	r1, 586f2 <dir_next+0x4c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
   586e0:	8933      	ldrh	r3, [r6, #8]
   586e2:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
   586e6:	d834      	bhi.n	58752 <dir_next+0xac>
				dp->sect = 0; return FR_NO_FILE;
   586e8:	2300      	movs	r3, #0
   586ea:	63a3      	str	r3, [r4, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   586ec:	2004      	movs	r0, #4
}
   586ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
   586f2:	8973      	ldrh	r3, [r6, #10]
   586f4:	3b01      	subs	r3, #1
   586f6:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
   586fa:	d12a      	bne.n	58752 <dir_next+0xac>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   586fc:	f7ff fc55 	bl	57faa <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   58700:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   58702:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   58704:	d801      	bhi.n	5870a <dir_next+0x64>
   58706:	2002      	movs	r0, #2
   58708:	e7f1      	b.n	586ee <dir_next+0x48>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   5870a:	1c42      	adds	r2, r0, #1
   5870c:	d101      	bne.n	58712 <dir_next+0x6c>
   5870e:	2001      	movs	r0, #1
   58710:	e7ed      	b.n	586ee <dir_next+0x48>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
   58712:	69f3      	ldr	r3, [r6, #28]
   58714:	4283      	cmp	r3, r0
   58716:	d816      	bhi.n	58746 <dir_next+0xa0>
					if (!stretch) {								/* If no stretch, report EOT */
   58718:	f1b9 0f00 	cmp.w	r9, #0
   5871c:	d0e4      	beq.n	586e8 <dir_next+0x42>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
   5871e:	4620      	mov	r0, r4
   58720:	6b61      	ldr	r1, [r4, #52]	; 0x34
   58722:	f7ff fec1 	bl	584a8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   58726:	4605      	mov	r5, r0
   58728:	b1c8      	cbz	r0, 5875e <dir_next+0xb8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   5872a:	2801      	cmp	r0, #1
   5872c:	d0eb      	beq.n	58706 <dir_next+0x60>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   5872e:	1c43      	adds	r3, r0, #1
   58730:	d0ed      	beq.n	5870e <dir_next+0x68>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
   58732:	4601      	mov	r1, r0
   58734:	4630      	mov	r0, r6
   58736:	f7ff fe43 	bl	583c0 <dir_clear>
   5873a:	2800      	cmp	r0, #0
   5873c:	d1e7      	bne.n	5870e <dir_next+0x68>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
   5873e:	79e3      	ldrb	r3, [r4, #7]
   58740:	f043 0304 	orr.w	r3, r3, #4
   58744:	71e3      	strb	r3, [r4, #7]
				dp->sect = clst2sect(fs, clst);
   58746:	4629      	mov	r1, r5
   58748:	4630      	mov	r0, r6
				dp->clust = clst;		/* Initialize data for new cluster */
   5874a:	6365      	str	r5, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
   5874c:	f7ff fa37 	bl	57bbe <clst2sect>
   58750:	63a0      	str	r0, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   58752:	363c      	adds	r6, #60	; 0x3c
   58754:	4446      	add	r6, r8
	return FR_OK;
   58756:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
   58758:	6327      	str	r7, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   5875a:	63e6      	str	r6, [r4, #60]	; 0x3c
	return FR_OK;
   5875c:	e7c7      	b.n	586ee <dir_next+0x48>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   5875e:	2007      	movs	r0, #7
   58760:	e7c5      	b.n	586ee <dir_next+0x48>

00058762 <dir_alloc>:
{
   58762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   58764:	460e      	mov	r6, r1
	res = dir_sdi(dp, 0);
   58766:	2100      	movs	r1, #0
{
   58768:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   5876a:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
   5876c:	f7ff fcb2 	bl	580d4 <dir_sdi>
	if (res == FR_OK) {
   58770:	b998      	cbnz	r0, 5879a <dir_alloc+0x38>
		n = 0;
   58772:	4605      	mov	r5, r0
			res = move_window(fs, dp->sect);
   58774:	4638      	mov	r0, r7
   58776:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   58778:	f7ff fbc1 	bl	57efe <move_window>
			if (res != FR_OK) break;
   5877c:	b968      	cbnz	r0, 5879a <dir_alloc+0x38>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
   5877e:	783a      	ldrb	r2, [r7, #0]
   58780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   58782:	2a04      	cmp	r2, #4
   58784:	781b      	ldrb	r3, [r3, #0]
   58786:	d10c      	bne.n	587a2 <dir_alloc+0x40>
   58788:	061b      	lsls	r3, r3, #24
   5878a:	d50e      	bpl.n	587aa <dir_alloc+0x48>
				n = 0;				/* Not a free entry, restart to search */
   5878c:	4605      	mov	r5, r0
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
   5878e:	2101      	movs	r1, #1
   58790:	4620      	mov	r0, r4
   58792:	f7ff ff88 	bl	586a6 <dir_next>
		} while (res == FR_OK);
   58796:	2800      	cmp	r0, #0
   58798:	d0ec      	beq.n	58774 <dir_alloc+0x12>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   5879a:	2804      	cmp	r0, #4
   5879c:	bf08      	it	eq
   5879e:	2007      	moveq	r0, #7
   587a0:	e006      	b.n	587b0 <dir_alloc+0x4e>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
   587a2:	2be5      	cmp	r3, #229	; 0xe5
   587a4:	d001      	beq.n	587aa <dir_alloc+0x48>
   587a6:	2b00      	cmp	r3, #0
   587a8:	d1f0      	bne.n	5878c <dir_alloc+0x2a>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
   587aa:	3501      	adds	r5, #1
   587ac:	42b5      	cmp	r5, r6
   587ae:	d1ee      	bne.n	5878e <dir_alloc+0x2c>
}
   587b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000587b2 <dir_remove>:
{
   587b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   587b4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
{
   587b6:	4604      	mov	r4, r0
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   587b8:	1c4b      	adds	r3, r1, #1
	FATFS *fs = dp->obj.fs;
   587ba:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
   587bc:	6b06      	ldr	r6, [r0, #48]	; 0x30
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   587be:	d11c      	bne.n	587fa <dir_remove+0x48>
			fs->wflag = 1;
   587c0:	2701      	movs	r7, #1
			res = move_window(fs, dp->sect);
   587c2:	4628      	mov	r0, r5
   587c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   587c6:	f7ff fb9a 	bl	57efe <move_window>
			if (res != FR_OK) break;
   587ca:	b990      	cbnz	r0, 587f2 <dir_remove+0x40>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   587cc:	782b      	ldrb	r3, [r5, #0]
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
   587ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   587d0:	2b04      	cmp	r3, #4
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
   587d2:	bf12      	itee	ne
   587d4:	23e5      	movne	r3, #229	; 0xe5
   587d6:	7813      	ldrbeq	r3, [r2, #0]
   587d8:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
   587dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
   587de:	70ef      	strb	r7, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
   587e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   587e2:	42b3      	cmp	r3, r6
   587e4:	d20d      	bcs.n	58802 <dir_remove+0x50>
			res = dir_next(dp, 0);	/* Next entry */
   587e6:	2100      	movs	r1, #0
   587e8:	4620      	mov	r0, r4
   587ea:	f7ff ff5c 	bl	586a6 <dir_next>
		} while (res == FR_OK);
   587ee:	2800      	cmp	r0, #0
   587f0:	d0e7      	beq.n	587c2 <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
   587f2:	2804      	cmp	r0, #4
   587f4:	bf08      	it	eq
   587f6:	2002      	moveq	r0, #2
   587f8:	e003      	b.n	58802 <dir_remove+0x50>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
   587fa:	f7ff fc6b 	bl	580d4 <dir_sdi>
	if (res == FR_OK) {
   587fe:	2800      	cmp	r0, #0
   58800:	d0de      	beq.n	587c0 <dir_remove+0xe>
}
   58802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00058804 <load_xdir>:
{
   58804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   58806:	4604      	mov	r4, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
   58808:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
   5880a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
   5880c:	6905      	ldr	r5, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
   5880e:	f7ff fb76 	bl	57efe <move_window>
	if (res != FR_OK) return res;
   58812:	b920      	cbnz	r0, 5881e <load_xdir+0x1a>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
   58814:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   58816:	781a      	ldrb	r2, [r3, #0]
   58818:	2a85      	cmp	r2, #133	; 0x85
   5881a:	d001      	beq.n	58820 <load_xdir+0x1c>
   5881c:	2002      	movs	r0, #2
}
   5881e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   58820:	462a      	mov	r2, r5
   58822:	f103 0120 	add.w	r1, r3, #32
   58826:	f853 0b04 	ldr.w	r0, [r3], #4
   5882a:	428b      	cmp	r3, r1
   5882c:	f842 0b04 	str.w	r0, [r2], #4
   58830:	d1f9      	bne.n	58826 <load_xdir+0x22>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
   58832:	786e      	ldrb	r6, [r5, #1]
   58834:	3601      	adds	r6, #1
   58836:	0176      	lsls	r6, r6, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
   58838:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
   5883c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   58840:	d8ec      	bhi.n	5881c <load_xdir+0x18>
	res = dir_next(dp, 0);
   58842:	2100      	movs	r1, #0
   58844:	4620      	mov	r0, r4
   58846:	f7ff ff2e 	bl	586a6 <dir_next>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
   5884a:	2804      	cmp	r0, #4
   5884c:	d0e6      	beq.n	5881c <load_xdir+0x18>
	if (res != FR_OK) return res;
   5884e:	2800      	cmp	r0, #0
   58850:	d1e5      	bne.n	5881e <load_xdir+0x1a>
	res = move_window(dp->obj.fs, dp->sect);
   58852:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   58854:	6820      	ldr	r0, [r4, #0]
   58856:	f7ff fb52 	bl	57efe <move_window>
	if (res != FR_OK) return res;
   5885a:	2800      	cmp	r0, #0
   5885c:	d1df      	bne.n	5881e <load_xdir+0x1a>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
   5885e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   58860:	781a      	ldrb	r2, [r3, #0]
   58862:	2ac0      	cmp	r2, #192	; 0xc0
   58864:	d1da      	bne.n	5881c <load_xdir+0x18>
   58866:	f105 0220 	add.w	r2, r5, #32
   5886a:	f103 0120 	add.w	r1, r3, #32
   5886e:	f853 0b04 	ldr.w	r0, [r3], #4
   58872:	428b      	cmp	r3, r1
   58874:	f842 0b04 	str.w	r0, [r2], #4
   58878:	d1f9      	bne.n	5886e <load_xdir+0x6a>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
   5887a:	220f      	movs	r2, #15
   5887c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   58880:	332c      	adds	r3, #44	; 0x2c
   58882:	fbb3 f3f2 	udiv	r3, r3, r2
   58886:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   5888a:	d3c7      	bcc.n	5881c <load_xdir+0x18>
	i = 2 * SZDIRE;	/* Name offset to load */
   5888c:	2740      	movs	r7, #64	; 0x40
		res = dir_next(dp, 0);
   5888e:	2100      	movs	r1, #0
   58890:	4620      	mov	r0, r4
   58892:	f7ff ff08 	bl	586a6 <dir_next>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
   58896:	2804      	cmp	r0, #4
   58898:	d0c0      	beq.n	5881c <load_xdir+0x18>
		if (res != FR_OK) return res;
   5889a:	2800      	cmp	r0, #0
   5889c:	d1bf      	bne.n	5881e <load_xdir+0x1a>
		res = move_window(dp->obj.fs, dp->sect);
   5889e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   588a0:	6820      	ldr	r0, [r4, #0]
   588a2:	f7ff fb2c 	bl	57efe <move_window>
		if (res != FR_OK) return res;
   588a6:	2800      	cmp	r0, #0
   588a8:	d1b9      	bne.n	5881e <load_xdir+0x1a>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
   588aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   588ac:	781a      	ldrb	r2, [r3, #0]
   588ae:	2ac1      	cmp	r2, #193	; 0xc1
   588b0:	d1b4      	bne.n	5881c <load_xdir+0x18>
   588b2:	19ea      	adds	r2, r5, r7
   588b4:	f103 0120 	add.w	r1, r3, #32
   588b8:	f853 0b04 	ldr.w	r0, [r3], #4
   588bc:	428b      	cmp	r3, r1
   588be:	f842 0b04 	str.w	r0, [r2], #4
   588c2:	d1f9      	bne.n	588b8 <load_xdir+0xb4>
	} while ((i += SZDIRE) < sz_ent);
   588c4:	3720      	adds	r7, #32
   588c6:	42be      	cmp	r6, r7
   588c8:	d8e1      	bhi.n	5888e <load_xdir+0x8a>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
   588ca:	4628      	mov	r0, r5
   588cc:	f7ff f991 	bl	57bf2 <xdir_sum>
   588d0:	886b      	ldrh	r3, [r5, #2]
   588d2:	1a18      	subs	r0, r3, r0
   588d4:	bf18      	it	ne
   588d6:	2001      	movne	r0, #1
   588d8:	0040      	lsls	r0, r0, #1
   588da:	e7a0      	b.n	5881e <load_xdir+0x1a>

000588dc <store_xdir>:
{
   588dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
   588de:	6803      	ldr	r3, [r0, #0]
{
   588e0:	4605      	mov	r5, r0
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
   588e2:	691c      	ldr	r4, [r3, #16]
		dp->obj.fs->wflag = 1;
   588e4:	2701      	movs	r7, #1
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
   588e6:	4620      	mov	r0, r4
   588e8:	f7ff f983 	bl	57bf2 <xdir_sum>
	*ptr++ = (BYTE)val; val >>= 8;
   588ec:	70a0      	strb	r0, [r4, #2]
   588ee:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
   588f0:	70e0      	strb	r0, [r4, #3]
	res = dir_sdi(dp, dp->blk_ofs);
   588f2:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   588f4:	4628      	mov	r0, r5
	nent = dirb[XDIR_NumSec] + 1;
   588f6:	7866      	ldrb	r6, [r4, #1]
	res = dir_sdi(dp, dp->blk_ofs);
   588f8:	f7ff fbec 	bl	580d4 <dir_sdi>
	while (res == FR_OK) {
   588fc:	b120      	cbz	r0, 58908 <store_xdir+0x2c>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
   588fe:	2802      	cmp	r0, #2
   58900:	bf28      	it	cs
   58902:	2002      	movcs	r0, #2
}
   58904:	b2c0      	uxtb	r0, r0
   58906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = move_window(dp->obj.fs, dp->sect);
   58908:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   5890a:	6828      	ldr	r0, [r5, #0]
   5890c:	f7ff faf7 	bl	57efe <move_window>
		if (res != FR_OK) break;
   58910:	2800      	cmp	r0, #0
   58912:	d1f4      	bne.n	588fe <store_xdir+0x22>
   58914:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   58916:	f104 0220 	add.w	r2, r4, #32
   5891a:	f854 1b04 	ldr.w	r1, [r4], #4
   5891e:	4294      	cmp	r4, r2
   58920:	f843 1b04 	str.w	r1, [r3], #4
   58924:	d1f9      	bne.n	5891a <store_xdir+0x3e>
		dp->obj.fs->wflag = 1;
   58926:	682b      	ldr	r3, [r5, #0]
   58928:	70df      	strb	r7, [r3, #3]
		if (--nent == 0) break;
   5892a:	2e00      	cmp	r6, #0
   5892c:	d0e7      	beq.n	588fe <store_xdir+0x22>
		res = dir_next(dp, 0);
   5892e:	2100      	movs	r1, #0
   58930:	4628      	mov	r0, r5
   58932:	f7ff feb8 	bl	586a6 <dir_next>
   58936:	3e01      	subs	r6, #1
   58938:	e7e0      	b.n	588fc <store_xdir+0x20>

0005893a <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
   5893a:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
   5893c:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
   5893e:	bf04      	itt	eq
   58940:	8a8a      	ldrheq	r2, [r1, #20]
   58942:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
   58946:	4618      	mov	r0, r3
   58948:	4770      	bx	lr

0005894a <f_open>:
{
   5894a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   5894e:	b098      	sub	sp, #96	; 0x60
   58950:	4616      	mov	r6, r2
	if (!fp) return FR_INVALID_OBJECT;
   58952:	4604      	mov	r4, r0
{
   58954:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
   58956:	2800      	cmp	r0, #0
   58958:	f000 812a 	beq.w	58bb0 <f_open+0x266>
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
   5895c:	f002 083f 	and.w	r8, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
   58960:	4642      	mov	r2, r8
   58962:	a903      	add	r1, sp, #12
   58964:	a801      	add	r0, sp, #4
   58966:	f7f4 fed1 	bl	4d70c <mount_volume>
	if (res == FR_OK) {
   5896a:	4607      	mov	r7, r0
   5896c:	b948      	cbnz	r0, 58982 <f_open+0x38>
		dj.obj.fs = fs;
   5896e:	9d03      	ldr	r5, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
   58970:	9901      	ldr	r1, [sp, #4]
   58972:	a804      	add	r0, sp, #16
		dj.obj.fs = fs;
   58974:	9504      	str	r5, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
   58976:	f7f5 fbcf 	bl	4e118 <follow_path>
		if (res == FR_OK) {
   5897a:	b130      	cbz	r0, 5898a <f_open+0x40>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   5897c:	f016 0f1c 	tst.w	r6, #28
   58980:	d117      	bne.n	589b2 <f_open+0x68>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   58982:	2300      	movs	r3, #0
   58984:	4607      	mov	r7, r0
   58986:	6023      	str	r3, [r4, #0]
   58988:	e104      	b.n	58b94 <f_open+0x24a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
   5898a:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
   5898e:	2b00      	cmp	r3, #0
   58990:	f2c0 8108 	blt.w	58ba4 <f_open+0x25a>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   58994:	f016 0f1c 	tst.w	r6, #28
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   58998:	f89d 3016 	ldrb.w	r3, [sp, #22]
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   5899c:	f040 809e 	bne.w	58adc <f_open+0x192>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
   589a0:	06d8      	lsls	r0, r3, #27
   589a2:	f100 8101 	bmi.w	58ba8 <f_open+0x25e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
   589a6:	07b1      	lsls	r1, r6, #30
   589a8:	d543      	bpl.n	58a32 <f_open+0xe8>
   589aa:	07da      	lsls	r2, r3, #31
   589ac:	d541      	bpl.n	58a32 <f_open+0xe8>
					res = FR_DENIED;
   589ae:	2007      	movs	r0, #7
   589b0:	e7e7      	b.n	58982 <f_open+0x38>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
   589b2:	2804      	cmp	r0, #4
   589b4:	d1e5      	bne.n	58982 <f_open+0x38>
					res = dir_register(&dj);
   589b6:	a804      	add	r0, sp, #16
   589b8:	f7f5 f9da 	bl	4dd70 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   589bc:	2800      	cmp	r0, #0
   589be:	d1e0      	bne.n	58982 <f_open+0x38>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
   589c0:	f048 0808 	orr.w	r8, r8, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   589c4:	f018 0f08 	tst.w	r8, #8
   589c8:	d038      	beq.n	58a3c <f_open+0xf2>
				if (fs->fs_type == FS_EXFAT) {
   589ca:	782b      	ldrb	r3, [r5, #0]
   589cc:	2b04      	cmp	r3, #4
   589ce:	f040 808e 	bne.w	58aee <f_open+0x1a4>
					init_alloc_info(fs, &fp->obj);
   589d2:	4621      	mov	r1, r4
   589d4:	4628      	mov	r0, r5
					fp->obj.fs = fs;
   589d6:	6025      	str	r5, [r4, #0]
					init_alloc_info(fs, &fp->obj);
   589d8:	f7ff f920 	bl	57c1c <init_alloc_info>
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
   589dc:	6928      	ldr	r0, [r5, #16]
__ssp_bos_icheck3(memset, void *, int)
   589de:	221e      	movs	r2, #30
   589e0:	2100      	movs	r1, #0
   589e2:	3002      	adds	r0, #2
   589e4:	f002 fab8 	bl	5af58 <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
   589e8:	6928      	ldr	r0, [r5, #16]
   589ea:	221a      	movs	r2, #26
   589ec:	2100      	movs	r1, #0
   589ee:	3026      	adds	r0, #38	; 0x26
   589f0:	f002 fab2 	bl	5af58 <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
   589f4:	2220      	movs	r2, #32
   589f6:	692b      	ldr	r3, [r5, #16]
					res = store_xdir(&dj);
   589f8:	a804      	add	r0, sp, #16
					fs->dirbuf[XDIR_Attr] = AM_ARC;
   589fa:	711a      	strb	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   589fc:	2200      	movs	r2, #0
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
   589fe:	692b      	ldr	r3, [r5, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   58a00:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
   58a02:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val; val >>= 8;
   58a04:	2221      	movs	r2, #33	; 0x21
   58a06:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val;
   58a08:	2250      	movs	r2, #80	; 0x50
   58a0a:	72da      	strb	r2, [r3, #11]
					fs->dirbuf[XDIR_GenFlags] = 1;
   58a0c:	2201      	movs	r2, #1
   58a0e:	692b      	ldr	r3, [r5, #16]
   58a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
   58a14:	f7ff ff62 	bl	588dc <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
   58a18:	2800      	cmp	r0, #0
   58a1a:	d1b2      	bne.n	58982 <f_open+0x38>
   58a1c:	68a1      	ldr	r1, [r4, #8]
   58a1e:	b141      	cbz	r1, 58a32 <f_open+0xe8>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   58a20:	4602      	mov	r2, r0
   58a22:	4620      	mov	r0, r4
   58a24:	f7ff fc4d 	bl	582c2 <remove_chain>
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
   58a28:	68a6      	ldr	r6, [r4, #8]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   58a2a:	3e01      	subs	r6, #1
   58a2c:	616e      	str	r6, [r5, #20]
		if (res == FR_OK) {
   58a2e:	2800      	cmp	r0, #0
   58a30:	d1a7      	bne.n	58982 <f_open+0x38>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
   58a32:	f018 0f08 	tst.w	r8, #8
   58a36:	bf18      	it	ne
   58a38:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   58a3c:	6bab      	ldr	r3, [r5, #56]	; 0x38
			fp->dir_ptr = dj.dir;
   58a3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   58a40:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
   58a42:	64e1      	str	r1, [r4, #76]	; 0x4c
			if (fs->fs_type == FS_EXFAT) {
   58a44:	7828      	ldrb	r0, [r5, #0]
   58a46:	2804      	cmp	r0, #4
   58a48:	f040 808c 	bne.w	58b64 <f_open+0x21a>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
   58a4c:	9b06      	ldr	r3, [sp, #24]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
   58a4e:	f89d 2017 	ldrb.w	r2, [sp, #23]
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
   58a52:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
   58a54:	9b08      	ldr	r3, [sp, #32]
				init_alloc_info(fs, &fp->obj);
   58a56:	4621      	mov	r1, r4
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
   58a58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   58a5c:	4313      	orrs	r3, r2
   58a5e:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
   58a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
				init_alloc_info(fs, &fp->obj);
   58a62:	4628      	mov	r0, r5
				fp->obj.c_ofs = dj.blk_ofs;
   58a64:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
   58a66:	f7ff f8d9 	bl	57c1c <init_alloc_info>
			fp->obj.fs = fs;	/* Validate the file object */
   58a6a:	6025      	str	r5, [r4, #0]
			fp->obj.id = fs->id;
   58a6c:	88eb      	ldrh	r3, [r5, #6]
			fp->err = 0;		/* Clear error flag */
   58a6e:	f04f 0a00 	mov.w	sl, #0
			fp->fptr = 0;		/* Set file pointer top of the file */
   58a72:	2200      	movs	r2, #0
			fp->obj.id = fs->id;
   58a74:	80a3      	strh	r3, [r4, #4]
			fp->fptr = 0;		/* Set file pointer top of the file */
   58a76:	2300      	movs	r3, #0
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   58a78:	f018 0f20 	tst.w	r8, #32
			fp->fptr = 0;		/* Set file pointer top of the file */
   58a7c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			fp->flag = mode;	/* Set file access mode */
   58a80:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
			fp->err = 0;		/* Clear error flag */
   58a84:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
			fp->sect = 0;		/* Invalidate current data sector */
   58a88:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   58a8c:	f000 8082 	beq.w	58b94 <f_open+0x24a>
   58a90:	e9d4 6804 	ldrd	r6, r8, [r4, #16]
   58a94:	ea56 0308 	orrs.w	r3, r6, r8
   58a98:	d07c      	beq.n	58b94 <f_open+0x24a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
   58a9a:	e9c4 680e 	strd	r6, r8, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   58a9e:	f8b5 900a 	ldrh.w	r9, [r5, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
   58aa2:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   58aa4:	ea4f 2949 	mov.w	r9, r9, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   58aa8:	45b1      	cmp	r9, r6
   58aaa:	eb7a 0308 	sbcs.w	r3, sl, r8
   58aae:	d264      	bcs.n	58b7a <f_open+0x230>
					clst = get_fat(&fp->obj, clst);
   58ab0:	4620      	mov	r0, r4
   58ab2:	f7ff fa7a 	bl	57faa <get_fat>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   58ab6:	ebb6 0609 	subs.w	r6, r6, r9
   58aba:	f168 0800 	sbc.w	r8, r8, #0
					if (clst <= 1) res = FR_INT_ERR;
   58abe:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
   58ac0:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
   58ac2:	d96b      	bls.n	58b9c <f_open+0x252>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   58ac4:	1c43      	adds	r3, r0, #1
   58ac6:	d06b      	beq.n	58ba0 <f_open+0x256>
   58ac8:	45b1      	cmp	r9, r6
   58aca:	eb7a 0308 	sbcs.w	r3, sl, r8
   58ace:	d3ef      	bcc.n	58ab0 <f_open+0x166>
   58ad0:	2000      	movs	r0, #0
				fp->clust = clst;
   58ad2:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   58ad4:	2800      	cmp	r0, #0
   58ad6:	f47f af54 	bne.w	58982 <f_open+0x38>
   58ada:	e04f      	b.n	58b7c <f_open+0x232>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   58adc:	f013 0f11 	tst.w	r3, #17
   58ae0:	f47f af65 	bne.w	589ae <f_open+0x64>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   58ae4:	0776      	lsls	r6, r6, #29
   58ae6:	f57f af6d 	bpl.w	589c4 <f_open+0x7a>
   58aea:	2008      	movs	r0, #8
   58aec:	e749      	b.n	58982 <f_open+0x38>
	*ptr++ = (BYTE)val; val >>= 8;
   58aee:	f04f 0900 	mov.w	r9, #0
	*ptr++ = (BYTE)val;
   58af2:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
   58af4:	2121      	movs	r1, #33	; 0x21
					st_dword(dj.dir + DIR_CrtTime, tm);
   58af6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val;
   58af8:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
   58afa:	f883 900e 	strb.w	r9, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
   58afe:	f883 900f 	strb.w	r9, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
   58b02:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, tm);
   58b04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val;
   58b06:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
   58b08:	f883 9016 	strb.w	r9, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
   58b0c:	f883 9017 	strb.w	r9, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
   58b10:	7619      	strb	r1, [r3, #24]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   58b12:	9913      	ldr	r1, [sp, #76]	; 0x4c
   58b14:	7828      	ldrb	r0, [r5, #0]
   58b16:	f7ff ff10 	bl	5893a <ld_clust.isra.0>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
   58b1a:	2320      	movs	r3, #32
   58b1c:	72cb      	strb	r3, [r1, #11]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   58b1e:	4606      	mov	r6, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   58b20:	464a      	mov	r2, r9
   58b22:	4628      	mov	r0, r5
   58b24:	9913      	ldr	r1, [sp, #76]	; 0x4c
   58b26:	f7ff f9de 	bl	57ee6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
   58b2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
   58b2c:	f883 901c 	strb.w	r9, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
   58b30:	f883 901d 	strb.w	r9, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
   58b34:	f883 901e 	strb.w	r9, [r3, #30]
	*ptr++ = (BYTE)val;
   58b38:	f883 901f 	strb.w	r9, [r3, #31]
					fs->wflag = 1;
   58b3c:	2301      	movs	r3, #1
   58b3e:	70eb      	strb	r3, [r5, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
   58b40:	2e00      	cmp	r6, #0
   58b42:	f43f af76 	beq.w	58a32 <f_open+0xe8>
						res = remove_chain(&dj.obj, cl, 0);
   58b46:	464a      	mov	r2, r9
   58b48:	4631      	mov	r1, r6
   58b4a:	a804      	add	r0, sp, #16
						sc = fs->winsect;
   58b4c:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
   58b50:	f7ff fbb7 	bl	582c2 <remove_chain>
						if (res == FR_OK) {
   58b54:	2800      	cmp	r0, #0
   58b56:	f47f af14 	bne.w	58982 <f_open+0x38>
							res = move_window(fs, sc);
   58b5a:	4651      	mov	r1, sl
   58b5c:	4628      	mov	r0, r5
   58b5e:	f7ff f9ce 	bl	57efe <move_window>
   58b62:	e762      	b.n	58a2a <f_open+0xe0>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
   58b64:	f7ff fee9 	bl	5893a <ld_clust.isra.0>
   58b68:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   58b6a:	f101 001c 	add.w	r0, r1, #28
   58b6e:	f7ff f809 	bl	57b84 <ld_dword>
   58b72:	2300      	movs	r3, #0
   58b74:	6120      	str	r0, [r4, #16]
   58b76:	6163      	str	r3, [r4, #20]
   58b78:	e777      	b.n	58a6a <f_open+0x120>
				fp->clust = clst;
   58b7a:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   58b7c:	f3c6 0308 	ubfx	r3, r6, #0, #9
   58b80:	b143      	cbz	r3, 58b94 <f_open+0x24a>
					sc = clst2sect(fs, clst);
   58b82:	4628      	mov	r0, r5
   58b84:	f7ff f81b 	bl	57bbe <clst2sect>
					if (sc == 0) {
   58b88:	b180      	cbz	r0, 58bac <f_open+0x262>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
   58b8a:	0a76      	lsrs	r6, r6, #9
   58b8c:	ea46 56c8 	orr.w	r6, r6, r8, lsl #23
   58b90:	4430      	add	r0, r6
   58b92:	6460      	str	r0, [r4, #68]	; 0x44
}
   58b94:	4638      	mov	r0, r7
   58b96:	b018      	add	sp, #96	; 0x60
   58b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
   58b9c:	2002      	movs	r0, #2
   58b9e:	e798      	b.n	58ad2 <f_open+0x188>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
   58ba0:	2001      	movs	r0, #1
   58ba2:	e796      	b.n	58ad2 <f_open+0x188>
				res = FR_INVALID_NAME;
   58ba4:	2006      	movs	r0, #6
   58ba6:	e6ec      	b.n	58982 <f_open+0x38>
					res = FR_NO_FILE;
   58ba8:	2004      	movs	r0, #4
   58baa:	e6ea      	b.n	58982 <f_open+0x38>
						res = FR_INT_ERR;
   58bac:	2002      	movs	r0, #2
   58bae:	e6e8      	b.n	58982 <f_open+0x38>
	if (!fp) return FR_INVALID_OBJECT;
   58bb0:	2709      	movs	r7, #9
   58bb2:	e7ef      	b.n	58b94 <f_open+0x24a>

00058bb4 <f_read>:
{
   58bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   58bb8:	469a      	mov	sl, r3
	*br = 0;	/* Clear read byte counter */
   58bba:	2300      	movs	r3, #0
{
   58bbc:	b085      	sub	sp, #20
   58bbe:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
   58bc0:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   58bc4:	a903      	add	r1, sp, #12
{
   58bc6:	4604      	mov	r4, r0
   58bc8:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   58bca:	f7ff f83e 	bl	57c4a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   58bce:	4606      	mov	r6, r0
   58bd0:	bb78      	cbnz	r0, 58c32 <f_read+0x7e>
   58bd2:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
   58bd6:	bb66      	cbnz	r6, 58c32 <f_read+0x7e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   58bd8:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
   58bdc:	f01b 0301 	ands.w	r3, fp, #1
   58be0:	9300      	str	r3, [sp, #0]
   58be2:	f000 8090 	beq.w	58d06 <f_read+0x152>
	remain = fp->obj.objsize - fp->fptr;
   58be6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   58bea:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   58bee:	1a1b      	subs	r3, r3, r0
   58bf0:	eb62 0201 	sbc.w	r2, r2, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   58bf4:	42bb      	cmp	r3, r7
   58bf6:	f172 0200 	sbcs.w	r2, r2, #0
   58bfa:	d200      	bcs.n	58bfe <f_read+0x4a>
   58bfc:	461f      	mov	r7, r3
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   58bfe:	b1c7      	cbz	r7, 58c32 <f_read+0x7e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
   58c00:	e9d4 200e 	ldrd	r2, r0, [r4, #56]	; 0x38
   58c04:	f3c2 0308 	ubfx	r3, r2, #0, #9
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
   58c08:	f8dd 800c 	ldr.w	r8, [sp, #12]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
   58c0c:	2b00      	cmp	r3, #0
   58c0e:	d161      	bne.n	58cd4 <f_read+0x120>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
   58c10:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   58c14:	0a51      	lsrs	r1, r2, #9
   58c16:	3b01      	subs	r3, #1
   58c18:	ea41 51c0 	orr.w	r1, r1, r0, lsl #23
			if (csect == 0) {					/* On the cluster boundary? */
   58c1c:	ea13 0b01 	ands.w	fp, r3, r1
   58c20:	d118      	bne.n	58c54 <f_read+0xa0>
				if (fp->fptr == 0) {			/* On the top of the file? */
   58c22:	4302      	orrs	r2, r0
   58c24:	d109      	bne.n	58c3a <f_read+0x86>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
   58c26:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
   58c28:	2801      	cmp	r0, #1
   58c2a:	d80b      	bhi.n	58c44 <f_read+0x90>
   58c2c:	2602      	movs	r6, #2
   58c2e:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
}
   58c32:	4630      	mov	r0, r6
   58c34:	b005      	add	sp, #20
   58c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
   58c3a:	4620      	mov	r0, r4
   58c3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   58c3e:	f7ff f9b4 	bl	57faa <get_fat>
   58c42:	e7f1      	b.n	58c28 <f_read+0x74>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   58c44:	1c43      	adds	r3, r0, #1
   58c46:	d104      	bne.n	58c52 <f_read+0x9e>
   58c48:	2301      	movs	r3, #1
   58c4a:	9e00      	ldr	r6, [sp, #0]
   58c4c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   58c50:	e7ef      	b.n	58c32 <f_read+0x7e>
				fp->clust = clst;				/* Update current cluster */
   58c52:	6420      	str	r0, [r4, #64]	; 0x40
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   58c54:	4640      	mov	r0, r8
   58c56:	6c21      	ldr	r1, [r4, #64]	; 0x40
   58c58:	f7fe ffb1 	bl	57bbe <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   58c5c:	2800      	cmp	r0, #0
   58c5e:	d0e5      	beq.n	58c2c <f_read+0x78>
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
   58c60:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
   58c64:	eb0b 0200 	add.w	r2, fp, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
   58c68:	d333      	bcc.n	58cd2 <f_read+0x11e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   58c6a:	f8b8 100a 	ldrh.w	r1, [r8, #10]
   58c6e:	eb0b 2057 	add.w	r0, fp, r7, lsr #9
   58c72:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
   58c74:	ea4f 2557 	mov.w	r5, r7, lsr #9
					cc = fs->csize - csect;
   58c78:	bf88      	it	hi
   58c7a:	eba1 050b 	subhi.w	r5, r1, fp
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   58c7e:	462b      	mov	r3, r5
   58c80:	4649      	mov	r1, r9
   58c82:	f898 0001 	ldrb.w	r0, [r8, #1]
   58c86:	9201      	str	r2, [sp, #4]
   58c88:	f7f6 fa5a 	bl	4f140 <disk_read>
   58c8c:	2800      	cmp	r0, #0
   58c8e:	d1db      	bne.n	58c48 <f_read+0x94>
				if (fs->wflag && fs->winsect - sect < cc) {
   58c90:	f898 3003 	ldrb.w	r3, [r8, #3]
   58c94:	b16b      	cbz	r3, 58cb2 <f_read+0xfe>
   58c96:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
   58c9a:	9a01      	ldr	r2, [sp, #4]
   58c9c:	1a80      	subs	r0, r0, r2
   58c9e:	42a8      	cmp	r0, r5
   58ca0:	d207      	bcs.n	58cb2 <f_read+0xfe>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   58ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
   58ca6:	f108 013c 	add.w	r1, r8, #60	; 0x3c
   58caa:	eb09 2040 	add.w	r0, r9, r0, lsl #9
   58cae:	f002 f919 	bl	5aee4 <memcpy>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
   58cb2:	026d      	lsls	r5, r5, #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   58cb4:	f8da 3000 	ldr.w	r3, [sl]
   58cb8:	1b7f      	subs	r7, r7, r5
   58cba:	442b      	add	r3, r5
   58cbc:	f8ca 3000 	str.w	r3, [sl]
   58cc0:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   58cc4:	195b      	adds	r3, r3, r5
   58cc6:	f142 0200 	adc.w	r2, r2, #0
   58cca:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
   58cce:	44a9      	add	r9, r5
   58cd0:	e795      	b.n	58bfe <f_read+0x4a>
			fp->sect = sect;
   58cd2:	6462      	str	r2, [r4, #68]	; 0x44
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   58cd4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   58cd6:	4640      	mov	r0, r8
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   58cd8:	f3c5 0508 	ubfx	r5, r5, #0, #9
   58cdc:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
   58ce0:	42bd      	cmp	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   58ce2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   58ce4:	bf28      	it	cs
   58ce6:	463d      	movcs	r5, r7
   58ce8:	f7ff f909 	bl	57efe <move_window>
   58cec:	2800      	cmp	r0, #0
   58cee:	d1ab      	bne.n	58c48 <f_read+0x94>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
   58cf0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   58cf2:	f108 083c 	add.w	r8, r8, #60	; 0x3c
   58cf6:	f3c1 0108 	ubfx	r1, r1, #0, #9
   58cfa:	462a      	mov	r2, r5
   58cfc:	4648      	mov	r0, r9
   58cfe:	4441      	add	r1, r8
   58d00:	f002 f8f0 	bl	5aee4 <memcpy>
   58d04:	e7d6      	b.n	58cb4 <f_read+0x100>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   58d06:	2607      	movs	r6, #7
   58d08:	e793      	b.n	58c32 <f_read+0x7e>

00058d0a <f_write>:
{
   58d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   58d0e:	4699      	mov	r9, r3
	*bw = 0;	/* Clear write byte counter */
   58d10:	2300      	movs	r3, #0
{
   58d12:	b085      	sub	sp, #20
   58d14:	4688      	mov	r8, r1
	*bw = 0;	/* Clear write byte counter */
   58d16:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   58d1a:	a903      	add	r1, sp, #12
{
   58d1c:	4604      	mov	r4, r0
   58d1e:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   58d20:	f7fe ff93 	bl	57c4a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   58d24:	4605      	mov	r5, r0
   58d26:	bb80      	cbnz	r0, 58d8a <f_write+0x80>
   58d28:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
   58d2c:	bb6d      	cbnz	r5, 58d8a <f_write+0x80>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   58d2e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   58d32:	079a      	lsls	r2, r3, #30
   58d34:	f140 80c2 	bpl.w	58ebc <f_write+0x1b2>
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   58d38:	9e03      	ldr	r6, [sp, #12]
   58d3a:	7833      	ldrb	r3, [r6, #0]
   58d3c:	2b04      	cmp	r3, #4
   58d3e:	d003      	beq.n	58d48 <f_write+0x3e>
   58d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   58d42:	42fb      	cmn	r3, r7
   58d44:	d300      	bcc.n	58d48 <f_write+0x3e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   58d46:	43df      	mvns	r7, r3
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   58d48:	b1cf      	cbz	r7, 58d7e <f_write+0x74>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
   58d4a:	e9d4 310e 	ldrd	r3, r1, [r4, #56]	; 0x38
   58d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   58d52:	2a00      	cmp	r2, #0
   58d54:	f040 8092 	bne.w	58e7c <f_write+0x172>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
   58d58:	f8b6 b00a 	ldrh.w	fp, [r6, #10]
   58d5c:	0a5a      	lsrs	r2, r3, #9
   58d5e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   58d62:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
			if (csect == 0) {				/* On the cluster boundary? */
   58d66:	ea1b 0b02 	ands.w	fp, fp, r2
   58d6a:	d122      	bne.n	58db2 <f_write+0xa8>
				if (fp->fptr == 0) {		/* On the top of the file? */
   58d6c:	430b      	orrs	r3, r1
   58d6e:	d110      	bne.n	58d92 <f_write+0x88>
					clst = fp->obj.sclust;	/* Follow from the origin */
   58d70:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
   58d72:	b981      	cbnz	r1, 58d96 <f_write+0x8c>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   58d74:	4620      	mov	r0, r4
   58d76:	f7ff fb97 	bl	584a8 <create_chain>
   58d7a:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   58d7c:	b958      	cbnz	r0, 58d96 <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
   58d7e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   58d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   58d86:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   58d8a:	4628      	mov	r0, r5
   58d8c:	b005      	add	sp, #20
   58d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   58d92:	6c21      	ldr	r1, [r4, #64]	; 0x40
   58d94:	e7ee      	b.n	58d74 <f_write+0x6a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   58d96:	2901      	cmp	r1, #1
   58d98:	d103      	bne.n	58da2 <f_write+0x98>
   58d9a:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   58d9c:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
   58da0:	e7f3      	b.n	58d8a <f_write+0x80>
   58da2:	1c4b      	adds	r3, r1, #1
   58da4:	d101      	bne.n	58daa <f_write+0xa0>
   58da6:	2501      	movs	r5, #1
   58da8:	e7f8      	b.n	58d9c <f_write+0x92>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   58daa:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
   58dac:	6421      	str	r1, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   58dae:	b903      	cbnz	r3, 58db2 <f_write+0xa8>
   58db0:	60a1      	str	r1, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
   58db2:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   58db4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   58db6:	429a      	cmp	r2, r3
   58db8:	d104      	bne.n	58dc4 <f_write+0xba>
   58dba:	4630      	mov	r0, r6
   58dbc:	f7fe ff5f 	bl	57c7e <sync_window>
   58dc0:	2800      	cmp	r0, #0
   58dc2:	d1f0      	bne.n	58da6 <f_write+0x9c>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   58dc4:	4630      	mov	r0, r6
   58dc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
   58dc8:	f7fe fef9 	bl	57bbe <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   58dcc:	2800      	cmp	r0, #0
   58dce:	d0e4      	beq.n	58d9a <f_write+0x90>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   58dd0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
   58dd4:	eb0b 0a00 	add.w	sl, fp, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   58dd8:	d33f      	bcc.n	58e5a <f_write+0x150>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   58dda:	8972      	ldrh	r2, [r6, #10]
   58ddc:	eb0b 2157 	add.w	r1, fp, r7, lsr #9
   58de0:	4291      	cmp	r1, r2
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
   58de2:	ea4f 2357 	mov.w	r3, r7, lsr #9
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   58de6:	4641      	mov	r1, r8
					cc = fs->csize - csect;
   58de8:	bf88      	it	hi
   58dea:	eba2 030b 	subhi.w	r3, r2, fp
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   58dee:	7870      	ldrb	r0, [r6, #1]
   58df0:	4652      	mov	r2, sl
   58df2:	9301      	str	r3, [sp, #4]
   58df4:	f7f6 f9b0 	bl	4f158 <disk_write>
   58df8:	4683      	mov	fp, r0
   58dfa:	2800      	cmp	r0, #0
   58dfc:	d1d3      	bne.n	58da6 <f_write+0x9c>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   58dfe:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   58e00:	9b01      	ldr	r3, [sp, #4]
   58e02:	eba1 010a 	sub.w	r1, r1, sl
   58e06:	4299      	cmp	r1, r3
   58e08:	d20a      	bcs.n	58e20 <f_write+0x116>
   58e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   58e0e:	eb08 2141 	add.w	r1, r8, r1, lsl #9
   58e12:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   58e16:	f002 f865 	bl	5aee4 <memcpy>
					fs->wflag = 0;
   58e1a:	9b01      	ldr	r3, [sp, #4]
   58e1c:	f886 b003 	strb.w	fp, [r6, #3]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
   58e20:	ea4f 2b43 	mov.w	fp, r3, lsl #9
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   58e24:	f8d9 3000 	ldr.w	r3, [r9]
   58e28:	eba7 070b 	sub.w	r7, r7, fp
   58e2c:	445b      	add	r3, fp
   58e2e:	f8c9 3000 	str.w	r3, [r9]
   58e32:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   58e36:	eb1b 0303 	adds.w	r3, fp, r3
   58e3a:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   58e3e:	f142 0200 	adc.w	r2, r2, #0
   58e42:	4298      	cmp	r0, r3
   58e44:	eb71 0c02 	sbcs.w	ip, r1, r2
   58e48:	bf3c      	itt	cc
   58e4a:	4618      	movcc	r0, r3
   58e4c:	4611      	movcc	r1, r2
   58e4e:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
   58e52:	e9c4 0104 	strd	r0, r1, [r4, #16]
   58e56:	44d8      	add	r8, fp
   58e58:	e776      	b.n	58d48 <f_write+0x3e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
   58e5a:	e9d4 020e 	ldrd	r0, r2, [r4, #56]	; 0x38
   58e5e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   58e62:	4288      	cmp	r0, r1
   58e64:	eb72 0303 	sbcs.w	r3, r2, r3
   58e68:	d306      	bcc.n	58e78 <f_write+0x16e>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
   58e6a:	4630      	mov	r0, r6
   58e6c:	f7fe ff07 	bl	57c7e <sync_window>
   58e70:	2800      	cmp	r0, #0
   58e72:	d198      	bne.n	58da6 <f_write+0x9c>
				fs->winsect = sect;
   58e74:	f8c6 a038 	str.w	sl, [r6, #56]	; 0x38
			fp->sect = sect;
   58e78:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   58e7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   58e7e:	f8dd a00c 	ldr.w	sl, [sp, #12]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   58e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
   58e86:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
   58e8a:	42bb      	cmp	r3, r7
   58e8c:	bf28      	it	cs
   58e8e:	463b      	movcs	r3, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   58e90:	4650      	mov	r0, sl
   58e92:	6c61      	ldr	r1, [r4, #68]	; 0x44
   58e94:	469b      	mov	fp, r3
   58e96:	f7ff f832 	bl	57efe <move_window>
   58e9a:	2800      	cmp	r0, #0
   58e9c:	d183      	bne.n	58da6 <f_write+0x9c>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
   58e9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   58ea0:	f10a 003c 	add.w	r0, sl, #60	; 0x3c
   58ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   58ea8:	4418      	add	r0, r3
   58eaa:	465a      	mov	r2, fp
   58eac:	4641      	mov	r1, r8
   58eae:	f002 f819 	bl	5aee4 <memcpy>
		fs->wflag = 1;
   58eb2:	f04f 0301 	mov.w	r3, #1
   58eb6:	f88a 3003 	strb.w	r3, [sl, #3]
   58eba:	e7b3      	b.n	58e24 <f_write+0x11a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   58ebc:	2507      	movs	r5, #7
   58ebe:	e764      	b.n	58d8a <f_write+0x80>

00058ec0 <f_sync>:
{
   58ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   58ec2:	b097      	sub	sp, #92	; 0x5c
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   58ec4:	a901      	add	r1, sp, #4
{
   58ec6:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   58ec8:	f7fe febf 	bl	57c4a <validate>
	if (res == FR_OK) {
   58ecc:	4604      	mov	r4, r0
   58ece:	2800      	cmp	r0, #0
   58ed0:	d16a      	bne.n	58fa8 <f_sync+0xe8>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
   58ed2:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   58ed6:	f014 0440 	ands.w	r4, r4, #64	; 0x40
   58eda:	d065      	beq.n	58fa8 <f_sync+0xe8>
			if (fs->fs_type == FS_EXFAT) {
   58edc:	9e01      	ldr	r6, [sp, #4]
   58ede:	7833      	ldrb	r3, [r6, #0]
   58ee0:	2b04      	cmp	r3, #4
   58ee2:	d164      	bne.n	58fae <f_sync+0xee>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
   58ee4:	4628      	mov	r0, r5
   58ee6:	f7ff f9d4 	bl	58292 <fill_first_frag>
				if (res == FR_OK) {
   58eea:	4604      	mov	r4, r0
   58eec:	2800      	cmp	r0, #0
   58eee:	d15b      	bne.n	58fa8 <f_sync+0xe8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
   58ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   58ef4:	4628      	mov	r0, r5
   58ef6:	6c29      	ldr	r1, [r5, #64]	; 0x40
   58ef8:	f7ff f9b3 	bl	58262 <fill_last_frag>
				if (res == FR_OK) {
   58efc:	4604      	mov	r4, r0
   58efe:	2800      	cmp	r0, #0
   58f00:	d152      	bne.n	58fa8 <f_sync+0xe8>
	dp->obj.fs = obj->fs;
   58f02:	682b      	ldr	r3, [r5, #0]
	dp->blk_ofs = obj->c_ofs;
   58f04:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	dp->obj.fs = obj->fs;
   58f06:	9302      	str	r3, [sp, #8]
	dp->obj.sclust = obj->c_scl;
   58f08:	6a2b      	ldr	r3, [r5, #32]
	dp->obj.n_frag = 0;
   58f0a:	9009      	str	r0, [sp, #36]	; 0x24
	dp->obj.sclust = obj->c_scl;
   58f0c:	9304      	str	r3, [sp, #16]
	dp->obj.stat = (BYTE)obj->c_size;
   58f0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	dp->blk_ofs = obj->c_ofs;
   58f10:	9115      	str	r1, [sp, #84]	; 0x54
	dp->obj.stat = (BYTE)obj->c_size;
   58f12:	f88d 300f 	strb.w	r3, [sp, #15]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
   58f16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   58f1a:	e9cd 3006 	strd	r3, r0, [sp, #24]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
   58f1e:	a802      	add	r0, sp, #8
   58f20:	f7ff f8d8 	bl	580d4 <dir_sdi>
	if (res == FR_OK) {
   58f24:	4604      	mov	r4, r0
   58f26:	2800      	cmp	r0, #0
   58f28:	d13e      	bne.n	58fa8 <f_sync+0xe8>
		res = load_xdir(dp);		/* Load the object's entry block */
   58f2a:	a802      	add	r0, sp, #8
   58f2c:	f7ff fc6a 	bl	58804 <load_xdir>
					if (res == FR_OK) {
   58f30:	4604      	mov	r4, r0
   58f32:	2800      	cmp	r0, #0
   58f34:	d138      	bne.n	58fa8 <f_sync+0xe8>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
   58f36:	6932      	ldr	r2, [r6, #16]
   58f38:	7913      	ldrb	r3, [r2, #4]
   58f3a:	f043 0320 	orr.w	r3, r3, #32
   58f3e:	7113      	strb	r3, [r2, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
   58f40:	79eb      	ldrb	r3, [r5, #7]
   58f42:	6932      	ldr	r2, [r6, #16]
   58f44:	f043 0301 	orr.w	r3, r3, #1
   58f48:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
   58f4c:	6930      	ldr	r0, [r6, #16]
   58f4e:	68a9      	ldr	r1, [r5, #8]
   58f50:	3034      	adds	r0, #52	; 0x34
   58f52:	f7fe fe1d 	bl	57b90 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
   58f56:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   58f5a:	6930      	ldr	r0, [r6, #16]
   58f5c:	3038      	adds	r0, #56	; 0x38
   58f5e:	f7fe fe1f 	bl	57ba0 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
   58f62:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   58f66:	6930      	ldr	r0, [r6, #16]
   58f68:	3028      	adds	r0, #40	; 0x28
   58f6a:	f7fe fe19 	bl	57ba0 <st_qword>
	*ptr++ = (BYTE)val; val >>= 8;
   58f6e:	2221      	movs	r2, #33	; 0x21
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
   58f70:	6933      	ldr	r3, [r6, #16]
						res = store_xdir(&dj);	/* Restore it to the directory */
   58f72:	a802      	add	r0, sp, #8
	*ptr++ = (BYTE)val; val >>= 8;
   58f74:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
   58f76:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
   58f78:	731c      	strb	r4, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
   58f7a:	735c      	strb	r4, [r3, #13]
	*ptr++ = (BYTE)val;
   58f7c:	73da      	strb	r2, [r3, #15]
						fs->dirbuf[XDIR_ModTime10] = 0;
   58f7e:	6933      	ldr	r3, [r6, #16]
   58f80:	755c      	strb	r4, [r3, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
   58f82:	6933      	ldr	r3, [r6, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   58f84:	741c      	strb	r4, [r3, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   58f86:	745c      	strb	r4, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
   58f88:	749c      	strb	r4, [r3, #18]
	*ptr++ = (BYTE)val;
   58f8a:	74dc      	strb	r4, [r3, #19]
						res = store_xdir(&dj);	/* Restore it to the directory */
   58f8c:	f7ff fca6 	bl	588dc <store_xdir>
						if (res == FR_OK) {
   58f90:	4604      	mov	r4, r0
   58f92:	b948      	cbnz	r0, 58fa8 <f_sync+0xe8>
					res = sync_fs(fs);					/* Restore it to the directory */
   58f94:	4630      	mov	r0, r6
   58f96:	f7ff fa3c 	bl	58412 <sync_fs>
   58f9a:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
   58f9c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   58fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   58fa4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
   58fa8:	4620      	mov	r0, r4
   58faa:	b017      	add	sp, #92	; 0x5c
   58fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = move_window(fs, fp->dir_sect);
   58fae:	4630      	mov	r0, r6
   58fb0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   58fb2:	f7fe ffa4 	bl	57efe <move_window>
				if (res == FR_OK) {
   58fb6:	4604      	mov	r4, r0
   58fb8:	2800      	cmp	r0, #0
   58fba:	d1f5      	bne.n	58fa8 <f_sync+0xe8>
					dir = fp->dir_ptr;
   58fbc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
   58fbe:	7afb      	ldrb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
   58fc0:	4639      	mov	r1, r7
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
   58fc2:	f043 0320 	orr.w	r3, r3, #32
   58fc6:	72fb      	strb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
   58fc8:	6828      	ldr	r0, [r5, #0]
   58fca:	68aa      	ldr	r2, [r5, #8]
   58fcc:	f7fe ff8b 	bl	57ee6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
   58fd0:	6929      	ldr	r1, [r5, #16]
   58fd2:	f107 001c 	add.w	r0, r7, #28
   58fd6:	f7fe fddb 	bl	57b90 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   58fda:	2321      	movs	r3, #33	; 0x21
   58fdc:	763b      	strb	r3, [r7, #24]
	*ptr++ = (BYTE)val;
   58fde:	2350      	movs	r3, #80	; 0x50
   58fe0:	767b      	strb	r3, [r7, #25]
					fs->wflag = 1;
   58fe2:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
   58fe4:	75bc      	strb	r4, [r7, #22]
	*ptr++ = (BYTE)val; val >>= 8;
   58fe6:	75fc      	strb	r4, [r7, #23]
	*ptr++ = (BYTE)val; val >>= 8;
   58fe8:	74bc      	strb	r4, [r7, #18]
	*ptr++ = (BYTE)val;
   58fea:	74fc      	strb	r4, [r7, #19]
					fs->wflag = 1;
   58fec:	70f3      	strb	r3, [r6, #3]
   58fee:	e7d1      	b.n	58f94 <f_sync+0xd4>

00058ff0 <f_close>:
{
   58ff0:	b513      	push	{r0, r1, r4, lr}
   58ff2:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
   58ff4:	f7ff ff64 	bl	58ec0 <f_sync>
	if (res == FR_OK)
   58ff8:	b928      	cbnz	r0, 59006 <f_close+0x16>
		res = validate(&fp->obj, &fs);	/* Lock volume */
   58ffa:	4620      	mov	r0, r4
   58ffc:	a901      	add	r1, sp, #4
   58ffe:	f7fe fe24 	bl	57c4a <validate>
		if (res == FR_OK) {
   59002:	b900      	cbnz	r0, 59006 <f_close+0x16>
			fp->obj.fs = 0;	/* Invalidate file object */
   59004:	6020      	str	r0, [r4, #0]
}
   59006:	b002      	add	sp, #8
   59008:	bd10      	pop	{r4, pc}

0005900a <f_lseek>:
{
   5900a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5900e:	b085      	sub	sp, #20
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   59010:	a903      	add	r1, sp, #12
{
   59012:	4604      	mov	r4, r0
   59014:	4615      	mov	r5, r2
   59016:	461e      	mov	r6, r3
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   59018:	f7fe fe17 	bl	57c4a <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
   5901c:	4607      	mov	r7, r0
   5901e:	2800      	cmp	r0, #0
   59020:	f040 80a4 	bne.w	5916c <f_lseek+0x162>
   59024:	f894 7031 	ldrb.w	r7, [r4, #49]	; 0x31
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
   59028:	2f00      	cmp	r7, #0
   5902a:	f040 809f 	bne.w	5916c <f_lseek+0x162>
   5902e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   59032:	f89a 3000 	ldrb.w	r3, [sl]
   59036:	2b04      	cmp	r3, #4
   59038:	d10c      	bne.n	59054 <f_lseek+0x4a>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
   5903a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   5903e:	4620      	mov	r0, r4
   59040:	6c21      	ldr	r1, [r4, #64]	; 0x40
   59042:	f7ff f90e 	bl	58262 <fill_last_frag>
	if (res != FR_OK) LEAVE_FF(fs, res);
   59046:	b108      	cbz	r0, 5904c <f_lseek+0x42>
   59048:	4607      	mov	r7, r0
   5904a:	e08f      	b.n	5916c <f_lseek+0x162>
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
   5904c:	f89a 3000 	ldrb.w	r3, [sl]
   59050:	2b04      	cmp	r3, #4
   59052:	d004      	beq.n	5905e <f_lseek+0x54>
   59054:	2e00      	cmp	r6, #0
   59056:	bf1c      	itt	ne
   59058:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   5905c:	2600      	movne	r6, #0
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   5905e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
		ifptr = fp->fptr;
   59062:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   59066:	42a8      	cmp	r0, r5
   59068:	eb71 0c06 	sbcs.w	ip, r1, r6
   5906c:	d236      	bcs.n	590dc <f_lseek+0xd2>
   5906e:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   59072:	f01c 0f02 	tst.w	ip, #2
   59076:	d02f      	beq.n	590d8 <f_lseek+0xce>
		fp->fptr = nsect = 0;
   59078:	2000      	movs	r0, #0
   5907a:	2100      	movs	r1, #0
   5907c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   59080:	f8ba 800a 	ldrh.w	r8, [sl, #10]
			if (ifptr > 0 &&
   59084:	ea53 0102 	orrs.w	r1, r3, r2
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   59088:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
   5908c:	d046      	beq.n	5911c <f_lseek+0x112>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   5908e:	f113 3bff 	adds.w	fp, r3, #4294967295	; 0xffffffff
   59092:	f142 39ff 	adc.w	r9, r2, #4294967295	; 0xffffffff
   59096:	1e68      	subs	r0, r5, #1
   59098:	f166 0100 	sbc.w	r1, r6, #0
   5909c:	4642      	mov	r2, r8
   5909e:	2300      	movs	r3, #0
   590a0:	f7e7 fd36 	bl	40b10 <__aeabi_uldivmod>
   590a4:	2300      	movs	r3, #0
   590a6:	e9cd 0100 	strd	r0, r1, [sp]
   590aa:	4642      	mov	r2, r8
   590ac:	4658      	mov	r0, fp
   590ae:	4649      	mov	r1, r9
   590b0:	f7e7 fd2e 	bl	40b10 <__aeabi_uldivmod>
			if (ifptr > 0 &&
   590b4:	9b00      	ldr	r3, [sp, #0]
   590b6:	4283      	cmp	r3, r0
   590b8:	9b01      	ldr	r3, [sp, #4]
   590ba:	418b      	sbcs	r3, r1
   590bc:	d32e      	bcc.n	5911c <f_lseek+0x112>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   590be:	f1c8 0300 	rsb	r3, r8, #0
   590c2:	ea03 030b 	and.w	r3, r3, fp
   590c6:	e9c4 390e 	strd	r3, r9, [r4, #56]	; 0x38
				ofs -= fp->fptr;
   590ca:	1aeb      	subs	r3, r5, r3
   590cc:	461d      	mov	r5, r3
				clst = fp->clust;
   590ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
				ofs -= fp->fptr;
   590d0:	eb66 0609 	sbc.w	r6, r6, r9
			if (clst != 0) {
   590d4:	b149      	cbz	r1, 590ea <f_lseek+0xe0>
   590d6:	e024      	b.n	59122 <f_lseek+0x118>
   590d8:	4605      	mov	r5, r0
   590da:	460e      	mov	r6, r1
		fp->fptr = nsect = 0;
   590dc:	2100      	movs	r1, #0
   590de:	2000      	movs	r0, #0
   590e0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		if (ofs > 0) {
   590e4:	ea55 0106 	orrs.w	r1, r5, r6
   590e8:	d1ca      	bne.n	59080 <f_lseek+0x76>
		fp->fptr = nsect = 0;
   590ea:	2000      	movs	r0, #0
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
   590ec:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   590f0:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
   590f4:	429d      	cmp	r5, r3
   590f6:	4191      	sbcs	r1, r2
			fp->obj.objsize = fp->fptr;
   590f8:	bf3c      	itt	cc
   590fa:	e9c4 3204 	strdcc	r3, r2, [r4, #16]
			fp->flag |= FA_MODIFIED;
   590fe:	f894 2030 	ldrbcc.w	r2, [r4, #48]	; 0x30
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   59102:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
   59106:	bf3c      	itt	cc
   59108:	f042 0240 	orrcc.w	r2, r2, #64	; 0x40
   5910c:	f884 2030 	strbcc.w	r2, [r4, #48]	; 0x30
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   59110:	b363      	cbz	r3, 5916c <f_lseek+0x162>
   59112:	6c63      	ldr	r3, [r4, #68]	; 0x44
   59114:	4283      	cmp	r3, r0
   59116:	d029      	beq.n	5916c <f_lseek+0x162>
			fp->sect = nsect;
   59118:	6460      	str	r0, [r4, #68]	; 0x44
   5911a:	e027      	b.n	5916c <f_lseek+0x162>
				clst = fp->obj.sclust;					/* start from the first cluster */
   5911c:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   5911e:	b1e1      	cbz	r1, 5915a <f_lseek+0x150>
				fp->clust = clst;
   59120:	6421      	str	r1, [r4, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
   59122:	f04f 0900 	mov.w	r9, #0
					ofs -= bcs; fp->fptr += bcs;
   59126:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
				while (ofs > bcs) {						/* Cluster following loop */
   5912a:	45a8      	cmp	r8, r5
   5912c:	eb79 0006 	sbcs.w	r0, r9, r6
   59130:	d327      	bcc.n	59182 <f_lseek+0x178>
				fp->fptr += ofs;
   59132:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   59136:	195b      	adds	r3, r3, r5
   59138:	eb46 0202 	adc.w	r2, r6, r2
   5913c:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
				if (ofs % SS(fs)) {
   59140:	f3c5 0308 	ubfx	r3, r5, #0, #9
   59144:	2b00      	cmp	r3, #0
   59146:	d0d0      	beq.n	590ea <f_lseek+0xe0>
					nsect = clst2sect(fs, clst);	/* Current sector */
   59148:	4650      	mov	r0, sl
   5914a:	f7fe fd38 	bl	57bbe <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
   5914e:	b150      	cbz	r0, 59166 <f_lseek+0x15c>
					nsect += (DWORD)(ofs / SS(fs));
   59150:	0a6d      	lsrs	r5, r5, #9
   59152:	ea45 55c6 	orr.w	r5, r5, r6, lsl #23
   59156:	4428      	add	r0, r5
   59158:	e7c8      	b.n	590ec <f_lseek+0xe2>
					clst = create_chain(&fp->obj, 0);
   5915a:	4620      	mov	r0, r4
   5915c:	f7ff f9a4 	bl	584a8 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   59160:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
   59162:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   59164:	d106      	bne.n	59174 <f_lseek+0x16a>
   59166:	2702      	movs	r7, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   59168:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
}
   5916c:	4638      	mov	r0, r7
   5916e:	b005      	add	sp, #20
   59170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   59174:	1c42      	adds	r2, r0, #1
   59176:	d101      	bne.n	5917c <f_lseek+0x172>
   59178:	2701      	movs	r7, #1
   5917a:	e7f5      	b.n	59168 <f_lseek+0x15e>
					fp->obj.sclust = clst;
   5917c:	60a0      	str	r0, [r4, #8]
				fp->clust = clst;
   5917e:	6420      	str	r0, [r4, #64]	; 0x40
   59180:	e7a8      	b.n	590d4 <f_lseek+0xca>
					ofs -= bcs; fp->fptr += bcs;
   59182:	ebb5 0508 	subs.w	r5, r5, r8
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   59186:	f894 e030 	ldrb.w	lr, [r4, #48]	; 0x30
					ofs -= bcs; fp->fptr += bcs;
   5918a:	f166 0600 	sbc.w	r6, r6, #0
   5918e:	eb13 0308 	adds.w	r3, r3, r8
   59192:	f142 0000 	adc.w	r0, r2, #0
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   59196:	f01e 0f02 	tst.w	lr, #2
					ofs -= bcs; fp->fptr += bcs;
   5919a:	e9c4 300e 	strd	r3, r0, [r4, #56]	; 0x38
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   5919e:	d014      	beq.n	591ca <f_lseek+0x1c0>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
   591a0:	6962      	ldr	r2, [r4, #20]
   591a2:	9200      	str	r2, [sp, #0]
   591a4:	6922      	ldr	r2, [r4, #16]
   591a6:	429a      	cmp	r2, r3
   591a8:	9a00      	ldr	r2, [sp, #0]
   591aa:	4182      	sbcs	r2, r0
							fp->flag |= FA_MODIFIED;
   591ac:	bf3e      	ittt	cc
   591ae:	f04e 0e40 	orrcc.w	lr, lr, #64	; 0x40
							fp->obj.objsize = fp->fptr;
   591b2:	e9c4 3004 	strdcc	r3, r0, [r4, #16]
							fp->flag |= FA_MODIFIED;
   591b6:	f884 e030 	strbcc.w	lr, [r4, #48]	; 0x30
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
   591ba:	4620      	mov	r0, r4
   591bc:	f7ff f974 	bl	584a8 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
   591c0:	4601      	mov	r1, r0
   591c2:	b930      	cbnz	r0, 591d2 <f_lseek+0x1c8>
							ofs = 0; break;
   591c4:	4605      	mov	r5, r0
   591c6:	4606      	mov	r6, r0
   591c8:	e7b3      	b.n	59132 <f_lseek+0x128>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
   591ca:	4620      	mov	r0, r4
   591cc:	f7fe feed 	bl	57faa <get_fat>
   591d0:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   591d2:	1c4b      	adds	r3, r1, #1
   591d4:	d0d0      	beq.n	59178 <f_lseek+0x16e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   591d6:	2901      	cmp	r1, #1
   591d8:	d9c5      	bls.n	59166 <f_lseek+0x15c>
   591da:	f8da 301c 	ldr.w	r3, [sl, #28]
   591de:	428b      	cmp	r3, r1
   591e0:	d9c1      	bls.n	59166 <f_lseek+0x15c>
					fp->clust = clst;
   591e2:	6421      	str	r1, [r4, #64]	; 0x40
   591e4:	e79f      	b.n	59126 <f_lseek+0x11c>

000591e6 <f_opendir>:
{
   591e6:	b530      	push	{r4, r5, lr}
   591e8:	b085      	sub	sp, #20
	if (!dp) return FR_INVALID_OBJECT;
   591ea:	4604      	mov	r4, r0
{
   591ec:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
   591ee:	2800      	cmp	r0, #0
   591f0:	d03b      	beq.n	5926a <f_opendir+0x84>
	res = mount_volume(&path, &fs, 0);
   591f2:	2200      	movs	r2, #0
   591f4:	a903      	add	r1, sp, #12
   591f6:	a801      	add	r0, sp, #4
   591f8:	f7f4 fa88 	bl	4d70c <mount_volume>
	if (res == FR_OK) {
   591fc:	b948      	cbnz	r0, 59212 <f_opendir+0x2c>
		dp->obj.fs = fs;
   591fe:	9d03      	ldr	r5, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
   59200:	4620      	mov	r0, r4
   59202:	9901      	ldr	r1, [sp, #4]
		dp->obj.fs = fs;
   59204:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
   59206:	f7f4 ff87 	bl	4e118 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
   5920a:	b128      	cbz	r0, 59218 <f_opendir+0x32>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   5920c:	2804      	cmp	r0, #4
   5920e:	d100      	bne.n	59212 <f_opendir+0x2c>
   59210:	2005      	movs	r0, #5
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
   59212:	2300      	movs	r3, #0
   59214:	6023      	str	r3, [r4, #0]
   59216:	e021      	b.n	5925c <f_opendir+0x76>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
   59218:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
   5921c:	2b00      	cmp	r3, #0
   5921e:	db13      	blt.n	59248 <f_opendir+0x62>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
   59220:	79a3      	ldrb	r3, [r4, #6]
   59222:	06db      	lsls	r3, r3, #27
   59224:	d5f4      	bpl.n	59210 <f_opendir+0x2a>
					if (fs->fs_type == FS_EXFAT) {
   59226:	7828      	ldrb	r0, [r5, #0]
   59228:	2804      	cmp	r0, #4
   5922a:	d119      	bne.n	59260 <f_opendir+0x7a>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
   5922c:	68a3      	ldr	r3, [r4, #8]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   5922e:	79e2      	ldrb	r2, [r4, #7]
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
   59230:	6223      	str	r3, [r4, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   59232:	6923      	ldr	r3, [r4, #16]
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
   59234:	4621      	mov	r1, r4
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   59236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   5923a:	4313      	orrs	r3, r2
   5923c:	6263      	str	r3, [r4, #36]	; 0x24
						dp->obj.c_ofs = dp->blk_ofs;
   5923e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
   59240:	4628      	mov	r0, r5
						dp->obj.c_ofs = dp->blk_ofs;
   59242:	62a3      	str	r3, [r4, #40]	; 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
   59244:	f7fe fcea 	bl	57c1c <init_alloc_info>
				dp->obj.id = fs->id;
   59248:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
   5924a:	2100      	movs	r1, #0
   5924c:	4620      	mov	r0, r4
				dp->obj.id = fs->id;
   5924e:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
   59250:	f7fe ff40 	bl	580d4 <dir_sdi>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   59254:	2804      	cmp	r0, #4
   59256:	d0db      	beq.n	59210 <f_opendir+0x2a>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
   59258:	2800      	cmp	r0, #0
   5925a:	d1da      	bne.n	59212 <f_opendir+0x2c>
}
   5925c:	b005      	add	sp, #20
   5925e:	bd30      	pop	{r4, r5, pc}
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
   59260:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   59262:	f7ff fb6a 	bl	5893a <ld_clust.isra.0>
   59266:	60a0      	str	r0, [r4, #8]
   59268:	e7ee      	b.n	59248 <f_opendir+0x62>
	if (!dp) return FR_INVALID_OBJECT;
   5926a:	2009      	movs	r0, #9
   5926c:	e7f6      	b.n	5925c <f_opendir+0x76>

0005926e <f_closedir>:
{
   5926e:	b513      	push	{r0, r1, r4, lr}
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
   59270:	a901      	add	r1, sp, #4
{
   59272:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
   59274:	f7fe fce9 	bl	57c4a <validate>
	if (res == FR_OK) {
   59278:	b900      	cbnz	r0, 5927c <f_closedir+0xe>
		dp->obj.fs = 0;	/* Invalidate directory object */
   5927a:	6020      	str	r0, [r4, #0]
}
   5927c:	b002      	add	sp, #8
   5927e:	bd10      	pop	{r4, pc}

00059280 <f_readdir>:
{
   59280:	b573      	push	{r0, r1, r4, r5, r6, lr}
   59282:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   59284:	a901      	add	r1, sp, #4
{
   59286:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   59288:	f7fe fcdf 	bl	57c4a <validate>
	if (res == FR_OK) {
   5928c:	b9c0      	cbnz	r0, 592c0 <f_readdir+0x40>
		if (!fno) {
   5928e:	b935      	cbnz	r5, 5929e <f_readdir+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
   59290:	4629      	mov	r1, r5
   59292:	4620      	mov	r0, r4
}
   59294:	b002      	add	sp, #8
   59296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
   5929a:	f7fe bf1b 	b.w	580d4 <dir_sdi>
			res = DIR_READ_FILE(dp);		/* Read an item */
   5929e:	4620      	mov	r0, r4
   592a0:	f7f4 fc06 	bl	4dab0 <dir_read.constprop.0>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
   592a4:	f010 06fb 	ands.w	r6, r0, #251	; 0xfb
   592a8:	d10a      	bne.n	592c0 <f_readdir+0x40>
				get_fileinfo(dp, fno);		/* Get the object information */
   592aa:	4629      	mov	r1, r5
   592ac:	4620      	mov	r0, r4
   592ae:	f7fe fd22 	bl	57cf6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
   592b2:	4631      	mov	r1, r6
   592b4:	4620      	mov	r0, r4
   592b6:	f7ff f9f6 	bl	586a6 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
   592ba:	2804      	cmp	r0, #4
   592bc:	bf08      	it	eq
   592be:	2000      	moveq	r0, #0
}
   592c0:	b002      	add	sp, #8
   592c2:	bd70      	pop	{r4, r5, r6, pc}

000592c4 <f_stat>:
{
   592c4:	b530      	push	{r4, r5, lr}
   592c6:	b097      	sub	sp, #92	; 0x5c
   592c8:	9001      	str	r0, [sp, #4]
   592ca:	460d      	mov	r5, r1
	res = mount_volume(&path, &dj.obj.fs, 0);
   592cc:	2200      	movs	r2, #0
   592ce:	a902      	add	r1, sp, #8
   592d0:	a801      	add	r0, sp, #4
   592d2:	f7f4 fa1b 	bl	4d70c <mount_volume>
	if (res == FR_OK) {
   592d6:	4604      	mov	r4, r0
   592d8:	b970      	cbnz	r0, 592f8 <f_stat+0x34>
		res = follow_path(&dj, path);	/* Follow the file path */
   592da:	9901      	ldr	r1, [sp, #4]
   592dc:	a802      	add	r0, sp, #8
   592de:	f7f4 ff1b 	bl	4e118 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
   592e2:	4604      	mov	r4, r0
   592e4:	b940      	cbnz	r0, 592f8 <f_stat+0x34>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
   592e6:	f99d 3053 	ldrsb.w	r3, [sp, #83]	; 0x53
   592ea:	2b00      	cmp	r3, #0
   592ec:	db07      	blt.n	592fe <f_stat+0x3a>
				if (fno) get_fileinfo(&dj, fno);
   592ee:	b11d      	cbz	r5, 592f8 <f_stat+0x34>
   592f0:	4629      	mov	r1, r5
   592f2:	a802      	add	r0, sp, #8
   592f4:	f7fe fcff 	bl	57cf6 <get_fileinfo>
}
   592f8:	4620      	mov	r0, r4
   592fa:	b017      	add	sp, #92	; 0x5c
   592fc:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
   592fe:	2406      	movs	r4, #6
   59300:	e7fa      	b.n	592f8 <f_stat+0x34>

00059302 <f_getfree>:
{
   59302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   59306:	b091      	sub	sp, #68	; 0x44
   59308:	9001      	str	r0, [sp, #4]
   5930a:	4689      	mov	r9, r1
   5930c:	4615      	mov	r5, r2
	res = mount_volume(&path, &fs, 0);
   5930e:	a903      	add	r1, sp, #12
   59310:	2200      	movs	r2, #0
   59312:	a801      	add	r0, sp, #4
   59314:	f7f4 f9fa 	bl	4d70c <mount_volume>
	if (res == FR_OK) {
   59318:	4607      	mov	r7, r0
   5931a:	b948      	cbnz	r0, 59330 <f_getfree+0x2e>
		*fatfs = fs;				/* Return ptr to the fs object */
   5931c:	9c03      	ldr	r4, [sp, #12]
   5931e:	602c      	str	r4, [r5, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
   59320:	e9d4 3b06 	ldrd	r3, fp, [r4, #24]
   59324:	f1ab 0a02 	sub.w	sl, fp, #2
   59328:	4553      	cmp	r3, sl
   5932a:	d805      	bhi.n	59338 <f_getfree+0x36>
			*nclst = fs->free_clst;
   5932c:	f8c9 3000 	str.w	r3, [r9]
}
   59330:	4638      	mov	r0, r7
   59332:	b011      	add	sp, #68	; 0x44
   59334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
   59338:	7825      	ldrb	r5, [r4, #0]
   5933a:	2d01      	cmp	r5, #1
   5933c:	d11a      	bne.n	59374 <f_getfree+0x72>
				clst = 2; obj.fs = fs;
   5933e:	f04f 0802 	mov.w	r8, #2
			nfree = 0;
   59342:	4606      	mov	r6, r0
				clst = 2; obj.fs = fs;
   59344:	9404      	str	r4, [sp, #16]
					stat = get_fat(&obj, clst);
   59346:	4641      	mov	r1, r8
   59348:	a804      	add	r0, sp, #16
   5934a:	f7fe fe2e 	bl	57faa <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   5934e:	1c43      	adds	r3, r0, #1
   59350:	d06a      	beq.n	59428 <f_getfree+0x126>
					if (stat == 1) { res = FR_INT_ERR; break; }
   59352:	2801      	cmp	r0, #1
   59354:	d067      	beq.n	59426 <f_getfree+0x124>
					if (stat == 0) nfree++;
   59356:	b900      	cbnz	r0, 5935a <f_getfree+0x58>
   59358:	3601      	adds	r6, #1
				} while (++clst < fs->n_fatent);
   5935a:	69e3      	ldr	r3, [r4, #28]
   5935c:	f108 0801 	add.w	r8, r8, #1
   59360:	4543      	cmp	r3, r8
   59362:	d8f0      	bhi.n	59346 <f_getfree+0x44>
				*nclst = nfree;			/* Return the free clusters */
   59364:	f8c9 6000 	str.w	r6, [r9]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
   59368:	7923      	ldrb	r3, [r4, #4]
				fs->free_clst = nfree;	/* Now free_clst is valid */
   5936a:	61a6      	str	r6, [r4, #24]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
   5936c:	f043 0301 	orr.w	r3, r3, #1
   59370:	7123      	strb	r3, [r4, #4]
   59372:	e7dd      	b.n	59330 <f_getfree+0x2e>
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
   59374:	2d04      	cmp	r5, #4
   59376:	d12b      	bne.n	593d0 <f_getfree+0xce>
					i = 0;						/* Offset in the sector */
   59378:	4680      	mov	r8, r0
			nfree = 0;
   5937a:	4606      	mov	r6, r0
					sect = fs->bitbase;			/* Bitmap sector */
   5937c:	6b61      	ldr	r1, [r4, #52]	; 0x34
						if (i == 0) {
   5937e:	f1b8 0f00 	cmp.w	r8, #0
   59382:	d108      	bne.n	59396 <f_getfree+0x94>
							res = move_window(fs, sect++);
   59384:	4620      	mov	r0, r4
   59386:	f101 0b01 	add.w	fp, r1, #1
   5938a:	f7fe fdb8 	bl	57efe <move_window>
							if (res != FR_OK) break;
   5938e:	4605      	mov	r5, r0
   59390:	2800      	cmp	r0, #0
   59392:	d149      	bne.n	59428 <f_getfree+0x126>
							res = move_window(fs, sect++);
   59394:	4659      	mov	r1, fp
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   59396:	eb04 0308 	add.w	r3, r4, r8
   5939a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   5939e:	f1ba 0f00 	cmp.w	sl, #0
   593a2:	d0df      	beq.n	59364 <f_getfree+0x62>
   593a4:	f1aa 0208 	sub.w	r2, sl, #8
							if (!(bm & 1)) nfree++;
   593a8:	07d8      	lsls	r0, r3, #31
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   593aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
							if (!(bm & 1)) nfree++;
   593ae:	bf58      	it	pl
   593b0:	3601      	addpl	r6, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   593b2:	4592      	cmp	sl, r2
							bm >>= 1;
   593b4:	ea4f 0353 	mov.w	r3, r3, lsr #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
   593b8:	d002      	beq.n	593c0 <f_getfree+0xbe>
   593ba:	f1ba 0f00 	cmp.w	sl, #0
   593be:	d1f3      	bne.n	593a8 <f_getfree+0xa6>
						i = (i + 1) % SS(fs);
   593c0:	f108 0801 	add.w	r8, r8, #1
   593c4:	f3c8 0808 	ubfx	r8, r8, #0, #9
					} while (clst);
   593c8:	f1ba 0f00 	cmp.w	sl, #0
   593cc:	d1d7      	bne.n	5937e <f_getfree+0x7c>
   593ce:	e7c9      	b.n	59364 <f_getfree+0x62>
					i = 0;					/* Offset in the sector */
   593d0:	4680      	mov	r8, r0
			nfree = 0;
   593d2:	4606      	mov	r6, r0
					sect = fs->fatbase;		/* Top of the FAT */
   593d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
							if (ld_word(fs->win + i) == 0) nfree++;
   593d6:	f104 0a3c 	add.w	sl, r4, #60	; 0x3c
						if (i == 0) {
   593da:	f1b8 0f00 	cmp.w	r8, #0
   593de:	d108      	bne.n	593f2 <f_getfree+0xf0>
							res = move_window(fs, sect++);
   593e0:	1c4b      	adds	r3, r1, #1
   593e2:	4620      	mov	r0, r4
   593e4:	9300      	str	r3, [sp, #0]
   593e6:	f7fe fd8a 	bl	57efe <move_window>
							if (res != FR_OK) break;
   593ea:	4605      	mov	r5, r0
   593ec:	b9e0      	cbnz	r0, 59428 <f_getfree+0x126>
							res = move_window(fs, sect++);
   593ee:	9b00      	ldr	r3, [sp, #0]
   593f0:	4619      	mov	r1, r3
						if (fs->fs_type == FS_FAT16) {
   593f2:	7823      	ldrb	r3, [r4, #0]
							if (ld_word(fs->win + i) == 0) nfree++;
   593f4:	eb0a 0008 	add.w	r0, sl, r8
						if (fs->fs_type == FS_FAT16) {
   593f8:	2b02      	cmp	r3, #2
   593fa:	d10b      	bne.n	59414 <f_getfree+0x112>
							if (ld_word(fs->win + i) == 0) nfree++;
   593fc:	f83a 3008 	ldrh.w	r3, [sl, r8]
   59400:	b903      	cbnz	r3, 59404 <f_getfree+0x102>
   59402:	3601      	adds	r6, #1
							i += 2;
   59404:	f108 0802 	add.w	r8, r8, #2
					} while (--clst);
   59408:	f1bb 0b01 	subs.w	fp, fp, #1
						i %= SS(fs);
   5940c:	f3c8 0808 	ubfx	r8, r8, #0, #9
					} while (--clst);
   59410:	d1e3      	bne.n	593da <f_getfree+0xd8>
   59412:	e7a7      	b.n	59364 <f_getfree+0x62>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
   59414:	f7fe fbb6 	bl	57b84 <ld_dword>
   59418:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
   5941c:	bf08      	it	eq
   5941e:	3601      	addeq	r6, #1
							i += 4;
   59420:	f108 0804 	add.w	r8, r8, #4
   59424:	e7f0      	b.n	59408 <f_getfree+0x106>
					if (stat == 1) { res = FR_INT_ERR; break; }
   59426:	2502      	movs	r5, #2
							res = move_window(fs, sect++);
   59428:	462f      	mov	r7, r5
	LEAVE_FF(fs, res);
   5942a:	e781      	b.n	59330 <f_getfree+0x2e>

0005942c <f_truncate>:
{
   5942c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   5942e:	a901      	add	r1, sp, #4
{
   59430:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   59432:	f7fe fc0a 	bl	57c4a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
   59436:	4605      	mov	r5, r0
   59438:	2800      	cmp	r0, #0
   5943a:	d15a      	bne.n	594f2 <f_truncate+0xc6>
   5943c:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
   59440:	2d00      	cmp	r5, #0
   59442:	d156      	bne.n	594f2 <f_truncate+0xc6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   59444:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   59448:	079a      	lsls	r2, r3, #30
   5944a:	d555      	bpl.n	594f8 <f_truncate+0xcc>
	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
   5944c:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
   59450:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   59454:	4283      	cmp	r3, r0
   59456:	eb72 0101 	sbcs.w	r1, r2, r1
   5945a:	d24a      	bcs.n	594f2 <f_truncate+0xc6>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   5945c:	4313      	orrs	r3, r2
   5945e:	d111      	bne.n	59484 <f_truncate+0x58>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   59460:	462a      	mov	r2, r5
   59462:	4620      	mov	r0, r4
   59464:	68a1      	ldr	r1, [r4, #8]
   59466:	f7fe ff2c 	bl	582c2 <remove_chain>
			fp->obj.sclust = 0;
   5946a:	60a5      	str	r5, [r4, #8]
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   5946c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   59470:	e9c4 2304 	strd	r2, r3, [r4, #16]
		fp->flag |= FA_MODIFIED;
   59474:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   59478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   5947c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (res != FR_OK) ABORT(fs, res);
   59480:	b3b8      	cbz	r0, 594f2 <f_truncate+0xc6>
   59482:	e013      	b.n	594ac <f_truncate+0x80>
			ncl = get_fat(&fp->obj, fp->clust);
   59484:	6c21      	ldr	r1, [r4, #64]	; 0x40
   59486:	4620      	mov	r0, r4
   59488:	f7fe fd8f 	bl	57faa <get_fat>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   5948c:	1c43      	adds	r3, r0, #1
			ncl = get_fat(&fp->obj, fp->clust);
   5948e:	4601      	mov	r1, r0
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   59490:	d019      	beq.n	594c6 <f_truncate+0x9a>
			if (ncl == 1) res = FR_INT_ERR;
   59492:	2801      	cmp	r0, #1
   59494:	d10e      	bne.n	594b4 <f_truncate+0x88>
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   59496:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
			if (ncl == 1) res = FR_INT_ERR;
   5949a:	2002      	movs	r0, #2
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   5949c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		fp->flag |= FA_MODIFIED;
   594a0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   594a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   594a8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (res != FR_OK) ABORT(fs, res);
   594ac:	4605      	mov	r5, r0
   594ae:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   594b2:	e01e      	b.n	594f2 <f_truncate+0xc6>
			if (res == FR_OK && ncl < fs->n_fatent) {
   594b4:	9b01      	ldr	r3, [sp, #4]
   594b6:	69db      	ldr	r3, [r3, #28]
   594b8:	4283      	cmp	r3, r0
   594ba:	d910      	bls.n	594de <f_truncate+0xb2>
				res = remove_chain(&fp->obj, ncl, fp->clust);
   594bc:	4620      	mov	r0, r4
   594be:	6c22      	ldr	r2, [r4, #64]	; 0x40
   594c0:	f7fe feff 	bl	582c2 <remove_chain>
   594c4:	e7d2      	b.n	5946c <f_truncate+0x40>
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   594c6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   594ca:	e9c4 2304 	strd	r2, r3, [r4, #16]
		fp->flag |= FA_MODIFIED;
   594ce:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   594d2:	2001      	movs	r0, #1
   594d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   594d8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (res != FR_OK) ABORT(fs, res);
   594dc:	e7e6      	b.n	594ac <f_truncate+0x80>
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   594de:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   594e2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		fp->flag |= FA_MODIFIED;
   594e6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   594ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   594ee:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   594f2:	4628      	mov	r0, r5
   594f4:	b003      	add	sp, #12
   594f6:	bd30      	pop	{r4, r5, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   594f8:	2507      	movs	r5, #7
   594fa:	e7fa      	b.n	594f2 <f_truncate+0xc6>

000594fc <f_unlink>:
{
   594fc:	b570      	push	{r4, r5, r6, lr}
   594fe:	b0b8      	sub	sp, #224	; 0xe0
   59500:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);
   59502:	2202      	movs	r2, #2
   59504:	a903      	add	r1, sp, #12
   59506:	a801      	add	r0, sp, #4
   59508:	f7f4 f900 	bl	4d70c <mount_volume>
	if (res == FR_OK) {
   5950c:	b978      	cbnz	r0, 5952e <f_unlink+0x32>
		dj.obj.fs = fs;
   5950e:	9c03      	ldr	r4, [sp, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
   59510:	9901      	ldr	r1, [sp, #4]
   59512:	a810      	add	r0, sp, #64	; 0x40
		dj.obj.fs = fs;
   59514:	9410      	str	r4, [sp, #64]	; 0x40
		res = follow_path(&dj, path);		/* Follow the file path */
   59516:	f7f4 fdff 	bl	4e118 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
   5951a:	b940      	cbnz	r0, 5952e <f_unlink+0x32>
			if (dj.fn[NSFLAG] & NS_NONAME) {
   5951c:	f99d 308b 	ldrsb.w	r3, [sp, #139]	; 0x8b
   59520:	2b00      	cmp	r3, #0
   59522:	db44      	blt.n	595ae <f_unlink+0xb2>
				if (dj.obj.attr & AM_RDO) {
   59524:	f89d 6046 	ldrb.w	r6, [sp, #70]	; 0x46
   59528:	07f3      	lsls	r3, r6, #31
   5952a:	d502      	bpl.n	59532 <f_unlink+0x36>
{
   5952c:	2007      	movs	r0, #7
}
   5952e:	b038      	add	sp, #224	; 0xe0
   59530:	bd70      	pop	{r4, r5, r6, pc}
				if (fs->fs_type == FS_EXFAT) {
   59532:	7820      	ldrb	r0, [r4, #0]
				obj.fs = fs;
   59534:	9404      	str	r4, [sp, #16]
				if (fs->fs_type == FS_EXFAT) {
   59536:	2804      	cmp	r0, #4
   59538:	f006 0610 	and.w	r6, r6, #16
   5953c:	d126      	bne.n	5958c <f_unlink+0x90>
					init_alloc_info(fs, &obj);
   5953e:	4620      	mov	r0, r4
   59540:	a904      	add	r1, sp, #16
   59542:	f7fe fb6b 	bl	57c1c <init_alloc_info>
					dclst = obj.sclust;
   59546:	9d06      	ldr	r5, [sp, #24]
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
   59548:	b1b6      	cbz	r6, 59578 <f_unlink+0x7c>
							sdj.obj.objsize = obj.objsize;
   5954a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   5954e:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
							sdj.obj.stat = obj.stat;
   59552:	f89d 3017 	ldrb.w	r3, [sp, #23]
						sdj.obj.fs = fs;			/* Open the sub-directory */
   59556:	9424      	str	r4, [sp, #144]	; 0x90
						sdj.obj.sclust = dclst;
   59558:	9526      	str	r5, [sp, #152]	; 0x98
							sdj.obj.stat = obj.stat;
   5955a:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
						res = dir_sdi(&sdj, 0);
   5955e:	2100      	movs	r1, #0
   59560:	a824      	add	r0, sp, #144	; 0x90
   59562:	f7fe fdb7 	bl	580d4 <dir_sdi>
						if (res == FR_OK) {
   59566:	2800      	cmp	r0, #0
   59568:	d1e1      	bne.n	5952e <f_unlink+0x32>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
   5956a:	a824      	add	r0, sp, #144	; 0x90
   5956c:	f7f4 faa0 	bl	4dab0 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
   59570:	2800      	cmp	r0, #0
   59572:	d0db      	beq.n	5952c <f_unlink+0x30>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
   59574:	2804      	cmp	r0, #4
   59576:	d1da      	bne.n	5952e <f_unlink+0x32>
				res = dir_remove(&dj);			/* Remove the directory entry */
   59578:	a810      	add	r0, sp, #64	; 0x40
   5957a:	f7ff f91a 	bl	587b2 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
   5957e:	2800      	cmp	r0, #0
   59580:	d1d5      	bne.n	5952e <f_unlink+0x32>
   59582:	b965      	cbnz	r5, 5959e <f_unlink+0xa2>
				if (res == FR_OK) res = sync_fs(fs);
   59584:	4620      	mov	r0, r4
   59586:	f7fe ff44 	bl	58412 <sync_fs>
   5958a:	e7d0      	b.n	5952e <f_unlink+0x32>
					dclst = ld_clust(fs, dj.dir);
   5958c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   5958e:	f7ff f9d4 	bl	5893a <ld_clust.isra.0>
   59592:	4605      	mov	r5, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
   59594:	2e00      	cmp	r6, #0
   59596:	d0ef      	beq.n	59578 <f_unlink+0x7c>
						sdj.obj.fs = fs;			/* Open the sub-directory */
   59598:	9424      	str	r4, [sp, #144]	; 0x90
						sdj.obj.sclust = dclst;
   5959a:	9026      	str	r0, [sp, #152]	; 0x98
						if (fs->fs_type == FS_EXFAT) {
   5959c:	e7df      	b.n	5955e <f_unlink+0x62>
					res = remove_chain(&obj, dclst, 0);
   5959e:	4602      	mov	r2, r0
   595a0:	4629      	mov	r1, r5
   595a2:	a804      	add	r0, sp, #16
   595a4:	f7fe fe8d 	bl	582c2 <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
   595a8:	2800      	cmp	r0, #0
   595aa:	d1c0      	bne.n	5952e <f_unlink+0x32>
   595ac:	e7ea      	b.n	59584 <f_unlink+0x88>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
   595ae:	2006      	movs	r0, #6
   595b0:	e7bd      	b.n	5952e <f_unlink+0x32>

000595b2 <f_mkdir>:
{
   595b2:	b570      	push	{r4, r5, r6, lr}
   595b4:	b0a4      	sub	sp, #144	; 0x90
   595b6:	9001      	str	r0, [sp, #4]
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
   595b8:	2202      	movs	r2, #2
   595ba:	a903      	add	r1, sp, #12
   595bc:	a801      	add	r0, sp, #4
   595be:	f7f4 f8a5 	bl	4d70c <mount_volume>
   595c2:	4604      	mov	r4, r0
   595c4:	4605      	mov	r5, r0
	if (res == FR_OK) {
   595c6:	2800      	cmp	r0, #0
   595c8:	f040 8088 	bne.w	596dc <f_mkdir+0x12a>
		dj.obj.fs = fs;
   595cc:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
   595ce:	9901      	ldr	r1, [sp, #4]
   595d0:	a810      	add	r0, sp, #64	; 0x40
		dj.obj.fs = fs;
   595d2:	9310      	str	r3, [sp, #64]	; 0x40
		res = follow_path(&dj, path);			/* Follow the file path */
   595d4:	f7f4 fda0 	bl	4e118 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
   595d8:	4604      	mov	r4, r0
   595da:	2800      	cmp	r0, #0
   595dc:	f000 809d 	beq.w	5971a <f_mkdir+0x168>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
   595e0:	2804      	cmp	r0, #4
   595e2:	d17b      	bne.n	596dc <f_mkdir+0x12a>
			sobj.fs = fs;						/* New object id to create a new chain */
   595e4:	9b03      	ldr	r3, [sp, #12]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
   595e6:	4629      	mov	r1, r5
   595e8:	a804      	add	r0, sp, #16
			sobj.fs = fs;						/* New object id to create a new chain */
   595ea:	9304      	str	r3, [sp, #16]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
   595ec:	f7fe ff5c 	bl	584a8 <create_chain>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
   595f0:	4605      	mov	r5, r0
   595f2:	2800      	cmp	r0, #0
   595f4:	f000 8086 	beq.w	59704 <f_mkdir+0x152>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
   595f8:	2801      	cmp	r0, #1
   595fa:	f000 808a 	beq.w	59712 <f_mkdir+0x160>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
   595fe:	1c43      	adds	r3, r0, #1
   59600:	f000 8089 	beq.w	59716 <f_mkdir+0x164>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
   59604:	4601      	mov	r1, r0
   59606:	9803      	ldr	r0, [sp, #12]
   59608:	f7fe feda 	bl	583c0 <dir_clear>
   5960c:	4603      	mov	r3, r0
   5960e:	4604      	mov	r4, r0
				if (res == FR_OK) {
   59610:	2800      	cmp	r0, #0
   59612:	d178      	bne.n	59706 <f_mkdir+0x154>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
   59614:	9803      	ldr	r0, [sp, #12]
   59616:	7802      	ldrb	r2, [r0, #0]
   59618:	2a04      	cmp	r2, #4
   5961a:	d02d      	beq.n	59678 <f_mkdir+0xc6>
__ssp_bos_icheck3(memset, void *, int)
   5961c:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	*ptr++ = (BYTE)val; val >>= 8;
   59620:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
   59624:	f8c0 203d 	str.w	r2, [r0, #61]	; 0x3d
   59628:	f8c0 2041 	str.w	r2, [r0, #65]	; 0x41
   5962c:	f8a0 2045 	strh.w	r2, [r0, #69]	; 0x45
	*ptr++ = (BYTE)val; val >>= 8;
   59630:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
						fs->win[DIR_Name] = '.';
   59634:	222e      	movs	r2, #46	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
   59636:	2321      	movs	r3, #33	; 0x21
						fs->win[DIR_Name] = '.';
   59638:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
   5963c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
						fs->win[DIR_Attr] = AM_DIR;
   59640:	2210      	movs	r2, #16
	*ptr++ = (BYTE)val;
   59642:	2350      	movs	r3, #80	; 0x50
						fs->win[DIR_Attr] = AM_DIR;
   59644:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
	*ptr++ = (BYTE)val;
   59648:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
						st_clust(fs, fs->win, dcl);
   5964c:	462a      	mov	r2, r5
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
   5964e:	f100 013c 	add.w	r1, r0, #60	; 0x3c
						st_clust(fs, fs->win, dcl);
   59652:	f7fe fc48 	bl	57ee6 <st_clust>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
   59656:	f100 035c 	add.w	r3, r0, #92	; 0x5c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   5965a:	461a      	mov	r2, r3
   5965c:	f851 4b04 	ldr.w	r4, [r1], #4
   59660:	4299      	cmp	r1, r3
   59662:	f842 4b04 	str.w	r4, [r2], #4
   59666:	d1f9      	bne.n	5965c <f_mkdir+0xaa>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   59668:	232e      	movs	r3, #46	; 0x2e
						st_clust(fs, fs->win + SZDIRE, pcl);
   5966a:	9a12      	ldr	r2, [sp, #72]	; 0x48
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   5966c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
						st_clust(fs, fs->win + SZDIRE, pcl);
   59670:	f7fe fc39 	bl	57ee6 <st_clust>
						fs->wflag = 1;
   59674:	2301      	movs	r3, #1
   59676:	70c3      	strb	r3, [r0, #3]
					res = dir_register(&dj);	/* Register the object to the parent directoy */
   59678:	a810      	add	r0, sp, #64	; 0x40
   5967a:	f7f4 fb79 	bl	4dd70 <dir_register>
			if (res == FR_OK) {
   5967e:	4604      	mov	r4, r0
   59680:	2800      	cmp	r0, #0
   59682:	d140      	bne.n	59706 <f_mkdir+0x154>
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
   59684:	9e03      	ldr	r6, [sp, #12]
   59686:	2221      	movs	r2, #33	; 0x21
   59688:	7833      	ldrb	r3, [r6, #0]
   5968a:	2b04      	cmp	r3, #4
   5968c:	d129      	bne.n	596e2 <f_mkdir+0x130>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
   5968e:	6933      	ldr	r3, [r6, #16]
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
   59690:	4629      	mov	r1, r5
	*ptr++ = (BYTE)val; val >>= 8;
   59692:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
   59694:	2250      	movs	r2, #80	; 0x50
   59696:	73da      	strb	r2, [r3, #15]
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
   59698:	2203      	movs	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
   5969a:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
   5969c:	7358      	strb	r0, [r3, #13]
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
   5969e:	6930      	ldr	r0, [r6, #16]
   596a0:	3034      	adds	r0, #52	; 0x34
   596a2:	f7fe fa75 	bl	57b90 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* Directory size needs to be valid */
   596a6:	8971      	ldrh	r1, [r6, #10]
   596a8:	6930      	ldr	r0, [r6, #16]
   596aa:	0249      	lsls	r1, r1, #9
   596ac:	3038      	adds	r0, #56	; 0x38
   596ae:	f7fe fa6f 	bl	57b90 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
   596b2:	8971      	ldrh	r1, [r6, #10]
   596b4:	6930      	ldr	r0, [r6, #16]
   596b6:	0249      	lsls	r1, r1, #9
   596b8:	3028      	adds	r0, #40	; 0x28
   596ba:	f7fe fa69 	bl	57b90 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
   596be:	6933      	ldr	r3, [r6, #16]
					res = store_xdir(&dj);
   596c0:	a810      	add	r0, sp, #64	; 0x40
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
   596c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
   596c6:	2210      	movs	r2, #16
   596c8:	6933      	ldr	r3, [r6, #16]
   596ca:	711a      	strb	r2, [r3, #4]
					res = store_xdir(&dj);
   596cc:	f7ff f906 	bl	588dc <store_xdir>
				if (res == FR_OK) {
   596d0:	4604      	mov	r4, r0
   596d2:	b918      	cbnz	r0, 596dc <f_mkdir+0x12a>
					res = sync_fs(fs);
   596d4:	9803      	ldr	r0, [sp, #12]
   596d6:	f7fe fe9c 	bl	58412 <sync_fs>
   596da:	4604      	mov	r4, r0
}
   596dc:	4620      	mov	r0, r4
   596de:	b024      	add	sp, #144	; 0x90
   596e0:	bd70      	pop	{r4, r5, r6, pc}
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
   596e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
	*ptr++ = (BYTE)val; val >>= 8;
   596e4:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
   596e6:	2250      	movs	r2, #80	; 0x50
	*ptr++ = (BYTE)val; val >>= 8;
   596e8:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
   596ea:	75d8      	strb	r0, [r3, #23]
	*ptr++ = (BYTE)val;
   596ec:	765a      	strb	r2, [r3, #25]
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
   596ee:	4630      	mov	r0, r6
   596f0:	462a      	mov	r2, r5
   596f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   596f4:	f7fe fbf7 	bl	57ee6 <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
   596f8:	2210      	movs	r2, #16
   596fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   596fc:	72da      	strb	r2, [r3, #11]
					fs->wflag = 1;
   596fe:	2301      	movs	r3, #1
   59700:	70f3      	strb	r3, [r6, #3]
				if (res == FR_OK) {
   59702:	e7e7      	b.n	596d4 <f_mkdir+0x122>
   59704:	2407      	movs	r4, #7
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
   59706:	2200      	movs	r2, #0
   59708:	4629      	mov	r1, r5
   5970a:	a804      	add	r0, sp, #16
   5970c:	f7fe fdd9 	bl	582c2 <remove_chain>
   59710:	e7e4      	b.n	596dc <f_mkdir+0x12a>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
   59712:	2402      	movs	r4, #2
   59714:	e7f7      	b.n	59706 <f_mkdir+0x154>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
   59716:	2401      	movs	r4, #1
   59718:	e7f5      	b.n	59706 <f_mkdir+0x154>
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
   5971a:	2408      	movs	r4, #8
   5971c:	e7de      	b.n	596dc <f_mkdir+0x12a>

0005971e <f_rename>:
{
   5971e:	b5f0      	push	{r4, r5, r6, r7, lr}
   59720:	b0bd      	sub	sp, #244	; 0xf4
   59722:	e9cd 1000 	strd	r1, r0, [sp]
	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
   59726:	4668      	mov	r0, sp
   59728:	f7f3 ff2e 	bl	4d588 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
   5972c:	2202      	movs	r2, #2
   5972e:	a903      	add	r1, sp, #12
   59730:	a801      	add	r0, sp, #4
   59732:	f7f3 ffeb 	bl	4d70c <mount_volume>
	if (res == FR_OK) {
   59736:	bb68      	cbnz	r0, 59794 <f_rename+0x76>
		djo.obj.fs = fs;
   59738:	9c03      	ldr	r4, [sp, #12]
		res = follow_path(&djo, path_old);			/* Check old object */
   5973a:	ad14      	add	r5, sp, #80	; 0x50
   5973c:	4628      	mov	r0, r5
   5973e:	9901      	ldr	r1, [sp, #4]
		djo.obj.fs = fs;
   59740:	9414      	str	r4, [sp, #80]	; 0x50
		res = follow_path(&djo, path_old);			/* Check old object */
   59742:	f7f4 fce9 	bl	4e118 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   59746:	bb28      	cbnz	r0, 59794 <f_rename+0x76>
   59748:	f89d 309b 	ldrb.w	r3, [sp, #155]	; 0x9b
   5974c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
   59750:	f040 80c3 	bne.w	598da <f_rename+0x1bc>
			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
   59754:	7823      	ldrb	r3, [r4, #0]
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   59756:	9f00      	ldr	r7, [sp, #0]
			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
   59758:	2b04      	cmp	r3, #4
   5975a:	d15a      	bne.n	59812 <f_rename+0xf4>
				memcpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
   5975c:	6923      	ldr	r3, [r4, #16]
   5975e:	ae04      	add	r6, sp, #16
   59760:	f103 0c40 	add.w	ip, r3, #64	; 0x40
   59764:	4632      	mov	r2, r6
   59766:	6818      	ldr	r0, [r3, #0]
   59768:	6859      	ldr	r1, [r3, #4]
   5976a:	3308      	adds	r3, #8
   5976c:	c203      	stmia	r2!, {r0, r1}
   5976e:	4563      	cmp	r3, ip
   59770:	4616      	mov	r6, r2
   59772:	d1f7      	bne.n	59764 <f_rename+0x46>
				memcpy(&djn, &djo, sizeof djo);
   59774:	4629      	mov	r1, r5
   59776:	2250      	movs	r2, #80	; 0x50
   59778:	a828      	add	r0, sp, #160	; 0xa0
   5977a:	f001 fbb3 	bl	5aee4 <memcpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   5977e:	4639      	mov	r1, r7
   59780:	a828      	add	r0, sp, #160	; 0xa0
   59782:	f7f4 fcc9 	bl	4e118 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   59786:	2800      	cmp	r0, #0
   59788:	d140      	bne.n	5980c <f_rename+0xee>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   5978a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   5978c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   5978e:	429a      	cmp	r2, r3
   59790:	d002      	beq.n	59798 <f_rename+0x7a>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   59792:	2008      	movs	r0, #8
}
   59794:	b03d      	add	sp, #244	; 0xf4
   59796:	bdf0      	pop	{r4, r5, r6, r7, pc}
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   59798:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   5979a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   5979c:	429a      	cmp	r2, r3
   5979e:	d1f8      	bne.n	59792 <f_rename+0x74>
					res = dir_register(&djn);			/* Register the new entry */
   597a0:	a828      	add	r0, sp, #160	; 0xa0
   597a2:	f7f4 fae5 	bl	4dd70 <dir_register>
					if (res == FR_OK) {
   597a6:	2800      	cmp	r0, #0
   597a8:	d1f4      	bne.n	59794 <f_rename+0x76>
						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
   597aa:	6923      	ldr	r3, [r4, #16]
   597ac:	af04      	add	r7, sp, #16
   597ae:	f893 e001 	ldrb.w	lr, [r3, #1]
   597b2:	f893 c023 	ldrb.w	ip, [r3, #35]	; 0x23
						nh = ld_word(fs->dirbuf + XDIR_NameHash);
   597b6:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
   597b8:	463a      	mov	r2, r7
   597ba:	ca03      	ldmia	r2!, {r0, r1}
   597bc:	42aa      	cmp	r2, r5
   597be:	6018      	str	r0, [r3, #0]
   597c0:	6059      	str	r1, [r3, #4]
   597c2:	4617      	mov	r7, r2
   597c4:	f103 0308 	add.w	r3, r3, #8
   597c8:	d1f6      	bne.n	597b8 <f_rename+0x9a>
						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
   597ca:	6923      	ldr	r3, [r4, #16]
						res = store_xdir(&djn);
   597cc:	a828      	add	r0, sp, #160	; 0xa0
						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
   597ce:	f883 e001 	strb.w	lr, [r3, #1]
   597d2:	6923      	ldr	r3, [r4, #16]
   597d4:	f883 c023 	strb.w	ip, [r3, #35]	; 0x23
						st_word(fs->dirbuf + XDIR_NameHash, nh);
   597d8:	6923      	ldr	r3, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
   597da:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
   597de:	0a36      	lsrs	r6, r6, #8
	*ptr++ = (BYTE)val;
   597e0:	f883 6025 	strb.w	r6, [r3, #37]	; 0x25
						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   597e4:	6922      	ldr	r2, [r4, #16]
   597e6:	7913      	ldrb	r3, [r2, #4]
   597e8:	06d9      	lsls	r1, r3, #27
   597ea:	bf5c      	itt	pl
   597ec:	f043 0320 	orrpl.w	r3, r3, #32
   597f0:	7113      	strbpl	r3, [r2, #4]
						res = store_xdir(&djn);
   597f2:	f7ff f873 	bl	588dc <store_xdir>
			if (res == FR_OK) {
   597f6:	2800      	cmp	r0, #0
   597f8:	d1cc      	bne.n	59794 <f_rename+0x76>
				res = dir_remove(&djo);		/* Remove old entry */
   597fa:	4628      	mov	r0, r5
   597fc:	f7fe ffd9 	bl	587b2 <dir_remove>
				if (res == FR_OK) {
   59800:	2800      	cmp	r0, #0
   59802:	d1c7      	bne.n	59794 <f_rename+0x76>
					res = sync_fs(fs);
   59804:	4620      	mov	r0, r4
   59806:	f7fe fe04 	bl	58412 <sync_fs>
   5980a:	e7c3      	b.n	59794 <f_rename+0x76>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   5980c:	2804      	cmp	r0, #4
   5980e:	d1c1      	bne.n	59794 <f_rename+0x76>
   59810:	e7c6      	b.n	597a0 <f_rename+0x82>
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
   59812:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   59814:	ab04      	add	r3, sp, #16
   59816:	f102 0c20 	add.w	ip, r2, #32
   5981a:	461e      	mov	r6, r3
   5981c:	6810      	ldr	r0, [r2, #0]
   5981e:	6851      	ldr	r1, [r2, #4]
   59820:	3208      	adds	r2, #8
   59822:	c603      	stmia	r6!, {r0, r1}
   59824:	4562      	cmp	r2, ip
   59826:	4633      	mov	r3, r6
   59828:	d1f7      	bne.n	5981a <f_rename+0xfc>
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
   5982a:	4629      	mov	r1, r5
   5982c:	2250      	movs	r2, #80	; 0x50
   5982e:	a828      	add	r0, sp, #160	; 0xa0
   59830:	f001 fb58 	bl	5aee4 <memcpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   59834:	4639      	mov	r1, r7
   59836:	a828      	add	r0, sp, #160	; 0xa0
   59838:	f7f4 fc6e 	bl	4e118 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   5983c:	2800      	cmp	r0, #0
   5983e:	d148      	bne.n	598d2 <f_rename+0x1b4>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   59840:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   59842:	9b16      	ldr	r3, [sp, #88]	; 0x58
   59844:	429a      	cmp	r2, r3
   59846:	d1a4      	bne.n	59792 <f_rename+0x74>
   59848:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   5984a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   5984c:	429a      	cmp	r2, r3
   5984e:	d1a0      	bne.n	59792 <f_rename+0x74>
					res = dir_register(&djn);			/* Register the new entry */
   59850:	a828      	add	r0, sp, #160	; 0xa0
   59852:	f7f4 fa8d 	bl	4dd70 <dir_register>
					if (res == FR_OK) {
   59856:	2800      	cmp	r0, #0
   59858:	d19c      	bne.n	59794 <f_rename+0x76>
						dir = djn.dir;					/* Copy directory entry of the object except name */
   5985a:	9937      	ldr	r1, [sp, #220]	; 0xdc
   5985c:	f10d 031d 	add.w	r3, sp, #29
   59860:	f101 020d 	add.w	r2, r1, #13
   59864:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
   59868:	f853 6b04 	ldr.w	r6, [r3], #4
   5986c:	4283      	cmp	r3, r0
   5986e:	f842 6b04 	str.w	r6, [r2], #4
   59872:	d1f9      	bne.n	59868 <f_rename+0x14a>
						fs->wflag = 1;
   59874:	2601      	movs	r6, #1
   59876:	8818      	ldrh	r0, [r3, #0]
   59878:	8010      	strh	r0, [r2, #0]
   5987a:	789b      	ldrb	r3, [r3, #2]
   5987c:	7093      	strb	r3, [r2, #2]
						dir[DIR_Attr] = buf[DIR_Attr];
   5987e:	f89d 301b 	ldrb.w	r3, [sp, #27]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   59882:	06da      	lsls	r2, r3, #27
   59884:	bf58      	it	pl
   59886:	f043 0320 	orrpl.w	r3, r3, #32
						dir[DIR_Attr] = buf[DIR_Attr];
   5988a:	72cb      	strb	r3, [r1, #11]
						fs->wflag = 1;
   5988c:	70e6      	strb	r6, [r4, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
   5988e:	7acb      	ldrb	r3, [r1, #11]
   59890:	06db      	lsls	r3, r3, #27
   59892:	d5b2      	bpl.n	597fa <f_rename+0xdc>
   59894:	9a16      	ldr	r2, [sp, #88]	; 0x58
   59896:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   59898:	429a      	cmp	r2, r3
   5989a:	d0ae      	beq.n	597fa <f_rename+0xdc>
							sect = clst2sect(fs, ld_clust(fs, dir));
   5989c:	7820      	ldrb	r0, [r4, #0]
   5989e:	f7ff f84c 	bl	5893a <ld_clust.isra.0>
   598a2:	4601      	mov	r1, r0
   598a4:	4620      	mov	r0, r4
   598a6:	f7fe f98a 	bl	57bbe <clst2sect>
							if (sect == 0) {
   598aa:	4601      	mov	r1, r0
   598ac:	b1b8      	cbz	r0, 598de <f_rename+0x1c0>
								res = move_window(fs, sect);
   598ae:	4620      	mov	r0, r4
   598b0:	f7fe fb25 	bl	57efe <move_window>
								if (res == FR_OK && dir[1] == '.') {
   598b4:	2800      	cmp	r0, #0
   598b6:	f47f af6d 	bne.w	59794 <f_rename+0x76>
   598ba:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   598be:	2b2e      	cmp	r3, #46	; 0x2e
   598c0:	d19b      	bne.n	597fa <f_rename+0xdc>
									st_clust(fs, dir, djn.obj.sclust);
   598c2:	4620      	mov	r0, r4
   598c4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   598c6:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   598ca:	f7fe fb0c 	bl	57ee6 <st_clust>
									fs->wflag = 1;
   598ce:	70e6      	strb	r6, [r4, #3]
			if (res == FR_OK) {
   598d0:	e793      	b.n	597fa <f_rename+0xdc>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   598d2:	2804      	cmp	r0, #4
   598d4:	f47f af5e 	bne.w	59794 <f_rename+0x76>
   598d8:	e7ba      	b.n	59850 <f_rename+0x132>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   598da:	2006      	movs	r0, #6
   598dc:	e75a      	b.n	59794 <f_rename+0x76>
								res = FR_INT_ERR;
   598de:	2002      	movs	r0, #2
   598e0:	e758      	b.n	59794 <f_rename+0x76>

000598e2 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   598e2:	4700      	bx	r0

000598e4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   598e4:	f001 ba1e 	b.w	5ad24 <z_impl_k_busy_wait>

000598e8 <nrfx_clock_stop>:
    clock_stop(domain);
   598e8:	f7f5 bd38 	b.w	4f35c <clock_stop>

000598ec <set_ss_pin_state>:
{
   598ec:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   598ee:	7fc0      	ldrb	r0, [r0, #31]
   598f0:	28ff      	cmp	r0, #255	; 0xff
   598f2:	d006      	beq.n	59902 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
   598f4:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
   598f6:	079b      	lsls	r3, r3, #30
   598f8:	bf58      	it	pl
   598fa:	f081 0101 	eorpl.w	r1, r1, #1
   598fe:	f7f6 ba03 	b.w	4fd08 <nrf_gpio_pin_write>
}
   59902:	4770      	bx	lr

00059904 <rpc_transport_ipc_rx_data_suspend>:
   59904:	2004      	movs	r0, #4
   59906:	f7f6 b9cb 	b.w	4fca0 <nrfx_ipc_receive_event_disable>

0005990a <rpc_transport_ipc_rx_data_resume>:
   5990a:	2004      	movs	r0, #4
   5990c:	f7f6 b9c0 	b.w	4fc90 <nrfx_ipc_receive_event_enable>

00059910 <rpc_transport_ipc_shutdown>:
   59910:	f7f6 b990 	b.w	4fc34 <nrfx_ipc_uninit>

00059914 <rpc_client_msg_from_rpc_msg_get>:
   59914:	3008      	adds	r0, #8
   59916:	4770      	bx	lr

00059918 <rpc_client_msg_alloc>:
   59918:	b570      	push	{r4, r5, r6, lr}
   5991a:	4606      	mov	r6, r0
   5991c:	b130      	cbz	r0, 5992c <rpc_client_msg_alloc+0x14>
   5991e:	f7f0 f9d1 	bl	49cc4 <nrf_modem_os_shm_tx_alloc>
   59922:	4605      	mov	r5, r0
   59924:	b918      	cbnz	r0, 5992e <rpc_client_msg_alloc+0x16>
   59926:	2400      	movs	r4, #0
   59928:	4620      	mov	r0, r4
   5992a:	bd70      	pop	{r4, r5, r6, pc}
   5992c:	4605      	mov	r5, r0
   5992e:	f7f6 fbdb 	bl	500e8 <rpc_transport_msg_alloc>
   59932:	4604      	mov	r4, r0
   59934:	b938      	cbnz	r0, 59946 <rpc_client_msg_alloc+0x2e>
   59936:	2d00      	cmp	r5, #0
   59938:	d0f5      	beq.n	59926 <rpc_client_msg_alloc+0xe>
   5993a:	4628      	mov	r0, r5
   5993c:	f7f0 f9ca 	bl	49cd4 <nrf_modem_os_shm_tx_free>
   59940:	f7f0 f99c 	bl	49c7c <nrf_modem_os_event_notify>
   59944:	e7f0      	b.n	59928 <rpc_client_msg_alloc+0x10>
   59946:	60c6      	str	r6, [r0, #12]
   59948:	f844 5f08 	str.w	r5, [r4, #8]!
   5994c:	e7ec      	b.n	59928 <rpc_client_msg_alloc+0x10>

0005994e <rpc_client_msg_send>:
   5994e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   59952:	4610      	mov	r0, r2
   59954:	f840 1d08 	str.w	r1, [r0, #-8]!
   59958:	f7f6 bbd8 	b.w	5010c <rpc_transport_msg_send>

0005995c <rpc_client_msg_free>:
   5995c:	3808      	subs	r0, #8
   5995e:	f7f6 bbc9 	b.w	500f4 <rpc_transport_msg_free>

00059962 <rpc_client_msg_data_rx_free>:
   59962:	f7f6 bbcd 	b.w	50100 <rpc_transport_msg_data_rx_free>

00059966 <rpc_client_msg_data_tx_alloc>:
   59966:	f7f0 b9ad 	b.w	49cc4 <nrf_modem_os_shm_tx_alloc>

0005996a <rpc_client_msg_data_tx_free>:
   5996a:	b508      	push	{r3, lr}
   5996c:	f7f0 f9b2 	bl	49cd4 <nrf_modem_os_shm_tx_free>
   59970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   59974:	f7f0 b982 	b.w	49c7c <nrf_modem_os_event_notify>

00059978 <sock_has_pkt>:
   59978:	6840      	ldr	r0, [r0, #4]
   5997a:	3800      	subs	r0, #0
   5997c:	bf18      	it	ne
   5997e:	2001      	movne	r0, #1
   59980:	4770      	bx	lr

00059982 <sock_pkt_append>:
   59982:	2300      	movs	r3, #0
   59984:	600b      	str	r3, [r1, #0]
   59986:	6883      	ldr	r3, [r0, #8]
   59988:	b913      	cbnz	r3, 59990 <sock_pkt_append+0xe>
   5998a:	e9c0 1101 	strd	r1, r1, [r0, #4]
   5998e:	4770      	bx	lr
   59990:	6019      	str	r1, [r3, #0]
   59992:	6081      	str	r1, [r0, #8]
   59994:	4770      	bx	lr

00059996 <sock_pkt_remove>:
   59996:	b538      	push	{r3, r4, r5, lr}
   59998:	4605      	mov	r5, r0
   5999a:	460c      	mov	r4, r1
   5999c:	f7f6 fbc2 	bl	50124 <rpc_transport_rx_data_suspend>
   599a0:	68aa      	ldr	r2, [r5, #8]
   599a2:	6823      	ldr	r3, [r4, #0]
   599a4:	4294      	cmp	r4, r2
   599a6:	606b      	str	r3, [r5, #4]
   599a8:	bf08      	it	eq
   599aa:	60ab      	streq	r3, [r5, #8]
   599ac:	2300      	movs	r3, #0
   599ae:	4620      	mov	r0, r4
   599b0:	6023      	str	r3, [r4, #0]
   599b2:	f000 f8fa 	bl	59baa <pkt_free>
   599b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   599ba:	f7f6 bbb9 	b.w	50130 <rpc_transport_rx_data_resume>

000599be <sock_pkt_peek_head>:
   599be:	6840      	ldr	r0, [r0, #4]
   599c0:	4770      	bx	lr

000599c2 <sock_is_stream>:
   599c2:	6900      	ldr	r0, [r0, #16]
   599c4:	1e43      	subs	r3, r0, #1
   599c6:	4258      	negs	r0, r3
   599c8:	4158      	adcs	r0, r3
   599ca:	4770      	bx	lr

000599cc <sock_is_datagram>:
   599cc:	6900      	ldr	r0, [r0, #16]
   599ce:	1e83      	subs	r3, r0, #2
   599d0:	4258      	negs	r0, r3
   599d2:	4158      	adcs	r0, r3
   599d4:	4770      	bx	lr

000599d6 <sock_is_raw>:
   599d6:	6900      	ldr	r0, [r0, #16]
   599d8:	1ec3      	subs	r3, r0, #3
   599da:	4258      	negs	r0, r3
   599dc:	4158      	adcs	r0, r3
   599de:	4770      	bx	lr

000599e0 <sock_proto_is_secure>:
   599e0:	6940      	ldr	r0, [r0, #20]
   599e2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   599e6:	d005      	beq.n	599f4 <sock_proto_is_secure+0x14>
   599e8:	f240 1311 	movw	r3, #273	; 0x111
   599ec:	1ac3      	subs	r3, r0, r3
   599ee:	4258      	negs	r0, r3
   599f0:	4158      	adcs	r0, r3
   599f2:	4770      	bx	lr
   599f4:	2001      	movs	r0, #1
   599f6:	4770      	bx	lr

000599f8 <sock_is_connecting>:
   599f8:	7f00      	ldrb	r0, [r0, #28]
   599fa:	f3c0 0080 	ubfx	r0, r0, #2, #1
   599fe:	4770      	bx	lr

00059a00 <sock_is_connected>:
   59a00:	7f00      	ldrb	r0, [r0, #28]
   59a02:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   59a06:	4770      	bx	lr

00059a08 <sock_is_attaching>:
   59a08:	7f00      	ldrb	r0, [r0, #28]
   59a0a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   59a0e:	4770      	bx	lr

00059a10 <sock_is_nonblock>:
   59a10:	6b40      	ldr	r0, [r0, #52]	; 0x34
   59a12:	f000 0001 	and.w	r0, r0, #1
   59a16:	4770      	bx	lr

00059a18 <sock_is_local_closed>:
   59a18:	7f00      	ldrb	r0, [r0, #28]
   59a1a:	f000 0001 	and.w	r0, r0, #1
   59a1e:	4770      	bx	lr

00059a20 <sock_is_closed>:
   59a20:	7f00      	ldrb	r0, [r0, #28]
   59a22:	f3c0 0040 	ubfx	r0, r0, #1, #1
   59a26:	4770      	bx	lr

00059a28 <sock_has_error>:
   59a28:	6983      	ldr	r3, [r0, #24]
   59a2a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   59a2e:	bf14      	ite	ne
   59a30:	2001      	movne	r0, #1
   59a32:	2000      	moveq	r0, #0
   59a34:	4770      	bx	lr

00059a36 <sock_has_flow_control>:
   59a36:	7f00      	ldrb	r0, [r0, #28]
   59a38:	f3c0 1080 	ubfx	r0, r0, #6, #1
   59a3c:	4770      	bx	lr

00059a3e <sock_can_read>:
   59a3e:	6840      	ldr	r0, [r0, #4]
   59a40:	3800      	subs	r0, #0
   59a42:	bf18      	it	ne
   59a44:	2001      	movne	r0, #1
   59a46:	4770      	bx	lr

00059a48 <sock_can_accept>:
   59a48:	7f40      	ldrb	r0, [r0, #29]
   59a4a:	3800      	subs	r0, #0
   59a4c:	bf18      	it	ne
   59a4e:	2001      	movne	r0, #1
   59a50:	4770      	bx	lr

00059a52 <sock_can_send>:
   59a52:	b508      	push	{r3, lr}
   59a54:	6903      	ldr	r3, [r0, #16]
   59a56:	4601      	mov	r1, r0
   59a58:	2b01      	cmp	r3, #1
   59a5a:	bf0a      	itet	eq
   59a5c:	7f02      	ldrbeq	r2, [r0, #28]
   59a5e:	2201      	movne	r2, #1
   59a60:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
   59a64:	f7ff ffbc 	bl	599e0 <sock_proto_is_secure>
   59a68:	b170      	cbz	r0, 59a88 <sock_can_send+0x36>
   59a6a:	7f08      	ldrb	r0, [r1, #28]
   59a6c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   59a70:	b162      	cbz	r2, 59a8c <sock_can_send+0x3a>
   59a72:	b140      	cbz	r0, 59a86 <sock_can_send+0x34>
   59a74:	7f0a      	ldrb	r2, [r1, #28]
   59a76:	0793      	lsls	r3, r2, #30
   59a78:	bf4f      	iteee	mi
   59a7a:	2000      	movmi	r0, #0
   59a7c:	f3c2 1280 	ubfxpl	r2, r2, #6, #1
   59a80:	f082 0201 	eorpl.w	r2, r2, #1
   59a84:	b2d0      	uxtbpl	r0, r2
   59a86:	bd08      	pop	{r3, pc}
   59a88:	2a00      	cmp	r2, #0
   59a8a:	d1f3      	bne.n	59a74 <sock_can_send+0x22>
   59a8c:	4610      	mov	r0, r2
   59a8e:	e7fa      	b.n	59a86 <sock_can_send+0x34>

00059a90 <sock_rcvtimeo_ms_get>:
   59a90:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   59a94:	ea53 0102 	orrs.w	r1, r3, r2
   59a98:	d009      	beq.n	59aae <sock_rcvtimeo_ms_get+0x1e>
   59a9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   59a9e:	fbb3 f0f1 	udiv	r0, r3, r1
   59aa2:	fb01 0002 	mla	r0, r1, r2, r0
   59aa6:	2801      	cmp	r0, #1
   59aa8:	bfb8      	it	lt
   59aaa:	2001      	movlt	r0, #1
   59aac:	4770      	bx	lr
   59aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   59ab2:	4770      	bx	lr

00059ab4 <sock_sndtimeo_ms_get>:
   59ab4:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   59ab8:	ea53 0102 	orrs.w	r1, r3, r2
   59abc:	d009      	beq.n	59ad2 <sock_sndtimeo_ms_get+0x1e>
   59abe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   59ac2:	fbb3 f0f1 	udiv	r0, r3, r1
   59ac6:	fb01 0002 	mla	r0, r1, r2, r0
   59aca:	2801      	cmp	r0, #1
   59acc:	bfb8      	it	lt
   59ace:	2001      	movlt	r0, #1
   59ad0:	4770      	bx	lr
   59ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   59ad6:	4770      	bx	lr

00059ad8 <sock_family_is_valid>:
   59ad8:	3801      	subs	r0, #1
   59ada:	2802      	cmp	r0, #2
   59adc:	bf8c      	ite	hi
   59ade:	2000      	movhi	r0, #0
   59ae0:	2001      	movls	r0, #1
   59ae2:	4770      	bx	lr

00059ae4 <sock_type_is_valid>:
   59ae4:	3801      	subs	r0, #1
   59ae6:	2802      	cmp	r0, #2
   59ae8:	bf8c      	ite	hi
   59aea:	2000      	movhi	r0, #0
   59aec:	2001      	movls	r0, #1
   59aee:	4770      	bx	lr

00059af0 <sock_proto_is_valid>:
   59af0:	b150      	cbz	r0, 59b08 <sock_proto_is_valid+0x18>
   59af2:	2806      	cmp	r0, #6
   59af4:	d008      	beq.n	59b08 <sock_proto_is_valid+0x18>
   59af6:	f420 7380 	bic.w	r3, r0, #256	; 0x100
   59afa:	2b11      	cmp	r3, #17
   59afc:	d004      	beq.n	59b08 <sock_proto_is_valid+0x18>
   59afe:	f5a0 7381 	sub.w	r3, r0, #258	; 0x102
   59b02:	4258      	negs	r0, r3
   59b04:	4158      	adcs	r0, r3
   59b06:	4770      	bx	lr
   59b08:	2001      	movs	r0, #1
   59b0a:	4770      	bx	lr

00059b0c <sock_proto_supports_type>:
   59b0c:	2903      	cmp	r1, #3
   59b0e:	d015      	beq.n	59b3c <sock_proto_supports_type+0x30>
   59b10:	2811      	cmp	r0, #17
   59b12:	d00c      	beq.n	59b2e <sock_proto_supports_type+0x22>
   59b14:	dc04      	bgt.n	59b20 <sock_proto_supports_type+0x14>
   59b16:	b188      	cbz	r0, 59b3c <sock_proto_supports_type+0x30>
   59b18:	2806      	cmp	r0, #6
   59b1a:	d00a      	beq.n	59b32 <sock_proto_supports_type+0x26>
   59b1c:	2000      	movs	r0, #0
   59b1e:	4770      	bx	lr
   59b20:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   59b24:	d005      	beq.n	59b32 <sock_proto_supports_type+0x26>
   59b26:	f240 1311 	movw	r3, #273	; 0x111
   59b2a:	4298      	cmp	r0, r3
   59b2c:	d1f6      	bne.n	59b1c <sock_proto_supports_type+0x10>
   59b2e:	2902      	cmp	r1, #2
   59b30:	e000      	b.n	59b34 <sock_proto_supports_type+0x28>
   59b32:	2901      	cmp	r1, #1
   59b34:	bf14      	ite	ne
   59b36:	2000      	movne	r0, #0
   59b38:	2001      	moveq	r0, #1
   59b3a:	4770      	bx	lr
   59b3c:	2001      	movs	r0, #1
   59b3e:	4770      	bx	lr

00059b40 <sock_sockaddr_len_is_valid>:
   59b40:	6843      	ldr	r3, [r0, #4]
   59b42:	2b01      	cmp	r3, #1
   59b44:	d003      	beq.n	59b4e <sock_sockaddr_len_is_valid+0xe>
   59b46:	2b02      	cmp	r3, #2
   59b48:	d009      	beq.n	59b5e <sock_sockaddr_len_is_valid+0x1e>
   59b4a:	2000      	movs	r0, #0
   59b4c:	4770      	bx	lr
   59b4e:	7803      	ldrb	r3, [r0, #0]
   59b50:	2b10      	cmp	r3, #16
   59b52:	d1fa      	bne.n	59b4a <sock_sockaddr_len_is_valid+0xa>
   59b54:	2910      	cmp	r1, #16
   59b56:	bf14      	ite	ne
   59b58:	2000      	movne	r0, #0
   59b5a:	2001      	moveq	r0, #1
   59b5c:	4770      	bx	lr
   59b5e:	7803      	ldrb	r3, [r0, #0]
   59b60:	2b24      	cmp	r3, #36	; 0x24
   59b62:	d1f2      	bne.n	59b4a <sock_sockaddr_len_is_valid+0xa>
   59b64:	2924      	cmp	r1, #36	; 0x24
   59b66:	e7f6      	b.n	59b56 <sock_sockaddr_len_is_valid+0x16>

00059b68 <sock_sockaddr_fam_is_valid>:
   59b68:	68c3      	ldr	r3, [r0, #12]
   59b6a:	2b01      	cmp	r3, #1
   59b6c:	d003      	beq.n	59b76 <sock_sockaddr_fam_is_valid+0xe>
   59b6e:	2b02      	cmp	r3, #2
   59b70:	d007      	beq.n	59b82 <sock_sockaddr_fam_is_valid+0x1a>
   59b72:	2001      	movs	r0, #1
   59b74:	4770      	bx	lr
   59b76:	6848      	ldr	r0, [r1, #4]
   59b78:	2801      	cmp	r0, #1
   59b7a:	bf14      	ite	ne
   59b7c:	2000      	movne	r0, #0
   59b7e:	2001      	moveq	r0, #1
   59b80:	4770      	bx	lr
   59b82:	6848      	ldr	r0, [r1, #4]
   59b84:	2802      	cmp	r0, #2
   59b86:	e7f8      	b.n	59b7a <sock_sockaddr_fam_is_valid+0x12>

00059b88 <pkt_has_next>:
   59b88:	b100      	cbz	r0, 59b8c <pkt_has_next+0x4>
   59b8a:	6800      	ldr	r0, [r0, #0]
   59b8c:	3800      	subs	r0, #0
   59b8e:	bf18      	it	ne
   59b90:	2001      	movne	r0, #1
   59b92:	4770      	bx	lr

00059b94 <pkt_peek_next>:
   59b94:	b100      	cbz	r0, 59b98 <pkt_peek_next+0x4>
   59b96:	6800      	ldr	r0, [r0, #0]
   59b98:	4770      	bx	lr

00059b9a <pkt_bytes_get>:
   59b9a:	8943      	ldrh	r3, [r0, #10]
   59b9c:	6840      	ldr	r0, [r0, #4]
   59b9e:	4418      	add	r0, r3
   59ba0:	4770      	bx	lr

00059ba2 <pkt_bytes_left>:
   59ba2:	8902      	ldrh	r2, [r0, #8]
   59ba4:	8940      	ldrh	r0, [r0, #10]
   59ba6:	1a10      	subs	r0, r2, r0
   59ba8:	4770      	bx	lr

00059baa <pkt_free>:
   59baa:	b510      	push	{r4, lr}
   59bac:	4604      	mov	r4, r0
   59bae:	6840      	ldr	r0, [r0, #4]
   59bb0:	f7ff fed7 	bl	59962 <rpc_client_msg_data_rx_free>
   59bb4:	68e0      	ldr	r0, [r4, #12]
   59bb6:	b108      	cbz	r0, 59bbc <pkt_free+0x12>
   59bb8:	f7f0 f87e 	bl	49cb8 <nrf_modem_os_free>
   59bbc:	4620      	mov	r0, r4
   59bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   59bc2:	f7f0 b879 	b.w	49cb8 <nrf_modem_os_free>

00059bc6 <pkt_flush>:
   59bc6:	b510      	push	{r4, lr}
   59bc8:	4604      	mov	r4, r0
   59bca:	6820      	ldr	r0, [r4, #0]
   59bcc:	b900      	cbnz	r0, 59bd0 <pkt_flush+0xa>
   59bce:	bd10      	pop	{r4, pc}
   59bd0:	6862      	ldr	r2, [r4, #4]
   59bd2:	6803      	ldr	r3, [r0, #0]
   59bd4:	4290      	cmp	r0, r2
   59bd6:	6023      	str	r3, [r4, #0]
   59bd8:	bf08      	it	eq
   59bda:	6063      	streq	r3, [r4, #4]
   59bdc:	f7ff ffe5 	bl	59baa <pkt_free>
   59be0:	e7f3      	b.n	59bca <pkt_flush+0x4>

00059be2 <on_conf_dnssrv_res>:
   59be2:	f000 bd54 	b.w	5a68e <res_forward>

00059be6 <nrf_freeaddrinfo>:
   59be6:	b510      	push	{r4, lr}
   59be8:	4604      	mov	r4, r0
   59bea:	b160      	cbz	r0, 59c06 <nrf_freeaddrinfo+0x20>
   59bec:	6940      	ldr	r0, [r0, #20]
   59bee:	b108      	cbz	r0, 59bf4 <nrf_freeaddrinfo+0xe>
   59bf0:	f7f0 f862 	bl	49cb8 <nrf_modem_os_free>
   59bf4:	69a0      	ldr	r0, [r4, #24]
   59bf6:	b108      	cbz	r0, 59bfc <nrf_freeaddrinfo+0x16>
   59bf8:	f7f0 f85e 	bl	49cb8 <nrf_modem_os_free>
   59bfc:	4620      	mov	r0, r4
   59bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   59c02:	f7f0 b859 	b.w	49cb8 <nrf_modem_os_free>
   59c06:	bd10      	pop	{r4, pc}

00059c08 <nrf_socket>:
   59c08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   59c0c:	4681      	mov	r9, r0
   59c0e:	4688      	mov	r8, r1
   59c10:	4617      	mov	r7, r2
   59c12:	f7ff ff61 	bl	59ad8 <sock_family_is_valid>
   59c16:	b938      	cbnz	r0, 59c28 <nrf_socket+0x20>
   59c18:	206a      	movs	r0, #106	; 0x6a
   59c1a:	f7fd fb73 	bl	57304 <nrf_modem_os_errno_set>
   59c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   59c22:	b003      	add	sp, #12
   59c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   59c28:	4638      	mov	r0, r7
   59c2a:	f7ff ff61 	bl	59af0 <sock_proto_is_valid>
   59c2e:	b908      	cbnz	r0, 59c34 <nrf_socket+0x2c>
   59c30:	207b      	movs	r0, #123	; 0x7b
   59c32:	e7f2      	b.n	59c1a <nrf_socket+0x12>
   59c34:	4640      	mov	r0, r8
   59c36:	f7ff ff55 	bl	59ae4 <sock_type_is_valid>
   59c3a:	b908      	cbnz	r0, 59c40 <nrf_socket+0x38>
   59c3c:	206b      	movs	r0, #107	; 0x6b
   59c3e:	e7ec      	b.n	59c1a <nrf_socket+0x12>
   59c40:	4641      	mov	r1, r8
   59c42:	4638      	mov	r0, r7
   59c44:	f7ff ff62 	bl	59b0c <sock_proto_supports_type>
   59c48:	2800      	cmp	r0, #0
   59c4a:	d0f7      	beq.n	59c3c <nrf_socket+0x34>
   59c4c:	f7f6 fdb6 	bl	507bc <sock_open>
   59c50:	4606      	mov	r6, r0
   59c52:	b908      	cbnz	r0, 59c58 <nrf_socket+0x50>
   59c54:	2017      	movs	r0, #23
   59c56:	e7e0      	b.n	59c1a <nrf_socket+0x12>
   59c58:	2000      	movs	r0, #0
   59c5a:	f7ff fe5d 	bl	59918 <rpc_client_msg_alloc>
   59c5e:	4604      	mov	r4, r0
   59c60:	b920      	cbnz	r0, 59c6c <nrf_socket+0x64>
   59c62:	6830      	ldr	r0, [r6, #0]
   59c64:	f7f6 fde0 	bl	50828 <_sock_close>
   59c68:	2069      	movs	r0, #105	; 0x69
   59c6a:	e7d6      	b.n	59c1a <nrf_socket+0x12>
   59c6c:	2300      	movs	r3, #0
   59c6e:	220c      	movs	r2, #12
   59c70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   59c74:	7202      	strb	r2, [r0, #8]
   59c76:	7243      	strb	r3, [r0, #9]
   59c78:	7283      	strb	r3, [r0, #10]
   59c7a:	72c3      	strb	r3, [r0, #11]
   59c7c:	7405      	strb	r5, [r0, #16]
   59c7e:	7445      	strb	r5, [r0, #17]
   59c80:	7485      	strb	r5, [r0, #18]
   59c82:	74c5      	strb	r5, [r0, #19]
   59c84:	4648      	mov	r0, r9
   59c86:	f7f7 fbbb 	bl	51400 <nrf_af_to_rpc_af>
   59c8a:	6160      	str	r0, [r4, #20]
   59c8c:	4640      	mov	r0, r8
   59c8e:	f000 fca4 	bl	5a5da <nrf_type_to_rpc_type>
   59c92:	4601      	mov	r1, r0
   59c94:	61a0      	str	r0, [r4, #24]
   59c96:	4638      	mov	r0, r7
   59c98:	f000 fca0 	bl	5a5dc <nrf_proto_to_rpc_proto>
   59c9c:	4621      	mov	r1, r4
   59c9e:	61e0      	str	r0, [r4, #28]
   59ca0:	aa01      	add	r2, sp, #4
   59ca2:	f247 0001 	movw	r0, #28673	; 0x7001
   59ca6:	f7f7 fbcb 	bl	51440 <req_forward>
   59caa:	4604      	mov	r4, r0
   59cac:	b120      	cbz	r0, 59cb8 <nrf_socket+0xb0>
   59cae:	4628      	mov	r0, r5
   59cb0:	f7f6 fdba 	bl	50828 <_sock_close>
   59cb4:	4620      	mov	r0, r4
   59cb6:	e7b0      	b.n	59c1a <nrf_socket+0x12>
   59cb8:	9b01      	ldr	r3, [sp, #4]
   59cba:	699b      	ldr	r3, [r3, #24]
   59cbc:	e9c6 9803 	strd	r9, r8, [r6, #12]
   59cc0:	6033      	str	r3, [r6, #0]
   59cc2:	9801      	ldr	r0, [sp, #4]
   59cc4:	6177      	str	r7, [r6, #20]
   59cc6:	f7ff fe49 	bl	5995c <rpc_client_msg_free>
   59cca:	6830      	ldr	r0, [r6, #0]
   59ccc:	e7a9      	b.n	59c22 <nrf_socket+0x1a>

00059cce <nrf_connect>:
   59cce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   59cd0:	4607      	mov	r7, r0
   59cd2:	460c      	mov	r4, r1
   59cd4:	4616      	mov	r6, r2
   59cd6:	f7f6 fd95 	bl	50804 <sock_find>
   59cda:	4605      	mov	r5, r0
   59cdc:	b938      	cbnz	r0, 59cee <nrf_connect+0x20>
   59cde:	2009      	movs	r0, #9
   59ce0:	f7fd fb10 	bl	57304 <nrf_modem_os_errno_set>
   59ce4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   59ce8:	4620      	mov	r0, r4
   59cea:	b003      	add	sp, #12
   59cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   59cee:	f7ff fe87 	bl	59a00 <sock_is_connected>
   59cf2:	b108      	cbz	r0, 59cf8 <nrf_connect+0x2a>
   59cf4:	207f      	movs	r0, #127	; 0x7f
   59cf6:	e7f3      	b.n	59ce0 <nrf_connect+0x12>
   59cf8:	4628      	mov	r0, r5
   59cfa:	f7ff fe7d 	bl	599f8 <sock_is_connecting>
   59cfe:	b108      	cbz	r0, 59d04 <nrf_connect+0x36>
   59d00:	2078      	movs	r0, #120	; 0x78
   59d02:	e7ed      	b.n	59ce0 <nrf_connect+0x12>
   59d04:	4628      	mov	r0, r5
   59d06:	f7ff fe8b 	bl	59a20 <sock_is_closed>
   59d0a:	b108      	cbz	r0, 59d10 <nrf_connect+0x42>
   59d0c:	69a8      	ldr	r0, [r5, #24]
   59d0e:	e7e7      	b.n	59ce0 <nrf_connect+0x12>
   59d10:	b90c      	cbnz	r4, 59d16 <nrf_connect+0x48>
   59d12:	200e      	movs	r0, #14
   59d14:	e7e4      	b.n	59ce0 <nrf_connect+0x12>
   59d16:	4631      	mov	r1, r6
   59d18:	4620      	mov	r0, r4
   59d1a:	f7ff ff11 	bl	59b40 <sock_sockaddr_len_is_valid>
   59d1e:	b908      	cbnz	r0, 59d24 <nrf_connect+0x56>
   59d20:	2016      	movs	r0, #22
   59d22:	e7dd      	b.n	59ce0 <nrf_connect+0x12>
   59d24:	4621      	mov	r1, r4
   59d26:	4628      	mov	r0, r5
   59d28:	f7ff ff1e 	bl	59b68 <sock_sockaddr_fam_is_valid>
   59d2c:	b908      	cbnz	r0, 59d32 <nrf_connect+0x64>
   59d2e:	206a      	movs	r0, #106	; 0x6a
   59d30:	e7d6      	b.n	59ce0 <nrf_connect+0x12>
   59d32:	4628      	mov	r0, r5
   59d34:	f7ff fe6c 	bl	59a10 <sock_is_nonblock>
   59d38:	b150      	cbz	r0, 59d50 <nrf_connect+0x82>
   59d3a:	696e      	ldr	r6, [r5, #20]
   59d3c:	3e11      	subs	r6, #17
   59d3e:	bf18      	it	ne
   59d40:	2601      	movne	r6, #1
   59d42:	2000      	movs	r0, #0
   59d44:	f7ff fde8 	bl	59918 <rpc_client_msg_alloc>
   59d48:	4602      	mov	r2, r0
   59d4a:	b918      	cbnz	r0, 59d54 <nrf_connect+0x86>
   59d4c:	2069      	movs	r0, #105	; 0x69
   59d4e:	e7c7      	b.n	59ce0 <nrf_connect+0x12>
   59d50:	4606      	mov	r6, r0
   59d52:	e7f6      	b.n	59d42 <nrf_connect+0x74>
   59d54:	2300      	movs	r3, #0
   59d56:	2114      	movs	r1, #20
   59d58:	6107      	str	r7, [r0, #16]
   59d5a:	7201      	strb	r1, [r0, #8]
   59d5c:	7243      	strb	r3, [r0, #9]
   59d5e:	7283      	strb	r3, [r0, #10]
   59d60:	72c3      	strb	r3, [r0, #11]
   59d62:	6861      	ldr	r1, [r4, #4]
   59d64:	2901      	cmp	r1, #1
   59d66:	d00e      	beq.n	59d86 <nrf_connect+0xb8>
   59d68:	2902      	cmp	r1, #2
   59d6a:	d014      	beq.n	59d96 <nrf_connect+0xc8>
   59d6c:	7f2b      	ldrb	r3, [r5, #28]
   59d6e:	f247 0102 	movw	r1, #28674	; 0x7002
   59d72:	f043 0304 	orr.w	r3, r3, #4
   59d76:	772b      	strb	r3, [r5, #28]
   59d78:	2004      	movs	r0, #4
   59d7a:	60d6      	str	r6, [r2, #12]
   59d7c:	f7ff fde7 	bl	5994e <rpc_client_msg_send>
   59d80:	b1ce      	cbz	r6, 59db6 <nrf_connect+0xe8>
   59d82:	2077      	movs	r0, #119	; 0x77
   59d84:	e7ac      	b.n	59ce0 <nrf_connect+0x12>
   59d86:	8921      	ldrh	r1, [r4, #8]
   59d88:	75c3      	strb	r3, [r0, #23]
   59d8a:	8281      	strh	r1, [r0, #20]
   59d8c:	2104      	movs	r1, #4
   59d8e:	7581      	strb	r1, [r0, #22]
   59d90:	68e3      	ldr	r3, [r4, #12]
   59d92:	6183      	str	r3, [r0, #24]
   59d94:	e7ea      	b.n	59d6c <nrf_connect+0x9e>
   59d96:	8921      	ldrh	r1, [r4, #8]
   59d98:	75c3      	strb	r3, [r0, #23]
   59d9a:	8281      	strh	r1, [r0, #20]
   59d9c:	2110      	movs	r1, #16
   59d9e:	1863      	adds	r3, r4, r1
   59da0:	7581      	strb	r1, [r0, #22]
   59da2:	3420      	adds	r4, #32
   59da4:	f100 0118 	add.w	r1, r0, #24
   59da8:	f853 0b04 	ldr.w	r0, [r3], #4
   59dac:	42a3      	cmp	r3, r4
   59dae:	f841 0b04 	str.w	r0, [r1], #4
   59db2:	d1f9      	bne.n	59da8 <nrf_connect+0xda>
   59db4:	e7da      	b.n	59d6c <nrf_connect+0x9e>
   59db6:	4628      	mov	r0, r5
   59db8:	f7ff fe7c 	bl	59ab4 <sock_sndtimeo_ms_get>
   59dbc:	9001      	str	r0, [sp, #4]
   59dbe:	4628      	mov	r0, r5
   59dc0:	f7ff fe1a 	bl	599f8 <sock_is_connecting>
   59dc4:	b918      	cbnz	r0, 59dce <nrf_connect+0x100>
   59dc6:	69ac      	ldr	r4, [r5, #24]
   59dc8:	b17c      	cbz	r4, 59dea <nrf_connect+0x11c>
   59dca:	4620      	mov	r0, r4
   59dcc:	e788      	b.n	59ce0 <nrf_connect+0x12>
   59dce:	2000      	movs	r0, #0
   59dd0:	a901      	add	r1, sp, #4
   59dd2:	f7ef fe75 	bl	49ac0 <nrf_modem_os_timedwait>
   59dd6:	f110 0f0b 	cmn.w	r0, #11
   59dda:	d004      	beq.n	59de6 <nrf_connect+0x118>
   59ddc:	2800      	cmp	r0, #0
   59dde:	d0ee      	beq.n	59dbe <nrf_connect+0xf0>
   59de0:	f001 f85e 	bl	5aea0 <abs>
   59de4:	e77c      	b.n	59ce0 <nrf_connect+0x12>
   59de6:	2074      	movs	r0, #116	; 0x74
   59de8:	e77a      	b.n	59ce0 <nrf_connect+0x12>
   59dea:	4628      	mov	r0, r5
   59dec:	f7ff fdf8 	bl	599e0 <sock_proto_is_secure>
   59df0:	2800      	cmp	r0, #0
   59df2:	f43f af79 	beq.w	59ce8 <nrf_connect+0x1a>
   59df6:	4628      	mov	r0, r5
   59df8:	9901      	ldr	r1, [sp, #4]
   59dfa:	f7f7 fa8b 	bl	51314 <tls_attach>
   59dfe:	4604      	mov	r4, r0
   59e00:	e772      	b.n	59ce8 <nrf_connect+0x1a>

00059e02 <nrf_bind>:
   59e02:	b538      	push	{r3, r4, r5, lr}
   59e04:	4605      	mov	r5, r0
   59e06:	460c      	mov	r4, r1
   59e08:	f7f6 fcfc 	bl	50804 <sock_find>
   59e0c:	b928      	cbnz	r0, 59e1a <nrf_bind+0x18>
   59e0e:	2009      	movs	r0, #9
   59e10:	f7fd fa78 	bl	57304 <nrf_modem_os_errno_set>
   59e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   59e18:	e023      	b.n	59e62 <nrf_bind+0x60>
   59e1a:	b90c      	cbnz	r4, 59e20 <nrf_bind+0x1e>
   59e1c:	200e      	movs	r0, #14
   59e1e:	e7f7      	b.n	59e10 <nrf_bind+0xe>
   59e20:	4621      	mov	r1, r4
   59e22:	f7ff fea1 	bl	59b68 <sock_sockaddr_fam_is_valid>
   59e26:	b908      	cbnz	r0, 59e2c <nrf_bind+0x2a>
   59e28:	206a      	movs	r0, #106	; 0x6a
   59e2a:	e7f1      	b.n	59e10 <nrf_bind+0xe>
   59e2c:	2000      	movs	r0, #0
   59e2e:	f7ff fd73 	bl	59918 <rpc_client_msg_alloc>
   59e32:	b908      	cbnz	r0, 59e38 <nrf_bind+0x36>
   59e34:	2069      	movs	r0, #105	; 0x69
   59e36:	e7eb      	b.n	59e10 <nrf_bind+0xe>
   59e38:	2300      	movs	r3, #0
   59e3a:	2214      	movs	r2, #20
   59e3c:	6105      	str	r5, [r0, #16]
   59e3e:	7202      	strb	r2, [r0, #8]
   59e40:	7243      	strb	r3, [r0, #9]
   59e42:	7283      	strb	r3, [r0, #10]
   59e44:	72c3      	strb	r3, [r0, #11]
   59e46:	6862      	ldr	r2, [r4, #4]
   59e48:	2a01      	cmp	r2, #1
   59e4a:	d00c      	beq.n	59e66 <nrf_bind+0x64>
   59e4c:	2a02      	cmp	r2, #2
   59e4e:	d012      	beq.n	59e76 <nrf_bind+0x74>
   59e50:	4601      	mov	r1, r0
   59e52:	2200      	movs	r2, #0
   59e54:	f247 0005 	movw	r0, #28677	; 0x7005
   59e58:	f7f7 faf2 	bl	51440 <req_forward>
   59e5c:	4603      	mov	r3, r0
   59e5e:	2800      	cmp	r0, #0
   59e60:	d1d6      	bne.n	59e10 <nrf_bind+0xe>
   59e62:	4618      	mov	r0, r3
   59e64:	bd38      	pop	{r3, r4, r5, pc}
   59e66:	8922      	ldrh	r2, [r4, #8]
   59e68:	75c3      	strb	r3, [r0, #23]
   59e6a:	8282      	strh	r2, [r0, #20]
   59e6c:	2204      	movs	r2, #4
   59e6e:	7582      	strb	r2, [r0, #22]
   59e70:	68e3      	ldr	r3, [r4, #12]
   59e72:	6183      	str	r3, [r0, #24]
   59e74:	e7ec      	b.n	59e50 <nrf_bind+0x4e>
   59e76:	8922      	ldrh	r2, [r4, #8]
   59e78:	75c3      	strb	r3, [r0, #23]
   59e7a:	8282      	strh	r2, [r0, #20]
   59e7c:	2210      	movs	r2, #16
   59e7e:	18a3      	adds	r3, r4, r2
   59e80:	7582      	strb	r2, [r0, #22]
   59e82:	3420      	adds	r4, #32
   59e84:	f100 0218 	add.w	r2, r0, #24
   59e88:	f853 1b04 	ldr.w	r1, [r3], #4
   59e8c:	42a3      	cmp	r3, r4
   59e8e:	f842 1b04 	str.w	r1, [r2], #4
   59e92:	d1f9      	bne.n	59e88 <nrf_bind+0x86>
   59e94:	e7dc      	b.n	59e50 <nrf_bind+0x4e>

00059e96 <nrf_listen>:
   59e96:	b538      	push	{r3, r4, r5, lr}
   59e98:	4605      	mov	r5, r0
   59e9a:	460c      	mov	r4, r1
   59e9c:	f7f6 fcb2 	bl	50804 <sock_find>
   59ea0:	b928      	cbnz	r0, 59eae <nrf_listen+0x18>
   59ea2:	2009      	movs	r0, #9
   59ea4:	f7fd fa2e 	bl	57304 <nrf_modem_os_errno_set>
   59ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   59eac:	e01c      	b.n	59ee8 <nrf_listen+0x52>
   59eae:	f7ff fd88 	bl	599c2 <sock_is_stream>
   59eb2:	b908      	cbnz	r0, 59eb8 <nrf_listen+0x22>
   59eb4:	205f      	movs	r0, #95	; 0x5f
   59eb6:	e7f5      	b.n	59ea4 <nrf_listen+0xe>
   59eb8:	2000      	movs	r0, #0
   59eba:	f7ff fd2d 	bl	59918 <rpc_client_msg_alloc>
   59ebe:	4601      	mov	r1, r0
   59ec0:	b908      	cbnz	r0, 59ec6 <nrf_listen+0x30>
   59ec2:	2069      	movs	r0, #105	; 0x69
   59ec4:	e7ee      	b.n	59ea4 <nrf_listen+0xe>
   59ec6:	2200      	movs	r2, #0
   59ec8:	2304      	movs	r3, #4
   59eca:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   59ece:	7203      	strb	r3, [r0, #8]
   59ed0:	6105      	str	r5, [r0, #16]
   59ed2:	7242      	strb	r2, [r0, #9]
   59ed4:	7282      	strb	r2, [r0, #10]
   59ed6:	72c2      	strb	r2, [r0, #11]
   59ed8:	6144      	str	r4, [r0, #20]
   59eda:	f247 0008 	movw	r0, #28680	; 0x7008
   59ede:	f7f7 faaf 	bl	51440 <req_forward>
   59ee2:	4603      	mov	r3, r0
   59ee4:	2800      	cmp	r0, #0
   59ee6:	d1dd      	bne.n	59ea4 <nrf_listen+0xe>
   59ee8:	4618      	mov	r0, r3
   59eea:	bd38      	pop	{r3, r4, r5, pc}

00059eec <nrf_accept>:
   59eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   59ef0:	b08b      	sub	sp, #44	; 0x2c
   59ef2:	4605      	mov	r5, r0
   59ef4:	4689      	mov	r9, r1
   59ef6:	4616      	mov	r6, r2
   59ef8:	f7f6 fc84 	bl	50804 <sock_find>
   59efc:	4680      	mov	r8, r0
   59efe:	b938      	cbnz	r0, 59f10 <nrf_accept+0x24>
   59f00:	2009      	movs	r0, #9
   59f02:	f7fd f9ff 	bl	57304 <nrf_modem_os_errno_set>
   59f06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   59f0a:	b00b      	add	sp, #44	; 0x2c
   59f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   59f10:	f1b9 0f00 	cmp.w	r9, #0
   59f14:	d002      	beq.n	59f1c <nrf_accept+0x30>
   59f16:	b91e      	cbnz	r6, 59f20 <nrf_accept+0x34>
   59f18:	200e      	movs	r0, #14
   59f1a:	e7f2      	b.n	59f02 <nrf_accept+0x16>
   59f1c:	2e00      	cmp	r6, #0
   59f1e:	d1fb      	bne.n	59f18 <nrf_accept+0x2c>
   59f20:	4640      	mov	r0, r8
   59f22:	f7ff fd4e 	bl	599c2 <sock_is_stream>
   59f26:	b908      	cbnz	r0, 59f2c <nrf_accept+0x40>
   59f28:	205f      	movs	r0, #95	; 0x5f
   59f2a:	e7ea      	b.n	59f02 <nrf_accept+0x16>
   59f2c:	4640      	mov	r0, r8
   59f2e:	f7ff fd6f 	bl	59a10 <sock_is_nonblock>
   59f32:	b128      	cbz	r0, 59f40 <nrf_accept+0x54>
   59f34:	4640      	mov	r0, r8
   59f36:	f7ff fd87 	bl	59a48 <sock_can_accept>
   59f3a:	b908      	cbnz	r0, 59f40 <nrf_accept+0x54>
   59f3c:	200b      	movs	r0, #11
   59f3e:	e7e0      	b.n	59f02 <nrf_accept+0x16>
   59f40:	f7f6 fc3c 	bl	507bc <sock_open>
   59f44:	4604      	mov	r4, r0
   59f46:	b908      	cbnz	r0, 59f4c <nrf_accept+0x60>
   59f48:	2017      	movs	r0, #23
   59f4a:	e7da      	b.n	59f02 <nrf_accept+0x16>
   59f4c:	2000      	movs	r0, #0
   59f4e:	f7ff fce3 	bl	59918 <rpc_client_msg_alloc>
   59f52:	4601      	mov	r1, r0
   59f54:	b920      	cbnz	r0, 59f60 <nrf_accept+0x74>
   59f56:	6820      	ldr	r0, [r4, #0]
   59f58:	f7f6 fc66 	bl	50828 <_sock_close>
   59f5c:	2069      	movs	r0, #105	; 0x69
   59f5e:	e7d0      	b.n	59f02 <nrf_accept+0x16>
   59f60:	6105      	str	r5, [r0, #16]
   59f62:	466a      	mov	r2, sp
   59f64:	f247 000c 	movw	r0, #28684	; 0x700c
   59f68:	f7f7 fa6a 	bl	51440 <req_forward>
   59f6c:	4607      	mov	r7, r0
   59f6e:	b120      	cbz	r0, 59f7a <nrf_accept+0x8e>
   59f70:	6820      	ldr	r0, [r4, #0]
   59f72:	f7f6 fc59 	bl	50828 <_sock_close>
   59f76:	4638      	mov	r0, r7
   59f78:	e7c3      	b.n	59f02 <nrf_accept+0x16>
   59f7a:	9d00      	ldr	r5, [sp, #0]
   59f7c:	69ab      	ldr	r3, [r5, #24]
   59f7e:	6023      	str	r3, [r4, #0]
   59f80:	f8d8 3010 	ldr.w	r3, [r8, #16]
   59f84:	6123      	str	r3, [r4, #16]
   59f86:	f8d8 3014 	ldr.w	r3, [r8, #20]
   59f8a:	6163      	str	r3, [r4, #20]
   59f8c:	7f23      	ldrb	r3, [r4, #28]
   59f8e:	f043 0308 	orr.w	r3, r3, #8
   59f92:	7723      	strb	r3, [r4, #28]
   59f94:	f1b9 0f00 	cmp.w	r9, #0
   59f98:	d020      	beq.n	59fdc <nrf_accept+0xf0>
   59f9a:	b1fe      	cbz	r6, 59fdc <nrf_accept+0xf0>
   59f9c:	8beb      	ldrh	r3, [r5, #30]
   59f9e:	2b04      	cmp	r3, #4
   59fa0:	d003      	beq.n	59faa <nrf_accept+0xbe>
   59fa2:	2b10      	cmp	r3, #16
   59fa4:	d01f      	beq.n	59fe6 <nrf_accept+0xfa>
   59fa6:	6030      	str	r0, [r6, #0]
   59fa8:	e018      	b.n	59fdc <nrf_accept+0xf0>
   59faa:	2310      	movs	r3, #16
   59fac:	9001      	str	r0, [sp, #4]
   59fae:	f88d 3004 	strb.w	r3, [sp, #4]
   59fb2:	2301      	movs	r3, #1
   59fb4:	9003      	str	r0, [sp, #12]
   59fb6:	9302      	str	r3, [sp, #8]
   59fb8:	7f2b      	ldrb	r3, [r5, #28]
   59fba:	7f6a      	ldrb	r2, [r5, #29]
   59fbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   59fc0:	f8ad 300c 	strh.w	r3, [sp, #12]
   59fc4:	6a2b      	ldr	r3, [r5, #32]
   59fc6:	6835      	ldr	r5, [r6, #0]
   59fc8:	9304      	str	r3, [sp, #16]
   59fca:	2d10      	cmp	r5, #16
   59fcc:	bf28      	it	cs
   59fce:	2510      	movcs	r5, #16
   59fd0:	462a      	mov	r2, r5
   59fd2:	4648      	mov	r0, r9
   59fd4:	a901      	add	r1, sp, #4
   59fd6:	f000 ff85 	bl	5aee4 <memcpy>
   59fda:	6035      	str	r5, [r6, #0]
   59fdc:	9800      	ldr	r0, [sp, #0]
   59fde:	f7ff fcbd 	bl	5995c <rpc_client_msg_free>
   59fe2:	6820      	ldr	r0, [r4, #0]
   59fe4:	e791      	b.n	59f0a <nrf_accept+0x1e>
   59fe6:	f04f 0824 	mov.w	r8, #36	; 0x24
   59fea:	4601      	mov	r1, r0
   59fec:	4642      	mov	r2, r8
   59fee:	a801      	add	r0, sp, #4
   59ff0:	f000 ffb2 	bl	5af58 <memset>
   59ff4:	2302      	movs	r3, #2
   59ff6:	f88d 8004 	strb.w	r8, [sp, #4]
   59ffa:	9302      	str	r3, [sp, #8]
   59ffc:	7f2b      	ldrb	r3, [r5, #28]
   59ffe:	7f6a      	ldrb	r2, [r5, #29]
   5a000:	af05      	add	r7, sp, #20
   5a002:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   5a006:	f8ad 300c 	strh.w	r3, [sp, #12]
   5a00a:	f105 0320 	add.w	r3, r5, #32
   5a00e:	3530      	adds	r5, #48	; 0x30
   5a010:	463a      	mov	r2, r7
   5a012:	6818      	ldr	r0, [r3, #0]
   5a014:	6859      	ldr	r1, [r3, #4]
   5a016:	3308      	adds	r3, #8
   5a018:	c203      	stmia	r2!, {r0, r1}
   5a01a:	42ab      	cmp	r3, r5
   5a01c:	4617      	mov	r7, r2
   5a01e:	d1f7      	bne.n	5a010 <nrf_accept+0x124>
   5a020:	6835      	ldr	r5, [r6, #0]
   5a022:	2d24      	cmp	r5, #36	; 0x24
   5a024:	bf28      	it	cs
   5a026:	2524      	movcs	r5, #36	; 0x24
   5a028:	e7d2      	b.n	59fd0 <nrf_accept+0xe4>

0005a02a <nrf_recvfrom>:
   5a02a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5a02e:	b085      	sub	sp, #20
   5a030:	4690      	mov	r8, r2
   5a032:	e9dd a90e 	ldrd	sl, r9, [sp, #56]	; 0x38
   5a036:	461f      	mov	r7, r3
   5a038:	9101      	str	r1, [sp, #4]
   5a03a:	f403 7b80 	and.w	fp, r3, #256	; 0x100
   5a03e:	f7f6 fbe1 	bl	50804 <sock_find>
   5a042:	4604      	mov	r4, r0
   5a044:	b940      	cbnz	r0, 5a058 <nrf_recvfrom+0x2e>
   5a046:	2009      	movs	r0, #9
   5a048:	f7fd f95c 	bl	57304 <nrf_modem_os_errno_set>
   5a04c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   5a050:	4630      	mov	r0, r6
   5a052:	b005      	add	sp, #20
   5a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5a058:	f437 76a1 	bics.w	r6, r7, #322	; 0x142
   5a05c:	d001      	beq.n	5a062 <nrf_recvfrom+0x38>
   5a05e:	205f      	movs	r0, #95	; 0x5f
   5a060:	e7f2      	b.n	5a048 <nrf_recvfrom+0x1e>
   5a062:	f1ba 0f00 	cmp.w	sl, #0
   5a066:	d004      	beq.n	5a072 <nrf_recvfrom+0x48>
   5a068:	f1b9 0f00 	cmp.w	r9, #0
   5a06c:	d104      	bne.n	5a078 <nrf_recvfrom+0x4e>
   5a06e:	200e      	movs	r0, #14
   5a070:	e7ea      	b.n	5a048 <nrf_recvfrom+0x1e>
   5a072:	f1b9 0f00 	cmp.w	r9, #0
   5a076:	d1fa      	bne.n	5a06e <nrf_recvfrom+0x44>
   5a078:	4620      	mov	r0, r4
   5a07a:	f7ff fca2 	bl	599c2 <sock_is_stream>
   5a07e:	b128      	cbz	r0, 5a08c <nrf_recvfrom+0x62>
   5a080:	4620      	mov	r0, r4
   5a082:	f7ff fcbd 	bl	59a00 <sock_is_connected>
   5a086:	b908      	cbnz	r0, 5a08c <nrf_recvfrom+0x62>
   5a088:	2080      	movs	r0, #128	; 0x80
   5a08a:	e7dd      	b.n	5a048 <nrf_recvfrom+0x1e>
   5a08c:	f1bb 0f00 	cmp.w	fp, #0
   5a090:	d11b      	bne.n	5a0ca <nrf_recvfrom+0xa0>
   5a092:	4620      	mov	r0, r4
   5a094:	f7ff fcbc 	bl	59a10 <sock_is_nonblock>
   5a098:	b9c8      	cbnz	r0, 5a0ce <nrf_recvfrom+0xa4>
   5a09a:	f3c7 1580 	ubfx	r5, r7, #6, #1
   5a09e:	4620      	mov	r0, r4
   5a0a0:	f7ff fcf6 	bl	59a90 <sock_rcvtimeo_ms_get>
   5a0a4:	9003      	str	r0, [sp, #12]
   5a0a6:	4620      	mov	r0, r4
   5a0a8:	f7ff fcba 	bl	59a20 <sock_is_closed>
   5a0ac:	b918      	cbnz	r0, 5a0b6 <nrf_recvfrom+0x8c>
   5a0ae:	4620      	mov	r0, r4
   5a0b0:	f7ff fc62 	bl	59978 <sock_has_pkt>
   5a0b4:	b168      	cbz	r0, 5a0d2 <nrf_recvfrom+0xa8>
   5a0b6:	4620      	mov	r0, r4
   5a0b8:	f7ff fc5e 	bl	59978 <sock_has_pkt>
   5a0bc:	b9f0      	cbnz	r0, 5a0fc <nrf_recvfrom+0xd2>
   5a0be:	4620      	mov	r0, r4
   5a0c0:	f7ff fcb2 	bl	59a28 <sock_has_error>
   5a0c4:	b180      	cbz	r0, 5a0e8 <nrf_recvfrom+0xbe>
   5a0c6:	69a0      	ldr	r0, [r4, #24]
   5a0c8:	e7be      	b.n	5a048 <nrf_recvfrom+0x1e>
   5a0ca:	2500      	movs	r5, #0
   5a0cc:	e7e7      	b.n	5a09e <nrf_recvfrom+0x74>
   5a0ce:	2501      	movs	r5, #1
   5a0d0:	e7e5      	b.n	5a09e <nrf_recvfrom+0x74>
   5a0d2:	b10d      	cbz	r5, 5a0d8 <nrf_recvfrom+0xae>
   5a0d4:	200b      	movs	r0, #11
   5a0d6:	e7b7      	b.n	5a048 <nrf_recvfrom+0x1e>
   5a0d8:	a903      	add	r1, sp, #12
   5a0da:	f7ef fcf1 	bl	49ac0 <nrf_modem_os_timedwait>
   5a0de:	2800      	cmp	r0, #0
   5a0e0:	d0e1      	beq.n	5a0a6 <nrf_recvfrom+0x7c>
   5a0e2:	f000 fedd 	bl	5aea0 <abs>
   5a0e6:	e7af      	b.n	5a048 <nrf_recvfrom+0x1e>
   5a0e8:	4620      	mov	r0, r4
   5a0ea:	f7ff fc6a 	bl	599c2 <sock_is_stream>
   5a0ee:	2800      	cmp	r0, #0
   5a0f0:	d1ae      	bne.n	5a050 <nrf_recvfrom+0x26>
   5a0f2:	4620      	mov	r0, r4
   5a0f4:	f7ff fc6a 	bl	599cc <sock_is_datagram>
   5a0f8:	2800      	cmp	r0, #0
   5a0fa:	d1a4      	bne.n	5a046 <nrf_recvfrom+0x1c>
   5a0fc:	4620      	mov	r0, r4
   5a0fe:	f7ff fc5e 	bl	599be <sock_pkt_peek_head>
   5a102:	4605      	mov	r5, r0
   5a104:	f1ba 0f00 	cmp.w	sl, #0
   5a108:	d00c      	beq.n	5a124 <nrf_recvfrom+0xfa>
   5a10a:	68c1      	ldr	r1, [r0, #12]
   5a10c:	b381      	cbz	r1, 5a170 <nrf_recvfrom+0x146>
   5a10e:	780a      	ldrb	r2, [r1, #0]
   5a110:	f8d9 3000 	ldr.w	r3, [r9]
   5a114:	4650      	mov	r0, sl
   5a116:	429a      	cmp	r2, r3
   5a118:	bf28      	it	cs
   5a11a:	461a      	movcs	r2, r3
   5a11c:	f8c9 2000 	str.w	r2, [r9]
   5a120:	f000 fee0 	bl	5aee4 <memcpy>
   5a124:	f007 0902 	and.w	r9, r7, #2
   5a128:	4628      	mov	r0, r5
   5a12a:	f7ff fd3a 	bl	59ba2 <pkt_bytes_left>
   5a12e:	4540      	cmp	r0, r8
   5a130:	d821      	bhi.n	5a176 <nrf_recvfrom+0x14c>
   5a132:	4628      	mov	r0, r5
   5a134:	f7ff fd35 	bl	59ba2 <pkt_bytes_left>
   5a138:	4607      	mov	r7, r0
   5a13a:	2f00      	cmp	r7, #0
   5a13c:	d088      	beq.n	5a050 <nrf_recvfrom+0x26>
   5a13e:	9b01      	ldr	r3, [sp, #4]
   5a140:	4628      	mov	r0, r5
   5a142:	eb03 0a06 	add.w	sl, r3, r6
   5a146:	f7ff fd28 	bl	59b9a <pkt_bytes_get>
   5a14a:	463a      	mov	r2, r7
   5a14c:	4601      	mov	r1, r0
   5a14e:	4650      	mov	r0, sl
   5a150:	f000 fec8 	bl	5aee4 <memcpy>
   5a154:	4620      	mov	r0, r4
   5a156:	443e      	add	r6, r7
   5a158:	f7ff fc38 	bl	599cc <sock_is_datagram>
   5a15c:	b168      	cbz	r0, 5a17a <nrf_recvfrom+0x150>
   5a15e:	f1b9 0f00 	cmp.w	r9, #0
   5a162:	f47f af75 	bne.w	5a050 <nrf_recvfrom+0x26>
   5a166:	4629      	mov	r1, r5
   5a168:	4620      	mov	r0, r4
   5a16a:	f7ff fc14 	bl	59996 <sock_pkt_remove>
   5a16e:	e76f      	b.n	5a050 <nrf_recvfrom+0x26>
   5a170:	f8c9 1000 	str.w	r1, [r9]
   5a174:	e7d6      	b.n	5a124 <nrf_recvfrom+0xfa>
   5a176:	4647      	mov	r7, r8
   5a178:	e7df      	b.n	5a13a <nrf_recvfrom+0x110>
   5a17a:	4620      	mov	r0, r4
   5a17c:	f7ff fc2b 	bl	599d6 <sock_is_raw>
   5a180:	2800      	cmp	r0, #0
   5a182:	d1ec      	bne.n	5a15e <nrf_recvfrom+0x134>
   5a184:	f1b9 0f00 	cmp.w	r9, #0
   5a188:	d10a      	bne.n	5a1a0 <nrf_recvfrom+0x176>
   5a18a:	896b      	ldrh	r3, [r5, #10]
   5a18c:	4628      	mov	r0, r5
   5a18e:	443b      	add	r3, r7
   5a190:	816b      	strh	r3, [r5, #10]
   5a192:	f7ff fd06 	bl	59ba2 <pkt_bytes_left>
   5a196:	b918      	cbnz	r0, 5a1a0 <nrf_recvfrom+0x176>
   5a198:	4629      	mov	r1, r5
   5a19a:	4620      	mov	r0, r4
   5a19c:	f7ff fbfb 	bl	59996 <sock_pkt_remove>
   5a1a0:	45b8      	cmp	r8, r7
   5a1a2:	f43f af55 	beq.w	5a050 <nrf_recvfrom+0x26>
   5a1a6:	f1bb 0f00 	cmp.w	fp, #0
   5a1aa:	d028      	beq.n	5a1fe <nrf_recvfrom+0x1d4>
   5a1ac:	f1b9 0f00 	cmp.w	r9, #0
   5a1b0:	d01c      	beq.n	5a1ec <nrf_recvfrom+0x1c2>
   5a1b2:	4628      	mov	r0, r5
   5a1b4:	f7ff fce8 	bl	59b88 <pkt_has_next>
   5a1b8:	b148      	cbz	r0, 5a1ce <nrf_recvfrom+0x1a4>
   5a1ba:	4628      	mov	r0, r5
   5a1bc:	f7ff fcea 	bl	59b94 <pkt_peek_next>
   5a1c0:	4605      	mov	r5, r0
   5a1c2:	2800      	cmp	r0, #0
   5a1c4:	f43f af44 	beq.w	5a050 <nrf_recvfrom+0x26>
   5a1c8:	eba8 0807 	sub.w	r8, r8, r7
   5a1cc:	e7ac      	b.n	5a128 <nrf_recvfrom+0xfe>
   5a1ce:	2000      	movs	r0, #0
   5a1d0:	a903      	add	r1, sp, #12
   5a1d2:	f7ef fc75 	bl	49ac0 <nrf_modem_os_timedwait>
   5a1d6:	b118      	cbz	r0, 5a1e0 <nrf_recvfrom+0x1b6>
   5a1d8:	2e00      	cmp	r6, #0
   5a1da:	f47f af39 	bne.w	5a050 <nrf_recvfrom+0x26>
   5a1de:	e780      	b.n	5a0e2 <nrf_recvfrom+0xb8>
   5a1e0:	4620      	mov	r0, r4
   5a1e2:	f7ff fc1d 	bl	59a20 <sock_is_closed>
   5a1e6:	2800      	cmp	r0, #0
   5a1e8:	d0dd      	beq.n	5a1a6 <nrf_recvfrom+0x17c>
   5a1ea:	e731      	b.n	5a050 <nrf_recvfrom+0x26>
   5a1ec:	4620      	mov	r0, r4
   5a1ee:	f7ff fbc3 	bl	59978 <sock_has_pkt>
   5a1f2:	2800      	cmp	r0, #0
   5a1f4:	d0eb      	beq.n	5a1ce <nrf_recvfrom+0x1a4>
   5a1f6:	4620      	mov	r0, r4
   5a1f8:	f7ff fbe1 	bl	599be <sock_pkt_peek_head>
   5a1fc:	e7e0      	b.n	5a1c0 <nrf_recvfrom+0x196>
   5a1fe:	f1b9 0f00 	cmp.w	r9, #0
   5a202:	d1da      	bne.n	5a1ba <nrf_recvfrom+0x190>
   5a204:	e7f7      	b.n	5a1f6 <nrf_recvfrom+0x1cc>

0005a206 <nrf_getsockopt>:
   5a206:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   5a20a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   5a20c:	4681      	mov	r9, r0
   5a20e:	4688      	mov	r8, r1
   5a210:	4614      	mov	r4, r2
   5a212:	461f      	mov	r7, r3
   5a214:	f7f6 faf6 	bl	50804 <sock_find>
   5a218:	4606      	mov	r6, r0
   5a21a:	b928      	cbnz	r0, 5a228 <nrf_getsockopt+0x22>
   5a21c:	2009      	movs	r0, #9
   5a21e:	f7fd f871 	bl	57304 <nrf_modem_os_errno_set>
   5a222:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   5a226:	e05d      	b.n	5a2e4 <nrf_getsockopt+0xde>
   5a228:	b107      	cbz	r7, 5a22c <nrf_getsockopt+0x26>
   5a22a:	b90d      	cbnz	r5, 5a230 <nrf_getsockopt+0x2a>
   5a22c:	200e      	movs	r0, #14
   5a22e:	e7f6      	b.n	5a21e <nrf_getsockopt+0x18>
   5a230:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   5a234:	d137      	bne.n	5a2a6 <nrf_getsockopt+0xa0>
   5a236:	1e63      	subs	r3, r4, #1
   5a238:	2b0b      	cmp	r3, #11
   5a23a:	d834      	bhi.n	5a2a6 <nrf_getsockopt+0xa0>
   5a23c:	e8df f003 	tbb	[pc, r3]
   5a240:	33332517 	.word	0x33332517
   5a244:	33330612 	.word	0x33330612
   5a248:	0d333333 	.word	0x0d333333
   5a24c:	2304      	movs	r3, #4
   5a24e:	602b      	str	r3, [r5, #0]
   5a250:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   5a254:	603b      	str	r3, [r7, #0]
   5a256:	2400      	movs	r4, #0
   5a258:	e044      	b.n	5a2e4 <nrf_getsockopt+0xde>
   5a25a:	2304      	movs	r3, #4
   5a25c:	602b      	str	r3, [r5, #0]
   5a25e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   5a262:	e7f7      	b.n	5a254 <nrf_getsockopt+0x4e>
   5a264:	2304      	movs	r3, #4
   5a266:	602b      	str	r3, [r5, #0]
   5a268:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   5a26c:	e7f2      	b.n	5a254 <nrf_getsockopt+0x4e>
   5a26e:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   5a272:	682b      	ldr	r3, [r5, #0]
   5a274:	0092      	lsls	r2, r2, #2
   5a276:	429a      	cmp	r2, r3
   5a278:	bf28      	it	cs
   5a27a:	461a      	movcs	r2, r3
   5a27c:	f100 0140 	add.w	r1, r0, #64	; 0x40
   5a280:	602a      	str	r2, [r5, #0]
   5a282:	4638      	mov	r0, r7
   5a284:	f000 fe2e 	bl	5aee4 <memcpy>
   5a288:	e7e5      	b.n	5a256 <nrf_getsockopt+0x50>
   5a28a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   5a28c:	f7e6 fdb2 	bl	40df4 <strlen>
   5a290:	682a      	ldr	r2, [r5, #0]
   5a292:	3001      	adds	r0, #1
   5a294:	4290      	cmp	r0, r2
   5a296:	d203      	bcs.n	5a2a0 <nrf_getsockopt+0x9a>
   5a298:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   5a29a:	f7e6 fdab 	bl	40df4 <strlen>
   5a29e:	1c42      	adds	r2, r0, #1
   5a2a0:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   5a2a2:	602a      	str	r2, [r5, #0]
   5a2a4:	e7ed      	b.n	5a282 <nrf_getsockopt+0x7c>
   5a2a6:	2c14      	cmp	r4, #20
   5a2a8:	d020      	beq.n	5a2ec <nrf_getsockopt+0xe6>
   5a2aa:	dc07      	bgt.n	5a2bc <nrf_getsockopt+0xb6>
   5a2ac:	2c04      	cmp	r4, #4
   5a2ae:	d014      	beq.n	5a2da <nrf_getsockopt+0xd4>
   5a2b0:	2c0e      	cmp	r4, #14
   5a2b2:	d009      	beq.n	5a2c8 <nrf_getsockopt+0xc2>
   5a2b4:	2c03      	cmp	r4, #3
   5a2b6:	d007      	beq.n	5a2c8 <nrf_getsockopt+0xc2>
   5a2b8:	206d      	movs	r0, #109	; 0x6d
   5a2ba:	e7b0      	b.n	5a21e <nrf_getsockopt+0x18>
   5a2bc:	2c15      	cmp	r4, #21
   5a2be:	d01d      	beq.n	5a2fc <nrf_getsockopt+0xf6>
   5a2c0:	2c20      	cmp	r4, #32
   5a2c2:	dc08      	bgt.n	5a2d6 <nrf_getsockopt+0xd0>
   5a2c4:	2c1d      	cmp	r4, #29
   5a2c6:	ddf7      	ble.n	5a2b8 <nrf_getsockopt+0xb2>
   5a2c8:	6828      	ldr	r0, [r5, #0]
   5a2ca:	f7ff fb25 	bl	59918 <rpc_client_msg_alloc>
   5a2ce:	4606      	mov	r6, r0
   5a2d0:	b9e0      	cbnz	r0, 5a30c <nrf_getsockopt+0x106>
   5a2d2:	2069      	movs	r0, #105	; 0x69
   5a2d4:	e7a3      	b.n	5a21e <nrf_getsockopt+0x18>
   5a2d6:	2c37      	cmp	r4, #55	; 0x37
   5a2d8:	e7ed      	b.n	5a2b6 <nrf_getsockopt+0xb0>
   5a2da:	602c      	str	r4, [r5, #0]
   5a2dc:	2400      	movs	r4, #0
   5a2de:	69b3      	ldr	r3, [r6, #24]
   5a2e0:	61b4      	str	r4, [r6, #24]
   5a2e2:	603b      	str	r3, [r7, #0]
   5a2e4:	4620      	mov	r0, r4
   5a2e6:	b003      	add	sp, #12
   5a2e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   5a2ec:	682a      	ldr	r2, [r5, #0]
   5a2ee:	f106 0120 	add.w	r1, r6, #32
   5a2f2:	2a08      	cmp	r2, #8
   5a2f4:	bf28      	it	cs
   5a2f6:	2208      	movcs	r2, #8
   5a2f8:	602a      	str	r2, [r5, #0]
   5a2fa:	e7c2      	b.n	5a282 <nrf_getsockopt+0x7c>
   5a2fc:	682a      	ldr	r2, [r5, #0]
   5a2fe:	f106 0128 	add.w	r1, r6, #40	; 0x28
   5a302:	2a08      	cmp	r2, #8
   5a304:	bf28      	it	cs
   5a306:	2208      	movcs	r2, #8
   5a308:	602a      	str	r2, [r5, #0]
   5a30a:	e7ba      	b.n	5a282 <nrf_getsockopt+0x7c>
   5a30c:	2300      	movs	r3, #0
   5a30e:	2208      	movs	r2, #8
   5a310:	7243      	strb	r3, [r0, #9]
   5a312:	7202      	strb	r2, [r0, #8]
   5a314:	7283      	strb	r3, [r0, #10]
   5a316:	72c3      	strb	r3, [r0, #11]
   5a318:	f8c0 9010 	str.w	r9, [r0, #16]
   5a31c:	4640      	mov	r0, r8
   5a31e:	f000 f97d 	bl	5a61c <nrf_sol_to_rpc_sol>
   5a322:	6170      	str	r0, [r6, #20]
   5a324:	4620      	mov	r0, r4
   5a326:	f7f7 f873 	bl	51410 <nrf_so_to_rpc_so>
   5a32a:	4631      	mov	r1, r6
   5a32c:	61b0      	str	r0, [r6, #24]
   5a32e:	aa01      	add	r2, sp, #4
   5a330:	f247 0004 	movw	r0, #28676	; 0x7004
   5a334:	f8d6 9000 	ldr.w	r9, [r6]
   5a338:	f7f7 f882 	bl	51440 <req_forward>
   5a33c:	4604      	mov	r4, r0
   5a33e:	2800      	cmp	r0, #0
   5a340:	f47f af6d 	bne.w	5a21e <nrf_getsockopt+0x18>
   5a344:	f8dd 8004 	ldr.w	r8, [sp, #4]
   5a348:	682b      	ldr	r3, [r5, #0]
   5a34a:	f8d8 1000 	ldr.w	r1, [r8]
   5a34e:	b181      	cbz	r1, 5a372 <nrf_getsockopt+0x16c>
   5a350:	f8d8 2004 	ldr.w	r2, [r8, #4]
   5a354:	4638      	mov	r0, r7
   5a356:	429a      	cmp	r2, r3
   5a358:	bf28      	it	cs
   5a35a:	461a      	movcs	r2, r3
   5a35c:	602a      	str	r2, [r5, #0]
   5a35e:	f000 fdc1 	bl	5aee4 <memcpy>
   5a362:	f8d8 0000 	ldr.w	r0, [r8]
   5a366:	f7ff fafc 	bl	59962 <rpc_client_msg_data_rx_free>
   5a36a:	9801      	ldr	r0, [sp, #4]
   5a36c:	f7ff faf6 	bl	5995c <rpc_client_msg_free>
   5a370:	e7b8      	b.n	5a2e4 <nrf_getsockopt+0xde>
   5a372:	6872      	ldr	r2, [r6, #4]
   5a374:	4649      	mov	r1, r9
   5a376:	429a      	cmp	r2, r3
   5a378:	bf28      	it	cs
   5a37a:	461a      	movcs	r2, r3
   5a37c:	4638      	mov	r0, r7
   5a37e:	602a      	str	r2, [r5, #0]
   5a380:	f000 fdb0 	bl	5aee4 <memcpy>
   5a384:	4648      	mov	r0, r9
   5a386:	f7ff faf0 	bl	5996a <rpc_client_msg_data_tx_free>
   5a38a:	e7ee      	b.n	5a36a <nrf_getsockopt+0x164>

0005a38c <tls_setopt_role>:
   5a38c:	b508      	push	{r3, lr}
   5a38e:	b109      	cbz	r1, 5a394 <tls_setopt_role+0x8>
   5a390:	2a04      	cmp	r2, #4
   5a392:	d005      	beq.n	5a3a0 <tls_setopt_role+0x14>
   5a394:	2016      	movs	r0, #22
   5a396:	f7fc ffb5 	bl	57304 <nrf_modem_os_errno_set>
   5a39a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5a39e:	e00a      	b.n	5a3b6 <tls_setopt_role+0x2a>
   5a3a0:	780b      	ldrb	r3, [r1, #0]
   5a3a2:	b123      	cbz	r3, 5a3ae <tls_setopt_role+0x22>
   5a3a4:	2b01      	cmp	r3, #1
   5a3a6:	d1f5      	bne.n	5a394 <tls_setopt_role+0x8>
   5a3a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
   5a3ac:	e002      	b.n	5a3b4 <tls_setopt_role+0x28>
   5a3ae:	2202      	movs	r2, #2
   5a3b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
   5a3b4:	2000      	movs	r0, #0
   5a3b6:	bd08      	pop	{r3, pc}

0005a3b8 <tls_setopt_taglist>:
   5a3b8:	b510      	push	{r4, lr}
   5a3ba:	f012 0403 	ands.w	r4, r2, #3
   5a3be:	d100      	bne.n	5a3c2 <tls_setopt_taglist+0xa>
   5a3c0:	b92a      	cbnz	r2, 5a3ce <tls_setopt_taglist+0x16>
   5a3c2:	2016      	movs	r0, #22
   5a3c4:	f7fc ff9e 	bl	57304 <nrf_modem_os_errno_set>
   5a3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5a3cc:	bd10      	pop	{r4, pc}
   5a3ce:	0893      	lsrs	r3, r2, #2
   5a3d0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
   5a3d4:	3040      	adds	r0, #64	; 0x40
   5a3d6:	f000 fd85 	bl	5aee4 <memcpy>
   5a3da:	4620      	mov	r0, r4
   5a3dc:	e7f6      	b.n	5a3cc <tls_setopt_taglist+0x14>

0005a3de <tls_setopt_sess_cache>:
   5a3de:	b508      	push	{r3, lr}
   5a3e0:	b109      	cbz	r1, 5a3e6 <tls_setopt_sess_cache+0x8>
   5a3e2:	2a04      	cmp	r2, #4
   5a3e4:	d005      	beq.n	5a3f2 <tls_setopt_sess_cache+0x14>
   5a3e6:	2016      	movs	r0, #22
   5a3e8:	f7fc ff8c 	bl	57304 <nrf_modem_os_errno_set>
   5a3ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5a3f0:	bd08      	pop	{r3, pc}
   5a3f2:	780b      	ldrb	r3, [r1, #0]
   5a3f4:	3b00      	subs	r3, #0
   5a3f6:	bf18      	it	ne
   5a3f8:	2301      	movne	r3, #1
   5a3fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   5a3fe:	2000      	movs	r0, #0
   5a400:	e7f6      	b.n	5a3f0 <tls_setopt_sess_cache+0x12>

0005a402 <tls_setopt_peer_verify>:
   5a402:	b508      	push	{r3, lr}
   5a404:	b109      	cbz	r1, 5a40a <tls_setopt_peer_verify+0x8>
   5a406:	2a04      	cmp	r2, #4
   5a408:	d005      	beq.n	5a416 <tls_setopt_peer_verify+0x14>
   5a40a:	2016      	movs	r0, #22
   5a40c:	f7fc ff7a 	bl	57304 <nrf_modem_os_errno_set>
   5a410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5a414:	bd08      	pop	{r3, pc}
   5a416:	680b      	ldr	r3, [r1, #0]
   5a418:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   5a41c:	2000      	movs	r0, #0
   5a41e:	e7f9      	b.n	5a414 <tls_setopt_peer_verify+0x12>

0005a420 <tls_setopt_hostname>:
   5a420:	b570      	push	{r4, r5, r6, lr}
   5a422:	4605      	mov	r5, r0
   5a424:	4614      	mov	r4, r2
   5a426:	460e      	mov	r6, r1
   5a428:	b931      	cbnz	r1, 5a438 <tls_setopt_hostname+0x18>
   5a42a:	b13a      	cbz	r2, 5a43c <tls_setopt_hostname+0x1c>
   5a42c:	2016      	movs	r0, #22
   5a42e:	f7fc ff69 	bl	57304 <nrf_modem_os_errno_set>
   5a432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5a436:	bd70      	pop	{r4, r5, r6, pc}
   5a438:	2a00      	cmp	r2, #0
   5a43a:	d0f7      	beq.n	5a42c <tls_setopt_hostname+0xc>
   5a43c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   5a43e:	b108      	cbz	r0, 5a444 <tls_setopt_hostname+0x24>
   5a440:	f7ef fc3a 	bl	49cb8 <nrf_modem_os_free>
   5a444:	b174      	cbz	r4, 5a464 <tls_setopt_hostname+0x44>
   5a446:	1c60      	adds	r0, r4, #1
   5a448:	f7ef fc2e 	bl	49ca8 <nrf_modem_os_alloc>
   5a44c:	63a8      	str	r0, [r5, #56]	; 0x38
   5a44e:	b908      	cbnz	r0, 5a454 <tls_setopt_hostname+0x34>
   5a450:	2069      	movs	r0, #105	; 0x69
   5a452:	e7ec      	b.n	5a42e <tls_setopt_hostname+0xe>
   5a454:	4622      	mov	r2, r4
   5a456:	4631      	mov	r1, r6
   5a458:	f000 fd44 	bl	5aee4 <memcpy>
   5a45c:	2000      	movs	r0, #0
   5a45e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   5a460:	5518      	strb	r0, [r3, r4]
   5a462:	e7e8      	b.n	5a436 <tls_setopt_hostname+0x16>
   5a464:	4620      	mov	r0, r4
   5a466:	e7e6      	b.n	5a436 <tls_setopt_hostname+0x16>

0005a468 <nrf_poll>:
   5a468:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   5a46c:	4688      	mov	r8, r1
   5a46e:	4607      	mov	r7, r0
   5a470:	9201      	str	r2, [sp, #4]
   5a472:	b930      	cbnz	r0, 5a482 <nrf_poll+0x1a>
   5a474:	b149      	cbz	r1, 5a48a <nrf_poll+0x22>
   5a476:	200e      	movs	r0, #14
   5a478:	f7fc ff44 	bl	57304 <nrf_modem_os_errno_set>
   5a47c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   5a480:	e014      	b.n	5a4ac <nrf_poll+0x44>
   5a482:	2908      	cmp	r1, #8
   5a484:	d901      	bls.n	5a48a <nrf_poll+0x22>
   5a486:	2016      	movs	r0, #22
   5a488:	e7f6      	b.n	5a478 <nrf_poll+0x10>
   5a48a:	f04f 0900 	mov.w	r9, #0
   5a48e:	f04f 0a00 	mov.w	sl, #0
   5a492:	463c      	mov	r4, r7
   5a494:	4655      	mov	r5, sl
   5a496:	45c2      	cmp	sl, r8
   5a498:	d10c      	bne.n	5a4b4 <nrf_poll+0x4c>
   5a49a:	b93d      	cbnz	r5, 5a4ac <nrf_poll+0x44>
   5a49c:	4628      	mov	r0, r5
   5a49e:	a901      	add	r1, sp, #4
   5a4a0:	f7ef fb0e 	bl	49ac0 <nrf_modem_os_timedwait>
   5a4a4:	2800      	cmp	r0, #0
   5a4a6:	d0f2      	beq.n	5a48e <nrf_poll+0x26>
   5a4a8:	306e      	adds	r0, #110	; 0x6e
   5a4aa:	d071      	beq.n	5a590 <nrf_poll+0x128>
   5a4ac:	4628      	mov	r0, r5
   5a4ae:	b002      	add	sp, #8
   5a4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   5a4b4:	6820      	ldr	r0, [r4, #0]
   5a4b6:	f8a4 9006 	strh.w	r9, [r4, #6]
   5a4ba:	2800      	cmp	r0, #0
   5a4bc:	db4e      	blt.n	5a55c <nrf_poll+0xf4>
   5a4be:	f7f6 f9a1 	bl	50804 <sock_find>
   5a4c2:	4606      	mov	r6, r0
   5a4c4:	b928      	cbnz	r0, 5a4d2 <nrf_poll+0x6a>
   5a4c6:	88e3      	ldrh	r3, [r4, #6]
   5a4c8:	f043 0320 	orr.w	r3, r3, #32
   5a4cc:	80e3      	strh	r3, [r4, #6]
   5a4ce:	3501      	adds	r5, #1
   5a4d0:	e044      	b.n	5a55c <nrf_poll+0xf4>
   5a4d2:	f7ff faa1 	bl	59a18 <sock_is_local_closed>
   5a4d6:	2800      	cmp	r0, #0
   5a4d8:	d1f5      	bne.n	5a4c6 <nrf_poll+0x5e>
   5a4da:	4630      	mov	r0, r6
   5a4dc:	f7ff faa4 	bl	59a28 <sock_has_error>
   5a4e0:	b348      	cbz	r0, 5a536 <nrf_poll+0xce>
   5a4e2:	88e3      	ldrh	r3, [r4, #6]
   5a4e4:	f043 0308 	orr.w	r3, r3, #8
   5a4e8:	80e3      	strh	r3, [r4, #6]
   5a4ea:	88a3      	ldrh	r3, [r4, #4]
   5a4ec:	07da      	lsls	r2, r3, #31
   5a4ee:	d517      	bpl.n	5a520 <nrf_poll+0xb8>
   5a4f0:	4630      	mov	r0, r6
   5a4f2:	f7ff faa4 	bl	59a3e <sock_can_read>
   5a4f6:	b338      	cbz	r0, 5a548 <nrf_poll+0xe0>
   5a4f8:	88e3      	ldrh	r3, [r4, #6]
   5a4fa:	f043 0301 	orr.w	r3, r3, #1
   5a4fe:	80e3      	strh	r3, [r4, #6]
   5a500:	4630      	mov	r0, r6
   5a502:	f7ff fa5e 	bl	599c2 <sock_is_stream>
   5a506:	b158      	cbz	r0, 5a520 <nrf_poll+0xb8>
   5a508:	4630      	mov	r0, r6
   5a50a:	f7ff fa89 	bl	59a20 <sock_is_closed>
   5a50e:	b138      	cbz	r0, 5a520 <nrf_poll+0xb8>
   5a510:	4630      	mov	r0, r6
   5a512:	f7ff fa89 	bl	59a28 <sock_has_error>
   5a516:	b918      	cbnz	r0, 5a520 <nrf_poll+0xb8>
   5a518:	88e3      	ldrh	r3, [r4, #6]
   5a51a:	f043 0301 	orr.w	r3, r3, #1
   5a51e:	80e3      	strh	r3, [r4, #6]
   5a520:	88a3      	ldrh	r3, [r4, #4]
   5a522:	075b      	lsls	r3, r3, #29
   5a524:	d516      	bpl.n	5a554 <nrf_poll+0xec>
   5a526:	4630      	mov	r0, r6
   5a528:	f7ff fa93 	bl	59a52 <sock_can_send>
   5a52c:	b190      	cbz	r0, 5a554 <nrf_poll+0xec>
   5a52e:	88e3      	ldrh	r3, [r4, #6]
   5a530:	f043 0304 	orr.w	r3, r3, #4
   5a534:	e7ca      	b.n	5a4cc <nrf_poll+0x64>
   5a536:	4630      	mov	r0, r6
   5a538:	f7ff fa72 	bl	59a20 <sock_is_closed>
   5a53c:	2800      	cmp	r0, #0
   5a53e:	d0d4      	beq.n	5a4ea <nrf_poll+0x82>
   5a540:	88e3      	ldrh	r3, [r4, #6]
   5a542:	f043 0310 	orr.w	r3, r3, #16
   5a546:	e7cf      	b.n	5a4e8 <nrf_poll+0x80>
   5a548:	4630      	mov	r0, r6
   5a54a:	f7ff fa7d 	bl	59a48 <sock_can_accept>
   5a54e:	2800      	cmp	r0, #0
   5a550:	d1d2      	bne.n	5a4f8 <nrf_poll+0x90>
   5a552:	e7d5      	b.n	5a500 <nrf_poll+0x98>
   5a554:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   5a558:	2b00      	cmp	r3, #0
   5a55a:	d1b8      	bne.n	5a4ce <nrf_poll+0x66>
   5a55c:	f10a 0a01 	add.w	sl, sl, #1
   5a560:	3408      	adds	r4, #8
   5a562:	e798      	b.n	5a496 <nrf_poll+0x2e>
   5a564:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   5a568:	2b00      	cmp	r3, #0
   5a56a:	db0a      	blt.n	5a582 <nrf_poll+0x11a>
   5a56c:	88fb      	ldrh	r3, [r7, #6]
   5a56e:	3501      	adds	r5, #1
   5a570:	f043 0308 	orr.w	r3, r3, #8
   5a574:	80fb      	strh	r3, [r7, #6]
   5a576:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
   5a57a:	f7f6 f943 	bl	50804 <sock_find>
   5a57e:	b100      	cbz	r0, 5a582 <nrf_poll+0x11a>
   5a580:	6186      	str	r6, [r0, #24]
   5a582:	3401      	adds	r4, #1
   5a584:	4544      	cmp	r4, r8
   5a586:	d1ed      	bne.n	5a564 <nrf_poll+0xfc>
   5a588:	2d00      	cmp	r5, #0
   5a58a:	d18f      	bne.n	5a4ac <nrf_poll+0x44>
   5a58c:	2004      	movs	r0, #4
   5a58e:	e773      	b.n	5a478 <nrf_poll+0x10>
   5a590:	462c      	mov	r4, r5
   5a592:	266e      	movs	r6, #110	; 0x6e
   5a594:	e7f6      	b.n	5a584 <nrf_poll+0x11c>

0005a596 <nrf_fcntl>:
   5a596:	b538      	push	{r3, r4, r5, lr}
   5a598:	460d      	mov	r5, r1
   5a59a:	4614      	mov	r4, r2
   5a59c:	f7f6 f932 	bl	50804 <sock_find>
   5a5a0:	b928      	cbnz	r0, 5a5ae <nrf_fcntl+0x18>
   5a5a2:	2009      	movs	r0, #9
   5a5a4:	f7fc feae 	bl	57304 <nrf_modem_os_errno_set>
   5a5a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   5a5ac:	e006      	b.n	5a5bc <nrf_fcntl+0x26>
   5a5ae:	2d03      	cmp	r5, #3
   5a5b0:	d003      	beq.n	5a5ba <nrf_fcntl+0x24>
   5a5b2:	2d04      	cmp	r5, #4
   5a5b4:	d004      	beq.n	5a5c0 <nrf_fcntl+0x2a>
   5a5b6:	2016      	movs	r0, #22
   5a5b8:	e7f4      	b.n	5a5a4 <nrf_fcntl+0xe>
   5a5ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
   5a5bc:	4618      	mov	r0, r3
   5a5be:	bd38      	pop	{r3, r4, r5, pc}
   5a5c0:	f034 0301 	bics.w	r3, r4, #1
   5a5c4:	d1f7      	bne.n	5a5b6 <nrf_fcntl+0x20>
   5a5c6:	6344      	str	r4, [r0, #52]	; 0x34
   5a5c8:	e7f8      	b.n	5a5bc <nrf_fcntl+0x26>

0005a5ca <rpc_af_to_nrf_af>:
   5a5ca:	1f43      	subs	r3, r0, #5
   5a5cc:	2b00      	cmp	r3, #0
   5a5ce:	d803      	bhi.n	5a5d8 <rpc_af_to_nrf_af+0xe>
   5a5d0:	e8df f003 	tbb	[pc, r3]
   5a5d4:	01          	.byte	0x01
   5a5d5:	00          	.byte	0x00
   5a5d6:	2003      	movs	r0, #3
   5a5d8:	4770      	bx	lr

0005a5da <nrf_type_to_rpc_type>:
   5a5da:	4770      	bx	lr

0005a5dc <nrf_proto_to_rpc_proto>:
   5a5dc:	2829      	cmp	r0, #41	; 0x29
   5a5de:	d015      	beq.n	5a60c <nrf_proto_to_rpc_proto+0x30>
   5a5e0:	dc05      	bgt.n	5a5ee <nrf_proto_to_rpc_proto+0x12>
   5a5e2:	2806      	cmp	r0, #6
   5a5e4:	d014      	beq.n	5a610 <nrf_proto_to_rpc_proto+0x34>
   5a5e6:	2811      	cmp	r0, #17
   5a5e8:	d014      	beq.n	5a614 <nrf_proto_to_rpc_proto+0x38>
   5a5ea:	b148      	cbz	r0, 5a600 <nrf_proto_to_rpc_proto+0x24>
   5a5ec:	4770      	bx	lr
   5a5ee:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   5a5f2:	d00d      	beq.n	5a610 <nrf_proto_to_rpc_proto+0x34>
   5a5f4:	f240 1311 	movw	r3, #273	; 0x111
   5a5f8:	4298      	cmp	r0, r3
   5a5fa:	d00b      	beq.n	5a614 <nrf_proto_to_rpc_proto+0x38>
   5a5fc:	28ff      	cmp	r0, #255	; 0xff
   5a5fe:	d10c      	bne.n	5a61a <nrf_proto_to_rpc_proto+0x3e>
   5a600:	2901      	cmp	r1, #1
   5a602:	d009      	beq.n	5a618 <nrf_proto_to_rpc_proto+0x3c>
   5a604:	2902      	cmp	r1, #2
   5a606:	bf08      	it	eq
   5a608:	2002      	moveq	r0, #2
   5a60a:	4770      	bx	lr
   5a60c:	2006      	movs	r0, #6
   5a60e:	4770      	bx	lr
   5a610:	2001      	movs	r0, #1
   5a612:	4770      	bx	lr
   5a614:	2002      	movs	r0, #2
   5a616:	4770      	bx	lr
   5a618:	4608      	mov	r0, r1
   5a61a:	4770      	bx	lr

0005a61c <nrf_sol_to_rpc_sol>:
   5a61c:	2829      	cmp	r0, #41	; 0x29
   5a61e:	d013      	beq.n	5a648 <nrf_sol_to_rpc_sol+0x2c>
   5a620:	dc09      	bgt.n	5a636 <nrf_sol_to_rpc_sol+0x1a>
   5a622:	2801      	cmp	r0, #1
   5a624:	d012      	beq.n	5a64c <nrf_sol_to_rpc_sol+0x30>
   5a626:	2806      	cmp	r0, #6
   5a628:	d012      	beq.n	5a650 <nrf_sol_to_rpc_sol+0x34>
   5a62a:	2800      	cmp	r0, #0
   5a62c:	bf14      	ite	ne
   5a62e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   5a632:	2004      	moveq	r0, #4
   5a634:	4770      	bx	lr
   5a636:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   5a63a:	d00b      	beq.n	5a654 <nrf_sol_to_rpc_sol+0x38>
   5a63c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   5a640:	bf18      	it	ne
   5a642:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   5a646:	4770      	bx	lr
   5a648:	2006      	movs	r0, #6
   5a64a:	4770      	bx	lr
   5a64c:	2008      	movs	r0, #8
   5a64e:	4770      	bx	lr
   5a650:	2001      	movs	r0, #1
   5a652:	4770      	bx	lr
   5a654:	f44f 7080 	mov.w	r0, #256	; 0x100
   5a658:	4770      	bx	lr

0005a65a <rpc_error_to_nrf_gai_errno>:
   5a65a:	b508      	push	{r3, lr}
   5a65c:	1f03      	subs	r3, r0, #4
   5a65e:	2b09      	cmp	r3, #9
   5a660:	d80f      	bhi.n	5a682 <rpc_error_to_nrf_gai_errno+0x28>
   5a662:	e8df f003 	tbb	[pc, r3]
   5a666:	0508      	.short	0x0508
   5a668:	0e0e0e11 	.word	0x0e0e0e11
   5a66c:	110e0e0e 	.word	0x110e0e0e
   5a670:	f06f 0063 	mvn.w	r0, #99	; 0x63
   5a674:	bd08      	pop	{r3, pc}
   5a676:	2073      	movs	r0, #115	; 0x73
   5a678:	f7fc fe44 	bl	57304 <nrf_modem_os_errno_set>
   5a67c:	f06f 000a 	mvn.w	r0, #10
   5a680:	e7f8      	b.n	5a674 <rpc_error_to_nrf_gai_errno+0x1a>
   5a682:	f7f6 fed1 	bl	51428 <rpc_error_to_nrf_errno>
   5a686:	e7f7      	b.n	5a678 <rpc_error_to_nrf_gai_errno+0x1e>
   5a688:	f06f 0001 	mvn.w	r0, #1
   5a68c:	e7f2      	b.n	5a674 <rpc_error_to_nrf_gai_errno+0x1a>

0005a68e <res_forward>:
   5a68e:	68c3      	ldr	r3, [r0, #12]
   5a690:	b113      	cbz	r3, 5a698 <res_forward+0xa>
   5a692:	6018      	str	r0, [r3, #0]
   5a694:	2001      	movs	r0, #1
   5a696:	4770      	bx	lr
   5a698:	4618      	mov	r0, r3
   5a69a:	4770      	bx	lr

0005a69c <rpc_dfu_event_handler>:
   5a69c:	b510      	push	{r4, lr}
   5a69e:	4604      	mov	r4, r0
   5a6a0:	6800      	ldr	r0, [r0, #0]
   5a6a2:	b108      	cbz	r0, 5a6a8 <rpc_dfu_event_handler+0xc>
   5a6a4:	f7ff f95d 	bl	59962 <rpc_client_msg_data_rx_free>
   5a6a8:	68e0      	ldr	r0, [r4, #12]
   5a6aa:	b108      	cbz	r0, 5a6b0 <rpc_dfu_event_handler+0x14>
   5a6ac:	6004      	str	r4, [r0, #0]
   5a6ae:	2001      	movs	r0, #1
   5a6b0:	bd10      	pop	{r4, pc}

0005a6b2 <nrf_modem_is_initialized>:
   5a6b2:	f7f7 bb23 	b.w	51cfc <nrf_modem_state_is_initialized>

0005a6b6 <mbedtls_heap_init>:
{
	mbedtls_memory_buffer_alloc_free();
}

static int mbedtls_heap_init(const struct device *dev)
{
   5a6b6:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	_heap_init();
   5a6b8:	f7f7 fb32 	bl	51d20 <_heap_init>

	return 0;
}
   5a6bc:	2000      	movs	r0, #0
   5a6be:	bd08      	pop	{r3, pc}

0005a6c0 <z_device_state_init>:
}
   5a6c0:	4770      	bx	lr

0005a6c2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   5a6c2:	b140      	cbz	r0, 5a6d6 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   5a6c4:	68c3      	ldr	r3, [r0, #12]
   5a6c6:	7858      	ldrb	r0, [r3, #1]
   5a6c8:	f010 0001 	ands.w	r0, r0, #1
   5a6cc:	bf1e      	ittt	ne
   5a6ce:	7818      	ldrbne	r0, [r3, #0]
   5a6d0:	fab0 f080 	clzne	r0, r0
   5a6d4:	0940      	lsrne	r0, r0, #5
}
   5a6d6:	4770      	bx	lr

0005a6d8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   5a6d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   5a6da:	ab0b      	add	r3, sp, #44	; 0x2c
   5a6dc:	9305      	str	r3, [sp, #20]
   5a6de:	9303      	str	r3, [sp, #12]
   5a6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   5a6e2:	2201      	movs	r2, #1
   5a6e4:	9302      	str	r3, [sp, #8]
   5a6e6:	2300      	movs	r3, #0
   5a6e8:	4618      	mov	r0, r3
   5a6ea:	e9cd 3300 	strd	r3, r3, [sp]
   5a6ee:	f7ea fd9f 	bl	45230 <z_impl_z_log_msg_runtime_vcreate>
}
   5a6f2:	b007      	add	sp, #28
   5a6f4:	f85d fb04 	ldr.w	pc, [sp], #4

0005a6f8 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   5a6f8:	f000 bc2e 	b.w	5af58 <memset>

0005a6fc <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   5a6fc:	f000 bbf2 	b.w	5aee4 <memcpy>

0005a700 <k_heap_init>:
{
   5a700:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   5a702:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   5a706:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   5a70a:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   5a70e:	f7fb b9f8 	b.w	55b02 <sys_heap_init>

0005a712 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   5a712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5a716:	b085      	sub	sp, #20
   5a718:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   5a71c:	4607      	mov	r7, r0
   5a71e:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   5a720:	4650      	mov	r0, sl
   5a722:	4621      	mov	r1, r4
{
   5a724:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   5a726:	f000 fb01 	bl	5ad2c <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   5a72a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   5a72e:	bf08      	it	eq
   5a730:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   5a734:	4605      	mov	r5, r0
   5a736:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   5a738:	bf04      	itt	eq
   5a73a:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   5a73e:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   5a742:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   5a746:	f04f 0320 	mov.w	r3, #32
   5a74a:	f3ef 8411 	mrs	r4, BASEPRI
   5a74e:	f383 8812 	msr	BASEPRI_MAX, r3
   5a752:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   5a756:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   5a75a:	464a      	mov	r2, r9
   5a75c:	4641      	mov	r1, r8
   5a75e:	4638      	mov	r0, r7
   5a760:	f7fb f968 	bl	55a34 <sys_heap_aligned_alloc>
   5a764:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   5a766:	f7f8 fda5 	bl	532b4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   5a76a:	9b03      	ldr	r3, [sp, #12]
   5a76c:	b13b      	cbz	r3, 5a77e <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   5a76e:	f384 8811 	msr	BASEPRI, r4
   5a772:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   5a776:	4618      	mov	r0, r3
   5a778:	b005      	add	sp, #20
   5a77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   5a77e:	1a28      	subs	r0, r5, r0
   5a780:	eb66 0101 	sbc.w	r1, r6, r1
   5a784:	2801      	cmp	r0, #1
   5a786:	f171 0200 	sbcs.w	r2, r1, #0
   5a78a:	dbf0      	blt.n	5a76e <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   5a78c:	e9cd 0100 	strd	r0, r1, [sp]
   5a790:	465a      	mov	r2, fp
   5a792:	4621      	mov	r1, r4
   5a794:	4650      	mov	r0, sl
   5a796:	f7f8 fa35 	bl	52c04 <z_pend_curr>
	__asm__ volatile(
   5a79a:	f04f 0320 	mov.w	r3, #32
   5a79e:	f3ef 8411 	mrs	r4, BASEPRI
   5a7a2:	f383 8812 	msr	BASEPRI_MAX, r3
   5a7a6:	f3bf 8f6f 	isb	sy
	return k;
   5a7aa:	e7d6      	b.n	5a75a <k_heap_aligned_alloc+0x48>

0005a7ac <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   5a7ac:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   5a7ae:	e9cd 2300 	strd	r2, r3, [sp]
   5a7b2:	460a      	mov	r2, r1
   5a7b4:	2104      	movs	r1, #4
   5a7b6:	f7ff ffac 	bl	5a712 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   5a7ba:	b003      	add	sp, #12
   5a7bc:	f85d fb04 	ldr.w	pc, [sp], #4

0005a7c0 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   5a7c0:	b538      	push	{r3, r4, r5, lr}
   5a7c2:	4604      	mov	r4, r0
   5a7c4:	f04f 0320 	mov.w	r3, #32
   5a7c8:	f3ef 8511 	mrs	r5, BASEPRI
   5a7cc:	f383 8812 	msr	BASEPRI_MAX, r3
   5a7d0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   5a7d4:	f7fb f8f6 	bl	559c4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   5a7d8:	f104 000c 	add.w	r0, r4, #12
   5a7dc:	f000 fa27 	bl	5ac2e <z_unpend_all>
   5a7e0:	b130      	cbz	r0, 5a7f0 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   5a7e2:	4629      	mov	r1, r5
   5a7e4:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   5a7e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   5a7ec:	f7f8 ba6e 	b.w	52ccc <z_reschedule>
	__asm__ volatile(
   5a7f0:	f385 8811 	msr	BASEPRI, r5
   5a7f4:	f3bf 8f6f 	isb	sy
}
   5a7f8:	bd38      	pop	{r3, r4, r5, pc}

0005a7fa <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   5a7fa:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   5a7fe:	4313      	orrs	r3, r2
   5a800:	f013 0303 	ands.w	r3, r3, #3
   5a804:	d10c      	bne.n	5a820 <create_free_list+0x26>
	slab->free_list = NULL;
   5a806:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   5a808:	6881      	ldr	r1, [r0, #8]
   5a80a:	4299      	cmp	r1, r3
   5a80c:	d801      	bhi.n	5a812 <create_free_list+0x18>
	return 0;
   5a80e:	2000      	movs	r0, #0
   5a810:	4770      	bx	lr
		*(char **)p = slab->free_list;
   5a812:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   5a814:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   5a816:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   5a818:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   5a81a:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   5a81c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   5a81e:	e7f3      	b.n	5a808 <create_free_list+0xe>
		return -EINVAL;
   5a820:	f06f 0015 	mvn.w	r0, #21
}
   5a824:	4770      	bx	lr

0005a826 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   5a826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5a828:	4604      	mov	r4, r0
   5a82a:	460d      	mov	r5, r1
	__asm__ volatile(
   5a82c:	f04f 0320 	mov.w	r3, #32
   5a830:	f3ef 8611 	mrs	r6, BASEPRI
   5a834:	f383 8812 	msr	BASEPRI_MAX, r3
   5a838:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   5a83c:	6947      	ldr	r7, [r0, #20]
   5a83e:	b977      	cbnz	r7, 5a85e <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   5a840:	f000 f9af 	bl	5aba2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   5a844:	b158      	cbz	r0, 5a85e <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   5a846:	682a      	ldr	r2, [r5, #0]
   5a848:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   5a84a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   5a84c:	f000 f999 	bl	5ab82 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   5a850:	4631      	mov	r1, r6
   5a852:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   5a856:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   5a85a:	f7f8 ba37 	b.w	52ccc <z_reschedule>
	**(char ***) mem = slab->free_list;
   5a85e:	682b      	ldr	r3, [r5, #0]
   5a860:	6962      	ldr	r2, [r4, #20]
   5a862:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   5a864:	682b      	ldr	r3, [r5, #0]
   5a866:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   5a868:	69a3      	ldr	r3, [r4, #24]
   5a86a:	3b01      	subs	r3, #1
   5a86c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   5a86e:	f386 8811 	msr	BASEPRI, r6
   5a872:	f3bf 8f6f 	isb	sy
}
   5a876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0005a878 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   5a878:	f3ef 8005 	mrs	r0, IPSR
}
   5a87c:	3800      	subs	r0, #0
   5a87e:	bf18      	it	ne
   5a880:	2001      	movne	r0, #1
   5a882:	4770      	bx	lr

0005a884 <z_impl_k_thread_name_set>:
}
   5a884:	f06f 0057 	mvn.w	r0, #87	; 0x57
   5a888:	4770      	bx	lr

0005a88a <k_thread_name_get>:
}
   5a88a:	2000      	movs	r0, #0
   5a88c:	4770      	bx	lr

0005a88e <z_impl_k_thread_start>:
	z_sched_start(thread);
   5a88e:	f7f8 ba2f 	b.w	52cf0 <z_sched_start>

0005a892 <z_pm_save_idle_exit>:
{
   5a892:	b508      	push	{r3, lr}
	pm_system_resume();
   5a894:	f7eb f802 	bl	4589c <pm_system_resume>
}
   5a898:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   5a89c:	f7fc bd15 	b.w	572ca <sys_clock_idle_exit>

0005a8a0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   5a8a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   5a8a4:	428b      	cmp	r3, r1
   5a8a6:	d001      	beq.n	5a8ac <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   5a8a8:	f7f8 b9ca 	b.w	52c40 <z_set_prio>
}
   5a8ac:	2000      	movs	r0, #0
   5a8ae:	4770      	bx	lr

0005a8b0 <z_impl_k_mutex_init>:
{
   5a8b0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   5a8b2:	2000      	movs	r0, #0
   5a8b4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   5a8b8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   5a8bc:	4770      	bx	lr

0005a8be <queue_insert>:
{
   5a8be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   5a8c2:	4699      	mov	r9, r3
   5a8c4:	4604      	mov	r4, r0
   5a8c6:	460d      	mov	r5, r1
   5a8c8:	4690      	mov	r8, r2
   5a8ca:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   5a8ce:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   5a8d2:	f04f 0220 	mov.w	r2, #32
   5a8d6:	f3ef 8711 	mrs	r7, BASEPRI
   5a8da:	f382 8812 	msr	BASEPRI_MAX, r2
   5a8de:	f3bf 8f6f 	isb	sy
	if (is_append) {
   5a8e2:	b103      	cbz	r3, 5a8e6 <queue_insert+0x28>
	return list->tail;
   5a8e4:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   5a8e6:	4630      	mov	r0, r6
   5a8e8:	f000 f95b 	bl	5aba2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   5a8ec:	b158      	cbz	r0, 5a906 <queue_insert+0x48>
   5a8ee:	2300      	movs	r3, #0
   5a8f0:	f8c0 8014 	str.w	r8, [r0, #20]
   5a8f4:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   5a8f6:	f000 f944 	bl	5ab82 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   5a8fa:	4630      	mov	r0, r6
   5a8fc:	4639      	mov	r1, r7
   5a8fe:	f7f8 f9e5 	bl	52ccc <z_reschedule>
		return 0;
   5a902:	2000      	movs	r0, #0
   5a904:	e00c      	b.n	5a920 <queue_insert+0x62>
	if (alloc) {
   5a906:	f1b9 0f00 	cmp.w	r9, #0
   5a90a:	d01b      	beq.n	5a944 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   5a90c:	2108      	movs	r1, #8
   5a90e:	f7f8 fd21 	bl	53354 <z_thread_aligned_alloc>
		if (anode == NULL) {
   5a912:	b938      	cbnz	r0, 5a924 <queue_insert+0x66>
	__asm__ volatile(
   5a914:	f387 8811 	msr	BASEPRI, r7
   5a918:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   5a91c:	f06f 000b 	mvn.w	r0, #11
}
   5a920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   5a924:	2201      	movs	r2, #1
		anode->data = data;
   5a926:	f8c0 8004 	str.w	r8, [r0, #4]
   5a92a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5a92c:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a92e:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   5a932:	b95d      	cbnz	r5, 5a94c <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a934:	6822      	ldr	r2, [r4, #0]
   5a936:	430a      	orrs	r2, r1
   5a938:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   5a93a:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   5a93c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   5a93e:	b96a      	cbnz	r2, 5a95c <queue_insert+0x9e>
	list->tail = node;
   5a940:	6060      	str	r0, [r4, #4]
}
   5a942:	e00b      	b.n	5a95c <queue_insert+0x9e>
}
   5a944:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   5a946:	f8c8 9000 	str.w	r9, [r8]
}
   5a94a:	e7ef      	b.n	5a92c <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   5a94c:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   5a94e:	2a03      	cmp	r2, #3
   5a950:	d810      	bhi.n	5a974 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a952:	6001      	str	r1, [r0, #0]
	return list->tail;
   5a954:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   5a956:	b939      	cbnz	r1, 5a968 <queue_insert+0xaa>
	list->head = node;
   5a958:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   5a95c:	2104      	movs	r1, #4
   5a95e:	f104 0010 	add.w	r0, r4, #16
   5a962:	f000 fa5f 	bl	5ae24 <z_handle_obj_poll_events>
   5a966:	e7c8      	b.n	5a8fa <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5a968:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a96a:	f002 0203 	and.w	r2, r2, #3
   5a96e:	4302      	orrs	r2, r0
   5a970:	600a      	str	r2, [r1, #0]
   5a972:	e7e5      	b.n	5a940 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   5a974:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a978:	430a      	orrs	r2, r1
   5a97a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5a97c:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   5a97e:	f002 0203 	and.w	r2, r2, #3
   5a982:	ea40 0302 	orr.w	r3, r0, r2
   5a986:	602b      	str	r3, [r5, #0]
}
   5a988:	e7e8      	b.n	5a95c <queue_insert+0x9e>

0005a98a <z_queue_node_peek>:
{
   5a98a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   5a98c:	4604      	mov	r4, r0
   5a98e:	b130      	cbz	r0, 5a99e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5a990:	6802      	ldr	r2, [r0, #0]
   5a992:	0793      	lsls	r3, r2, #30
   5a994:	d003      	beq.n	5a99e <z_queue_node_peek+0x14>
		ret = anode->data;
   5a996:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   5a998:	b109      	cbz	r1, 5a99e <z_queue_node_peek+0x14>
			k_free(anode);
   5a99a:	f000 fa64 	bl	5ae66 <k_free>
}
   5a99e:	4620      	mov	r0, r4
   5a9a0:	bd10      	pop	{r4, pc}

0005a9a2 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   5a9a2:	2301      	movs	r3, #1
{
   5a9a4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   5a9a6:	9300      	str	r3, [sp, #0]
   5a9a8:	2300      	movs	r3, #0
{
   5a9aa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   5a9ac:	4619      	mov	r1, r3
   5a9ae:	f7ff ff86 	bl	5a8be <queue_insert>
}
   5a9b2:	b003      	add	sp, #12
   5a9b4:	f85d fb04 	ldr.w	pc, [sp], #4

0005a9b8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   5a9b8:	b15a      	cbz	r2, 5a9d2 <z_impl_k_sem_init+0x1a>
   5a9ba:	428a      	cmp	r2, r1
   5a9bc:	d309      	bcc.n	5a9d2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   5a9be:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   5a9c2:	e9c0 1202 	strd	r1, r2, [r0, #8]
   5a9c6:	e9c0 0000 	strd	r0, r0, [r0]
   5a9ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   5a9ce:	2000      	movs	r0, #0
   5a9d0:	4770      	bx	lr
		return -EINVAL;
   5a9d2:	f06f 0015 	mvn.w	r0, #21
}
   5a9d6:	4770      	bx	lr

0005a9d8 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   5a9d8:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   5a9da:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   5a9dc:	408b      	lsls	r3, r1
   5a9de:	ea22 0303 	bic.w	r3, r2, r3
   5a9e2:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   5a9e4:	fa22 f001 	lsr.w	r0, r2, r1
}
   5a9e8:	f000 0001 	and.w	r0, r0, #1
   5a9ec:	4770      	bx	lr

0005a9ee <unschedule_locked>:
{
   5a9ee:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   5a9f0:	2103      	movs	r1, #3
{
   5a9f2:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   5a9f4:	300c      	adds	r0, #12
   5a9f6:	f7ff ffef 	bl	5a9d8 <flag_test_and_clear>
   5a9fa:	4604      	mov	r4, r0
   5a9fc:	b118      	cbz	r0, 5aa06 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   5a9fe:	f105 0010 	add.w	r0, r5, #16
   5aa02:	f000 f947 	bl	5ac94 <z_abort_timeout>
}
   5aa06:	4620      	mov	r0, r4
   5aa08:	bd38      	pop	{r3, r4, r5, pc}

0005aa0a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   5aa0a:	b120      	cbz	r0, 5aa16 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   5aa0c:	2200      	movs	r2, #0
   5aa0e:	30d0      	adds	r0, #208	; 0xd0
   5aa10:	4611      	mov	r1, r2
   5aa12:	f000 b91c 	b.w	5ac4e <z_sched_wake>
}
   5aa16:	4770      	bx	lr

0005aa18 <work_timeout>:
{
   5aa18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   5aa1a:	4604      	mov	r4, r0
	__asm__ volatile(
   5aa1c:	f04f 0320 	mov.w	r3, #32
   5aa20:	f3ef 8511 	mrs	r5, BASEPRI
   5aa24:	f383 8812 	msr	BASEPRI_MAX, r3
   5aa28:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   5aa2c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   5aa2e:	f1a0 0610 	sub.w	r6, r0, #16
   5aa32:	2103      	movs	r1, #3
   5aa34:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   5aa36:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   5aa38:	f7ff ffce 	bl	5a9d8 <flag_test_and_clear>
   5aa3c:	b128      	cbz	r0, 5aa4a <work_timeout+0x32>
		queue = dw->queue;
   5aa3e:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   5aa40:	4630      	mov	r0, r6
   5aa42:	a901      	add	r1, sp, #4
		queue = dw->queue;
   5aa44:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   5aa46:	f7f7 fe9d 	bl	52784 <submit_to_queue_locked>
	__asm__ volatile(
   5aa4a:	f385 8811 	msr	BASEPRI, r5
   5aa4e:	f3bf 8f6f 	isb	sy
}
   5aa52:	b002      	add	sp, #8
   5aa54:	bd70      	pop	{r4, r5, r6, pc}

0005aa56 <k_work_init>:
{
   5aa56:	b538      	push	{r3, r4, r5, lr}
   5aa58:	4604      	mov	r4, r0
   5aa5a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   5aa5c:	2210      	movs	r2, #16
   5aa5e:	2100      	movs	r1, #0
   5aa60:	f000 fa7a 	bl	5af58 <memset>
   5aa64:	6065      	str	r5, [r4, #4]
}
   5aa66:	bd38      	pop	{r3, r4, r5, pc}

0005aa68 <z_work_submit_to_queue>:
{
   5aa68:	b513      	push	{r0, r1, r4, lr}
   5aa6a:	9001      	str	r0, [sp, #4]
   5aa6c:	4608      	mov	r0, r1
	__asm__ volatile(
   5aa6e:	f04f 0320 	mov.w	r3, #32
   5aa72:	f3ef 8411 	mrs	r4, BASEPRI
   5aa76:	f383 8812 	msr	BASEPRI_MAX, r3
   5aa7a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   5aa7e:	a901      	add	r1, sp, #4
   5aa80:	f7f7 fe80 	bl	52784 <submit_to_queue_locked>
	__asm__ volatile(
   5aa84:	f384 8811 	msr	BASEPRI, r4
   5aa88:	f3bf 8f6f 	isb	sy
}
   5aa8c:	b002      	add	sp, #8
   5aa8e:	bd10      	pop	{r4, pc}

0005aa90 <k_work_submit_to_queue>:
{
   5aa90:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   5aa92:	f7ff ffe9 	bl	5aa68 <z_work_submit_to_queue>
	if (ret > 0) {
   5aa96:	1e04      	subs	r4, r0, #0
   5aa98:	dd09      	ble.n	5aaae <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   5aa9a:	f04f 0320 	mov.w	r3, #32
   5aa9e:	f3ef 8011 	mrs	r0, BASEPRI
   5aaa2:	f383 8812 	msr	BASEPRI_MAX, r3
   5aaa6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   5aaaa:	f000 f8aa 	bl	5ac02 <z_reschedule_irqlock>
}
   5aaae:	4620      	mov	r0, r4
   5aab0:	bd10      	pop	{r4, pc}

0005aab2 <k_work_init_delayable>:
{
   5aab2:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   5aab4:	2230      	movs	r2, #48	; 0x30
{
   5aab6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   5aab8:	2100      	movs	r1, #0
{
   5aaba:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   5aabc:	f000 fa4c 	bl	5af58 <memset>
   5aac0:	f44f 7380 	mov.w	r3, #256	; 0x100
   5aac4:	6065      	str	r5, [r4, #4]
   5aac6:	60e3      	str	r3, [r4, #12]
}
   5aac8:	bd38      	pop	{r3, r4, r5, pc}

0005aaca <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   5aaca:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   5aace:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   5aad0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   5aad2:	2300      	movs	r3, #0
	node->prev = NULL;
   5aad4:	e9c0 3300 	strd	r3, r3, [r0]
}
   5aad8:	4770      	bx	lr

0005aada <unpend_thread_no_timeout>:
{
   5aada:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   5aadc:	f7ff fff5 	bl	5aaca <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   5aae0:	7b43      	ldrb	r3, [r0, #13]
   5aae2:	f023 0302 	bic.w	r3, r3, #2
   5aae6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   5aae8:	2300      	movs	r3, #0
   5aaea:	6083      	str	r3, [r0, #8]
}
   5aaec:	bd08      	pop	{r3, pc}

0005aaee <z_thread_timeout>:
{
   5aaee:	4601      	mov	r1, r0
   5aaf0:	b510      	push	{r4, lr}
   5aaf2:	f04f 0320 	mov.w	r3, #32
   5aaf6:	f3ef 8411 	mrs	r4, BASEPRI
   5aafa:	f383 8812 	msr	BASEPRI_MAX, r3
   5aafe:	f3bf 8f6f 	isb	sy
		if (!killed) {
   5ab02:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   5ab06:	f013 0f28 	tst.w	r3, #40	; 0x28
   5ab0a:	d10d      	bne.n	5ab28 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   5ab0c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   5ab10:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   5ab12:	b10b      	cbz	r3, 5ab18 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   5ab14:	f7ff ffe1 	bl	5aada <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   5ab18:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   5ab1c:	f023 0314 	bic.w	r3, r3, #20
   5ab20:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   5ab24:	f7f7 ff96 	bl	52a54 <ready_thread>
	__asm__ volatile(
   5ab28:	f384 8811 	msr	BASEPRI, r4
   5ab2c:	f3bf 8f6f 	isb	sy
}
   5ab30:	bd10      	pop	{r4, pc}

0005ab32 <add_to_waitq_locked>:
{
   5ab32:	b538      	push	{r3, r4, r5, lr}
   5ab34:	4604      	mov	r4, r0
   5ab36:	460d      	mov	r5, r1
	unready_thread(thread);
   5ab38:	f7f7 ffc0 	bl	52abc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   5ab3c:	7b63      	ldrb	r3, [r4, #13]
   5ab3e:	f043 0302 	orr.w	r3, r3, #2
   5ab42:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   5ab44:	b1e5      	cbz	r5, 5ab80 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   5ab46:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   5ab48:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5ab4a:	429d      	cmp	r5, r3
   5ab4c:	d109      	bne.n	5ab62 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   5ab4e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   5ab50:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   5ab54:	601c      	str	r4, [r3, #0]
	list->tail = node;
   5ab56:	606c      	str	r4, [r5, #4]
}
   5ab58:	e012      	b.n	5ab80 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   5ab5a:	686a      	ldr	r2, [r5, #4]
   5ab5c:	4293      	cmp	r3, r2
   5ab5e:	d0f6      	beq.n	5ab4e <add_to_waitq_locked+0x1c>
   5ab60:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   5ab62:	2b00      	cmp	r3, #0
   5ab64:	d0f3      	beq.n	5ab4e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   5ab66:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   5ab6a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   5ab6e:	428a      	cmp	r2, r1
   5ab70:	d0f3      	beq.n	5ab5a <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   5ab72:	4291      	cmp	r1, r2
   5ab74:	ddf1      	ble.n	5ab5a <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   5ab76:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   5ab78:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   5ab7c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   5ab7e:	605c      	str	r4, [r3, #4]
}
   5ab80:	bd38      	pop	{r3, r4, r5, pc}

0005ab82 <z_ready_thread>:
{
   5ab82:	b510      	push	{r4, lr}
	__asm__ volatile(
   5ab84:	f04f 0320 	mov.w	r3, #32
   5ab88:	f3ef 8411 	mrs	r4, BASEPRI
   5ab8c:	f383 8812 	msr	BASEPRI_MAX, r3
   5ab90:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   5ab94:	f7f7 ff5e 	bl	52a54 <ready_thread>
	__asm__ volatile(
   5ab98:	f384 8811 	msr	BASEPRI, r4
   5ab9c:	f3bf 8f6f 	isb	sy
}
   5aba0:	bd10      	pop	{r4, pc}

0005aba2 <z_unpend_first_thread>:
{
   5aba2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   5aba4:	f04f 0320 	mov.w	r3, #32
   5aba8:	f3ef 8511 	mrs	r5, BASEPRI
   5abac:	f383 8812 	msr	BASEPRI_MAX, r3
   5abb0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   5abb4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5abb6:	42a0      	cmp	r0, r4
   5abb8:	d00d      	beq.n	5abd6 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   5abba:	b134      	cbz	r4, 5abca <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   5abbc:	4620      	mov	r0, r4
   5abbe:	f7ff ff8c 	bl	5aada <unpend_thread_no_timeout>
   5abc2:	f104 0018 	add.w	r0, r4, #24
   5abc6:	f000 f865 	bl	5ac94 <z_abort_timeout>
	__asm__ volatile(
   5abca:	f385 8811 	msr	BASEPRI, r5
   5abce:	f3bf 8f6f 	isb	sy
}
   5abd2:	4620      	mov	r0, r4
   5abd4:	bd38      	pop	{r3, r4, r5, pc}
   5abd6:	2400      	movs	r4, #0
   5abd8:	e7f7      	b.n	5abca <z_unpend_first_thread+0x28>

0005abda <z_unpend_thread>:
{
   5abda:	b510      	push	{r4, lr}
	__asm__ volatile(
   5abdc:	f04f 0320 	mov.w	r3, #32
   5abe0:	f3ef 8411 	mrs	r4, BASEPRI
   5abe4:	f383 8812 	msr	BASEPRI_MAX, r3
   5abe8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   5abec:	f7ff ff75 	bl	5aada <unpend_thread_no_timeout>
	__asm__ volatile(
   5abf0:	f384 8811 	msr	BASEPRI, r4
   5abf4:	f3bf 8f6f 	isb	sy
}
   5abf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   5abfc:	3018      	adds	r0, #24
   5abfe:	f000 b849 	b.w	5ac94 <z_abort_timeout>

0005ac02 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   5ac02:	4603      	mov	r3, r0
   5ac04:	b920      	cbnz	r0, 5ac10 <z_reschedule_irqlock+0xe>
   5ac06:	f3ef 8205 	mrs	r2, IPSR
   5ac0a:	b90a      	cbnz	r2, 5ac10 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   5ac0c:	f7eb b95c 	b.w	45ec8 <arch_swap>
   5ac10:	f383 8811 	msr	BASEPRI, r3
   5ac14:	f3bf 8f6f 	isb	sy
}
   5ac18:	4770      	bx	lr

0005ac1a <z_reschedule_unlocked>:
	__asm__ volatile(
   5ac1a:	f04f 0320 	mov.w	r3, #32
   5ac1e:	f3ef 8011 	mrs	r0, BASEPRI
   5ac22:	f383 8812 	msr	BASEPRI_MAX, r3
   5ac26:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   5ac2a:	f7ff bfea 	b.w	5ac02 <z_reschedule_irqlock>

0005ac2e <z_unpend_all>:
{
   5ac2e:	b538      	push	{r3, r4, r5, lr}
   5ac30:	4605      	mov	r5, r0
	int need_sched = 0;
   5ac32:	2000      	movs	r0, #0
	return list->head == list;
   5ac34:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5ac36:	42a5      	cmp	r5, r4
   5ac38:	d000      	beq.n	5ac3c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   5ac3a:	b904      	cbnz	r4, 5ac3e <z_unpend_all+0x10>
}
   5ac3c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   5ac3e:	4620      	mov	r0, r4
   5ac40:	f7ff ffcb 	bl	5abda <z_unpend_thread>
		z_ready_thread(thread);
   5ac44:	4620      	mov	r0, r4
   5ac46:	f7ff ff9c 	bl	5ab82 <z_ready_thread>
		need_sched = 1;
   5ac4a:	2001      	movs	r0, #1
   5ac4c:	e7f2      	b.n	5ac34 <z_unpend_all+0x6>

0005ac4e <z_sched_wake>:
{
   5ac4e:	b538      	push	{r3, r4, r5, lr}
   5ac50:	f04f 0320 	mov.w	r3, #32
   5ac54:	f3ef 8511 	mrs	r5, BASEPRI
   5ac58:	f383 8812 	msr	BASEPRI_MAX, r3
   5ac5c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   5ac60:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5ac62:	42a0      	cmp	r0, r4
   5ac64:	d012      	beq.n	5ac8c <z_sched_wake+0x3e>
		if (thread != NULL) {
   5ac66:	b19c      	cbz	r4, 5ac90 <z_sched_wake+0x42>
   5ac68:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   5ac6a:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   5ac6c:	4620      	mov	r0, r4
   5ac6e:	f7ff ff34 	bl	5aada <unpend_thread_no_timeout>
   5ac72:	f104 0018 	add.w	r0, r4, #24
   5ac76:	f000 f80d 	bl	5ac94 <z_abort_timeout>
			ready_thread(thread);
   5ac7a:	4620      	mov	r0, r4
   5ac7c:	f7f7 feea 	bl	52a54 <ready_thread>
			ret = true;
   5ac80:	2001      	movs	r0, #1
	__asm__ volatile(
   5ac82:	f385 8811 	msr	BASEPRI, r5
   5ac86:	f3bf 8f6f 	isb	sy
}
   5ac8a:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   5ac8c:	2000      	movs	r0, #0
   5ac8e:	e7f8      	b.n	5ac82 <z_sched_wake+0x34>
   5ac90:	4620      	mov	r0, r4
   5ac92:	e7f6      	b.n	5ac82 <z_sched_wake+0x34>

0005ac94 <z_abort_timeout>:
{
   5ac94:	b510      	push	{r4, lr}
	__asm__ volatile(
   5ac96:	f04f 0220 	mov.w	r2, #32
   5ac9a:	f3ef 8411 	mrs	r4, BASEPRI
   5ac9e:	f382 8812 	msr	BASEPRI_MAX, r2
   5aca2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   5aca6:	6803      	ldr	r3, [r0, #0]
   5aca8:	b13b      	cbz	r3, 5acba <z_abort_timeout+0x26>
			remove_timeout(to);
   5acaa:	f7f8 fa0d 	bl	530c8 <remove_timeout>
			ret = 0;
   5acae:	2000      	movs	r0, #0
	__asm__ volatile(
   5acb0:	f384 8811 	msr	BASEPRI, r4
   5acb4:	f3bf 8f6f 	isb	sy
}
   5acb8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   5acba:	f06f 0015 	mvn.w	r0, #21
   5acbe:	e7f7      	b.n	5acb0 <z_abort_timeout+0x1c>

0005acc0 <z_get_next_timeout_expiry>:
{
   5acc0:	b510      	push	{r4, lr}
	__asm__ volatile(
   5acc2:	f04f 0320 	mov.w	r3, #32
   5acc6:	f3ef 8411 	mrs	r4, BASEPRI
   5acca:	f383 8812 	msr	BASEPRI_MAX, r3
   5acce:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   5acd2:	f7f8 f9d1 	bl	53078 <next_timeout>
	__asm__ volatile(
   5acd6:	f384 8811 	msr	BASEPRI, r4
   5acda:	f3bf 8f6f 	isb	sy
}
   5acde:	bd10      	pop	{r4, pc}

0005ace0 <z_set_timeout_expiry>:
{
   5ace0:	b570      	push	{r4, r5, r6, lr}
   5ace2:	4604      	mov	r4, r0
   5ace4:	460d      	mov	r5, r1
	__asm__ volatile(
   5ace6:	f04f 0320 	mov.w	r3, #32
   5acea:	f3ef 8611 	mrs	r6, BASEPRI
   5acee:	f383 8812 	msr	BASEPRI_MAX, r3
   5acf2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   5acf6:	f7f8 f9bf 	bl	53078 <next_timeout>
			      || (ticks <= next_to);
   5acfa:	2801      	cmp	r0, #1
   5acfc:	dd07      	ble.n	5ad0e <z_set_timeout_expiry+0x2e>
   5acfe:	42a0      	cmp	r0, r4
   5ad00:	db05      	blt.n	5ad0e <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   5ad02:	42a0      	cmp	r0, r4
   5ad04:	4629      	mov	r1, r5
   5ad06:	bfa8      	it	ge
   5ad08:	4620      	movge	r0, r4
   5ad0a:	f7ee fda7 	bl	4985c <sys_clock_set_timeout>
	__asm__ volatile(
   5ad0e:	f386 8811 	msr	BASEPRI, r6
   5ad12:	f3bf 8f6f 	isb	sy
}
   5ad16:	bd70      	pop	{r4, r5, r6, pc}

0005ad18 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   5ad18:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   5ad1a:	f7f8 facb 	bl	532b4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   5ad1e:	bd08      	pop	{r3, pc}

0005ad20 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   5ad20:	f7f8 bac8 	b.w	532b4 <sys_clock_tick_get>

0005ad24 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   5ad24:	b108      	cbz	r0, 5ad2a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   5ad26:	f7ea b979 	b.w	4501c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   5ad2a:	4770      	bx	lr

0005ad2c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   5ad2c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   5ad30:	bf08      	it	eq
   5ad32:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   5ad36:	b538      	push	{r3, r4, r5, lr}
   5ad38:	460c      	mov	r4, r1
   5ad3a:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   5ad3c:	d014      	beq.n	5ad68 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   5ad3e:	4308      	orrs	r0, r1
   5ad40:	d103      	bne.n	5ad4a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   5ad42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   5ad46:	f7f8 bab5 	b.w	532b4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   5ad4a:	f06f 0001 	mvn.w	r0, #1
   5ad4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   5ad52:	1b40      	subs	r0, r0, r5
   5ad54:	eb63 0101 	sbc.w	r1, r3, r1
   5ad58:	2900      	cmp	r1, #0
   5ad5a:	da04      	bge.n	5ad66 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   5ad5c:	f7f8 faaa 	bl	532b4 <sys_clock_tick_get>
   5ad60:	1940      	adds	r0, r0, r5
   5ad62:	eb41 0104 	adc.w	r1, r1, r4
}
   5ad66:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   5ad68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5ad6c:	4601      	mov	r1, r0
   5ad6e:	e7fa      	b.n	5ad66 <sys_clock_timeout_end_calc+0x3a>

0005ad70 <signal_poll_event>:
{
   5ad70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   5ad74:	6884      	ldr	r4, [r0, #8]
{
   5ad76:	4605      	mov	r5, r0
   5ad78:	460e      	mov	r6, r1
	if (poller != NULL) {
   5ad7a:	b144      	cbz	r4, 5ad8e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   5ad7c:	7863      	ldrb	r3, [r4, #1]
   5ad7e:	2b01      	cmp	r3, #1
   5ad80:	d12e      	bne.n	5ade0 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   5ad82:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   5ad86:	f013 0302 	ands.w	r3, r3, #2
   5ad8a:	d10a      	bne.n	5ada2 <signal_poll_event+0x32>
		poller->is_polling = false;
   5ad8c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   5ad8e:	2000      	movs	r0, #0
	event->state |= state;
   5ad90:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   5ad92:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   5ad94:	f3c3 3286 	ubfx	r2, r3, #14, #7
   5ad98:	4316      	orrs	r6, r2
   5ad9a:	f366 3394 	bfi	r3, r6, #14, #7
   5ad9e:	60eb      	str	r3, [r5, #12]
	return retcode;
   5ada0:	e03e      	b.n	5ae20 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   5ada2:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   5ada6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   5adaa:	bf08      	it	eq
   5adac:	f112 0f02 	cmneq.w	r2, #2
   5adb0:	d032      	beq.n	5ae18 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   5adb2:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   5adb6:	4640      	mov	r0, r8
   5adb8:	f7ff ff0f 	bl	5abda <z_unpend_thread>
	arch_thread_return_value_set(thread,
   5adbc:	2e08      	cmp	r6, #8
   5adbe:	bf0c      	ite	eq
   5adc0:	f06f 0303 	mvneq.w	r3, #3
   5adc4:	2300      	movne	r3, #0
   5adc6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   5adc8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   5adcc:	06db      	lsls	r3, r3, #27
   5adce:	d109      	bne.n	5ade4 <signal_poll_event+0x74>
   5add0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   5add4:	b937      	cbnz	r7, 5ade4 <signal_poll_event+0x74>
	z_ready_thread(thread);
   5add6:	4640      	mov	r0, r8
   5add8:	f7ff fed3 	bl	5ab82 <z_ready_thread>
		poller->is_polling = false;
   5addc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   5adde:	e7d6      	b.n	5ad8e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   5ade0:	2b02      	cmp	r3, #2
   5ade2:	d001      	beq.n	5ade8 <signal_poll_event+0x78>
		poller->is_polling = false;
   5ade4:	2300      	movs	r3, #0
   5ade6:	e7d1      	b.n	5ad8c <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   5ade8:	7823      	ldrb	r3, [r4, #0]
   5adea:	2b00      	cmp	r3, #0
   5adec:	d0cf      	beq.n	5ad8e <signal_poll_event+0x1e>
   5adee:	f854 7c04 	ldr.w	r7, [r4, #-4]
   5adf2:	2f00      	cmp	r7, #0
   5adf4:	d0f2      	beq.n	5addc <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   5adf6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   5adfa:	f1a4 0914 	sub.w	r9, r4, #20
   5adfe:	f104 0014 	add.w	r0, r4, #20
   5ae02:	f7ff ff47 	bl	5ac94 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   5ae06:	4649      	mov	r1, r9
   5ae08:	4638      	mov	r0, r7
		twork->poll_result = 0;
   5ae0a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   5ae0e:	f7ff fe2b 	bl	5aa68 <z_work_submit_to_queue>
		poller->is_polling = false;
   5ae12:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   5ae16:	e7ba      	b.n	5ad8e <signal_poll_event+0x1e>
		poller->is_polling = false;
   5ae18:	2300      	movs	r3, #0
		return -EAGAIN;
   5ae1a:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   5ae1e:	7023      	strb	r3, [r4, #0]
}
   5ae20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0005ae24 <z_handle_obj_poll_events>:
{
   5ae24:	4603      	mov	r3, r0
	return list->head == list;
   5ae26:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   5ae28:	4283      	cmp	r3, r0
   5ae2a:	d008      	beq.n	5ae3e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   5ae2c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   5ae30:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   5ae32:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   5ae34:	2300      	movs	r3, #0
	node->prev = NULL;
   5ae36:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   5ae3a:	f7ff bf99 	b.w	5ad70 <signal_poll_event>
}
   5ae3e:	4770      	bx	lr

0005ae40 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   5ae40:	3204      	adds	r2, #4
{
   5ae42:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   5ae44:	4604      	mov	r4, r0
   5ae46:	d208      	bcs.n	5ae5a <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   5ae48:	2600      	movs	r6, #0
   5ae4a:	2700      	movs	r7, #0
   5ae4c:	f041 0104 	orr.w	r1, r1, #4
   5ae50:	e9cd 6700 	strd	r6, r7, [sp]
   5ae54:	f7ff fc5d 	bl	5a712 <k_heap_aligned_alloc>
	if (mem == NULL) {
   5ae58:	b910      	cbnz	r0, 5ae60 <z_heap_aligned_alloc+0x20>
		return NULL;
   5ae5a:	2000      	movs	r0, #0
}
   5ae5c:	b002      	add	sp, #8
   5ae5e:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   5ae60:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   5ae64:	e7fa      	b.n	5ae5c <z_heap_aligned_alloc+0x1c>

0005ae66 <k_free>:
	if (ptr != NULL) {
   5ae66:	b120      	cbz	r0, 5ae72 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   5ae68:	1f01      	subs	r1, r0, #4
   5ae6a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   5ae6e:	f7ff bca7 	b.w	5a7c0 <k_heap_free>
}
   5ae72:	4770      	bx	lr

0005ae74 <k_malloc>:
{
   5ae74:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   5ae76:	2004      	movs	r0, #4
   5ae78:	f7f8 ba5e 	b.w	53338 <k_aligned_alloc>

0005ae7c <k_calloc>:
{
   5ae7c:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   5ae7e:	fba0 5401 	umull	r5, r4, r0, r1
   5ae82:	b924      	cbnz	r4, 5ae8e <k_calloc+0x12>
	ret = k_malloc(bounds);
   5ae84:	4628      	mov	r0, r5
   5ae86:	f7ff fff5 	bl	5ae74 <k_malloc>
	if (ret != NULL) {
   5ae8a:	4606      	mov	r6, r0
   5ae8c:	b910      	cbnz	r0, 5ae94 <k_calloc+0x18>
		return NULL;
   5ae8e:	2600      	movs	r6, #0
}
   5ae90:	4630      	mov	r0, r6
   5ae92:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   5ae94:	462a      	mov	r2, r5
   5ae96:	4621      	mov	r1, r4
   5ae98:	f000 f85e 	bl	5af58 <memset>
   5ae9c:	e7f8      	b.n	5ae90 <k_calloc+0x14>

0005ae9e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   5ae9e:	4770      	bx	lr

0005aea0 <abs>:
   5aea0:	2800      	cmp	r0, #0
   5aea2:	bfb8      	it	lt
   5aea4:	4240      	neglt	r0, r0
   5aea6:	4770      	bx	lr

0005aea8 <memchr>:
   5aea8:	b2c9      	uxtb	r1, r1
   5aeaa:	4603      	mov	r3, r0
   5aeac:	4402      	add	r2, r0
   5aeae:	b510      	push	{r4, lr}
   5aeb0:	4293      	cmp	r3, r2
   5aeb2:	4618      	mov	r0, r3
   5aeb4:	d101      	bne.n	5aeba <memchr+0x12>
   5aeb6:	2000      	movs	r0, #0
   5aeb8:	e003      	b.n	5aec2 <memchr+0x1a>
   5aeba:	7804      	ldrb	r4, [r0, #0]
   5aebc:	3301      	adds	r3, #1
   5aebe:	428c      	cmp	r4, r1
   5aec0:	d1f6      	bne.n	5aeb0 <memchr+0x8>
   5aec2:	bd10      	pop	{r4, pc}

0005aec4 <memcmp>:
   5aec4:	3901      	subs	r1, #1
   5aec6:	4402      	add	r2, r0
   5aec8:	b510      	push	{r4, lr}
   5aeca:	4290      	cmp	r0, r2
   5aecc:	d101      	bne.n	5aed2 <memcmp+0xe>
   5aece:	2000      	movs	r0, #0
   5aed0:	e005      	b.n	5aede <memcmp+0x1a>
   5aed2:	7803      	ldrb	r3, [r0, #0]
   5aed4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   5aed8:	42a3      	cmp	r3, r4
   5aeda:	d001      	beq.n	5aee0 <memcmp+0x1c>
   5aedc:	1b18      	subs	r0, r3, r4
   5aede:	bd10      	pop	{r4, pc}
   5aee0:	3001      	adds	r0, #1
   5aee2:	e7f2      	b.n	5aeca <memcmp+0x6>

0005aee4 <memcpy>:
   5aee4:	440a      	add	r2, r1
   5aee6:	1e43      	subs	r3, r0, #1
   5aee8:	4291      	cmp	r1, r2
   5aeea:	d100      	bne.n	5aeee <memcpy+0xa>
   5aeec:	4770      	bx	lr
   5aeee:	b510      	push	{r4, lr}
   5aef0:	f811 4b01 	ldrb.w	r4, [r1], #1
   5aef4:	4291      	cmp	r1, r2
   5aef6:	f803 4f01 	strb.w	r4, [r3, #1]!
   5aefa:	d1f9      	bne.n	5aef0 <memcpy+0xc>
   5aefc:	bd10      	pop	{r4, pc}

0005aefe <__memcpy_chk>:
   5aefe:	429a      	cmp	r2, r3
   5af00:	b508      	push	{r3, lr}
   5af02:	d901      	bls.n	5af08 <__memcpy_chk+0xa>
   5af04:	f7eb fe22 	bl	46b4c <__chk_fail>
   5af08:	4281      	cmp	r1, r0
   5af0a:	d804      	bhi.n	5af16 <__memcpy_chk+0x18>
   5af0c:	188b      	adds	r3, r1, r2
   5af0e:	4298      	cmp	r0, r3
   5af10:	d3f8      	bcc.n	5af04 <__memcpy_chk+0x6>
   5af12:	4281      	cmp	r1, r0
   5af14:	d102      	bne.n	5af1c <__memcpy_chk+0x1e>
   5af16:	1883      	adds	r3, r0, r2
   5af18:	4299      	cmp	r1, r3
   5af1a:	d3f3      	bcc.n	5af04 <__memcpy_chk+0x6>
   5af1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   5af20:	f7ff bfe0 	b.w	5aee4 <memcpy>

0005af24 <memmove>:
   5af24:	4288      	cmp	r0, r1
   5af26:	b510      	push	{r4, lr}
   5af28:	eb01 0402 	add.w	r4, r1, r2
   5af2c:	d902      	bls.n	5af34 <memmove+0x10>
   5af2e:	4284      	cmp	r4, r0
   5af30:	4623      	mov	r3, r4
   5af32:	d807      	bhi.n	5af44 <memmove+0x20>
   5af34:	1e43      	subs	r3, r0, #1
   5af36:	42a1      	cmp	r1, r4
   5af38:	d008      	beq.n	5af4c <memmove+0x28>
   5af3a:	f811 2b01 	ldrb.w	r2, [r1], #1
   5af3e:	f803 2f01 	strb.w	r2, [r3, #1]!
   5af42:	e7f8      	b.n	5af36 <memmove+0x12>
   5af44:	4402      	add	r2, r0
   5af46:	4601      	mov	r1, r0
   5af48:	428a      	cmp	r2, r1
   5af4a:	d100      	bne.n	5af4e <memmove+0x2a>
   5af4c:	bd10      	pop	{r4, pc}
   5af4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   5af52:	f802 4d01 	strb.w	r4, [r2, #-1]!
   5af56:	e7f7      	b.n	5af48 <memmove+0x24>

0005af58 <memset>:
   5af58:	4402      	add	r2, r0
   5af5a:	4603      	mov	r3, r0
   5af5c:	4293      	cmp	r3, r2
   5af5e:	d100      	bne.n	5af62 <memset+0xa>
   5af60:	4770      	bx	lr
   5af62:	f803 1b01 	strb.w	r1, [r3], #1
   5af66:	e7f9      	b.n	5af5c <memset+0x4>

0005af68 <_calloc_r>:
   5af68:	b538      	push	{r3, r4, r5, lr}
   5af6a:	fb02 f501 	mul.w	r5, r2, r1
   5af6e:	4629      	mov	r1, r5
   5af70:	f7f8 fa9e 	bl	534b0 <_malloc_r>
   5af74:	4604      	mov	r4, r0
   5af76:	b118      	cbz	r0, 5af80 <_calloc_r+0x18>
   5af78:	462a      	mov	r2, r5
   5af7a:	2100      	movs	r1, #0
   5af7c:	f7ff ffec 	bl	5af58 <memset>
   5af80:	4620      	mov	r0, r4
   5af82:	bd38      	pop	{r3, r4, r5, pc}

0005af84 <__cvt>:
   5af84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5af88:	b085      	sub	sp, #20
   5af8a:	460c      	mov	r4, r1
   5af8c:	4690      	mov	r8, r2
   5af8e:	4619      	mov	r1, r3
   5af90:	ec57 6b10 	vmov	r6, r7, d0
   5af94:	2f00      	cmp	r7, #0
   5af96:	463b      	mov	r3, r7
   5af98:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   5af9c:	bfbc      	itt	lt
   5af9e:	f107 4300 	addlt.w	r3, r7, #2147483648	; 0x80000000
   5afa2:	4632      	movlt	r2, r6
   5afa4:	f02b 0a20 	bic.w	sl, fp, #32
   5afa8:	bfaf      	iteee	ge
   5afaa:	2300      	movge	r3, #0
   5afac:	461f      	movlt	r7, r3
   5afae:	4616      	movlt	r6, r2
   5afb0:	232d      	movlt	r3, #45	; 0x2d
   5afb2:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   5afb6:	700b      	strb	r3, [r1, #0]
   5afb8:	d005      	beq.n	5afc6 <__cvt+0x42>
   5afba:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   5afbe:	d100      	bne.n	5afc2 <__cvt+0x3e>
   5afc0:	3401      	adds	r4, #1
   5afc2:	2102      	movs	r1, #2
   5afc4:	e000      	b.n	5afc8 <__cvt+0x44>
   5afc6:	2103      	movs	r1, #3
   5afc8:	ab03      	add	r3, sp, #12
   5afca:	4622      	mov	r2, r4
   5afcc:	9301      	str	r3, [sp, #4]
   5afce:	ab02      	add	r3, sp, #8
   5afd0:	ec47 6b10 	vmov	d0, r6, r7
   5afd4:	9300      	str	r3, [sp, #0]
   5afd6:	464b      	mov	r3, r9
   5afd8:	f7e6 ff16 	bl	41e08 <_dtoa_r>
   5afdc:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   5afe0:	4605      	mov	r5, r0
   5afe2:	d119      	bne.n	5b018 <__cvt+0x94>
   5afe4:	f018 0f01 	tst.w	r8, #1
   5afe8:	d00e      	beq.n	5b008 <__cvt+0x84>
   5afea:	eb05 0804 	add.w	r8, r5, r4
   5afee:	2200      	movs	r2, #0
   5aff0:	2300      	movs	r3, #0
   5aff2:	4630      	mov	r0, r6
   5aff4:	4639      	mov	r1, r7
   5aff6:	f7e5 fccb 	bl	40990 <__aeabi_dcmpeq>
   5affa:	b108      	cbz	r0, 5b000 <__cvt+0x7c>
   5affc:	f8cd 800c 	str.w	r8, [sp, #12]
   5b000:	2230      	movs	r2, #48	; 0x30
   5b002:	9b03      	ldr	r3, [sp, #12]
   5b004:	4543      	cmp	r3, r8
   5b006:	d321      	bcc.n	5b04c <__cvt+0xc8>
   5b008:	9b03      	ldr	r3, [sp, #12]
   5b00a:	4628      	mov	r0, r5
   5b00c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   5b00e:	1b5b      	subs	r3, r3, r5
   5b010:	6013      	str	r3, [r2, #0]
   5b012:	b005      	add	sp, #20
   5b014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5b018:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   5b01c:	d0e2      	beq.n	5afe4 <__cvt+0x60>
   5b01e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   5b022:	eb00 0804 	add.w	r8, r0, r4
   5b026:	d1e2      	bne.n	5afee <__cvt+0x6a>
   5b028:	7803      	ldrb	r3, [r0, #0]
   5b02a:	2b30      	cmp	r3, #48	; 0x30
   5b02c:	d10a      	bne.n	5b044 <__cvt+0xc0>
   5b02e:	2200      	movs	r2, #0
   5b030:	2300      	movs	r3, #0
   5b032:	4630      	mov	r0, r6
   5b034:	4639      	mov	r1, r7
   5b036:	f7e5 fcab 	bl	40990 <__aeabi_dcmpeq>
   5b03a:	b918      	cbnz	r0, 5b044 <__cvt+0xc0>
   5b03c:	f1c4 0401 	rsb	r4, r4, #1
   5b040:	f8c9 4000 	str.w	r4, [r9]
   5b044:	f8d9 3000 	ldr.w	r3, [r9]
   5b048:	4498      	add	r8, r3
   5b04a:	e7d0      	b.n	5afee <__cvt+0x6a>
   5b04c:	1c59      	adds	r1, r3, #1
   5b04e:	9103      	str	r1, [sp, #12]
   5b050:	701a      	strb	r2, [r3, #0]
   5b052:	e7d6      	b.n	5b002 <__cvt+0x7e>

0005b054 <__exponent>:
   5b054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   5b056:	2900      	cmp	r1, #0
   5b058:	7002      	strb	r2, [r0, #0]
   5b05a:	bfba      	itte	lt
   5b05c:	4249      	neglt	r1, r1
   5b05e:	232d      	movlt	r3, #45	; 0x2d
   5b060:	232b      	movge	r3, #43	; 0x2b
   5b062:	2909      	cmp	r1, #9
   5b064:	7043      	strb	r3, [r0, #1]
   5b066:	dd28      	ble.n	5b0ba <__exponent+0x66>
   5b068:	f10d 0307 	add.w	r3, sp, #7
   5b06c:	270a      	movs	r7, #10
   5b06e:	461d      	mov	r5, r3
   5b070:	461a      	mov	r2, r3
   5b072:	3b01      	subs	r3, #1
   5b074:	fbb1 f6f7 	udiv	r6, r1, r7
   5b078:	fb07 1416 	mls	r4, r7, r6, r1
   5b07c:	3430      	adds	r4, #48	; 0x30
   5b07e:	f802 4c01 	strb.w	r4, [r2, #-1]
   5b082:	460c      	mov	r4, r1
   5b084:	4631      	mov	r1, r6
   5b086:	2c63      	cmp	r4, #99	; 0x63
   5b088:	dcf2      	bgt.n	5b070 <__exponent+0x1c>
   5b08a:	3130      	adds	r1, #48	; 0x30
   5b08c:	1e94      	subs	r4, r2, #2
   5b08e:	f803 1c01 	strb.w	r1, [r3, #-1]
   5b092:	1c41      	adds	r1, r0, #1
   5b094:	4623      	mov	r3, r4
   5b096:	42ab      	cmp	r3, r5
   5b098:	d30a      	bcc.n	5b0b0 <__exponent+0x5c>
   5b09a:	f10d 0309 	add.w	r3, sp, #9
   5b09e:	1a9b      	subs	r3, r3, r2
   5b0a0:	42ac      	cmp	r4, r5
   5b0a2:	bf88      	it	hi
   5b0a4:	2300      	movhi	r3, #0
   5b0a6:	3302      	adds	r3, #2
   5b0a8:	4403      	add	r3, r0
   5b0aa:	1a18      	subs	r0, r3, r0
   5b0ac:	b003      	add	sp, #12
   5b0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   5b0b0:	f813 6b01 	ldrb.w	r6, [r3], #1
   5b0b4:	f801 6f01 	strb.w	r6, [r1, #1]!
   5b0b8:	e7ed      	b.n	5b096 <__exponent+0x42>
   5b0ba:	2330      	movs	r3, #48	; 0x30
   5b0bc:	3130      	adds	r1, #48	; 0x30
   5b0be:	7083      	strb	r3, [r0, #2]
   5b0c0:	1d03      	adds	r3, r0, #4
   5b0c2:	70c1      	strb	r1, [r0, #3]
   5b0c4:	e7f1      	b.n	5b0aa <__exponent+0x56>

0005b0c6 <_printf_common>:
   5b0c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   5b0ca:	4616      	mov	r6, r2
   5b0cc:	4698      	mov	r8, r3
   5b0ce:	688a      	ldr	r2, [r1, #8]
   5b0d0:	4607      	mov	r7, r0
   5b0d2:	690b      	ldr	r3, [r1, #16]
   5b0d4:	460c      	mov	r4, r1
   5b0d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
   5b0da:	4293      	cmp	r3, r2
   5b0dc:	bfb8      	it	lt
   5b0de:	4613      	movlt	r3, r2
   5b0e0:	6033      	str	r3, [r6, #0]
   5b0e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   5b0e6:	b10a      	cbz	r2, 5b0ec <_printf_common+0x26>
   5b0e8:	3301      	adds	r3, #1
   5b0ea:	6033      	str	r3, [r6, #0]
   5b0ec:	6823      	ldr	r3, [r4, #0]
   5b0ee:	0699      	lsls	r1, r3, #26
   5b0f0:	bf42      	ittt	mi
   5b0f2:	6833      	ldrmi	r3, [r6, #0]
   5b0f4:	3302      	addmi	r3, #2
   5b0f6:	6033      	strmi	r3, [r6, #0]
   5b0f8:	6825      	ldr	r5, [r4, #0]
   5b0fa:	f015 0506 	ands.w	r5, r5, #6
   5b0fe:	d106      	bne.n	5b10e <_printf_common+0x48>
   5b100:	f104 0a19 	add.w	sl, r4, #25
   5b104:	68e3      	ldr	r3, [r4, #12]
   5b106:	6832      	ldr	r2, [r6, #0]
   5b108:	1a9b      	subs	r3, r3, r2
   5b10a:	42ab      	cmp	r3, r5
   5b10c:	dc2b      	bgt.n	5b166 <_printf_common+0xa0>
   5b10e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   5b112:	6822      	ldr	r2, [r4, #0]
   5b114:	3b00      	subs	r3, #0
   5b116:	bf18      	it	ne
   5b118:	2301      	movne	r3, #1
   5b11a:	0692      	lsls	r2, r2, #26
   5b11c:	d430      	bmi.n	5b180 <_printf_common+0xba>
   5b11e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   5b122:	4641      	mov	r1, r8
   5b124:	4638      	mov	r0, r7
   5b126:	47c8      	blx	r9
   5b128:	3001      	adds	r0, #1
   5b12a:	d023      	beq.n	5b174 <_printf_common+0xae>
   5b12c:	6823      	ldr	r3, [r4, #0]
   5b12e:	341a      	adds	r4, #26
   5b130:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   5b134:	f003 0306 	and.w	r3, r3, #6
   5b138:	2b04      	cmp	r3, #4
   5b13a:	bf0a      	itet	eq
   5b13c:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   5b140:	2500      	movne	r5, #0
   5b142:	6833      	ldreq	r3, [r6, #0]
   5b144:	f04f 0600 	mov.w	r6, #0
   5b148:	bf08      	it	eq
   5b14a:	1aed      	subeq	r5, r5, r3
   5b14c:	f854 3c12 	ldr.w	r3, [r4, #-18]
   5b150:	bf08      	it	eq
   5b152:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   5b156:	4293      	cmp	r3, r2
   5b158:	bfc4      	itt	gt
   5b15a:	1a9b      	subgt	r3, r3, r2
   5b15c:	18ed      	addgt	r5, r5, r3
   5b15e:	42b5      	cmp	r5, r6
   5b160:	d11a      	bne.n	5b198 <_printf_common+0xd2>
   5b162:	2000      	movs	r0, #0
   5b164:	e008      	b.n	5b178 <_printf_common+0xb2>
   5b166:	2301      	movs	r3, #1
   5b168:	4652      	mov	r2, sl
   5b16a:	4641      	mov	r1, r8
   5b16c:	4638      	mov	r0, r7
   5b16e:	47c8      	blx	r9
   5b170:	3001      	adds	r0, #1
   5b172:	d103      	bne.n	5b17c <_printf_common+0xb6>
   5b174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   5b17c:	3501      	adds	r5, #1
   5b17e:	e7c1      	b.n	5b104 <_printf_common+0x3e>
   5b180:	18e1      	adds	r1, r4, r3
   5b182:	1c5a      	adds	r2, r3, #1
   5b184:	2030      	movs	r0, #48	; 0x30
   5b186:	3302      	adds	r3, #2
   5b188:	4422      	add	r2, r4
   5b18a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   5b18e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   5b192:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   5b196:	e7c2      	b.n	5b11e <_printf_common+0x58>
   5b198:	2301      	movs	r3, #1
   5b19a:	4622      	mov	r2, r4
   5b19c:	4641      	mov	r1, r8
   5b19e:	4638      	mov	r0, r7
   5b1a0:	47c8      	blx	r9
   5b1a2:	3001      	adds	r0, #1
   5b1a4:	d0e6      	beq.n	5b174 <_printf_common+0xae>
   5b1a6:	3601      	adds	r6, #1
   5b1a8:	e7d9      	b.n	5b15e <_printf_common+0x98>

0005b1aa <__sprintf_chk>:
   5b1aa:	b408      	push	{r3}
   5b1ac:	b517      	push	{r0, r1, r2, r4, lr}
   5b1ae:	ab05      	add	r3, sp, #20
   5b1b0:	1e14      	subs	r4, r2, #0
   5b1b2:	f853 1b04 	ldr.w	r1, [r3], #4
   5b1b6:	9301      	str	r3, [sp, #4]
   5b1b8:	da07      	bge.n	5b1ca <__sprintf_chk+0x20>
   5b1ba:	461a      	mov	r2, r3
   5b1bc:	f7f8 ff0a 	bl	53fd4 <vsiprintf>
   5b1c0:	b003      	add	sp, #12
   5b1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   5b1c6:	b001      	add	sp, #4
   5b1c8:	4770      	bx	lr
   5b1ca:	460a      	mov	r2, r1
   5b1cc:	4621      	mov	r1, r4
   5b1ce:	f7f8 fedd 	bl	53f8c <vsniprintf>
   5b1d2:	2800      	cmp	r0, #0
   5b1d4:	dbf4      	blt.n	5b1c0 <__sprintf_chk+0x16>
   5b1d6:	42a0      	cmp	r0, r4
   5b1d8:	d3f2      	bcc.n	5b1c0 <__sprintf_chk+0x16>
   5b1da:	f7eb fcb7 	bl	46b4c <__chk_fail>

0005b1de <__sread>:
   5b1de:	b510      	push	{r4, lr}
   5b1e0:	460c      	mov	r4, r1
   5b1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   5b1e6:	f7f9 fe5d 	bl	54ea4 <_read_r>
   5b1ea:	2800      	cmp	r0, #0
   5b1ec:	bfab      	itete	ge
   5b1ee:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   5b1f0:	89a3      	ldrhlt	r3, [r4, #12]
   5b1f2:	181b      	addge	r3, r3, r0
   5b1f4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   5b1f8:	bfac      	ite	ge
   5b1fa:	6563      	strge	r3, [r4, #84]	; 0x54
   5b1fc:	81a3      	strhlt	r3, [r4, #12]
   5b1fe:	bd10      	pop	{r4, pc}

0005b200 <__seofread>:
   5b200:	2000      	movs	r0, #0
   5b202:	4770      	bx	lr

0005b204 <__swrite>:
   5b204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   5b208:	461f      	mov	r7, r3
   5b20a:	898b      	ldrh	r3, [r1, #12]
   5b20c:	4605      	mov	r5, r0
   5b20e:	460c      	mov	r4, r1
   5b210:	05db      	lsls	r3, r3, #23
   5b212:	4616      	mov	r6, r2
   5b214:	d505      	bpl.n	5b222 <__swrite+0x1e>
   5b216:	2302      	movs	r3, #2
   5b218:	2200      	movs	r2, #0
   5b21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   5b21e:	f7f8 ff37 	bl	54090 <_lseek_r>
   5b222:	89a3      	ldrh	r3, [r4, #12]
   5b224:	4632      	mov	r2, r6
   5b226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   5b22a:	4628      	mov	r0, r5
   5b22c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   5b230:	81a3      	strh	r3, [r4, #12]
   5b232:	463b      	mov	r3, r7
   5b234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   5b238:	f7f8 bf04 	b.w	54044 <_write_r>

0005b23c <__sseek>:
   5b23c:	b510      	push	{r4, lr}
   5b23e:	460c      	mov	r4, r1
   5b240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   5b244:	f7f8 ff24 	bl	54090 <_lseek_r>
   5b248:	1c43      	adds	r3, r0, #1
   5b24a:	89a3      	ldrh	r3, [r4, #12]
   5b24c:	bf15      	itete	ne
   5b24e:	6560      	strne	r0, [r4, #84]	; 0x54
   5b250:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   5b254:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   5b258:	81a3      	strheq	r3, [r4, #12]
   5b25a:	bf18      	it	ne
   5b25c:	81a3      	strhne	r3, [r4, #12]
   5b25e:	bd10      	pop	{r4, pc}

0005b260 <__sclose>:
   5b260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   5b264:	f7f8 bf00 	b.w	54068 <_close_r>

0005b268 <__strcat_chk>:
   5b268:	b538      	push	{r3, r4, r5, lr}
   5b26a:	4604      	mov	r4, r0
   5b26c:	4623      	mov	r3, r4
   5b26e:	f814 5b01 	ldrb.w	r5, [r4], #1
   5b272:	b935      	cbnz	r5, 5b282 <__strcat_chk+0x1a>
   5b274:	3901      	subs	r1, #1
   5b276:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   5b27a:	b93c      	cbnz	r4, 5b28c <__strcat_chk+0x24>
   5b27c:	b112      	cbz	r2, 5b284 <__strcat_chk+0x1c>
   5b27e:	701c      	strb	r4, [r3, #0]
   5b280:	bd38      	pop	{r3, r4, r5, pc}
   5b282:	b90a      	cbnz	r2, 5b288 <__strcat_chk+0x20>
   5b284:	f7eb fc62 	bl	46b4c <__chk_fail>
   5b288:	3a01      	subs	r2, #1
   5b28a:	e7ef      	b.n	5b26c <__strcat_chk+0x4>
   5b28c:	2a00      	cmp	r2, #0
   5b28e:	d0f9      	beq.n	5b284 <__strcat_chk+0x1c>
   5b290:	3a01      	subs	r2, #1
   5b292:	f803 4b01 	strb.w	r4, [r3], #1
   5b296:	e7ee      	b.n	5b276 <__strcat_chk+0xe>

0005b298 <strchr>:
   5b298:	b2c9      	uxtb	r1, r1
   5b29a:	4603      	mov	r3, r0
   5b29c:	4618      	mov	r0, r3
   5b29e:	f813 2b01 	ldrb.w	r2, [r3], #1
   5b2a2:	b112      	cbz	r2, 5b2aa <strchr+0x12>
   5b2a4:	428a      	cmp	r2, r1
   5b2a6:	d1f9      	bne.n	5b29c <strchr+0x4>
   5b2a8:	4770      	bx	lr
   5b2aa:	2900      	cmp	r1, #0
   5b2ac:	bf18      	it	ne
   5b2ae:	2000      	movne	r0, #0
   5b2b0:	4770      	bx	lr

0005b2b2 <strcpy>:
   5b2b2:	4603      	mov	r3, r0
   5b2b4:	f811 2b01 	ldrb.w	r2, [r1], #1
   5b2b8:	f803 2b01 	strb.w	r2, [r3], #1
   5b2bc:	2a00      	cmp	r2, #0
   5b2be:	d1f9      	bne.n	5b2b4 <strcpy+0x2>
   5b2c0:	4770      	bx	lr

0005b2c2 <__strcpy_chk>:
   5b2c2:	b570      	push	{r4, r5, r6, lr}
   5b2c4:	4605      	mov	r5, r0
   5b2c6:	4608      	mov	r0, r1
   5b2c8:	4616      	mov	r6, r2
   5b2ca:	460c      	mov	r4, r1
   5b2cc:	f7e5 fd92 	bl	40df4 <strlen>
   5b2d0:	1c42      	adds	r2, r0, #1
   5b2d2:	42b2      	cmp	r2, r6
   5b2d4:	d901      	bls.n	5b2da <__strcpy_chk+0x18>
   5b2d6:	f7eb fc39 	bl	46b4c <__chk_fail>
   5b2da:	42ac      	cmp	r4, r5
   5b2dc:	d804      	bhi.n	5b2e8 <__strcpy_chk+0x26>
   5b2de:	18a3      	adds	r3, r4, r2
   5b2e0:	429d      	cmp	r5, r3
   5b2e2:	d3f8      	bcc.n	5b2d6 <__strcpy_chk+0x14>
   5b2e4:	42ac      	cmp	r4, r5
   5b2e6:	d102      	bne.n	5b2ee <__strcpy_chk+0x2c>
   5b2e8:	18ab      	adds	r3, r5, r2
   5b2ea:	429c      	cmp	r4, r3
   5b2ec:	d3f3      	bcc.n	5b2d6 <__strcpy_chk+0x14>
   5b2ee:	4621      	mov	r1, r4
   5b2f0:	4628      	mov	r0, r5
   5b2f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   5b2f6:	f7ff bdf5 	b.w	5aee4 <memcpy>

0005b2fa <strncmp>:
   5b2fa:	b510      	push	{r4, lr}
   5b2fc:	b16a      	cbz	r2, 5b31a <strncmp+0x20>
   5b2fe:	3901      	subs	r1, #1
   5b300:	1884      	adds	r4, r0, r2
   5b302:	f810 2b01 	ldrb.w	r2, [r0], #1
   5b306:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   5b30a:	429a      	cmp	r2, r3
   5b30c:	d103      	bne.n	5b316 <strncmp+0x1c>
   5b30e:	42a0      	cmp	r0, r4
   5b310:	d001      	beq.n	5b316 <strncmp+0x1c>
   5b312:	2a00      	cmp	r2, #0
   5b314:	d1f5      	bne.n	5b302 <strncmp+0x8>
   5b316:	1ad0      	subs	r0, r2, r3
   5b318:	bd10      	pop	{r4, pc}
   5b31a:	4610      	mov	r0, r2
   5b31c:	e7fc      	b.n	5b318 <strncmp+0x1e>

0005b31e <strncpy>:
   5b31e:	3901      	subs	r1, #1
   5b320:	4603      	mov	r3, r0
   5b322:	b510      	push	{r4, lr}
   5b324:	b132      	cbz	r2, 5b334 <strncpy+0x16>
   5b326:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   5b32a:	3a01      	subs	r2, #1
   5b32c:	f803 4b01 	strb.w	r4, [r3], #1
   5b330:	2c00      	cmp	r4, #0
   5b332:	d1f7      	bne.n	5b324 <strncpy+0x6>
   5b334:	441a      	add	r2, r3
   5b336:	2100      	movs	r1, #0
   5b338:	4293      	cmp	r3, r2
   5b33a:	d100      	bne.n	5b33e <strncpy+0x20>
   5b33c:	bd10      	pop	{r4, pc}
   5b33e:	f803 1b01 	strb.w	r1, [r3], #1
   5b342:	e7f9      	b.n	5b338 <strncpy+0x1a>

0005b344 <strnlen>:
   5b344:	4602      	mov	r2, r0
   5b346:	4401      	add	r1, r0
   5b348:	b510      	push	{r4, lr}
   5b34a:	428a      	cmp	r2, r1
   5b34c:	4613      	mov	r3, r2
   5b34e:	d003      	beq.n	5b358 <strnlen+0x14>
   5b350:	781c      	ldrb	r4, [r3, #0]
   5b352:	3201      	adds	r2, #1
   5b354:	2c00      	cmp	r4, #0
   5b356:	d1f8      	bne.n	5b34a <strnlen+0x6>
   5b358:	1a18      	subs	r0, r3, r0
   5b35a:	bd10      	pop	{r4, pc}

0005b35c <strstr>:
   5b35c:	780a      	ldrb	r2, [r1, #0]
   5b35e:	b570      	push	{r4, r5, r6, lr}
   5b360:	b96a      	cbnz	r2, 5b37e <strstr+0x22>
   5b362:	bd70      	pop	{r4, r5, r6, pc}
   5b364:	429a      	cmp	r2, r3
   5b366:	d109      	bne.n	5b37c <strstr+0x20>
   5b368:	460c      	mov	r4, r1
   5b36a:	4605      	mov	r5, r0
   5b36c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   5b370:	2b00      	cmp	r3, #0
   5b372:	d0f6      	beq.n	5b362 <strstr+0x6>
   5b374:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   5b378:	429e      	cmp	r6, r3
   5b37a:	d0f7      	beq.n	5b36c <strstr+0x10>
   5b37c:	3001      	adds	r0, #1
   5b37e:	7803      	ldrb	r3, [r0, #0]
   5b380:	2b00      	cmp	r3, #0
   5b382:	d1ef      	bne.n	5b364 <strstr+0x8>
   5b384:	4618      	mov	r0, r3
   5b386:	e7ec      	b.n	5b362 <strstr+0x6>

0005b388 <_strtol_r>:
   5b388:	f7f8 bc5e 	b.w	53c48 <_strtol_l.constprop.0>

0005b38c <_strtoul_r>:
   5b38c:	f7f8 bd82 	b.w	53e94 <_strtoul_l.constprop.0>

0005b390 <_vsniprintf_r>:
   5b390:	b530      	push	{r4, r5, lr}
   5b392:	4614      	mov	r4, r2
   5b394:	b09b      	sub	sp, #108	; 0x6c
   5b396:	4605      	mov	r5, r0
   5b398:	461a      	mov	r2, r3
   5b39a:	2c00      	cmp	r4, #0
   5b39c:	da05      	bge.n	5b3aa <_vsniprintf_r+0x1a>
   5b39e:	238b      	movs	r3, #139	; 0x8b
   5b3a0:	6003      	str	r3, [r0, #0]
   5b3a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b3a6:	b01b      	add	sp, #108	; 0x6c
   5b3a8:	bd30      	pop	{r4, r5, pc}
   5b3aa:	f44f 7302 	mov.w	r3, #520	; 0x208
   5b3ae:	9100      	str	r1, [sp, #0]
   5b3b0:	9104      	str	r1, [sp, #16]
   5b3b2:	4669      	mov	r1, sp
   5b3b4:	f8ad 300c 	strh.w	r3, [sp, #12]
   5b3b8:	bf14      	ite	ne
   5b3ba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   5b3be:	4623      	moveq	r3, r4
   5b3c0:	9302      	str	r3, [sp, #8]
   5b3c2:	9305      	str	r3, [sp, #20]
   5b3c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   5b3c8:	f8ad 300e 	strh.w	r3, [sp, #14]
   5b3cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   5b3ce:	f7f9 f99d 	bl	5470c <_svfiprintf_r>
   5b3d2:	1c43      	adds	r3, r0, #1
   5b3d4:	bfbc      	itt	lt
   5b3d6:	238b      	movlt	r3, #139	; 0x8b
   5b3d8:	602b      	strlt	r3, [r5, #0]
   5b3da:	2c00      	cmp	r4, #0
   5b3dc:	d0e3      	beq.n	5b3a6 <_vsniprintf_r+0x16>
   5b3de:	9b00      	ldr	r3, [sp, #0]
   5b3e0:	2200      	movs	r2, #0
   5b3e2:	701a      	strb	r2, [r3, #0]
   5b3e4:	e7df      	b.n	5b3a6 <_vsniprintf_r+0x16>

0005b3e6 <quorem>:
   5b3e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5b3ea:	6903      	ldr	r3, [r0, #16]
   5b3ec:	4607      	mov	r7, r0
   5b3ee:	690c      	ldr	r4, [r1, #16]
   5b3f0:	42a3      	cmp	r3, r4
   5b3f2:	f2c0 8083 	blt.w	5b4fc <quorem+0x116>
   5b3f6:	3c01      	subs	r4, #1
   5b3f8:	f100 0514 	add.w	r5, r0, #20
   5b3fc:	f101 0814 	add.w	r8, r1, #20
   5b400:	00a3      	lsls	r3, r4, #2
   5b402:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   5b406:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   5b40a:	9300      	str	r3, [sp, #0]
   5b40c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   5b410:	9301      	str	r3, [sp, #4]
   5b412:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   5b416:	3301      	adds	r3, #1
   5b418:	429a      	cmp	r2, r3
   5b41a:	fbb2 f6f3 	udiv	r6, r2, r3
   5b41e:	d331      	bcc.n	5b484 <quorem+0x9e>
   5b420:	f04f 0a00 	mov.w	sl, #0
   5b424:	46c4      	mov	ip, r8
   5b426:	46ae      	mov	lr, r5
   5b428:	46d3      	mov	fp, sl
   5b42a:	f85c 3b04 	ldr.w	r3, [ip], #4
   5b42e:	b298      	uxth	r0, r3
   5b430:	45e1      	cmp	r9, ip
   5b432:	ea4f 4313 	mov.w	r3, r3, lsr #16
   5b436:	fb06 a000 	mla	r0, r6, r0, sl
   5b43a:	ea4f 4210 	mov.w	r2, r0, lsr #16
   5b43e:	b280      	uxth	r0, r0
   5b440:	fb06 2303 	mla	r3, r6, r3, r2
   5b444:	f8de 2000 	ldr.w	r2, [lr]
   5b448:	b292      	uxth	r2, r2
   5b44a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   5b44e:	eba2 0200 	sub.w	r2, r2, r0
   5b452:	b29b      	uxth	r3, r3
   5b454:	f8de 0000 	ldr.w	r0, [lr]
   5b458:	445a      	add	r2, fp
   5b45a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   5b45e:	b292      	uxth	r2, r2
   5b460:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   5b464:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   5b468:	ea4f 4b23 	mov.w	fp, r3, asr #16
   5b46c:	f84e 2b04 	str.w	r2, [lr], #4
   5b470:	d2db      	bcs.n	5b42a <quorem+0x44>
   5b472:	9b00      	ldr	r3, [sp, #0]
   5b474:	58eb      	ldr	r3, [r5, r3]
   5b476:	b92b      	cbnz	r3, 5b484 <quorem+0x9e>
   5b478:	9b01      	ldr	r3, [sp, #4]
   5b47a:	3b04      	subs	r3, #4
   5b47c:	429d      	cmp	r5, r3
   5b47e:	461a      	mov	r2, r3
   5b480:	d330      	bcc.n	5b4e4 <quorem+0xfe>
   5b482:	613c      	str	r4, [r7, #16]
   5b484:	4638      	mov	r0, r7
   5b486:	f000 f89c 	bl	5b5c2 <__mcmp>
   5b48a:	2800      	cmp	r0, #0
   5b48c:	db26      	blt.n	5b4dc <quorem+0xf6>
   5b48e:	4629      	mov	r1, r5
   5b490:	2000      	movs	r0, #0
   5b492:	f858 2b04 	ldr.w	r2, [r8], #4
   5b496:	f8d1 c000 	ldr.w	ip, [r1]
   5b49a:	fa1f fe82 	uxth.w	lr, r2
   5b49e:	45c1      	cmp	r9, r8
   5b4a0:	fa1f f38c 	uxth.w	r3, ip
   5b4a4:	ea4f 4212 	mov.w	r2, r2, lsr #16
   5b4a8:	eba3 030e 	sub.w	r3, r3, lr
   5b4ac:	4403      	add	r3, r0
   5b4ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   5b4b2:	b29b      	uxth	r3, r3
   5b4b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   5b4b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   5b4bc:	ea4f 4022 	mov.w	r0, r2, asr #16
   5b4c0:	f841 3b04 	str.w	r3, [r1], #4
   5b4c4:	d2e5      	bcs.n	5b492 <quorem+0xac>
   5b4c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   5b4ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   5b4ce:	b922      	cbnz	r2, 5b4da <quorem+0xf4>
   5b4d0:	3b04      	subs	r3, #4
   5b4d2:	429d      	cmp	r5, r3
   5b4d4:	461a      	mov	r2, r3
   5b4d6:	d30b      	bcc.n	5b4f0 <quorem+0x10a>
   5b4d8:	613c      	str	r4, [r7, #16]
   5b4da:	3601      	adds	r6, #1
   5b4dc:	4630      	mov	r0, r6
   5b4de:	b003      	add	sp, #12
   5b4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5b4e4:	6812      	ldr	r2, [r2, #0]
   5b4e6:	3b04      	subs	r3, #4
   5b4e8:	2a00      	cmp	r2, #0
   5b4ea:	d1ca      	bne.n	5b482 <quorem+0x9c>
   5b4ec:	3c01      	subs	r4, #1
   5b4ee:	e7c5      	b.n	5b47c <quorem+0x96>
   5b4f0:	6812      	ldr	r2, [r2, #0]
   5b4f2:	3b04      	subs	r3, #4
   5b4f4:	2a00      	cmp	r2, #0
   5b4f6:	d1ef      	bne.n	5b4d8 <quorem+0xf2>
   5b4f8:	3c01      	subs	r4, #1
   5b4fa:	e7ea      	b.n	5b4d2 <quorem+0xec>
   5b4fc:	2000      	movs	r0, #0
   5b4fe:	e7ee      	b.n	5b4de <quorem+0xf8>

0005b500 <__ascii_mbtowc>:
   5b500:	b082      	sub	sp, #8
   5b502:	b901      	cbnz	r1, 5b506 <__ascii_mbtowc+0x6>
   5b504:	a901      	add	r1, sp, #4
   5b506:	b142      	cbz	r2, 5b51a <__ascii_mbtowc+0x1a>
   5b508:	b14b      	cbz	r3, 5b51e <__ascii_mbtowc+0x1e>
   5b50a:	7813      	ldrb	r3, [r2, #0]
   5b50c:	600b      	str	r3, [r1, #0]
   5b50e:	7812      	ldrb	r2, [r2, #0]
   5b510:	1e10      	subs	r0, r2, #0
   5b512:	bf18      	it	ne
   5b514:	2001      	movne	r0, #1
   5b516:	b002      	add	sp, #8
   5b518:	4770      	bx	lr
   5b51a:	4610      	mov	r0, r2
   5b51c:	e7fb      	b.n	5b516 <__ascii_mbtowc+0x16>
   5b51e:	f06f 0001 	mvn.w	r0, #1
   5b522:	e7f8      	b.n	5b516 <__ascii_mbtowc+0x16>

0005b524 <__hi0bits>:
   5b524:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   5b528:	4603      	mov	r3, r0
   5b52a:	bf36      	itet	cc
   5b52c:	0403      	lslcc	r3, r0, #16
   5b52e:	2000      	movcs	r0, #0
   5b530:	2010      	movcc	r0, #16
   5b532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   5b536:	bf3c      	itt	cc
   5b538:	021b      	lslcc	r3, r3, #8
   5b53a:	3008      	addcc	r0, #8
   5b53c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   5b540:	bf3c      	itt	cc
   5b542:	011b      	lslcc	r3, r3, #4
   5b544:	3004      	addcc	r0, #4
   5b546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   5b54a:	d303      	bcc.n	5b554 <__hi0bits+0x30>
   5b54c:	2b00      	cmp	r3, #0
   5b54e:	db0a      	blt.n	5b566 <__hi0bits+0x42>
   5b550:	3001      	adds	r0, #1
   5b552:	4770      	bx	lr
   5b554:	009b      	lsls	r3, r3, #2
   5b556:	d501      	bpl.n	5b55c <__hi0bits+0x38>
   5b558:	3002      	adds	r0, #2
   5b55a:	4770      	bx	lr
   5b55c:	005b      	lsls	r3, r3, #1
   5b55e:	d501      	bpl.n	5b564 <__hi0bits+0x40>
   5b560:	3003      	adds	r0, #3
   5b562:	4770      	bx	lr
   5b564:	2020      	movs	r0, #32
   5b566:	4770      	bx	lr

0005b568 <__lo0bits>:
   5b568:	6803      	ldr	r3, [r0, #0]
   5b56a:	4602      	mov	r2, r0
   5b56c:	f013 0007 	ands.w	r0, r3, #7
   5b570:	d00b      	beq.n	5b58a <__lo0bits+0x22>
   5b572:	07d9      	lsls	r1, r3, #31
   5b574:	d421      	bmi.n	5b5ba <__lo0bits+0x52>
   5b576:	0798      	lsls	r0, r3, #30
   5b578:	bf47      	ittee	mi
   5b57a:	085b      	lsrmi	r3, r3, #1
   5b57c:	2001      	movmi	r0, #1
   5b57e:	089b      	lsrpl	r3, r3, #2
   5b580:	2002      	movpl	r0, #2
   5b582:	bf4c      	ite	mi
   5b584:	6013      	strmi	r3, [r2, #0]
   5b586:	6013      	strpl	r3, [r2, #0]
   5b588:	4770      	bx	lr
   5b58a:	b299      	uxth	r1, r3
   5b58c:	b909      	cbnz	r1, 5b592 <__lo0bits+0x2a>
   5b58e:	0c1b      	lsrs	r3, r3, #16
   5b590:	2010      	movs	r0, #16
   5b592:	b2d9      	uxtb	r1, r3
   5b594:	b909      	cbnz	r1, 5b59a <__lo0bits+0x32>
   5b596:	3008      	adds	r0, #8
   5b598:	0a1b      	lsrs	r3, r3, #8
   5b59a:	0719      	lsls	r1, r3, #28
   5b59c:	bf04      	itt	eq
   5b59e:	091b      	lsreq	r3, r3, #4
   5b5a0:	3004      	addeq	r0, #4
   5b5a2:	0799      	lsls	r1, r3, #30
   5b5a4:	bf04      	itt	eq
   5b5a6:	089b      	lsreq	r3, r3, #2
   5b5a8:	3002      	addeq	r0, #2
   5b5aa:	07d9      	lsls	r1, r3, #31
   5b5ac:	d403      	bmi.n	5b5b6 <__lo0bits+0x4e>
   5b5ae:	085b      	lsrs	r3, r3, #1
   5b5b0:	f100 0001 	add.w	r0, r0, #1
   5b5b4:	d003      	beq.n	5b5be <__lo0bits+0x56>
   5b5b6:	6013      	str	r3, [r2, #0]
   5b5b8:	4770      	bx	lr
   5b5ba:	2000      	movs	r0, #0
   5b5bc:	4770      	bx	lr
   5b5be:	2020      	movs	r0, #32
   5b5c0:	4770      	bx	lr

0005b5c2 <__mcmp>:
   5b5c2:	4603      	mov	r3, r0
   5b5c4:	690a      	ldr	r2, [r1, #16]
   5b5c6:	6900      	ldr	r0, [r0, #16]
   5b5c8:	1a80      	subs	r0, r0, r2
   5b5ca:	b530      	push	{r4, r5, lr}
   5b5cc:	d10e      	bne.n	5b5ec <__mcmp+0x2a>
   5b5ce:	3314      	adds	r3, #20
   5b5d0:	3114      	adds	r1, #20
   5b5d2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   5b5d6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   5b5da:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   5b5de:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   5b5e2:	4295      	cmp	r5, r2
   5b5e4:	d003      	beq.n	5b5ee <__mcmp+0x2c>
   5b5e6:	d205      	bcs.n	5b5f4 <__mcmp+0x32>
   5b5e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b5ec:	bd30      	pop	{r4, r5, pc}
   5b5ee:	42a3      	cmp	r3, r4
   5b5f0:	d3f3      	bcc.n	5b5da <__mcmp+0x18>
   5b5f2:	e7fb      	b.n	5b5ec <__mcmp+0x2a>
   5b5f4:	2001      	movs	r0, #1
   5b5f6:	e7f9      	b.n	5b5ec <__mcmp+0x2a>

0005b5f8 <_realloc_r>:
   5b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5b5fa:	4607      	mov	r7, r0
   5b5fc:	4615      	mov	r5, r2
   5b5fe:	460c      	mov	r4, r1
   5b600:	b921      	cbnz	r1, 5b60c <_realloc_r+0x14>
   5b602:	4611      	mov	r1, r2
   5b604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   5b608:	f7f7 bf52 	b.w	534b0 <_malloc_r>
   5b60c:	b922      	cbnz	r2, 5b618 <_realloc_r+0x20>
   5b60e:	f7f7 ff05 	bl	5341c <_free_r>
   5b612:	2400      	movs	r4, #0
   5b614:	4620      	mov	r0, r4
   5b616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   5b618:	f000 f9fb 	bl	5ba12 <_malloc_usable_size_r>
   5b61c:	42a8      	cmp	r0, r5
   5b61e:	d2f9      	bcs.n	5b614 <_realloc_r+0x1c>
   5b620:	4629      	mov	r1, r5
   5b622:	4638      	mov	r0, r7
   5b624:	f7f7 ff44 	bl	534b0 <_malloc_r>
   5b628:	4606      	mov	r6, r0
   5b62a:	2800      	cmp	r0, #0
   5b62c:	d0f1      	beq.n	5b612 <_realloc_r+0x1a>
   5b62e:	4621      	mov	r1, r4
   5b630:	462a      	mov	r2, r5
   5b632:	f7ff fc57 	bl	5aee4 <memcpy>
   5b636:	4621      	mov	r1, r4
   5b638:	4638      	mov	r0, r7
   5b63a:	4634      	mov	r4, r6
   5b63c:	f7f7 feee 	bl	5341c <_free_r>
   5b640:	e7e8      	b.n	5b614 <_realloc_r+0x1c>

0005b642 <__ssputs_r>:
   5b642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   5b646:	461f      	mov	r7, r3
   5b648:	688e      	ldr	r6, [r1, #8]
   5b64a:	4682      	mov	sl, r0
   5b64c:	460c      	mov	r4, r1
   5b64e:	42be      	cmp	r6, r7
   5b650:	4690      	mov	r8, r2
   5b652:	680b      	ldr	r3, [r1, #0]
   5b654:	d82d      	bhi.n	5b6b2 <__ssputs_r+0x70>
   5b656:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   5b65a:	f412 6f90 	tst.w	r2, #1152	; 0x480
   5b65e:	d026      	beq.n	5b6ae <__ssputs_r+0x6c>
   5b660:	6965      	ldr	r5, [r4, #20]
   5b662:	6909      	ldr	r1, [r1, #16]
   5b664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   5b668:	eba3 0901 	sub.w	r9, r3, r1
   5b66c:	1c7b      	adds	r3, r7, #1
   5b66e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   5b672:	444b      	add	r3, r9
   5b674:	106d      	asrs	r5, r5, #1
   5b676:	429d      	cmp	r5, r3
   5b678:	bf38      	it	cc
   5b67a:	461d      	movcc	r5, r3
   5b67c:	0553      	lsls	r3, r2, #21
   5b67e:	d527      	bpl.n	5b6d0 <__ssputs_r+0x8e>
   5b680:	4629      	mov	r1, r5
   5b682:	f7f7 ff15 	bl	534b0 <_malloc_r>
   5b686:	4606      	mov	r6, r0
   5b688:	b360      	cbz	r0, 5b6e4 <__ssputs_r+0xa2>
   5b68a:	464a      	mov	r2, r9
   5b68c:	6921      	ldr	r1, [r4, #16]
   5b68e:	f7ff fc29 	bl	5aee4 <memcpy>
   5b692:	89a3      	ldrh	r3, [r4, #12]
   5b694:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   5b698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   5b69c:	81a3      	strh	r3, [r4, #12]
   5b69e:	6126      	str	r6, [r4, #16]
   5b6a0:	444e      	add	r6, r9
   5b6a2:	6165      	str	r5, [r4, #20]
   5b6a4:	eba5 0509 	sub.w	r5, r5, r9
   5b6a8:	6026      	str	r6, [r4, #0]
   5b6aa:	463e      	mov	r6, r7
   5b6ac:	60a5      	str	r5, [r4, #8]
   5b6ae:	42be      	cmp	r6, r7
   5b6b0:	d900      	bls.n	5b6b4 <__ssputs_r+0x72>
   5b6b2:	463e      	mov	r6, r7
   5b6b4:	4632      	mov	r2, r6
   5b6b6:	4641      	mov	r1, r8
   5b6b8:	6820      	ldr	r0, [r4, #0]
   5b6ba:	f7ff fc33 	bl	5af24 <memmove>
   5b6be:	68a3      	ldr	r3, [r4, #8]
   5b6c0:	2000      	movs	r0, #0
   5b6c2:	1b9b      	subs	r3, r3, r6
   5b6c4:	60a3      	str	r3, [r4, #8]
   5b6c6:	6823      	ldr	r3, [r4, #0]
   5b6c8:	4433      	add	r3, r6
   5b6ca:	6023      	str	r3, [r4, #0]
   5b6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   5b6d0:	462a      	mov	r2, r5
   5b6d2:	f7ff ff91 	bl	5b5f8 <_realloc_r>
   5b6d6:	4606      	mov	r6, r0
   5b6d8:	2800      	cmp	r0, #0
   5b6da:	d1e0      	bne.n	5b69e <__ssputs_r+0x5c>
   5b6dc:	6921      	ldr	r1, [r4, #16]
   5b6de:	4650      	mov	r0, sl
   5b6e0:	f7f7 fe9c 	bl	5341c <_free_r>
   5b6e4:	230c      	movs	r3, #12
   5b6e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b6ea:	f8ca 3000 	str.w	r3, [sl]
   5b6ee:	89a3      	ldrh	r3, [r4, #12]
   5b6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   5b6f4:	81a3      	strh	r3, [r4, #12]
   5b6f6:	e7e9      	b.n	5b6cc <__ssputs_r+0x8a>

0005b6f8 <_sungetc_r>:
   5b6f8:	b538      	push	{r3, r4, r5, lr}
   5b6fa:	1c4b      	adds	r3, r1, #1
   5b6fc:	4614      	mov	r4, r2
   5b6fe:	d103      	bne.n	5b708 <_sungetc_r+0x10>
   5b700:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   5b704:	4628      	mov	r0, r5
   5b706:	bd38      	pop	{r3, r4, r5, pc}
   5b708:	8993      	ldrh	r3, [r2, #12]
   5b70a:	b2cd      	uxtb	r5, r1
   5b70c:	f023 0320 	bic.w	r3, r3, #32
   5b710:	8193      	strh	r3, [r2, #12]
   5b712:	6853      	ldr	r3, [r2, #4]
   5b714:	6b52      	ldr	r2, [r2, #52]	; 0x34
   5b716:	b18a      	cbz	r2, 5b73c <_sungetc_r+0x44>
   5b718:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   5b71a:	429a      	cmp	r2, r3
   5b71c:	dd08      	ble.n	5b730 <_sungetc_r+0x38>
   5b71e:	6823      	ldr	r3, [r4, #0]
   5b720:	1e5a      	subs	r2, r3, #1
   5b722:	6022      	str	r2, [r4, #0]
   5b724:	f803 5c01 	strb.w	r5, [r3, #-1]
   5b728:	6863      	ldr	r3, [r4, #4]
   5b72a:	3301      	adds	r3, #1
   5b72c:	6063      	str	r3, [r4, #4]
   5b72e:	e7e9      	b.n	5b704 <_sungetc_r+0xc>
   5b730:	4621      	mov	r1, r4
   5b732:	f000 f872 	bl	5b81a <__submore>
   5b736:	2800      	cmp	r0, #0
   5b738:	d0f1      	beq.n	5b71e <_sungetc_r+0x26>
   5b73a:	e7e1      	b.n	5b700 <_sungetc_r+0x8>
   5b73c:	6921      	ldr	r1, [r4, #16]
   5b73e:	6822      	ldr	r2, [r4, #0]
   5b740:	b141      	cbz	r1, 5b754 <_sungetc_r+0x5c>
   5b742:	4291      	cmp	r1, r2
   5b744:	d206      	bcs.n	5b754 <_sungetc_r+0x5c>
   5b746:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   5b74a:	42a9      	cmp	r1, r5
   5b74c:	d102      	bne.n	5b754 <_sungetc_r+0x5c>
   5b74e:	3a01      	subs	r2, #1
   5b750:	6022      	str	r2, [r4, #0]
   5b752:	e7ea      	b.n	5b72a <_sungetc_r+0x32>
   5b754:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   5b758:	f104 0344 	add.w	r3, r4, #68	; 0x44
   5b75c:	6363      	str	r3, [r4, #52]	; 0x34
   5b75e:	2303      	movs	r3, #3
   5b760:	63a3      	str	r3, [r4, #56]	; 0x38
   5b762:	4623      	mov	r3, r4
   5b764:	f803 5f46 	strb.w	r5, [r3, #70]!
   5b768:	6023      	str	r3, [r4, #0]
   5b76a:	2301      	movs	r3, #1
   5b76c:	e7de      	b.n	5b72c <_sungetc_r+0x34>

0005b76e <__ssrefill_r>:
   5b76e:	b510      	push	{r4, lr}
   5b770:	460c      	mov	r4, r1
   5b772:	6b49      	ldr	r1, [r1, #52]	; 0x34
   5b774:	b169      	cbz	r1, 5b792 <__ssrefill_r+0x24>
   5b776:	f104 0344 	add.w	r3, r4, #68	; 0x44
   5b77a:	4299      	cmp	r1, r3
   5b77c:	d001      	beq.n	5b782 <__ssrefill_r+0x14>
   5b77e:	f7f7 fe4d 	bl	5341c <_free_r>
   5b782:	2000      	movs	r0, #0
   5b784:	6c23      	ldr	r3, [r4, #64]	; 0x40
   5b786:	6360      	str	r0, [r4, #52]	; 0x34
   5b788:	6063      	str	r3, [r4, #4]
   5b78a:	b113      	cbz	r3, 5b792 <__ssrefill_r+0x24>
   5b78c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   5b78e:	6023      	str	r3, [r4, #0]
   5b790:	bd10      	pop	{r4, pc}
   5b792:	6923      	ldr	r3, [r4, #16]
   5b794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b798:	6023      	str	r3, [r4, #0]
   5b79a:	2300      	movs	r3, #0
   5b79c:	6063      	str	r3, [r4, #4]
   5b79e:	89a3      	ldrh	r3, [r4, #12]
   5b7a0:	f043 0320 	orr.w	r3, r3, #32
   5b7a4:	81a3      	strh	r3, [r4, #12]
   5b7a6:	e7f3      	b.n	5b790 <__ssrefill_r+0x22>

0005b7a8 <__sccl>:
   5b7a8:	b570      	push	{r4, r5, r6, lr}
   5b7aa:	780b      	ldrb	r3, [r1, #0]
   5b7ac:	4604      	mov	r4, r0
   5b7ae:	3801      	subs	r0, #1
   5b7b0:	2b5e      	cmp	r3, #94	; 0x5e
   5b7b2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   5b7b6:	bf13      	iteet	ne
   5b7b8:	1c4a      	addne	r2, r1, #1
   5b7ba:	1c8a      	addeq	r2, r1, #2
   5b7bc:	784b      	ldrbeq	r3, [r1, #1]
   5b7be:	2100      	movne	r1, #0
   5b7c0:	bf08      	it	eq
   5b7c2:	2101      	moveq	r1, #1
   5b7c4:	f800 1f01 	strb.w	r1, [r0, #1]!
   5b7c8:	42a8      	cmp	r0, r5
   5b7ca:	d1fb      	bne.n	5b7c4 <__sccl+0x1c>
   5b7cc:	b90b      	cbnz	r3, 5b7d2 <__sccl+0x2a>
   5b7ce:	1e50      	subs	r0, r2, #1
   5b7d0:	bd70      	pop	{r4, r5, r6, pc}
   5b7d2:	f081 0101 	eor.w	r1, r1, #1
   5b7d6:	4610      	mov	r0, r2
   5b7d8:	54e1      	strb	r1, [r4, r3]
   5b7da:	4602      	mov	r2, r0
   5b7dc:	f812 5b01 	ldrb.w	r5, [r2], #1
   5b7e0:	2d2d      	cmp	r5, #45	; 0x2d
   5b7e2:	d005      	beq.n	5b7f0 <__sccl+0x48>
   5b7e4:	2d5d      	cmp	r5, #93	; 0x5d
   5b7e6:	d016      	beq.n	5b816 <__sccl+0x6e>
   5b7e8:	2d00      	cmp	r5, #0
   5b7ea:	d0f1      	beq.n	5b7d0 <__sccl+0x28>
   5b7ec:	462b      	mov	r3, r5
   5b7ee:	e7f2      	b.n	5b7d6 <__sccl+0x2e>
   5b7f0:	7846      	ldrb	r6, [r0, #1]
   5b7f2:	2e5d      	cmp	r6, #93	; 0x5d
   5b7f4:	d0fa      	beq.n	5b7ec <__sccl+0x44>
   5b7f6:	42b3      	cmp	r3, r6
   5b7f8:	dcf8      	bgt.n	5b7ec <__sccl+0x44>
   5b7fa:	3002      	adds	r0, #2
   5b7fc:	461a      	mov	r2, r3
   5b7fe:	3201      	adds	r2, #1
   5b800:	4296      	cmp	r6, r2
   5b802:	54a1      	strb	r1, [r4, r2]
   5b804:	dcfb      	bgt.n	5b7fe <__sccl+0x56>
   5b806:	1af2      	subs	r2, r6, r3
   5b808:	1c5d      	adds	r5, r3, #1
   5b80a:	3a01      	subs	r2, #1
   5b80c:	42b3      	cmp	r3, r6
   5b80e:	bfa8      	it	ge
   5b810:	2200      	movge	r2, #0
   5b812:	18ab      	adds	r3, r5, r2
   5b814:	e7e1      	b.n	5b7da <__sccl+0x32>
   5b816:	4610      	mov	r0, r2
   5b818:	e7da      	b.n	5b7d0 <__sccl+0x28>

0005b81a <__submore>:
   5b81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   5b81e:	460c      	mov	r4, r1
   5b820:	6b49      	ldr	r1, [r1, #52]	; 0x34
   5b822:	f104 0344 	add.w	r3, r4, #68	; 0x44
   5b826:	4299      	cmp	r1, r3
   5b828:	d11a      	bne.n	5b860 <__submore+0x46>
   5b82a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   5b82e:	f7f7 fe3f 	bl	534b0 <_malloc_r>
   5b832:	b918      	cbnz	r0, 5b83c <__submore+0x22>
   5b834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   5b83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   5b840:	6360      	str	r0, [r4, #52]	; 0x34
   5b842:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   5b846:	63a3      	str	r3, [r4, #56]	; 0x38
   5b848:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   5b84c:	7083      	strb	r3, [r0, #2]
   5b84e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   5b852:	7043      	strb	r3, [r0, #1]
   5b854:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   5b858:	7003      	strb	r3, [r0, #0]
   5b85a:	6020      	str	r0, [r4, #0]
   5b85c:	2000      	movs	r0, #0
   5b85e:	e7eb      	b.n	5b838 <__submore+0x1e>
   5b860:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   5b862:	0077      	lsls	r7, r6, #1
   5b864:	463a      	mov	r2, r7
   5b866:	f7ff fec7 	bl	5b5f8 <_realloc_r>
   5b86a:	4605      	mov	r5, r0
   5b86c:	2800      	cmp	r0, #0
   5b86e:	d0e1      	beq.n	5b834 <__submore+0x1a>
   5b870:	eb00 0806 	add.w	r8, r0, r6
   5b874:	4601      	mov	r1, r0
   5b876:	4632      	mov	r2, r6
   5b878:	4640      	mov	r0, r8
   5b87a:	f7ff fb33 	bl	5aee4 <memcpy>
   5b87e:	f8c4 8000 	str.w	r8, [r4]
   5b882:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   5b886:	e7e9      	b.n	5b85c <__submore+0x42>

0005b888 <__ascii_wctomb>:
   5b888:	4603      	mov	r3, r0
   5b88a:	4608      	mov	r0, r1
   5b88c:	b141      	cbz	r1, 5b8a0 <__ascii_wctomb+0x18>
   5b88e:	2aff      	cmp	r2, #255	; 0xff
   5b890:	d904      	bls.n	5b89c <__ascii_wctomb+0x14>
   5b892:	228a      	movs	r2, #138	; 0x8a
   5b894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b898:	601a      	str	r2, [r3, #0]
   5b89a:	4770      	bx	lr
   5b89c:	2001      	movs	r0, #1
   5b89e:	700a      	strb	r2, [r1, #0]
   5b8a0:	4770      	bx	lr

0005b8a2 <__sflush_r>:
   5b8a2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   5b8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   5b8aa:	0717      	lsls	r7, r2, #28
   5b8ac:	4605      	mov	r5, r0
   5b8ae:	460c      	mov	r4, r1
   5b8b0:	d456      	bmi.n	5b960 <__sflush_r+0xbe>
   5b8b2:	684b      	ldr	r3, [r1, #4]
   5b8b4:	2b00      	cmp	r3, #0
   5b8b6:	dc02      	bgt.n	5b8be <__sflush_r+0x1c>
   5b8b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   5b8ba:	2b00      	cmp	r3, #0
   5b8bc:	dd3d      	ble.n	5b93a <__sflush_r+0x98>
   5b8be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   5b8c0:	2e00      	cmp	r6, #0
   5b8c2:	d03a      	beq.n	5b93a <__sflush_r+0x98>
   5b8c4:	2300      	movs	r3, #0
   5b8c6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   5b8ca:	682f      	ldr	r7, [r5, #0]
   5b8cc:	6a21      	ldr	r1, [r4, #32]
   5b8ce:	602b      	str	r3, [r5, #0]
   5b8d0:	d025      	beq.n	5b91e <__sflush_r+0x7c>
   5b8d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
   5b8d4:	89a3      	ldrh	r3, [r4, #12]
   5b8d6:	0758      	lsls	r0, r3, #29
   5b8d8:	d505      	bpl.n	5b8e6 <__sflush_r+0x44>
   5b8da:	6863      	ldr	r3, [r4, #4]
   5b8dc:	1ad2      	subs	r2, r2, r3
   5b8de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   5b8e0:	b10b      	cbz	r3, 5b8e6 <__sflush_r+0x44>
   5b8e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   5b8e4:	1ad2      	subs	r2, r2, r3
   5b8e6:	6a21      	ldr	r1, [r4, #32]
   5b8e8:	2300      	movs	r3, #0
   5b8ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   5b8ec:	4628      	mov	r0, r5
   5b8ee:	47b0      	blx	r6
   5b8f0:	1c41      	adds	r1, r0, #1
   5b8f2:	d024      	beq.n	5b93e <__sflush_r+0x9c>
   5b8f4:	2300      	movs	r3, #0
   5b8f6:	6063      	str	r3, [r4, #4]
   5b8f8:	6923      	ldr	r3, [r4, #16]
   5b8fa:	6023      	str	r3, [r4, #0]
   5b8fc:	89a3      	ldrh	r3, [r4, #12]
   5b8fe:	04da      	lsls	r2, r3, #19
   5b900:	d500      	bpl.n	5b904 <__sflush_r+0x62>
   5b902:	6560      	str	r0, [r4, #84]	; 0x54
   5b904:	6b61      	ldr	r1, [r4, #52]	; 0x34
   5b906:	602f      	str	r7, [r5, #0]
   5b908:	b1b9      	cbz	r1, 5b93a <__sflush_r+0x98>
   5b90a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   5b90e:	4299      	cmp	r1, r3
   5b910:	d002      	beq.n	5b918 <__sflush_r+0x76>
   5b912:	4628      	mov	r0, r5
   5b914:	f7f7 fd82 	bl	5341c <_free_r>
   5b918:	2300      	movs	r3, #0
   5b91a:	6363      	str	r3, [r4, #52]	; 0x34
   5b91c:	e00d      	b.n	5b93a <__sflush_r+0x98>
   5b91e:	2301      	movs	r3, #1
   5b920:	4628      	mov	r0, r5
   5b922:	47b0      	blx	r6
   5b924:	1c46      	adds	r6, r0, #1
   5b926:	4602      	mov	r2, r0
   5b928:	d1d4      	bne.n	5b8d4 <__sflush_r+0x32>
   5b92a:	682b      	ldr	r3, [r5, #0]
   5b92c:	2b00      	cmp	r3, #0
   5b92e:	d0d1      	beq.n	5b8d4 <__sflush_r+0x32>
   5b930:	2b1d      	cmp	r3, #29
   5b932:	d001      	beq.n	5b938 <__sflush_r+0x96>
   5b934:	2b16      	cmp	r3, #22
   5b936:	d12a      	bne.n	5b98e <__sflush_r+0xec>
   5b938:	602f      	str	r7, [r5, #0]
   5b93a:	2000      	movs	r0, #0
   5b93c:	e02e      	b.n	5b99c <__sflush_r+0xfa>
   5b93e:	682a      	ldr	r2, [r5, #0]
   5b940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   5b944:	b142      	cbz	r2, 5b958 <__sflush_r+0xb6>
   5b946:	2a1d      	cmp	r2, #29
   5b948:	d001      	beq.n	5b94e <__sflush_r+0xac>
   5b94a:	2a16      	cmp	r2, #22
   5b94c:	d121      	bne.n	5b992 <__sflush_r+0xf0>
   5b94e:	2300      	movs	r3, #0
   5b950:	6063      	str	r3, [r4, #4]
   5b952:	6923      	ldr	r3, [r4, #16]
   5b954:	6023      	str	r3, [r4, #0]
   5b956:	e7d5      	b.n	5b904 <__sflush_r+0x62>
   5b958:	6062      	str	r2, [r4, #4]
   5b95a:	6922      	ldr	r2, [r4, #16]
   5b95c:	6022      	str	r2, [r4, #0]
   5b95e:	e7ce      	b.n	5b8fe <__sflush_r+0x5c>
   5b960:	690f      	ldr	r7, [r1, #16]
   5b962:	2f00      	cmp	r7, #0
   5b964:	d0e9      	beq.n	5b93a <__sflush_r+0x98>
   5b966:	0793      	lsls	r3, r2, #30
   5b968:	680e      	ldr	r6, [r1, #0]
   5b96a:	600f      	str	r7, [r1, #0]
   5b96c:	bf0c      	ite	eq
   5b96e:	694b      	ldreq	r3, [r1, #20]
   5b970:	2300      	movne	r3, #0
   5b972:	eba6 0807 	sub.w	r8, r6, r7
   5b976:	608b      	str	r3, [r1, #8]
   5b978:	f1b8 0f00 	cmp.w	r8, #0
   5b97c:	dddd      	ble.n	5b93a <__sflush_r+0x98>
   5b97e:	4643      	mov	r3, r8
   5b980:	463a      	mov	r2, r7
   5b982:	6a21      	ldr	r1, [r4, #32]
   5b984:	4628      	mov	r0, r5
   5b986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   5b988:	47b0      	blx	r6
   5b98a:	2800      	cmp	r0, #0
   5b98c:	dc08      	bgt.n	5b9a0 <__sflush_r+0xfe>
   5b98e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   5b992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   5b996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5b99a:	81a3      	strh	r3, [r4, #12]
   5b99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   5b9a0:	4407      	add	r7, r0
   5b9a2:	eba8 0800 	sub.w	r8, r8, r0
   5b9a6:	e7e7      	b.n	5b978 <__sflush_r+0xd6>

0005b9a8 <__sfmoreglue>:
   5b9a8:	b570      	push	{r4, r5, r6, lr}
   5b9aa:	2368      	movs	r3, #104	; 0x68
   5b9ac:	1e4d      	subs	r5, r1, #1
   5b9ae:	460e      	mov	r6, r1
   5b9b0:	435d      	muls	r5, r3
   5b9b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
   5b9b6:	f7f7 fd7b 	bl	534b0 <_malloc_r>
   5b9ba:	4604      	mov	r4, r0
   5b9bc:	b140      	cbz	r0, 5b9d0 <__sfmoreglue+0x28>
   5b9be:	2100      	movs	r1, #0
   5b9c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
   5b9c4:	e9c0 1600 	strd	r1, r6, [r0]
   5b9c8:	300c      	adds	r0, #12
   5b9ca:	60a0      	str	r0, [r4, #8]
   5b9cc:	f7ff fac4 	bl	5af58 <memset>
   5b9d0:	4620      	mov	r0, r4
   5b9d2:	bd70      	pop	{r4, r5, r6, pc}

0005b9d4 <_fwalk_reent>:
   5b9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   5b9d8:	4606      	mov	r6, r0
   5b9da:	4688      	mov	r8, r1
   5b9dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
   5b9e0:	2700      	movs	r7, #0
   5b9e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   5b9e6:	f1b9 0901 	subs.w	r9, r9, #1
   5b9ea:	d505      	bpl.n	5b9f8 <_fwalk_reent+0x24>
   5b9ec:	6824      	ldr	r4, [r4, #0]
   5b9ee:	2c00      	cmp	r4, #0
   5b9f0:	d1f7      	bne.n	5b9e2 <_fwalk_reent+0xe>
   5b9f2:	4638      	mov	r0, r7
   5b9f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   5b9f8:	89ab      	ldrh	r3, [r5, #12]
   5b9fa:	2b01      	cmp	r3, #1
   5b9fc:	d907      	bls.n	5ba0e <_fwalk_reent+0x3a>
   5b9fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   5ba02:	3301      	adds	r3, #1
   5ba04:	d003      	beq.n	5ba0e <_fwalk_reent+0x3a>
   5ba06:	4629      	mov	r1, r5
   5ba08:	4630      	mov	r0, r6
   5ba0a:	47c0      	blx	r8
   5ba0c:	4307      	orrs	r7, r0
   5ba0e:	3568      	adds	r5, #104	; 0x68
   5ba10:	e7e9      	b.n	5b9e6 <_fwalk_reent+0x12>

0005ba12 <_malloc_usable_size_r>:
   5ba12:	f851 3c04 	ldr.w	r3, [r1, #-4]
   5ba16:	1f18      	subs	r0, r3, #4
   5ba18:	2b00      	cmp	r3, #0
   5ba1a:	bfbc      	itt	lt
   5ba1c:	580b      	ldrlt	r3, [r1, r0]
   5ba1e:	18c0      	addlt	r0, r0, r3
   5ba20:	4770      	bx	lr

0005ba22 <__sfputc_r>:
   5ba22:	6893      	ldr	r3, [r2, #8]
   5ba24:	3b01      	subs	r3, #1
   5ba26:	2b00      	cmp	r3, #0
   5ba28:	6093      	str	r3, [r2, #8]
   5ba2a:	b410      	push	{r4}
   5ba2c:	da08      	bge.n	5ba40 <__sfputc_r+0x1e>
   5ba2e:	6994      	ldr	r4, [r2, #24]
   5ba30:	42a3      	cmp	r3, r4
   5ba32:	db01      	blt.n	5ba38 <__sfputc_r+0x16>
   5ba34:	290a      	cmp	r1, #10
   5ba36:	d103      	bne.n	5ba40 <__sfputc_r+0x1e>
   5ba38:	f85d 4b04 	ldr.w	r4, [sp], #4
   5ba3c:	f7f9 bc9c 	b.w	55378 <__swbuf_r>
   5ba40:	6813      	ldr	r3, [r2, #0]
   5ba42:	1c58      	adds	r0, r3, #1
   5ba44:	6010      	str	r0, [r2, #0]
   5ba46:	4608      	mov	r0, r1
   5ba48:	7019      	strb	r1, [r3, #0]
   5ba4a:	f85d 4b04 	ldr.w	r4, [sp], #4
   5ba4e:	4770      	bx	lr

0005ba50 <__sfputs_r>:
   5ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5ba52:	4606      	mov	r6, r0
   5ba54:	460f      	mov	r7, r1
   5ba56:	4614      	mov	r4, r2
   5ba58:	18d5      	adds	r5, r2, r3
   5ba5a:	42ac      	cmp	r4, r5
   5ba5c:	d101      	bne.n	5ba62 <__sfputs_r+0x12>
   5ba5e:	2000      	movs	r0, #0
   5ba60:	e007      	b.n	5ba72 <__sfputs_r+0x22>
   5ba62:	463a      	mov	r2, r7
   5ba64:	f814 1b01 	ldrb.w	r1, [r4], #1
   5ba68:	4630      	mov	r0, r6
   5ba6a:	f7ff ffda 	bl	5ba22 <__sfputc_r>
   5ba6e:	1c43      	adds	r3, r0, #1
   5ba70:	d1f3      	bne.n	5ba5a <__sfputs_r+0xa>
   5ba72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0005ba74 <abort>:
   5ba74:	2006      	movs	r0, #6
   5ba76:	b508      	push	{r3, lr}
   5ba78:	f7f9 fd7c 	bl	55574 <raise>
   5ba7c:	2001      	movs	r0, #1
   5ba7e:	f7eb f849 	bl	46b14 <_exit>

0005ba82 <__swhatbuf_r>:
   5ba82:	b570      	push	{r4, r5, r6, lr}
   5ba84:	460c      	mov	r4, r1
   5ba86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   5ba8a:	b096      	sub	sp, #88	; 0x58
   5ba8c:	4615      	mov	r5, r2
   5ba8e:	2900      	cmp	r1, #0
   5ba90:	461e      	mov	r6, r3
   5ba92:	da0c      	bge.n	5baae <__swhatbuf_r+0x2c>
   5ba94:	89a3      	ldrh	r3, [r4, #12]
   5ba96:	2100      	movs	r1, #0
   5ba98:	f013 0f80 	tst.w	r3, #128	; 0x80
   5ba9c:	bf14      	ite	ne
   5ba9e:	2340      	movne	r3, #64	; 0x40
   5baa0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   5baa4:	2000      	movs	r0, #0
   5baa6:	6031      	str	r1, [r6, #0]
   5baa8:	602b      	str	r3, [r5, #0]
   5baaa:	b016      	add	sp, #88	; 0x58
   5baac:	bd70      	pop	{r4, r5, r6, pc}
   5baae:	466a      	mov	r2, sp
   5bab0:	f7f9 fd7a 	bl	555a8 <_fstat_r>
   5bab4:	2800      	cmp	r0, #0
   5bab6:	dbed      	blt.n	5ba94 <__swhatbuf_r+0x12>
   5bab8:	9901      	ldr	r1, [sp, #4]
   5baba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   5babe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   5bac2:	4259      	negs	r1, r3
   5bac4:	4159      	adcs	r1, r3
   5bac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   5baca:	e7eb      	b.n	5baa4 <__swhatbuf_r+0x22>

0005bacc <_raise_r>:
   5bacc:	291f      	cmp	r1, #31
   5bace:	b538      	push	{r3, r4, r5, lr}
   5bad0:	4605      	mov	r5, r0
   5bad2:	460c      	mov	r4, r1
   5bad4:	d904      	bls.n	5bae0 <_raise_r+0x14>
   5bad6:	2316      	movs	r3, #22
   5bad8:	6003      	str	r3, [r0, #0]
   5bada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5bade:	bd38      	pop	{r3, r4, r5, pc}
   5bae0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   5bae2:	b112      	cbz	r2, 5baea <_raise_r+0x1e>
   5bae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   5bae8:	b94b      	cbnz	r3, 5bafe <_raise_r+0x32>
   5baea:	4628      	mov	r0, r5
   5baec:	f000 f816 	bl	5bb1c <_getpid_r>
   5baf0:	4622      	mov	r2, r4
   5baf2:	4601      	mov	r1, r0
   5baf4:	4628      	mov	r0, r5
   5baf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   5bafa:	f7f9 bd43 	b.w	55584 <_kill_r>
   5bafe:	2b01      	cmp	r3, #1
   5bb00:	d00a      	beq.n	5bb18 <_raise_r+0x4c>
   5bb02:	1c59      	adds	r1, r3, #1
   5bb04:	d103      	bne.n	5bb0e <_raise_r+0x42>
   5bb06:	2316      	movs	r3, #22
   5bb08:	6003      	str	r3, [r0, #0]
   5bb0a:	2001      	movs	r0, #1
   5bb0c:	e7e7      	b.n	5bade <_raise_r+0x12>
   5bb0e:	2100      	movs	r1, #0
   5bb10:	4620      	mov	r0, r4
   5bb12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   5bb16:	4798      	blx	r3
   5bb18:	2000      	movs	r0, #0
   5bb1a:	e7e0      	b.n	5bade <_raise_r+0x12>

0005bb1c <_getpid_r>:
   5bb1c:	f7fa bb16 	b.w	5614c <_getpid>
